
zmk.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00026000 <_vector_start>:
   26000:	20009430 	.word	0x20009430
   26004:	0002cec5 	.word	0x0002cec5
   26008:	0004c175 	.word	0x0004c175
   2600c:	0002ce99 	.word	0x0002ce99
   26010:	0002ce99 	.word	0x0002ce99
   26014:	0002ce99 	.word	0x0002ce99
   26018:	0002ce99 	.word	0x0002ce99
	...
   2602c:	0002cc09 	.word	0x0002cc09
   26030:	0002ce99 	.word	0x0002ce99
   26034:	00000000 	.word	0x00000000
   26038:	0002cbc1 	.word	0x0002cbc1
   2603c:	0002ce99 	.word	0x0002ce99

00026040 <_irq_vector_table>:
   26040:	0002cc85 00040585 0002cc85 0002cc85     ................
   26050:	0002cc85 0002cc85 0002cc85 0002cc85     ................
   26060:	0002cc85 0002cc85 0002cc85 0002cc85     ................
   26070:	0002cc85 0002cc85 0002cc85 0002cc85     ................
   26080:	0002cc85 0002cc85 0002cc85 0002cc85     ................
   26090:	0002cc85 0002cc85 0002cc85 0002cc85     ................
   260a0:	0002cc85 0002cc85 0002cc85 0002cc85     ................
   260b0:	0002cc85 0002cc85 0002cc85 0002cc85     ................
   260c0:	0002cc85 0002cc85 0002cc85 0002cc85     ................
   260d0:	0002cc85 0002cc85 0002cc85 0002cc85     ................
   260e0:	0002cc85 0002cc85 0002cc85 0002cc85     ................
   260f0:	0002cc85 0002cc85 0002cc85 0002cc85     ................

Disassembly of section text:

00026100 <__aeabi_uldivmod>:
   26100:	b953      	cbnz	r3, 26118 <__aeabi_uldivmod+0x18>
   26102:	b94a      	cbnz	r2, 26118 <__aeabi_uldivmod+0x18>
   26104:	2900      	cmp	r1, #0
   26106:	bf08      	it	eq
   26108:	2800      	cmpeq	r0, #0
   2610a:	bf1c      	itt	ne
   2610c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   26110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   26114:	f000 b974 	b.w	26400 <__aeabi_idiv0>
   26118:	f1ad 0c08 	sub.w	ip, sp, #8
   2611c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   26120:	f000 f806 	bl	26130 <__udivmoddi4>
   26124:	f8dd e004 	ldr.w	lr, [sp, #4]
   26128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2612c:	b004      	add	sp, #16
   2612e:	4770      	bx	lr

00026130 <__udivmoddi4>:
   26130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26134:	9e08      	ldr	r6, [sp, #32]
   26136:	4604      	mov	r4, r0
   26138:	4688      	mov	r8, r1
   2613a:	2b00      	cmp	r3, #0
   2613c:	f040 8085 	bne.w	2624a <__udivmoddi4+0x11a>
   26140:	428a      	cmp	r2, r1
   26142:	4615      	mov	r5, r2
   26144:	d948      	bls.n	261d8 <__udivmoddi4+0xa8>
   26146:	fab2 f282 	clz	r2, r2
   2614a:	b14a      	cbz	r2, 26160 <__udivmoddi4+0x30>
   2614c:	f1c2 0720 	rsb	r7, r2, #32
   26150:	fa01 f302 	lsl.w	r3, r1, r2
   26154:	fa20 f707 	lsr.w	r7, r0, r7
   26158:	4095      	lsls	r5, r2
   2615a:	ea47 0803 	orr.w	r8, r7, r3
   2615e:	4094      	lsls	r4, r2
   26160:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   26164:	0c23      	lsrs	r3, r4, #16
   26166:	fbb8 f7fe 	udiv	r7, r8, lr
   2616a:	fa1f fc85 	uxth.w	ip, r5
   2616e:	fb0e 8817 	mls	r8, lr, r7, r8
   26172:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   26176:	fb07 f10c 	mul.w	r1, r7, ip
   2617a:	4299      	cmp	r1, r3
   2617c:	d909      	bls.n	26192 <__udivmoddi4+0x62>
   2617e:	18eb      	adds	r3, r5, r3
   26180:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   26184:	f080 80e3 	bcs.w	2634e <__udivmoddi4+0x21e>
   26188:	4299      	cmp	r1, r3
   2618a:	f240 80e0 	bls.w	2634e <__udivmoddi4+0x21e>
   2618e:	3f02      	subs	r7, #2
   26190:	442b      	add	r3, r5
   26192:	1a5b      	subs	r3, r3, r1
   26194:	b2a4      	uxth	r4, r4
   26196:	fbb3 f0fe 	udiv	r0, r3, lr
   2619a:	fb0e 3310 	mls	r3, lr, r0, r3
   2619e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   261a2:	fb00 fc0c 	mul.w	ip, r0, ip
   261a6:	45a4      	cmp	ip, r4
   261a8:	d909      	bls.n	261be <__udivmoddi4+0x8e>
   261aa:	192c      	adds	r4, r5, r4
   261ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   261b0:	f080 80cb 	bcs.w	2634a <__udivmoddi4+0x21a>
   261b4:	45a4      	cmp	ip, r4
   261b6:	f240 80c8 	bls.w	2634a <__udivmoddi4+0x21a>
   261ba:	3802      	subs	r0, #2
   261bc:	442c      	add	r4, r5
   261be:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   261c2:	eba4 040c 	sub.w	r4, r4, ip
   261c6:	2700      	movs	r7, #0
   261c8:	b11e      	cbz	r6, 261d2 <__udivmoddi4+0xa2>
   261ca:	40d4      	lsrs	r4, r2
   261cc:	2300      	movs	r3, #0
   261ce:	e9c6 4300 	strd	r4, r3, [r6]
   261d2:	4639      	mov	r1, r7
   261d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   261d8:	2a00      	cmp	r2, #0
   261da:	d053      	beq.n	26284 <__udivmoddi4+0x154>
   261dc:	fab2 f282 	clz	r2, r2
   261e0:	2a00      	cmp	r2, #0
   261e2:	f040 80b6 	bne.w	26352 <__udivmoddi4+0x222>
   261e6:	1b49      	subs	r1, r1, r5
   261e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   261ec:	fa1f f885 	uxth.w	r8, r5
   261f0:	2701      	movs	r7, #1
   261f2:	fbb1 fcfe 	udiv	ip, r1, lr
   261f6:	0c23      	lsrs	r3, r4, #16
   261f8:	fb0e 111c 	mls	r1, lr, ip, r1
   261fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   26200:	fb08 f10c 	mul.w	r1, r8, ip
   26204:	4299      	cmp	r1, r3
   26206:	d907      	bls.n	26218 <__udivmoddi4+0xe8>
   26208:	18eb      	adds	r3, r5, r3
   2620a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   2620e:	d202      	bcs.n	26216 <__udivmoddi4+0xe6>
   26210:	4299      	cmp	r1, r3
   26212:	f200 80ec 	bhi.w	263ee <__udivmoddi4+0x2be>
   26216:	4684      	mov	ip, r0
   26218:	1a59      	subs	r1, r3, r1
   2621a:	b2a3      	uxth	r3, r4
   2621c:	fbb1 f0fe 	udiv	r0, r1, lr
   26220:	fb0e 1410 	mls	r4, lr, r0, r1
   26224:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   26228:	fb08 f800 	mul.w	r8, r8, r0
   2622c:	45a0      	cmp	r8, r4
   2622e:	d907      	bls.n	26240 <__udivmoddi4+0x110>
   26230:	192c      	adds	r4, r5, r4
   26232:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   26236:	d202      	bcs.n	2623e <__udivmoddi4+0x10e>
   26238:	45a0      	cmp	r8, r4
   2623a:	f200 80dc 	bhi.w	263f6 <__udivmoddi4+0x2c6>
   2623e:	4618      	mov	r0, r3
   26240:	eba4 0408 	sub.w	r4, r4, r8
   26244:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   26248:	e7be      	b.n	261c8 <__udivmoddi4+0x98>
   2624a:	428b      	cmp	r3, r1
   2624c:	d908      	bls.n	26260 <__udivmoddi4+0x130>
   2624e:	2e00      	cmp	r6, #0
   26250:	d078      	beq.n	26344 <__udivmoddi4+0x214>
   26252:	2700      	movs	r7, #0
   26254:	e9c6 0100 	strd	r0, r1, [r6]
   26258:	4638      	mov	r0, r7
   2625a:	4639      	mov	r1, r7
   2625c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26260:	fab3 f783 	clz	r7, r3
   26264:	b97f      	cbnz	r7, 26286 <__udivmoddi4+0x156>
   26266:	428b      	cmp	r3, r1
   26268:	d302      	bcc.n	26270 <__udivmoddi4+0x140>
   2626a:	4282      	cmp	r2, r0
   2626c:	f200 80bd 	bhi.w	263ea <__udivmoddi4+0x2ba>
   26270:	1a84      	subs	r4, r0, r2
   26272:	eb61 0303 	sbc.w	r3, r1, r3
   26276:	2001      	movs	r0, #1
   26278:	4698      	mov	r8, r3
   2627a:	2e00      	cmp	r6, #0
   2627c:	d0a9      	beq.n	261d2 <__udivmoddi4+0xa2>
   2627e:	e9c6 4800 	strd	r4, r8, [r6]
   26282:	e7a6      	b.n	261d2 <__udivmoddi4+0xa2>
   26284:	deff      	udf	#255	; 0xff
   26286:	f1c7 0520 	rsb	r5, r7, #32
   2628a:	40bb      	lsls	r3, r7
   2628c:	fa22 fc05 	lsr.w	ip, r2, r5
   26290:	ea4c 0c03 	orr.w	ip, ip, r3
   26294:	fa01 f407 	lsl.w	r4, r1, r7
   26298:	fa20 f805 	lsr.w	r8, r0, r5
   2629c:	fa21 f305 	lsr.w	r3, r1, r5
   262a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   262a4:	ea48 0404 	orr.w	r4, r8, r4
   262a8:	fbb3 f9fe 	udiv	r9, r3, lr
   262ac:	0c21      	lsrs	r1, r4, #16
   262ae:	fb0e 3319 	mls	r3, lr, r9, r3
   262b2:	fa1f f88c 	uxth.w	r8, ip
   262b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   262ba:	fb09 fa08 	mul.w	sl, r9, r8
   262be:	459a      	cmp	sl, r3
   262c0:	fa02 f207 	lsl.w	r2, r2, r7
   262c4:	fa00 f107 	lsl.w	r1, r0, r7
   262c8:	d90b      	bls.n	262e2 <__udivmoddi4+0x1b2>
   262ca:	eb1c 0303 	adds.w	r3, ip, r3
   262ce:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   262d2:	f080 8088 	bcs.w	263e6 <__udivmoddi4+0x2b6>
   262d6:	459a      	cmp	sl, r3
   262d8:	f240 8085 	bls.w	263e6 <__udivmoddi4+0x2b6>
   262dc:	f1a9 0902 	sub.w	r9, r9, #2
   262e0:	4463      	add	r3, ip
   262e2:	eba3 030a 	sub.w	r3, r3, sl
   262e6:	b2a4      	uxth	r4, r4
   262e8:	fbb3 f0fe 	udiv	r0, r3, lr
   262ec:	fb0e 3310 	mls	r3, lr, r0, r3
   262f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   262f4:	fb00 f808 	mul.w	r8, r0, r8
   262f8:	45a0      	cmp	r8, r4
   262fa:	d908      	bls.n	2630e <__udivmoddi4+0x1de>
   262fc:	eb1c 0404 	adds.w	r4, ip, r4
   26300:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   26304:	d26b      	bcs.n	263de <__udivmoddi4+0x2ae>
   26306:	45a0      	cmp	r8, r4
   26308:	d969      	bls.n	263de <__udivmoddi4+0x2ae>
   2630a:	3802      	subs	r0, #2
   2630c:	4464      	add	r4, ip
   2630e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   26312:	eba4 0408 	sub.w	r4, r4, r8
   26316:	fba0 8902 	umull	r8, r9, r0, r2
   2631a:	454c      	cmp	r4, r9
   2631c:	46c6      	mov	lr, r8
   2631e:	464b      	mov	r3, r9
   26320:	d354      	bcc.n	263cc <__udivmoddi4+0x29c>
   26322:	d051      	beq.n	263c8 <__udivmoddi4+0x298>
   26324:	2e00      	cmp	r6, #0
   26326:	d069      	beq.n	263fc <__udivmoddi4+0x2cc>
   26328:	ebb1 020e 	subs.w	r2, r1, lr
   2632c:	eb64 0403 	sbc.w	r4, r4, r3
   26330:	fa04 f505 	lsl.w	r5, r4, r5
   26334:	fa22 f307 	lsr.w	r3, r2, r7
   26338:	40fc      	lsrs	r4, r7
   2633a:	431d      	orrs	r5, r3
   2633c:	e9c6 5400 	strd	r5, r4, [r6]
   26340:	2700      	movs	r7, #0
   26342:	e746      	b.n	261d2 <__udivmoddi4+0xa2>
   26344:	4637      	mov	r7, r6
   26346:	4630      	mov	r0, r6
   26348:	e743      	b.n	261d2 <__udivmoddi4+0xa2>
   2634a:	4618      	mov	r0, r3
   2634c:	e737      	b.n	261be <__udivmoddi4+0x8e>
   2634e:	4607      	mov	r7, r0
   26350:	e71f      	b.n	26192 <__udivmoddi4+0x62>
   26352:	f1c2 0320 	rsb	r3, r2, #32
   26356:	fa20 f703 	lsr.w	r7, r0, r3
   2635a:	4095      	lsls	r5, r2
   2635c:	fa01 f002 	lsl.w	r0, r1, r2
   26360:	fa21 f303 	lsr.w	r3, r1, r3
   26364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   26368:	4338      	orrs	r0, r7
   2636a:	0c01      	lsrs	r1, r0, #16
   2636c:	fbb3 f7fe 	udiv	r7, r3, lr
   26370:	fa1f f885 	uxth.w	r8, r5
   26374:	fb0e 3317 	mls	r3, lr, r7, r3
   26378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   2637c:	fb07 f308 	mul.w	r3, r7, r8
   26380:	428b      	cmp	r3, r1
   26382:	fa04 f402 	lsl.w	r4, r4, r2
   26386:	d907      	bls.n	26398 <__udivmoddi4+0x268>
   26388:	1869      	adds	r1, r5, r1
   2638a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   2638e:	d228      	bcs.n	263e2 <__udivmoddi4+0x2b2>
   26390:	428b      	cmp	r3, r1
   26392:	d926      	bls.n	263e2 <__udivmoddi4+0x2b2>
   26394:	3f02      	subs	r7, #2
   26396:	4429      	add	r1, r5
   26398:	1acb      	subs	r3, r1, r3
   2639a:	b281      	uxth	r1, r0
   2639c:	fbb3 f0fe 	udiv	r0, r3, lr
   263a0:	fb0e 3310 	mls	r3, lr, r0, r3
   263a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   263a8:	fb00 f308 	mul.w	r3, r0, r8
   263ac:	428b      	cmp	r3, r1
   263ae:	d907      	bls.n	263c0 <__udivmoddi4+0x290>
   263b0:	1869      	adds	r1, r5, r1
   263b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   263b6:	d210      	bcs.n	263da <__udivmoddi4+0x2aa>
   263b8:	428b      	cmp	r3, r1
   263ba:	d90e      	bls.n	263da <__udivmoddi4+0x2aa>
   263bc:	3802      	subs	r0, #2
   263be:	4429      	add	r1, r5
   263c0:	1ac9      	subs	r1, r1, r3
   263c2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   263c6:	e714      	b.n	261f2 <__udivmoddi4+0xc2>
   263c8:	4541      	cmp	r1, r8
   263ca:	d2ab      	bcs.n	26324 <__udivmoddi4+0x1f4>
   263cc:	ebb8 0e02 	subs.w	lr, r8, r2
   263d0:	eb69 020c 	sbc.w	r2, r9, ip
   263d4:	3801      	subs	r0, #1
   263d6:	4613      	mov	r3, r2
   263d8:	e7a4      	b.n	26324 <__udivmoddi4+0x1f4>
   263da:	4660      	mov	r0, ip
   263dc:	e7f0      	b.n	263c0 <__udivmoddi4+0x290>
   263de:	4618      	mov	r0, r3
   263e0:	e795      	b.n	2630e <__udivmoddi4+0x1de>
   263e2:	4667      	mov	r7, ip
   263e4:	e7d8      	b.n	26398 <__udivmoddi4+0x268>
   263e6:	4681      	mov	r9, r0
   263e8:	e77b      	b.n	262e2 <__udivmoddi4+0x1b2>
   263ea:	4638      	mov	r0, r7
   263ec:	e745      	b.n	2627a <__udivmoddi4+0x14a>
   263ee:	f1ac 0c02 	sub.w	ip, ip, #2
   263f2:	442b      	add	r3, r5
   263f4:	e710      	b.n	26218 <__udivmoddi4+0xe8>
   263f6:	3802      	subs	r0, #2
   263f8:	442c      	add	r4, r5
   263fa:	e721      	b.n	26240 <__udivmoddi4+0x110>
   263fc:	4637      	mov	r7, r6
   263fe:	e6e8      	b.n	261d2 <__udivmoddi4+0xa2>

00026400 <__aeabi_idiv0>:
   26400:	4770      	bx	lr
   26402:	bf00      	nop
   26404:	0000      	movs	r0, r0
	...

00026408 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   26408:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   2640a:	4d40      	ldr	r5, [pc, #256]	; (2650c <bt_init+0x104>)
   2640c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   26410:	6899      	ldr	r1, [r3, #8]
   26412:	f011 0101 	ands.w	r1, r1, #1
   26416:	d123      	bne.n	26460 <bt_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   26418:	aa01      	add	r2, sp, #4
   2641a:	f640 4003 	movw	r0, #3075	; 0xc03
   2641e:	f007 fc57 	bl	2dcd0 <bt_hci_cmd_send_sync>
		if (err) {
   26422:	4604      	mov	r4, r0
   26424:	2800      	cmp	r0, #0
   26426:	d16e      	bne.n	26506 <bt_init+0xfe>
	uint8_t status = buf->data[0];
   26428:	9b01      	ldr	r3, [sp, #4]
   2642a:	689b      	ldr	r3, [r3, #8]
	if (status) {
   2642c:	781b      	ldrb	r3, [r3, #0]
   2642e:	b9a3      	cbnz	r3, 2645a <bt_init+0x52>
		bt_scan_reset();
   26430:	f008 fed8 	bl	2f1e4 <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26434:	f3bf 8f5b 	dmb	ish
   26438:	462b      	mov	r3, r5
   2643a:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   2643e:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   26442:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26446:	f3bf 8f5b 	dmb	ish
   2644a:	e853 1f00 	ldrex	r1, [r3]
   2644e:	e843 2000 	strex	r0, r2, [r3]
   26452:	2800      	cmp	r0, #0
   26454:	d1f9      	bne.n	2644a <bt_init+0x42>
   26456:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   2645a:	9801      	ldr	r0, [sp, #4]
   2645c:	f01d fe04 	bl	44068 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   26460:	aa01      	add	r2, sp, #4
   26462:	2100      	movs	r1, #0
   26464:	f241 0003 	movw	r0, #4099	; 0x1003
   26468:	f007 fc32 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   2646c:	4604      	mov	r4, r0
   2646e:	2800      	cmp	r0, #0
   26470:	d149      	bne.n	26506 <bt_init+0xfe>
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   26472:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   26474:	4826      	ldr	r0, [pc, #152]	; (26510 <bt_init+0x108>)
   26476:	6899      	ldr	r1, [r3, #8]
   26478:	2208      	movs	r2, #8
   2647a:	3101      	adds	r1, #1
   2647c:	f025 ff36 	bl	4c2ec <memcpy>
	net_buf_unref(rsp);
   26480:	9801      	ldr	r0, [sp, #4]
   26482:	f01d fdf1 	bl	44068 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   26486:	4621      	mov	r1, r4
   26488:	aa01      	add	r2, sp, #4
   2648a:	f241 0001 	movw	r0, #4097	; 0x1001
   2648e:	f007 fc1f 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   26492:	4604      	mov	r4, r0
   26494:	2800      	cmp	r0, #0
   26496:	d136      	bne.n	26506 <bt_init+0xfe>
	read_local_ver_complete(rsp);
   26498:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   2649a:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   2649c:	785a      	ldrb	r2, [r3, #1]
   2649e:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   264a2:	78d9      	ldrb	r1, [r3, #3]
   264a4:	789a      	ldrb	r2, [r3, #2]
   264a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   264aa:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   264ae:	791a      	ldrb	r2, [r3, #4]
   264b0:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   264b4:	7a19      	ldrb	r1, [r3, #8]
   264b6:	79da      	ldrb	r2, [r3, #7]
   264b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   264bc:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   264c0:	795a      	ldrb	r2, [r3, #5]
   264c2:	799b      	ldrb	r3, [r3, #6]
   264c4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   264c8:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   264cc:	f01d fdcc 	bl	44068 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   264d0:	4621      	mov	r1, r4
   264d2:	aa01      	add	r2, sp, #4
   264d4:	f241 0002 	movw	r0, #4098	; 0x1002
   264d8:	f007 fbfa 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   264dc:	4604      	mov	r4, r0
   264de:	b990      	cbnz	r0, 26506 <bt_init+0xfe>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   264e0:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   264e2:	480c      	ldr	r0, [pc, #48]	; (26514 <bt_init+0x10c>)
   264e4:	6899      	ldr	r1, [r3, #8]
   264e6:	2240      	movs	r2, #64	; 0x40
   264e8:	3101      	adds	r1, #1
   264ea:	f025 feff 	bl	4c2ec <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   264ee:	4809      	ldr	r0, [pc, #36]	; (26514 <bt_init+0x10c>)
   264f0:	f025 ffb1 	bl	4c456 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   264f4:	9801      	ldr	r0, [sp, #4]
   264f6:	f01d fdb7 	bl	44068 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   264fa:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   264fe:	0658      	lsls	r0, r3, #25
   26500:	d40a      	bmi.n	26518 <bt_init+0x110>
		return -ENODEV;
   26502:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   26506:	4620      	mov	r0, r4
   26508:	b002      	add	sp, #8
   2650a:	bd70      	pop	{r4, r5, r6, pc}
   2650c:	20000000 	.word	0x20000000
   26510:	20000070 	.word	0x20000070
   26514:	20000078 	.word	0x20000078
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   26518:	4621      	mov	r1, r4
   2651a:	aa01      	add	r2, sp, #4
   2651c:	f242 0003 	movw	r0, #8195	; 0x2003
   26520:	f007 fbd6 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   26524:	4604      	mov	r4, r0
   26526:	2800      	cmp	r0, #0
   26528:	d1ed      	bne.n	26506 <bt_init+0xfe>
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   2652a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   2652c:	48ba      	ldr	r0, [pc, #744]	; (26818 <bt_init+0x410>)
   2652e:	6899      	ldr	r1, [r3, #8]
   26530:	2208      	movs	r2, #8
   26532:	3101      	adds	r1, #1
   26534:	f025 feda 	bl	4c2ec <memcpy>
	net_buf_unref(rsp);
   26538:	9801      	ldr	r0, [sp, #4]
   2653a:	f01d fd95 	bl	44068 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   2653e:	4621      	mov	r1, r4
   26540:	aa01      	add	r2, sp, #4
   26542:	f242 0002 	movw	r0, #8194	; 0x2002
   26546:	f007 fbc3 	bl	2dcd0 <bt_hci_cmd_send_sync>
		if (err) {
   2654a:	4604      	mov	r4, r0
   2654c:	2800      	cmp	r0, #0
   2654e:	d1da      	bne.n	26506 <bt_init+0xfe>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   26550:	9b01      	ldr	r3, [sp, #4]
   26552:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   26554:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   26558:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   2655c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   2655e:	b121      	cbz	r1, 2656a <bt_init+0x162>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   26560:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   26562:	48ae      	ldr	r0, [pc, #696]	; (2681c <bt_init+0x414>)
   26564:	4611      	mov	r1, r2
   26566:	f02a fd82 	bl	5106e <z_impl_k_sem_init>
		net_buf_unref(rsp);
   2656a:	9801      	ldr	r0, [sp, #4]
   2656c:	f01d fd7c 	bl	44068 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   26570:	f895 4074 	ldrb.w	r4, [r5, #116]	; 0x74
   26574:	f014 0420 	ands.w	r4, r4, #32
   26578:	f000 8121 	beq.w	267be <bt_init+0x3b6>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   2657c:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   26580:	0719      	lsls	r1, r3, #28
   26582:	d511      	bpl.n	265a8 <bt_init+0x1a0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   26584:	aa01      	add	r2, sp, #4
   26586:	2100      	movs	r1, #0
   26588:	f242 001c 	movw	r0, #8220	; 0x201c
   2658c:	f007 fba0 	bl	2dcd0 <bt_hci_cmd_send_sync>
		if (err) {
   26590:	4604      	mov	r4, r0
   26592:	2800      	cmp	r0, #0
   26594:	d1b7      	bne.n	26506 <bt_init+0xfe>
		le_read_supp_states_complete(rsp);
   26596:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   26598:	6883      	ldr	r3, [r0, #8]
   2659a:	f853 2f01 	ldr.w	r2, [r3, #1]!
   2659e:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   265a0:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   265a4:	f01d fd60 	bl	44068 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   265a8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   265ac:	069a      	lsls	r2, r3, #26
   265ae:	d523      	bpl.n	265f8 <bt_init+0x1f0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   265b0:	f10d 0102 	add.w	r1, sp, #2
   265b4:	4668      	mov	r0, sp
   265b6:	f026 f9b9 	bl	4c92c <hci_le_read_max_data_len>
		if (err) {
   265ba:	4604      	mov	r4, r0
   265bc:	2800      	cmp	r0, #0
   265be:	d1a2      	bne.n	26506 <bt_init+0xfe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   265c0:	2104      	movs	r1, #4
   265c2:	f242 0024 	movw	r0, #8228	; 0x2024
   265c6:	f007 fb29 	bl	2dc1c <bt_hci_cmd_create>
		if (!buf) {
   265ca:	4606      	mov	r6, r0
   265cc:	2800      	cmp	r0, #0
   265ce:	f000 80fd 	beq.w	267cc <bt_init+0x3c4>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   265d2:	2104      	movs	r1, #4
   265d4:	3008      	adds	r0, #8
   265d6:	f029 fdde 	bl	50196 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   265da:	f8bd 3000 	ldrh.w	r3, [sp]
   265de:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   265e0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   265e4:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   265e6:	4622      	mov	r2, r4
   265e8:	4631      	mov	r1, r6
   265ea:	f242 0024 	movw	r0, #8228	; 0x2024
   265ee:	f007 fb6f 	bl	2dcd0 <bt_hci_cmd_send_sync>
		if (err) {
   265f2:	4604      	mov	r4, r0
   265f4:	2800      	cmp	r0, #0
   265f6:	d186      	bne.n	26506 <bt_init+0xfe>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   265f8:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   265fc:	065b      	lsls	r3, r3, #25
   265fe:	d510      	bpl.n	26622 <bt_init+0x21a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   26600:	aa01      	add	r2, sp, #4
   26602:	2100      	movs	r1, #0
   26604:	f242 002a 	movw	r0, #8234	; 0x202a
   26608:	f007 fb62 	bl	2dcd0 <bt_hci_cmd_send_sync>
		if (err) {
   2660c:	4604      	mov	r4, r0
   2660e:	2800      	cmp	r0, #0
   26610:	f47f af79 	bne.w	26506 <bt_init+0xfe>
		le_read_resolving_list_size_complete(rsp);
   26614:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
   26616:	6883      	ldr	r3, [r0, #8]
   26618:	785b      	ldrb	r3, [r3, #1]
   2661a:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   2661e:	f01d fd23 	bl	44068 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   26622:	2108      	movs	r1, #8
   26624:	f242 0001 	movw	r0, #8193	; 0x2001
   26628:	f007 faf8 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   2662c:	4604      	mov	r4, r0
   2662e:	2800      	cmp	r0, #0
   26630:	f000 80cc 	beq.w	267cc <bt_init+0x3c4>
   26634:	2108      	movs	r1, #8
   26636:	4408      	add	r0, r1
   26638:	f029 fdad 	bl	50196 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   2663c:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   26640:	f011 0f40 	tst.w	r1, #64	; 0x40
   26644:	f240 2302 	movw	r3, #514	; 0x202
   26648:	bf08      	it	eq
   2664a:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   2664c:	078e      	lsls	r6, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   2664e:	bf4c      	ite	mi
   26650:	f043 032c 	orrmi.w	r3, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   26654:	f043 030c 	orrpl.w	r3, r3, #12
   26658:	4602      	mov	r2, r0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   2665a:	0688      	lsls	r0, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   2665c:	f895 00d1 	ldrb.w	r0, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   26660:	bf48      	it	mi
   26662:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   26666:	f010 0f09 	tst.w	r0, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   2666a:	bf18      	it	ne
   2666c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   26670:	07ce      	lsls	r6, r1, #31
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26672:	f895 109a 	ldrb.w	r1, [r5, #154]	; 0x9a
   26676:	f001 0106 	and.w	r1, r1, #6
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   2667a:	bf48      	it	mi
   2667c:	f043 0310 	orrmi.w	r3, r3, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   26680:	2906      	cmp	r1, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   26682:	bf08      	it	eq
   26684:	f443 73c0 	orreq.w	r3, r3, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   26688:	4618      	mov	r0, r3
   2668a:	2100      	movs	r1, #0
   2668c:	f026 f88f 	bl	4c7ae <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   26690:	4621      	mov	r1, r4
   26692:	2200      	movs	r2, #0
   26694:	f242 0001 	movw	r0, #8193	; 0x2001
   26698:	f007 fb1a 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   2669c:	4604      	mov	r4, r0
   2669e:	2800      	cmp	r0, #0
   266a0:	f47f af31 	bne.w	26506 <bt_init+0xfe>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   266a4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   266a8:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   266ac:	0698      	lsls	r0, r3, #26
   266ae:	f100 80a2 	bmi.w	267f6 <bt_init+0x3ee>
	if (bt_dev.le.acl_mtu) {
   266b2:	b9d9      	cbnz	r1, 266ec <bt_init+0x2e4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   266b4:	aa01      	add	r2, sp, #4
   266b6:	f241 0005 	movw	r0, #4101	; 0x1005
   266ba:	f007 fb09 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   266be:	4604      	mov	r4, r0
   266c0:	2800      	cmp	r0, #0
   266c2:	f47f af20 	bne.w	26506 <bt_init+0xfe>
	if (bt_dev.le.acl_mtu) {
   266c6:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   266ca:	b963      	cbnz	r3, 266e6 <bt_init+0x2de>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   266cc:	9b01      	ldr	r3, [sp, #4]
   266ce:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   266d0:	785a      	ldrb	r2, [r3, #1]
   266d2:	7899      	ldrb	r1, [r3, #2]
   266d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   266d8:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   266dc:	889a      	ldrh	r2, [r3, #4]
   266de:	484f      	ldr	r0, [pc, #316]	; (2681c <bt_init+0x414>)
   266e0:	4611      	mov	r1, r2
   266e2:	f02a fcc4 	bl	5106e <z_impl_k_sem_init>
	net_buf_unref(rsp);
   266e6:	9801      	ldr	r0, [sp, #4]
   266e8:	f01d fcbe 	bl	44068 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   266ec:	2108      	movs	r1, #8
   266ee:	f640 4001 	movw	r0, #3073	; 0xc01
   266f2:	f007 fa93 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   266f6:	4604      	mov	r4, r0
   266f8:	2800      	cmp	r0, #0
   266fa:	d067      	beq.n	267cc <bt_init+0x3c4>
   266fc:	2108      	movs	r1, #8
   266fe:	4408      	add	r0, r1
   26700:	f029 fd49 	bl	50196 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   26704:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   26708:	07d9      	lsls	r1, r3, #31
   2670a:	4602      	mov	r2, r0
   2670c:	d579      	bpl.n	26802 <bt_init+0x3fa>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   2670e:	a140      	add	r1, pc, #256	; (adr r1, 26810 <bt_init+0x408>)
   26710:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   26714:	f026 f84b 	bl	4c7ae <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   26718:	4621      	mov	r1, r4
   2671a:	2200      	movs	r2, #0
   2671c:	f640 4001 	movw	r0, #3073	; 0xc01
   26720:	f007 fad6 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   26724:	4604      	mov	r4, r0
   26726:	2800      	cmp	r0, #0
   26728:	f47f aeed 	bne.w	26506 <bt_init+0xfe>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   2672c:	4601      	mov	r1, r0
   2672e:	aa01      	add	r2, sp, #4
   26730:	f64f 4001 	movw	r0, #64513	; 0xfc01
   26734:	f007 facc 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   26738:	4604      	mov	r4, r0
   2673a:	bb48      	cbnz	r0, 26790 <bt_init+0x388>
	net_buf_unref(rsp);
   2673c:	9801      	ldr	r0, [sp, #4]
   2673e:	f01d fc93 	bl	44068 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   26742:	4621      	mov	r1, r4
   26744:	aa01      	add	r2, sp, #4
   26746:	f64f 4002 	movw	r0, #64514	; 0xfc02
   2674a:	f007 fac1 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   2674e:	4604      	mov	r4, r0
   26750:	b9f0      	cbnz	r0, 26790 <bt_init+0x388>
	rp.cmds = (void *)rsp->data;
   26752:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   26754:	4832      	ldr	r0, [pc, #200]	; (26820 <bt_init+0x418>)
   26756:	6899      	ldr	r1, [r3, #8]
   26758:	2202      	movs	r2, #2
   2675a:	3101      	adds	r1, #1
   2675c:	f025 fdc6 	bl	4c2ec <memcpy>
	net_buf_unref(rsp);
   26760:	9801      	ldr	r0, [sp, #4]
   26762:	f01d fc81 	bl	44068 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   26766:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   2676a:	075b      	lsls	r3, r3, #29
   2676c:	d510      	bpl.n	26790 <bt_init+0x388>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   2676e:	aa01      	add	r2, sp, #4
   26770:	4621      	mov	r1, r4
   26772:	f64f 4003 	movw	r0, #64515	; 0xfc03
   26776:	f007 faab 	bl	2dcd0 <bt_hci_cmd_send_sync>
		if (err) {
   2677a:	b948      	cbnz	r0, 26790 <bt_init+0x388>
		rp.feat = (void *)rsp->data;
   2677c:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   2677e:	4829      	ldr	r0, [pc, #164]	; (26824 <bt_init+0x41c>)
   26780:	6899      	ldr	r1, [r3, #8]
   26782:	2201      	movs	r2, #1
   26784:	4411      	add	r1, r2
   26786:	f025 fdb1 	bl	4c2ec <memcpy>
		net_buf_unref(rsp);
   2678a:	9801      	ldr	r0, [sp, #4]
   2678c:	f01d fc6c 	bl	44068 <net_buf_unref>
	err = bt_id_init();
   26790:	f026 fb18 	bl	4cdc4 <bt_id_init>
	if (err) {
   26794:	4604      	mov	r4, r0
   26796:	2800      	cmp	r0, #0
   26798:	f47f aeb5 	bne.w	26506 <bt_init+0xfe>
		err = bt_conn_init();
   2679c:	f009 fe9c 	bl	304d8 <bt_conn_init>
		if (err) {
   267a0:	4604      	mov	r4, r0
   267a2:	2800      	cmp	r0, #0
   267a4:	f47f aeaf 	bne.w	26506 <bt_init+0xfe>
		if (!bt_dev.id_count) {
   267a8:	79eb      	ldrb	r3, [r5, #7]
   267aa:	2b00      	cmp	r3, #0
   267ac:	f43f aeab 	beq.w	26506 <bt_init+0xfe>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   267b0:	2104      	movs	r1, #4
   267b2:	481d      	ldr	r0, [pc, #116]	; (26828 <bt_init+0x420>)
   267b4:	f025 ff05 	bl	4c5c2 <atomic_or>
	bt_finalize_init();
   267b8:	f007 fe28 	bl	2e40c <bt_finalize_init>
	return 0;
   267bc:	e6a3      	b.n	26506 <bt_init+0xfe>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   267be:	2102      	movs	r1, #2
   267c0:	f640 406d 	movw	r0, #3181	; 0xc6d
   267c4:	f007 fa2a 	bl	2dc1c <bt_hci_cmd_create>
		if (!buf) {
   267c8:	4606      	mov	r6, r0
   267ca:	b910      	cbnz	r0, 267d2 <bt_init+0x3ca>
		return -ENOBUFS;
   267cc:	f06f 0468 	mvn.w	r4, #104	; 0x68
   267d0:	e699      	b.n	26506 <bt_init+0xfe>
   267d2:	2102      	movs	r1, #2
   267d4:	3008      	adds	r0, #8
   267d6:	f029 fcde 	bl	50196 <net_buf_simple_add>
		cp_le->le = 0x01;
   267da:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
   267dc:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
   267de:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   267e0:	4622      	mov	r2, r4
   267e2:	4631      	mov	r1, r6
   267e4:	f640 406d 	movw	r0, #3181	; 0xc6d
   267e8:	f007 fa72 	bl	2dcd0 <bt_hci_cmd_send_sync>
		if (err) {
   267ec:	4604      	mov	r4, r0
   267ee:	2800      	cmp	r0, #0
   267f0:	f43f aec4 	beq.w	2657c <bt_init+0x174>
   267f4:	e687      	b.n	26506 <bt_init+0xfe>
	else if (!bt_dev.le.acl_mtu) {
   267f6:	2900      	cmp	r1, #0
   267f8:	f47f af78 	bne.w	266ec <bt_init+0x2e4>
		return -EIO;
   267fc:	f06f 0404 	mvn.w	r4, #4
   26800:	e681      	b.n	26506 <bt_init+0xfe>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   26802:	480a      	ldr	r0, [pc, #40]	; (2682c <bt_init+0x424>)
   26804:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   26808:	e784      	b.n	26714 <bt_init+0x30c>
   2680a:	bf00      	nop
   2680c:	f3af 8000 	nop.w
   26810:	02008890 	.word	0x02008890
   26814:	20008000 	.word	0x20008000
   26818:	200000d0 	.word	0x200000d0
   2681c:	20000100 	.word	0x20000100
   26820:	200000b9 	.word	0x200000b9
   26824:	200000b8 	.word	0x200000b8
   26828:	200000cc 	.word	0x200000cc
   2682c:	02008810 	.word	0x02008810

00026830 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
   26830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26834:	460f      	mov	r7, r1

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
   26836:	e9d0 150b 	ldrd	r1, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
   2683a:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
   2683c:	194c      	adds	r4, r1, r5
	start_to_address_expected_us = EVENT_JITTER_US +
   2683e:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
   26840:	42a6      	cmp	r6, r4
{
   26842:	4690      	mov	r8, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
   26844:	d818      	bhi.n	26878 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   26846:	4d14      	ldr	r5, [pc, #80]	; (26898 <ull_drift_ticks_get+0x68>)
   26848:	a311      	add	r3, pc, #68	; (adr r3, 26890 <ull_drift_ticks_get+0x60>)
   2684a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2684e:	fba1 0105 	umull	r0, r1, r1, r5
   26852:	f7ff fc55 	bl	26100 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   26856:	1ba4      	subs	r4, r4, r6
					       start_to_address_actual_us));
	} else {
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   26858:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   2685c:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   2685e:	a30c      	add	r3, pc, #48	; (adr r3, 26890 <ull_drift_ticks_get+0x60>)
   26860:	e9d3 2300 	ldrd	r2, r3, [r3]
   26864:	fba5 0104 	umull	r0, r1, r5, r4
   26868:	f7ff fc4a 	bl	26100 <__aeabi_uldivmod>
   2686c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
   26870:	f8c8 0000 	str.w	r0, [r8]
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
   26874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   26878:	4c07      	ldr	r4, [pc, #28]	; (26898 <ull_drift_ticks_get+0x68>)
   2687a:	a305      	add	r3, pc, #20	; (adr r3, 26890 <ull_drift_ticks_get+0x60>)
   2687c:	e9d3 2300 	ldrd	r2, r3, [r3]
   26880:	fba6 0104 	umull	r0, r1, r6, r4
   26884:	f7ff fc3c 	bl	26100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   26888:	3530      	adds	r5, #48	; 0x30
   2688a:	e7e5      	b.n	26858 <ull_drift_ticks_get+0x28>
   2688c:	f3af 8000 	nop.w
   26890:	1afd498d 	.word	0x1afd498d
   26894:	00000007 	.word	0x00000007
   26898:	3b9aca00 	.word	0x3b9aca00
   2689c:	00000000 	.word	0x00000000

000268a0 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
   268a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   268a4:	4c6a      	ldr	r4, [pc, #424]	; (26a50 <ll_adv_enable+0x1b0>)
   268a6:	f894 a06a 	ldrb.w	sl, [r4, #106]	; 0x6a
   268aa:	b095      	sub	sp, #84	; 0x54
   268ac:	f00a 0a01 	and.w	sl, sl, #1
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint8_t hci_err;
	uint32_t ret;

	if (!enable) {
   268b0:	2800      	cmp	r0, #0
   268b2:	d04b      	beq.n	2694c <ll_adv_enable+0xac>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
   268b4:	f1ba 0f00 	cmp.w	sl, #0
   268b8:	f040 80c3 	bne.w	26a42 <ll_adv_enable+0x1a2>
	ull_filter_adv_update(lll->filter_policy);
   268bc:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
   268c0:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
   268c2:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
   268c6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
   268ca:	f019 f889 	bl	3f9e0 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   268ce:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
   268d2:	0742      	lsls	r2, r0, #29
   268d4:	d42b      	bmi.n	2692e <ll_adv_enable+0x8e>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268d6:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268da:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268de:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   268e6:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   268e8:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
   268ec:	b187      	cbz	r7, 26910 <ll_adv_enable+0x70>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
   268ee:	4639      	mov	r1, r7
   268f0:	4857      	ldr	r0, [pc, #348]	; (26a50 <ll_adv_enable+0x1b0>)
   268f2:	f012 fc23 	bl	3913c <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
   268f6:	783b      	ldrb	r3, [r7, #0]
   268f8:	065b      	lsls	r3, r3, #25
   268fa:	d505      	bpl.n	26908 <ll_adv_enable+0x68>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
   268fc:	2106      	movs	r1, #6
   268fe:	f00d faed 	bl	33edc <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
   26902:	2800      	cmp	r0, #0
   26904:	f000 826d 	beq.w	26de2 <ll_adv_enable+0x542>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
   26908:	4641      	mov	r1, r8
   2690a:	4851      	ldr	r0, [pc, #324]	; (26a50 <ll_adv_enable+0x1b0>)
   2690c:	f012 fc16 	bl	3913c <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   26910:	783b      	ldrb	r3, [r7, #0]
   26912:	f013 0f0e 	tst.w	r3, #14
   26916:	f040 81af 	bne.w	26c78 <ll_adv_enable+0x3d8>
		if (lll->conn) {
   2691a:	6a23      	ldr	r3, [r4, #32]
   2691c:	2b00      	cmp	r3, #0
   2691e:	f000 80a5 	beq.w	26a6c <ll_adv_enable+0x1cc>
	return BT_HCI_ERR_CMD_DISALLOWED;
   26922:	f04f 0a0c 	mov.w	sl, #12
}
   26926:	4650      	mov	r0, sl
   26928:	b015      	add	sp, #84	; 0x54
   2692a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   2692e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   26932:	4652      	mov	r2, sl
   26934:	f104 016b 	add.w	r1, r4, #107	; 0x6b
   26938:	f019 f9ea 	bl	3fd10 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
   2693c:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   2693e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
   26942:	d0c8      	beq.n	268d6 <ll_adv_enable+0x36>
			ull_filter_rpa_update(false);
   26944:	4650      	mov	r0, sl
   26946:	f019 f891 	bl	3fa6c <ull_filter_rpa_update>
   2694a:	e7c4      	b.n	268d6 <ll_adv_enable+0x36>
	if (!adv || !adv->is_enabled) {
   2694c:	f1ba 0f00 	cmp.w	sl, #0
   26950:	d077      	beq.n	26a42 <ll_adv_enable+0x1a2>
	if (adv->lll.conn) {
   26952:	6a23      	ldr	r3, [r4, #32]
   26954:	b153      	cbz	r3, 2696c <ll_adv_enable+0xcc>
		adv->lll.conn->periph.cancelled = 1U;
   26956:	f893 2020 	ldrb.w	r2, [r3, #32]
   2695a:	f042 0202 	orr.w	r2, r2, #2
   2695e:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   26962:	6a23      	ldr	r3, [r4, #32]
   26964:	f893 3020 	ldrb.w	r3, [r3, #32]
   26968:	07d8      	lsls	r0, r3, #31
   2696a:	d4da      	bmi.n	26922 <ll_adv_enable+0x82>
	mark = ull_disable_mark(adv);
   2696c:	4838      	ldr	r0, [pc, #224]	; (26a50 <ll_adv_enable+0x1b0>)
   2696e:	f011 fa29 	bl	37dc4 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   26972:	4284      	cmp	r4, r0
   26974:	d00c      	beq.n	26990 <ll_adv_enable+0xf0>
   26976:	f640 13ff 	movw	r3, #2559	; 0x9ff
   2697a:	4a36      	ldr	r2, [pc, #216]	; (26a54 <ll_adv_enable+0x1b4>)
   2697c:	4936      	ldr	r1, [pc, #216]	; (26a58 <ll_adv_enable+0x1b8>)
   2697e:	4837      	ldr	r0, [pc, #220]	; (26a5c <ll_adv_enable+0x1bc>)
   26980:	f023 fbac 	bl	4a0dc <printk>
   26984:	4040      	eors	r0, r0
   26986:	f380 8811 	msr	BASEPRI, r0
   2698a:	f04f 0003 	mov.w	r0, #3
   2698e:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   26990:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   26994:	07d9      	lsls	r1, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   26996:	ad0f      	add	r5, sp, #60	; 0x3c
	if (adv->lll.is_hdcd) {
   26998:	d50e      	bpl.n	269b8 <ll_adv_enable+0x118>
		ret_cb = TICKER_STATUS_BUSY;
   2699a:	2202      	movs	r2, #2
   2699c:	920f      	str	r2, [sp, #60]	; 0x3c
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   2699e:	2103      	movs	r1, #3
   269a0:	9500      	str	r5, [sp, #0]
   269a2:	4b2f      	ldr	r3, [pc, #188]	; (26a60 <ll_adv_enable+0x1c0>)
   269a4:	2201      	movs	r2, #1
   269a6:	2000      	movs	r0, #0
   269a8:	f00e fee4 	bl	35774 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   269ac:	4629      	mov	r1, r5
   269ae:	f011 f9e1 	bl	37d74 <ull_ticker_status_take>
		if (ret) {
   269b2:	2800      	cmp	r0, #0
   269b4:	f040 825c 	bne.w	26e70 <ll_adv_enable+0x5d0>
	ret_cb = TICKER_STATUS_BUSY;
   269b8:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   269ba:	460a      	mov	r2, r1
	ret_cb = TICKER_STATUS_BUSY;
   269bc:	910f      	str	r1, [sp, #60]	; 0x3c
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   269be:	9500      	str	r5, [sp, #0]
   269c0:	2103      	movs	r1, #3
   269c2:	4b27      	ldr	r3, [pc, #156]	; (26a60 <ll_adv_enable+0x1c0>)
   269c4:	2000      	movs	r0, #0
   269c6:	f00e fed5 	bl	35774 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   269ca:	4629      	mov	r1, r5
   269cc:	f011 f9d2 	bl	37d74 <ull_ticker_status_take>
	if (ret) {
   269d0:	2800      	cmp	r0, #0
   269d2:	f040 8227 	bne.w	26e24 <ll_adv_enable+0x584>
	err = ull_disable(&adv->lll);
   269d6:	4823      	ldr	r0, [pc, #140]	; (26a64 <ll_adv_enable+0x1c4>)
   269d8:	f011 fa30 	bl	37e3c <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   269dc:	b170      	cbz	r0, 269fc <ll_adv_enable+0x15c>
   269de:	3078      	adds	r0, #120	; 0x78
   269e0:	d00c      	beq.n	269fc <ll_adv_enable+0x15c>
   269e2:	f640 231e 	movw	r3, #2590	; 0xa1e
   269e6:	4a1b      	ldr	r2, [pc, #108]	; (26a54 <ll_adv_enable+0x1b4>)
   269e8:	491f      	ldr	r1, [pc, #124]	; (26a68 <ll_adv_enable+0x1c8>)
   269ea:	481c      	ldr	r0, [pc, #112]	; (26a5c <ll_adv_enable+0x1bc>)
   269ec:	f023 fb76 	bl	4a0dc <printk>
   269f0:	4040      	eors	r0, r0
   269f2:	f380 8811 	msr	BASEPRI, r0
   269f6:	f04f 0003 	mov.w	r0, #3
   269fa:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   269fc:	4814      	ldr	r0, [pc, #80]	; (26a50 <ll_adv_enable+0x1b0>)
   269fe:	f011 f9ed 	bl	37ddc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   26a02:	4284      	cmp	r4, r0
   26a04:	d00c      	beq.n	26a20 <ll_adv_enable+0x180>
   26a06:	f640 2321 	movw	r3, #2593	; 0xa21
   26a0a:	4a12      	ldr	r2, [pc, #72]	; (26a54 <ll_adv_enable+0x1b4>)
   26a0c:	4912      	ldr	r1, [pc, #72]	; (26a58 <ll_adv_enable+0x1b8>)
   26a0e:	4813      	ldr	r0, [pc, #76]	; (26a5c <ll_adv_enable+0x1bc>)
   26a10:	f023 fb64 	bl	4a0dc <printk>
   26a14:	4040      	eors	r0, r0
   26a16:	f380 8811 	msr	BASEPRI, r0
   26a1a:	f04f 0003 	mov.w	r0, #3
   26a1e:	df02      	svc	2
	if (adv->lll.conn) {
   26a20:	6a23      	ldr	r3, [r4, #32]
   26a22:	b10b      	cbz	r3, 26a28 <ll_adv_enable+0x188>
		conn_release(adv);
   26a24:	f012 f968 	bl	38cf8 <conn_release.constprop.12>
	adv->is_enabled = 0U;
   26a28:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   26a2c:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   26a2e:	f36f 0300 	bfc	r3, #0, #1
   26a32:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   26a36:	f012 fd73 	bl	39520 <ull_scan_is_enabled_get>
   26a3a:	4682      	mov	sl, r0
   26a3c:	2800      	cmp	r0, #0
   26a3e:	f000 81cd 	beq.w	26ddc <ll_adv_enable+0x53c>
			return 0;
   26a42:	f04f 0a00 	mov.w	sl, #0
}
   26a46:	4650      	mov	r0, sl
   26a48:	b015      	add	sp, #84	; 0x54
   26a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a4e:	bf00      	nop
   26a50:	200051bc 	.word	0x200051bc
   26a54:	000530c4 	.word	0x000530c4
   26a58:	000531cc 	.word	0x000531cc
   26a5c:	00052d50 	.word	0x00052d50
   26a60:	00037289 	.word	0x00037289
   26a64:	200051d8 	.word	0x200051d8
   26a68:	000531d8 	.word	0x000531d8
		link = ll_rx_link_alloc();
   26a6c:	f011 f8cc 	bl	37c08 <ll_rx_link_alloc>
		if (!link) {
   26a70:	4683      	mov	fp, r0
   26a72:	2800      	cmp	r0, #0
   26a74:	f000 81f0 	beq.w	26e58 <ll_adv_enable+0x5b8>
		node_rx = ll_rx_alloc();
   26a78:	f011 f8d2 	bl	37c20 <ll_rx_alloc>
		if (!node_rx) {
   26a7c:	900a      	str	r0, [sp, #40]	; 0x28
   26a7e:	2800      	cmp	r0, #0
   26a80:	f000 81f0 	beq.w	26e64 <ll_adv_enable+0x5c4>
		conn = ll_conn_acquire();
   26a84:	f013 f9c4 	bl	39e10 <ll_conn_acquire>
		if (!conn) {
   26a88:	4605      	mov	r5, r0
   26a8a:	2800      	cmp	r0, #0
   26a8c:	f000 81e7 	beq.w	26e5e <ll_adv_enable+0x5be>
		conn_lll->handle = 0xFFFF;
   26a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
   26a94:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
   26a96:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
   26a98:	f105 031c 	add.w	r3, r5, #28
   26a9c:	930d      	str	r3, [sp, #52]	; 0x34
		if (!conn_lll->link_tx_free) {
   26a9e:	2800      	cmp	r0, #0
   26aa0:	f000 81d6 	beq.w	26e50 <ll_adv_enable+0x5b0>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   26aa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
   26aa8:	f105 0164 	add.w	r1, r5, #100	; 0x64
   26aac:	f00d fa22 	bl	33ef4 <memq_init>
			conn_lll->phy_tx = PHY_1M;
   26ab0:	4ed3      	ldr	r6, [pc, #844]	; (26e00 <ll_adv_enable+0x560>)
   26ab2:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
   26ab6:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
   26aba:	f895 007a 	ldrb.w	r0, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
   26abe:	f895 103c 	ldrb.w	r1, [r5, #60]	; 0x3c
		conn->own_id_addr_type = BT_ADDR_LE_NONE->type;
   26ac2:	f895 c0d6 	ldrb.w	ip, [r5, #214]	; 0xd6
		conn_lll->max_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   26ac6:	f8df e350 	ldr.w	lr, [pc, #848]	; 26e18 <ll_adv_enable+0x578>
   26aca:	f8c5 e05c 	str.w	lr, [r5, #92]	; 0x5c
			conn_lll->phy_tx = PHY_1M;
   26ace:	4033      	ands	r3, r6
   26ad0:	f443 7388 	orr.w	r3, r3, #272	; 0x110
		conn_lll->link_tx_free = NULL;
   26ad4:	2600      	movs	r6, #0
			conn_lll->phy_tx = PHY_1M;
   26ad6:	f043 0301 	orr.w	r3, r3, #1
		conn_lll->data_chan_sel = 0;
   26ada:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		conn->own_id_addr_type = BT_ADDR_LE_NONE->type;
   26ade:	f366 0c00 	bfi	ip, r6, #0, #1
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26ae2:	f04f 1e1b 	mov.w	lr, #1769499	; 0x1b001b
		conn_lll->data_chan_sel = 0;
   26ae6:	f062 027f 	orn	r2, r2, #127	; 0x7f
		conn_lll->sn = 0;
   26aea:	f020 0007 	bic.w	r0, r0, #7
		conn_lll->periph.initiated = 0;
   26aee:	f021 0107 	bic.w	r1, r1, #7
			conn_lll->phy_tx = PHY_1M;
   26af2:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
		conn->connect_expire = 6;
   26af6:	f04f 0306 	mov.w	r3, #6
		(void)memcpy(conn->own_id_addr, BT_ADDR_LE_NONE->a.val,
   26afa:	f64f 79ff 	movw	r9, #65535	; 0xffff
		conn->own_id_addr_type = BT_ADDR_LE_NONE->type;
   26afe:	f885 c0d6 	strb.w	ip, [r5, #214]	; 0xd6
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   26b02:	f8c5 e058 	str.w	lr, [r5, #88]	; 0x58
		conn_lll->data_chan_sel = 0;
   26b06:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
   26b0a:	f885 007a 	strb.w	r0, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
   26b0e:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
		conn->connect_expire = 6;
   26b12:	f8a5 30c0 	strh.w	r3, [r5, #192]	; 0xc0
		(void)memcpy(conn->own_id_addr, BT_ADDR_LE_NONE->a.val,
   26b16:	2206      	movs	r2, #6
   26b18:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   26b1c:	f10d 0141 	add.w	r1, sp, #65	; 0x41
		conn_lll->link_tx_free = NULL;
   26b20:	676e      	str	r6, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
   26b22:	f8a5 6078 	strh.w	r6, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
   26b26:	85ee      	strh	r6, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
   26b28:	632e      	str	r6, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
   26b2a:	f885 603b 	strb.w	r6, [r5, #59]	; 0x3b
		conn_lll->periph.window_widening_event_us = 0;
   26b2e:	e9c5 6612 	strd	r6, r6, [r5, #72]	; 0x48
		conn_lll->periph.window_size_prepare_us = 0;
   26b32:	652e      	str	r6, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
   26b34:	f8a5 60c4 	strh.w	r6, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
   26b38:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
   26b3c:	f8a5 60d0 	strh.w	r6, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
   26b40:	f8a5 60cc 	strh.w	r6, [r5, #204]	; 0xcc
		(void)memcpy(conn->own_id_addr, BT_ADDR_LE_NONE->a.val,
   26b44:	f105 00d7 	add.w	r0, r5, #215	; 0xd7
   26b48:	9310      	str	r3, [sp, #64]	; 0x40
   26b4a:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
   26b4e:	f88d 9046 	strb.w	r9, [sp, #70]	; 0x46
   26b52:	f025 fbcb 	bl	4c2ec <memcpy>
		conn->peer_id_addr_type = BT_ADDR_LE_NONE->type;
   26b56:	f895 10d6 	ldrb.w	r1, [r5, #214]	; 0xd6
		(void)memcpy(conn->peer_id_addr, BT_ADDR_LE_NONE->a.val,
   26b5a:	f8ad 904c 	strh.w	r9, [sp, #76]	; 0x4c
		conn->peer_id_addr_type = BT_ADDR_LE_NONE->type;
   26b5e:	f366 0141 	bfi	r1, r6, #1, #1
		(void)memcpy(conn->peer_id_addr, BT_ADDR_LE_NONE->a.val,
   26b62:	f06f 03ff 	mvn.w	r3, #255	; 0xff
   26b66:	2206      	movs	r2, #6
		conn->peer_id_addr_type = BT_ADDR_LE_NONE->type;
   26b68:	f885 10d6 	strb.w	r1, [r5, #214]	; 0xd6
		(void)memcpy(conn->peer_id_addr, BT_ADDR_LE_NONE->a.val,
   26b6c:	f105 00dd 	add.w	r0, r5, #221	; 0xdd
   26b70:	f10d 0149 	add.w	r1, sp, #73	; 0x49
   26b74:	9312      	str	r3, [sp, #72]	; 0x48
   26b76:	f88d 904e 	strb.w	r9, [sp, #78]	; 0x4e
   26b7a:	f025 fbb7 	bl	4c2ec <memcpy>
		conn->common.fex_valid = 0;
   26b7e:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   26b82:	f8a5 60f0 	strh.w	r6, [r5, #240]	; 0xf0
		conn->common.fex_valid = 0;
   26b86:	f023 0307 	bic.w	r3, r3, #7
   26b8a:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   26b8e:	f885 60f2 	strb.w	r6, [r5, #242]	; 0xf2
		conn->llcp_rx = NULL;
   26b92:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   26b96:	f8a5 6118 	strh.w	r6, [r5, #280]	; 0x118
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   26b9a:	f8a5 6130 	strh.w	r6, [r5, #304]	; 0x130
		conn->llcp_feature.features_conn = ll_feat_get();
   26b9e:	f010 fb0d 	bl	371bc <ll_feat_get>
		conn->llcp_conn_param.disabled = 0;
   26ba2:	f895 e196 	ldrb.w	lr, [r5, #406]	; 0x196
		conn->llcp_length.disabled = 0U;
   26ba6:	f895 c1be 	ldrb.w	ip, [r5, #446]	; 0x1be
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26baa:	f895 914a 	ldrb.w	r9, [r5, #330]	; 0x14a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26bae:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26bb2:	f895 3176 	ldrb.w	r3, [r5, #374]	; 0x176
		conn->llcp_version.req = conn->llcp_version.ack = 0;
   26bb6:	f8a5 6148 	strh.w	r6, [r5, #328]	; 0x148
		conn->llcp_conn_param.disabled = 0;
   26bba:	f366 1e45 	bfi	lr, r6, #5, #1
		conn->llcp_length.disabled = 0U;
   26bbe:	f366 0cc3 	bfi	ip, r6, #3, #1
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26bc2:	f022 0218 	bic.w	r2, r2, #24
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26bc6:	f023 0307 	bic.w	r3, r3, #7
		conn->llcp_feature.features_conn = ll_feat_get();
   26bca:	e9c5 014e 	strd	r0, r1, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26bce:	f029 0903 	bic.w	r9, r9, #3
		conn->llcp_feature.features_peer = 0;
   26bd2:	2100      	movs	r1, #0
   26bd4:	2000      	movs	r0, #0
		conn->llcp_conn_param.disabled = 0;
   26bd6:	f885 e196 	strb.w	lr, [r5, #406]	; 0x196
		conn->llcp_length.disabled = 0U;
   26bda:	f885 c1be 	strb.w	ip, [r5, #446]	; 0x1be
		conn->llcp_feature.features_peer = 0;
   26bde:	e9c5 0150 	strd	r0, r1, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   26be2:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   26be6:	f885 3176 	strb.w	r3, [r5, #374]	; 0x176
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
   26bea:	f8a5 6150 	strh.w	r6, [r5, #336]	; 0x150
		conn->llcp_terminate.reason_final = 0;
   26bee:	f885 6153 	strb.w	r6, [r5, #339]	; 0x153
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   26bf2:	f8a5 6174 	strh.w	r6, [r5, #372]	; 0x174
		conn->periph.llcp_type = 0U;
   26bf6:	f885 60e5 	strb.w	r6, [r5, #229]	; 0xe5
		conn->llcp_conn_param.req = 0;
   26bfa:	f8a5 6194 	strh.w	r6, [r5, #404]	; 0x194
		conn->periph.ticks_to_offset = 0;
   26bfe:	f8c5 60ec 	str.w	r6, [r5, #236]	; 0xec
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
   26c02:	f8a5 61bc 	strh.w	r6, [r5, #444]	; 0x1bc
		conn->llcp_length.cache.tx_octets = 0U;
   26c06:	f8a5 61c8 	strh.w	r6, [r5, #456]	; 0x1c8
		conn->llcp_terminate.node_rx.hdr.link = link;
   26c0a:	f8c5 b154 	str.w	fp, [r5, #340]	; 0x154
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   26c0e:	f885 914a 	strb.w	r9, [r5, #330]	; 0x14a
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
   26c12:	f013 fc77 	bl	3a504 <ull_conn_default_tx_octets_get>
   26c16:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26c1a:	f013 fc79 	bl	3a510 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26c1e:	f8d5 21cc 	ldr.w	r2, [r5, #460]	; 0x1cc
   26c22:	4b78      	ldr	r3, [pc, #480]	; (26e04 <ll_adv_enable+0x564>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
   26c24:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   26c28:	4013      	ands	r3, r2
   26c2a:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   26c2e:	f013 fc75 	bl	3a51c <ull_conn_default_phy_tx_get>
   26c32:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
   26c36:	f360 0302 	bfi	r3, r0, #0, #3
   26c3a:	f885 31d0 	strb.w	r3, [r5, #464]	; 0x1d0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26c3e:	f013 fc73 	bl	3a528 <ull_conn_default_phy_rx_get>
   26c42:	f895 31d0 	ldrb.w	r3, [r5, #464]	; 0x1d0
		adv->node_rx_cc_free = node_rx;
   26c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26c48:	6662      	str	r2, [r4, #100]	; 0x64
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26c4a:	f360 03c5 	bfi	r3, r0, #3, #3
		lll->conn = conn_lll;
   26c4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		adv->link_cc_free = link;
   26c50:	f8c4 b060 	str.w	fp, [r4, #96]	; 0x60
		lll->conn = conn_lll;
   26c54:	6222      	str	r2, [r4, #32]
		conn->tx_data = conn->tx_data_last = 0;
   26c56:	f8c5 61e4 	str.w	r6, [r5, #484]	; 0x1e4
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   26c5a:	e9c5 6677 	strd	r6, r6, [r5, #476]	; 0x1dc
   26c5e:	e9c5 6675 	strd	r6, r6, [r5, #468]	; 0x1d4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   26c62:	f885 31d0 	strb.w	r3, [r5, #464]	; 0x1d0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
   26c66:	702e      	strb	r6, [r5, #0]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26c68:	e9c5 6605 	strd	r6, r6, [r5, #20]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
   26c6c:	61ed      	str	r5, [r5, #28]
		err = lll_clock_wait();
   26c6e:	f01a f9c7 	bl	41000 <lll_clock_wait>
		if (err) {
   26c72:	2800      	cmp	r0, #0
   26c74:	f040 80b8 	bne.w	26de8 <ll_adv_enable+0x548>
	uint8_t ch_map = lll->chan_map;
   26c78:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26c7c:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
   26c7e:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26c82:	a80f      	add	r0, sp, #60	; 0x3c
	uint8_t ch_map = lll->chan_map;
   26c84:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   26c88:	f00d faa6 	bl	341d8 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
   26c8c:	b930      	cbnz	r0, 26c9c <ll_adv_enable+0x3fc>
	if (adv->lll.conn) {
   26c8e:	6a23      	ldr	r3, [r4, #32]
   26c90:	2b00      	cmp	r3, #0
   26c92:	f43f ae46 	beq.w	26922 <ll_adv_enable+0x82>
		conn_release(adv);
   26c96:	f012 f82f 	bl	38cf8 <conn_release.constprop.12>
   26c9a:	e642      	b.n	26922 <ll_adv_enable+0x82>
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
   26c9c:	f898 1001 	ldrb.w	r1, [r8, #1]
   26ca0:	4602      	mov	r2, r0
   26ca2:	4638      	mov	r0, r7
   26ca4:	f011 fe5e 	bl	38964 <adv_time_get.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26ca8:	4b57      	ldr	r3, [pc, #348]	; (26e08 <ll_adv_enable+0x568>)
	uint16_t interval = adv->interval;
   26caa:	f8b4 6068 	ldrh.w	r6, [r4, #104]	; 0x68
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26cae:	b280      	uxth	r0, r0
	hdr->ref = 0U;
   26cb0:	2500      	movs	r5, #0
   26cb2:	fba0 0103 	umull	r0, r1, r0, r3
	adv->ull.ticks_prepare_to_start =
   26cb6:	2331      	movs	r3, #49	; 0x31
   26cb8:	e9c4 3502 	strd	r3, r5, [r4, #8]
   26cbc:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26cbe:	a34e      	add	r3, pc, #312	; (adr r3, 26df8 <ll_adv_enable+0x558>)
   26cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   26cc4:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->ull.ticks_active_to_start = 0;
   26cc8:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
   26cca:	f7ff fa19 	bl	26100 <__aeabi_uldivmod>
   26cce:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
   26cd0:	f00e fdf8 	bl	358c4 <ticker_ticks_now_get>
   26cd4:	4680      	mov	r8, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26cd6:	b93e      	cbnz	r6, 26ce8 <ll_adv_enable+0x448>
   26cd8:	783d      	ldrb	r5, [r7, #0]
   26cda:	f005 050f 	and.w	r5, r5, #15
   26cde:	f1a5 0501 	sub.w	r5, r5, #1
   26ce2:	fab5 f585 	clz	r5, r5
   26ce6:	096d      	lsrs	r5, r5, #5
   26ce8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   26cec:	6927      	ldr	r7, [r4, #16]
   26cee:	f365 0300 	bfi	r3, r5, #0, #1
	if (lll->is_hdcd) {
   26cf2:	f013 0501 	ands.w	r5, r3, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   26cf6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
   26cfa:	d02c      	beq.n	26d56 <ll_adv_enable+0x4b6>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26cfc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 26e1c <ll_adv_enable+0x57c>
   26d00:	4b42      	ldr	r3, [pc, #264]	; (26e0c <ll_adv_enable+0x56c>)
   26d02:	9305      	str	r3, [sp, #20]
   26d04:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   26d06:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26d08:	ae0e      	add	r6, sp, #56	; 0x38
   26d0a:	2103      	movs	r1, #3
   26d0c:	9406      	str	r4, [sp, #24]
   26d0e:	9704      	str	r7, [sp, #16]
   26d10:	9701      	str	r7, [sp, #4]
   26d12:	462a      	mov	r2, r5
   26d14:	e9cd 9607 	strd	r9, r6, [sp, #28]
   26d18:	e9cd 0002 	strd	r0, r0, [sp, #8]
   26d1c:	9000      	str	r0, [sp, #0]
   26d1e:	4643      	mov	r3, r8
		ret_cb = TICKER_STATUS_BUSY;
   26d20:	950e      	str	r5, [sp, #56]	; 0x38
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26d22:	f00e fc9d 	bl	35660 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
   26d26:	4631      	mov	r1, r6
   26d28:	f011 f824 	bl	37d74 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
   26d2c:	2800      	cmp	r0, #0
   26d2e:	d1ae      	bne.n	26c8e <ll_adv_enable+0x3ee>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26d30:	4937      	ldr	r1, [pc, #220]	; (26e10 <ll_adv_enable+0x570>)
   26d32:	9105      	str	r1, [sp, #20]
   26d34:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
   26d38:	9200      	str	r2, [sp, #0]
   26d3a:	e9cd 9607 	strd	r9, r6, [sp, #28]
   26d3e:	9406      	str	r4, [sp, #24]
   26d40:	e9cd 0003 	strd	r0, r0, [sp, #12]
   26d44:	e9cd 0001 	strd	r0, r0, [sp, #4]
   26d48:	4643      	mov	r3, r8
   26d4a:	2201      	movs	r2, #1
   26d4c:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
   26d4e:	950e      	str	r5, [sp, #56]	; 0x38
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   26d50:	f00e fc86 	bl	35660 <ticker_start>
   26d54:	e030      	b.n	26db8 <ll_adv_enable+0x518>
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26d56:	b2b2      	uxth	r2, r6
   26d58:	2300      	movs	r3, #0
   26d5a:	482e      	ldr	r0, [pc, #184]	; (26e14 <ll_adv_enable+0x574>)
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26d5c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 26e20 <ll_adv_enable+0x580>
		ret = ticker_start_ext(
   26d60:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 26e1c <ll_adv_enable+0x57c>
   26d64:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26d66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   26d6a:	fba2 0100 	umull	r0, r1, r2, r0
   26d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26d70:	2391      	movs	r3, #145	; 0x91
   26d72:	fb03 1102 	mla	r1, r3, r2, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
   26d76:	f207 1347 	addw	r3, r7, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
   26d7a:	f8cc 3000 	str.w	r3, [ip]
		ret = ticker_start_ext(
   26d7e:	4b23      	ldr	r3, [pc, #140]	; (26e0c <ll_adv_enable+0x56c>)
   26d80:	9704      	str	r7, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
   26d82:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
   26d86:	9305      	str	r3, [sp, #20]
   26d88:	ae0e      	add	r6, sp, #56	; 0x38
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26d8a:	a31b      	add	r3, pc, #108	; (adr r3, 26df8 <ll_adv_enable+0x558>)
   26d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
   26d90:	f64f 77ff 	movw	r7, #65535	; 0xffff
   26d94:	9502      	str	r5, [sp, #8]
   26d96:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
   26d9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
		ret = ticker_start_ext(
   26d9e:	e9cd e607 	strd	lr, r6, [sp, #28]
   26da2:	9703      	str	r7, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   26da4:	f7ff f9ac 	bl	26100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
   26da8:	464a      	mov	r2, r9
   26daa:	e9cd 5000 	strd	r5, r0, [sp]
   26dae:	4643      	mov	r3, r8
   26db0:	4628      	mov	r0, r5
   26db2:	2103      	movs	r1, #3
   26db4:	f00e fbfa 	bl	355ac <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26db8:	4631      	mov	r1, r6
   26dba:	f010 ffdb 	bl	37d74 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26dbe:	2800      	cmp	r0, #0
   26dc0:	f47f af65 	bne.w	26c8e <ll_adv_enable+0x3ee>
	adv->is_enabled = 1;
   26dc4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   26dc8:	f043 0301 	orr.w	r3, r3, #1
   26dcc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   26dd0:	f012 fba6 	bl	39520 <ull_scan_is_enabled_get>
   26dd4:	2800      	cmp	r0, #0
   26dd6:	f47f ae34 	bne.w	26a42 <ll_adv_enable+0x1a2>
		ull_filter_adv_scan_state_cb(BIT(0));
   26dda:	2001      	movs	r0, #1
   26ddc:	f018 fde2 	bl	3f9a4 <ull_filter_adv_scan_state_cb>
   26de0:	e5a1      	b.n	26926 <ll_adv_enable+0x86>
			return BT_HCI_ERR_INVALID_PARAM;
   26de2:	f04f 0a12 	mov.w	sl, #18
   26de6:	e59e      	b.n	26926 <ll_adv_enable+0x86>
			conn_release(adv);
   26de8:	f011 ff86 	bl	38cf8 <conn_release.constprop.12>
			return BT_HCI_ERR_HW_FAILURE;
   26dec:	f04f 0a03 	mov.w	sl, #3
   26df0:	e599      	b.n	26926 <ll_adv_enable+0x86>
   26df2:	bf00      	nop
   26df4:	f3af 8000 	nop.w
   26df8:	1afd498d 	.word	0x1afd498d
   26dfc:	00000007 	.word	0x00000007
   26e00:	fffff880 	.word	0xfffff880
   26e04:	f6ff0000 	.word	0xf6ff0000
   26e08:	3b9aca00 	.word	0x3b9aca00
   26e0c:	00038b61 	.word	0x00038b61
   26e10:	00038add 	.word	0x00038add
   26e14:	84e72a00 	.word	0x84e72a00
   26e18:	01480148 	.word	0x01480148
   26e1c:	00037289 	.word	0x00037289
   26e20:	20005234 	.word	0x20005234
		mark = ull_disable_unmark(adv);
   26e24:	4817      	ldr	r0, [pc, #92]	; (26e84 <ll_adv_enable+0x5e4>)
   26e26:	f010 ffd9 	bl	37ddc <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   26e2a:	4284      	cmp	r4, r0
   26e2c:	f43f ad79 	beq.w	26922 <ll_adv_enable+0x82>
   26e30:	f640 2318 	movw	r3, #2584	; 0xa18
   26e34:	4a14      	ldr	r2, [pc, #80]	; (26e88 <ll_adv_enable+0x5e8>)
   26e36:	4915      	ldr	r1, [pc, #84]	; (26e8c <ll_adv_enable+0x5ec>)
   26e38:	4815      	ldr	r0, [pc, #84]	; (26e90 <ll_adv_enable+0x5f0>)
   26e3a:	f023 f94f 	bl	4a0dc <printk>
   26e3e:	4040      	eors	r0, r0
   26e40:	f380 8811 	msr	BASEPRI, r0
   26e44:	f04f 0003 	mov.w	r0, #3
   26e48:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   26e4a:	f04f 0a0c 	mov.w	sl, #12
   26e4e:	e56a      	b.n	26926 <ll_adv_enable+0x86>
			conn_lll->link_tx_free = &conn_lll->link_tx;
   26e50:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   26e54:	6768      	str	r0, [r5, #116]	; 0x74
   26e56:	e625      	b.n	26aa4 <ll_adv_enable+0x204>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26e58:	f04f 0a07 	mov.w	sl, #7
   26e5c:	e563      	b.n	26926 <ll_adv_enable+0x86>
			ll_rx_release(node_rx);
   26e5e:	980a      	ldr	r0, [sp, #40]	; 0x28
   26e60:	f010 fee4 	bl	37c2c <ll_rx_release>
			ll_rx_link_release(link);
   26e64:	4658      	mov	r0, fp
   26e66:	f010 fed5 	bl	37c14 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   26e6a:	f04f 0a07 	mov.w	sl, #7
   26e6e:	e55a      	b.n	26926 <ll_adv_enable+0x86>
			mark = ull_disable_unmark(adv);
   26e70:	4804      	ldr	r0, [pc, #16]	; (26e84 <ll_adv_enable+0x5e4>)
   26e72:	f010 ffb3 	bl	37ddc <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   26e76:	4284      	cmp	r4, r0
   26e78:	f43f ad53 	beq.w	26922 <ll_adv_enable+0x82>
   26e7c:	f640 230a 	movw	r3, #2570	; 0xa0a
   26e80:	e7d8      	b.n	26e34 <ll_adv_enable+0x594>
   26e82:	bf00      	nop
   26e84:	200051bc 	.word	0x200051bc
   26e88:	000530c4 	.word	0x000530c4
   26e8c:	000531cc 	.word	0x000531cc
   26e90:	00052d50 	.word	0x00052d50
   26e94:	00000000 	.word	0x00000000

00026e98 <ull_adv_time_update>:
{
   26e98:	b5f0      	push	{r4, r5, r6, r7, lr}
	chan_map = lll->chan_map;
   26e9a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
   26e9e:	b08b      	sub	sp, #44	; 0x2c
	chan_map = lll->chan_map;
   26ea0:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
   26ea4:	460d      	mov	r5, r1
   26ea6:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26ea8:	2101      	movs	r1, #1
   26eaa:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
   26eae:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
   26eb0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   26eb4:	f00d f990 	bl	341d8 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
   26eb8:	7871      	ldrb	r1, [r6, #1]
   26eba:	4602      	mov	r2, r0
   26ebc:	4628      	mov	r0, r5
   26ebe:	f011 fd51 	bl	38964 <adv_time_get.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26ec2:	4b1f      	ldr	r3, [pc, #124]	; (26f40 <ull_adv_time_update+0xa8>)
   26ec4:	b280      	uxth	r0, r0
   26ec6:	fba0 0103 	umull	r0, r1, r0, r3
   26eca:	a31b      	add	r3, pc, #108	; (adr r3, 26f38 <ull_adv_time_update+0xa0>)
   26ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
   26ed0:	f7ff f916 	bl	26100 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
   26ed4:	6923      	ldr	r3, [r4, #16]
   26ed6:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
   26ed8:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
   26eda:	d220      	bcs.n	26f1e <ull_adv_time_update+0x86>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
   26edc:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
   26ede:	2000      	movs	r0, #0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26ee0:	4a18      	ldr	r2, [pc, #96]	; (26f44 <ull_adv_time_update+0xac>)
   26ee2:	4e19      	ldr	r6, [pc, #100]	; (26f48 <ull_adv_time_update+0xb0>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26ee4:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26ee6:	1aa2      	subs	r2, r4, r2
   26ee8:	fba6 3202 	umull	r3, r2, r6, r2
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26eec:	4917      	ldr	r1, [pc, #92]	; (26f4c <ull_adv_time_update+0xb4>)
   26eee:	9001      	str	r0, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   26ef0:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26ef2:	2300      	movs	r3, #0
   26ef4:	ae09      	add	r6, sp, #36	; 0x24
   26ef6:	3202      	adds	r2, #2
   26ef8:	e9cd 1605 	strd	r1, r6, [sp, #20]
   26efc:	b2d2      	uxtb	r2, r2
   26efe:	2103      	movs	r1, #3
   26f00:	e9cd 3303 	strd	r3, r3, [sp, #12]
   26f04:	9300      	str	r3, [sp, #0]
   26f06:	4618      	mov	r0, r3
	ret_cb = TICKER_STATUS_BUSY;
   26f08:	2702      	movs	r7, #2
   26f0a:	9709      	str	r7, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   26f0c:	f00e fc1a 	bl	35744 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
   26f10:	4631      	mov	r1, r6
   26f12:	f010 ff2f 	bl	37d74 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   26f16:	b930      	cbnz	r0, 26f26 <ull_adv_time_update+0x8e>
	adv->ull.ticks_slot = time_ticks;
   26f18:	6125      	str	r5, [r4, #16]
}
   26f1a:	b00b      	add	sp, #44	; 0x2c
   26f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
   26f1e:	d905      	bls.n	26f2c <ull_adv_time_update+0x94>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
   26f20:	1ac0      	subs	r0, r0, r3
		ticks_minus = 0U;
   26f22:	2300      	movs	r3, #0
   26f24:	e7dc      	b.n	26ee0 <ull_adv_time_update+0x48>
		return BT_HCI_ERR_CMD_DISALLOWED;
   26f26:	200c      	movs	r0, #12
}
   26f28:	b00b      	add	sp, #44	; 0x2c
   26f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_SUCCESS;
   26f2c:	2000      	movs	r0, #0
}
   26f2e:	b00b      	add	sp, #44	; 0x2c
   26f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26f32:	bf00      	nop
   26f34:	f3af 8000 	nop.w
   26f38:	1afd498d 	.word	0x1afd498d
   26f3c:	00000007 	.word	0x00000007
   26f40:	3b9aca00 	.word	0x3b9aca00
   26f44:	200051bc 	.word	0x200051bc
   26f48:	88888889 	.word	0x88888889
   26f4c:	00037289 	.word	0x00037289

00026f50 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
   26f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
   26f54:	4d18      	ldr	r5, [pc, #96]	; (26fb8 <ll_scan_params_set+0x68>)
{
   26f56:	f89d c020 	ldrb.w	ip, [sp, #32]
	if (!scan || scan->is_enabled) {
   26f5a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
   26f5e:	f014 0801 	ands.w	r8, r4, #1
   26f62:	d11e      	bne.n	26fa2 <ll_scan_params_set+0x52>
	lll->type = type;
   26f64:	f895 6032 	ldrb.w	r6, [r5, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26f68:	f8df e050 	ldr.w	lr, [pc, #80]	; 26fbc <ll_scan_params_set+0x6c>
	lll->interval = interval;
   26f6c:	87a9      	strh	r1, [r5, #60]	; 0x3c
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26f6e:	fa1f f982 	uxth.w	r9, r2
	lll->type = type;
   26f72:	f360 1645 	bfi	r6, r0, #5, #1
	scan->own_addr_type = own_addr_type;
   26f76:	f363 0442 	bfi	r4, r3, #1, #2
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26f7a:	fba9 010e 	umull	r0, r1, r9, lr
	lll->filter_policy = filter_policy;
   26f7e:	f36c 06c4 	bfi	r6, ip, #3, #2
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26f82:	2391      	movs	r3, #145	; 0x91
   26f84:	fb03 1109 	mla	r1, r3, r9, r1
	scan->own_addr_type = own_addr_type;
   26f88:	f885 4044 	strb.w	r4, [r5, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26f8c:	a308      	add	r3, pc, #32	; (adr r3, 26fb0 <ll_scan_params_set+0x60>)
   26f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
	lll->filter_policy = filter_policy;
   26f92:	f885 6032 	strb.w	r6, [r5, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26f96:	f7ff f8b3 	bl	26100 <__aeabi_uldivmod>
   26f9a:	6428      	str	r0, [r5, #64]	; 0x40
}
   26f9c:	4640      	mov	r0, r8
   26f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   26fa2:	f04f 080c 	mov.w	r8, #12
}
   26fa6:	4640      	mov	r0, r8
   26fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26fac:	f3af 8000 	nop.w
   26fb0:	1afd498d 	.word	0x1afd498d
   26fb4:	00000007 	.word	0x00000007
   26fb8:	20005258 	.word	0x20005258
   26fbc:	84e72a00 	.word	0x84e72a00

00026fc0 <ull_scan_params_set>:
{
   26fc0:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
   26fc4:	4605      	mov	r5, r0
   26fc6:	f89d 6018 	ldrb.w	r6, [sp, #24]
	lll->type = type;
   26fca:	7dac      	ldrb	r4, [r5, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26fcc:	480c      	ldr	r0, [pc, #48]	; (27000 <ull_scan_params_set+0x40>)
	lll->interval = interval;
   26fce:	842a      	strh	r2, [r5, #32]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26fd0:	fa1f fb83 	uxth.w	fp, r3
	lll->type = type;
   26fd4:	f361 1445 	bfi	r4, r1, #5, #1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26fd8:	2391      	movs	r3, #145	; 0x91
   26fda:	fbab 0100 	umull	r0, r1, fp, r0
	lll->filter_policy = filter_policy;
   26fde:	f366 04c4 	bfi	r4, r6, #3, #2
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26fe2:	fb03 110b 	mla	r1, r3, fp, r1
	lll->filter_policy = filter_policy;
   26fe6:	75ac      	strb	r4, [r5, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
   26fe8:	a303      	add	r3, pc, #12	; (adr r3, 26ff8 <ull_scan_params_set+0x38>)
   26fea:	e9d3 2300 	ldrd	r2, r3, [r3]
   26fee:	f7ff f887 	bl	26100 <__aeabi_uldivmod>
   26ff2:	6268      	str	r0, [r5, #36]	; 0x24
}
   26ff4:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
   26ff8:	1afd498d 	.word	0x1afd498d
   26ffc:	00000007 	.word	0x00000007
   27000:	84e72a00 	.word	0x84e72a00
   27004:	00000000 	.word	0x00000000

00027008 <ull_scan_enable>:
{
   27008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2700c:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
   2700e:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
   27012:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
   27016:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   2701a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2701e:	f360 1386 	bfi	r3, r0, #6, #1
{
   27022:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
   27024:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
   27028:	f00e fc82 	bl	35930 <ll_addr_read>
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   2702c:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
	lll->chan = 0U;
   2702e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   27032:	484f      	ldr	r0, [pc, #316]	; (27170 <ull_scan_enable+0x168>)
   27034:	61e4      	str	r4, [r4, #28]
	hdr->ref = 0U;
   27036:	2500      	movs	r5, #0
   27038:	fba6 0100 	umull	r0, r1, r6, r0
   2703c:	2291      	movs	r2, #145	; 0x91
	lll->chan = 0U;
   2703e:	f003 0379 	and.w	r3, r3, #121	; 0x79
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   27042:	fb02 1106 	mla	r1, r2, r6, r1
	lll->chan = 0U;
   27046:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
   2704a:	7025      	strb	r5, [r4, #0]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   2704c:	a346      	add	r3, pc, #280	; (adr r3, 27168 <ull_scan_enable+0x160>)
   2704e:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   27052:	e9c4 5505 	strd	r5, r5, [r4, #20]
   27056:	f7ff f853 	bl	26100 <__aeabi_uldivmod>
	if ((lll->ticks_window +
   2705a:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_active_to_start = 0U;
   2705c:	6065      	str	r5, [r4, #4]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
   2705e:	4680      	mov	r8, r0
	if ((lll->ticks_window +
   27060:	3309      	adds	r3, #9
	    (ticks_interval -
   27062:	f1a8 0231 	sub.w	r2, r8, #49	; 0x31
	if ((lll->ticks_window +
   27066:	4293      	cmp	r3, r2
	scan->ull.ticks_prepare_to_start =
   27068:	f04f 0131 	mov.w	r1, #49	; 0x31
   2706c:	e9c4 1502 	strd	r1, r5, [r4, #8]
		lll->ticks_window = 0U;
   27070:	bf2a      	itet	cs
   27072:	6425      	strcs	r5, [r4, #64]	; 0x40
		scan->ull.ticks_slot =
   27074:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
   27076:	6122      	strcs	r2, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
   27078:	f00e fc24 	bl	358c4 <ticker_ticks_now_get>
	if (!lll->conn) {
   2707c:	6a25      	ldr	r5, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
   2707e:	4681      	mov	r9, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
   27080:	ae0b      	add	r6, sp, #44	; 0x2c
	if (!lll->conn) {
   27082:	2d00      	cmp	r5, #0
   27084:	d04d      	beq.n	27122 <ull_scan_enable+0x11a>
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27086:	9608      	str	r6, [sp, #32]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   27088:	4d3a      	ldr	r5, [pc, #232]	; (27174 <ull_scan_enable+0x16c>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   2708a:	f8b4 a03c 	ldrh.w	sl, [r4, #60]	; 0x3c
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   2708e:	493a      	ldr	r1, [pc, #232]	; (27178 <ull_scan_enable+0x170>)
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   27090:	4837      	ldr	r0, [pc, #220]	; (27170 <ull_scan_enable+0x168>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27092:	6922      	ldr	r2, [r4, #16]
   27094:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 27184 <ull_scan_enable+0x17c>
   27098:	9204      	str	r2, [sp, #16]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   2709a:	1b65      	subs	r5, r4, r5
   2709c:	fba1 3505 	umull	r3, r5, r1, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   270a0:	fbaa 0100 	umull	r0, r1, sl, r0
   270a4:	2391      	movs	r3, #145	; 0x91
   270a6:	fb03 110a 	mla	r1, r3, sl, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   270aa:	4b34      	ldr	r3, [pc, #208]	; (2717c <ull_scan_enable+0x174>)
   270ac:	9305      	str	r3, [sp, #20]
   270ae:	f04f 0a00 	mov.w	sl, #0
	ret_cb = TICKER_STATUS_BUSY;
   270b2:	2702      	movs	r7, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   270b4:	a32c      	add	r3, pc, #176	; (adr r3, 27168 <ull_scan_enable+0x160>)
   270b6:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   270ba:	f8cd c01c 	str.w	ip, [sp, #28]
   270be:	9406      	str	r4, [sp, #24]
	ret_cb = TICKER_STATUS_BUSY;
   270c0:	970b      	str	r7, [sp, #44]	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   270c2:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
   270c6:	f7ff f81b 	bl	26100 <__aeabi_uldivmod>
   270ca:	4610      	mov	r0, r2
   270cc:	4619      	mov	r1, r3
   270ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   270d2:	2300      	movs	r3, #0
   270d4:	f7ff f814 	bl	26100 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   270d8:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   270da:	3504      	adds	r5, #4
   270dc:	b2ed      	uxtb	r5, r5
   270de:	462a      	mov	r2, r5
   270e0:	9002      	str	r0, [sp, #8]
   270e2:	464b      	mov	r3, r9
   270e4:	2103      	movs	r1, #3
   270e6:	f8cd a000 	str.w	sl, [sp]
   270ea:	4650      	mov	r0, sl
   270ec:	f8cd 8004 	str.w	r8, [sp, #4]
   270f0:	f00e fab6 	bl	35660 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
   270f4:	4631      	mov	r1, r6
   270f6:	f010 fe3d 	bl	37d74 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   270fa:	4605      	mov	r5, r0
   270fc:	b968      	cbnz	r0, 2711a <ull_scan_enable+0x112>
	scan->is_enabled = 1U;
   270fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   27102:	f043 0301 	orr.w	r3, r3, #1
   27106:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   2710a:	f011 ffed 	bl	390e8 <ull_adv_is_enabled_get>
   2710e:	4604      	mov	r4, r0
   27110:	b300      	cbz	r0, 27154 <ull_scan_enable+0x14c>
	return 0;
   27112:	4628      	mov	r0, r5
}
   27114:	b00d      	add	sp, #52	; 0x34
   27116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2711a:	200c      	movs	r0, #12
}
   2711c:	b00d      	add	sp, #52	; 0x34
   2711e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
   27122:	6921      	ldr	r1, [r4, #16]
		uint32_t ticks_ref = 0U;
   27124:	950a      	str	r5, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
   27126:	4633      	mov	r3, r6
   27128:	aa0a      	add	r2, sp, #40	; 0x28
   2712a:	2003      	movs	r0, #3
		uint32_t offset_us = 0U;
   2712c:	950b      	str	r5, [sp, #44]	; 0x2c
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
   2712e:	f001 f9e7 	bl	28500 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
   27132:	990b      	ldr	r1, [sp, #44]	; 0x2c
   27134:	2900      	cmp	r1, #0
   27136:	d0a6      	beq.n	27086 <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
   27138:	4811      	ldr	r0, [pc, #68]	; (27180 <ull_scan_enable+0x178>)
   2713a:	a30b      	add	r3, pc, #44	; (adr r3, 27168 <ull_scan_enable+0x160>)
   2713c:	e9d3 2300 	ldrd	r2, r3, [r3]
   27140:	fba1 0100 	umull	r0, r1, r1, r0
   27144:	f7fe ffdc 	bl	26100 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
   27148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
   2714a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
   2714e:	eb00 0903 	add.w	r9, r0, r3
   27152:	e798      	b.n	27086 <ull_scan_enable+0x7e>
		ull_filter_adv_scan_state_cb(BIT(1));
   27154:	4638      	mov	r0, r7
   27156:	f018 fc25 	bl	3f9a4 <ull_filter_adv_scan_state_cb>
	return 0;
   2715a:	4620      	mov	r0, r4
}
   2715c:	b00d      	add	sp, #52	; 0x34
   2715e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27162:	bf00      	nop
   27164:	f3af 8000 	nop.w
   27168:	1afd498d 	.word	0x1afd498d
   2716c:	00000007 	.word	0x00000007
   27170:	84e72a00 	.word	0x84e72a00
   27174:	20005258 	.word	0x20005258
   27178:	38e38e39 	.word	0x38e38e39
   2717c:	0003933d 	.word	0x0003933d
   27180:	3b9aca00 	.word	0x3b9aca00
   27184:	00037289 	.word	0x00037289

00027188 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
   27188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   2718c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   2718e:	8e47      	ldrh	r7, [r0, #50]	; 0x32
{
   27190:	4616      	mov	r6, r2
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   27192:	441f      	add	r7, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   27194:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   27198:	b2bf      	uxth	r7, r7
   2719a:	4439      	add	r1, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   2719c:	f012 0307 	ands.w	r3, r2, #7
{
   271a0:	b08b      	sub	sp, #44	; 0x2c
   271a2:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   271a4:	b289      	uxth	r1, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   271a6:	d00a      	beq.n	271be <event_conn_upd_prep+0x36>
		static memq_link_t s_link;
		static struct mayfly s_mfy_sched_offset = {0, 0,
			&s_link, 0, 0 };
		void (*fp_mfy_select_or_use)(void *) = NULL;

		switch (conn->llcp_cu.state) {
   271a8:	1e5a      	subs	r2, r3, #1
   271aa:	2a04      	cmp	r2, #4
   271ac:	f200 8376 	bhi.w	2789c <event_conn_upd_prep+0x714>
   271b0:	e8df f012 	tbh	[pc, r2, lsl #1]
   271b4:	026d01c6 	.word	0x026d01c6
   271b8:	01650239 	.word	0x01650239
   271bc:	023e      	.short	0x023e
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   271be:	f8b0 90f4 	ldrh.w	r9, [r0, #244]	; 0xf4
   271c2:	eba1 0109 	sub.w	r1, r1, r9
   271c6:	b28d      	uxth	r5, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
   271c8:	042a      	lsls	r2, r5, #16
   271ca:	f100 8183 	bmi.w	274d4 <event_conn_upd_prep+0x34c>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   271ce:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   271d2:	2a00      	cmp	r2, #0
   271d4:	f2c0 8270 	blt.w	276b8 <event_conn_upd_prep+0x530>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
   271d8:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   271dc:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   271e0:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
   271e4:	f894 3195 	ldrb.w	r3, [r4, #405]	; 0x195
		conn->llcp_cu.ack = conn->llcp_cu.req;
   271e8:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   271ec:	f884 1119 	strb.w	r1, [r4, #281]	; 0x119
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   271f0:	4293      	cmp	r3, r2
   271f2:	d00a      	beq.n	2720a <event_conn_upd_prep+0x82>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   271f4:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   271f8:	f003 030f 	and.w	r3, r3, #15
   271fc:	2b06      	cmp	r3, #6
   271fe:	d104      	bne.n	2720a <event_conn_upd_prep+0x82>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
   27200:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   27202:	f884 2195 	strb.w	r2, [r4, #405]	; 0x195
			conn->procedure_expire = 0U;
   27206:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn == conn_upd_curr) {
   2720a:	4bbf      	ldr	r3, [pc, #764]	; (27508 <event_conn_upd_prep+0x380>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
   2720c:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
	if (conn == conn_upd_curr) {
   27210:	681a      	ldr	r2, [r3, #0]
   27212:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   27214:	bf04      	itt	eq
   27216:	2200      	moveq	r2, #0
   27218:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
   2721a:	f1b8 0f00 	cmp.w	r8, #0
   2721e:	f000 815e 	beq.w	274de <event_conn_upd_prep+0x356>
   27222:	f8d8 0000 	ldr.w	r0, [r8]
   27226:	2800      	cmp	r0, #0
   27228:	f000 8159 	beq.w	274de <event_conn_upd_prep+0x356>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
   2722c:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
   27230:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
   27234:	6842      	ldr	r2, [r0, #4]
   27236:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
   2723a:	4563      	cmp	r3, ip
   2723c:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
   27240:	f8b4 1120 	ldrh.w	r1, [r4, #288]	; 0x120
   27244:	f000 8240 	beq.w	276c8 <event_conn_upd_prep+0x540>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
   27248:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
   2724c:	f8a8 c006 	strh.w	ip, [r8, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   27250:	f04f 0e18 	mov.w	lr, #24

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
   27254:	f04f 0c00 	mov.w	ip, #0
			cu->interval = conn->llcp_cu.interval;
   27258:	f8a8 301e 	strh.w	r3, [r8, #30]
			cu->latency = conn->llcp_cu.latency;
   2725c:	f8a8 2020 	strh.w	r2, [r8, #32]
			cu->timeout = conn->llcp_cu.timeout;
   27260:	f8a8 1022 	strh.w	r1, [r8, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   27264:	f888 e004 	strb.w	lr, [r8, #4]
			cu->status = 0x00;
   27268:	f888 c01c 	strb.w	ip, [r8, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
   2726c:	4641      	mov	r1, r8
   2726e:	f010 fce3 	bl	37c38 <ll_rx_put>
		ll_rx_sched();
   27272:	f010 fceb 	bl	37c4c <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   27276:	68a3      	ldr	r3, [r4, #8]
   27278:	2b00      	cmp	r3, #0
   2727a:	da09      	bge.n	27290 <event_conn_upd_prep+0x108>
			uint32_t ticks_prepare_to_start =
   2727c:	68e2      	ldr	r2, [r4, #12]
   2727e:	6861      	ldr	r1, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
   27280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   27284:	428a      	cmp	r2, r1
   27286:	bf2c      	ite	cs
   27288:	18b6      	addcs	r6, r6, r2
   2728a:	1876      	addcc	r6, r6, r1
   2728c:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
   2728e:	1af6      	subs	r6, r6, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
   27290:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
   27292:	f8b4 811c 	ldrh.w	r8, [r4, #284]	; 0x11c
		conn_interval_old = instant_latency * lll->interval;
   27296:	fb10 f005 	smulbb	r0, r0, r5
   2729a:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
   2729c:	fbb0 f2f8 	udiv	r2, r0, r8
   272a0:	fa1f fa82 	uxth.w	sl, r2
		conn_interval_new = latency * conn->llcp_cu.interval;
   272a4:	fb18 f30a 	smulbb	r3, r8, sl
   272a8:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
   272aa:	4298      	cmp	r0, r3
   272ac:	f080 80d6 	bcs.w	2745c <event_conn_upd_prep+0x2d4>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   272b0:	1a1b      	subs	r3, r3, r0
   272b2:	f240 42e2 	movw	r2, #1250	; 0x4e2
   272b6:	4895      	ldr	r0, [pc, #596]	; (2750c <event_conn_upd_prep+0x384>)
   272b8:	fb02 f303 	mul.w	r3, r2, r3
   272bc:	fba3 0100 	umull	r0, r1, r3, r0
   272c0:	a38f      	add	r3, pc, #572	; (adr r3, 27500 <event_conn_upd_prep+0x378>)
   272c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   272c6:	f7fe ff1b 	bl	26100 <__aeabi_uldivmod>
   272ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   272ce:	4406      	add	r6, r0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
   272d0:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
   272d2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
   272d6:	4491      	add	r9, r2
   272d8:	eba9 0707 	sub.w	r7, r9, r7
   272dc:	4457      	add	r7, sl
		conn_interval_us = conn->llcp_cu.interval *
   272de:	f240 49e2 	movw	r9, #1250	; 0x4e2
		} else if (lll->role) {
   272e2:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
   272e4:	85e7      	strh	r7, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
   272e6:	fb09 f708 	mul.w	r7, r9, r8
		} else if (lll->role) {
   272ea:	f2c0 820f 	blt.w	2770c <event_conn_upd_prep+0x584>
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   272ee:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   272f2:	4986      	ldr	r1, [pc, #536]	; (2750c <event_conn_upd_prep+0x384>)
   272f4:	a382      	add	r3, pc, #520	; (adr r3, 27500 <event_conn_upd_prep+0x378>)
   272f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   272fa:	fba0 0101 	umull	r0, r1, r0, r1
   272fe:	f7fe feff 	bl	26100 <__aeabi_uldivmod>
   27302:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
   27306:	f100 0901 	add.w	r9, r0, #1
		periodic_us = conn_interval_us;
   2730a:	46ba      	mov	sl, r7

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   2730c:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
		lll->latency = conn->llcp_cu.latency;
   27310:	f8b4 111e 	ldrh.w	r1, [r4, #286]	; 0x11e
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27314:	4b7e      	ldr	r3, [pc, #504]	; (27510 <event_conn_upd_prep+0x388>)
		lll->interval = conn->llcp_cu.interval;
   27316:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   2731a:	f242 7010 	movw	r0, #10000	; 0x2710
   2731e:	fb00 7202 	mla	r2, r0, r2, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27322:	487c      	ldr	r0, [pc, #496]	; (27514 <event_conn_upd_prep+0x38c>)
		lll->latency = conn->llcp_cu.latency;
   27324:	85a1      	strh	r1, [r4, #44]	; 0x2c
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27326:	443b      	add	r3, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27328:	4438      	add	r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   2732a:	fbb3 f3f7 	udiv	r3, r3, r7
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   2732e:	3a01      	subs	r2, #1
   27330:	fbb2 f2f7 	udiv	r2, r2, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27334:	fbb0 f7f7 	udiv	r7, r0, r7
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   27338:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   2733c:	b298      	uxth	r0, r3
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2733e:	1d8a      	adds	r2, r1, #6
   27340:	4290      	cmp	r0, r2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27342:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27346:	f8a4 70c6 	strh.w	r7, [r4, #198]	; 0xc6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2734a:	dd04      	ble.n	27356 <event_conn_upd_prep+0x1ce>
   2734c:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
   27350:	31fa      	adds	r1, #250	; 0xfa
   27352:	4401      	add	r1, r0
   27354:	b288      	uxth	r0, r1
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
   27356:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   2735a:	f8a4 00ca 	strh.w	r0, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
   2735e:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
   27360:	bf44      	itt	mi
   27362:	2300      	movmi	r3, #0
   27364:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   27368:	2102      	movs	r1, #2
   2736a:	2001      	movs	r0, #1
   2736c:	f01c fbfe 	bl	43b6c <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   27370:	2200      	movs	r2, #0
   27372:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   27374:	4607      	mov	r7, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   27376:	2001      	movs	r0, #1
   27378:	f00c fe0a 	bl	33f90 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   2737c:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   27380:	4965      	ldr	r1, [pc, #404]	; (27518 <event_conn_upd_prep+0x390>)
   27382:	4620      	mov	r0, r4
   27384:	f00c fd96 	bl	33eb4 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27388:	3005      	adds	r0, #5
   2738a:	fa5f f880 	uxtb.w	r8, r0
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
   2738e:	4b63      	ldr	r3, [pc, #396]	; (2751c <event_conn_upd_prep+0x394>)
   27390:	9400      	str	r4, [sp, #0]
   27392:	4642      	mov	r2, r8
   27394:	2101      	movs	r1, #1
   27396:	2000      	movs	r0, #0
   27398:	f00e f9ec 	bl	35774 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   2739c:	f030 0302 	bics.w	r3, r0, #2
   273a0:	d00c      	beq.n	273bc <event_conn_upd_prep+0x234>
   273a2:	f640 43cc 	movw	r3, #3276	; 0xccc
   273a6:	4a5e      	ldr	r2, [pc, #376]	; (27520 <event_conn_upd_prep+0x398>)
   273a8:	495e      	ldr	r1, [pc, #376]	; (27524 <event_conn_upd_prep+0x39c>)
   273aa:	485f      	ldr	r0, [pc, #380]	; (27528 <event_conn_upd_prep+0x3a0>)
   273ac:	f022 fe96 	bl	4a0dc <printk>
   273b0:	4040      	eors	r0, r0
   273b2:	f380 8811 	msr	BASEPRI, r0
   273b6:	f04f 0003 	mov.w	r0, #3
   273ba:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   273bc:	4b53      	ldr	r3, [pc, #332]	; (2750c <event_conn_upd_prep+0x384>)
   273be:	fbaa ab03 	umull	sl, fp, sl, r3
   273c2:	4650      	mov	r0, sl
   273c4:	a34e      	add	r3, pc, #312	; (adr r3, 27500 <event_conn_upd_prep+0x378>)
   273c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   273ca:	4659      	mov	r1, fp
   273cc:	f7fe fe98 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
   273d0:	4a56      	ldr	r2, [pc, #344]	; (2752c <event_conn_upd_prep+0x3a4>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   273d2:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
   273d6:	fba5 2302 	umull	r2, r3, r5, r2
   273da:	2107      	movs	r1, #7
   273dc:	ebba 0002 	subs.w	r0, sl, r2
   273e0:	fb01 3305 	mla	r3, r1, r5, r3
   273e4:	eb6b 0103 	sbc.w	r1, fp, r3
   273e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   273ec:	2300      	movs	r3, #0
   273ee:	f7fe fe87 	bl	26100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   273f2:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   273f6:	4b4e      	ldr	r3, [pc, #312]	; (27530 <event_conn_upd_prep+0x3a8>)
   273f8:	4a4e      	ldr	r2, [pc, #312]	; (27534 <event_conn_upd_prep+0x3ac>)
				     TICKER_NULL_LAZY,
#else
				     TICKER_LAZY_MUST_EXPIRE_KEEP,
#endif /* CONFIG_BT_TICKER_LOW_LAT */
				     (ticks_slot_overhead +
				      conn->ull.ticks_slot),
   273fa:	6921      	ldr	r1, [r4, #16]
   273fc:	9104      	str	r1, [sp, #16]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   273fe:	f8df e13c 	ldr.w	lr, [pc, #316]	; 2753c <event_conn_upd_prep+0x3b4>
   27402:	9501      	str	r5, [sp, #4]
   27404:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   27408:	ea13 052c 	ands.w	r5, r3, ip, asr #32
   2740c:	bf38      	it	cc
   2740e:	4615      	movcc	r5, r2
   27410:	9002      	str	r0, [sp, #8]
   27412:	4633      	mov	r3, r6
   27414:	9103      	str	r1, [sp, #12]
   27416:	9408      	str	r4, [sp, #32]
   27418:	9406      	str	r4, [sp, #24]
   2741a:	f8cd 9000 	str.w	r9, [sp]
   2741e:	4642      	mov	r2, r8
   27420:	9505      	str	r5, [sp, #20]
   27422:	f8cd e01c 	str.w	lr, [sp, #28]
   27426:	2101      	movs	r1, #1
   27428:	2000      	movs	r0, #0
   2742a:	f00e f919 	bl	35660 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   2742e:	f030 0302 	bics.w	r3, r0, #2
   27432:	d00c      	beq.n	2744e <event_conn_upd_prep+0x2c6>
   27434:	f640 43e6 	movw	r3, #3302	; 0xce6
   27438:	4a39      	ldr	r2, [pc, #228]	; (27520 <event_conn_upd_prep+0x398>)
   2743a:	493a      	ldr	r1, [pc, #232]	; (27524 <event_conn_upd_prep+0x39c>)
   2743c:	483a      	ldr	r0, [pc, #232]	; (27528 <event_conn_upd_prep+0x3a0>)
   2743e:	f022 fe4d 	bl	4a0dc <printk>
   27442:	4040      	eors	r0, r0
   27444:	f380 8811 	msr	BASEPRI, r0
   27448:	f04f 0003 	mov.w	r0, #3
   2744c:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
   2744e:	2f00      	cmp	r7, #0
   27450:	f040 8156 	bne.w	27700 <event_conn_upd_prep+0x578>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
   27454:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
   27456:	b00b      	add	sp, #44	; 0x2c
   27458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   2745c:	fb08 0212 	mls	r2, r8, r2, r0
   27460:	f240 43e2 	movw	r3, #1250	; 0x4e2
   27464:	b292      	uxth	r2, r2
   27466:	4829      	ldr	r0, [pc, #164]	; (2750c <event_conn_upd_prep+0x384>)
   27468:	fb03 f202 	mul.w	r2, r3, r2
   2746c:	fba2 0100 	umull	r0, r1, r2, r0
   27470:	a323      	add	r3, pc, #140	; (adr r3, 27500 <event_conn_upd_prep+0x378>)
   27472:	e9d3 2300 	ldrd	r2, r3, [r3]
   27476:	f7fe fe43 	bl	26100 <__aeabi_uldivmod>
   2747a:	1a36      	subs	r6, r6, r0
   2747c:	e728      	b.n	272d0 <event_conn_upd_prep+0x148>
						      conn->lll.latency + 6;
   2747e:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   27480:	f890 011a 	ldrb.w	r0, [r0, #282]	; 0x11a
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
   27484:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
	    conn->tx_head &&
   27488:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
						      conn->lll.latency + 6;
   2748c:	3506      	adds	r5, #6
   2748e:	4429      	add	r1, r5
   27490:	b289      	uxth	r1, r1
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   27492:	f36f 0002 	bfc	r0, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
   27496:	f8a4 10f4 	strh.w	r1, [r4, #244]	; 0xf4
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   2749a:	8119      	strh	r1, [r3, #8]
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   2749c:	f884 011a 	strb.w	r0, [r4, #282]	; 0x11a
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   274a0:	f1a3 0109 	sub.w	r1, r3, #9
	if (
   274a4:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
   274a8:	b122      	cbz	r2, 274b4 <event_conn_upd_prep+0x32c>
	    !conn->llcp_enc.pause_tx &&
   274aa:	f894 5176 	ldrb.w	r5, [r4, #374]	; 0x176
	    conn->tx_head &&
   274ae:	07ae      	lsls	r6, r5, #30
   274b0:	f140 817d 	bpl.w	277ae <event_conn_upd_prep+0x626>
		if (!conn->tx_ctrl) {
   274b4:	2800      	cmp	r0, #0
   274b6:	f000 818e 	beq.w	277d6 <event_conn_upd_prep+0x64e>
	tx->next = conn->tx_ctrl_last->next;
   274ba:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
   274be:	6810      	ldr	r0, [r2, #0]
   274c0:	f843 0c09 	str.w	r0, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
   274c4:	6011      	str	r1, [r2, #0]
	if (!tx->next) {
   274c6:	f853 2c09 	ldr.w	r2, [r3, #-9]
	conn->tx_ctrl_last = tx;
   274ca:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
	if (!tx->next) {
   274ce:	b90a      	cbnz	r2, 274d4 <event_conn_upd_prep+0x34c>
		conn->tx_data_last = tx;
   274d0:	f8c4 11e4 	str.w	r1, [r4, #484]	; 0x1e4
			return -EINPROGRESS;
   274d4:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   274d8:	b00b      	add	sp, #44	; 0x2c
   274da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LL_ASSERT(rx && rx->hdr.link);
   274de:	f44f 6342 	mov.w	r3, #3104	; 0xc20
   274e2:	4a0f      	ldr	r2, [pc, #60]	; (27520 <event_conn_upd_prep+0x398>)
   274e4:	4914      	ldr	r1, [pc, #80]	; (27538 <event_conn_upd_prep+0x3b0>)
   274e6:	4810      	ldr	r0, [pc, #64]	; (27528 <event_conn_upd_prep+0x3a0>)
   274e8:	f022 fdf8 	bl	4a0dc <printk>
   274ec:	4040      	eors	r0, r0
   274ee:	f380 8811 	msr	BASEPRI, r0
   274f2:	f04f 0003 	mov.w	r0, #3
   274f6:	df02      	svc	2
   274f8:	f8d8 0000 	ldr.w	r0, [r8]
   274fc:	e696      	b.n	2722c <event_conn_upd_prep+0xa4>
   274fe:	bf00      	nop
   27500:	1afd498d 	.word	0x1afd498d
   27504:	00000007 	.word	0x00000007
   27508:	200052b4 	.word	0x200052b4
   2750c:	3b9aca00 	.word	0x3b9aca00
   27510:	01c9c37f 	.word	0x01c9c37f
   27514:	026259ff 	.word	0x026259ff
   27518:	20002d70 	.word	0x20002d70
   2751c:	00039a35 	.word	0x00039a35
   27520:	00053248 	.word	0x00053248
   27524:	000532a4 	.word	0x000532a4
   27528:	00052d50 	.word	0x00052d50
   2752c:	1afd498d 	.word	0x1afd498d
   27530:	0003ea71 	.word	0x0003ea71
   27534:	0003ec65 	.word	0x0003ec65
   27538:	00053290 	.word	0x00053290
   2753c:	000399dd 	.word	0x000399dd
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
   27540:	4fcb      	ldr	r7, [pc, #812]	; (27870 <event_conn_upd_prep+0x6e8>)
		rx = ll_pdu_rx_alloc_peek(1);
   27542:	2001      	movs	r0, #1
   27544:	f010 fb88 	bl	37c58 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   27548:	4680      	mov	r8, r0
   2754a:	2800      	cmp	r0, #0
   2754c:	f000 8154 	beq.w	277f8 <event_conn_upd_prep+0x670>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   27550:	48c8      	ldr	r0, [pc, #800]	; (27874 <event_conn_upd_prep+0x6ec>)
   27552:	f00c fc79 	bl	33e48 <mem_acquire>
		if (!tx) {
   27556:	4605      	mov	r5, r0
   27558:	2800      	cmp	r0, #0
   2755a:	f000 814d 	beq.w	277f8 <event_conn_upd_prep+0x670>
	if (!conn_upd_curr) {
   2755e:	4bc6      	ldr	r3, [pc, #792]	; (27878 <event_conn_upd_prep+0x6f0>)
   27560:	681a      	ldr	r2, [r3, #0]
   27562:	2a00      	cmp	r2, #0
   27564:	f000 8121 	beq.w	277aa <event_conn_upd_prep+0x622>
		(void)ll_pdu_rx_alloc();
   27568:	f010 fb96 	bl	37c98 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
   2756c:	f8d8 3000 	ldr.w	r3, [r8]
   27570:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   27574:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   27576:	230c      	movs	r3, #12
		conn->llcp_rx = rx;
   27578:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   2757c:	716b      	strb	r3, [r5, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   2757e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   27582:	792a      	ldrb	r2, [r5, #4]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   27584:	48bd      	ldr	r0, [pc, #756]	; (2787c <event_conn_upd_prep+0x6f4>)
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
   27586:	f894 111a 	ldrb.w	r1, [r4, #282]	; 0x11a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   2758a:	f042 0203 	orr.w	r2, r2, #3
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   2758e:	fba0 0303 	umull	r0, r3, r0, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   27592:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   27594:	712a      	strb	r2, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   27596:	71e8      	strb	r0, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
   27598:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
   2759c:	722a      	strb	r2, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
   2759e:	f3c3 238f 	ubfx	r3, r3, #10, #16
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   275a2:	68a2      	ldr	r2, [r4, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
   275a4:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   275a8:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
   275ac:	f8a5 300b 	strh.w	r3, [r5, #11]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
   275b0:	2003      	movs	r0, #3
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   275b2:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   275b6:	f8a5 300d 	strh.w	r3, [r5, #13]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
   275ba:	f360 0102 	bfi	r1, r0, #0, #3
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   275be:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
   275c2:	f8a5 300f 	strh.w	r3, [r5, #15]
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   275c6:	2a00      	cmp	r2, #0
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   275c8:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
   275cc:	f884 111a 	strb.w	r1, [r4, #282]	; 0x11a
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   275d0:	da0a      	bge.n	275e8 <event_conn_upd_prep+0x460>
			uint32_t ticks_prepare_to_start =
   275d2:	68e3      	ldr	r3, [r4, #12]
   275d4:	6861      	ldr	r1, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   275d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
   275da:	428b      	cmp	r3, r1
   275dc:	bf2c      	ite	cs
   275de:	18f6      	addcs	r6, r6, r3
   275e0:	1876      	addcc	r6, r6, r1
   275e2:	1ab2      	subs	r2, r6, r2
   275e4:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
		mfy_sched_offset->fp = fp_mfy_select_or_use;
   275e8:	4ea5      	ldr	r6, [pc, #660]	; (27880 <event_conn_upd_prep+0x6f8>)
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
   275ea:	3509      	adds	r5, #9
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   275ec:	2201      	movs	r2, #1
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
   275ee:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   275f2:	4633      	mov	r3, r6
   275f4:	4610      	mov	r0, r2
   275f6:	2102      	movs	r1, #2
		mfy_sched_offset->fp = fp_mfy_select_or_use;
   275f8:	60f7      	str	r7, [r6, #12]
		mfy_sched_offset->param = (void *)conn;
   275fa:	60b4      	str	r4, [r6, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   275fc:	f00c fcfc 	bl	33ff8 <mayfly_enqueue>
		LL_ASSERT(!retval);
   27600:	2800      	cmp	r0, #0
   27602:	f43f af67 	beq.w	274d4 <event_conn_upd_prep+0x34c>
   27606:	f640 3373 	movw	r3, #2931	; 0xb73
   2760a:	4a9e      	ldr	r2, [pc, #632]	; (27884 <event_conn_upd_prep+0x6fc>)
   2760c:	499e      	ldr	r1, [pc, #632]	; (27888 <event_conn_upd_prep+0x700>)
   2760e:	489f      	ldr	r0, [pc, #636]	; (2788c <event_conn_upd_prep+0x704>)
   27610:	f022 fd64 	bl	4a0dc <printk>
   27614:	4040      	eors	r0, r0
   27616:	f380 8811 	msr	BASEPRI, r0
   2761a:	f04f 0003 	mov.w	r0, #3
   2761e:	df02      	svc	2
	return -EINPROGRESS;
   27620:	f06f 0076 	mvn.w	r0, #118	; 0x76
   27624:	e717      	b.n	27456 <event_conn_upd_prep+0x2ce>
			return -EBUSY;
   27626:	f06f 000f 	mvn.w	r0, #15
}
   2762a:	b00b      	add	sp, #44	; 0x2c
   2762c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	conn_upd_curr = NULL;
   27630:	4891      	ldr	r0, [pc, #580]	; (27878 <event_conn_upd_prep+0x6f0>)
			conn->llcp_ack = conn->llcp_req;
   27632:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
   27636:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
	    conn->tx_head &&
   2763a:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			conn->llcp_ack = conn->llcp_req;
   2763e:	f884 10f1 	strb.w	r1, [r4, #241]	; 0xf1
	conn_upd_curr = NULL;
   27642:	2500      	movs	r5, #0
			conn->llcp_cu.ack = conn->llcp_cu.req;
   27644:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
	conn_upd_curr = NULL;
   27648:	6005      	str	r5, [r0, #0]
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   2764a:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
			conn->llcp_cu.ack = conn->llcp_cu.req;
   2764e:	f884 1119 	strb.w	r1, [r4, #281]	; 0x119
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   27652:	f884 0195 	strb.w	r0, [r4, #405]	; 0x195
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   27656:	f1a2 0109 	sub.w	r1, r2, #9
	if (
   2765a:	f8d4 01d8 	ldr.w	r0, [r4, #472]	; 0x1d8
   2765e:	b1c3      	cbz	r3, 27692 <event_conn_upd_prep+0x50a>
	    !conn->llcp_enc.pause_tx &&
   27660:	f894 5176 	ldrb.w	r5, [r4, #374]	; 0x176
	    conn->tx_head &&
   27664:	07ad      	lsls	r5, r5, #30
   27666:	d414      	bmi.n	27692 <event_conn_upd_prep+0x50a>
	    !conn->llcp_phy.pause_tx &&
   27668:	f894 51cf 	ldrb.w	r5, [r4, #463]	; 0x1cf
   2766c:	07ef      	lsls	r7, r5, #31
   2766e:	d410      	bmi.n	27692 <event_conn_upd_prep+0x50a>
		if (conn->tx_head == conn->tx_data) {
   27670:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
   27674:	42ab      	cmp	r3, r5
   27676:	f000 80c7 	beq.w	27808 <event_conn_upd_prep+0x680>
		} else if (!conn->tx_ctrl) {
   2767a:	b968      	cbnz	r0, 27698 <event_conn_upd_prep+0x510>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2767c:	7918      	ldrb	r0, [r3, #4]
   2767e:	f000 0003 	and.w	r0, r0, #3
   27682:	2803      	cmp	r0, #3
   27684:	f000 80e7 	beq.w	27856 <event_conn_upd_prep+0x6ce>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   27688:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   2768c:	e006      	b.n	2769c <event_conn_upd_prep+0x514>
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_select;
   2768e:	4f80      	ldr	r7, [pc, #512]	; (27890 <event_conn_upd_prep+0x708>)
   27690:	e757      	b.n	27542 <event_conn_upd_prep+0x3ba>
		if (!conn->tx_ctrl) {
   27692:	2800      	cmp	r0, #0
   27694:	f000 80a9 	beq.w	277ea <event_conn_upd_prep+0x662>
	tx->next = conn->tx_ctrl_last->next;
   27698:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   2769c:	6818      	ldr	r0, [r3, #0]
   2769e:	f842 0c09 	str.w	r0, [r2, #-9]
	conn->tx_ctrl_last->next = tx;
   276a2:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
   276a4:	f852 3c09 	ldr.w	r3, [r2, #-9]
   276a8:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
	if (!tx->next) {
   276ac:	2b00      	cmp	r3, #0
   276ae:	f000 80a6 	beq.w	277fe <event_conn_upd_prep+0x676>
   276b2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   276b6:	e6ce      	b.n	27456 <event_conn_upd_prep+0x2ce>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   276b8:	f890 20e5 	ldrb.w	r2, [r0, #229]	; 0xe5
   276bc:	2a00      	cmp	r2, #0
   276be:	f43f ad8b 	beq.w	271d8 <event_conn_upd_prep+0x50>
			conn->periph.llcp_type = LLCP_NONE;
   276c2:	f880 30e5 	strb.w	r3, [r0, #229]	; 0xe5
   276c6:	e58b      	b.n	271e0 <event_conn_upd_prep+0x58>
		if ((conn->llcp_cu.interval != lll->interval) ||
   276c8:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
   276cc:	4594      	cmp	ip, r2
   276ce:	f47f adbb 	bne.w	27248 <event_conn_upd_prep+0xc0>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   276d2:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   276d6:	fb0c fa03 	mul.w	sl, ip, r3
   276da:	f242 7c10 	movw	ip, #10000	; 0x2710
   276de:	fb0c ac01 	mla	ip, ip, r1, sl
		    (conn->llcp_cu.latency != lll->latency) ||
   276e2:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   276e6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   276ea:	fbbc fcfa 	udiv	ip, ip, sl
		    (conn->llcp_cu.latency != lll->latency) ||
   276ee:	fa1f fc8c 	uxth.w	ip, ip
   276f2:	45e6      	cmp	lr, ip
   276f4:	f47f ada8 	bne.w	27248 <event_conn_upd_prep+0xc0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   276f8:	2301      	movs	r3, #1
   276fa:	f888 3004 	strb.w	r3, [r8, #4]
   276fe:	e5b5      	b.n	2726c <event_conn_upd_prep+0xe4>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
   27700:	2201      	movs	r2, #1
   27702:	4610      	mov	r0, r2
   27704:	2102      	movs	r1, #2
   27706:	f00c fc43 	bl	33f90 <mayfly_enable>
   2770a:	e6a3      	b.n	27454 <event_conn_upd_prep+0x2cc>
			lll->periph.window_widening_prepare_us -=
   2770c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
				lll->periph.window_widening_periodic_us *
   2770e:	6c23      	ldr	r3, [r4, #64]	; 0x40
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27710:	f8df 8184 	ldr.w	r8, [pc, #388]	; 27898 <event_conn_upd_prep+0x710>
			lll->periph.window_widening_prepare_us -=
   27714:	fb03 2515 	mls	r5, r3, r5, r2
   27718:	64a5      	str	r5, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
   2771a:	f019 fcc5 	bl	410a8 <lll_clock_ppm_local_get>
   2771e:	4605      	mov	r5, r0
   27720:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
   27724:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   27728:	f019 fcc0 	bl	410ac <lll_clock_ppm_get>
   2772c:	4405      	add	r5, r0
   2772e:	fb07 f505 	mul.w	r5, r7, r5
   27732:	4b58      	ldr	r3, [pc, #352]	; (27894 <event_conn_upd_prep+0x70c>)
			lll->periph.window_widening_prepare_us +=
   27734:	6ca2      	ldr	r2, [r4, #72]	; 0x48
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   27736:	f894 1128 	ldrb.w	r1, [r4, #296]	; 0x128
				ceiling_fraction(((lll_clock_ppm_local_get() +
   2773a:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   2773e:	f205 253f 	addw	r5, r5, #575	; 0x23f
   27742:	fba3 3505 	umull	r3, r5, r3, r5
   27746:	0cad      	lsrs	r5, r5, #18
				lll->periph.window_widening_periodic_us *
   27748:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
   2774c:	087b      	lsrs	r3, r7, #1
			lll->periph.window_widening_prepare_us +=
   2774e:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
   27750:	3b96      	subs	r3, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
   27752:	429a      	cmp	r2, r3
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   27754:	fb09 fc01 	mul.w	ip, r9, r1
			lll->periph.window_widening_prepare_us +=
   27758:	bf28      	it	cs
   2775a:	461a      	movcs	r2, r3
			conn->periph.ticks_to_offset = 0U;
   2775c:	f04f 0e00 	mov.w	lr, #0
			lll->periph.window_widening_max_us =
   27760:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27764:	fba0 0108 	umull	r0, r1, r0, r8
   27768:	a33f      	add	r3, pc, #252	; (adr r3, 27868 <event_conn_upd_prep+0x6e0>)
   2776a:	e9d3 2300 	ldrd	r2, r3, [r3]
			lll->periph.window_size_prepare_us =
   2776e:	f8c4 c050 	str.w	ip, [r4, #80]	; 0x50
			conn->periph.ticks_to_offset = 0U;
   27772:	f8c4 e0ec 	str.w	lr, [r4, #236]	; 0xec
			lll->periph.window_widening_periodic_us =
   27776:	6425      	str	r5, [r4, #64]	; 0x40
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   27778:	f7fe fcc2 	bl	26100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   2777c:	4a3f      	ldr	r2, [pc, #252]	; (2787c <event_conn_upd_prep+0x6f4>)
   2777e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   27782:	fba2 2303 	umull	r2, r3, r2, r3
   27786:	0a9b      	lsrs	r3, r3, #10
   27788:	fb09 f903 	mul.w	r9, r9, r3
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   2778c:	1a36      	subs	r6, r6, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   2778e:	a336      	add	r3, pc, #216	; (adr r3, 27868 <event_conn_upd_prep+0x6e0>)
   27790:	e9d3 2300 	ldrd	r2, r3, [r3]
   27794:	fba9 0108 	umull	r0, r1, r9, r8
   27798:	f7fe fcb2 	bl	26100 <__aeabi_uldivmod>
			periodic_us -= lll->periph.window_widening_periodic_us;
   2779c:	eba7 0a05 	sub.w	sl, r7, r5
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   277a0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
   277a4:	f8b4 811c 	ldrh.w	r8, [r4, #284]	; 0x11c
   277a8:	e5b0      	b.n	2730c <event_conn_upd_prep+0x184>
		conn_upd_curr = conn;
   277aa:	601c      	str	r4, [r3, #0]
   277ac:	e6dc      	b.n	27568 <event_conn_upd_prep+0x3e0>
	    !conn->llcp_phy.pause_tx &&
   277ae:	f894 51cf 	ldrb.w	r5, [r4, #463]	; 0x1cf
   277b2:	07ed      	lsls	r5, r5, #31
   277b4:	f53f ae7e 	bmi.w	274b4 <event_conn_upd_prep+0x32c>
		if (conn->tx_head == conn->tx_data) {
   277b8:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
   277bc:	42aa      	cmp	r2, r5
   277be:	d032      	beq.n	27826 <event_conn_upd_prep+0x69e>
		} else if (!conn->tx_ctrl) {
   277c0:	2800      	cmp	r0, #0
   277c2:	f47f ae7a 	bne.w	274ba <event_conn_upd_prep+0x332>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   277c6:	7910      	ldrb	r0, [r2, #4]
   277c8:	f000 0003 	and.w	r0, r0, #3
   277cc:	2803      	cmp	r0, #3
   277ce:	d03c      	beq.n	2784a <event_conn_upd_prep+0x6c2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   277d0:	f8c4 21d8 	str.w	r2, [r4, #472]	; 0x1d8
   277d4:	e673      	b.n	274be <event_conn_upd_prep+0x336>
			tx->next = conn->tx_head;
   277d6:	f843 2c09 	str.w	r2, [r3, #-9]
				conn->tx_ctrl = tx;
   277da:	e9c4 1175 	strd	r1, r1, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   277de:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
	if (!tx->next) {
   277e2:	2a00      	cmp	r2, #0
   277e4:	f47f ae76 	bne.w	274d4 <event_conn_upd_prep+0x34c>
   277e8:	e672      	b.n	274d0 <event_conn_upd_prep+0x348>
			tx->next = conn->tx_head;
   277ea:	f842 3c09 	str.w	r3, [r2, #-9]
				conn->tx_ctrl = tx;
   277ee:	e9c4 1175 	strd	r1, r1, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   277f2:	f8c4 11dc 	str.w	r1, [r4, #476]	; 0x1dc
   277f6:	e759      	b.n	276ac <event_conn_upd_prep+0x524>
			return -ENOBUFS;
   277f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   277fc:	e62b      	b.n	27456 <event_conn_upd_prep+0x2ce>
		conn->tx_data_last = tx;
   277fe:	f8c4 11e4 	str.w	r1, [r4, #484]	; 0x1e4
   27802:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   27806:	e626      	b.n	27456 <event_conn_upd_prep+0x2ce>
			conn->tx_data = conn->tx_data->next;
   27808:	681d      	ldr	r5, [r3, #0]
   2780a:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   2780e:	2800      	cmp	r0, #0
   27810:	f47f af42 	bne.w	27698 <event_conn_upd_prep+0x510>
			tx->next = conn->tx_head->next;
   27814:	6818      	ldr	r0, [r3, #0]
   27816:	f842 0c09 	str.w	r0, [r2, #-9]
			conn->tx_head->next = tx;
   2781a:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl = tx;
   2781c:	f852 3c09 	ldr.w	r3, [r2, #-9]
				conn->tx_ctrl_last = tx;
   27820:	e9c4 1176 	strd	r1, r1, [r4, #472]	; 0x1d8
   27824:	e742      	b.n	276ac <event_conn_upd_prep+0x524>
			conn->tx_data = conn->tx_data->next;
   27826:	6815      	ldr	r5, [r2, #0]
   27828:	f8c4 51e0 	str.w	r5, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   2782c:	2800      	cmp	r0, #0
   2782e:	f47f ae44 	bne.w	274ba <event_conn_upd_prep+0x332>
			tx->next = conn->tx_head->next;
   27832:	6810      	ldr	r0, [r2, #0]
   27834:	f843 0c09 	str.w	r0, [r3, #-9]
			conn->tx_head->next = tx;
   27838:	6011      	str	r1, [r2, #0]
				conn->tx_ctrl = tx;
   2783a:	f853 2c09 	ldr.w	r2, [r3, #-9]
				conn->tx_ctrl_last = tx;
   2783e:	e9c4 1176 	strd	r1, r1, [r4, #472]	; 0x1d8
	if (!tx->next) {
   27842:	2a00      	cmp	r2, #0
   27844:	f47f ae46 	bne.w	274d4 <event_conn_upd_prep+0x34c>
   27848:	e642      	b.n	274d0 <event_conn_upd_prep+0x348>
	    ((pdu_data_tx->llctrl.opcode !=
   2784a:	79d0      	ldrb	r0, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2784c:	2803      	cmp	r0, #3
   2784e:	d0f0      	beq.n	27832 <event_conn_upd_prep+0x6aa>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   27850:	280a      	cmp	r0, #10
   27852:	d1bd      	bne.n	277d0 <event_conn_upd_prep+0x648>
   27854:	e7ed      	b.n	27832 <event_conn_upd_prep+0x6aa>
	    ((pdu_data_tx->llctrl.opcode !=
   27856:	79d8      	ldrb	r0, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   27858:	2803      	cmp	r0, #3
   2785a:	d0db      	beq.n	27814 <event_conn_upd_prep+0x68c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   2785c:	280a      	cmp	r0, #10
   2785e:	f47f af13 	bne.w	27688 <event_conn_upd_prep+0x500>
   27862:	e7d7      	b.n	27814 <event_conn_upd_prep+0x68c>
   27864:	f3af 8000 	nop.w
   27868:	1afd498d 	.word	0x1afd498d
   2786c:	00000007 	.word	0x00000007
   27870:	0003f2c1 	.word	0x0003f2c1
   27874:	20005348 	.word	0x20005348
   27878:	200052b4 	.word	0x200052b4
   2787c:	d1b71759 	.word	0xd1b71759
   27880:	20000ad4 	.word	0x20000ad4
   27884:	00053248 	.word	0x00053248
   27888:	00052ee0 	.word	0x00052ee0
   2788c:	00052d50 	.word	0x00052d50
   27890:	000286c1 	.word	0x000286c1
   27894:	431bde83 	.word	0x431bde83
   27898:	3b9aca00 	.word	0x3b9aca00
			LL_ASSERT(0);
   2789c:	f640 33c7 	movw	r3, #3015	; 0xbc7
   278a0:	4a06      	ldr	r2, [pc, #24]	; (278bc <event_conn_upd_prep+0x734>)
   278a2:	4907      	ldr	r1, [pc, #28]	; (278c0 <event_conn_upd_prep+0x738>)
   278a4:	4807      	ldr	r0, [pc, #28]	; (278c4 <event_conn_upd_prep+0x73c>)
   278a6:	f022 fc19 	bl	4a0dc <printk>
   278aa:	4040      	eors	r0, r0
   278ac:	f380 8811 	msr	BASEPRI, r0
   278b0:	f04f 0003 	mov.w	r0, #3
   278b4:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
   278b6:	2700      	movs	r7, #0
			break;
   278b8:	e643      	b.n	27542 <event_conn_upd_prep+0x3ba>
   278ba:	bf00      	nop
   278bc:	00053248 	.word	0x00053248
   278c0:	00052dd8 	.word	0x00052dd8
   278c4:	00052d50 	.word	0x00052d50

000278c8 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
   278c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	conn = lll->hdr.parent;

	/* Populate the peripheral context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
   278cc:	7f03      	ldrb	r3, [r0, #28]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   278ce:	680e      	ldr	r6, [r1, #0]
{
   278d0:	b097      	sub	sp, #92	; 0x5c
   278d2:	468a      	mov	sl, r1
   278d4:	4615      	mov	r5, r2
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   278d6:	6836      	ldr	r6, [r6, #0]
   278d8:	960a      	str	r6, [sp, #40]	; 0x28
	peer_addr_type = pdu_adv->tx_addr;
   278da:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   278de:	f100 011e 	add.w	r1, r0, #30
{
   278e2:	4604      	mov	r4, r0
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   278e4:	2206      	movs	r2, #6
   278e6:	a814      	add	r0, sp, #80	; 0x50
	peer_addr_type = pdu_adv->tx_addr;
   278e8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	conn = lll->hdr.parent;
   278ec:	682e      	ldr	r6, [r5, #0]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   278ee:	f024 fcfd 	bl	4c2ec <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
   278f2:	f89a 0011 	ldrb.w	r0, [sl, #17]
   278f6:	900c      	str	r0, [sp, #48]	; 0x30

	if (rl_idx != FILTER_IDX_NONE) {
   278f8:	28ff      	cmp	r0, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   278fa:	f10d 0948 	add.w	r9, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
   278fe:	f000 8083 	beq.w	27a08 <ull_periph_setup+0x140>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   27902:	464a      	mov	r2, r9
   27904:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   27908:	f017 ff1a 	bl	3f740 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
   2790c:	f89d 7047 	ldrb.w	r7, [sp, #71]	; 0x47
   27910:	3702      	adds	r7, #2
   27912:	b2ff      	uxtb	r7, r7
   27914:	f88d 7047 	strb.w	r7, [sp, #71]	; 0x47
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
   27918:	6823      	ldr	r3, [r4, #0]

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	const uint8_t peer_id_addr_type = (peer_addr_type & 0x01);
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
   2791a:	f894 801c 	ldrb.w	r8, [r4, #28]
	link = rx->link;
   2791e:	930b      	str	r3, [sp, #44]	; 0x2c
	const uint8_t *own_id_addr = adv->own_id_addr;
   27920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	const uint8_t own_id_addr_type = pdu_adv->rx_addr;
   27922:	ea4f 18d8 	mov.w	r8, r8, lsr #7
	const uint8_t *own_id_addr = adv->own_id_addr;
   27926:	f103 0b71 	add.w	fp, r3, #113	; 0x71

	/* Do not connect twice to the same peer */
	if (ull_conn_peer_connected(own_id_addr_type, own_id_addr,
   2792a:	4640      	mov	r0, r8
   2792c:	4659      	mov	r1, fp
   2792e:	464b      	mov	r3, r9
   27930:	f007 0201 	and.w	r2, r7, #1
   27934:	f012 fdfe 	bl	3a534 <ull_conn_peer_connected>
   27938:	2800      	cmp	r0, #0
   2793a:	d14b      	bne.n	279d4 <ull_periph_setup+0x10c>

		return;
	}

	/* Remember peer and own identity address */
	conn->peer_id_addr_type = peer_id_addr_type;
   2793c:	f896 20d6 	ldrb.w	r2, [r6, #214]	; 0xd6
   27940:	900d      	str	r0, [sp, #52]	; 0x34
   27942:	f367 0241 	bfi	r2, r7, #1, #1
   27946:	f886 20d6 	strb.w	r2, [r6, #214]	; 0xd6
	(void)memcpy(conn->peer_id_addr, peer_id_addr,
   2794a:	4649      	mov	r1, r9
   2794c:	2206      	movs	r2, #6
   2794e:	f106 00dd 	add.w	r0, r6, #221	; 0xdd
   27952:	f024 fccb 	bl	4c2ec <memcpy>
		     sizeof(conn->peer_id_addr));
	conn->own_id_addr_type = own_id_addr_type;
   27956:	f896 20d6 	ldrb.w	r2, [r6, #214]	; 0xd6
   2795a:	f368 0200 	bfi	r2, r8, #0, #1
	(void)memcpy(conn->own_id_addr, own_id_addr,
   2795e:	4659      	mov	r1, fp
	conn->own_id_addr_type = own_id_addr_type;
   27960:	f886 20d6 	strb.w	r2, [r6, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr,
   27964:	f106 00d7 	add.w	r0, r6, #215	; 0xd7
   27968:	2206      	movs	r2, #6
   2796a:	f024 fcbf 	bl	4c2ec <memcpy>
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   2796e:	f105 0804 	add.w	r8, r5, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   27972:	2203      	movs	r2, #3
   27974:	f104 012e 	add.w	r1, r4, #46	; 0x2e
   27978:	f105 0008 	add.w	r0, r5, #8
   2797c:	f024 fcb6 	bl	4c2ec <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   27980:	f105 0718 	add.w	r7, r5, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   27984:	2204      	movs	r2, #4
   27986:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   2798a:	4640      	mov	r0, r8
   2798c:	f024 fcae 	bl	4c2ec <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   27990:	2205      	movs	r2, #5
   27992:	4638      	mov	r0, r7
   27994:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   27998:	f024 fca8 	bl	4c2ec <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   2799c:	4638      	mov	r0, r7
   2799e:	2105      	movs	r1, #5
   279a0:	f00c fc1a 	bl	341d8 <util_ones_count_get>
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   279a4:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   279a8:	7f6f      	ldrb	r7, [r5, #29]
   279aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   279ae:	f360 0705 	bfi	r7, r0, #0, #6
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   279b2:	f3c1 0204 	ubfx	r2, r1, #0, #5
   279b6:	77aa      	strb	r2, [r5, #30]
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   279b8:	776f      	strb	r7, [r5, #29]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   279ba:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
   279bc:	81ef      	strh	r7, [r5, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   279be:	2801      	cmp	r0, #1
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   279c0:	b2d2      	uxtb	r2, r2
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   279c2:	b2bf      	uxth	r7, r7
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
   279c4:	d906      	bls.n	279d4 <ull_periph_setup+0x10c>
   279c6:	321b      	adds	r2, #27
   279c8:	f002 021f 	and.w	r2, r2, #31
   279cc:	2a0b      	cmp	r2, #11
   279ce:	d801      	bhi.n	279d4 <ull_periph_setup+0x10c>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
   279d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   279d2:	bb0f      	cbnz	r7, 27a18 <ull_periph_setup+0x150>
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;

	/* Let the advertiser continue with connectable advertising */
	lll->periph.initiated = 0U;
   279d4:	f895 3020 	ldrb.w	r3, [r5, #32]
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
   279d8:	68e6      	ldr	r6, [r4, #12]
	hdr->disabled_cb = NULL;
   279da:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
   279de:	2200      	movs	r2, #0
	lll->periph.initiated = 0U;
   279e0:	f362 0300 	bfi	r3, r2, #0, #1
	rx->type = NODE_RX_TYPE_RELEASE;
   279e4:	2701      	movs	r7, #1
	hdr->disabled_cb = NULL;
   279e6:	614a      	str	r2, [r1, #20]
	lll->periph.initiated = 0U;
   279e8:	f885 3020 	strb.w	r3, [r5, #32]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
   279ec:	4621      	mov	r1, r4
	rx->type = NODE_RX_TYPE_RELEASE;
   279ee:	7127      	strb	r7, [r4, #4]
		ll_rx_put(link, rx);
   279f0:	f010 f922 	bl	37c38 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
   279f4:	4631      	mov	r1, r6
   279f6:	6830      	ldr	r0, [r6, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
   279f8:	7137      	strb	r7, [r6, #4]
	ll_rx_put(link, rx);
   279fa:	f010 f91d 	bl	37c38 <ll_rx_put>
	ll_rx_sched();
   279fe:	f010 f925 	bl	37c4c <ll_rx_sched>
}
   27a02:	b017      	add	sp, #92	; 0x5c
   27a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
   27a08:	4648      	mov	r0, r9
   27a0a:	2206      	movs	r2, #6
   27a0c:	a914      	add	r1, sp, #80	; 0x50
   27a0e:	f024 fc6d 	bl	4c2ec <memcpy>
   27a12:	f89d 7047 	ldrb.w	r7, [sp, #71]	; 0x47
   27a16:	e77f      	b.n	27918 <ull_periph_setup+0x50>
	((struct lll_adv *)ftr->param)->conn = NULL;
   27a18:	f8da 2000 	ldr.w	r2, [sl]
	conn->periph.sca = pdu_adv->connect_ind.sca;
   27a1c:	f896 00e4 	ldrb.w	r0, [r6, #228]	; 0xe4
	((struct lll_adv *)ftr->param)->conn = NULL;
   27a20:	6053      	str	r3, [r2, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   27a22:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   27a26:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	conn->periph.sca = pdu_adv->connect_ind.sca;
   27a2a:	0949      	lsrs	r1, r1, #5
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   27a2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->periph.sca = pdu_adv->connect_ind.sca;
   27a30:	f361 00c5 	bfi	r0, r1, #3, #3
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   27a34:	822b      	strh	r3, [r5, #16]
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   27a36:	8e63      	ldrh	r3, [r4, #50]	; 0x32
	conn->periph.sca = pdu_adv->connect_ind.sca;
   27a38:	f886 00e4 	strb.w	r0, [r6, #228]	; 0xe4
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   27a3c:	930e      	str	r3, [sp, #56]	; 0x38
		ceiling_fraction(((lll_clock_ppm_local_get() +
   27a3e:	f019 fb33 	bl	410a8 <lll_clock_ppm_local_get>
   27a42:	900d      	str	r0, [sp, #52]	; 0x34
   27a44:	f896 00e4 	ldrb.w	r0, [r6, #228]	; 0xe4
   27a48:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   27a4c:	f019 fb2e 	bl	410ac <lll_clock_ppm_get>
   27a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   27a52:	f8df c328 	ldr.w	ip, [pc, #808]	; 27d7c <ull_periph_setup+0x4b4>
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   27a56:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27a5a:	8a2a      	ldrh	r2, [r5, #16]
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   27a5c:	f240 4be2 	movw	fp, #1250	; 0x4e2
   27a60:	fb0b f707 	mul.w	r7, fp, r7
		ceiling_fraction(((lll_clock_ppm_local_get() +
   27a64:	4418      	add	r0, r3
   27a66:	fb07 f000 	mul.w	r0, r7, r0
   27a6a:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
   27a6e:	f200 203f 	addw	r0, r0, #575	; 0x23f
   27a72:	fbac c000 	umull	ip, r0, ip, r0
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   27a76:	ea4f 0c57 	mov.w	ip, r7, lsr #1
		ceiling_fraction(((lll_clock_ppm_local_get() +
   27a7a:	0c80      	lsrs	r0, r0, #18
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   27a7c:	fb0b f101 	mul.w	r1, fp, r1
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   27a80:	f1ac 0c96 	sub.w	ip, ip, #150	; 0x96
	lll->periph.window_widening_periodic_us =
   27a84:	6268      	str	r0, [r5, #36]	; 0x24
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
   27a86:	f8c5 c028 	str.w	ip, [r5, #40]	; 0x28
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
   27a8a:	63a9      	str	r1, [r5, #56]	; 0x38
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   27a8c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27a8e:	4bb0      	ldr	r3, [pc, #704]	; (27d50 <ull_periph_setup+0x488>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   27a90:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27a94:	f242 7c10 	movw	ip, #10000	; 0x2710
   27a98:	fb0c 7101 	mla	r1, ip, r1, r7
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27a9c:	48ad      	ldr	r0, [pc, #692]	; (27d54 <ull_periph_setup+0x48c>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27a9e:	443b      	add	r3, r7
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27aa0:	f102 0c06 	add.w	ip, r2, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27aa4:	fbb3 f3f7 	udiv	r3, r3, r7
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   27aa8:	3901      	subs	r1, #1
   27aaa:	fbb1 f1f7 	udiv	r1, r1, r7
   27aae:	f8a6 10c2 	strh.w	r1, [r6, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27ab2:	b299      	uxth	r1, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27ab4:	4561      	cmp	r1, ip
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27ab6:	4438      	add	r0, r7
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   27ab8:	f8a6 10ce 	strh.w	r1, [r6, #206]	; 0xce
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   27abc:	fbb0 f0f7 	udiv	r0, r0, r7
   27ac0:	f8a6 00c6 	strh.w	r0, [r6, #198]	; 0xc6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   27ac4:	dd04      	ble.n	27ad0 <ull_periph_setup+0x208>
   27ac6:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
   27aca:	32fa      	adds	r2, #250	; 0xfa
   27acc:	440a      	add	r2, r1
   27ace:	b291      	uxth	r1, r2
   27ad0:	f8a6 10ca 	strh.w	r1, [r6, #202]	; 0xca
	memcpy((void *)&conn->periph.force, &lll->access_addr[0],
   27ad4:	2204      	movs	r2, #4
   27ad6:	4641      	mov	r1, r8
   27ad8:	f106 00e8 	add.w	r0, r6, #232	; 0xe8
   27adc:	f024 fc06 	bl	4c2ec <memcpy>
		chan_sel = pdu_adv->chan_sel;
   27ae0:	4623      	mov	r3, r4
   27ae2:	f813 bf1c 	ldrb.w	fp, [r3, #28]!
   27ae6:	f3cb 1b40 	ubfx	fp, fp, #5, #1
   27aea:	fa5f f28b 	uxtb.w	r2, fp
   27aee:	920d      	str	r2, [sp, #52]	; 0x34
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27af0:	07da      	lsls	r2, r3, #31
   27af2:	f100 80fe 	bmi.w	27cf2 <ull_periph_setup+0x42a>
	cc->status = 0U;
   27af6:	f44f 7380 	mov.w	r3, #256	; 0x100
   27afa:	83a3      	strh	r3, [r4, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   27afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27afe:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
   27b02:	f018 fb95 	bl	40230 <ull_filter_lll_lrpa_used>
   27b06:	f104 032b 	add.w	r3, r4, #43	; 0x2b
   27b0a:	2800      	cmp	r0, #0
   27b0c:	f000 80e6 	beq.w	27cdc <ull_periph_setup+0x414>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   27b10:	4618      	mov	r0, r3
   27b12:	2206      	movs	r2, #6
   27b14:	f104 0124 	add.w	r1, r4, #36	; 0x24
   27b18:	f024 fbe8 	bl	4c2ec <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   27b1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   27b1e:	2bff      	cmp	r3, #255	; 0xff
   27b20:	f104 0025 	add.w	r0, r4, #37	; 0x25
   27b24:	f000 80e0 	beq.w	27ce8 <ull_periph_setup+0x420>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   27b28:	a914      	add	r1, sp, #80	; 0x50
   27b2a:	2206      	movs	r2, #6
   27b2c:	f024 fbde 	bl	4c2ec <memcpy>
	cc->peer_addr_type = peer_addr_type;
   27b30:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   27b34:	77a3      	strb	r3, [r4, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
   27b36:	4649      	mov	r1, r9
   27b38:	2206      	movs	r2, #6
   27b3a:	f104 001f 	add.w	r0, r4, #31
   27b3e:	f024 fbd5 	bl	4c2ec <memcpy>
	cc->sca = conn->periph.sca;
   27b42:	f896 30e4 	ldrb.w	r3, [r6, #228]	; 0xe4
	cc->interval = lll->interval;
   27b46:	89e9      	ldrh	r1, [r5, #14]
	cc->latency = lll->latency;
   27b48:	8a2a      	ldrh	r2, [r5, #16]
   27b4a:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->sca = conn->periph.sca;
   27b4c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   27b50:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	cc->timeout = timeout;
   27b54:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
   27b58:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->interval = lll->interval;
   27b5a:	8661      	strh	r1, [r4, #50]	; 0x32
	lll->handle = ll_conn_handle_get(conn);
   27b5c:	4630      	mov	r0, r6
   27b5e:	f012 f963 	bl	39e28 <ll_conn_handle_get>
		ll_rx_put(link, rx);
   27b62:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
   27b64:	81a8      	strh	r0, [r5, #12]
	rx->handle = lll->handle;
   27b66:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
   27b68:	f8da 4004 	ldr.w	r4, [sl, #4]
		ll_rx_put(link, rx);
   27b6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   27b6e:	f010 f863 	bl	37c38 <ll_rx_put>
		rx->handle = lll->handle;
   27b72:	89ab      	ldrh	r3, [r5, #12]
   27b74:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   27b76:	231b      	movs	r3, #27
   27b78:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
   27b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		link = rx->link;
   27b7c:	f8d4 9000 	ldr.w	r9, [r4]
		if (chan_sel) {
   27b80:	2b00      	cmp	r3, #0
   27b82:	f040 80cb 	bne.w	27d1c <ull_periph_setup+0x454>
			cs->csa = 0x00;
   27b86:	f884 b01c 	strb.w	fp, [r4, #28]
	ll_rx_put(link, rx);
   27b8a:	4621      	mov	r1, r4
   27b8c:	4648      	mov	r0, r9
   27b8e:	f010 f853 	bl	37c38 <ll_rx_put>
	ll_rx_sched();
   27b92:	f010 f85b 	bl	37c4c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27b96:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
   27b9a:	f8b5 8040 	ldrh.w	r8, [r5, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
   27b9e:	f8b5 4042 	ldrh.w	r4, [r5, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27ba2:	2101      	movs	r1, #1
   27ba4:	f000 0007 	and.w	r0, r0, #7
   27ba8:	f019 f89e 	bl	40ce8 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27bac:	eb04 0308 	add.w	r3, r4, r8
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   27bb0:	4681      	mov	r9, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27bb2:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
   27bb6:	4868      	ldr	r0, [pc, #416]	; (27d58 <ull_periph_setup+0x490>)
	conn->ull.ticks_active_to_start = 0U;
   27bb8:	2400      	movs	r4, #0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27bba:	444b      	add	r3, r9
	conn->ull.ticks_prepare_to_start =
   27bbc:	2231      	movs	r2, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27bbe:	fba3 0100 	umull	r0, r1, r3, r0
	conn->ull.ticks_prepare_to_start =
   27bc2:	e9c6 2402 	strd	r2, r4, [r6, #8]
	conn->ull.ticks_active_to_start = 0U;
   27bc6:	6074      	str	r4, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27bc8:	a35f      	add	r3, pc, #380	; (adr r3, 27d48 <ull_periph_setup+0x480>)
   27bca:	e9d3 2300 	ldrd	r2, r3, [r3]
   27bce:	f7fe fa97 	bl	26100 <__aeabi_uldivmod>
	conn_offset_us = ftr->radio_end_us;
   27bd2:	f8da 200c 	ldr.w	r2, [sl, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   27bd6:	990e      	ldr	r1, [sp, #56]	; 0x38
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   27bd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27bda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   27bde:	f240 48e2 	movw	r8, #1250	; 0x4e2
   27be2:	fb08 2801 	mla	r8, r8, r1, r2
	conn->ull.ticks_slot =
   27be6:	6130      	str	r0, [r6, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27be8:	4622      	mov	r2, r4
   27bea:	2102      	movs	r1, #2
   27bec:	2001      	movs	r0, #1
	conn_interval_us -= lll->periph.window_widening_periodic_us;
   27bee:	1aff      	subs	r7, r7, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   27bf0:	f00c f9ce 	bl	33f90 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   27bf4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   27bf6:	4628      	mov	r0, r5
   27bf8:	f011 fa5c 	bl	390b4 <ull_adv_handle_get>
   27bfc:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   27bfe:	b2d2      	uxtb	r2, r2
   27c00:	4620      	mov	r0, r4
   27c02:	9500      	str	r5, [sp, #0]
   27c04:	4b55      	ldr	r3, [pc, #340]	; (27d5c <ull_periph_setup+0x494>)
   27c06:	2101      	movs	r1, #1
   27c08:	f00d fdb4 	bl	35774 <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
   27c0c:	f208 48b2 	addw	r8, r8, #1202	; 0x4b2
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27c10:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
   27c12:	eba8 0809 	sub.w	r8, r8, r9
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27c16:	f000 808c 	beq.w	27d32 <ull_periph_setup+0x46a>
	if (adv->lll.is_hdcd) {
   27c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   27c20:	07db      	lsls	r3, r3, #31
   27c22:	d473      	bmi.n	27d0c <ull_periph_setup+0x444>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27c24:	4630      	mov	r0, r6
   27c26:	f012 f8ff 	bl	39e28 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27c2a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 27d58 <ull_periph_setup+0x490>
   27c2e:	fba7 450b 	umull	r4, r5, r7, fp
   27c32:	a345      	add	r3, pc, #276	; (adr r3, 27d48 <ull_periph_setup+0x480>)
   27c34:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27c38:	4607      	mov	r7, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   27c3a:	4629      	mov	r1, r5
   27c3c:	4620      	mov	r0, r4
   27c3e:	f7fe fa5f 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27c42:	4a47      	ldr	r2, [pc, #284]	; (27d60 <ull_periph_setup+0x498>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27c44:	9606      	str	r6, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27c46:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
   27c4a:	fba9 2302 	umull	r2, r3, r9, r2
   27c4e:	2107      	movs	r1, #7
   27c50:	fb01 3309 	mla	r3, r1, r9, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27c54:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   27c58:	f8da c008 	ldr.w	ip, [sl, #8]
   27c5c:	9108      	str	r1, [sp, #32]
   27c5e:	4941      	ldr	r1, [pc, #260]	; (27d64 <ull_periph_setup+0x49c>)
   27c60:	9107      	str	r1, [sp, #28]
   27c62:	4941      	ldr	r1, [pc, #260]	; (27d68 <ull_periph_setup+0x4a0>)
   27c64:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27c66:	1aa0      	subs	r0, r4, r2
   27c68:	eb65 0103 	sbc.w	r1, r5, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27c6c:	6933      	ldr	r3, [r6, #16]
   27c6e:	9304      	str	r3, [sp, #16]
   27c70:	2500      	movs	r5, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27c72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27c76:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27c78:	f1ac 043a 	sub.w	r4, ip, #58	; 0x3a
   27c7c:	9503      	str	r5, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   27c7e:	f7fe fa3f 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27c82:	a331      	add	r3, pc, #196	; (adr r3, 27d48 <ull_periph_setup+0x480>)
   27c84:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27c88:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27c8a:	fba8 010b 	umull	r0, r1, r8, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27c8e:	f8cd 9004 	str.w	r9, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   27c92:	f7fe fa35 	bl	26100 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   27c96:	3705      	adds	r7, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   27c98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   27c9c:	b2ff      	uxtb	r7, r7
   27c9e:	9000      	str	r0, [sp, #0]
   27ca0:	4623      	mov	r3, r4
   27ca2:	463a      	mov	r2, r7
   27ca4:	4628      	mov	r0, r5
   27ca6:	2101      	movs	r1, #1
   27ca8:	f00d fcda 	bl	35660 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   27cac:	f030 0302 	bics.w	r3, r0, #2
   27cb0:	d00c      	beq.n	27ccc <ull_periph_setup+0x404>
   27cb2:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
   27cb6:	4a2d      	ldr	r2, [pc, #180]	; (27d6c <ull_periph_setup+0x4a4>)
   27cb8:	492d      	ldr	r1, [pc, #180]	; (27d70 <ull_periph_setup+0x4a8>)
   27cba:	482e      	ldr	r0, [pc, #184]	; (27d74 <ull_periph_setup+0x4ac>)
   27cbc:	f022 fa0e 	bl	4a0dc <printk>
   27cc0:	4040      	eors	r0, r0
   27cc2:	f380 8811 	msr	BASEPRI, r0
   27cc6:	f04f 0003 	mov.w	r0, #3
   27cca:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   27ccc:	2201      	movs	r2, #1
   27cce:	4610      	mov	r0, r2
   27cd0:	2102      	movs	r1, #2
   27cd2:	f00c f95d 	bl	33f90 <mayfly_enable>
}
   27cd6:	b017      	add	sp, #92	; 0x5c
   27cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   27cdc:	4601      	mov	r1, r0
   27cde:	2206      	movs	r2, #6
   27ce0:	4618      	mov	r0, r3
   27ce2:	f024 fb0e 	bl	4c302 <memset>
   27ce6:	e719      	b.n	27b1c <ull_periph_setup+0x254>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
   27ce8:	2206      	movs	r2, #6
   27cea:	2100      	movs	r1, #0
   27cec:	f024 fb09 	bl	4c302 <memset>
   27cf0:	e71e      	b.n	27b30 <ull_periph_setup+0x268>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   27cf2:	23f1      	movs	r3, #241	; 0xf1
   27cf4:	4a1d      	ldr	r2, [pc, #116]	; (27d6c <ull_periph_setup+0x4a4>)
   27cf6:	4920      	ldr	r1, [pc, #128]	; (27d78 <ull_periph_setup+0x4b0>)
   27cf8:	481e      	ldr	r0, [pc, #120]	; (27d74 <ull_periph_setup+0x4ac>)
   27cfa:	f022 f9ef 	bl	4a0dc <printk>
   27cfe:	4040      	eors	r0, r0
   27d00:	f380 8811 	msr	BASEPRI, r0
   27d04:	f04f 0003 	mov.w	r0, #3
   27d08:	df02      	svc	2
   27d0a:	e6f4      	b.n	27af6 <ull_periph_setup+0x22e>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   27d0c:	2300      	movs	r3, #0
   27d0e:	2201      	movs	r2, #1
   27d10:	9300      	str	r3, [sp, #0]
   27d12:	4618      	mov	r0, r3
   27d14:	4611      	mov	r1, r2
   27d16:	f00d fd2d 	bl	35774 <ticker_stop>
   27d1a:	e783      	b.n	27c24 <ull_periph_setup+0x35c>
			lll->data_chan_sel = 1;
   27d1c:	7f6b      	ldrb	r3, [r5, #29]
   27d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27d22:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   27d24:	4640      	mov	r0, r8
   27d26:	f017 fb75 	bl	3f414 <lll_chan_id>
			cs->csa = 0x01;
   27d2a:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   27d2c:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
   27d2e:	7723      	strb	r3, [r4, #28]
   27d30:	e72b      	b.n	27b8a <ull_periph_setup+0x2c2>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   27d32:	f010 f85f 	bl	37df4 <ull_disable_mark_get>
   27d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27d38:	4283      	cmp	r3, r0
   27d3a:	f43f af6e 	beq.w	27c1a <ull_periph_setup+0x352>
   27d3e:	f016 fe73 	bl	3ea28 <ticker_op_stop_adv_cb.part.1>
   27d42:	e76a      	b.n	27c1a <ull_periph_setup+0x352>
   27d44:	f3af 8000 	nop.w
   27d48:	1afd498d 	.word	0x1afd498d
   27d4c:	00000007 	.word	0x00000007
   27d50:	01c9c37f 	.word	0x01c9c37f
   27d54:	026259ff 	.word	0x026259ff
   27d58:	3b9aca00 	.word	0x3b9aca00
   27d5c:	0003ea55 	.word	0x0003ea55
   27d60:	1afd498d 	.word	0x1afd498d
   27d64:	0003e9f9 	.word	0x0003e9f9
   27d68:	0003ea71 	.word	0x0003ea71
   27d6c:	00053454 	.word	0x00053454
   27d70:	000532a4 	.word	0x000532a4
   27d74:	00052d50 	.word	0x00052d50
   27d78:	00052e4c 	.word	0x00052e4c
   27d7c:	431bde83 	.word	0x431bde83

00027d80 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
   27d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d84:	b08d      	sub	sp, #52	; 0x34
   27d86:	4690      	mov	r8, r2
   27d88:	9005      	str	r0, [sp, #20]
   27d8a:	9302      	str	r3, [sp, #8]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   27d8c:	2000      	movs	r0, #0
{
   27d8e:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
   27d92:	9106      	str	r1, [sp, #24]
   27d94:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
   27d98:	f8bd a060 	ldrh.w	sl, [sp, #96]	; 0x60
   27d9c:	f8bd b064 	ldrh.w	fp, [sp, #100]	; 0x64
   27da0:	9304      	str	r3, [sp, #16]
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   27da2:	f011 fbcb 	bl	3953c <ull_scan_is_disabled_get>
	if (!scan) {
   27da6:	2800      	cmp	r0, #0
   27da8:	f000 81bb 	beq.w	28122 <ll_create_connection+0x3a2>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
   27dac:	f007 0601 	and.w	r6, r7, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
   27db0:	4605      	mov	r5, r0
   27db2:	4630      	mov	r0, r6
   27db4:	f00d fdac 	bl	35910 <ll_addr_get>
   27db8:	9003      	str	r0, [sp, #12]
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
   27dba:	2e00      	cmp	r6, #0
   27dbc:	d16b      	bne.n	27e96 <ll_create_connection+0x116>
		return BT_HCI_ERR_INVALID_PARAM;
	}

#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
	/* Do not connect twice to the same peer */
	if (ull_conn_peer_connected(own_id_addr_type, own_id_addr,
   27dbe:	9b16      	ldr	r3, [sp, #88]	; 0x58
   27dc0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   27dc4:	4630      	mov	r0, r6
   27dc6:	f012 fbb5 	bl	3a534 <ull_conn_peer_connected>
   27dca:	2800      	cmp	r0, #0
   27dcc:	f040 81ba 	bne.w	28144 <ll_create_connection+0x3c4>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
   27dd0:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
   27dd2:	f105 021c 	add.w	r2, r5, #28
   27dd6:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
   27dd8:	2b00      	cmp	r3, #0
   27dda:	d063      	beq.n	27ea4 <ll_create_connection+0x124>
		conn_lll = lll->conn;
   27ddc:	f8d5 9020 	ldr.w	r9, [r5, #32]
		conn = HDR_LLL2ULL(conn_lll);
   27de0:	9b02      	ldr	r3, [sp, #8]
   27de2:	f8d9 4000 	ldr.w	r4, [r9]

		goto conn_is_valid;
   27de6:	f003 0a01 	and.w	sl, r3, #1
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
   27dea:	f899 0044 	ldrb.w	r0, [r9, #68]	; 0x44
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
   27dee:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   27df2:	f000 0007 	and.w	r0, r0, #7
   27df6:	f018 ff75 	bl	40ce4 <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   27dfa:	f8b9 3040 	ldrh.w	r3, [r9, #64]	; 0x40
   27dfe:	f8b9 1042 	ldrh.w	r1, [r9, #66]	; 0x42
   27e02:	4adb      	ldr	r2, [pc, #876]	; (28170 <ll_create_connection+0x3f0>)
   27e04:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
   27e08:	4418      	add	r0, r3
   27e0a:	4408      	add	r0, r1
   27e0c:	fba0 0102 	umull	r0, r1, r0, r2
   27e10:	a3d5      	add	r3, pc, #852	; (adr r3, 28168 <ll_create_connection+0x3e8>)
   27e12:	e9d3 2300 	ldrd	r2, r3, [r3]
   27e16:	f7fe f973 	bl	26100 <__aeabi_uldivmod>
   27e1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
   27e1e:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
   27e20:	4640      	mov	r0, r8
   27e22:	f017 fdff 	bl	3fa24 <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
   27e26:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   27e2a:	22ff      	movs	r2, #255	; 0xff
	lll->rpa_gen = 0;
   27e2c:	f36f 0341 	bfc	r3, #1, #1
   27e30:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
   27e34:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   27e38:	f1b8 0f00 	cmp.w	r8, #0
   27e3c:	f000 8175 	beq.w	2812a <ll_create_connection+0x3aa>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   27e40:	1ebb      	subs	r3, r7, #2
   27e42:	2b01      	cmp	r3, #1
   27e44:	f240 8182 	bls.w	2814c <ll_create_connection+0x3cc>
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
	lll->adv_addr_type = peer_addr_type;
   27e48:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	scan->own_addr_type = own_addr_type;
   27e4c:	f895 2044 	ldrb.w	r2, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
   27e50:	f36a 0300 	bfi	r3, sl, #0, #1
   27e54:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	scan->own_addr_type = own_addr_type;
   27e58:	f367 0242 	bfi	r2, r7, #1, #2
   27e5c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
   27e60:	9916      	ldr	r1, [sp, #88]	; 0x58
   27e62:	2206      	movs	r2, #6
   27e64:	f105 0024 	add.w	r0, r5, #36	; 0x24
   27e68:	f024 fa40 	bl	4c2ec <memcpy>
	lll->conn_timeout = timeout;
   27e6c:	9b04      	ldr	r3, [sp, #16]
   27e6e:	862b      	strh	r3, [r5, #48]	; 0x30

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
   27e70:	9a05      	ldr	r2, [sp, #20]
   27e72:	9b06      	ldr	r3, [sp, #24]
   27e74:	9807      	ldr	r0, [sp, #28]
   27e76:	f8cd 8000 	str.w	r8, [sp]
   27e7a:	2100      	movs	r1, #0
   27e7c:	f7ff f8a0 	bl	26fc0 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
   27e80:	f019 f8be 	bl	41000 <lll_clock_wait>
	if (err) {
   27e84:	2800      	cmp	r0, #0
   27e86:	f040 8181 	bne.w	2818c <ll_create_connection+0x40c>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
   27e8a:	4628      	mov	r0, r5
   27e8c:	f7ff f8bc 	bl	27008 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
   27e90:	b00d      	add	sp, #52	; 0x34
   27e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
   27e96:	2106      	movs	r1, #6
   27e98:	f00c f820 	bl	33edc <mem_nz>
   27e9c:	2800      	cmp	r0, #0
   27e9e:	d18e      	bne.n	27dbe <ll_create_connection+0x3e>
		return BT_HCI_ERR_INVALID_PARAM;
   27ea0:	2012      	movs	r0, #18
   27ea2:	e7f5      	b.n	27e90 <ll_create_connection+0x110>
	link = ll_rx_link_alloc();
   27ea4:	f00f feb0 	bl	37c08 <ll_rx_link_alloc>
	if (!link) {
   27ea8:	9008      	str	r0, [sp, #32]
   27eaa:	2800      	cmp	r0, #0
   27eac:	f000 81a9 	beq.w	28202 <ll_create_connection+0x482>
	conn = ll_conn_acquire();
   27eb0:	f011 ffae 	bl	39e10 <ll_conn_acquire>
	if (!conn) {
   27eb4:	4604      	mov	r4, r0
   27eb6:	2800      	cmp	r0, #0
   27eb8:	f000 81c1 	beq.w	2823e <ll_create_connection+0x4be>
	err = util_aa_le32(conn_lll->access_addr);
   27ebc:	3020      	adds	r0, #32
	conn_lll = &conn->lll;
   27ebe:	f104 091c 	add.w	r9, r4, #28
	err = util_aa_le32(conn_lll->access_addr);
   27ec2:	f00c f99f 	bl	34204 <util_aa_le32>
	LL_ASSERT(!err);
   27ec6:	2800      	cmp	r0, #0
   27ec8:	f040 818a 	bne.w	281e0 <ll_create_connection+0x460>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
   27ecc:	2103      	movs	r1, #3
   27ece:	f104 0024 	add.w	r0, r4, #36	; 0x24
   27ed2:	f018 fdc7 	bl	40a64 <lll_csrand_get>
	if (!conn_lll->link_tx_free) {
   27ed6:	6f60      	ldr	r0, [r4, #116]	; 0x74
	conn_lll->interval = interval;
   27ed8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
   27edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
   27ee0:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
   27ee4:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
   27ee6:	2800      	cmp	r0, #0
   27ee8:	f000 8187 	beq.w	281fa <ll_create_connection+0x47a>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   27eec:	f104 0268 	add.w	r2, r4, #104	; 0x68
   27ef0:	f104 0164 	add.w	r1, r4, #100	; 0x64
   27ef4:	f00b fffe 	bl	33ef4 <memq_init>
	conn_lll->phy_tx = PHY_1M;
   27ef8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
   27efc:	499d      	ldr	r1, [pc, #628]	; (28174 <ll_create_connection+0x3f4>)
	conn_lll->sn = 0;
   27efe:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
	conn_lll->max_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   27f02:	489d      	ldr	r0, [pc, #628]	; (28178 <ll_create_connection+0x3f8>)
   27f04:	65e0      	str	r0, [r4, #92]	; 0x5c
	conn_lll->phy_tx = PHY_1M;
   27f06:	400b      	ands	r3, r1
   27f08:	f443 7388 	orr.w	r3, r3, #272	; 0x110
	conn_lll->link_tx_free = NULL;
   27f0c:	f04f 0b00 	mov.w	fp, #0
	conn_lll->sn = 0;
   27f10:	f022 0207 	bic.w	r2, r2, #7
	conn_lll->phy_tx = PHY_1M;
   27f14:	f043 0301 	orr.w	r3, r3, #1
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   27f18:	f04f 111b 	mov.w	r1, #1769499	; 0x1b001b
	conn_lll->sn = 0;
   27f1c:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	conn_lll->phy_tx = PHY_1M;
   27f20:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   27f24:	65a1      	str	r1, [r4, #88]	; 0x58
	conn_lll->link_tx_free = NULL;
   27f26:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
	conn_lll->packet_tx_head_len = 0;
   27f2a:	f8a4 b078 	strh.w	fp, [r4, #120]	; 0x78
	conn_lll->latency_prepare = 0;
   27f2e:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
   27f32:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
   27f36:	f104 0034 	add.w	r0, r4, #52	; 0x34
   27f3a:	f017 fa21 	bl	3f380 <ull_chan_map_get>
   27f3e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   27f42:	f360 0305 	bfi	r3, r0, #0, #6
   27f46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
   27f4a:	2101      	movs	r1, #1
   27f4c:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   27f50:	f018 fd88 	bl	40a64 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27f54:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   27f58:	4988      	ldr	r1, [pc, #544]	; (2817c <ll_create_connection+0x3fc>)
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27f5a:	4b89      	ldr	r3, [pc, #548]	; (28180 <ll_create_connection+0x400>)
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27f5c:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
   27f60:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27f64:	fba1 0102 	umull	r0, r1, r1, r2
   27f68:	08c9      	lsrs	r1, r1, #3
   27f6a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   27f6e:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
   27f72:	3205      	adds	r2, #5
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
   27f74:	f240 4ce2 	movw	ip, #1250	; 0x4e2
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27f78:	9209      	str	r2, [sp, #36]	; 0x24
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27f7a:	9a04      	ldr	r2, [sp, #16]
	conn_lll->data_chan_sel = 0;
   27f7c:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
   27f80:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
	conn->supervision_expire = 0U;
   27f84:	f8a4 b0c4 	strh.w	fp, [r4, #196]	; 0xc4
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
   27f88:	fb0c fa0a 	mul.w	sl, ip, sl
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27f8c:	f242 7c10 	movw	ip, #10000	; 0x2710
   27f90:	fb0c ac02 	mla	ip, ip, r2, sl
	conn_lll->data_chan_hop = 5 + (hop % 12);
   27f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27f96:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27f9a:	4a7a      	ldr	r2, [pc, #488]	; (28184 <ll_create_connection+0x404>)
	conn->procedure_expire = 0U;
   27f9c:	f8a4 b0c8 	strh.w	fp, [r4, #200]	; 0xc8
	conn_lll->data_chan_sel = 0;
   27fa0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27fa4:	4453      	add	r3, sl
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27fa6:	4452      	add	r2, sl
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27fa8:	fbb3 f3fa 	udiv	r3, r3, sl
	conn_lll->data_chan_sel = 0;
   27fac:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27fb0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27fb4:	b298      	uxth	r0, r3
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27fb6:	fbbc fcfa 	udiv	ip, ip, sl
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27fba:	fbb2 fafa 	udiv	sl, r2, sl
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27fbe:	f10e 0206 	add.w	r2, lr, #6
	conn_lll->central.initiated = 0;
   27fc2:	f021 0103 	bic.w	r1, r1, #3
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
   27fc6:	f8a4 c0c2 	strh.w	ip, [r4, #194]	; 0xc2
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27fca:	4290      	cmp	r0, r2
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
   27fcc:	f04f 0c06 	mov.w	ip, #6
	conn->apto_expire = 0U;
   27fd0:	f8a4 b0d0 	strh.w	fp, [r4, #208]	; 0xd0
	conn->appto_expire = 0U;
   27fd4:	f8a4 b0cc 	strh.w	fp, [r4, #204]	; 0xcc
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
   27fd8:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
   27fdc:	f8a4 a0c6 	strh.w	sl, [r4, #198]	; 0xc6
	conn_lll->central.initiated = 0;
   27fe0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
   27fe4:	f8a4 c0c0 	strh.w	ip, [r4, #192]	; 0xc0
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27fe8:	dd03      	ble.n	27ff2 <ll_create_connection+0x272>
   27fea:	3806      	subs	r0, #6
   27fec:	eba0 000e 	sub.w	r0, r0, lr
   27ff0:	b280      	uxth	r0, r0
	conn->common.fex_valid = 0U;
   27ff2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
   27ff6:	f8a4 00ca 	strh.w	r0, [r4, #202]	; 0xca
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   27ffa:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
   27ffe:	f023 0307 	bic.w	r3, r3, #7
   28002:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
   28006:	f8a4 b0f0 	strh.w	fp, [r4, #240]	; 0xf0
   2800a:	f884 b0f2 	strb.w	fp, [r4, #242]	; 0xf2
	conn->llcp_rx = NULL;
   2800e:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   28012:	f8a4 b118 	strh.w	fp, [r4, #280]	; 0x118
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   28016:	f8a4 b130 	strh.w	fp, [r4, #304]	; 0x130
	conn->llcp_feature.features_conn = ll_feat_get();
   2801a:	f00f f8cf 	bl	371bc <ll_feat_get>
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   2801e:	f894 214a 	ldrb.w	r2, [r4, #330]	; 0x14a
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   28022:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	conn->llcp_conn_param.disabled = 0U;
   28026:	f894 e196 	ldrb.w	lr, [r4, #406]	; 0x196
	conn->llcp_length.disabled = 0U;
   2802a:	f894 c1be 	ldrb.w	ip, [r4, #446]	; 0x1be
	conn->llcp_version.req = conn->llcp_version.ack = 0;
   2802e:	f8a4 b148 	strh.w	fp, [r4, #328]	; 0x148
	conn->llcp_feature.features_conn = ll_feat_get();
   28032:	e9c4 014e 	strd	r0, r1, [r4, #312]	; 0x138
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   28036:	f894 107a 	ldrb.w	r1, [r4, #122]	; 0x7a
	conn->llcp_terminate.node_rx.hdr.link = link;
   2803a:	9808      	ldr	r0, [sp, #32]
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
   2803c:	f8a4 b150 	strh.w	fp, [r4, #336]	; 0x150
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   28040:	f022 0203 	bic.w	r2, r2, #3
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   28044:	f023 0307 	bic.w	r3, r3, #7
	conn->llcp_conn_param.disabled = 0U;
   28048:	f36b 1e45 	bfi	lr, fp, #5, #1
	conn->llcp_length.disabled = 0U;
   2804c:	f36b 0cc3 	bfi	ip, fp, #3, #1
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   28050:	f021 0118 	bic.w	r1, r1, #24
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
   28054:	f884 214a 	strb.w	r2, [r4, #330]	; 0x14a
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   28058:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
	conn->llcp_feature.features_peer = 0;
   2805c:	2200      	movs	r2, #0
   2805e:	2300      	movs	r3, #0
	conn->llcp_conn_param.disabled = 0U;
   28060:	f884 e196 	strb.w	lr, [r4, #406]	; 0x196
	conn->llcp_length.disabled = 0U;
   28064:	f884 c1be 	strb.w	ip, [r4, #446]	; 0x1be
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   28068:	f884 107a 	strb.w	r1, [r4, #122]	; 0x7a
	conn->llcp_feature.features_peer = 0;
   2806c:	e9c4 2350 	strd	r2, r3, [r4, #320]	; 0x140
	conn->llcp_terminate.reason_final = 0U;
   28070:	f884 b153 	strb.w	fp, [r4, #339]	; 0x153
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   28074:	f8a4 b174 	strh.w	fp, [r4, #372]	; 0x174
	conn->llcp_conn_param.req = 0U;
   28078:	f8a4 b194 	strh.w	fp, [r4, #404]	; 0x194
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
   2807c:	f8a4 b1bc 	strh.w	fp, [r4, #444]	; 0x1bc
	conn->llcp_length.cache.tx_octets = 0U;
   28080:	f8a4 b1c8 	strh.w	fp, [r4, #456]	; 0x1c8
	conn->llcp_terminate.node_rx.hdr.link = link;
   28084:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
   28088:	f012 fa3c 	bl	3a504 <ull_conn_default_tx_octets_get>
   2808c:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
	conn->default_tx_time = ull_conn_default_tx_time_get();
   28090:	f012 fa3e 	bl	3a510 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   28094:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   28098:	4b3b      	ldr	r3, [pc, #236]	; (28188 <ll_create_connection+0x408>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
   2809a:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
   2809e:	4013      	ands	r3, r2
   280a0:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   280a4:	f012 fa3a 	bl	3a51c <ull_conn_default_phy_tx_get>
   280a8:	f894 31d0 	ldrb.w	r3, [r4, #464]	; 0x1d0
   280ac:	f360 0302 	bfi	r3, r0, #0, #3
   280b0:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   280b4:	f012 fa38 	bl	3a528 <ull_conn_default_phy_rx_get>
	conn->peer_id_addr_type = peer_addr_type;
   280b8:	9902      	ldr	r1, [sp, #8]
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   280ba:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
	conn->peer_id_addr_type = peer_addr_type;
   280be:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
	conn->tx_data = conn->tx_data_last = 0;
   280c2:	f8c4 b1e4 	str.w	fp, [r4, #484]	; 0x1e4
	conn->peer_id_addr_type = peer_addr_type;
   280c6:	f001 0a01 	and.w	sl, r1, #1
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   280ca:	f360 02c5 	bfi	r2, r0, #3, #3
	conn->peer_id_addr_type = peer_addr_type;
   280ce:	f36a 0341 	bfi	r3, sl, #1, #1
	conn->ull.ticks_prepare_to_start =
   280d2:	2131      	movs	r1, #49	; 0x31
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   280d4:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
	conn->peer_id_addr_type = peer_addr_type;
   280d8:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	conn->ull.ticks_prepare_to_start =
   280dc:	60a1      	str	r1, [r4, #8]
	(void)memcpy(conn->peer_id_addr, peer_addr, sizeof(conn->peer_id_addr));
   280de:	2206      	movs	r2, #6
   280e0:	9916      	ldr	r1, [sp, #88]	; 0x58
	conn->ull.ticks_active_to_start = 0U;
   280e2:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   280e6:	e9c4 bb77 	strd	fp, fp, [r4, #476]	; 0x1dc
   280ea:	e9c4 bb75 	strd	fp, fp, [r4, #468]	; 0x1d4
	conn->ull.ticks_preempt_to_start =
   280ee:	f8c4 b00c 	str.w	fp, [r4, #12]
	(void)memcpy(conn->peer_id_addr, peer_addr, sizeof(conn->peer_id_addr));
   280f2:	f104 00dd 	add.w	r0, r4, #221	; 0xdd
   280f6:	f024 f8f9 	bl	4c2ec <memcpy>
	conn->own_id_addr_type = own_id_addr_type;
   280fa:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr, sizeof(conn->own_id_addr));
   280fe:	9903      	ldr	r1, [sp, #12]
	conn->own_id_addr_type = own_id_addr_type;
   28100:	f367 0300 	bfi	r3, r7, #0, #1
   28104:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	(void)memcpy(conn->own_id_addr, own_id_addr, sizeof(conn->own_id_addr));
   28108:	2206      	movs	r2, #6
   2810a:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   2810e:	f024 f8ed 	bl	4c2ec <memcpy>
	lll->conn = conn_lll;
   28112:	f8c5 9020 	str.w	r9, [r5, #32]
	hdr->ref = 0U;
   28116:	f884 b000 	strb.w	fp, [r4]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   2811a:	e9c4 bb05 	strd	fp, fp, [r4, #20]
   2811e:	61e4      	str	r4, [r4, #28]
   28120:	e663      	b.n	27dea <ll_create_connection+0x6a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   28122:	200c      	movs	r0, #12
}
   28124:	b00d      	add	sp, #52	; 0x34
   28126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
   2812a:	f018 fa23 	bl	40574 <ull_filter_lll_rl_enabled>
   2812e:	2800      	cmp	r0, #0
   28130:	f43f ae86 	beq.w	27e40 <ll_create_connection+0xc0>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
   28134:	9802      	ldr	r0, [sp, #8]
   28136:	9916      	ldr	r1, [sp, #88]	; 0x58
   28138:	4642      	mov	r2, r8
   2813a:	f017 fde9 	bl	3fd10 <ull_filter_rl_find>
   2813e:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
   28142:	e67d      	b.n	27e40 <ll_create_connection+0xc0>
		return BT_HCI_ERR_CONN_ALREADY_EXISTS;
   28144:	200b      	movs	r0, #11
}
   28146:	b00d      	add	sp, #52	; 0x34
   28148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
   2814c:	2000      	movs	r0, #0
   2814e:	f017 fc8d 	bl	3fa6c <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   28152:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   28156:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
   2815a:	4637      	mov	r7, r6
		lll->rpa_gen = 1;
   2815c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   28160:	e672      	b.n	27e48 <ll_create_connection+0xc8>
   28162:	bf00      	nop
   28164:	f3af 8000 	nop.w
   28168:	1afd498d 	.word	0x1afd498d
   2816c:	00000007 	.word	0x00000007
   28170:	3b9aca00 	.word	0x3b9aca00
   28174:	fffff880 	.word	0xfffff880
   28178:	01480148 	.word	0x01480148
   2817c:	aaaaaaab 	.word	0xaaaaaaab
   28180:	01c9c37f 	.word	0x01c9c37f
   28184:	026259ff 	.word	0x026259ff
   28188:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
   2818c:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
   2818e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   28190:	b163      	cbz	r3, 281ac <ll_create_connection+0x42c>
   28192:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
   28196:	4a2c      	ldr	r2, [pc, #176]	; (28248 <ll_create_connection+0x4c8>)
   28198:	492c      	ldr	r1, [pc, #176]	; (2824c <ll_create_connection+0x4cc>)
   2819a:	482d      	ldr	r0, [pc, #180]	; (28250 <ll_create_connection+0x4d0>)
   2819c:	f021 ff9e 	bl	4a0dc <printk>
   281a0:	4040      	eors	r0, r0
   281a2:	f380 8811 	msr	BASEPRI, r0
   281a6:	f04f 0003 	mov.w	r0, #3
   281aa:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   281ac:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   281b0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   281b4:	f00b fea2 	bl	33efc <memq_deinit>
	LL_ASSERT(link);
   281b8:	4607      	mov	r7, r0
   281ba:	2800      	cmp	r0, #0
   281bc:	d031      	beq.n	28222 <ll_create_connection+0x4a2>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
   281be:	6826      	ldr	r6, [r4, #0]
	lll->link_tx_free = link;
   281c0:	65a7      	str	r7, [r4, #88]	; 0x58

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
   281c2:	f8d6 4154 	ldr.w	r4, [r6, #340]	; 0x154
	LL_ASSERT(link);
   281c6:	b1f4      	cbz	r4, 28206 <ll_create_connection+0x486>

	ll_rx_link_release(link);
   281c8:	4620      	mov	r0, r4
   281ca:	f00f fd23 	bl	37c14 <ll_rx_link_release>

	ll_conn_release(conn);
   281ce:	4630      	mov	r0, r6
   281d0:	f011 fe24 	bl	39e1c <ll_conn_release>
	scan->lll.conn = NULL;
   281d4:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
   281d6:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
   281d8:	622b      	str	r3, [r5, #32]
}
   281da:	b00d      	add	sp, #52	; 0x34
   281dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
   281e0:	23bf      	movs	r3, #191	; 0xbf
   281e2:	4a19      	ldr	r2, [pc, #100]	; (28248 <ll_create_connection+0x4c8>)
   281e4:	491b      	ldr	r1, [pc, #108]	; (28254 <ll_create_connection+0x4d4>)
   281e6:	481a      	ldr	r0, [pc, #104]	; (28250 <ll_create_connection+0x4d0>)
   281e8:	f021 ff78 	bl	4a0dc <printk>
   281ec:	4040      	eors	r0, r0
   281ee:	f380 8811 	msr	BASEPRI, r0
   281f2:	f04f 0003 	mov.w	r0, #3
   281f6:	df02      	svc	2
   281f8:	e668      	b.n	27ecc <ll_create_connection+0x14c>
		conn_lll->link_tx_free = &conn_lll->link_tx;
   281fa:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   281fe:	6760      	str	r0, [r4, #116]	; 0x74
   28200:	e674      	b.n	27eec <ll_create_connection+0x16c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   28202:	2007      	movs	r0, #7
   28204:	e644      	b.n	27e90 <ll_create_connection+0x110>
	LL_ASSERT(link);
   28206:	f240 43c1 	movw	r3, #1217	; 0x4c1
   2820a:	4a0f      	ldr	r2, [pc, #60]	; (28248 <ll_create_connection+0x4c8>)
   2820c:	4912      	ldr	r1, [pc, #72]	; (28258 <ll_create_connection+0x4d8>)
   2820e:	4810      	ldr	r0, [pc, #64]	; (28250 <ll_create_connection+0x4d0>)
   28210:	f021 ff64 	bl	4a0dc <printk>
   28214:	4040      	eors	r0, r0
   28216:	f380 8811 	msr	BASEPRI, r0
   2821a:	f04f 0003 	mov.w	r0, #3
   2821e:	df02      	svc	2
   28220:	e7d2      	b.n	281c8 <ll_create_connection+0x448>
	LL_ASSERT(link);
   28222:	f240 43ba 	movw	r3, #1210	; 0x4ba
   28226:	4a08      	ldr	r2, [pc, #32]	; (28248 <ll_create_connection+0x4c8>)
   28228:	490b      	ldr	r1, [pc, #44]	; (28258 <ll_create_connection+0x4d8>)
   2822a:	4809      	ldr	r0, [pc, #36]	; (28250 <ll_create_connection+0x4d0>)
   2822c:	f021 ff56 	bl	4a0dc <printk>
   28230:	4040      	eors	r0, r0
   28232:	f380 8811 	msr	BASEPRI, r0
   28236:	f04f 0003 	mov.w	r0, #3
   2823a:	df02      	svc	2
   2823c:	e7bf      	b.n	281be <ll_create_connection+0x43e>
		ll_rx_link_release(link);
   2823e:	9808      	ldr	r0, [sp, #32]
   28240:	f00f fce8 	bl	37c14 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   28244:	2007      	movs	r0, #7
   28246:	e623      	b.n	27e90 <ll_create_connection+0x110>
   28248:	000534b0 	.word	0x000534b0
   2824c:	000530b0 	.word	0x000530b0
   28250:	00052d50 	.word	0x00052d50
   28254:	00052ff0 	.word	0x00052ff0
   28258:	00053350 	.word	0x00053350
   2825c:	00000000 	.word	0x00000000

00028260 <ull_central_setup>:
{
   28260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	peer_addr_type = pdu_tx->rx_addr;
   28264:	4680      	mov	r8, r0
{
   28266:	b08f      	sub	sp, #60	; 0x3c
   28268:	4604      	mov	r4, r0
   2826a:	460e      	mov	r6, r1
   2826c:	4617      	mov	r7, r2
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
   2826e:	f100 0124 	add.w	r1, r0, #36	; 0x24
   28272:	2206      	movs	r2, #6
   28274:	a80c      	add	r0, sp, #48	; 0x30
	peer_addr_type = pdu_tx->rx_addr;
   28276:	f818 5f1c 	ldrb.w	r5, [r8, #28]!
	memcpy(peer_addr, &pdu_tx->connect_ind.adv_addr[0], BDADDR_SIZE);
   2827a:	f024 f837 	bl	4c2ec <memcpy>
	chan_sel = pdu_tx->chan_sel;
   2827e:	f894 a01c 	ldrb.w	sl, [r4, #28]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   28282:	f018 0f01 	tst.w	r8, #1
	chan_sel = pdu_tx->chan_sel;
   28286:	f3ca 1a40 	ubfx	sl, sl, #5, #1
	peer_addr_type = pdu_tx->rx_addr;
   2828a:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	chan_sel = pdu_tx->chan_sel;
   2828e:	fa5f fb8a 	uxtb.w	fp, sl
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   28292:	f040 8106 	bne.w	284a2 <ull_central_setup+0x242>
	cc->status = 0U;
   28296:	2300      	movs	r3, #0
   28298:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
   2829a:	7cb1      	ldrb	r1, [r6, #18]
	uint8_t rl_idx = ftr->rl_idx;
   2829c:	f896 8011 	ldrb.w	r8, [r6, #17]
	if (ftr->lrpa_used) {
   282a0:	f011 0101 	ands.w	r1, r1, #1
   282a4:	f104 002b 	add.w	r0, r4, #43	; 0x2b
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
   282a8:	f04f 0206 	mov.w	r2, #6
	if (ftr->lrpa_used) {
   282ac:	f000 80e1 	beq.w	28472 <ull_central_setup+0x212>
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
   282b0:	f104 011e 	add.w	r1, r4, #30
   282b4:	f024 f81a 	bl	4c2ec <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   282b8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   282bc:	f104 0925 	add.w	r9, r4, #37	; 0x25
   282c0:	f104 031f 	add.w	r3, r4, #31
   282c4:	f000 80df 	beq.w	28486 <ull_central_setup+0x226>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
   282c8:	461a      	mov	r2, r3
   282ca:	4640      	mov	r0, r8
   282cc:	f104 011e 	add.w	r1, r4, #30
   282d0:	f017 fa36 	bl	3f740 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
   282d4:	7fa3      	ldrb	r3, [r4, #30]
   282d6:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   282d8:	a90c      	add	r1, sp, #48	; 0x30
   282da:	4648      	mov	r0, r9
		cc->peer_addr_type += 2;
   282dc:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
   282de:	2206      	movs	r2, #6
   282e0:	f024 f804 	bl	4c2ec <memcpy>
	scan = HDR_LLL2ULL(ftr->param);
   282e4:	6833      	ldr	r3, [r6, #0]
	cc->interval = lll->interval;
   282e6:	89f9      	ldrh	r1, [r7, #14]
	scan = HDR_LLL2ULL(ftr->param);
   282e8:	f8d3 9000 	ldr.w	r9, [r3]
	cc->latency = lll->latency;
   282ec:	8a3b      	ldrh	r3, [r7, #16]
	cc->timeout = scan->lll.conn_timeout;
   282ee:	f8b9 2030 	ldrh.w	r2, [r9, #48]	; 0x30
   282f2:	86e2      	strh	r2, [r4, #54]	; 0x36
	cc->latency = lll->latency;
   282f4:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->interval = lll->interval;
   282f6:	8661      	strh	r1, [r4, #50]	; 0x32
	cc->sca = lll_clock_sca_local_get();
   282f8:	f018 fed4 	bl	410a4 <lll_clock_sca_local_get>
   282fc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
   28300:	683d      	ldr	r5, [r7, #0]
	lll->handle = ll_conn_handle_get(conn);
   28302:	4628      	mov	r0, r5
   28304:	f011 fd90 	bl	39e28 <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
   28308:	f8d6 8004 	ldr.w	r8, [r6, #4]
	lll->handle = ll_conn_handle_get(conn);
   2830c:	81b8      	strh	r0, [r7, #12]
		ll_rx_put(link, rx);
   2830e:	4621      	mov	r1, r4
	rx->handle = lll->handle;
   28310:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
   28312:	6820      	ldr	r0, [r4, #0]
   28314:	f00f fc90 	bl	37c38 <ll_rx_put>
		rx->handle = lll->handle;
   28318:	89bb      	ldrh	r3, [r7, #12]
   2831a:	f8a8 3006 	strh.w	r3, [r8, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   2831e:	231b      	movs	r3, #27
   28320:	f888 3004 	strb.w	r3, [r8, #4]
		link = rx->link;
   28324:	f8d8 4000 	ldr.w	r4, [r8]
		if (chan_sel) {
   28328:	f1bb 0f00 	cmp.w	fp, #0
   2832c:	f040 80c7 	bne.w	284be <ull_central_setup+0x25e>
			cs->csa = 0x00;
   28330:	f888 a01c 	strb.w	sl, [r8, #28]
	ll_rx_put(link, rx);
   28334:	4641      	mov	r1, r8
   28336:	4620      	mov	r0, r4
   28338:	f00f fc7e 	bl	37c38 <ll_rx_put>
	ll_rx_sched();
   2833c:	f00f fc86 	bl	37c4c <ll_rx_sched>
						      lll->phy_flags);
   28340:	f897 0044 	ldrb.w	r0, [r7, #68]	; 0x44
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   28344:	89fc      	ldrh	r4, [r7, #14]
	conn_offset_us = ftr->radio_end_us;
   28346:	68f3      	ldr	r3, [r6, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   28348:	e9d5 2701 	ldrd	r2, r7, [r5, #4]
   2834c:	4297      	cmp	r7, r2
   2834e:	bf38      	it	cc
   28350:	4617      	movcc	r7, r2
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   28352:	f240 4ce2 	movw	ip, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   28356:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   2835a:	f000 0007 	and.w	r0, r0, #7
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
   2835e:	f103 0820 	add.w	r8, r3, #32
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   28362:	fb0c f404 	mul.w	r4, ip, r4
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
   28366:	970b      	str	r7, [sp, #44]	; 0x2c
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   28368:	f018 fcbc 	bl	40ce4 <lll_radio_tx_ready_delay_get>
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   2836c:	2200      	movs	r2, #0
   2836e:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
   28370:	eba8 0800 	sub.w	r8, r8, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   28374:	2001      	movs	r0, #1
   28376:	f00b fe0b 	bl	33f90 <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
   2837a:	4648      	mov	r0, r9
   2837c:	f011 f8b6 	bl	394ec <ull_scan_handle_get>
   28380:	1d02      	adds	r2, r0, #4
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   28382:	4b57      	ldr	r3, [pc, #348]	; (284e0 <ull_central_setup+0x280>)
   28384:	f8cd 9000 	str.w	r9, [sp]
   28388:	b2d2      	uxtb	r2, r2
   2838a:	2101      	movs	r1, #1
   2838c:	2000      	movs	r0, #0
   2838e:	f00d f9f1 	bl	35774 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   28392:	f030 0302 	bics.w	r3, r0, #2
   28396:	d00c      	beq.n	283b2 <ull_central_setup+0x152>
   28398:	f240 33ca 	movw	r3, #970	; 0x3ca
   2839c:	4a51      	ldr	r2, [pc, #324]	; (284e4 <ull_central_setup+0x284>)
   2839e:	4952      	ldr	r1, [pc, #328]	; (284e8 <ull_central_setup+0x288>)
   283a0:	4852      	ldr	r0, [pc, #328]	; (284ec <ull_central_setup+0x28c>)
   283a2:	f021 fe9b 	bl	4a0dc <printk>
   283a6:	4040      	eors	r0, r0
   283a8:	f380 8811 	msr	BASEPRI, r0
   283ac:	f04f 0003 	mov.w	r0, #3
   283b0:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   283b2:	2700      	movs	r7, #0
   283b4:	463b      	mov	r3, r7
   283b6:	2203      	movs	r2, #3
   283b8:	2101      	movs	r1, #1
   283ba:	9700      	str	r7, [sp, #0]
   283bc:	4638      	mov	r0, r7
   283be:	f00d f9d9 	bl	35774 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   283c2:	4628      	mov	r0, r5
   283c4:	f011 fd30 	bl	39e28 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   283c8:	4949      	ldr	r1, [pc, #292]	; (284f0 <ull_central_setup+0x290>)
   283ca:	68b2      	ldr	r2, [r6, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   283cc:	f8df 912c 	ldr.w	r9, [pc, #300]	; 284fc <ull_central_setup+0x29c>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   283d0:	4b48      	ldr	r3, [pc, #288]	; (284f4 <ull_central_setup+0x294>)
   283d2:	9506      	str	r5, [sp, #24]
   283d4:	f240 36f9 	movw	r6, #1017	; 0x3f9
   283d8:	e9cd 1607 	strd	r1, r6, [sp, #28]
   283dc:	9305      	str	r3, [sp, #20]
   283de:	692b      	ldr	r3, [r5, #16]
   283e0:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   283e2:	fba4 ab09 	umull	sl, fp, r4, r9
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   283e6:	1d46      	adds	r6, r0, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   283e8:	f1a2 0409 	sub.w	r4, r2, #9
				     HAL_TICKER_REMAINDER(conn_interval_us),
   283ec:	4650      	mov	r0, sl
   283ee:	4659      	mov	r1, fp
   283f0:	a339      	add	r3, pc, #228	; (adr r3, 284d8 <ull_central_setup+0x278>)
   283f2:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   283f6:	9703      	str	r7, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   283f8:	f7fd fe82 	bl	26100 <__aeabi_uldivmod>
   283fc:	4610      	mov	r0, r2
   283fe:	4619      	mov	r1, r3
   28400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28404:	2300      	movs	r3, #0
   28406:	f7fd fe7b 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   2840a:	a333      	add	r3, pc, #204	; (adr r3, 284d8 <ull_central_setup+0x278>)
   2840c:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   28410:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   28412:	4659      	mov	r1, fp
   28414:	4650      	mov	r0, sl
   28416:	f7fd fe73 	bl	26100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   2841a:	a32f      	add	r3, pc, #188	; (adr r3, 284d8 <ull_central_setup+0x278>)
   2841c:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   28420:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   28422:	fba8 0109 	umull	r0, r1, r8, r9
   28426:	f7fd fe6b 	bl	26100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   2842a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2842c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   28430:	b2f6      	uxtb	r6, r6
   28432:	1b64      	subs	r4, r4, r5
   28434:	9000      	str	r0, [sp, #0]
   28436:	4623      	mov	r3, r4
   28438:	4632      	mov	r2, r6
   2843a:	4638      	mov	r0, r7
   2843c:	2101      	movs	r1, #1
   2843e:	f00d f90f 	bl	35660 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   28442:	f030 0302 	bics.w	r3, r0, #2
   28446:	d00c      	beq.n	28462 <ull_central_setup+0x202>
   28448:	f240 33fb 	movw	r3, #1019	; 0x3fb
   2844c:	4a25      	ldr	r2, [pc, #148]	; (284e4 <ull_central_setup+0x284>)
   2844e:	4926      	ldr	r1, [pc, #152]	; (284e8 <ull_central_setup+0x288>)
   28450:	4826      	ldr	r0, [pc, #152]	; (284ec <ull_central_setup+0x28c>)
   28452:	f021 fe43 	bl	4a0dc <printk>
   28456:	4040      	eors	r0, r0
   28458:	f380 8811 	msr	BASEPRI, r0
   2845c:	f04f 0003 	mov.w	r0, #3
   28460:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   28462:	2201      	movs	r2, #1
   28464:	4610      	mov	r0, r2
   28466:	2102      	movs	r1, #2
   28468:	f00b fd92 	bl	33f90 <mayfly_enable>
}
   2846c:	b00f      	add	sp, #60	; 0x3c
   2846e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   28472:	f023 ff46 	bl	4c302 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
   28476:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   2847a:	f104 0925 	add.w	r9, r4, #37	; 0x25
   2847e:	f104 031f 	add.w	r3, r4, #31
   28482:	f47f af21 	bne.w	282c8 <ull_central_setup+0x68>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
   28486:	4648      	mov	r0, r9
   28488:	2206      	movs	r2, #6
   2848a:	2100      	movs	r1, #0
   2848c:	930b      	str	r3, [sp, #44]	; 0x2c
   2848e:	f023 ff38 	bl	4c302 <memset>
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
   28492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		cc->peer_addr_type = peer_addr_type;
   28494:	77a5      	strb	r5, [r4, #30]
		memcpy(cc->peer_addr, &peer_addr[0], BDADDR_SIZE);
   28496:	a90c      	add	r1, sp, #48	; 0x30
   28498:	4618      	mov	r0, r3
   2849a:	2206      	movs	r2, #6
   2849c:	f023 ff26 	bl	4c2ec <memcpy>
   284a0:	e720      	b.n	282e4 <ull_central_setup+0x84>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   284a2:	f44f 7352 	mov.w	r3, #840	; 0x348
   284a6:	4a0f      	ldr	r2, [pc, #60]	; (284e4 <ull_central_setup+0x284>)
   284a8:	4913      	ldr	r1, [pc, #76]	; (284f8 <ull_central_setup+0x298>)
   284aa:	4810      	ldr	r0, [pc, #64]	; (284ec <ull_central_setup+0x28c>)
   284ac:	f021 fe16 	bl	4a0dc <printk>
   284b0:	4040      	eors	r0, r0
   284b2:	f380 8811 	msr	BASEPRI, r0
   284b6:	f04f 0003 	mov.w	r0, #3
   284ba:	df02      	svc	2
   284bc:	e6eb      	b.n	28296 <ull_central_setup+0x36>
			lll->data_chan_sel = 1;
   284be:	7f7b      	ldrb	r3, [r7, #29]
   284c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   284c4:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   284c6:	1d38      	adds	r0, r7, #4
   284c8:	f016 ffa4 	bl	3f414 <lll_chan_id>
			cs->csa = 0x01;
   284cc:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   284ce:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
   284d0:	f888 301c 	strb.w	r3, [r8, #28]
   284d4:	e72e      	b.n	28334 <ull_central_setup+0xd4>
   284d6:	bf00      	nop
   284d8:	1afd498d 	.word	0x1afd498d
   284dc:	00000007 	.word	0x00000007
   284e0:	0003ec31 	.word	0x0003ec31
   284e4:	000534b0 	.word	0x000534b0
   284e8:	000532a4 	.word	0x000532a4
   284ec:	00052d50 	.word	0x00052d50
   284f0:	0003ec35 	.word	0x0003ec35
   284f4:	0003ec65 	.word	0x0003ec65
   284f8:	00052e4c 	.word	0x00052e4c
   284fc:	3b9aca00 	.word	0x3b9aca00

00028500 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
   28500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28504:	b08d      	sub	sp, #52	; 0x34
   28506:	461c      	mov	r4, r3
   28508:	9307      	str	r3, [sp, #28]
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
   2850a:	f04f 09ff 	mov.w	r9, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   2850e:	2300      	movs	r3, #0
{
   28510:	4617      	mov	r7, r2
   28512:	f8df 8104 	ldr.w	r8, [pc, #260]	; 28618 <ull_sched_after_mstr_slot_get+0x118>
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   28516:	6023      	str	r3, [r4, #0]
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
   28518:	1d0a      	adds	r2, r1, #4
	ticks_slot_abs_prev = 0U;
   2851a:	469a      	mov	sl, r3
{
   2851c:	4604      	mov	r4, r0
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
   2851e:	9206      	str	r2, [sp, #24]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
   28520:	930a      	str	r3, [sp, #40]	; 0x28
   28522:	469b      	mov	fp, r3
	ticker_id = ticker_id_prev = 0xff;
   28524:	f88d 9027 	strb.w	r9, [sp, #39]	; 0x27
	ticks_slot_abs_prev = 0U;
   28528:	ae0b      	add	r6, sp, #44	; 0x2c
   2852a:	ad0a      	add	r5, sp, #40	; 0x28
		uint32_t volatile ret_cb;
		struct ll_conn *conn;
		uint32_t ret;
		bool success;

		ret_cb = TICKER_STATUS_BUSY;
   2852c:	f04f 0c02 	mov.w	ip, #2
					       NULL, /* lazy */
					       ticker_match_op_cb,
					       NULL, /* match_op_context */
					       ticker_op_cb, (void *)&ret_cb);
#else
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
   28530:	e9cd 8601 	strd	r8, r6, [sp, #4]
   28534:	9500      	str	r5, [sp, #0]
   28536:	463b      	mov	r3, r7
   28538:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   2853c:	4621      	mov	r1, r4
   2853e:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   28540:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
   28544:	f00d f95e 	bl	35804 <ticker_next_slot_get>
					   &ticker_id, ticks_anchor,
					   &ticks_to_expire,
					   ticker_op_cb, (void *)&ret_cb);
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */
		if (ret == TICKER_STATUS_BUSY) {
   28548:	2802      	cmp	r0, #2
   2854a:	d02d      	beq.n	285a8 <ull_sched_after_mstr_slot_get+0xa8>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
   2854c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		LL_ASSERT(success);
   2854e:	bb8b      	cbnz	r3, 285b4 <ull_sched_after_mstr_slot_get+0xb4>

		if (ticker_id == 0xff) {
   28550:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   28554:	28ff      	cmp	r0, #255	; 0xff
   28556:	d03d      	beq.n	285d4 <ull_sched_after_mstr_slot_get+0xd4>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
   28558:	3805      	subs	r0, #5
   2855a:	b2c3      	uxtb	r3, r0
   2855c:	2b05      	cmp	r3, #5
   2855e:	d8e5      	bhi.n	2852c <ull_sched_after_mstr_slot_get+0x2c>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   28560:	b280      	uxth	r0, r0
   28562:	f011 fc69 	bl	39e38 <ll_conn_get>
		if (conn && !conn->lll.role) {
   28566:	2800      	cmp	r0, #0
   28568:	d0e0      	beq.n	2852c <ull_sched_after_mstr_slot_get+0x2c>
   2856a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   2856e:	2b00      	cmp	r3, #0
   28570:	dbdc      	blt.n	2852c <ull_sched_after_mstr_slot_get+0x2c>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
   28572:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			ticks_slot_abs_curr += conn->ull.ticks_slot;
   28576:	6902      	ldr	r2, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
   28578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			if ((ticker_id_prev != 0xff) &&
   2857a:	d00c      	beq.n	28596 <ull_sched_after_mstr_slot_get+0x96>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   2857c:	4659      	mov	r1, fp
   2857e:	4618      	mov	r0, r3
   28580:	9205      	str	r2, [sp, #20]
   28582:	9304      	str	r3, [sp, #16]
   28584:	f00d f9a0 	bl	358c8 <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
   28588:	9b06      	ldr	r3, [sp, #24]
   2858a:	eb0a 0103 	add.w	r1, sl, r3
			if ((ticker_id_prev != 0xff) &&
   2858e:	4288      	cmp	r0, r1
   28590:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   28594:	d821      	bhi.n	285da <ull_sched_after_mstr_slot_get+0xda>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   28596:	4692      	mov	sl, r2
			ticks_to_expire_prev = ticks_to_expire_normal;
   28598:	469b      	mov	fp, r3
			ticker_id_prev = ticker_id;
   2859a:	f89d 9027 	ldrb.w	r9, [sp, #39]	; 0x27
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   2859e:	e7c5      	b.n	2852c <ull_sched_after_mstr_slot_get+0x2c>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   285a0:	4621      	mov	r1, r4
   285a2:	2000      	movs	r0, #0
   285a4:	f00d f976 	bl	35894 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   285a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   285aa:	2b02      	cmp	r3, #2
   285ac:	d0f8      	beq.n	285a0 <ull_sched_after_mstr_slot_get+0xa0>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   285ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		LL_ASSERT(success);
   285b0:	2b00      	cmp	r3, #0
   285b2:	d0cd      	beq.n	28550 <ull_sched_after_mstr_slot_get+0x50>
   285b4:	2373      	movs	r3, #115	; 0x73
   285b6:	4a14      	ldr	r2, [pc, #80]	; (28608 <ull_sched_after_mstr_slot_get+0x108>)
   285b8:	4914      	ldr	r1, [pc, #80]	; (2860c <ull_sched_after_mstr_slot_get+0x10c>)
   285ba:	4815      	ldr	r0, [pc, #84]	; (28610 <ull_sched_after_mstr_slot_get+0x110>)
   285bc:	f021 fd8e 	bl	4a0dc <printk>
   285c0:	4040      	eors	r0, r0
   285c2:	f380 8811 	msr	BASEPRI, r0
   285c6:	f04f 0003 	mov.w	r0, #3
   285ca:	df02      	svc	2
		if (ticker_id == 0xff) {
   285cc:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   285d0:	28ff      	cmp	r0, #255	; 0xff
   285d2:	d1c1      	bne.n	28558 <ull_sched_after_mstr_slot_get+0x58>
		}
	}

	if (ticker_id_prev != 0xff) {
   285d4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   285d8:	d00e      	beq.n	285f8 <ull_sched_after_mstr_slot_get+0xf8>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   285da:	480e      	ldr	r0, [pc, #56]	; (28614 <ull_sched_after_mstr_slot_get+0x114>)
   285dc:	44da      	add	sl, fp
   285de:	fbaa 0100 	umull	r0, r1, sl, r0
   285e2:	2307      	movs	r3, #7
   285e4:	fb03 110a 	mla	r1, r3, sl, r1
   285e8:	a305      	add	r3, pc, #20	; (adr r3, 28600 <ull_sched_after_mstr_slot_get+0x100>)
   285ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   285ee:	f7fd fd87 	bl	26100 <__aeabi_uldivmod>
   285f2:	9b07      	ldr	r3, [sp, #28]
						    ticks_slot_abs_prev) +
   285f4:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
   285f6:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
   285f8:	b00d      	add	sp, #52	; 0x34
   285fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285fe:	bf00      	nop
   28600:	3b9aca00 	.word	0x3b9aca00
   28604:	00000000 	.word	0x00000000
   28608:	000534fc 	.word	0x000534fc
   2860c:	00053540 	.word	0x00053540
   28610:	00052d50 	.word	0x00052d50
   28614:	1afd498d 	.word	0x1afd498d
   28618:	0003f001 	.word	0x0003f001
   2861c:	00000000 	.word	0x00000000

00028620 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
   28620:	b570      	push	{r4, r5, r6, lr}
   28622:	461c      	mov	r4, r3
   28624:	b082      	sub	sp, #8
   28626:	4615      	mov	r5, r2
   28628:	4606      	mov	r6, r0
	uint32_t ticks_anchor_offset = ticks_anchor;

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
   2862a:	aa01      	add	r2, sp, #4
   2862c:	2002      	movs	r0, #2
	uint32_t ticks_anchor_offset = ticks_anchor;
   2862e:	9501      	str	r5, [sp, #4]
	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
   28630:	f7ff ff66 	bl	28500 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
   28634:	6823      	ldr	r3, [r4, #0]
   28636:	b313      	cbz	r3, 2867e <after_mstr_offset_get+0x5e>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
   28638:	9801      	ldr	r0, [sp, #4]
   2863a:	1b43      	subs	r3, r0, r5
   2863c:	021b      	lsls	r3, r3, #8
   2863e:	d420      	bmi.n	28682 <after_mstr_offset_get+0x62>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
   28640:	4629      	mov	r1, r5
   28642:	f00d f941 	bl	358c8 <ticker_ticks_diff_get>
   28646:	4a1c      	ldr	r2, [pc, #112]	; (286b8 <after_mstr_offset_get+0x98>)
   28648:	2107      	movs	r1, #7
   2864a:	fba0 2302 	umull	r2, r3, r0, r2
   2864e:	fb01 3300 	mla	r3, r1, r0, r3
   28652:	4619      	mov	r1, r3
   28654:	4610      	mov	r0, r2
   28656:	a316      	add	r3, pc, #88	; (adr r3, 286b0 <after_mstr_offset_get+0x90>)
   28658:	e9d3 2300 	ldrd	r2, r3, [r3]
   2865c:	f7fd fd50 	bl	26100 <__aeabi_uldivmod>
   28660:	6823      	ldr	r3, [r4, #0]
   28662:	4418      	add	r0, r3
   28664:	6020      	str	r0, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
   28666:	2800      	cmp	r0, #0
   28668:	db09      	blt.n	2867e <after_mstr_offset_get+0x5e>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
   2866a:	f240 43e2 	movw	r3, #1250	; 0x4e2
   2866e:	fb03 f306 	mul.w	r3, r3, r6

		while (*win_offset_us > conn_interval_us) {
   28672:	4283      	cmp	r3, r0
   28674:	d203      	bcs.n	2867e <after_mstr_offset_get+0x5e>
			*win_offset_us -= conn_interval_us;
   28676:	1ac0      	subs	r0, r0, r3
		while (*win_offset_us > conn_interval_us) {
   28678:	4283      	cmp	r3, r0
   2867a:	d3fc      	bcc.n	28676 <after_mstr_offset_get+0x56>
   2867c:	6020      	str	r0, [r4, #0]
		}
	}
}
   2867e:	b002      	add	sp, #8
   28680:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
   28682:	4601      	mov	r1, r0
   28684:	4628      	mov	r0, r5
   28686:	f00d f91f 	bl	358c8 <ticker_ticks_diff_get>
   2868a:	4a0b      	ldr	r2, [pc, #44]	; (286b8 <after_mstr_offset_get+0x98>)
   2868c:	2107      	movs	r1, #7
   2868e:	fba0 2302 	umull	r2, r3, r0, r2
   28692:	fb01 3300 	mla	r3, r1, r0, r3
   28696:	4619      	mov	r1, r3
   28698:	4610      	mov	r0, r2
   2869a:	a305      	add	r3, pc, #20	; (adr r3, 286b0 <after_mstr_offset_get+0x90>)
   2869c:	e9d3 2300 	ldrd	r2, r3, [r3]
   286a0:	f7fd fd2e 	bl	26100 <__aeabi_uldivmod>
   286a4:	6823      	ldr	r3, [r4, #0]
   286a6:	1a18      	subs	r0, r3, r0
   286a8:	6020      	str	r0, [r4, #0]
   286aa:	e7dc      	b.n	28666 <after_mstr_offset_get+0x46>
   286ac:	f3af 8000 	nop.w
   286b0:	3b9aca00 	.word	0x3b9aca00
   286b4:	00000000 	.word	0x00000000
   286b8:	1afd498d 	.word	0x1afd498d
   286bc:	00000000 	.word	0x00000000

000286c0 <ull_sched_mfy_win_offset_select>:
{
   286c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   286c4:	f8b0 21a4 	ldrh.w	r2, [r0, #420]	; 0x1a4
{
   286c8:	b088      	sub	sp, #32
   286ca:	4605      	mov	r5, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   286cc:	f240 43e2 	movw	r3, #1250	; 0x4e2
   286d0:	4849      	ldr	r0, [pc, #292]	; (287f8 <ull_sched_mfy_win_offset_select+0x138>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   286d2:	ae05      	add	r6, sp, #20
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   286d4:	fb03 f302 	mul.w	r3, r3, r2
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   286d8:	2400      	movs	r4, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   286da:	fba3 0100 	umull	r0, r1, r3, r0
	uint8_t offset_m_max = OFFSET_M_MAX;
   286de:	2706      	movs	r7, #6
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   286e0:	a343      	add	r3, pc, #268	; (adr r3, 287f0 <ull_sched_mfy_win_offset_select+0x130>)
   286e2:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
   286e6:	6074      	str	r4, [r6, #4]
   286e8:	9405      	str	r4, [sp, #20]
   286ea:	60b4      	str	r4, [r6, #8]
	uint8_t offset_m_max = OFFSET_M_MAX;
   286ec:	f88d 700f 	strb.w	r7, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   286f0:	f7fd fd06 	bl	26100 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
   286f4:	f10d 020f 	add.w	r2, sp, #15
   286f8:	9601      	str	r6, [sp, #4]
   286fa:	f8b5 319a 	ldrh.w	r3, [r5, #410]	; 0x19a
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
   286fe:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
   28700:	9200      	str	r2, [sp, #0]
   28702:	4628      	mov	r0, r5
   28704:	2101      	movs	r1, #1
   28706:	aa04      	add	r2, sp, #16
   28708:	f016 fc7c 	bl	3f004 <win_offset_calc>
		while (offset_index_m < offset_m_max) {
   2870c:	f89d e00f 	ldrb.w	lr, [sp, #15]
   28710:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
   28714:	b2c0      	uxtb	r0, r0
   28716:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
   2871a:	4621      	mov	r1, r4
   2871c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   28720:	46ac      	mov	ip, r5
   28722:	f105 080c 	add.w	r8, r5, #12
			if (win_offset_s != 0xffff) {
   28726:	f64f 74ff 	movw	r4, #65535	; 0xffff
	return ((uint16_t)src[1] << 8) | src[0];
   2872a:	f89c 31a5 	ldrb.w	r3, [ip, #421]	; 0x1a5
   2872e:	f89c 71a4 	ldrb.w	r7, [ip, #420]	; 0x1a4
   28732:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
   28736:	b23f      	sxth	r7, r7
   28738:	b2ba      	uxth	r2, r7
		while (offset_index_m < offset_m_max) {
   2873a:	f1be 0f00 	cmp.w	lr, #0
   2873e:	d009      	beq.n	28754 <ull_sched_mfy_win_offset_select+0x94>
   28740:	4633      	mov	r3, r6
			if (win_offset_s != 0xffff) {
   28742:	42a2      	cmp	r2, r4
   28744:	d003      	beq.n	2874e <ull_sched_mfy_win_offset_select+0x8e>
				if (win_offset_s ==
   28746:	8819      	ldrh	r1, [r3, #0]
   28748:	4291      	cmp	r1, r2
   2874a:	d03a      	beq.n	287c2 <ull_sched_mfy_win_offset_select+0x102>
				has_offset_s = 1U;
   2874c:	2101      	movs	r1, #1
   2874e:	3302      	adds	r3, #2
		while (offset_index_m < offset_m_max) {
   28750:	4298      	cmp	r0, r3
   28752:	d1f6      	bne.n	28742 <ull_sched_mfy_win_offset_select+0x82>
		offset_index_s++;
   28754:	f10c 0c02 	add.w	ip, ip, #2
	while (offset_index_s < OFFSET_S_MAX) {
   28758:	45e0      	cmp	r8, ip
   2875a:	d1e6      	bne.n	2872a <ull_sched_mfy_win_offset_select+0x6a>
	} else if (!has_offset_s) {
   2875c:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
   28760:	b1d1      	cbz	r1, 28798 <ull_sched_mfy_win_offset_select+0xd8>
		pdu_ctrl_tx->len =
   28762:	2203      	movs	r2, #3
   28764:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   28768:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
   2876c:	f895 111a 	ldrb.w	r1, [r5, #282]	; 0x11a
   28770:	2005      	movs	r0, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   28772:	f042 0203 	orr.w	r2, r2, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
   28776:	f360 0102 	bfi	r1, r0, #0, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   2877a:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->llctrl.opcode =
   2877e:	2411      	movs	r4, #17
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
   28780:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   28782:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.opcode =
   28784:	f803 4c02 	strb.w	r4, [r3, #-2]
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
   28788:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
   2878c:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
   2878e:	f885 111a 	strb.w	r1, [r5, #282]	; 0x11a
}
   28792:	b008      	add	sp, #32
   28794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
   28798:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   2879c:	f240 41e2 	movw	r1, #1250	; 0x4e2
   287a0:	fb01 f102 	mul.w	r1, r1, r2
	dst[1] = val >> 8;
   287a4:	0a10      	lsrs	r0, r2, #8
   287a6:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
	dst[0] = val;
   287aa:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
   287ac:	7058      	strb	r0, [r3, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   287ae:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
   287b2:	2204      	movs	r2, #4
   287b4:	f362 0302 	bfi	r3, r2, #0, #3
   287b8:	f885 311a 	strb.w	r3, [r5, #282]	; 0x11a
}
   287bc:	b008      	add	sp, #32
   287be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
   287c2:	f8d5 10f8 	ldr.w	r1, [r5, #248]	; 0xf8
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
   287c6:	f240 43e2 	movw	r3, #1250	; 0x4e2
   287ca:	fb03 f302 	mul.w	r3, r3, r2
   287ce:	0a12      	lsrs	r2, r2, #8
   287d0:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   287d4:	704a      	strb	r2, [r1, #1]
	dst[0] = val;
   287d6:	700f      	strb	r7, [r1, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   287d8:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
   287dc:	2204      	movs	r2, #4
   287de:	f362 0302 	bfi	r3, r2, #0, #3
   287e2:	f885 311a 	strb.w	r3, [r5, #282]	; 0x11a
}
   287e6:	b008      	add	sp, #32
   287e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   287ec:	f3af 8000 	nop.w
   287f0:	1afd498d 	.word	0x1afd498d
   287f4:	00000007 	.word	0x00000007
   287f8:	3b9aca00 	.word	0x3b9aca00
   287fc:	00000000 	.word	0x00000000

00028800 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
   28800:	b538      	push	{r3, r4, r5, lr}
   28802:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
   28804:	f019 fac6 	bl	41d94 <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
   28808:	7da3      	ldrb	r3, [r4, #22]
   2880a:	f3c3 0041 	ubfx	r0, r3, #1, #2
   2880e:	3001      	adds	r0, #1
   28810:	f000 0003 	and.w	r0, r0, #3
   28814:	2803      	cmp	r0, #3
   28816:	d034      	beq.n	28882 <isr_window+0x82>
   28818:	f360 0342 	bfi	r3, r0, #1, #2
   2881c:	75a3      	strb	r3, [r4, #22]
   2881e:	3025      	adds	r0, #37	; 0x25
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
   28820:	f018 fa1e 	bl	40c60 <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
   28824:	6863      	ldr	r3, [r4, #4]
   28826:	b313      	cbz	r3, 2886e <isr_window+0x6e>
   28828:	6923      	ldr	r3, [r4, #16]
   2882a:	b303      	cbz	r3, 2886e <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
   2882c:	f01b f820 	bl	43870 <radio_tmr_start_get>
   28830:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
   28832:	f00d f847 	bl	358c4 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   28836:	1cc1      	adds	r1, r0, #3
   28838:	2000      	movs	r0, #0
   2883a:	f01a ffdf 	bl	437fc <radio_tmr_start_tick>
#endif /* !CONFIG_BT_CENTRAL */

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event.
	 */
	radio_tmr_end_capture();
   2883e:	f01b f86b 	bl	43918 <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
   28842:	f01b f815 	bl	43870 <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
   28846:	4629      	mov	r1, r5
   28848:	f00d f83e 	bl	358c8 <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
   2884c:	4a12      	ldr	r2, [pc, #72]	; (28898 <isr_window+0x98>)
   2884e:	2107      	movs	r1, #7
   28850:	fba0 2302 	umull	r2, r3, r0, r2
   28854:	fb01 3300 	mla	r3, r1, r0, r3
   28858:	4619      	mov	r1, r3
   2885a:	4610      	mov	r0, r2
   2885c:	a30c      	add	r3, pc, #48	; (adr r3, 28890 <isr_window+0x90>)
   2885e:	e9d3 2300 	ldrd	r2, r3, [r3]
   28862:	f7fd fc4d 	bl	26100 <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
   28866:	6923      	ldr	r3, [r4, #16]
   28868:	1a18      	subs	r0, r3, r0
   2886a:	6120      	str	r0, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
   2886c:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
   2886e:	f00d f829 	bl	358c4 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   28872:	1cc1      	adds	r1, r0, #3
   28874:	2000      	movs	r0, #0
   28876:	f01a ffc1 	bl	437fc <radio_tmr_start_tick>
}
   2887a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
   2887e:	f01b b84b 	b.w	43918 <radio_tmr_end_capture>
		lll->chan = 0U;
   28882:	f36f 0342 	bfc	r3, #1, #2
   28886:	75a3      	strb	r3, [r4, #22]
   28888:	2025      	movs	r0, #37	; 0x25
   2888a:	e7c9      	b.n	28820 <isr_window+0x20>
   2888c:	f3af 8000 	nop.w
   28890:	3b9aca00 	.word	0x3b9aca00
   28894:	00000000 	.word	0x00000000
   28898:	1afd498d 	.word	0x1afd498d
   2889c:	00000000 	.word	0x00000000

000288a0 <isr_rx>:
{
   288a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   288a4:	b087      	sub	sp, #28
   288a6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   288a8:	f01a fd98 	bl	433dc <radio_is_done>
	if (trx_done) {
   288ac:	f010 0fff 	tst.w	r0, #255	; 0xff
   288b0:	d10a      	bne.n	288c8 <isr_rx+0x28>
	lll_isr_status_reset();
   288b2:	f018 fa2d 	bl	40d10 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
   288b6:	4621      	mov	r1, r4
   288b8:	48c1      	ldr	r0, [pc, #772]	; (28bc0 <isr_rx+0x320>)
   288ba:	f01a fc65 	bl	43188 <radio_isr_set>
	radio_disable();
   288be:	f01a fd5f 	bl	43380 <radio_disable>
}
   288c2:	b007      	add	sp, #28
   288c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = radio_crc_is_valid();
   288c8:	f01a fda8 	bl	4341c <radio_crc_is_valid>
   288cc:	4607      	mov	r7, r0
		devmatch_ok = radio_filter_has_match();
   288ce:	f01a fee9 	bl	436a4 <radio_filter_has_match>
   288d2:	4606      	mov	r6, r0
		devmatch_id = radio_filter_match_get();
   288d4:	f01a fef0 	bl	436b8 <radio_filter_match_get>
   288d8:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
   288da:	f01b f913 	bl	43b04 <radio_ar_has_match>
   288de:	4605      	mov	r5, r0
		irkmatch_id = radio_ar_match_get();
   288e0:	f01b f8f4 	bl	43acc <radio_ar_match_get>
   288e4:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
   288e6:	f01a fea5 	bl	43634 <radio_rssi_is_ready>
   288ea:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
   288ec:	f01a fe88 	bl	43600 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
   288f0:	f018 fa0e 	bl	40d10 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
   288f4:	f017 0fff 	tst.w	r7, #255	; 0xff
   288f8:	d0dd      	beq.n	288b6 <isr_rx+0x16>
	node_rx = ull_pdu_rx_alloc_peek(1);
   288fa:	2001      	movs	r0, #1
   288fc:	f00f fb22 	bl	37f44 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   28900:	4607      	mov	r7, r0
   28902:	2800      	cmp	r0, #0
   28904:	f000 814a 	beq.w	28b9c <isr_rx+0x2fc>
	rl_idx = devmatch_ok ?
   28908:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
   2890c:	b2ed      	uxtb	r5, r5
	rl_idx = devmatch_ok ?
   2890e:	f040 813c 	bne.w	28b8a <isr_rx+0x2ea>
   28912:	2d00      	cmp	r5, #0
   28914:	f040 80c2 	bne.w	28a9c <isr_rx+0x1fc>
   28918:	f04f 09ff 	mov.w	r9, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
   2891c:	4632      	mov	r2, r6
   2891e:	464b      	mov	r3, r9
   28920:	4629      	mov	r1, r5
   28922:	4620      	mov	r0, r4
   28924:	f019 fc8e 	bl	42244 <lll_scan_isr_rx_check>
	if (has_adva &&
   28928:	2800      	cmp	r0, #0
   2892a:	d0c4      	beq.n	288b6 <isr_rx+0x16>
   2892c:	7f3a      	ldrb	r2, [r7, #28]
#if defined(CONFIG_BT_CENTRAL)
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
   2892e:	6863      	ldr	r3, [r4, #4]
	bool dir_report = false;
   28930:	2000      	movs	r0, #0
		rssi_ready = radio_rssi_is_ready();
   28932:	fa5f f888 	uxtb.w	r8, r8
	bool dir_report = false;
   28936:	f002 010f 	and.w	r1, r2, #15
   2893a:	f88d 0013 	strb.w	r0, [sp, #19]
	} else if (lll->conn && !lll->conn->central.cancelled &&
   2893e:	2b00      	cmp	r3, #0
   28940:	f000 80c8 	beq.w	28ad4 <isr_rx+0x234>
   28944:	6863      	ldr	r3, [r4, #4]
   28946:	f893 3020 	ldrb.w	r3, [r3, #32]
   2894a:	079e      	lsls	r6, r3, #30
   2894c:	f100 80c2 	bmi.w	28ad4 <isr_rx+0x234>
   28950:	2907      	cmp	r1, #7
   28952:	d0b0      	beq.n	288b6 <isr_rx+0x16>
#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(const struct lll_scan *lll,
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   28954:	7da3      	ldrb	r3, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
   28956:	0718      	lsls	r0, r3, #28
   28958:	f140 813e 	bpl.w	28bd8 <isr_rx+0x338>
   2895c:	2900      	cmp	r1, #0
   2895e:	f040 80a3 	bne.w	28aa8 <isr_rx+0x208>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
   28962:	7f7b      	ldrb	r3, [r7, #29]
   28964:	2b25      	cmp	r3, #37	; 0x25
   28966:	f200 80d0 	bhi.w	28b0a <isr_rx+0x26a>
			rx = ull_pdu_rx_alloc_peek(4);
   2896a:	2004      	movs	r0, #4
   2896c:	f00f faea 	bl	37f44 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   28970:	2800      	cmp	r0, #0
   28972:	d0a0      	beq.n	288b6 <isr_rx+0x16>
		pdu_end_us = radio_tmr_end_get();
   28974:	f01a ffd8 	bl	43928 <radio_tmr_end_get>
		if (!lll->ticks_window) {
   28978:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
   2897a:	4606      	mov	r6, r0
		if (!lll->ticks_window) {
   2897c:	b943      	cbnz	r3, 28990 <isr_rx+0xf0>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
   2897e:	8c22      	ldrh	r2, [r4, #32]
   28980:	f240 2371 	movw	r3, #625	; 0x271
   28984:	fb03 f302 	mul.w	r3, r3, r2
			pdu_end_us %= scan_interval_us;
   28988:	fbb0 f2f3 	udiv	r2, r0, r3
   2898c:	fb03 0612 	mls	r6, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
   28990:	6823      	ldr	r3, [r4, #0]
   28992:	488c      	ldr	r0, [pc, #560]	; (28bc4 <isr_rx+0x324>)
   28994:	691b      	ldr	r3, [r3, #16]
   28996:	2207      	movs	r2, #7
   28998:	fba3 0100 	umull	r0, r1, r3, r0
   2899c:	fb02 1103 	mla	r1, r2, r3, r1
   289a0:	a385      	add	r3, pc, #532	; (adr r3, 28bb8 <isr_rx+0x318>)
   289a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   289a6:	f7fd fbab 	bl	26100 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
   289aa:	f2a0 3042 	subw	r0, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
   289ae:	42b0      	cmp	r0, r6
   289b0:	d381      	bcc.n	288b6 <isr_rx+0x16>
		radio_switch_complete_and_disable();
   289b2:	f01a fe17 	bl	435e4 <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   289b6:	4648      	mov	r0, r9
		lll_conn = lll->conn;
   289b8:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   289ba:	f017 fc47 	bl	4024c <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
   289be:	7de3      	ldrb	r3, [r4, #23]
   289c0:	079b      	lsls	r3, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   289c2:	4680      	mov	r8, r0
		if (lll->rpa_gen && lrpa) {
   289c4:	f140 8162 	bpl.w	28c8c <isr_rx+0x3ec>
   289c8:	2800      	cmp	r0, #0
   289ca:	f000 815f 	beq.w	28c8c <isr_rx+0x3ec>
			init_addr = lrpa->val;
   289ce:	4683      	mov	fp, r0
			init_tx_addr = 1;
   289d0:	2601      	movs	r6, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
   289d2:	f01a fd31 	bl	43438 <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
   289d6:	7f3b      	ldrb	r3, [r7, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   289d8:	f8cd b008 	str.w	fp, [sp, #8]
		pdu_tx = (void *)radio_pkt_scratch_get();
   289dc:	4682      	mov	sl, r0
					     pdu_adv_rx->adv_ind.addr,
   289de:	f107 021e 	add.w	r2, r7, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
   289e2:	a805      	add	r0, sp, #20
   289e4:	4651      	mov	r1, sl
   289e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   289ea:	9003      	str	r0, [sp, #12]
   289ec:	9200      	str	r2, [sp, #0]
   289ee:	4620      	mov	r0, r4
   289f0:	2200      	movs	r2, #0
   289f2:	9601      	str	r6, [sp, #4]
   289f4:	f019 fc6a 	bl	422cc <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
   289f8:	4650      	mov	r0, sl
   289fa:	f01a fc9f 	bl	4333c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   289fe:	f01a fce3 	bl	433c8 <radio_is_ready>
   28a02:	2800      	cmp	r0, #0
   28a04:	f040 8157 	bne.w	28cb6 <isr_rx+0x416>
		radio_isr_set(isr_done_cleanup, lll);
   28a08:	4621      	mov	r1, r4
   28a0a:	486f      	ldr	r0, [pc, #444]	; (28bc8 <isr_rx+0x328>)
   28a0c:	f01a fbbc 	bl	43188 <radio_isr_set>
		lll->conn->central.initiated = 1U;
   28a10:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
   28a12:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
   28a14:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
   28a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
   28a1c:	f042 0201 	orr.w	r2, r2, #1
   28a20:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
   28a24:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
   28a26:	f00f faad 	bl	37f84 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   28a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx = ull_pdu_rx_alloc();
   28a2e:	4606      	mov	r6, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   28a30:	2216      	movs	r2, #22
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
   28a32:	7f3f      	ldrb	r7, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   28a34:	7102      	strb	r2, [r0, #4]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
   28a36:	4651      	mov	r1, sl
		rx->hdr.handle = 0xffff;
   28a38:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_tx, (offsetof(struct pdu_adv, connect_ind) +
   28a3a:	2224      	movs	r2, #36	; 0x24
   28a3c:	301c      	adds	r0, #28
   28a3e:	f023 fc55 	bl	4c2ec <memcpy>
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
   28a42:	7f33      	ldrb	r3, [r6, #28]
		ftr->param = lll;
   28a44:	60b4      	str	r4, [r6, #8]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
   28a46:	f3c7 1740 	ubfx	r7, r7, #5, #1
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
   28a4a:	f367 1345 	bfi	r3, r7, #5, #1
   28a4e:	7733      	strb	r3, [r6, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
   28a50:	f01a ff0e 	bl	43870 <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
   28a54:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
   28a56:	6130      	str	r0, [r6, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
   28a58:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
   28a5a:	9f05      	ldr	r7, [sp, #20]
				    radio_rx_chain_delay_get(PHY_1M, 0);
   28a5c:	f01a fc7e 	bl	4335c <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   28a60:	2d00      	cmp	r5, #0
   28a62:	bf08      	it	eq
   28a64:	f04f 09ff 	moveq.w	r9, #255	; 0xff
   28a68:	f886 9019 	strb.w	r9, [r6, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   28a6c:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
   28a6e:	1a38      	subs	r0, r7, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   28a70:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
   28a74:	6170      	str	r0, [r6, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
   28a76:	d003      	beq.n	28a80 <isr_rx+0x1e0>
   28a78:	f118 0300 	adds.w	r3, r8, #0
   28a7c:	bf18      	it	ne
   28a7e:	2301      	movne	r3, #1
   28a80:	7eb2      	ldrb	r2, [r6, #26]
   28a82:	f363 0200 	bfi	r2, r3, #0, #1
   28a86:	76b2      	strb	r2, [r6, #26]
			ftr->extra = ull_pdu_rx_alloc();
   28a88:	f00f fa7c 	bl	37f84 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   28a8c:	4631      	mov	r1, r6
			ftr->extra = ull_pdu_rx_alloc();
   28a8e:	60f0      	str	r0, [r6, #12]
		ull_rx_put(rx->hdr.link, rx);
   28a90:	6830      	ldr	r0, [r6, #0]
   28a92:	f00f fa8f 	bl	37fb4 <ull_rx_put>
		ull_rx_sched();
   28a96:	f00f fa9d 	bl	37fd4 <ull_rx_sched>
	if (!err) {
   28a9a:	e712      	b.n	288c2 <isr_rx+0x22>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   28a9c:	fa5f f08a 	uxtb.w	r0, sl
   28aa0:	f017 fc58 	bl	40354 <ull_filter_lll_rl_irk_idx>
   28aa4:	4681      	mov	r9, r0
   28aa6:	e739      	b.n	2891c <isr_rx+0x7c>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
   28aa8:	2901      	cmp	r1, #1
   28aaa:	d115      	bne.n	28ad8 <isr_rx+0x238>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   28aac:	7f7b      	ldrb	r3, [r7, #29]
   28aae:	2b0c      	cmp	r3, #12
   28ab0:	f47f af01 	bne.w	288b6 <isr_rx+0x16>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
   28ab4:	2300      	movs	r3, #0
   28ab6:	9301      	str	r3, [sp, #4]
   28ab8:	f8cd 9000 	str.w	r9, [sp]
   28abc:	09d2      	lsrs	r2, r2, #7
   28abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
   28ac2:	4620      	mov	r0, r4
   28ac4:	f019 fae2 	bl	4208c <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
   28ac8:	2800      	cmp	r0, #0
   28aca:	f47f af4e 	bne.w	2896a <isr_rx+0xca>
   28ace:	7f3a      	ldrb	r2, [r7, #28]
   28ad0:	f002 010f 	and.w	r1, r2, #15
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28ad4:	2900      	cmp	r1, #0
   28ad6:	d04c      	beq.n	28b72 <isr_rx+0x2d2>
   28ad8:	2906      	cmp	r1, #6
   28ada:	d04a      	beq.n	28b72 <isr_rx+0x2d2>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   28adc:	2902      	cmp	r1, #2
   28ade:	f000 808a 	beq.w	28bf6 <isr_rx+0x356>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   28ae2:	2901      	cmp	r1, #1
   28ae4:	d111      	bne.n	28b0a <isr_rx+0x26a>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   28ae6:	7f7b      	ldrb	r3, [r7, #29]
   28ae8:	2b0c      	cmp	r3, #12
   28aea:	f47f aee4 	bne.w	288b6 <isr_rx+0x16>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
   28aee:	f10d 0313 	add.w	r3, sp, #19
   28af2:	9301      	str	r3, [sp, #4]
   28af4:	f8cd 9000 	str.w	r9, [sp]
   28af8:	09d2      	lsrs	r2, r2, #7
   28afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
   28afe:	2100      	movs	r1, #0
   28b00:	4620      	mov	r0, r4
   28b02:	f019 fac3 	bl	4208c <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
   28b06:	bb00      	cbnz	r0, 28b4a <isr_rx+0x2aa>
   28b08:	7f3a      	ldrb	r2, [r7, #28]
   28b0a:	f002 020f 	and.w	r2, r2, #15
					rl_idx, &dir_report))) ||
   28b0e:	2a04      	cmp	r2, #4
   28b10:	f47f aed1 	bne.w	288b6 <isr_rx+0x16>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   28b14:	7f7b      	ldrb	r3, [r7, #29]
   28b16:	2b25      	cmp	r3, #37	; 0x25
   28b18:	f63f aecd 	bhi.w	288b6 <isr_rx+0x16>
		   (lll->state != 0U) &&
   28b1c:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   28b1e:	07d8      	lsls	r0, r3, #31
   28b20:	f57f aec9 	bpl.w	288b6 <isr_rx+0x16>
	return false;
}

static inline bool isr_scan_rsp_adva_matches(struct pdu_adv *srsp)
{
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   28b24:	f01a fc88 	bl	43438 <radio_pkt_scratch_get>

	return ((sreq->rx_addr == srsp->tx_addr) &&
   28b28:	7f3b      	ldrb	r3, [r7, #28]
   28b2a:	7802      	ldrb	r2, [r0, #0]
   28b2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   28b30:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   28b34:	f47f aebf 	bne.w	288b6 <isr_rx+0x16>
		(memcmp(&sreq->scan_req.adv_addr[0],
   28b38:	3008      	adds	r0, #8
   28b3a:	2206      	movs	r2, #6
   28b3c:	f107 011e 	add.w	r1, r7, #30
   28b40:	f023 fbc4 	bl	4c2cc <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   28b44:	2800      	cmp	r0, #0
   28b46:	f47f aeb6 	bne.w	288b6 <isr_rx+0x16>
   28b4a:	7f7b      	ldrb	r3, [r7, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   28b4c:	2b00      	cmp	r3, #0
   28b4e:	f43f aeb2 	beq.w	288b6 <isr_rx+0x16>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
   28b52:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
   28b54:	b12b      	cbz	r3, 28b62 <isr_rx+0x2c2>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
   28b56:	7f3b      	ldrb	r3, [r7, #28]
   28b58:	f003 030f 	and.w	r3, r3, #15
   28b5c:	2b07      	cmp	r3, #7
   28b5e:	f47f aeaa 	bne.w	288b6 <isr_rx+0x16>
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
   28b62:	464a      	mov	r2, r9
   28b64:	4629      	mov	r1, r5
   28b66:	4640      	mov	r0, r8
   28b68:	f89d 3013 	ldrb.w	r3, [sp, #19]
   28b6c:	f019 facc 	bl	42108 <isr_rx_scan_report.isra.5>
		if (err) {
   28b70:	e6a1      	b.n	288b6 <isr_rx+0x16>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   28b72:	7f7b      	ldrb	r3, [r7, #29]
   28b74:	2b25      	cmp	r3, #37	; 0x25
   28b76:	d8c8      	bhi.n	28b0a <isr_rx+0x26a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
   28b78:	7da1      	ldrb	r1, [r4, #22]
   28b7a:	0689      	lsls	r1, r1, #26
   28b7c:	d502      	bpl.n	28b84 <isr_rx+0x2e4>
		   !lll->conn) {
   28b7e:	6861      	ldr	r1, [r4, #4]
		   lll->type &&
   28b80:	2900      	cmp	r1, #0
   28b82:	d03a      	beq.n	28bfa <isr_rx+0x35a>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   28b84:	2b25      	cmp	r3, #37	; 0x25
   28b86:	d9e1      	bls.n	28b4c <isr_rx+0x2ac>
   28b88:	e7bf      	b.n	28b0a <isr_rx+0x26a>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
   28b8a:	7da0      	ldrb	r0, [r4, #22]
   28b8c:	fa5f f189 	uxtb.w	r1, r9
   28b90:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   28b94:	f017 fb78 	bl	40288 <ull_filter_lll_rl_idx>
   28b98:	4681      	mov	r9, r0
   28b9a:	e6bf      	b.n	2891c <isr_rx+0x7c>
	LL_ASSERT(node_rx);
   28b9c:	f240 23c3 	movw	r3, #707	; 0x2c3
   28ba0:	4a0a      	ldr	r2, [pc, #40]	; (28bcc <isr_rx+0x32c>)
   28ba2:	490b      	ldr	r1, [pc, #44]	; (28bd0 <isr_rx+0x330>)
   28ba4:	480b      	ldr	r0, [pc, #44]	; (28bd4 <isr_rx+0x334>)
   28ba6:	f021 fa99 	bl	4a0dc <printk>
   28baa:	4040      	eors	r0, r0
   28bac:	f380 8811 	msr	BASEPRI, r0
   28bb0:	f04f 0003 	mov.w	r0, #3
   28bb4:	df02      	svc	2
   28bb6:	e6a7      	b.n	28908 <isr_rx+0x68>
   28bb8:	3b9aca00 	.word	0x3b9aca00
   28bbc:	00000000 	.word	0x00000000
   28bc0:	00041e49 	.word	0x00041e49
   28bc4:	1afd498d 	.word	0x1afd498d
   28bc8:	0004203d 	.word	0x0004203d
   28bcc:	00053960 	.word	0x00053960
   28bd0:	0005392c 	.word	0x0005392c
   28bd4:	00052d50 	.word	0x00052d50
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
   28bd8:	f3c2 1180 	ubfx	r1, r2, #6, #1
   28bdc:	464b      	mov	r3, r9
   28bde:	f107 021e 	add.w	r2, r7, #30
   28be2:	4620      	mov	r0, r4
   28be4:	f019 fb48 	bl	42278 <lll_scan_adva_check>
   28be8:	7f3a      	ldrb	r2, [r7, #28]
   28bea:	f002 010f 	and.w	r1, r2, #15
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   28bee:	2800      	cmp	r0, #0
   28bf0:	f47f aeb4 	bne.w	2895c <isr_rx+0xbc>
   28bf4:	e76e      	b.n	28ad4 <isr_rx+0x234>
   28bf6:	7f7b      	ldrb	r3, [r7, #29]
   28bf8:	e7c4      	b.n	28b84 <isr_rx+0x2e4>
		radio_tmr_tifs_set(EVENT_IFS_US);
   28bfa:	2096      	movs	r0, #150	; 0x96
   28bfc:	f01a fd72 	bl	436e4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   28c00:	2000      	movs	r0, #0
   28c02:	f01a fc91 	bl	43528 <radio_switch_complete_and_rx>
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
   28c06:	4629      	mov	r1, r5
   28c08:	4640      	mov	r0, r8
   28c0a:	2300      	movs	r3, #0
   28c0c:	464a      	mov	r2, r9
   28c0e:	f019 fa7b 	bl	42108 <isr_rx_scan_report.isra.5>
		if (err) {
   28c12:	2800      	cmp	r0, #0
   28c14:	f47f ae4f 	bne.w	288b6 <isr_rx+0x16>
		pdu_tx = (void *)radio_pkt_scratch_get();
   28c18:	f01a fc0e 	bl	43438 <radio_pkt_scratch_get>
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   28c1c:	7803      	ldrb	r3, [r0, #0]
   28c1e:	2203      	movs	r2, #3
   28c20:	f362 0303 	bfi	r3, r2, #0, #4
   28c24:	7003      	strb	r3, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   28c26:	7f3b      	ldrb	r3, [r7, #28]
   28c28:	7802      	ldrb	r2, [r0, #0]
		pdu_tx = (void *)radio_pkt_scratch_get();
   28c2a:	4605      	mov	r5, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   28c2c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   28c30:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   28c34:	230c      	movs	r3, #12
   28c36:	706b      	strb	r3, [r5, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   28c38:	4648      	mov	r0, r9
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   28c3a:	702a      	strb	r2, [r5, #0]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   28c3c:	f017 fb06 	bl	4024c <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
   28c40:	7de3      	ldrb	r3, [r4, #23]
   28c42:	079e      	lsls	r6, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   28c44:	4601      	mov	r1, r0
		if (lll->rpa_gen && lrpa) {
   28c46:	d527      	bpl.n	28c98 <isr_rx+0x3f8>
   28c48:	b330      	cbz	r0, 28c98 <isr_rx+0x3f8>
			pdu_tx->tx_addr = 1;
   28c4a:	782a      	ldrb	r2, [r5, #0]
   28c4c:	4628      	mov	r0, r5
   28c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   28c52:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
   28c56:	2206      	movs	r2, #6
   28c58:	f023 fb48 	bl	4c2ec <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   28c5c:	f107 011e 	add.w	r1, r7, #30
   28c60:	2206      	movs	r2, #6
   28c62:	f105 0008 	add.w	r0, r5, #8
   28c66:	f023 fb41 	bl	4c2ec <memcpy>
		radio_pkt_tx_set(pdu_tx);
   28c6a:	4628      	mov	r0, r5
   28c6c:	f01a fb66 	bl	4333c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   28c70:	f01a fbaa 	bl	433c8 <radio_is_ready>
   28c74:	bb68      	cbnz	r0, 28cd2 <isr_rx+0x432>
		radio_tmr_end_capture();
   28c76:	f01a fe4f 	bl	43918 <radio_tmr_end_capture>
		lll->state = 1U;
   28c7a:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
   28c7c:	481c      	ldr	r0, [pc, #112]	; (28cf0 <isr_rx+0x450>)
		lll->state = 1U;
   28c7e:	f043 0301 	orr.w	r3, r3, #1
   28c82:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
   28c84:	4621      	mov	r1, r4
   28c86:	f01a fa7f 	bl	43188 <radio_isr_set>
	if (!err) {
   28c8a:	e61a      	b.n	288c2 <isr_rx+0x22>
			init_tx_addr = lll->init_addr_type;
   28c8c:	7da6      	ldrb	r6, [r4, #22]
			init_addr = lll->init_addr;
   28c8e:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
   28c92:	f3c6 1680 	ubfx	r6, r6, #6, #1
			init_addr = lll->init_addr;
   28c96:	e69c      	b.n	289d2 <isr_rx+0x132>
			pdu_tx->tx_addr = lll->init_addr_type;
   28c98:	7da3      	ldrb	r3, [r4, #22]
   28c9a:	782a      	ldrb	r2, [r5, #0]
   28c9c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   28ca0:	4628      	mov	r0, r5
   28ca2:	f363 1286 	bfi	r2, r3, #6, #1
   28ca6:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   28caa:	f104 0119 	add.w	r1, r4, #25
   28cae:	2206      	movs	r2, #6
   28cb0:	f023 fb1c 	bl	4c2ec <memcpy>
   28cb4:	e7d2      	b.n	28c5c <isr_rx+0x3bc>
		LL_ASSERT(!radio_is_ready());
   28cb6:	f240 4391 	movw	r3, #1169	; 0x491
   28cba:	4a0e      	ldr	r2, [pc, #56]	; (28cf4 <isr_rx+0x454>)
   28cbc:	490e      	ldr	r1, [pc, #56]	; (28cf8 <isr_rx+0x458>)
   28cbe:	480f      	ldr	r0, [pc, #60]	; (28cfc <isr_rx+0x45c>)
   28cc0:	f021 fa0c 	bl	4a0dc <printk>
   28cc4:	4040      	eors	r0, r0
   28cc6:	f380 8811 	msr	BASEPRI, r0
   28cca:	f04f 0003 	mov.w	r0, #3
   28cce:	df02      	svc	2
   28cd0:	e69a      	b.n	28a08 <isr_rx+0x168>
		LL_ASSERT(!radio_is_ready());
   28cd2:	f240 5316 	movw	r3, #1302	; 0x516
   28cd6:	4a07      	ldr	r2, [pc, #28]	; (28cf4 <isr_rx+0x454>)
   28cd8:	4907      	ldr	r1, [pc, #28]	; (28cf8 <isr_rx+0x458>)
   28cda:	4808      	ldr	r0, [pc, #32]	; (28cfc <isr_rx+0x45c>)
   28cdc:	f021 f9fe 	bl	4a0dc <printk>
   28ce0:	4040      	eors	r0, r0
   28ce2:	f380 8811 	msr	BASEPRI, r0
   28ce6:	f04f 0003 	mov.w	r0, #3
   28cea:	df02      	svc	2
   28cec:	e7c3      	b.n	28c76 <isr_rx+0x3d6>
   28cee:	bf00      	nop
   28cf0:	00041e5d 	.word	0x00041e5d
   28cf4:	00053960 	.word	0x00053960
   28cf8:	00053934 	.word	0x00053934
   28cfc:	00052d50 	.word	0x00052d50

00028d00 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   28d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d04:	b08f      	sub	sp, #60	; 0x3c
   28d06:	4683      	mov	fp, r0
	uint8_t instance_index;
	uint8_t ticker_id;
	int result;
	uint32_t err;

	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   28d08:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   28d0c:	f10d 0036 	add.w	r0, sp, #54	; 0x36
   28d10:	f00f f80a 	bl	37d28 <ll_timeslice_ticker_id_get>
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
   28d14:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 28df8 <nrf_flash_sync_exe+0xf8>
	err = ticker_start(instance_index,
   28d18:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
   28d1c:	930a      	str	r3, [sp, #40]	; 0x28
   28d1e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   28d22:	930b      	str	r3, [sp, #44]	; 0x2c
			   HAL_TICKER_US_TO_TICKS(
   28d24:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 28dfc <nrf_flash_sync_exe+0xfc>
	err = ticker_start(instance_index,
   28d28:	f00c fdcc 	bl	358c4 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
   28d2c:	f8d8 4000 	ldr.w	r4, [r8]
   28d30:	fba4 4509 	umull	r4, r5, r4, r9
   28d34:	a32a      	add	r3, pc, #168	; (adr r3, 28de0 <nrf_flash_sync_exe+0xe0>)
   28d36:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
   28d3a:	4682      	mov	sl, r0
			   HAL_TICKER_US_TO_TICKS(
   28d3c:	4629      	mov	r1, r5
   28d3e:	4620      	mov	r0, r4
   28d40:	f7fd f9de 	bl	26100 <__aeabi_uldivmod>
   28d44:	4606      	mov	r6, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   28d46:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
   28d4a:	4b27      	ldr	r3, [pc, #156]	; (28de8 <nrf_flash_sync_exe+0xe8>)
   28d4c:	9305      	str	r3, [sp, #20]
   28d4e:	2700      	movs	r7, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   28d50:	a323      	add	r3, pc, #140	; (adr r3, 28de0 <nrf_flash_sync_exe+0xe0>)
   28d52:	e9d3 2300 	ldrd	r2, r3, [r3]
   28d56:	fba0 0109 	umull	r0, r1, r0, r9
	err = ticker_start(instance_index,
   28d5a:	f8cd b018 	str.w	fp, [sp, #24]
   28d5e:	e9cd 7707 	strd	r7, r7, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
   28d62:	f7fd f9cd 	bl	26100 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28d66:	4b21      	ldr	r3, [pc, #132]	; (28dec <nrf_flash_sync_exe+0xec>)
   28d68:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
   28d6c:	fba6 bc03 	umull	fp, ip, r6, r3
	err = ticker_start(instance_index,
   28d70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28d74:	2307      	movs	r3, #7
   28d76:	fb03 cc06 	mla	ip, r3, r6, ip
	err = ticker_start(instance_index,
   28d7a:	e9cd 7003 	strd	r7, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
   28d7e:	ebb4 000b 	subs.w	r0, r4, fp
   28d82:	eb65 010c 	sbc.w	r1, r5, ip
   28d86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28d8a:	2300      	movs	r3, #0
   28d8c:	f7fd f9b8 	bl	26100 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
   28d90:	9700      	str	r7, [sp, #0]
   28d92:	e9cd 6001 	strd	r6, r0, [sp, #4]
   28d96:	4653      	mov	r3, sl
   28d98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   28d9a:	980a      	ldr	r0, [sp, #40]	; 0x28
   28d9c:	2103      	movs	r1, #3
   28d9e:	f00c fc5f 	bl	35660 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   28da2:	f030 0402 	bics.w	r4, r0, #2
   28da6:	d116      	bne.n	28dd6 <nrf_flash_sync_exe+0xd6>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   28da8:	4a11      	ldr	r2, [pc, #68]	; (28df0 <nrf_flash_sync_exe+0xf0>)
   28daa:	4812      	ldr	r0, [pc, #72]	; (28df4 <nrf_flash_sync_exe+0xf4>)
   28dac:	2300      	movs	r3, #0
   28dae:	f01f fda9 	bl	48904 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
   28db2:	b168      	cbz	r0, 28dd0 <nrf_flash_sync_exe+0xd0>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   28db4:	9400      	str	r4, [sp, #0]
   28db6:	4623      	mov	r3, r4
   28db8:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   28dbc:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   28dc0:	2103      	movs	r1, #3
   28dc2:	f00c fcd7 	bl	35774 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
   28dc6:	f06f 0073 	mvn.w	r0, #115	; 0x73
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
   28dca:	b00f      	add	sp, #60	; 0x3c
   28dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
   28dd0:	f8d8 000c 	ldr.w	r0, [r8, #12]
   28dd4:	e7f9      	b.n	28dca <nrf_flash_sync_exe+0xca>
		result = -ECANCELED;
   28dd6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
	return result;
   28dda:	e7f6      	b.n	28dca <nrf_flash_sync_exe+0xca>
   28ddc:	f3af 8000 	nop.w
   28de0:	1afd498d 	.word	0x1afd498d
   28de4:	00000007 	.word	0x00000007
   28de8:	00045bd5 	.word	0x00045bd5
   28dec:	1afd498d 	.word	0x1afd498d
   28df0:	000b7b44 	.word	0x000b7b44
   28df4:	200067dc 	.word	0x200067dc
   28df8:	200067cc 	.word	0x200067cc
   28dfc:	3b9aca00 	.word	0x3b9aca00

00028e00 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
   28e00:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   28e02:	4d0f      	ldr	r5, [pc, #60]	; (28e40 <nrf_flash_sync_check_time_limit+0x40>)
{
   28e04:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
   28e06:	f00c fd5d 	bl	358c4 <ticker_ticks_now_get>
   28e0a:	68a9      	ldr	r1, [r5, #8]
   28e0c:	f00c fd5c 	bl	358c8 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   28e10:	490c      	ldr	r1, [pc, #48]	; (28e44 <nrf_flash_sync_check_time_limit+0x44>)
	if (ticks_diff + ticks_diff/iteration >
   28e12:	fbb0 f4f4 	udiv	r4, r0, r4
   28e16:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
   28e18:	6868      	ldr	r0, [r5, #4]
   28e1a:	a307      	add	r3, pc, #28	; (adr r3, 28e38 <nrf_flash_sync_check_time_limit+0x38>)
   28e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   28e20:	fba0 0101 	umull	r0, r1, r0, r1
   28e24:	f7fd f96c 	bl	26100 <__aeabi_uldivmod>
   28e28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
   28e2c:	4284      	cmp	r4, r0
   28e2e:	bf94      	ite	ls
   28e30:	2000      	movls	r0, #0
   28e32:	2001      	movhi	r0, #1
   28e34:	bd38      	pop	{r3, r4, r5, pc}
   28e36:	bf00      	nop
   28e38:	1afd498d 	.word	0x1afd498d
   28e3c:	00000007 	.word	0x00000007
   28e40:	200067cc 	.word	0x200067cc
   28e44:	3b9aca00 	.word	0x3b9aca00

00028e48 <activity_expiry_function>:
    }
}

K_WORK_DEFINE(activity_work, activity_work_handler);

void activity_expiry_function() { k_work_submit(&activity_work); }
   28e48:	4801      	ldr	r0, [pc, #4]	; (28e50 <activity_expiry_function+0x8>)
   28e4a:	f01f bea1 	b.w	48b90 <k_work_submit>
   28e4e:	bf00      	nop
   28e50:	20000260 	.word	0x20000260

00028e54 <activity_init>:

K_TIMER_DEFINE(activity_timer, activity_expiry_function, NULL);

int activity_init() {
   28e54:	e92d 4817 	stmdb	sp!, {r0, r1, r2, r4, fp, lr}
	return z_impl_k_uptime_ticks();
   28e58:	f028 fb53 	bl	51502 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   28e5c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   28e60:	fba0 bc04 	umull	fp, ip, r0, r4
   28e64:	fb04 cc01 	mla	ip, r4, r1, ip
   28e68:	ea4f 32db 	mov.w	r2, fp, lsr #15
    activity_last_uptime = k_uptime_get();
   28e6c:	4b07      	ldr	r3, [pc, #28]	; (28e8c <activity_init+0x38>)
   28e6e:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
   28e72:	601a      	str	r2, [r3, #0]
   28e74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   28e78:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   28e7a:	4805      	ldr	r0, [pc, #20]	; (28e90 <activity_init+0x3c>)
   28e7c:	e9cd 2300 	strd	r2, r3, [sp]
   28e80:	f020 fc56 	bl	49730 <z_impl_k_timer_start>

    k_timer_start(&activity_timer, K_SECONDS(1), K_SECONDS(1));
    return 0;
}
   28e84:	2000      	movs	r0, #0
   28e86:	b003      	add	sp, #12
   28e88:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   28e8c:	20003bb0 	.word	0x20003bb0
   28e90:	20000df0 	.word	0x20000df0

00028e94 <raise_event>:
int raise_event() {
   28e94:	b508      	push	{r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   28e96:	4b04      	ldr	r3, [pc, #16]	; (28ea8 <raise_event+0x14>)
   28e98:	7818      	ldrb	r0, [r3, #0]
   28e9a:	f000 fa91 	bl	293c0 <new_zmk_activity_state_changed>
}
   28e9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return ZMK_EVENT_RAISE(new_zmk_activity_state_changed(
   28ea2:	f020 bd98 	b.w	499d6 <zmk_event_manager_raise>
   28ea6:	bf00      	nop
   28ea8:	20006c62 	.word	0x20006c62

00028eac <set_state>:
    if (activity_state == state)
   28eac:	4b04      	ldr	r3, [pc, #16]	; (28ec0 <set_state+0x14>)
   28eae:	781a      	ldrb	r2, [r3, #0]
   28eb0:	4282      	cmp	r2, r0
   28eb2:	d002      	beq.n	28eba <set_state+0xe>
    activity_state = state;
   28eb4:	7018      	strb	r0, [r3, #0]
    return raise_event();
   28eb6:	f7ff bfed 	b.w	28e94 <raise_event>
}
   28eba:	2000      	movs	r0, #0
   28ebc:	4770      	bx	lr
   28ebe:	bf00      	nop
   28ec0:	20006c62 	.word	0x20006c62

00028ec4 <activity_event_listener>:
int activity_event_listener(const zmk_event_t *eh) {
   28ec4:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
	return z_impl_k_uptime_ticks();
   28ec8:	f028 fb1b 	bl	51502 <z_impl_k_uptime_ticks>
   28ecc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   28ed0:	fba0 bc04 	umull	fp, ip, r0, r4
   28ed4:	fb04 cc01 	mla	ip, r4, r1, ip
   28ed8:	ea4f 32db 	mov.w	r2, fp, lsr #15
    activity_last_uptime = k_uptime_get();
   28edc:	4b04      	ldr	r3, [pc, #16]	; (28ef0 <activity_event_listener+0x2c>)
   28ede:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
   28ee2:	601a      	str	r2, [r3, #0]
    return set_state(ZMK_ACTIVITY_ACTIVE);
   28ee4:	2000      	movs	r0, #0
}
   28ee6:	e8bd 4818 	ldmia.w	sp!, {r3, r4, fp, lr}
    return set_state(ZMK_ACTIVITY_ACTIVE);
   28eea:	f7ff bfdf 	b.w	28eac <set_state>
   28eee:	bf00      	nop
   28ef0:	20003bb0 	.word	0x20003bb0

00028ef4 <activity_work_handler>:
void activity_work_handler(struct k_work *work) {
   28ef4:	b530      	push	{r4, r5, lr}
   28ef6:	b085      	sub	sp, #20
   28ef8:	f028 fb03 	bl	51502 <z_impl_k_uptime_ticks>
   28efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    int32_t inactive_time = current - activity_last_uptime;
   28f00:	4a16      	ldr	r2, [pc, #88]	; (28f5c <activity_work_handler+0x68>)
   28f02:	fba0 4503 	umull	r4, r5, r0, r3
   28f06:	fb03 5501 	mla	r5, r3, r1, r5
   28f0a:	6812      	ldr	r2, [r2, #0]
   28f0c:	0be3      	lsrs	r3, r4, #15
   28f0e:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
   28f12:	1a9b      	subs	r3, r3, r2
    if (inactive_time > MAX_SLEEP_MS && !is_usb_power_present()) {
   28f14:	4a12      	ldr	r2, [pc, #72]	; (28f60 <activity_work_handler+0x6c>)
   28f16:	4293      	cmp	r3, r2
   28f18:	dd1a      	ble.n	28f50 <activity_work_handler+0x5c>
};

enum usb_dc_status_code zmk_usb_get_status();
enum zmk_usb_conn_state zmk_usb_get_conn_state();

static inline bool zmk_usb_is_powered() { return zmk_usb_get_conn_state() != ZMK_USB_CONN_NONE; }
   28f1a:	f001 fa43 	bl	2a3a4 <zmk_usb_get_conn_state>
   28f1e:	4604      	mov	r4, r0
   28f20:	b128      	cbz	r0, 28f2e <activity_work_handler+0x3a>
        set_state(ZMK_ACTIVITY_IDLE);
   28f22:	2001      	movs	r0, #1
}
   28f24:	b005      	add	sp, #20
   28f26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        set_state(ZMK_ACTIVITY_IDLE);
   28f2a:	f7ff bfbf 	b.w	28eac <set_state>
        set_state(ZMK_ACTIVITY_SLEEP);
   28f2e:	2002      	movs	r0, #2
   28f30:	f7ff ffbc 	bl	28eac <set_state>
        pm_power_state_set((struct pm_state_info){PM_STATE_SOFT_OFF, 0, 0});
   28f34:	ab01      	add	r3, sp, #4
   28f36:	e9c3 4401 	strd	r4, r4, [r3, #4]
   28f3a:	2206      	movs	r2, #6
   28f3c:	9401      	str	r4, [sp, #4]
   28f3e:	f88d 2004 	strb.w	r2, [sp, #4]
   28f42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
}
   28f46:	b005      	add	sp, #20
   28f48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        pm_power_state_set((struct pm_state_info){PM_STATE_SOFT_OFF, 0, 0});
   28f4c:	f023 b9ef 	b.w	4c32e <pm_power_state_set>
        if (inactive_time > MAX_IDLE_MS) {
   28f50:	f247 5230 	movw	r2, #30000	; 0x7530
   28f54:	4293      	cmp	r3, r2
   28f56:	dce4      	bgt.n	28f22 <activity_work_handler+0x2e>
}
   28f58:	b005      	add	sp, #20
   28f5a:	bd30      	pop	{r4, r5, pc}
   28f5c:	20003bb0 	.word	0x20003bb0
   28f60:	000dbba0 	.word	0x000dbba0

00028f64 <zmk_kscan_process_msgq>:

    k_msgq_put(&zmk_kscan_msgq, &ev, K_NO_WAIT);
    k_work_submit(&msg_processor.work);
}

void zmk_kscan_process_msgq(struct k_work *item) {
   28f64:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   28f68:	4d1a      	ldr	r5, [pc, #104]	; (28fd4 <zmk_kscan_process_msgq+0x70>)
   28f6a:	b08c      	sub	sp, #48	; 0x30
   28f6c:	2200      	movs	r2, #0
   28f6e:	2300      	movs	r3, #0
   28f70:	a903      	add	r1, sp, #12
   28f72:	4628      	mov	r0, r5
   28f74:	f01f fb50 	bl	48618 <z_impl_k_msgq_get>
    struct zmk_kscan_event ev;

    while (k_msgq_get(&zmk_kscan_msgq, &ev, K_NO_WAIT) == 0) {
   28f78:	b110      	cbz	r0, 28f80 <zmk_kscan_process_msgq+0x1c>
            (struct zmk_position_state_changed){.source = ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL,
                                                .state = pressed,
                                                .position = position,
                                                .timestamp = k_uptime_get()}));
    }
}
   28f7a:	b00c      	add	sp, #48	; 0x30
   28f7c:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   28f80:	9c05      	ldr	r4, [sp, #20]
        uint32_t position = zmk_matrix_transform_row_column_to_position(ev.row, ev.column);
   28f82:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
   28f86:	f000 f85d 	bl	29044 <zmk_matrix_transform_row_column_to_position>
        bool pressed = (ev.state == ZMK_KSCAN_EVENT_STATE_PRESSED);
   28f8a:	fab4 f484 	clz	r4, r4
   28f8e:	0964      	lsrs	r4, r4, #5
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(
   28f90:	23ff      	movs	r3, #255	; 0xff
   28f92:	f88d 3018 	strb.w	r3, [sp, #24]
   28f96:	9007      	str	r0, [sp, #28]
   28f98:	f88d 4020 	strb.w	r4, [sp, #32]
	return z_impl_k_uptime_ticks();
   28f9c:	f028 fab1 	bl	51502 <z_impl_k_uptime_ticks>
   28fa0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   28fa4:	fba0 bc04 	umull	fp, ip, r0, r4
   28fa8:	fb04 cc01 	mla	ip, r4, r1, ip
   28fac:	ea4f 32db 	mov.w	r2, fp, lsr #15
   28fb0:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
   28fb4:	ea4f 33dc 	mov.w	r3, ip, lsr #15
   28fb8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   28fbc:	ab0c      	add	r3, sp, #48	; 0x30
   28fbe:	e913 0003 	ldmdb	r3, {r0, r1}
   28fc2:	e88d 0003 	stmia.w	sp, {r0, r1}
   28fc6:	ab06      	add	r3, sp, #24
   28fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28fca:	f000 fa05 	bl	293d8 <new_zmk_position_state_changed>
   28fce:	f020 fd02 	bl	499d6 <zmk_event_manager_raise>
   28fd2:	e7cb      	b.n	28f6c <zmk_kscan_process_msgq+0x8>
   28fd4:	20000f9c 	.word	0x20000f9c

00028fd8 <zmk_kscan_callback>:
                               bool pressed) {
   28fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   28fda:	f083 0301 	eor.w	r3, r3, #1
    struct zmk_kscan_event ev = {
   28fde:	e9cd 1201 	strd	r1, r2, [sp, #4]
        .state = (pressed ? ZMK_KSCAN_EVENT_STATE_PRESSED : ZMK_KSCAN_EVENT_STATE_RELEASED)};
   28fe2:	9303      	str	r3, [sp, #12]
	return z_impl_k_msgq_put(msgq, data, timeout);
   28fe4:	2200      	movs	r2, #0
   28fe6:	2300      	movs	r3, #0
   28fe8:	a901      	add	r1, sp, #4
   28fea:	4804      	ldr	r0, [pc, #16]	; (28ffc <zmk_kscan_callback+0x24>)
   28fec:	f01f fabe 	bl	4856c <z_impl_k_msgq_put>
    k_work_submit(&msg_processor.work);
   28ff0:	4803      	ldr	r0, [pc, #12]	; (29000 <zmk_kscan_callback+0x28>)
   28ff2:	f01f fdcd 	bl	48b90 <k_work_submit>
}
   28ff6:	b005      	add	sp, #20
   28ff8:	f85d fb04 	ldr.w	pc, [sp], #4
   28ffc:	20000f9c 	.word	0x20000f9c
   29000:	20003bb4 	.word	0x20003bb4

00029004 <zmk_kscan_init>:

int zmk_kscan_init(char *name) {
   29004:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   29006:	f01f f885 	bl	48114 <z_impl_device_get_binding>
    const struct device *dev = device_get_binding(name);
    if (dev == NULL) {
   2900a:	4604      	mov	r4, r0
   2900c:	b178      	cbz	r0, 2902e <zmk_kscan_init+0x2a>
        LOG_ERR("Failed to get the KSCAN device");
        return -EINVAL;
    }

    k_work_init(&msg_processor.work, zmk_kscan_process_msgq);
   2900e:	490a      	ldr	r1, [pc, #40]	; (29038 <zmk_kscan_init+0x34>)
   29010:	480a      	ldr	r0, [pc, #40]	; (2903c <zmk_kscan_init+0x38>)
   29012:	f028 f8ad 	bl	51170 <k_work_init>
					kscan_callback_t callback)
{
	const struct kscan_driver_api *api =
				(struct kscan_driver_api *)dev->api;

	return api->config(dev, callback);
   29016:	68a3      	ldr	r3, [r4, #8]
   29018:	4909      	ldr	r1, [pc, #36]	; (29040 <zmk_kscan_init+0x3c>)
   2901a:	681b      	ldr	r3, [r3, #0]
   2901c:	4620      	mov	r0, r4
   2901e:	4798      	blx	r3
static inline int z_impl_kscan_enable_callback(const struct device *dev)
{
	const struct kscan_driver_api *api =
			(const struct kscan_driver_api *)dev->api;

	if (api->enable_callback == NULL) {
   29020:	68a3      	ldr	r3, [r4, #8]
   29022:	689b      	ldr	r3, [r3, #8]
   29024:	b133      	cbz	r3, 29034 <zmk_kscan_init+0x30>
		return -ENOSYS;
	}

	return api->enable_callback(dev);
   29026:	4620      	mov	r0, r4
   29028:	4798      	blx	r3

    kscan_config(dev, zmk_kscan_callback);
    kscan_enable_callback(dev);

    return 0;
   2902a:	2000      	movs	r0, #0
}
   2902c:	bd10      	pop	{r4, pc}
        return -EINVAL;
   2902e:	f06f 0015 	mvn.w	r0, #21
   29032:	e7fb      	b.n	2902c <zmk_kscan_init+0x28>
    return 0;
   29034:	4618      	mov	r0, r3
   29036:	e7f9      	b.n	2902c <zmk_kscan_init+0x28>
   29038:	00028f65 	.word	0x00028f65
   2903c:	20003bb4 	.word	0x20003bb4
   29040:	00028fd9 	.word	0x00028fd9

00029044 <zmk_matrix_transform_row_column_to_position>:
#endif

    matrix_index = (row * ZMK_MATRIX_COLS) + column;

#ifdef ZMK_KEYMAP_TRANSFORM_NODE
    return transform[matrix_index];
   29044:	230c      	movs	r3, #12
   29046:	fb03 1100 	mla	r1, r3, r0, r1
#else
    return matrix_index;
#endif /* ZMK_KEYMAP_TRANSFORM_NODE */
};
   2904a:	4b02      	ldr	r3, [pc, #8]	; (29054 <zmk_matrix_transform_row_column_to_position+0x10>)
   2904c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   29050:	4770      	bx	lr
   29052:	bf00      	nop
   29054:	00051e7c 	.word	0x00051e7c

00029058 <zmk_hid_register_mod>:
#define GET_MODIFIERS (keyboard_report.body.modifiers)

zmk_mod_flags_t zmk_hid_get_explicit_mods() { return explicit_modifiers; }

int zmk_hid_register_mod(zmk_mod_t modifier) {
    explicit_modifier_counts[modifier]++;
   29058:	4a0a      	ldr	r2, [pc, #40]	; (29084 <zmk_hid_register_mod+0x2c>)
   2905a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   2905e:	3301      	adds	r3, #1
   29060:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    LOG_DBG("Modifier %d count %d", modifier, explicit_modifier_counts[modifier]);
    WRITE_BIT(explicit_modifiers, modifier, true);
   29064:	4a08      	ldr	r2, [pc, #32]	; (29088 <zmk_hid_register_mod+0x30>)
   29066:	2301      	movs	r3, #1
   29068:	fa03 f000 	lsl.w	r0, r3, r0
   2906c:	7813      	ldrb	r3, [r2, #0]
   2906e:	4318      	orrs	r0, r3
    zmk_mod_flags_t current = GET_MODIFIERS;
   29070:	4b06      	ldr	r3, [pc, #24]	; (2908c <zmk_hid_register_mod+0x34>)
    WRITE_BIT(explicit_modifiers, modifier, true);
   29072:	b2c0      	uxtb	r0, r0
   29074:	7010      	strb	r0, [r2, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
   29076:	785a      	ldrb	r2, [r3, #1]
    SET_MODIFIERS(explicit_modifiers);
   29078:	7058      	strb	r0, [r3, #1]
    return current == GET_MODIFIERS ? 0 : 1;
}
   2907a:	1a80      	subs	r0, r0, r2
   2907c:	bf18      	it	ne
   2907e:	2001      	movne	r0, #1
   29080:	4770      	bx	lr
   29082:	bf00      	nop
   29084:	20003bc4 	.word	0x20003bc4
   29088:	20006c63 	.word	0x20006c63
   2908c:	20000d89 	.word	0x20000d89

00029090 <zmk_hid_unregister_mod>:

int zmk_hid_unregister_mod(zmk_mod_t modifier) {
    if (explicit_modifier_counts[modifier] <= 0) {
   29090:	4a0d      	ldr	r2, [pc, #52]	; (290c8 <zmk_hid_unregister_mod+0x38>)
   29092:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   29096:	2b00      	cmp	r3, #0
   29098:	dd12      	ble.n	290c0 <zmk_hid_unregister_mod+0x30>
        LOG_ERR("Tried to unregister modifier %d too often", modifier);
        return -EINVAL;
    }
    explicit_modifier_counts[modifier]--;
   2909a:	3b01      	subs	r3, #1
   2909c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    LOG_DBG("Modifier %d count: %d", modifier, explicit_modifier_counts[modifier]);
    if (explicit_modifier_counts[modifier] == 0) {
   290a0:	4a0a      	ldr	r2, [pc, #40]	; (290cc <zmk_hid_unregister_mod+0x3c>)
   290a2:	b92b      	cbnz	r3, 290b0 <zmk_hid_unregister_mod+0x20>
        LOG_DBG("Modifier %d released", modifier);
        WRITE_BIT(explicit_modifiers, modifier, false);
   290a4:	2301      	movs	r3, #1
   290a6:	4083      	lsls	r3, r0
   290a8:	7810      	ldrb	r0, [r2, #0]
   290aa:	ea20 0003 	bic.w	r0, r0, r3
   290ae:	7010      	strb	r0, [r2, #0]
    }
    zmk_mod_flags_t current = GET_MODIFIERS;
   290b0:	4b07      	ldr	r3, [pc, #28]	; (290d0 <zmk_hid_unregister_mod+0x40>)
    SET_MODIFIERS(explicit_modifiers);
   290b2:	7810      	ldrb	r0, [r2, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
   290b4:	7859      	ldrb	r1, [r3, #1]
    SET_MODIFIERS(explicit_modifiers);
   290b6:	7058      	strb	r0, [r3, #1]
    return current == GET_MODIFIERS ? 0 : 1;
   290b8:	1a40      	subs	r0, r0, r1
   290ba:	bf18      	it	ne
   290bc:	2001      	movne	r0, #1
   290be:	4770      	bx	lr
        return -EINVAL;
   290c0:	f06f 0015 	mvn.w	r0, #21
}
   290c4:	4770      	bx	lr
   290c6:	bf00      	nop
   290c8:	20003bc4 	.word	0x20003bc4
   290cc:	20006c63 	.word	0x20006c63
   290d0:	20000d89 	.word	0x20000d89

000290d4 <zmk_hid_implicit_modifiers_press>:
        }                                                                                          \
    }

int zmk_hid_implicit_modifiers_press(zmk_mod_flags_t implicit_modifiers) {
    zmk_mod_flags_t current = GET_MODIFIERS;
    SET_MODIFIERS(explicit_modifiers | implicit_modifiers);
   290d4:	4b04      	ldr	r3, [pc, #16]	; (290e8 <zmk_hid_implicit_modifiers_press+0x14>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   290d6:	4a05      	ldr	r2, [pc, #20]	; (290ec <zmk_hid_implicit_modifiers_press+0x18>)
    SET_MODIFIERS(explicit_modifiers | implicit_modifiers);
   290d8:	781b      	ldrb	r3, [r3, #0]
    zmk_mod_flags_t current = GET_MODIFIERS;
   290da:	7851      	ldrb	r1, [r2, #1]
    SET_MODIFIERS(explicit_modifiers | implicit_modifiers);
   290dc:	4318      	orrs	r0, r3
   290de:	7050      	strb	r0, [r2, #1]
    return current == GET_MODIFIERS ? 0 : 1;
}
   290e0:	1a40      	subs	r0, r0, r1
   290e2:	bf18      	it	ne
   290e4:	2001      	movne	r0, #1
   290e6:	4770      	bx	lr
   290e8:	20006c63 	.word	0x20006c63
   290ec:	20000d89 	.word	0x20000d89

000290f0 <zmk_hid_implicit_modifiers_release>:

int zmk_hid_implicit_modifiers_release() {
    zmk_mod_flags_t current = GET_MODIFIERS;
   290f0:	4a04      	ldr	r2, [pc, #16]	; (29104 <zmk_hid_implicit_modifiers_release+0x14>)
    SET_MODIFIERS(explicit_modifiers);
   290f2:	4b05      	ldr	r3, [pc, #20]	; (29108 <zmk_hid_implicit_modifiers_release+0x18>)
    zmk_mod_flags_t current = GET_MODIFIERS;
   290f4:	7850      	ldrb	r0, [r2, #1]
    SET_MODIFIERS(explicit_modifiers);
   290f6:	781b      	ldrb	r3, [r3, #0]
   290f8:	7053      	strb	r3, [r2, #1]
    return current == GET_MODIFIERS ? 0 : 1;
}
   290fa:	1a18      	subs	r0, r3, r0
   290fc:	bf18      	it	ne
   290fe:	2001      	movne	r0, #1
   29100:	4770      	bx	lr
   29102:	bf00      	nop
   29104:	20000d89 	.word	0x20000d89
   29108:	20006c63 	.word	0x20006c63

0002910c <zmk_hid_keyboard_press>:

int zmk_hid_keyboard_press(zmk_key_t code) {
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   2910c:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
   29110:	2b07      	cmp	r3, #7
   29112:	d803      	bhi.n	2911c <zmk_hid_keyboard_press+0x10>
        return zmk_hid_register_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   29114:	3020      	adds	r0, #32
   29116:	b2c0      	uxtb	r0, r0
   29118:	f7ff bf9e 	b.w	29058 <zmk_hid_register_mod>
   2911c:	4b06      	ldr	r3, [pc, #24]	; (29138 <zmk_hid_keyboard_press+0x2c>)
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   2911e:	2206      	movs	r2, #6
    TOGGLE_KEYBOARD(0U, usage);
   29120:	f813 1b01 	ldrb.w	r1, [r3], #1
   29124:	b119      	cbz	r1, 2912e <zmk_hid_keyboard_press+0x22>
   29126:	3a01      	subs	r2, #1
   29128:	d1fa      	bne.n	29120 <zmk_hid_keyboard_press+0x14>
    }
    select_keyboard_usage(code);
    return 0;
};
   2912a:	2000      	movs	r0, #0
   2912c:	4770      	bx	lr
    TOGGLE_KEYBOARD(0U, usage);
   2912e:	f803 0c01 	strb.w	r0, [r3, #-1]
   29132:	2800      	cmp	r0, #0
   29134:	d0f7      	beq.n	29126 <zmk_hid_keyboard_press+0x1a>
   29136:	e7f8      	b.n	2912a <zmk_hid_keyboard_press+0x1e>
   29138:	20000d8c 	.word	0x20000d8c

0002913c <zmk_hid_keyboard_release>:

int zmk_hid_keyboard_release(zmk_key_t code) {
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   2913c:	f1a0 03e0 	sub.w	r3, r0, #224	; 0xe0
   29140:	2b07      	cmp	r3, #7
int zmk_hid_keyboard_release(zmk_key_t code) {
   29142:	b410      	push	{r4}
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   29144:	d804      	bhi.n	29150 <zmk_hid_keyboard_release+0x14>
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   29146:	3020      	adds	r0, #32
   29148:	b2c0      	uxtb	r0, r0
    }
    deselect_keyboard_usage(code);
    return 0;
};
   2914a:	bc10      	pop	{r4}
        return zmk_hid_unregister_mod(code - HID_USAGE_KEY_KEYBOARD_LEFTCONTROL);
   2914c:	f7ff bfa0 	b.w	29090 <zmk_hid_unregister_mod>
   29150:	4a06      	ldr	r2, [pc, #24]	; (2916c <zmk_hid_keyboard_release+0x30>)
    if (code >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL && code <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI) {
   29152:	2306      	movs	r3, #6
    TOGGLE_KEYBOARD(usage, 0U);
   29154:	2100      	movs	r1, #0
   29156:	f812 4b01 	ldrb.w	r4, [r2], #1
   2915a:	42a0      	cmp	r0, r4
   2915c:	bf08      	it	eq
   2915e:	f802 1c01 	strbeq.w	r1, [r2, #-1]
   29162:	3b01      	subs	r3, #1
   29164:	d1f7      	bne.n	29156 <zmk_hid_keyboard_release+0x1a>
};
   29166:	4618      	mov	r0, r3
   29168:	bc10      	pop	{r4}
   2916a:	4770      	bx	lr
   2916c:	20000d8c 	.word	0x20000d8c

00029170 <zmk_hid_keyboard_clear>:

void zmk_hid_keyboard_clear() { memset(&keyboard_report.body, 0, sizeof(keyboard_report.body)); }
   29170:	2208      	movs	r2, #8
   29172:	2100      	movs	r1, #0
   29174:	4801      	ldr	r0, [pc, #4]	; (2917c <zmk_hid_keyboard_clear+0xc>)
   29176:	f023 b8c4 	b.w	4c302 <memset>
   2917a:	bf00      	nop
   2917c:	20000d8a 	.word	0x20000d8a

00029180 <zmk_hid_consumer_press>:

int zmk_hid_consumer_press(zmk_key_t code) {
   29180:	b510      	push	{r4, lr}
    TOGGLE_CONSUMER(0U, code);
   29182:	4908      	ldr	r1, [pc, #32]	; (291a4 <zmk_hid_consumer_press+0x24>)
   29184:	2300      	movs	r3, #0
   29186:	eb01 0243 	add.w	r2, r1, r3, lsl #1
   2918a:	f8b2 4001 	ldrh.w	r4, [r2, #1]
   2918e:	b124      	cbz	r4, 2919a <zmk_hid_consumer_press+0x1a>
   29190:	3301      	adds	r3, #1
   29192:	2b06      	cmp	r3, #6
   29194:	d1f7      	bne.n	29186 <zmk_hid_consumer_press+0x6>
    return 0;
};
   29196:	2000      	movs	r0, #0
   29198:	bd10      	pop	{r4, pc}
    TOGGLE_CONSUMER(0U, code);
   2919a:	f8a2 0001 	strh.w	r0, [r2, #1]
   2919e:	2800      	cmp	r0, #0
   291a0:	d0f6      	beq.n	29190 <zmk_hid_consumer_press+0x10>
   291a2:	e7f8      	b.n	29196 <zmk_hid_consumer_press+0x16>
   291a4:	20000d7c 	.word	0x20000d7c

000291a8 <zmk_hid_consumer_release>:

int zmk_hid_consumer_release(zmk_key_t code) {
   291a8:	b530      	push	{r4, r5, lr}
    TOGGLE_CONSUMER(code, 0U);
   291aa:	2300      	movs	r3, #0
   291ac:	4c07      	ldr	r4, [pc, #28]	; (291cc <zmk_hid_consumer_release+0x24>)
   291ae:	4619      	mov	r1, r3
   291b0:	eb04 0243 	add.w	r2, r4, r3, lsl #1
   291b4:	3301      	adds	r3, #1
   291b6:	f8b2 5001 	ldrh.w	r5, [r2, #1]
   291ba:	4285      	cmp	r5, r0
   291bc:	bf04      	itt	eq
   291be:	7051      	strbeq	r1, [r2, #1]
   291c0:	7091      	strbeq	r1, [r2, #2]
   291c2:	2b06      	cmp	r3, #6
   291c4:	d1f4      	bne.n	291b0 <zmk_hid_consumer_release+0x8>
    return 0;
};
   291c6:	2000      	movs	r0, #0
   291c8:	bd30      	pop	{r4, r5, pc}
   291ca:	bf00      	nop
   291cc:	20000d7c 	.word	0x20000d7c

000291d0 <zmk_hid_consumer_clear>:

void zmk_hid_consumer_clear() { memset(&consumer_report.body, 0, sizeof(consumer_report.body)); }
   291d0:	220c      	movs	r2, #12
   291d2:	2100      	movs	r1, #0
   291d4:	4801      	ldr	r0, [pc, #4]	; (291dc <zmk_hid_consumer_clear+0xc>)
   291d6:	f023 b894 	b.w	4c302 <memset>
   291da:	bf00      	nop
   291dc:	20000d7d 	.word	0x20000d7d

000291e0 <zmk_hid_get_keyboard_report>:

struct zmk_hid_keyboard_report *zmk_hid_get_keyboard_report() {
    return &keyboard_report;
}
   291e0:	4800      	ldr	r0, [pc, #0]	; (291e4 <zmk_hid_get_keyboard_report+0x4>)
   291e2:	4770      	bx	lr
   291e4:	20000d89 	.word	0x20000d89

000291e8 <zmk_hid_get_consumer_report>:

struct zmk_hid_consumer_report *zmk_hid_get_consumer_report() {
    return &consumer_report;
}
   291e8:	4800      	ldr	r0, [pc, #0]	; (291ec <zmk_hid_get_consumer_report+0x4>)
   291ea:	4770      	bx	lr
   291ec:	20000d7c 	.word	0x20000d7c

000291f0 <zmk_event_manager_handle_from>:
extern struct zmk_event_type *__event_type_end[];

extern struct zmk_event_subscription __event_subscriptions_start[];
extern struct zmk_event_subscription __event_subscriptions_end[];

int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   291f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret = 0;
    uint8_t len = __event_subscriptions_end - __event_subscriptions_start;
   291f4:	4d14      	ldr	r5, [pc, #80]	; (29248 <zmk_event_manager_handle_from+0x58>)
   291f6:	4e15      	ldr	r6, [pc, #84]	; (2924c <zmk_event_manager_handle_from+0x5c>)
   291f8:	1b76      	subs	r6, r6, r5
int zmk_event_manager_handle_from(zmk_event_t *event, uint8_t start_index) {
   291fa:	4680      	mov	r8, r0
    for (int i = start_index; i < len; i++) {
   291fc:	460f      	mov	r7, r1
   291fe:	eb05 05c1 	add.w	r5, r5, r1, lsl #3
   29202:	f3c6 06c7 	ubfx	r6, r6, #3, #8
   29206:	42b7      	cmp	r7, r6
   29208:	db04      	blt.n	29214 <zmk_event_manager_handle_from+0x24>
        switch (ret) {
        case ZMK_EV_EVENT_BUBBLE:
            continue;
        case ZMK_EV_EVENT_HANDLED:
            LOG_DBG("Listener handled the event");
            ret = 0;
   2920a:	2400      	movs	r4, #0
            goto release;
        }
    }

release:
    k_free(event);
   2920c:	4640      	mov	r0, r8
   2920e:	f028 fb0d 	bl	5182c <k_free>
    return ret;
   29212:	e015      	b.n	29240 <zmk_event_manager_handle_from+0x50>
        if (ev_sub->event_type != event->event) {
   29214:	682a      	ldr	r2, [r5, #0]
   29216:	f8d8 3000 	ldr.w	r3, [r8]
   2921a:	429a      	cmp	r2, r3
   2921c:	d10a      	bne.n	29234 <zmk_event_manager_handle_from+0x44>
        ret = ev_sub->listener->callback(event);
   2921e:	686b      	ldr	r3, [r5, #4]
   29220:	4640      	mov	r0, r8
   29222:	681b      	ldr	r3, [r3, #0]
   29224:	4798      	blx	r3
        switch (ret) {
   29226:	2801      	cmp	r0, #1
        ret = ev_sub->listener->callback(event);
   29228:	4604      	mov	r4, r0
        switch (ret) {
   2922a:	d0ee      	beq.n	2920a <zmk_event_manager_handle_from+0x1a>
   2922c:	2802      	cmp	r0, #2
   2922e:	d004      	beq.n	2923a <zmk_event_manager_handle_from+0x4a>
   29230:	2800      	cmp	r0, #0
   29232:	d1eb      	bne.n	2920c <zmk_event_manager_handle_from+0x1c>
    for (int i = start_index; i < len; i++) {
   29234:	3701      	adds	r7, #1
   29236:	3508      	adds	r5, #8
   29238:	e7e5      	b.n	29206 <zmk_event_manager_handle_from+0x16>
            event->last_listener_index = i;
   2923a:	f888 7004 	strb.w	r7, [r8, #4]
            return 0;
   2923e:	2400      	movs	r4, #0
}
   29240:	4620      	mov	r0, r4
   29242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29246:	bf00      	nop
   29248:	000545b8 	.word	0x000545b8
   2924c:	000545e8 	.word	0x000545e8

00029250 <ext_power_generic_init>:

struct settings_handler ext_power_conf = {.name = "ext_power/state",
                                          .h_set = ext_power_settings_set};
#endif

static int ext_power_generic_init(const struct device *dev) {
   29250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct ext_power_generic_data *data = dev->data;
    const struct ext_power_generic_config *config = dev->config;
   29254:	6845      	ldr	r5, [r0, #4]
    struct ext_power_generic_data *data = dev->data;
   29256:	6907      	ldr	r7, [r0, #16]
static int ext_power_generic_init(const struct device *dev) {
   29258:	4606      	mov	r6, r0

    data->gpio = device_get_binding(config->label);
   2925a:	6828      	ldr	r0, [r5, #0]
   2925c:	f01e ff5a 	bl	48114 <z_impl_device_get_binding>
   29260:	6038      	str	r0, [r7, #0]
    if (data->gpio == NULL) {
   29262:	2800      	cmp	r0, #0
   29264:	d049      	beq.n	292fa <ext_power_generic_init+0xaa>
        LOG_ERR("Failed to get ext-power control device");
        return -EINVAL;
    }

    if (gpio_pin_configure(data->gpio, config->pin, config->flags | GPIO_OUTPUT)) {
   29266:	f895 e005 	ldrb.w	lr, [r5, #5]
   2926a:	7929      	ldrb	r1, [r5, #4]
   2926c:	f44e 7200 	orr.w	r2, lr, #512	; 0x200
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   29270:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   29274:	f8d0 8008 	ldr.w	r8, [r0, #8]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   29278:	2301      	movs	r3, #1
   2927a:	fa03 f401 	lsl.w	r4, r3, r1
   2927e:	f8dc 3000 	ldr.w	r3, [ip]
   29282:	f01e 0f01 	tst.w	lr, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   29286:	bf14      	ite	ne
   29288:	4323      	orrne	r3, r4
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2928a:	43a3      	biceq	r3, r4
   2928c:	f8cc 3000 	str.w	r3, [ip]
	}

	return api->pin_configure(port, pin, flags);
   29290:	f8d8 3000 	ldr.w	r3, [r8]
   29294:	4798      	blx	r3
   29296:	bb98      	cbnz	r0, 29300 <ext_power_generic_init+0xb0>
        LOG_ERR("Failed to configure ext-power control pin");
        return -EIO;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   29298:	f002 ffa0 	bl	2c1dc <settings_subsys_init>

    int err = settings_register(&ext_power_conf);
   2929c:	481a      	ldr	r0, [pc, #104]	; (29308 <ext_power_generic_init+0xb8>)
   2929e:	f002 fedf 	bl	2c060 <settings_register>
    if (err) {
   292a2:	4604      	mov	r4, r0
   292a4:	bb30      	cbnz	r0, 292f4 <ext_power_generic_init+0xa4>
        LOG_ERR("Failed to register the ext_power settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&ext_power_save_work, ext_power_save_state_work);
   292a6:	4919      	ldr	r1, [pc, #100]	; (2930c <ext_power_generic_init+0xbc>)
   292a8:	4819      	ldr	r0, [pc, #100]	; (29310 <ext_power_generic_init+0xc0>)
   292aa:	f027 ff86 	bl	511ba <k_work_init_delayable>

    // Set default value (on) if settings isn't set
    settings_load_subtree("ext_power");
   292ae:	4819      	ldr	r0, [pc, #100]	; (29314 <ext_power_generic_init+0xc4>)
   292b0:	f002 fe80 	bl	2bfb4 <settings_load_subtree>
    if (!data->settings_init) {
   292b4:	797b      	ldrb	r3, [r7, #5]
   292b6:	b95b      	cbnz	r3, 292d0 <ext_power_generic_init+0x80>

        data->status = true;
   292b8:	2301      	movs	r3, #1
   292ba:	713b      	strb	r3, [r7, #4]
        k_work_schedule(&ext_power_save_work, K_NO_WAIT);
   292bc:	2200      	movs	r2, #0
   292be:	2300      	movs	r3, #0
   292c0:	4813      	ldr	r0, [pc, #76]	; (29310 <ext_power_generic_init+0xc0>)
   292c2:	f01f fccf 	bl	48c64 <k_work_schedule>
__syscall int ext_power_enable(const struct device *dev);

static inline int z_impl_ext_power_enable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->enable == NULL) {
   292c6:	68b3      	ldr	r3, [r6, #8]
   292c8:	681b      	ldr	r3, [r3, #0]
   292ca:	b10b      	cbz	r3, 292d0 <ext_power_generic_init+0x80>
        return -ENOTSUP;
    }

    return api->enable(dev);
   292cc:	4630      	mov	r0, r6
   292ce:	4798      	blx	r3
#else
    // Default to the ext_power being open when no settings
    ext_power_enable(dev);
#endif

    if (config->init_delay_ms) {
   292d0:	88e9      	ldrh	r1, [r5, #6]
   292d2:	b179      	cbz	r1, 292f4 <ext_power_generic_init+0xa4>
   292d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   292d8:	f240 36e7 	movw	r6, #999	; 0x3e7
   292dc:	2700      	movs	r7, #0
   292de:	fbe1 6700 	umlal	r6, r7, r1, r0
   292e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   292e6:	2300      	movs	r3, #0
   292e8:	4630      	mov	r0, r6
   292ea:	4639      	mov	r1, r7
   292ec:	f7fc ff08 	bl	26100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   292f0:	f01f ffc8 	bl	49284 <z_impl_k_sleep>
        k_msleep(config->init_delay_ms);
    }

    return 0;
}
   292f4:	4620      	mov	r0, r4
   292f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -EINVAL;
   292fa:	f06f 0415 	mvn.w	r4, #21
   292fe:	e7f9      	b.n	292f4 <ext_power_generic_init+0xa4>
        return -EIO;
   29300:	f06f 0404 	mvn.w	r4, #4
   29304:	e7f6      	b.n	292f4 <ext_power_generic_init+0xa4>
   29306:	bf00      	nop
   29308:	20000280 	.word	0x20000280
   2930c:	00029319 	.word	0x00029319
   29310:	20001260 	.word	0x20001260
   29314:	00053dd4 	.word	0x00053dd4

00029318 <ext_power_save_state_work>:
static void ext_power_save_state_work(struct k_work *work) {
   29318:	b530      	push	{r4, r5, lr}
   2931a:	b08b      	sub	sp, #44	; 0x2c
   2931c:	4c08      	ldr	r4, [pc, #32]	; (29340 <ext_power_save_state_work+0x28>)
   2931e:	4620      	mov	r0, r4
   29320:	f01e fef8 	bl	48114 <z_impl_device_get_binding>
    struct ext_power_generic_data *data = ext_power->data;
   29324:	6905      	ldr	r5, [r0, #16]
    snprintf(setting_path, 40, "ext_power/state/%s", DT_INST_LABEL(0));
   29326:	4a07      	ldr	r2, [pc, #28]	; (29344 <ext_power_save_state_work+0x2c>)
   29328:	4623      	mov	r3, r4
   2932a:	2128      	movs	r1, #40	; 0x28
   2932c:	4668      	mov	r0, sp
   2932e:	f003 fe89 	bl	2d044 <snprintf>
    settings_save_one(setting_path, &data->status, sizeof(data->status));
   29332:	2201      	movs	r2, #1
   29334:	1d29      	adds	r1, r5, #4
   29336:	4668      	mov	r0, sp
   29338:	f002 fe04 	bl	2bf44 <settings_save_one>
}
   2933c:	b00b      	add	sp, #44	; 0x2c
   2933e:	bd30      	pop	{r4, r5, pc}
   29340:	00053dde 	.word	0x00053dde
   29344:	00053de8 	.word	0x00053de8

00029348 <ext_power_save_state>:
int ext_power_save_state() {
   29348:	b508      	push	{r3, lr}
    int ret = k_work_reschedule(&ext_power_save_work, K_MSEC(CONFIG_ZMK_SETTINGS_SAVE_DEBOUNCE));
   2934a:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   2934e:	2300      	movs	r3, #0
   29350:	4802      	ldr	r0, [pc, #8]	; (2935c <ext_power_save_state+0x14>)
   29352:	f01f fcbb 	bl	48ccc <k_work_reschedule>
}
   29356:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2935a:	bd08      	pop	{r3, pc}
   2935c:	20001260 	.word	0x20001260

00029360 <ext_power_settings_set>:
                                  void *cb_arg) {
   29360:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29364:	460d      	mov	r5, r1
   29366:	4617      	mov	r7, r2
    if (settings_name_steq(name, DT_INST_LABEL(0), &next) && !next) {
   29368:	4912      	ldr	r1, [pc, #72]	; (293b4 <ext_power_settings_set+0x54>)
   2936a:	aa01      	add	r2, sp, #4
                                  void *cb_arg) {
   2936c:	4698      	mov	r8, r3
    if (settings_name_steq(name, DT_INST_LABEL(0), &next) && !next) {
   2936e:	f021 fcbf 	bl	4acf0 <settings_name_steq>
   29372:	b1c0      	cbz	r0, 293a6 <ext_power_settings_set+0x46>
   29374:	9e01      	ldr	r6, [sp, #4]
   29376:	b9b6      	cbnz	r6, 293a6 <ext_power_settings_set+0x46>
        if (len != sizeof(data->status)) {
   29378:	2d01      	cmp	r5, #1
   2937a:	d117      	bne.n	293ac <ext_power_settings_set+0x4c>
        rc = read_cb(cb_arg, &data->status, sizeof(data->status));
   2937c:	4c0e      	ldr	r4, [pc, #56]	; (293b8 <ext_power_settings_set+0x58>)
   2937e:	462a      	mov	r2, r5
   29380:	1d21      	adds	r1, r4, #4
   29382:	4640      	mov	r0, r8
   29384:	47b8      	blx	r7
        if (rc >= 0) {
   29386:	2800      	cmp	r0, #0
   29388:	db06      	blt.n	29398 <ext_power_settings_set+0x38>
            data->settings_init = true;
   2938a:	7165      	strb	r5, [r4, #5]
            if (data->status) {
   2938c:	7924      	ldrb	r4, [r4, #4]
                ext_power_generic_enable(ext_power);
   2938e:	480b      	ldr	r0, [pc, #44]	; (293bc <ext_power_settings_set+0x5c>)
            if (data->status) {
   29390:	b12c      	cbz	r4, 2939e <ext_power_settings_set+0x3e>
                ext_power_generic_enable(ext_power);
   29392:	f020 fb32 	bl	499fa <ext_power_generic_enable>
   29396:	4630      	mov	r0, r6
}
   29398:	b002      	add	sp, #8
   2939a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ext_power_generic_disable(ext_power);
   2939e:	f020 fb46 	bl	49a2e <ext_power_generic_disable>
   293a2:	4620      	mov	r0, r4
   293a4:	e7f8      	b.n	29398 <ext_power_settings_set+0x38>
    return -ENOENT;
   293a6:	f06f 0001 	mvn.w	r0, #1
   293aa:	e7f5      	b.n	29398 <ext_power_settings_set+0x38>
            return -EINVAL;
   293ac:	f06f 0015 	mvn.w	r0, #21
   293b0:	e7f2      	b.n	29398 <ext_power_settings_set+0x38>
   293b2:	bf00      	nop
   293b4:	00053dde 	.word	0x00053dde
   293b8:	20003be4 	.word	0x20003be4
   293bc:	00051a0c 	.word	0x00051a0c

000293c0 <new_zmk_activity_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/activity_state_changed.h>

   293c0:	b510      	push	{r4, lr}
   293c2:	4604      	mov	r4, r0
   293c4:	200c      	movs	r0, #12
   293c6:	f028 fa38 	bl	5183a <k_malloc>
   293ca:	4a02      	ldr	r2, [pc, #8]	; (293d4 <new_zmk_activity_state_changed+0x14>)
   293cc:	6002      	str	r2, [r0, #0]
   293ce:	7204      	strb	r4, [r0, #8]
   293d0:	bd10      	pop	{r4, pc}
   293d2:	bf00      	nop
   293d4:	00051fa0 	.word	0x00051fa0

000293d8 <new_zmk_position_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/position_state_changed.h>

   293d8:	b084      	sub	sp, #16
   293da:	b570      	push	{r4, r5, r6, lr}
   293dc:	ac04      	add	r4, sp, #16
   293de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   293e2:	2020      	movs	r0, #32
   293e4:	f028 fa29 	bl	5183a <k_malloc>
   293e8:	4604      	mov	r4, r0
   293ea:	4b08      	ldr	r3, [pc, #32]	; (2940c <new_zmk_position_state_changed+0x34>)
   293ec:	f844 3b08 	str.w	r3, [r4], #8
   293f0:	ad04      	add	r5, sp, #16
   293f2:	4606      	mov	r6, r0
   293f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   293f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   293f8:	e895 0003 	ldmia.w	r5, {r0, r1}
   293fc:	e884 0003 	stmia.w	r4, {r0, r1}
   29400:	4630      	mov	r0, r6
   29402:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29406:	b004      	add	sp, #16
   29408:	4770      	bx	lr
   2940a:	bf00      	nop
   2940c:	00051fa4 	.word	0x00051fa4

00029410 <as_zmk_position_state_changed>:
   29410:	6802      	ldr	r2, [r0, #0]
   29412:	4b03      	ldr	r3, [pc, #12]	; (29420 <as_zmk_position_state_changed+0x10>)
   29414:	429a      	cmp	r2, r3
   29416:	bf0c      	ite	eq
   29418:	3008      	addeq	r0, #8
   2941a:	2000      	movne	r0, #0
   2941c:	4770      	bx	lr
   2941e:	bf00      	nop
   29420:	00051fa4 	.word	0x00051fa4

00029424 <new_zmk_layer_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/layer_state_changed.h>

   29424:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   29426:	466c      	mov	r4, sp
   29428:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2942c:	2018      	movs	r0, #24
   2942e:	f028 fa04 	bl	5183a <k_malloc>
   29432:	4605      	mov	r5, r0
   29434:	4b05      	ldr	r3, [pc, #20]	; (2944c <new_zmk_layer_state_changed+0x28>)
   29436:	f845 3b08 	str.w	r3, [r5], #8
   2943a:	4606      	mov	r6, r0
   2943c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29440:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   29444:	4630      	mov	r0, r6
   29446:	b004      	add	sp, #16
   29448:	bd70      	pop	{r4, r5, r6, pc}
   2944a:	bf00      	nop
   2944c:	00051fa8 	.word	0x00051fa8

00029450 <new_zmk_keycode_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/keycode_state_changed.h>

ZMK_EVENT_IMPL(zmk_keycode_state_changed);
   29450:	b084      	sub	sp, #16
   29452:	b570      	push	{r4, r5, r6, lr}
   29454:	ac04      	add	r4, sp, #16
   29456:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2945a:	2020      	movs	r0, #32
   2945c:	f028 f9ed 	bl	5183a <k_malloc>
   29460:	4604      	mov	r4, r0
   29462:	4b08      	ldr	r3, [pc, #32]	; (29484 <new_zmk_keycode_state_changed+0x34>)
   29464:	f844 3b08 	str.w	r3, [r4], #8
   29468:	ad04      	add	r5, sp, #16
   2946a:	4606      	mov	r6, r0
   2946c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2946e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   29470:	e895 0003 	ldmia.w	r5, {r0, r1}
   29474:	e884 0003 	stmia.w	r4, {r0, r1}
   29478:	4630      	mov	r0, r6
   2947a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2947e:	b004      	add	sp, #16
   29480:	4770      	bx	lr
   29482:	bf00      	nop
   29484:	00051fac 	.word	0x00051fac

00029488 <as_zmk_keycode_state_changed>:
   29488:	6802      	ldr	r2, [r0, #0]
   2948a:	4b03      	ldr	r3, [pc, #12]	; (29498 <as_zmk_keycode_state_changed+0x10>)
   2948c:	429a      	cmp	r2, r3
   2948e:	bf0c      	ite	eq
   29490:	3008      	addeq	r0, #8
   29492:	2000      	movne	r0, #0
   29494:	4770      	bx	lr
   29496:	bf00      	nop
   29498:	00051fac 	.word	0x00051fac

0002949c <new_zmk_endpoint_selection_changed>:
 */

#include <kernel.h>
#include <zmk/events/endpoint_selection_changed.h>

ZMK_EVENT_IMPL(zmk_endpoint_selection_changed);
   2949c:	b510      	push	{r4, lr}
   2949e:	4604      	mov	r4, r0
   294a0:	200c      	movs	r0, #12
   294a2:	f028 f9ca 	bl	5183a <k_malloc>
   294a6:	4a02      	ldr	r2, [pc, #8]	; (294b0 <new_zmk_endpoint_selection_changed+0x14>)
   294a8:	6002      	str	r2, [r0, #0]
   294aa:	7204      	strb	r4, [r0, #8]
   294ac:	bd10      	pop	{r4, pc}
   294ae:	bf00      	nop
   294b0:	00051fb4 	.word	0x00051fb4

000294b4 <new_zmk_ble_active_profile_changed>:
 */

#include <kernel.h>
#include <zmk/events/ble_active_profile_changed.h>

   294b4:	b513      	push	{r0, r1, r4, lr}
   294b6:	466c      	mov	r4, sp
   294b8:	e884 0003 	stmia.w	r4, {r0, r1}
   294bc:	2010      	movs	r0, #16
   294be:	f028 f9bc 	bl	5183a <k_malloc>
   294c2:	4603      	mov	r3, r0
   294c4:	4905      	ldr	r1, [pc, #20]	; (294dc <new_zmk_ble_active_profile_changed+0x28>)
   294c6:	f843 1b08 	str.w	r1, [r3], #8
   294ca:	4602      	mov	r2, r0
   294cc:	e894 0003 	ldmia.w	r4, {r0, r1}
   294d0:	e883 0003 	stmia.w	r3, {r0, r1}
   294d4:	4610      	mov	r0, r2
   294d6:	b002      	add	sp, #8
   294d8:	bd10      	pop	{r4, pc}
   294da:	bf00      	nop
   294dc:	00051fbc 	.word	0x00051fbc

000294e0 <new_zmk_battery_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/battery_state_changed.h>

   294e0:	b510      	push	{r4, lr}
   294e2:	4604      	mov	r4, r0
   294e4:	200c      	movs	r0, #12
   294e6:	f028 f9a8 	bl	5183a <k_malloc>
   294ea:	4a02      	ldr	r2, [pc, #8]	; (294f4 <new_zmk_battery_state_changed+0x14>)
   294ec:	6002      	str	r2, [r0, #0]
   294ee:	7204      	strb	r4, [r0, #8]
   294f0:	bd10      	pop	{r4, pc}
   294f2:	bf00      	nop
   294f4:	00051fc0 	.word	0x00051fc0

000294f8 <new_zmk_usb_conn_state_changed>:
 */

#include <kernel.h>
#include <zmk/events/usb_conn_state_changed.h>

   294f8:	b510      	push	{r4, lr}
   294fa:	4604      	mov	r4, r0
   294fc:	200c      	movs	r0, #12
   294fe:	f028 f99c 	bl	5183a <k_malloc>
   29502:	4a02      	ldr	r2, [pc, #8]	; (2950c <new_zmk_usb_conn_state_changed+0x14>)
   29504:	6002      	str	r2, [r0, #0]
   29506:	7204      	strb	r4, [r0, #8]
   29508:	bd10      	pop	{r4, pc}
   2950a:	bf00      	nop
   2950c:	00051fc4 	.word	0x00051fc4

00029510 <on_keymap_binding_pressed>:

    return 0;
}

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   29510:	b082      	sub	sp, #8
   29512:	b538      	push	{r3, r4, r5, lr}
   29514:	a904      	add	r1, sp, #16
   29516:	4605      	mov	r5, r0
   29518:	e881 000c 	stmia.w	r1, {r2, r3}
   2951c:	4811      	ldr	r0, [pc, #68]	; (29564 <on_keymap_binding_pressed+0x54>)
   2951e:	f01e fdf9 	bl	48114 <z_impl_device_get_binding>
    const struct device *ext_power = device_get_binding("EXT_POWER");
    if (ext_power == NULL) {
   29522:	4604      	mov	r4, r0
   29524:	b1d0      	cbz	r0, 2955c <on_keymap_binding_pressed+0x4c>
        LOG_ERR("Unable to retrieve ext_power device: %d", binding->param1);
        return -EIO;
    }

    switch (binding->param1) {
   29526:	686b      	ldr	r3, [r5, #4]
   29528:	2b01      	cmp	r3, #1
   2952a:	d012      	beq.n	29552 <on_keymap_binding_pressed+0x42>
   2952c:	b163      	cbz	r3, 29548 <on_keymap_binding_pressed+0x38>
   2952e:	2b02      	cmp	r3, #2
   29530:	d005      	beq.n	2953e <on_keymap_binding_pressed+0x2e>
            return ext_power_enable(ext_power);
    default:
        LOG_ERR("Unknown ext_power command: %d", binding->param1);
    }

    return -ENOTSUP;
   29532:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   29536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2953a:	b002      	add	sp, #8
   2953c:	4770      	bx	lr
        if (ext_power_get(ext_power) > 0)
   2953e:	f020 faba 	bl	49ab6 <ext_power_get>
   29542:	2800      	cmp	r0, #0
            return ext_power_disable(ext_power);
   29544:	4620      	mov	r0, r4
        if (ext_power_get(ext_power) > 0)
   29546:	dd04      	ble.n	29552 <on_keymap_binding_pressed+0x42>
}
   29548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2954c:	b002      	add	sp, #8
            return ext_power_disable(ext_power);
   2954e:	f020 baab 	b.w	49aa8 <ext_power_disable>
}
   29552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29556:	b002      	add	sp, #8
            return ext_power_enable(ext_power);
   29558:	f020 ba9f 	b.w	49a9a <ext_power_enable>
        return -EIO;
   2955c:	f06f 0004 	mvn.w	r0, #4
   29560:	e7e9      	b.n	29536 <on_keymap_binding_pressed+0x26>
   29562:	bf00      	nop
   29564:	00053dde 	.word	0x00053dde

00029568 <on_keymap_binding_convert_central_state_dependent_params>:
                                                         struct zmk_behavior_binding_event event) {
   29568:	b082      	sub	sp, #8
   2956a:	b510      	push	{r4, lr}
   2956c:	a902      	add	r1, sp, #8
   2956e:	4604      	mov	r4, r0
   29570:	e881 000c 	stmia.w	r1, {r2, r3}
   29574:	480a      	ldr	r0, [pc, #40]	; (295a0 <on_keymap_binding_convert_central_state_dependent_params+0x38>)
   29576:	f01e fdcd 	bl	48114 <z_impl_device_get_binding>
    if (ext_power == NULL) {
   2957a:	b158      	cbz	r0, 29594 <on_keymap_binding_convert_central_state_dependent_params+0x2c>
    if (binding->param1 == EXT_POWER_TOGGLE_CMD) {
   2957c:	6863      	ldr	r3, [r4, #4]
   2957e:	2b02      	cmp	r3, #2
   29580:	d106      	bne.n	29590 <on_keymap_binding_convert_central_state_dependent_params+0x28>
        binding->param1 = ext_power_get(ext_power) > 0 ? EXT_POWER_OFF_CMD : EXT_POWER_ON_CMD;
   29582:	f020 fa98 	bl	49ab6 <ext_power_get>
   29586:	2800      	cmp	r0, #0
   29588:	bfcc      	ite	gt
   2958a:	2000      	movgt	r0, #0
   2958c:	2001      	movle	r0, #1
   2958e:	6060      	str	r0, [r4, #4]
    return 0;
   29590:	2000      	movs	r0, #0
   29592:	e001      	b.n	29598 <on_keymap_binding_convert_central_state_dependent_params+0x30>
        return -EIO;
   29594:	f06f 0004 	mvn.w	r0, #4
}
   29598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2959c:	b002      	add	sp, #8
   2959e:	4770      	bx	lr
   295a0:	00053dde 	.word	0x00053dde

000295a4 <zmk_keymap_layer_activate>:
                                                        DT_INST_FOREACH_CHILD(0, SENSOR_LAYER)};

#endif /* ZMK_KEYMAP_HAS_SENSORS */

static inline int set_layer_state(uint8_t layer, bool state) {
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
   295a4:	2801      	cmp	r0, #1
        }
    }
    return zmk_keymap_layer_default();
}

int zmk_keymap_layer_activate(uint8_t layer) { return set_layer_state(layer, true); };
   295a6:	b510      	push	{r4, lr}
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
   295a8:	d80e      	bhi.n	295c8 <zmk_keymap_layer_activate+0x24>
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
   295aa:	4c09      	ldr	r4, [pc, #36]	; (295d0 <zmk_keymap_layer_activate+0x2c>)
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   295ac:	2101      	movs	r1, #1
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
   295ae:	6822      	ldr	r2, [r4, #0]
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   295b0:	fa01 f300 	lsl.w	r3, r1, r0
   295b4:	4313      	orrs	r3, r2
    if (old_state != _zmk_keymap_layer_state) {
   295b6:	429a      	cmp	r2, r3
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   295b8:	6023      	str	r3, [r4, #0]
    if (old_state != _zmk_keymap_layer_state) {
   295ba:	d003      	beq.n	295c4 <zmk_keymap_layer_activate+0x20>
        ZMK_EVENT_RAISE(create_layer_state_changed(layer, state));
   295bc:	f020 fae8 	bl	49b90 <create_layer_state_changed>
   295c0:	f020 fa09 	bl	499d6 <zmk_event_manager_raise>
    return 0;
   295c4:	2000      	movs	r0, #0
int zmk_keymap_layer_activate(uint8_t layer) { return set_layer_state(layer, true); };
   295c6:	e001      	b.n	295cc <zmk_keymap_layer_activate+0x28>
        return -EINVAL;
   295c8:	f06f 0015 	mvn.w	r0, #21
int zmk_keymap_layer_activate(uint8_t layer) { return set_layer_state(layer, true); };
   295cc:	bd10      	pop	{r4, pc}
   295ce:	bf00      	nop
   295d0:	20003bec 	.word	0x20003bec

000295d4 <zmk_keymap_layer_deactivate>:
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
   295d4:	2801      	cmp	r0, #1

int zmk_keymap_layer_deactivate(uint8_t layer) { return set_layer_state(layer, false); };
   295d6:	b508      	push	{r3, lr}
    if (layer >= ZMK_KEYMAP_LAYERS_LEN) {
   295d8:	d810      	bhi.n	295fc <zmk_keymap_layer_deactivate+0x28>
    if (layer == _zmk_keymap_layer_default && !state) {
   295da:	b908      	cbnz	r0, 295e0 <zmk_keymap_layer_deactivate+0xc>
        ZMK_EVENT_RAISE(create_layer_state_changed(layer, state));
   295dc:	2000      	movs	r0, #0
int zmk_keymap_layer_deactivate(uint8_t layer) { return set_layer_state(layer, false); };
   295de:	bd08      	pop	{r3, pc}
    zmk_keymap_layers_state_t old_state = _zmk_keymap_layer_state;
   295e0:	4908      	ldr	r1, [pc, #32]	; (29604 <zmk_keymap_layer_deactivate+0x30>)
   295e2:	680a      	ldr	r2, [r1, #0]
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   295e4:	f022 0302 	bic.w	r3, r2, #2
    if (old_state != _zmk_keymap_layer_state) {
   295e8:	429a      	cmp	r2, r3
    WRITE_BIT(_zmk_keymap_layer_state, layer, state);
   295ea:	600b      	str	r3, [r1, #0]
    if (old_state != _zmk_keymap_layer_state) {
   295ec:	d0f6      	beq.n	295dc <zmk_keymap_layer_deactivate+0x8>
        ZMK_EVENT_RAISE(create_layer_state_changed(layer, state));
   295ee:	2100      	movs	r1, #0
   295f0:	2001      	movs	r0, #1
   295f2:	f020 facd 	bl	49b90 <create_layer_state_changed>
   295f6:	f020 f9ee 	bl	499d6 <zmk_event_manager_raise>
   295fa:	e7ef      	b.n	295dc <zmk_keymap_layer_deactivate+0x8>
        return -EINVAL;
   295fc:	f06f 0015 	mvn.w	r0, #21
int zmk_keymap_layer_deactivate(uint8_t layer) { return set_layer_state(layer, false); };
   29600:	e7ed      	b.n	295de <zmk_keymap_layer_deactivate+0xa>
   29602:	bf00      	nop
   29604:	20003bec 	.word	0x20003bec

00029608 <zmk_keymap_apply_position_state>:
        return behavior_keymap_binding_released(binding, event);
    }
}

int zmk_keymap_apply_position_state(uint8_t source, int layer, uint32_t position, bool pressed,
                                    int64_t timestamp) {
   29608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2960c:	4615      	mov	r5, r2
    // We want to make a copy of this, since it may be converted from
    // relative to absolute before being invoked
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   2960e:	f44f 721c 	mov.w	r2, #624	; 0x270
                                    int64_t timestamp) {
   29612:	461f      	mov	r7, r3
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29614:	434a      	muls	r2, r1
   29616:	230c      	movs	r3, #12
   29618:	fb03 2205 	mla	r2, r3, r5, r2
   2961c:	4b39      	ldr	r3, [pc, #228]	; (29704 <zmk_keymap_apply_position_state+0xfc>)
   2961e:	4413      	add	r3, r2
                                    int64_t timestamp) {
   29620:	4682      	mov	sl, r0
   29622:	460e      	mov	r6, r1
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29624:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
                                    int64_t timestamp) {
   29628:	b08d      	sub	sp, #52	; 0x34
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   2962a:	ac05      	add	r4, sp, #20
                                    int64_t timestamp) {
   2962c:	e9dd 8916 	ldrd	r8, r9, [sp, #88]	; 0x58
    struct zmk_behavior_binding binding = zmk_keymap[layer][position];
   29630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   29634:	f01e fd6e 	bl	48114 <z_impl_device_get_binding>
    LOG_DBG("layer: %d position: %d, binding name: %s", layer, position,
            log_strdup(binding.behavior_dev));

    behavior = device_get_binding(binding.behavior_dev);

    if (!behavior) {
   29638:	4683      	mov	fp, r0
   2963a:	2800      	cmp	r0, #0
   2963c:	d05f      	beq.n	296fe <zmk_keymap_apply_position_state+0xf6>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_CONVERT_CENTRAL_STATE_DEPENDENT_PARAMS);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_convert_central_state_dependent_params(binding, event);
   2963e:	e9cd 6508 	strd	r6, r5, [sp, #32]
   29642:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
__syscall int behavior_keymap_binding_convert_central_state_dependent_params(
    struct zmk_behavior_binding *binding, struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_convert_central_state_dependent_params(
    struct zmk_behavior_binding *binding, struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
   29646:	9805      	ldr	r0, [sp, #20]
   29648:	f01e fd64 	bl	48114 <z_impl_device_get_binding>
    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_convert_central_state_dependent_params == NULL) {
   2964c:	6883      	ldr	r3, [r0, #8]
   2964e:	685b      	ldr	r3, [r3, #4]
   29650:	469c      	mov	ip, r3
   29652:	b153      	cbz	r3, 2966a <zmk_keymap_apply_position_state+0x62>
        return 0;
    }

    return api->binding_convert_central_state_dependent_params(binding, event);
   29654:	ab0c      	add	r3, sp, #48	; 0x30
   29656:	e913 0003 	ldmdb	r3, {r0, r1}
   2965a:	e88d 0003 	stmia.w	sp, {r0, r1}
   2965e:	ab08      	add	r3, sp, #32
   29660:	cb0c      	ldmia	r3, {r2, r3}
   29662:	4620      	mov	r0, r4
   29664:	4661      	mov	r1, ip
   29666:	4788      	blx	r1
        LOG_WRN("No behavior assigned to %d on layer %d", position, layer);
        return 1;
    }

    int err = behavior_keymap_binding_convert_central_state_dependent_params(&binding, event);
    if (err) {
   29668:	b948      	cbnz	r0, 2967e <zmk_keymap_apply_position_state+0x76>
    if (behavior == NULL) {
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)behavior->api;
    *locality = api->locality;
   2966a:	f8db 3008 	ldr.w	r3, [fp, #8]
   2966e:	781b      	ldrb	r3, [r3, #0]
    if (err) {
        LOG_ERR("Failed to get behavior locality %d", err);
        return err;
    }

    switch (locality) {
   29670:	2b01      	cmp	r3, #1
   29672:	d017      	beq.n	296a4 <zmk_keymap_apply_position_state+0x9c>
   29674:	b133      	cbz	r3, 29684 <zmk_keymap_apply_position_state+0x7c>
   29676:	2b02      	cmp	r3, #2
   29678:	d028      	beq.n	296cc <zmk_keymap_apply_position_state+0xc4>
        }
#endif
        return invoke_locally(&binding, event, pressed);
    }

    return -ENOTSUP;
   2967a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2967e:	b00d      	add	sp, #52	; 0x34
   29680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return invoke_locally(&binding, event, pressed);
   29684:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   29688:	9702      	str	r7, [sp, #8]
   2968a:	ab0c      	add	r3, sp, #48	; 0x30
   2968c:	e913 0003 	ldmdb	r3, {r0, r1}
   29690:	e9cd 6508 	strd	r6, r5, [sp, #32]
   29694:	e88d 0003 	stmia.w	sp, {r0, r1}
   29698:	ab08      	add	r3, sp, #32
   2969a:	cb0c      	ldmia	r3, {r2, r3}
        return invoke_locally(&binding, event, pressed);
   2969c:	4620      	mov	r0, r4
   2969e:	f020 faa0 	bl	49be2 <invoke_locally>
   296a2:	e7ec      	b.n	2967e <zmk_keymap_apply_position_state+0x76>
            return invoke_locally(&binding, event, pressed);
   296a4:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   296a8:	9702      	str	r7, [sp, #8]
   296aa:	aa0a      	add	r2, sp, #40	; 0x28
   296ac:	e892 0003 	ldmia.w	r2, {r0, r1}
   296b0:	e9cd 6508 	strd	r6, r5, [sp, #32]
   296b4:	e88d 0003 	stmia.w	sp, {r0, r1}
   296b8:	ab08      	add	r3, sp, #32
        if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
   296ba:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
            return invoke_locally(&binding, event, pressed);
   296be:	cb0c      	ldmia	r3, {r2, r3}
        if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
   296c0:	d0ec      	beq.n	2969c <zmk_keymap_apply_position_state+0x94>
            return zmk_split_bt_invoke_behavior(source, &binding, event, pressed);
   296c2:	4621      	mov	r1, r4
   296c4:	4650      	mov	r0, sl
   296c6:	f020 fb4f 	bl	49d68 <zmk_split_bt_invoke_behavior>
   296ca:	e7d8      	b.n	2967e <zmk_keymap_apply_position_state+0x76>
            zmk_split_bt_invoke_behavior(i, &binding, event, pressed);
   296cc:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   296d0:	e9cd 6508 	strd	r6, r5, [sp, #32]
   296d4:	9702      	str	r7, [sp, #8]
   296d6:	ae0a      	add	r6, sp, #40	; 0x28
   296d8:	e896 0003 	ldmia.w	r6, {r0, r1}
   296dc:	e88d 0003 	stmia.w	sp, {r0, r1}
   296e0:	ad08      	add	r5, sp, #32
   296e2:	e895 000c 	ldmia.w	r5, {r2, r3}
   296e6:	4621      	mov	r1, r4
   296e8:	2000      	movs	r0, #0
   296ea:	f020 fb3d 	bl	49d68 <zmk_split_bt_invoke_behavior>
        return invoke_locally(&binding, event, pressed);
   296ee:	9702      	str	r7, [sp, #8]
   296f0:	e896 0003 	ldmia.w	r6, {r0, r1}
   296f4:	e88d 0003 	stmia.w	sp, {r0, r1}
   296f8:	e895 000c 	ldmia.w	r5, {r2, r3}
   296fc:	e7ce      	b.n	2969c <zmk_keymap_apply_position_state+0x94>
        return 1;
   296fe:	2001      	movs	r0, #1
   29700:	e7bd      	b.n	2967e <zmk_keymap_apply_position_state+0x76>
   29702:	bf00      	nop
   29704:	00052020 	.word	0x00052020

00029708 <zmk_keymap_position_state_changed>:

int zmk_keymap_position_state_changed(uint8_t source, uint32_t position, bool pressed,
                                      int64_t timestamp) {
   29708:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2970c:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   29710:	4682      	mov	sl, r0
   29712:	460d      	mov	r5, r1
    if (pressed) {
   29714:	4616      	mov	r6, r2
   29716:	4f10      	ldr	r7, [pc, #64]	; (29758 <zmk_keymap_position_state_changed+0x50>)
   29718:	b11a      	cbz	r2, 29722 <zmk_keymap_position_state_changed+0x1a>
        zmk_keymap_active_behavior_layer[position] = _zmk_keymap_layer_state;
   2971a:	4b10      	ldr	r3, [pc, #64]	; (2975c <zmk_keymap_position_state_changed+0x54>)
   2971c:	681b      	ldr	r3, [r3, #0]
   2971e:	f847 3021 	str.w	r3, [r7, r1, lsl #2]
                                      int64_t timestamp) {
   29722:	2401      	movs	r4, #1
    }
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
        if (zmk_keymap_layer_active_with_state(layer, zmk_keymap_active_behavior_layer[position])) {
   29724:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
   29728:	4620      	mov	r0, r4
   2972a:	f020 fa50 	bl	49bce <zmk_keymap_layer_active_with_state>
   2972e:	b938      	cbnz	r0, 29740 <zmk_keymap_position_state_changed+0x38>
    for (int layer = ZMK_KEYMAP_LAYERS_LEN - 1; layer >= _zmk_keymap_layer_default; layer--) {
   29730:	b924      	cbnz	r4, 2973c <zmk_keymap_position_state_changed+0x34>
                return ret;
            }
        }
    }

    return -ENOTSUP;
   29732:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   29736:	b002      	add	sp, #8
   29738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2973c:	2400      	movs	r4, #0
   2973e:	e7f1      	b.n	29724 <zmk_keymap_position_state_changed+0x1c>
            int ret = zmk_keymap_apply_position_state(source, layer, position, pressed, timestamp);
   29740:	e9cd 8900 	strd	r8, r9, [sp]
   29744:	4633      	mov	r3, r6
   29746:	462a      	mov	r2, r5
   29748:	4621      	mov	r1, r4
   2974a:	4650      	mov	r0, sl
   2974c:	f7ff ff5c 	bl	29608 <zmk_keymap_apply_position_state>
            if (ret > 0) {
   29750:	2800      	cmp	r0, #0
   29752:	ddf0      	ble.n	29736 <zmk_keymap_position_state_changed+0x2e>
   29754:	e7ec      	b.n	29730 <zmk_keymap_position_state_changed+0x28>
   29756:	bf00      	nop
   29758:	20003bf0 	.word	0x20003bf0
   2975c:	20003bec 	.word	0x20003bec

00029760 <raise_profile_changed_event>:

static bt_addr_le_t peripheral_addr;

#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_BLE_ROLE_CENTRAL) */

static void raise_profile_changed_event() {
   29760:	b507      	push	{r0, r1, r2, lr}
    ZMK_EVENT_RAISE(new_zmk_ble_active_profile_changed((struct zmk_ble_active_profile_changed){
   29762:	4b09      	ldr	r3, [pc, #36]	; (29788 <raise_profile_changed_event+0x28>)
   29764:	4909      	ldr	r1, [pc, #36]	; (2978c <raise_profile_changed_event+0x2c>)
   29766:	781a      	ldrb	r2, [r3, #0]
   29768:	f88d 2000 	strb.w	r2, [sp]
   2976c:	2316      	movs	r3, #22
   2976e:	fb02 1303 	mla	r3, r2, r3, r1
   29772:	9301      	str	r3, [sp, #4]
   29774:	ab02      	add	r3, sp, #8
   29776:	e913 0003 	ldmdb	r3, {r0, r1}
   2977a:	f7ff fe9b 	bl	294b4 <new_zmk_ble_active_profile_changed>
        .index = active_profile, .profile = &profiles[active_profile]}));
}
   2977e:	b003      	add	sp, #12
   29780:	f85d eb04 	ldr.w	lr, [sp], #4
    ZMK_EVENT_RAISE(new_zmk_ble_active_profile_changed((struct zmk_ble_active_profile_changed){
   29784:	f020 b927 	b.w	499d6 <zmk_event_manager_raise>
   29788:	20006c64 	.word	0x20006c64
   2978c:	20006c6d 	.word	0x20006c6d

00029790 <ble_save_profile_work>:

int zmk_ble_active_profile_index() { return active_profile; }

#if IS_ENABLED(CONFIG_SETTINGS)
static void ble_save_profile_work(struct k_work *work) {
    settings_save_one("ble/active_profile", &active_profile, sizeof(active_profile));
   29790:	2201      	movs	r2, #1
   29792:	4902      	ldr	r1, [pc, #8]	; (2979c <ble_save_profile_work+0xc>)
   29794:	4802      	ldr	r0, [pc, #8]	; (297a0 <ble_save_profile_work+0x10>)
   29796:	f002 bbd5 	b.w	2bf44 <settings_save_one>
   2979a:	bf00      	nop
   2979c:	20006c64 	.word	0x20006c64
   297a0:	00053f48 	.word	0x00053f48

000297a4 <bt_addr_le_to_str.constprop.5>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   297a4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   297a6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   297a8:	b08a      	sub	sp, #40	; 0x28
   297aa:	4604      	mov	r4, r0
   297ac:	460e      	mov	r6, r1
   297ae:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   297b0:	2b03      	cmp	r3, #3
   297b2:	d820      	bhi.n	297f6 <bt_addr_le_to_str.constprop.5+0x52>
   297b4:	e8df f003 	tbb	[pc, r3]
   297b8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   297bc:	4911      	ldr	r1, [pc, #68]	; (29804 <bt_addr_le_to_str.constprop.5+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   297be:	4628      	mov	r0, r5
   297c0:	f022 fd58 	bl	4c274 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   297c4:	7863      	ldrb	r3, [r4, #1]
   297c6:	9304      	str	r3, [sp, #16]
   297c8:	78a3      	ldrb	r3, [r4, #2]
   297ca:	9303      	str	r3, [sp, #12]
   297cc:	78e3      	ldrb	r3, [r4, #3]
   297ce:	9302      	str	r3, [sp, #8]
   297d0:	7923      	ldrb	r3, [r4, #4]
   297d2:	9301      	str	r3, [sp, #4]
   297d4:	7963      	ldrb	r3, [r4, #5]
   297d6:	9300      	str	r3, [sp, #0]
   297d8:	9505      	str	r5, [sp, #20]
   297da:	79a3      	ldrb	r3, [r4, #6]
   297dc:	4a0a      	ldr	r2, [pc, #40]	; (29808 <bt_addr_le_to_str.constprop.5+0x64>)
   297de:	211e      	movs	r1, #30
   297e0:	4630      	mov	r0, r6
   297e2:	f020 fc88 	bl	4a0f6 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   297e6:	b00a      	add	sp, #40	; 0x28
   297e8:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   297ea:	4908      	ldr	r1, [pc, #32]	; (2980c <bt_addr_le_to_str.constprop.5+0x68>)
   297ec:	e7e7      	b.n	297be <bt_addr_le_to_str.constprop.5+0x1a>
		strcpy(type, "public-id");
   297ee:	4908      	ldr	r1, [pc, #32]	; (29810 <bt_addr_le_to_str.constprop.5+0x6c>)
   297f0:	e7e5      	b.n	297be <bt_addr_le_to_str.constprop.5+0x1a>
		strcpy(type, "random-id");
   297f2:	4908      	ldr	r1, [pc, #32]	; (29814 <bt_addr_le_to_str.constprop.5+0x70>)
   297f4:	e7e3      	b.n	297be <bt_addr_le_to_str.constprop.5+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   297f6:	4a08      	ldr	r2, [pc, #32]	; (29818 <bt_addr_le_to_str.constprop.5+0x74>)
   297f8:	210a      	movs	r1, #10
   297fa:	4628      	mov	r0, r5
   297fc:	f020 fc7b 	bl	4a0f6 <snprintk>
		break;
   29800:	e7e0      	b.n	297c4 <bt_addr_le_to_str.constprop.5+0x20>
   29802:	bf00      	nop
   29804:	00053f5b 	.word	0x00053f5b
   29808:	00053f84 	.word	0x00053f84
   2980c:	00053f62 	.word	0x00053f62
   29810:	00053f69 	.word	0x00053f69
   29814:	00053f73 	.word	0x00053f73
   29818:	00053f7d 	.word	0x00053f7d

0002981c <ble_profiles_handle_set>:
#endif /* IS_ENABLED(CONFIG_ZMK_SPLIT_BLE_ROLE_CENTRAL) */

#if IS_ENABLED(CONFIG_SETTINGS)

static int ble_profiles_handle_set(const char *name, size_t len, settings_read_cb read_cb,
                                   void *cb_arg) {
   2981c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29820:	b08b      	sub	sp, #44	; 0x2c
   29822:	460d      	mov	r5, r1
   29824:	4616      	mov	r6, r2
    const char *next;

    LOG_DBG("Setting BLE value %s", log_strdup(name));

    if (settings_name_steq(name, "profiles", &next) && next) {
   29826:	4926      	ldr	r1, [pc, #152]	; (298c0 <ble_profiles_handle_set+0xa4>)
   29828:	466a      	mov	r2, sp
                                   void *cb_arg) {
   2982a:	4604      	mov	r4, r0
   2982c:	4698      	mov	r8, r3
    if (settings_name_steq(name, "profiles", &next) && next) {
   2982e:	f021 fa5f 	bl	4acf0 <settings_name_steq>
   29832:	b1f8      	cbz	r0, 29874 <ble_profiles_handle_set+0x58>
   29834:	9800      	ldr	r0, [sp, #0]
   29836:	b1e8      	cbz	r0, 29874 <ble_profiles_handle_set+0x58>
        char *endptr;
        uint8_t idx = strtoul(next, &endptr, 10);
   29838:	220a      	movs	r2, #10
   2983a:	a901      	add	r1, sp, #4
   2983c:	f022 fca1 	bl	4c182 <strtoul>
        if (*endptr != '\0') {
   29840:	9b01      	ldr	r3, [sp, #4]
   29842:	781f      	ldrb	r7, [r3, #0]
   29844:	bb07      	cbnz	r7, 29888 <ble_profiles_handle_set+0x6c>
            LOG_WRN("Invalid profile index: %s", log_strdup(next));
            return -EINVAL;
        }

        if (len != sizeof(struct zmk_ble_profile)) {
   29846:	2d16      	cmp	r5, #22
   29848:	d11e      	bne.n	29888 <ble_profiles_handle_set+0x6c>
            LOG_ERR("Invalid profile size (got %d expected %d)", len,
                    sizeof(struct zmk_ble_profile));
            return -EINVAL;
        }

        if (idx >= ZMK_BLE_PROFILE_COUNT) {
   2984a:	b2c4      	uxtb	r4, r0
   2984c:	2c04      	cmp	r4, #4
   2984e:	d81b      	bhi.n	29888 <ble_profiles_handle_set+0x6c>
            LOG_WRN("Profile address for index %d is larger than max of %d", idx,
                    ZMK_BLE_PROFILE_COUNT);
            return -EINVAL;
        }

        int err = read_cb(cb_arg, &profiles[idx], sizeof(struct zmk_ble_profile));
   29850:	f8df 9080 	ldr.w	r9, [pc, #128]	; 298d4 <ble_profiles_handle_set+0xb8>
   29854:	436c      	muls	r4, r5
   29856:	462a      	mov	r2, r5
   29858:	eb09 0104 	add.w	r1, r9, r4
   2985c:	4640      	mov	r0, r8
   2985e:	47b0      	blx	r6
        if (err <= 0) {
   29860:	2800      	cmp	r0, #0
   29862:	dd13      	ble.n	2988c <ble_profiles_handle_set+0x70>
            LOG_ERR("Failed to handle profile address from settings (err %d)", err);
            return err;
        }

        char addr_str[BT_ADDR_LE_STR_LEN];
        bt_addr_le_to_str(&profiles[idx].peer, addr_str, sizeof(addr_str));
   29864:	f104 000f 	add.w	r0, r4, #15
   29868:	a902      	add	r1, sp, #8
   2986a:	4448      	add	r0, r9
   2986c:	f7ff ff9a 	bl	297a4 <bt_addr_le_to_str.constprop.5>
            return err;
        }
    }
#endif

    return 0;
   29870:	2000      	movs	r0, #0
   29872:	e00b      	b.n	2988c <ble_profiles_handle_set+0x70>
    } else if (settings_name_steq(name, "active_profile", &next) && !next) {
   29874:	466a      	mov	r2, sp
   29876:	4913      	ldr	r1, [pc, #76]	; (298c4 <ble_profiles_handle_set+0xa8>)
   29878:	4620      	mov	r0, r4
   2987a:	f021 fa39 	bl	4acf0 <settings_name_steq>
   2987e:	b178      	cbz	r0, 298a0 <ble_profiles_handle_set+0x84>
   29880:	9b00      	ldr	r3, [sp, #0]
   29882:	b96b      	cbnz	r3, 298a0 <ble_profiles_handle_set+0x84>
        if (len != sizeof(active_profile)) {
   29884:	2d01      	cmp	r5, #1
   29886:	d004      	beq.n	29892 <ble_profiles_handle_set+0x76>
            return -EINVAL;
   29888:	f06f 0015 	mvn.w	r0, #21
};
   2988c:	b00b      	add	sp, #44	; 0x2c
   2988e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        int err = read_cb(cb_arg, &active_profile, sizeof(active_profile));
   29892:	490d      	ldr	r1, [pc, #52]	; (298c8 <ble_profiles_handle_set+0xac>)
   29894:	462a      	mov	r2, r5
        int err = read_cb(cb_arg, &peripheral_addr, sizeof(bt_addr_le_t));
   29896:	4640      	mov	r0, r8
   29898:	47b0      	blx	r6
        if (err <= 0) {
   2989a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2989e:	e7f5      	b.n	2988c <ble_profiles_handle_set+0x70>
    else if (settings_name_steq(name, "peripheral_address", &next) && !next) {
   298a0:	466a      	mov	r2, sp
   298a2:	490a      	ldr	r1, [pc, #40]	; (298cc <ble_profiles_handle_set+0xb0>)
   298a4:	4620      	mov	r0, r4
   298a6:	f021 fa23 	bl	4acf0 <settings_name_steq>
   298aa:	2800      	cmp	r0, #0
   298ac:	d0ee      	beq.n	2988c <ble_profiles_handle_set+0x70>
   298ae:	9b00      	ldr	r3, [sp, #0]
   298b0:	2b00      	cmp	r3, #0
   298b2:	d1dd      	bne.n	29870 <ble_profiles_handle_set+0x54>
        if (len != sizeof(bt_addr_le_t)) {
   298b4:	2d07      	cmp	r5, #7
   298b6:	d1e7      	bne.n	29888 <ble_profiles_handle_set+0x6c>
        int err = read_cb(cb_arg, &peripheral_addr, sizeof(bt_addr_le_t));
   298b8:	462a      	mov	r2, r5
   298ba:	4905      	ldr	r1, [pc, #20]	; (298d0 <ble_profiles_handle_set+0xb4>)
   298bc:	e7eb      	b.n	29896 <ble_profiles_handle_set+0x7a>
   298be:	bf00      	nop
   298c0:	00053f3f 	.word	0x00053f3f
   298c4:	00053f4c 	.word	0x00053f4c
   298c8:	20006c64 	.word	0x20006c64
   298cc:	00053fce 	.word	0x00053fce
   298d0:	20006c66 	.word	0x20006c66
   298d4:	20006c6d 	.word	0x20006c6d

000298d8 <is_conn_active_profile>:

struct settings_handler profiles_handler = {.name = "ble", .h_set = ble_profiles_handle_set};
#endif /* IS_ENABLED(CONFIG_SETTINGS) */

static bool is_conn_active_profile(const struct bt_conn *conn) {
   298d8:	b508      	push	{r3, lr}
    return bt_addr_le_cmp(bt_conn_get_dst(conn), &profiles[active_profile].peer) == 0;
   298da:	f023 fd7c 	bl	4d3d6 <bt_conn_get_dst>
   298de:	4b07      	ldr	r3, [pc, #28]	; (298fc <is_conn_active_profile+0x24>)
   298e0:	7819      	ldrb	r1, [r3, #0]
   298e2:	4b07      	ldr	r3, [pc, #28]	; (29900 <is_conn_active_profile+0x28>)
   298e4:	2216      	movs	r2, #22
   298e6:	fb02 3101 	mla	r1, r2, r1, r3
	return memcmp(a, b, sizeof(*a));
   298ea:	310f      	adds	r1, #15
   298ec:	2207      	movs	r2, #7
   298ee:	f022 fced 	bl	4c2cc <memcmp>
}
   298f2:	fab0 f080 	clz	r0, r0
   298f6:	0940      	lsrs	r0, r0, #5
   298f8:	bd08      	pop	{r3, pc}
   298fa:	bf00      	nop
   298fc:	20006c64 	.word	0x20006c64
   29900:	20006c6d 	.word	0x20006c6d

00029904 <disconnected>:
        LOG_DBG("Active profile connected");
        k_work_submit(&raise_profile_changed_event_work);
    }
}

static void disconnected(struct bt_conn *conn, uint8_t reason) {
   29904:	b510      	push	{r4, lr}
   29906:	b090      	sub	sp, #64	; 0x40
   29908:	4604      	mov	r4, r0
    char addr[BT_ADDR_LE_STR_LEN];
    struct bt_conn_info info;

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   2990a:	f023 fd64 	bl	4d3d6 <bt_conn_get_dst>
   2990e:	4669      	mov	r1, sp
   29910:	f7ff ff48 	bl	297a4 <bt_addr_le_to_str.constprop.5>

    LOG_DBG("Disconnected from %s (reason 0x%02x)", log_strdup(addr), reason);

    bt_conn_get_info(conn, &info);
   29914:	a908      	add	r1, sp, #32
   29916:	4620      	mov	r0, r4
   29918:	f006 fb34 	bl	2ff84 <bt_conn_get_info>

    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   2991c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   29920:	2b01      	cmp	r3, #1
   29922:	d109      	bne.n	29938 <disconnected+0x34>
        return;
    }

    // We need to do this in a work callback, otherwise the advertising update will still see the
    // connection for a profile as active, and not start advertising yet.
    k_work_submit(&update_advertising_work);
   29924:	4805      	ldr	r0, [pc, #20]	; (2993c <disconnected+0x38>)
   29926:	f01f f933 	bl	48b90 <k_work_submit>

    if (is_conn_active_profile(conn)) {
   2992a:	4620      	mov	r0, r4
   2992c:	f7ff ffd4 	bl	298d8 <is_conn_active_profile>
   29930:	b110      	cbz	r0, 29938 <disconnected+0x34>
        LOG_DBG("Active profile disconnected");
        k_work_submit(&raise_profile_changed_event_work);
   29932:	4803      	ldr	r0, [pc, #12]	; (29940 <disconnected+0x3c>)
   29934:	f01f f92c 	bl	48b90 <k_work_submit>
    }
}
   29938:	b010      	add	sp, #64	; 0x40
   2993a:	bd10      	pop	{r4, pc}
   2993c:	200002e0 	.word	0x200002e0
   29940:	200002d0 	.word	0x200002d0

00029944 <zmk_ble_active_profile_is_open>:
bool zmk_ble_active_profile_is_open() {
   29944:	b507      	push	{r0, r1, r2, lr}
    return !bt_addr_le_cmp(&profiles[active_profile].peer, BT_ADDR_LE_ANY);
   29946:	4b0a      	ldr	r3, [pc, #40]	; (29970 <zmk_ble_active_profile_is_open+0x2c>)
   29948:	7818      	ldrb	r0, [r3, #0]
   2994a:	4b0a      	ldr	r3, [pc, #40]	; (29974 <zmk_ble_active_profile_is_open+0x30>)
   2994c:	2216      	movs	r2, #22
   2994e:	fb02 3000 	mla	r0, r2, r0, r3
   29952:	4669      	mov	r1, sp
   29954:	2300      	movs	r3, #0
   29956:	2207      	movs	r2, #7
   29958:	300f      	adds	r0, #15
   2995a:	9300      	str	r3, [sp, #0]
   2995c:	f8cd 3003 	str.w	r3, [sp, #3]
   29960:	f022 fcb4 	bl	4c2cc <memcmp>
}
   29964:	fab0 f080 	clz	r0, r0
   29968:	0940      	lsrs	r0, r0, #5
   2996a:	b003      	add	sp, #12
   2996c:	f85d fb04 	ldr.w	pc, [sp], #4
   29970:	20006c64 	.word	0x20006c64
   29974:	20006c6d 	.word	0x20006c6d

00029978 <set_profile_address>:
void set_profile_address(uint8_t index, const bt_addr_le_t *addr) {
   29978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2997c:	4607      	mov	r7, r0
   2997e:	b08c      	sub	sp, #48	; 0x30
   29980:	4688      	mov	r8, r1
   29982:	2616      	movs	r6, #22
    bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   29984:	a904      	add	r1, sp, #16
   29986:	fb17 f406 	smulbb	r4, r7, r6
    memcpy(&profiles[index].peer, addr, sizeof(bt_addr_le_t));
   2998a:	4d0d      	ldr	r5, [pc, #52]	; (299c0 <set_profile_address+0x48>)
    bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   2998c:	4640      	mov	r0, r8
   2998e:	f7ff ff09 	bl	297a4 <bt_addr_le_to_str.constprop.5>
    memcpy(&profiles[index].peer, addr, sizeof(bt_addr_le_t));
   29992:	f104 000f 	add.w	r0, r4, #15
   29996:	4641      	mov	r1, r8
   29998:	2207      	movs	r2, #7
   2999a:	4428      	add	r0, r5
   2999c:	f022 fca6 	bl	4c2ec <memcpy>
    sprintf(setting_name, "ble/profiles/%d", index);
   299a0:	463a      	mov	r2, r7
   299a2:	4908      	ldr	r1, [pc, #32]	; (299c4 <set_profile_address+0x4c>)
   299a4:	4668      	mov	r0, sp
   299a6:	f003 fb65 	bl	2d074 <sprintf>
    settings_save_one(setting_name, &profiles[index], sizeof(struct zmk_ble_profile));
   299aa:	4632      	mov	r2, r6
   299ac:	1929      	adds	r1, r5, r4
   299ae:	4668      	mov	r0, sp
   299b0:	f002 fac8 	bl	2bf44 <settings_save_one>
    k_work_submit(&raise_profile_changed_event_work);
   299b4:	4804      	ldr	r0, [pc, #16]	; (299c8 <set_profile_address+0x50>)
   299b6:	f01f f8eb 	bl	48b90 <k_work_submit>
}
   299ba:	b00c      	add	sp, #48	; 0x30
   299bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   299c0:	20006c6d 	.word	0x20006c6d
   299c4:	00053fa7 	.word	0x00053fa7
   299c8:	200002d0 	.word	0x200002d0

000299cc <zmk_ble_active_profile_is_connected>:
bool zmk_ble_active_profile_is_connected() {
   299cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
bt_addr_le_t *zmk_ble_active_profile_addr() { return &profiles[active_profile].peer; }
   299ce:	4b0f      	ldr	r3, [pc, #60]	; (29a0c <zmk_ble_active_profile_is_connected+0x40>)
   299d0:	781c      	ldrb	r4, [r3, #0]
   299d2:	4b0f      	ldr	r3, [pc, #60]	; (29a10 <zmk_ble_active_profile_is_connected+0x44>)
   299d4:	2216      	movs	r2, #22
   299d6:	fb02 3404 	mla	r4, r2, r4, r3
   299da:	340f      	adds	r4, #15
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   299dc:	2500      	movs	r5, #0
   299de:	2207      	movs	r2, #7
   299e0:	4669      	mov	r1, sp
   299e2:	4620      	mov	r0, r4
   299e4:	9500      	str	r5, [sp, #0]
   299e6:	f8cd 5003 	str.w	r5, [sp, #3]
   299ea:	f022 fc6f 	bl	4c2cc <memcmp>
   299ee:	b910      	cbnz	r0, 299f6 <zmk_ble_active_profile_is_connected+0x2a>
        return false;
   299f0:	2000      	movs	r0, #0
}
   299f2:	b003      	add	sp, #12
   299f4:	bd30      	pop	{r4, r5, pc}
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
   299f6:	4621      	mov	r1, r4
   299f8:	4628      	mov	r0, r5
   299fa:	f023 fcea 	bl	4d3d2 <bt_conn_lookup_addr_le>
   299fe:	2800      	cmp	r0, #0
   29a00:	d0f6      	beq.n	299f0 <zmk_ble_active_profile_is_connected+0x24>
    bt_conn_unref(conn);
   29a02:	f023 fc04 	bl	4d20e <bt_conn_unref>
    return true;
   29a06:	2001      	movs	r0, #1
   29a08:	e7f3      	b.n	299f2 <zmk_ble_active_profile_is_connected+0x26>
   29a0a:	bf00      	nop
   29a0c:	20006c64 	.word	0x20006c64
   29a10:	20006c6d 	.word	0x20006c6d

00029a14 <update_advertising>:
int update_advertising() {
   29a14:	b5f0      	push	{r4, r5, r6, r7, lr}
   29a16:	b08d      	sub	sp, #52	; 0x34
    if (zmk_ble_active_profile_is_open()) {
   29a18:	f7ff ff94 	bl	29944 <zmk_ble_active_profile_is_open>
   29a1c:	4605      	mov	r5, r0
   29a1e:	b910      	cbnz	r0, 29a26 <update_advertising+0x12>
    } else if (!zmk_ble_active_profile_is_connected()) {
   29a20:	f7ff ffd4 	bl	299cc <zmk_ble_active_profile_is_connected>
   29a24:	b900      	cbnz	r0, 29a28 <update_advertising+0x14>
        desired_adv = ZMK_ADV_CONN;
   29a26:	2502      	movs	r5, #2
    switch (desired_adv + CURR_ADV(advertising_status)) {
   29a28:	4f22      	ldr	r7, [pc, #136]	; (29ab4 <update_advertising+0xa0>)
   29a2a:	783b      	ldrb	r3, [r7, #0]
   29a2c:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   29a30:	2d11      	cmp	r5, #17
   29a32:	463e      	mov	r6, r7
   29a34:	dc07      	bgt.n	29a46 <update_advertising+0x32>
   29a36:	2d02      	cmp	r5, #2
   29a38:	d02a      	beq.n	29a90 <update_advertising+0x7c>
   29a3a:	2d10      	cmp	r5, #16
   29a3c:	d022      	beq.n	29a84 <update_advertising+0x70>
    return 0;
   29a3e:	2400      	movs	r4, #0
};
   29a40:	4620      	mov	r0, r4
   29a42:	b00d      	add	sp, #52	; 0x34
   29a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (desired_adv + CURR_ADV(advertising_status)) {
   29a46:	2d20      	cmp	r5, #32
   29a48:	d01c      	beq.n	29a84 <update_advertising+0x70>
   29a4a:	2d12      	cmp	r5, #18
   29a4c:	f04f 0400 	mov.w	r4, #0
   29a50:	d1f6      	bne.n	29a40 <update_advertising+0x2c>
        CHECKED_ADV_STOP();
   29a52:	f005 fa99 	bl	2ef88 <bt_le_adv_stop>
   29a56:	703c      	strb	r4, [r7, #0]
   29a58:	4604      	mov	r4, r0
   29a5a:	2800      	cmp	r0, #0
   29a5c:	d1f0      	bne.n	29a40 <update_advertising+0x2c>
        CHECKED_OPEN_ADV();
   29a5e:	4e16      	ldr	r6, [pc, #88]	; (29ab8 <update_advertising+0xa4>)
   29a60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   29a62:	ad02      	add	r5, sp, #8
   29a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   29a66:	6833      	ldr	r3, [r6, #0]
   29a68:	602b      	str	r3, [r5, #0]
   29a6a:	2204      	movs	r2, #4
   29a6c:	9400      	str	r4, [sp, #0]
   29a6e:	4623      	mov	r3, r4
   29a70:	4912      	ldr	r1, [pc, #72]	; (29abc <update_advertising+0xa8>)
   29a72:	a802      	add	r0, sp, #8
   29a74:	f005 fa56 	bl	2ef24 <bt_le_adv_start>
   29a78:	4604      	mov	r4, r0
   29a7a:	2800      	cmp	r0, #0
   29a7c:	d1e0      	bne.n	29a40 <update_advertising+0x2c>
   29a7e:	2302      	movs	r3, #2
   29a80:	703b      	strb	r3, [r7, #0]
        break;
   29a82:	e7dd      	b.n	29a40 <update_advertising+0x2c>
        CHECKED_ADV_STOP();
   29a84:	f005 fa80 	bl	2ef88 <bt_le_adv_stop>
   29a88:	2300      	movs	r3, #0
   29a8a:	4604      	mov	r4, r0
   29a8c:	7033      	strb	r3, [r6, #0]
   29a8e:	e7d7      	b.n	29a40 <update_advertising+0x2c>
        CHECKED_OPEN_ADV();
   29a90:	4e09      	ldr	r6, [pc, #36]	; (29ab8 <update_advertising+0xa4>)
   29a92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   29a94:	ac07      	add	r4, sp, #28
   29a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   29a98:	6833      	ldr	r3, [r6, #0]
   29a9a:	6023      	str	r3, [r4, #0]
   29a9c:	2300      	movs	r3, #0
   29a9e:	9300      	str	r3, [sp, #0]
   29aa0:	2204      	movs	r2, #4
   29aa2:	4906      	ldr	r1, [pc, #24]	; (29abc <update_advertising+0xa8>)
   29aa4:	a807      	add	r0, sp, #28
   29aa6:	f005 fa3d 	bl	2ef24 <bt_le_adv_start>
   29aaa:	4604      	mov	r4, r0
   29aac:	2800      	cmp	r0, #0
   29aae:	d1c7      	bne.n	29a40 <update_advertising+0x2c>
   29ab0:	703d      	strb	r5, [r7, #0]
        break;
   29ab2:	e7c5      	b.n	29a40 <update_advertising+0x2c>
   29ab4:	20006c65 	.word	0x20006c65
   29ab8:	00051da0 	.word	0x00051da0
   29abc:	00052504 	.word	0x00052504

00029ac0 <auth_pairing_complete>:

    return BT_SECURITY_ERR_SUCCESS;
};
#endif /* IS_HOST_PERIPHERAL */

static void auth_pairing_complete(struct bt_conn *conn, bool bonded) {
   29ac0:	b530      	push	{r4, r5, lr}
   29ac2:	b091      	sub	sp, #68	; 0x44
   29ac4:	4605      	mov	r5, r0
    struct bt_conn_info info;
    char addr[BT_ADDR_LE_STR_LEN];
    const bt_addr_le_t *dst = bt_conn_get_dst(conn);
   29ac6:	f023 fc86 	bl	4d3d6 <bt_conn_get_dst>

    bt_addr_le_to_str(dst, addr, sizeof(addr));
   29aca:	4669      	mov	r1, sp
    const bt_addr_le_t *dst = bt_conn_get_dst(conn);
   29acc:	4604      	mov	r4, r0
    bt_addr_le_to_str(dst, addr, sizeof(addr));
   29ace:	f7ff fe69 	bl	297a4 <bt_addr_le_to_str.constprop.5>
    bt_conn_get_info(conn, &info);
   29ad2:	a908      	add	r1, sp, #32
   29ad4:	4628      	mov	r0, r5
   29ad6:	f006 fa55 	bl	2ff84 <bt_conn_get_info>

    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   29ada:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   29ade:	2b01      	cmp	r3, #1
   29ae0:	d105      	bne.n	29aee <auth_pairing_complete+0x2e>
        LOG_DBG("SKIPPING FOR ROLE %d", info.role);
        return;
    }

#if IS_HOST_PERIPHERAL
    if (!zmk_ble_active_profile_is_open()) {
   29ae2:	f7ff ff2f 	bl	29944 <zmk_ble_active_profile_is_open>
        LOG_ERR("Pairing completed but current profile is not open: %s", log_strdup(addr));
        bt_unpair(BT_ID_DEFAULT, dst);
   29ae6:	4621      	mov	r1, r4
    if (!zmk_ble_active_profile_is_open()) {
   29ae8:	b918      	cbnz	r0, 29af2 <auth_pairing_complete+0x32>
        bt_unpair(BT_ID_DEFAULT, dst);
   29aea:	f004 fb5b 	bl	2e1a4 <bt_unpair>
    }
#endif /* IS_HOST_PERIPHERAL */

    set_profile_address(active_profile, dst);
    update_advertising();
};
   29aee:	b011      	add	sp, #68	; 0x44
   29af0:	bd30      	pop	{r4, r5, pc}
    set_profile_address(active_profile, dst);
   29af2:	4b03      	ldr	r3, [pc, #12]	; (29b00 <auth_pairing_complete+0x40>)
   29af4:	7818      	ldrb	r0, [r3, #0]
   29af6:	f7ff ff3f 	bl	29978 <set_profile_address>
    update_advertising();
   29afa:	f7ff ff8b 	bl	29a14 <update_advertising>
   29afe:	e7f6      	b.n	29aee <auth_pairing_complete+0x2e>
   29b00:	20006c64 	.word	0x20006c64

00029b04 <connected>:
static void connected(struct bt_conn *conn, uint8_t err) {
   29b04:	b530      	push	{r4, r5, lr}
   29b06:	b091      	sub	sp, #68	; 0x44
   29b08:	460d      	mov	r5, r1
    bt_conn_get_info(conn, &info);
   29b0a:	a908      	add	r1, sp, #32
static void connected(struct bt_conn *conn, uint8_t err) {
   29b0c:	4604      	mov	r4, r0
    bt_conn_get_info(conn, &info);
   29b0e:	f006 fa39 	bl	2ff84 <bt_conn_get_info>
    if (info.role != BT_CONN_ROLE_PERIPHERAL) {
   29b12:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   29b16:	2b01      	cmp	r3, #1
   29b18:	d10b      	bne.n	29b32 <connected+0x2e>
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   29b1a:	4620      	mov	r0, r4
   29b1c:	f023 fc5b 	bl	4d3d6 <bt_conn_get_dst>
   29b20:	4669      	mov	r1, sp
   29b22:	f7ff fe3f 	bl	297a4 <bt_addr_le_to_str.constprop.5>
    advertising_status = ZMK_ADV_NONE;
   29b26:	4b0b      	ldr	r3, [pc, #44]	; (29b54 <connected+0x50>)
   29b28:	2200      	movs	r2, #0
   29b2a:	701a      	strb	r2, [r3, #0]
    if (err) {
   29b2c:	b11d      	cbz	r5, 29b36 <connected+0x32>
        update_advertising();
   29b2e:	f7ff ff71 	bl	29a14 <update_advertising>
}
   29b32:	b011      	add	sp, #68	; 0x44
   29b34:	bd30      	pop	{r4, r5, pc}
    if (bt_conn_set_security(conn, BT_SECURITY_L2)) {
   29b36:	2102      	movs	r1, #2
   29b38:	4620      	mov	r0, r4
   29b3a:	f023 fbed 	bl	4d318 <bt_conn_set_security>
    update_advertising();
   29b3e:	f7ff ff69 	bl	29a14 <update_advertising>
    if (is_conn_active_profile(conn)) {
   29b42:	4620      	mov	r0, r4
   29b44:	f7ff fec8 	bl	298d8 <is_conn_active_profile>
   29b48:	2800      	cmp	r0, #0
   29b4a:	d0f2      	beq.n	29b32 <connected+0x2e>
        k_work_submit(&raise_profile_changed_event_work);
   29b4c:	4802      	ldr	r0, [pc, #8]	; (29b58 <connected+0x54>)
   29b4e:	f01f f81f 	bl	48b90 <k_work_submit>
   29b52:	e7ee      	b.n	29b32 <connected+0x2e>
   29b54:	20006c65 	.word	0x20006c65
   29b58:	200002d0 	.word	0x200002d0

00029b5c <zmk_ble_init>:
    }

    update_advertising();
}

static int zmk_ble_init(const struct device *_arg) {
   29b5c:	b510      	push	{r4, lr}
    int err = bt_enable(NULL);
   29b5e:	2000      	movs	r0, #0
   29b60:	f004 fc6c 	bl	2e43c <bt_enable>

    if (err) {
   29b64:	4604      	mov	r4, r0
   29b66:	b9c0      	cbnz	r0, 29b9a <zmk_ble_init+0x3e>
        LOG_ERR("BLUETOOTH FAILED (%d)", err);
        return err;
    }

#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   29b68:	f002 fb38 	bl	2c1dc <settings_subsys_init>

    err = settings_register(&profiles_handler);
   29b6c:	480c      	ldr	r0, [pc, #48]	; (29ba0 <zmk_ble_init+0x44>)
   29b6e:	f002 fa77 	bl	2c060 <settings_register>
    if (err) {
   29b72:	4604      	mov	r4, r0
   29b74:	b988      	cbnz	r0, 29b9a <zmk_ble_init+0x3e>
        LOG_ERR("Failed to setup the profile settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&ble_save_work, ble_save_profile_work);
   29b76:	490b      	ldr	r1, [pc, #44]	; (29ba4 <zmk_ble_init+0x48>)
   29b78:	480b      	ldr	r0, [pc, #44]	; (29ba8 <zmk_ble_init+0x4c>)
   29b7a:	f027 fb1e 	bl	511ba <k_work_init_delayable>

    settings_load_subtree("ble");
   29b7e:	480b      	ldr	r0, [pc, #44]	; (29bac <zmk_ble_init+0x50>)
   29b80:	f002 fa18 	bl	2bfb4 <settings_load_subtree>
    settings_load_subtree("bt");
   29b84:	480a      	ldr	r0, [pc, #40]	; (29bb0 <zmk_ble_init+0x54>)
   29b86:	f002 fa15 	bl	2bfb4 <settings_load_subtree>
            LOG_ERR("Failed to delete setting: %d", err);
        }
    }
#endif

    bt_conn_cb_register(&conn_callbacks);
   29b8a:	480a      	ldr	r0, [pc, #40]	; (29bb4 <zmk_ble_init+0x58>)
   29b8c:	f006 f984 	bl	2fe98 <bt_conn_cb_register>
    bt_conn_auth_cb_register(&zmk_ble_auth_cb_display);
   29b90:	4809      	ldr	r0, [pc, #36]	; (29bb8 <zmk_ble_init+0x5c>)
   29b92:	f006 fc85 	bl	304a0 <bt_conn_auth_cb_register>
    update_advertising();
   29b96:	f7ff ff3d 	bl	29a14 <update_advertising>

    zmk_ble_ready(0);

    return 0;
}
   29b9a:	4620      	mov	r0, r4
   29b9c:	bd10      	pop	{r4, pc}
   29b9e:	bf00      	nop
   29ba0:	200002b8 	.word	0x200002b8
   29ba4:	00029791 	.word	0x00029791
   29ba8:	20001290 	.word	0x20001290
   29bac:	00053fc3 	.word	0x00053fc3
   29bb0:	00053fc7 	.word	0x00053fc7
   29bb4:	20000298 	.word	0x20000298
   29bb8:	200002f0 	.word	0x200002f0

00029bbc <zmk_ble_active_profile_addr>:
bt_addr_le_t *zmk_ble_active_profile_addr() { return &profiles[active_profile].peer; }
   29bbc:	4b03      	ldr	r3, [pc, #12]	; (29bcc <zmk_ble_active_profile_addr+0x10>)
   29bbe:	7818      	ldrb	r0, [r3, #0]
   29bc0:	4b03      	ldr	r3, [pc, #12]	; (29bd0 <zmk_ble_active_profile_addr+0x14>)
   29bc2:	2216      	movs	r2, #22
   29bc4:	fb02 3000 	mla	r0, r2, r0, r3
   29bc8:	300f      	adds	r0, #15
   29bca:	4770      	bx	lr
   29bcc:	20006c64 	.word	0x20006c64
   29bd0:	20006c6d 	.word	0x20006c6d

00029bd4 <zmk_ble_set_peripheral_addr>:
void zmk_ble_set_peripheral_addr(bt_addr_le_t *addr) {
   29bd4:	b510      	push	{r4, lr}
    memcpy(&peripheral_addr, addr, sizeof(bt_addr_le_t));
   29bd6:	4601      	mov	r1, r0
void zmk_ble_set_peripheral_addr(bt_addr_le_t *addr) {
   29bd8:	4604      	mov	r4, r0
    memcpy(&peripheral_addr, addr, sizeof(bt_addr_le_t));
   29bda:	2207      	movs	r2, #7
   29bdc:	4804      	ldr	r0, [pc, #16]	; (29bf0 <zmk_ble_set_peripheral_addr+0x1c>)
   29bde:	f022 fb85 	bl	4c2ec <memcpy>
    settings_save_one("ble/peripheral_address", addr, sizeof(bt_addr_le_t));
   29be2:	4621      	mov	r1, r4
   29be4:	2207      	movs	r2, #7
   29be6:	4803      	ldr	r0, [pc, #12]	; (29bf4 <zmk_ble_set_peripheral_addr+0x20>)
}
   29be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    settings_save_one("ble/peripheral_address", addr, sizeof(bt_addr_le_t));
   29bec:	f002 b9aa 	b.w	2bf44 <settings_save_one>
   29bf0:	20006c66 	.word	0x20006c66
   29bf4:	00053fca 	.word	0x00053fca

00029bf8 <zmk_battery_timer>:
    }
}

K_WORK_DEFINE(battery_work, zmk_battery_work);

static void zmk_battery_timer(struct k_timer *timer) { k_work_submit(&battery_work); }
   29bf8:	4801      	ldr	r0, [pc, #4]	; (29c00 <zmk_battery_timer+0x8>)
   29bfa:	f01e bfc9 	b.w	48b90 <k_work_submit>
   29bfe:	bf00      	nop
   29c00:	20000318 	.word	0x20000318

00029c04 <zmk_battery_update>:
static int zmk_battery_update(const struct device *battery) {
   29c04:	b513      	push	{r0, r1, r4, lr}
   29c06:	4604      	mov	r4, r0
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   29c08:	6883      	ldr	r3, [r0, #8]
   29c0a:	212c      	movs	r1, #44	; 0x2c
   29c0c:	68db      	ldr	r3, [r3, #12]
   29c0e:	4798      	blx	r3
    if (rc != 0) {
   29c10:	b9a8      	cbnz	r0, 29c3e <zmk_battery_update+0x3a>
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   29c12:	68a3      	ldr	r3, [r4, #8]
   29c14:	466a      	mov	r2, sp
   29c16:	691b      	ldr	r3, [r3, #16]
   29c18:	212c      	movs	r1, #44	; 0x2c
   29c1a:	4620      	mov	r0, r4
   29c1c:	4798      	blx	r3
    if (rc != 0) {
   29c1e:	b970      	cbnz	r0, 29c3e <zmk_battery_update+0x3a>
    if (last_state_of_charge != state_of_charge.val1) {
   29c20:	4c08      	ldr	r4, [pc, #32]	; (29c44 <zmk_battery_update+0x40>)
   29c22:	9b00      	ldr	r3, [sp, #0]
   29c24:	7822      	ldrb	r2, [r4, #0]
   29c26:	429a      	cmp	r2, r3
   29c28:	d009      	beq.n	29c3e <zmk_battery_update+0x3a>
        last_state_of_charge = state_of_charge.val1;
   29c2a:	b2d8      	uxtb	r0, r3
   29c2c:	7020      	strb	r0, [r4, #0]
        rc = bt_bas_set_battery_level(last_state_of_charge);
   29c2e:	f001 f869 	bl	2ad04 <bt_bas_set_battery_level>
        if (rc != 0) {
   29c32:	b920      	cbnz	r0, 29c3e <zmk_battery_update+0x3a>
        rc = ZMK_EVENT_RAISE(new_zmk_battery_state_changed(
   29c34:	7820      	ldrb	r0, [r4, #0]
   29c36:	f7ff fc53 	bl	294e0 <new_zmk_battery_state_changed>
   29c3a:	f01f fecc 	bl	499d6 <zmk_event_manager_raise>
}
   29c3e:	b002      	add	sp, #8
   29c40:	bd10      	pop	{r4, pc}
   29c42:	bf00      	nop
   29c44:	20006cdb 	.word	0x20006cdb

00029c48 <zmk_battery_work>:
    int rc = zmk_battery_update(battery);
   29c48:	4b01      	ldr	r3, [pc, #4]	; (29c50 <zmk_battery_work+0x8>)
   29c4a:	6818      	ldr	r0, [r3, #0]
   29c4c:	f7ff bfda 	b.w	29c04 <zmk_battery_update>
   29c50:	20003cc0 	.word	0x20003cc0

00029c54 <zmk_battery_init>:

K_TIMER_DEFINE(battery_timer, zmk_battery_timer, NULL);

static int zmk_battery_init(const struct device *_arg) {
   29c54:	b513      	push	{r0, r1, r4, lr}
   29c56:	480c      	ldr	r0, [pc, #48]	; (29c88 <zmk_battery_init+0x34>)
   29c58:	f01e fa5c 	bl	48114 <z_impl_device_get_binding>
    battery = device_get_binding("BATTERY");
   29c5c:	4a0b      	ldr	r2, [pc, #44]	; (29c8c <zmk_battery_init+0x38>)
   29c5e:	6010      	str	r0, [r2, #0]

    if (battery == NULL) {
   29c60:	b170      	cbz	r0, 29c80 <zmk_battery_init+0x2c>
        LOG_DBG("No battery device labelled BATTERY found.");
        return -ENODEV;
    }

    int rc = zmk_battery_update(battery);
   29c62:	f7ff ffcf 	bl	29c04 <zmk_battery_update>

    if (rc != 0) {
   29c66:	4604      	mov	r4, r0
   29c68:	b938      	cbnz	r0, 29c7a <zmk_battery_init+0x26>
   29c6a:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   29c6e:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
   29c70:	4807      	ldr	r0, [pc, #28]	; (29c90 <zmk_battery_init+0x3c>)
   29c72:	e9cd 2300 	strd	r2, r3, [sp]
   29c76:	f01f fd5b 	bl	49730 <z_impl_k_timer_start>
    }

    k_timer_start(&battery_timer, K_MINUTES(1), K_MINUTES(1));

    return 0;
}
   29c7a:	4620      	mov	r0, r4
   29c7c:	b002      	add	sp, #8
   29c7e:	bd10      	pop	{r4, pc}
        return -ENODEV;
   29c80:	f06f 0412 	mvn.w	r4, #18
   29c84:	e7f9      	b.n	29c7a <zmk_battery_init+0x26>
   29c86:	bf00      	nop
   29c88:	00053fe1 	.word	0x00053fe1
   29c8c:	20003cc0 	.word	0x20003cc0
   29c90:	20000e28 	.word	0x20000e28

00029c94 <start_scan>:
    if (type == BT_GAP_ADV_TYPE_ADV_IND || type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
        bt_data_parse(ad, split_central_eir_found, (void *)addr);
    }
}

static int start_scan(void) {
   29c94:	b530      	push	{r4, r5, lr}
    int err;

    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, split_central_device_found);
   29c96:	4d06      	ldr	r5, [pc, #24]	; (29cb0 <start_scan+0x1c>)
   29c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
static int start_scan(void) {
   29c9a:	b087      	sub	sp, #28
    err = bt_le_scan_start(BT_LE_SCAN_PASSIVE, split_central_device_found);
   29c9c:	ac01      	add	r4, sp, #4
   29c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   29ca0:	682b      	ldr	r3, [r5, #0]
   29ca2:	4904      	ldr	r1, [pc, #16]	; (29cb4 <start_scan+0x20>)
   29ca4:	6023      	str	r3, [r4, #0]
   29ca6:	a801      	add	r0, sp, #4
   29ca8:	f005 fbd0 	bl	2f44c <bt_le_scan_start>
        return err;
    }

    LOG_DBG("Scanning successfully started");
    return 0;
}
   29cac:	b007      	add	sp, #28
   29cae:	bd30      	pop	{r4, r5, pc}
   29cb0:	00051db4 	.word	0x00051db4
   29cb4:	00029d75 	.word	0x00029d75

00029cb8 <zmk_split_bt_central_init>:

    struct zmk_split_run_behavior_payload_wrapper wrapper = {.source = source, .payload = payload};
    return split_bt_invoke_behavior_payload(wrapper);
}

int zmk_split_bt_central_init(const struct device *_arg) {
   29cb8:	b507      	push	{r0, r1, r2, lr}
    k_work_queue_start(&split_central_split_run_q, split_central_split_run_q_stack,
   29cba:	2300      	movs	r3, #0
   29cbc:	9300      	str	r3, [sp, #0]
   29cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
   29cc2:	2305      	movs	r3, #5
   29cc4:	4905      	ldr	r1, [pc, #20]	; (29cdc <zmk_split_bt_central_init+0x24>)
   29cc6:	4806      	ldr	r0, [pc, #24]	; (29ce0 <zmk_split_bt_central_init+0x28>)
   29cc8:	f01e ff68 	bl	48b9c <k_work_queue_start>
                       K_THREAD_STACK_SIZEOF(split_central_split_run_q_stack),
                       CONFIG_ZMK_BLE_THREAD_PRIORITY, NULL);
    bt_conn_cb_register(&conn_callbacks);
   29ccc:	4805      	ldr	r0, [pc, #20]	; (29ce4 <zmk_split_bt_central_init+0x2c>)
   29cce:	f006 f8e3 	bl	2fe98 <bt_conn_cb_register>

    return start_scan();
}
   29cd2:	b003      	add	sp, #12
   29cd4:	f85d eb04 	ldr.w	lr, [sp], #4
    return start_scan();
   29cd8:	f7ff bfdc 	b.w	29c94 <start_scan>
   29cdc:	20006db0 	.word	0x20006db0
   29ce0:	200012c0 	.word	0x200012c0
   29ce4:	20000328 	.word	0x20000328

00029ce8 <peripheral_slot_index_for_conn.part.0>:
        if (peripherals[i].conn == conn) {
   29ce8:	4b03      	ldr	r3, [pc, #12]	; (29cf8 <peripheral_slot_index_for_conn.part.0+0x10>)
   29cea:	685b      	ldr	r3, [r3, #4]
   29cec:	4283      	cmp	r3, r0
}
   29cee:	bf14      	ite	ne
   29cf0:	f06f 0015 	mvnne.w	r0, #21
   29cf4:	2000      	moveq	r0, #0
   29cf6:	4770      	bx	lr
   29cf8:	20003cc4 	.word	0x20003cc4

00029cfc <bt_addr_le_to_str.constprop.7>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   29cfc:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
   29cfe:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   29d00:	b08a      	sub	sp, #40	; 0x28
   29d02:	4604      	mov	r4, r0
   29d04:	460e      	mov	r6, r1
   29d06:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   29d08:	2b03      	cmp	r3, #3
   29d0a:	d820      	bhi.n	29d4e <bt_addr_le_to_str.constprop.7+0x52>
   29d0c:	e8df f003 	tbb	[pc, r3]
   29d10:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
   29d14:	4911      	ldr	r1, [pc, #68]	; (29d5c <bt_addr_le_to_str.constprop.7+0x60>)
		strcpy(type, "random");
   29d16:	4628      	mov	r0, r5
   29d18:	f022 faac 	bl	4c274 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   29d1c:	7863      	ldrb	r3, [r4, #1]
   29d1e:	9304      	str	r3, [sp, #16]
   29d20:	78a3      	ldrb	r3, [r4, #2]
   29d22:	9303      	str	r3, [sp, #12]
   29d24:	78e3      	ldrb	r3, [r4, #3]
   29d26:	9302      	str	r3, [sp, #8]
   29d28:	7923      	ldrb	r3, [r4, #4]
   29d2a:	9301      	str	r3, [sp, #4]
   29d2c:	7963      	ldrb	r3, [r4, #5]
   29d2e:	9300      	str	r3, [sp, #0]
   29d30:	9505      	str	r5, [sp, #20]
   29d32:	79a3      	ldrb	r3, [r4, #6]
   29d34:	4a0a      	ldr	r2, [pc, #40]	; (29d60 <bt_addr_le_to_str.constprop.7+0x64>)
   29d36:	211e      	movs	r1, #30
   29d38:	4630      	mov	r0, r6
   29d3a:	f020 f9dc 	bl	4a0f6 <snprintk>
}
   29d3e:	b00a      	add	sp, #40	; 0x28
   29d40:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   29d42:	4908      	ldr	r1, [pc, #32]	; (29d64 <bt_addr_le_to_str.constprop.7+0x68>)
   29d44:	e7e7      	b.n	29d16 <bt_addr_le_to_str.constprop.7+0x1a>
		strcpy(type, "public-id");
   29d46:	4908      	ldr	r1, [pc, #32]	; (29d68 <bt_addr_le_to_str.constprop.7+0x6c>)
   29d48:	e7e5      	b.n	29d16 <bt_addr_le_to_str.constprop.7+0x1a>
		strcpy(type, "random-id");
   29d4a:	4908      	ldr	r1, [pc, #32]	; (29d6c <bt_addr_le_to_str.constprop.7+0x70>)
   29d4c:	e7e3      	b.n	29d16 <bt_addr_le_to_str.constprop.7+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   29d4e:	4a08      	ldr	r2, [pc, #32]	; (29d70 <bt_addr_le_to_str.constprop.7+0x74>)
   29d50:	210a      	movs	r1, #10
   29d52:	4628      	mov	r0, r5
   29d54:	f020 f9cf 	bl	4a0f6 <snprintk>
		break;
   29d58:	e7e0      	b.n	29d1c <bt_addr_le_to_str.constprop.7+0x20>
   29d5a:	bf00      	nop
   29d5c:	00053f5b 	.word	0x00053f5b
   29d60:	00053f84 	.word	0x00053f84
   29d64:	00053f62 	.word	0x00053f62
   29d68:	00053f69 	.word	0x00053f69
   29d6c:	00053f73 	.word	0x00053f73
   29d70:	00053f7d 	.word	0x00053f7d

00029d74 <split_central_device_found>:
                                       struct net_buf_simple *ad) {
   29d74:	b570      	push	{r4, r5, r6, lr}
   29d76:	b088      	sub	sp, #32
   29d78:	4616      	mov	r6, r2
    bt_addr_le_to_str(addr, dev, sizeof(dev));
   29d7a:	4669      	mov	r1, sp
                                       struct net_buf_simple *ad) {
   29d7c:	4605      	mov	r5, r0
   29d7e:	461c      	mov	r4, r3
    bt_addr_le_to_str(addr, dev, sizeof(dev));
   29d80:	f7ff ffbc 	bl	29cfc <bt_addr_le_to_str.constprop.7>
    if (type == BT_GAP_ADV_TYPE_ADV_IND || type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   29d84:	2e01      	cmp	r6, #1
   29d86:	d804      	bhi.n	29d92 <split_central_device_found+0x1e>
        bt_data_parse(ad, split_central_eir_found, (void *)addr);
   29d88:	462a      	mov	r2, r5
   29d8a:	4903      	ldr	r1, [pc, #12]	; (29d98 <split_central_device_found+0x24>)
   29d8c:	4620      	mov	r0, r4
   29d8e:	f022 fee4 	bl	4cb5a <bt_data_parse>
}
   29d92:	b008      	add	sp, #32
   29d94:	bd70      	pop	{r4, r5, r6, pc}
   29d96:	bf00      	nop
   29d98:	0002a191 	.word	0x0002a191

00029d9c <split_bt_invoke_behavior_payload>:
split_bt_invoke_behavior_payload(struct zmk_split_run_behavior_payload_wrapper payload_wrapper) {
   29d9c:	b084      	sub	sp, #16
   29d9e:	b510      	push	{r4, lr}
   29da0:	b088      	sub	sp, #32
   29da2:	ac0a      	add	r4, sp, #40	; 0x28
   29da4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return z_impl_k_msgq_put(msgq, data, timeout);
   29da8:	f640 42cd 	movw	r2, #3277	; 0xccd
   29dac:	4621      	mov	r1, r4
   29dae:	2300      	movs	r3, #0
   29db0:	480f      	ldr	r0, [pc, #60]	; (29df0 <split_bt_invoke_behavior_payload+0x54>)
   29db2:	f01e fbdb 	bl	4856c <z_impl_k_msgq_put>
    if (err) {
   29db6:	4604      	mov	r4, r0
   29db8:	b1a8      	cbz	r0, 29de6 <split_bt_invoke_behavior_payload+0x4a>
        switch (err) {
   29dba:	f110 0f0b 	cmn.w	r0, #11
   29dbe:	d10c      	bne.n	29dda <split_bt_invoke_behavior_payload+0x3e>
	return z_impl_k_msgq_get(msgq, data, timeout);
   29dc0:	2200      	movs	r2, #0
   29dc2:	2300      	movs	r3, #0
   29dc4:	a903      	add	r1, sp, #12
   29dc6:	480a      	ldr	r0, [pc, #40]	; (29df0 <split_bt_invoke_behavior_payload+0x54>)
   29dc8:	f01e fc26 	bl	48618 <z_impl_k_msgq_get>
            return split_bt_invoke_behavior_payload(payload_wrapper);
   29dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29dce:	9300      	str	r3, [sp, #0]
   29dd0:	ab0a      	add	r3, sp, #40	; 0x28
   29dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   29dd4:	f7ff ffe2 	bl	29d9c <split_bt_invoke_behavior_payload>
   29dd8:	4604      	mov	r4, r0
};
   29dda:	4620      	mov	r0, r4
   29ddc:	b008      	add	sp, #32
   29dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29de2:	b004      	add	sp, #16
   29de4:	4770      	bx	lr
    k_work_submit_to_queue(&split_central_split_run_q, &split_central_split_run_work);
   29de6:	4903      	ldr	r1, [pc, #12]	; (29df4 <split_bt_invoke_behavior_payload+0x58>)
   29de8:	4803      	ldr	r0, [pc, #12]	; (29df8 <split_bt_invoke_behavior_payload+0x5c>)
   29dea:	f027 f9c9 	bl	51180 <k_work_submit_to_queue>
    return 0;
   29dee:	e7f4      	b.n	29dda <split_bt_invoke_behavior_payload+0x3e>
   29df0:	20000fcc 	.word	0x20000fcc
   29df4:	20000358 	.word	0x20000358
   29df8:	200012c0 	.word	0x200012c0

00029dfc <peripheral_event_work_callback>:
void peripheral_event_work_callback(struct k_work *work) {
   29dfc:	b530      	push	{r4, r5, lr}
   29dfe:	4d0c      	ldr	r5, [pc, #48]	; (29e30 <peripheral_event_work_callback+0x34>)
   29e00:	b089      	sub	sp, #36	; 0x24
   29e02:	ac02      	add	r4, sp, #8
   29e04:	2200      	movs	r2, #0
   29e06:	2300      	movs	r3, #0
   29e08:	4621      	mov	r1, r4
   29e0a:	4628      	mov	r0, r5
   29e0c:	f01e fc04 	bl	48618 <z_impl_k_msgq_get>
    while (k_msgq_get(&peripheral_event_msgq, &ev, K_NO_WAIT) == 0) {
   29e10:	b108      	cbz	r0, 29e16 <peripheral_event_work_callback+0x1a>
}
   29e12:	b009      	add	sp, #36	; 0x24
   29e14:	bd30      	pop	{r4, r5, pc}
        ZMK_EVENT_RAISE(new_zmk_position_state_changed(ev));
   29e16:	ab08      	add	r3, sp, #32
   29e18:	e913 0003 	ldmdb	r3, {r0, r1}
   29e1c:	e88d 0003 	stmia.w	sp, {r0, r1}
   29e20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   29e24:	f7ff fad8 	bl	293d8 <new_zmk_position_state_changed>
   29e28:	f01f fdd5 	bl	499d6 <zmk_event_manager_raise>
   29e2c:	e7ea      	b.n	29e04 <peripheral_event_work_callback+0x8>
   29e2e:	bf00      	nop
   29e30:	20000f0c 	.word	0x20000f0c

00029e34 <split_central_split_run_callback>:
void split_central_split_run_callback(struct k_work *work) {
   29e34:	b570      	push	{r4, r5, r6, lr}
   29e36:	4e10      	ldr	r6, [pc, #64]	; (29e78 <split_central_split_run_callback+0x44>)
        if (peripherals[payload_wrapper.source].state != PERIPHERAL_SLOT_STATE_CONNECTED) {
   29e38:	4c10      	ldr	r4, [pc, #64]	; (29e7c <split_central_split_run_callback+0x48>)
void split_central_split_run_callback(struct k_work *work) {
   29e3a:	b08a      	sub	sp, #40	; 0x28
   29e3c:	2200      	movs	r2, #0
   29e3e:	2300      	movs	r3, #0
   29e40:	a905      	add	r1, sp, #20
   29e42:	4630      	mov	r0, r6
   29e44:	f01e fbe8 	bl	48618 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_split_central_split_run_msgq, &payload_wrapper, K_NO_WAIT) == 0) {
   29e48:	b108      	cbz	r0, 29e4e <split_central_split_run_callback+0x1a>
}
   29e4a:	b00a      	add	sp, #40	; 0x28
   29e4c:	bd70      	pop	{r4, r5, r6, pc}
        if (peripherals[payload_wrapper.source].state != PERIPHERAL_SLOT_STATE_CONNECTED) {
   29e4e:	f89d 2014 	ldrb.w	r2, [sp, #20]
   29e52:	237c      	movs	r3, #124	; 0x7c
   29e54:	4353      	muls	r3, r2
   29e56:	18e5      	adds	r5, r4, r3
   29e58:	5ce3      	ldrb	r3, [r4, r3]
   29e5a:	2b02      	cmp	r3, #2
   29e5c:	d1ee      	bne.n	29e3c <split_central_split_run_callback+0x8>
 */
static inline int bt_gatt_write_without_response(struct bt_conn *conn,
						 uint16_t handle, const void *data,
						 uint16_t length, bool sign)
{
	return bt_gatt_write_without_response_cb(conn, handle, data, length,
   29e5e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   29e62:	2301      	movs	r3, #1
   29e64:	9300      	str	r3, [sp, #0]
   29e66:	f10d 0215 	add.w	r2, sp, #21
   29e6a:	2313      	movs	r3, #19
   29e6c:	f8b5 1058 	ldrh.w	r1, [r5, #88]	; 0x58
   29e70:	6868      	ldr	r0, [r5, #4]
   29e72:	f025 f866 	bl	4ef42 <bt_gatt_write_without_response_cb>
   29e76:	e7e1      	b.n	29e3c <split_central_split_run_callback+0x8>
   29e78:	20000fcc 	.word	0x20000fcc
   29e7c:	20003cc4 	.word	0x20003cc4

00029e80 <peripheral_slot_for_conn>:
struct peripheral_slot *peripheral_slot_for_conn(struct bt_conn *conn) {
   29e80:	b508      	push	{r3, lr}
   29e82:	f7ff ff31 	bl	29ce8 <peripheral_slot_index_for_conn.part.0>
    if (idx < 0) {
   29e86:	2800      	cmp	r0, #0
    return &peripherals[idx];
   29e88:	bfa3      	ittte	ge
   29e8a:	4b03      	ldrge	r3, [pc, #12]	; (29e98 <peripheral_slot_for_conn+0x18>)
   29e8c:	227c      	movge	r2, #124	; 0x7c
   29e8e:	fb02 3000 	mlage	r0, r2, r0, r3
        return NULL;
   29e92:	2000      	movlt	r0, #0
}
   29e94:	bd08      	pop	{r3, pc}
   29e96:	bf00      	nop
   29e98:	20003cc4 	.word	0x20003cc4

00029e9c <split_central_process_connection>:
static void split_central_process_connection(struct bt_conn *conn) {
   29e9c:	b510      	push	{r4, lr}
    err = bt_conn_set_security(conn, BT_SECURITY_L2);
   29e9e:	2102      	movs	r1, #2
static void split_central_process_connection(struct bt_conn *conn) {
   29ea0:	b088      	sub	sp, #32
   29ea2:	4604      	mov	r4, r0
    err = bt_conn_set_security(conn, BT_SECURITY_L2);
   29ea4:	f023 fa38 	bl	4d318 <bt_conn_set_security>
    if (err) {
   29ea8:	b948      	cbnz	r0, 29ebe <split_central_process_connection+0x22>
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   29eaa:	4620      	mov	r0, r4
   29eac:	f7ff ffe8 	bl	29e80 <peripheral_slot_for_conn>
    if (slot == NULL) {
   29eb0:	b128      	cbz	r0, 29ebe <split_central_process_connection+0x22>
    if (!slot->subscribe_params.value_handle) {
   29eb2:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   29eb4:	b12b      	cbz	r3, 29ec2 <split_central_process_connection+0x26>
    bt_conn_get_info(conn, &info);
   29eb6:	4669      	mov	r1, sp
   29eb8:	4620      	mov	r0, r4
   29eba:	f006 f863 	bl	2ff84 <bt_conn_get_info>
}
   29ebe:	b008      	add	sp, #32
   29ec0:	bd10      	pop	{r4, pc}
        slot->discover_params.uuid = &split_service_uuid.uuid;
   29ec2:	4a09      	ldr	r2, [pc, #36]	; (29ee8 <split_central_process_connection+0x4c>)
   29ec4:	6082      	str	r2, [r0, #8]
        slot->discover_params.func = split_central_service_discovery_func;
   29ec6:	4a09      	ldr	r2, [pc, #36]	; (29eec <split_central_process_connection+0x50>)
   29ec8:	60c2      	str	r2, [r0, #12]
        slot->discover_params.start_handle = 0x0001;
   29eca:	2201      	movs	r2, #1
   29ecc:	8202      	strh	r2, [r0, #16]
        slot->discover_params.end_handle = 0xffff;
   29ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
   29ed2:	82c2      	strh	r2, [r0, #22]
        slot->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   29ed4:	7603      	strb	r3, [r0, #24]
        err = bt_gatt_discover(slot->conn, &slot->discover_params);
   29ed6:	f100 0108 	add.w	r1, r0, #8
   29eda:	6840      	ldr	r0, [r0, #4]
   29edc:	f008 f950 	bl	32180 <bt_gatt_discover>
        if (err) {
   29ee0:	2800      	cmp	r0, #0
   29ee2:	d0e8      	beq.n	29eb6 <split_central_process_connection+0x1a>
   29ee4:	e7eb      	b.n	29ebe <split_central_process_connection+0x22>
   29ee6:	bf00      	nop
   29ee8:	00053fe9 	.word	0x00053fe9
   29eec:	00029ef1 	.word	0x00029ef1

00029ef0 <split_central_service_discovery_func>:
                                                    struct bt_gatt_discover_params *params) {
   29ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29ef4:	4613      	mov	r3, r2
   29ef6:	b086      	sub	sp, #24
   29ef8:	4606      	mov	r6, r0
    if (!attr) {
   29efa:	460f      	mov	r7, r1
   29efc:	b939      	cbnz	r1, 29f0e <split_central_service_discovery_func+0x1e>
        (void)memset(params, 0, sizeof(*params));
   29efe:	2218      	movs	r2, #24
   29f00:	4618      	mov	r0, r3
   29f02:	f022 f9fe 	bl	4c302 <memset>
   29f06:	4638      	mov	r0, r7
}
   29f08:	b006      	add	sp, #24
   29f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   29f0e:	f7ff ffb7 	bl	29e80 <peripheral_slot_for_conn>
    if (slot == NULL) {
   29f12:	4604      	mov	r4, r0
   29f14:	2800      	cmp	r0, #0
   29f16:	d0f7      	beq.n	29f08 <split_central_service_discovery_func+0x18>
    if (bt_uuid_cmp(slot->discover_params.uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID))) {
   29f18:	4b13      	ldr	r3, [pc, #76]	; (29f68 <split_central_service_discovery_func+0x78>)
   29f1a:	f8d0 c008 	ldr.w	ip, [r0, #8]
   29f1e:	aa01      	add	r2, sp, #4
   29f20:	f103 0810 	add.w	r8, r3, #16
   29f24:	4696      	mov	lr, r2
   29f26:	6818      	ldr	r0, [r3, #0]
   29f28:	6859      	ldr	r1, [r3, #4]
   29f2a:	4615      	mov	r5, r2
   29f2c:	c503      	stmia	r5!, {r0, r1}
   29f2e:	3308      	adds	r3, #8
   29f30:	4543      	cmp	r3, r8
   29f32:	462a      	mov	r2, r5
   29f34:	d1f7      	bne.n	29f26 <split_central_service_discovery_func+0x36>
   29f36:	781b      	ldrb	r3, [r3, #0]
   29f38:	702b      	strb	r3, [r5, #0]
   29f3a:	4671      	mov	r1, lr
   29f3c:	4660      	mov	r0, ip
   29f3e:	f022 fac4 	bl	4c4ca <bt_uuid_cmp>
   29f42:	4605      	mov	r5, r0
   29f44:	b970      	cbnz	r0, 29f64 <split_central_service_discovery_func+0x74>
    slot->discover_params.func = split_central_chrc_discovery_func;
   29f46:	4b09      	ldr	r3, [pc, #36]	; (29f6c <split_central_service_discovery_func+0x7c>)
   29f48:	60e3      	str	r3, [r4, #12]
    slot->discover_params.start_handle = attr->handle + 1;
   29f4a:	8a3b      	ldrh	r3, [r7, #16]
    slot->discover_params.uuid = NULL;
   29f4c:	60a0      	str	r0, [r4, #8]
    slot->discover_params.start_handle = attr->handle + 1;
   29f4e:	3301      	adds	r3, #1
   29f50:	8223      	strh	r3, [r4, #16]
    slot->discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   29f52:	2303      	movs	r3, #3
   29f54:	7623      	strb	r3, [r4, #24]
    int err = bt_gatt_discover(conn, &slot->discover_params);
   29f56:	f104 0108 	add.w	r1, r4, #8
   29f5a:	4630      	mov	r0, r6
   29f5c:	f008 f910 	bl	32180 <bt_gatt_discover>
    return BT_GATT_ITER_STOP;
   29f60:	4628      	mov	r0, r5
   29f62:	e7d1      	b.n	29f08 <split_central_service_discovery_func+0x18>
        return BT_GATT_ITER_CONTINUE;
   29f64:	2001      	movs	r0, #1
   29f66:	e7cf      	b.n	29f08 <split_central_service_discovery_func+0x18>
   29f68:	00051dc8 	.word	0x00051dc8
   29f6c:	0002a045 	.word	0x0002a045

00029f70 <split_central_notify_func>:
                                         uint16_t length) {
   29f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29f74:	b088      	sub	sp, #32
   29f76:	4607      	mov	r7, r0
   29f78:	4614      	mov	r4, r2
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   29f7a:	f7ff ff81 	bl	29e80 <peripheral_slot_for_conn>
    if (slot == NULL) {
   29f7e:	2800      	cmp	r0, #0
   29f80:	d059      	beq.n	2a036 <split_central_notify_func+0xc6>
    if (!data) {
   29f82:	b924      	cbnz	r4, 29f8e <split_central_notify_func+0x1e>
        params->value_handle = 0U;
   29f84:	810c      	strh	r4, [r1, #8]
        return BT_GATT_ITER_STOP;
   29f86:	4620      	mov	r0, r4
}
   29f88:	b008      	add	sp, #32
   29f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29f8e:	1e63      	subs	r3, r4, #1
   29f90:	f100 025a 	add.w	r2, r0, #90	; 0x5a
   29f94:	340f      	adds	r4, #15
        slot->changed_positions[i] = ((uint8_t *)data)[i] ^ slot->position_state[i];
   29f96:	f813 5f01 	ldrb.w	r5, [r3, #1]!
   29f9a:	f812 1b01 	ldrb.w	r1, [r2], #1
   29f9e:	4069      	eors	r1, r5
   29fa0:	73d1      	strb	r1, [r2, #15]
        slot->position_state[i] = ((uint8_t *)data)[i];
   29fa2:	7819      	ldrb	r1, [r3, #0]
   29fa4:	f802 1c01 	strb.w	r1, [r2, #-1]
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   29fa8:	42a3      	cmp	r3, r4
   29faa:	d1f4      	bne.n	29f96 <split_central_notify_func+0x26>
	return z_impl_k_msgq_put(msgq, data, timeout);
   29fac:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2a03c <split_central_notify_func+0xcc>
                k_work_submit(&peripheral_event_work);
   29fb0:	f8df a08c 	ldr.w	sl, [pc, #140]	; 2a040 <split_central_notify_func+0xd0>
   29fb4:	f100 046a 	add.w	r4, r0, #106	; 0x6a
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   29fb8:	2600      	movs	r6, #0
                bool pressed = slot->position_state[i] & BIT(j);
   29fba:	f04f 0801 	mov.w	r8, #1
        for (int j = 0; j < 8; j++) {
   29fbe:	2500      	movs	r5, #0
            if (slot->changed_positions[i] & BIT(j)) {
   29fc0:	7823      	ldrb	r3, [r4, #0]
   29fc2:	40eb      	lsrs	r3, r5
   29fc4:	07db      	lsls	r3, r3, #31
   29fc6:	d52e      	bpl.n	2a026 <split_central_notify_func+0xb6>
                bool pressed = slot->position_state[i] & BIT(j);
   29fc8:	f814 1c10 	ldrb.w	r1, [r4, #-16]
   29fcc:	fa08 f305 	lsl.w	r3, r8, r5
   29fd0:	4219      	tst	r1, r3
   29fd2:	4638      	mov	r0, r7
   29fd4:	eb05 0206 	add.w	r2, r5, r6
   29fd8:	bf14      	ite	ne
   29fda:	2101      	movne	r1, #1
   29fdc:	2100      	moveq	r1, #0
    for (int i = 0; i < ZMK_BLE_SPLIT_PERIPHERAL_COUNT; i++) {
   29fde:	f7ff fe83 	bl	29ce8 <peripheral_slot_index_for_conn.part.0>
                struct zmk_position_state_changed ev = {.source =
   29fe2:	f88d 0008 	strb.w	r0, [sp, #8]
   29fe6:	9203      	str	r2, [sp, #12]
   29fe8:	f88d 1010 	strb.w	r1, [sp, #16]
	return z_impl_k_uptime_ticks();
   29fec:	f027 fa89 	bl	51502 <z_impl_k_uptime_ticks>
   29ff0:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   29ff4:	fba0 230c 	umull	r2, r3, r0, ip
   29ff8:	e9cd 2300 	strd	r2, r3, [sp]
   29ffc:	9b01      	ldr	r3, [sp, #4]
   29ffe:	fb0c 3301 	mla	r3, ip, r1, r3
   2a002:	9301      	str	r3, [sp, #4]
   2a004:	9b00      	ldr	r3, [sp, #0]
   2a006:	0bda      	lsrs	r2, r3, #15
   2a008:	9b01      	ldr	r3, [sp, #4]
   2a00a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
   2a00e:	0bdb      	lsrs	r3, r3, #15
   2a010:	e9cd 2306 	strd	r2, r3, [sp, #24]
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a014:	2200      	movs	r2, #0
   2a016:	2300      	movs	r3, #0
   2a018:	a902      	add	r1, sp, #8
   2a01a:	4648      	mov	r0, r9
   2a01c:	f01e faa6 	bl	4856c <z_impl_k_msgq_put>
                k_work_submit(&peripheral_event_work);
   2a020:	4650      	mov	r0, sl
   2a022:	f01e fdb5 	bl	48b90 <k_work_submit>
        for (int j = 0; j < 8; j++) {
   2a026:	3501      	adds	r5, #1
   2a028:	2d08      	cmp	r5, #8
   2a02a:	d1c9      	bne.n	29fc0 <split_central_notify_func+0x50>
   2a02c:	3608      	adds	r6, #8
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a02e:	2e80      	cmp	r6, #128	; 0x80
   2a030:	f104 0401 	add.w	r4, r4, #1
   2a034:	d1c3      	bne.n	29fbe <split_central_notify_func+0x4e>
        return BT_GATT_ITER_CONTINUE;
   2a036:	2001      	movs	r0, #1
   2a038:	e7a6      	b.n	29f88 <split_central_notify_func+0x18>
   2a03a:	bf00      	nop
   2a03c:	20000f0c 	.word	0x20000f0c
   2a040:	20000348 	.word	0x20000348

0002a044 <split_central_chrc_discovery_func>:
                                                 struct bt_gatt_discover_params *params) {
   2a044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a048:	4607      	mov	r7, r0
   2a04a:	b08a      	sub	sp, #40	; 0x28
    if (!attr) {
   2a04c:	460d      	mov	r5, r1
   2a04e:	2900      	cmp	r1, #0
   2a050:	d062      	beq.n	2a118 <split_central_chrc_discovery_func+0xd4>
    if (!attr->user_data) {
   2a052:	68c9      	ldr	r1, [r1, #12]
   2a054:	2900      	cmp	r1, #0
   2a056:	d061      	beq.n	2a11c <split_central_chrc_discovery_func+0xd8>
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a058:	f7ff ff12 	bl	29e80 <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a05c:	4604      	mov	r4, r0
   2a05e:	2800      	cmp	r0, #0
   2a060:	d03a      	beq.n	2a0d8 <split_central_chrc_discovery_func+0x94>
                     BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_POSITION_STATE_UUID))) {
   2a062:	4b2f      	ldr	r3, [pc, #188]	; (2a120 <split_central_chrc_discovery_func+0xdc>)
    if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a064:	f8d1 c000 	ldr.w	ip, [r1]
                     BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_POSITION_STATE_UUID))) {
   2a068:	466a      	mov	r2, sp
   2a06a:	f103 0810 	add.w	r8, r3, #16
   2a06e:	4696      	mov	lr, r2
   2a070:	6818      	ldr	r0, [r3, #0]
   2a072:	6859      	ldr	r1, [r3, #4]
   2a074:	4616      	mov	r6, r2
   2a076:	c603      	stmia	r6!, {r0, r1}
   2a078:	3308      	adds	r3, #8
   2a07a:	4543      	cmp	r3, r8
   2a07c:	4632      	mov	r2, r6
   2a07e:	d1f7      	bne.n	2a070 <split_central_chrc_discovery_func+0x2c>
   2a080:	781b      	ldrb	r3, [r3, #0]
   2a082:	7033      	strb	r3, [r6, #0]
    if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a084:	4671      	mov	r1, lr
   2a086:	4660      	mov	r0, ip
   2a088:	f022 fa1f 	bl	4c4ca <bt_uuid_cmp>
   2a08c:	bb38      	cbnz	r0, 2a0de <split_central_chrc_discovery_func+0x9a>
        slot->discover_params.start_handle = attr->handle + 2;
   2a08e:	8a2b      	ldrh	r3, [r5, #16]
        slot->discover_params.uuid = NULL;
   2a090:	60a0      	str	r0, [r4, #8]
        slot->discover_params.start_handle = attr->handle + 2;
   2a092:	3302      	adds	r3, #2
   2a094:	8223      	strh	r3, [r4, #16]
        slot->discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   2a096:	2303      	movs	r3, #3
   2a098:	7623      	strb	r3, [r4, #24]
        slot->subscribe_params.disc_params = &slot->sub_discover_params;
   2a09a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2a09e:	6323      	str	r3, [r4, #48]	; 0x30
        slot->subscribe_params.end_handle = slot->discover_params.end_handle;
   2a0a0:	8ae3      	ldrh	r3, [r4, #22]
   2a0a2:	85a3      	strh	r3, [r4, #44]	; 0x2c
        slot->subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
   2a0a4:	4628      	mov	r0, r5
   2a0a6:	f024 fcd8 	bl	4ea5a <bt_gatt_attr_value_handle>
        slot->subscribe_params.notify = split_central_notify_func;
   2a0aa:	4b1e      	ldr	r3, [pc, #120]	; (2a124 <split_central_chrc_discovery_func+0xe0>)
   2a0ac:	6223      	str	r3, [r4, #32]
        slot->subscribe_params.value = BT_GATT_CCC_NOTIFY;
   2a0ae:	2301      	movs	r3, #1
        slot->subscribe_params.value_handle = bt_gatt_attr_value_handle(attr);
   2a0b0:	8520      	strh	r0, [r4, #40]	; 0x28
        slot->subscribe_params.value = BT_GATT_CCC_NOTIFY;
   2a0b2:	86a3      	strh	r3, [r4, #52]	; 0x34
    struct peripheral_slot *slot = peripheral_slot_for_conn(conn);
   2a0b4:	4638      	mov	r0, r7
   2a0b6:	f7ff fee3 	bl	29e80 <peripheral_slot_for_conn>
    if (slot == NULL) {
   2a0ba:	b120      	cbz	r0, 2a0c6 <split_central_chrc_discovery_func+0x82>
    int err = bt_gatt_subscribe(conn, &slot->subscribe_params);
   2a0bc:	f100 0120 	add.w	r1, r0, #32
   2a0c0:	4638      	mov	r0, r7
   2a0c2:	f008 fa65 	bl	32590 <bt_gatt_subscribe>
    bool subscribed = (slot->run_behavior_handle && slot->subscribe_params.value_handle);
   2a0c6:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
   2a0ca:	b118      	cbz	r0, 2a0d4 <split_central_chrc_discovery_func+0x90>
   2a0cc:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   2a0ce:	3000      	adds	r0, #0
   2a0d0:	bf18      	it	ne
   2a0d2:	2001      	movne	r0, #1
    return subscribed ? BT_GATT_ITER_STOP : BT_GATT_ITER_CONTINUE;
   2a0d4:	f080 0001 	eor.w	r0, r0, #1
}
   2a0d8:	b00a      	add	sp, #40	; 0x28
   2a0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a0de:	68eb      	ldr	r3, [r5, #12]
   2a0e0:	681f      	ldr	r7, [r3, #0]
                            BT_UUID_DECLARE_128(ZMK_SPLIT_BT_CHAR_RUN_BEHAVIOR_UUID))) {
   2a0e2:	4b11      	ldr	r3, [pc, #68]	; (2a128 <split_central_chrc_discovery_func+0xe4>)
   2a0e4:	aa05      	add	r2, sp, #20
   2a0e6:	f103 0e10 	add.w	lr, r3, #16
   2a0ea:	4694      	mov	ip, r2
   2a0ec:	6818      	ldr	r0, [r3, #0]
   2a0ee:	6859      	ldr	r1, [r3, #4]
   2a0f0:	4616      	mov	r6, r2
   2a0f2:	c603      	stmia	r6!, {r0, r1}
   2a0f4:	3308      	adds	r3, #8
   2a0f6:	4573      	cmp	r3, lr
   2a0f8:	4632      	mov	r2, r6
   2a0fa:	d1f7      	bne.n	2a0ec <split_central_chrc_discovery_func+0xa8>
   2a0fc:	781b      	ldrb	r3, [r3, #0]
   2a0fe:	7033      	strb	r3, [r6, #0]
    } else if (!bt_uuid_cmp(((struct bt_gatt_chrc *)attr->user_data)->uuid,
   2a100:	4661      	mov	r1, ip
   2a102:	4638      	mov	r0, r7
   2a104:	f022 f9e1 	bl	4c4ca <bt_uuid_cmp>
   2a108:	2800      	cmp	r0, #0
   2a10a:	d1dc      	bne.n	2a0c6 <split_central_chrc_discovery_func+0x82>
        slot->run_behavior_handle = bt_gatt_attr_value_handle(attr);
   2a10c:	4628      	mov	r0, r5
   2a10e:	f024 fca4 	bl	4ea5a <bt_gatt_attr_value_handle>
   2a112:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
   2a116:	e7d6      	b.n	2a0c6 <split_central_chrc_discovery_func+0x82>
        return BT_GATT_ITER_STOP;
   2a118:	4608      	mov	r0, r1
   2a11a:	e7dd      	b.n	2a0d8 <split_central_chrc_discovery_func+0x94>
   2a11c:	4608      	mov	r0, r1
   2a11e:	e7db      	b.n	2a0d8 <split_central_chrc_discovery_func+0x94>
   2a120:	00051dd9 	.word	0x00051dd9
   2a124:	00029f71 	.word	0x00029f71
   2a128:	00051dea 	.word	0x00051dea

0002a12c <release_peripheral_slot>:
int release_peripheral_slot(int index) {
   2a12c:	b538      	push	{r3, r4, r5, lr}
    if (index < 0 || index >= ZMK_BLE_SPLIT_PERIPHERAL_COUNT) {
   2a12e:	4605      	mov	r5, r0
   2a130:	b9b0      	cbnz	r0, 2a160 <release_peripheral_slot+0x34>
    if (slot->state == PERIPHERAL_SLOT_STATE_OPEN) {
   2a132:	4c0d      	ldr	r4, [pc, #52]	; (2a168 <release_peripheral_slot+0x3c>)
   2a134:	7823      	ldrb	r3, [r4, #0]
   2a136:	b19b      	cbz	r3, 2a160 <release_peripheral_slot+0x34>
    if (slot->conn != NULL) {
   2a138:	6860      	ldr	r0, [r4, #4]
   2a13a:	b110      	cbz	r0, 2a142 <release_peripheral_slot+0x16>
        bt_conn_unref(slot->conn);
   2a13c:	f023 f867 	bl	4d20e <bt_conn_unref>
        slot->conn = NULL;
   2a140:	6065      	str	r5, [r4, #4]
    slot->state = PERIPHERAL_SLOT_STATE_OPEN;
   2a142:	2300      	movs	r3, #0
   2a144:	4909      	ldr	r1, [pc, #36]	; (2a16c <release_peripheral_slot+0x40>)
   2a146:	7023      	strb	r3, [r4, #0]
        slot->position_state[i] = 0U;
   2a148:	461a      	mov	r2, r3
   2a14a:	f801 2b01 	strb.w	r2, [r1], #1
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a14e:	3301      	adds	r3, #1
   2a150:	2b10      	cmp	r3, #16
        slot->changed_positions[i] = 0U;
   2a152:	73ca      	strb	r2, [r1, #15]
    for (int i = 0; i < POSITION_STATE_DATA_LEN; i++) {
   2a154:	d1f9      	bne.n	2a14a <release_peripheral_slot+0x1e>
    slot->subscribe_params.value_handle = 0;
   2a156:	8522      	strh	r2, [r4, #40]	; 0x28
    slot->run_behavior_handle = 0;
   2a158:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
   2a15c:	2000      	movs	r0, #0
}
   2a15e:	bd38      	pop	{r3, r4, r5, pc}
        return -EINVAL;
   2a160:	f06f 0015 	mvn.w	r0, #21
   2a164:	e7fb      	b.n	2a15e <release_peripheral_slot+0x32>
   2a166:	bf00      	nop
   2a168:	20003cc4 	.word	0x20003cc4
   2a16c:	20003d1e 	.word	0x20003d1e

0002a170 <reserve_peripheral_slot>:
int reserve_peripheral_slot() {
   2a170:	b538      	push	{r3, r4, r5, lr}
        if (peripherals[i].state == PERIPHERAL_SLOT_STATE_OPEN) {
   2a172:	4d06      	ldr	r5, [pc, #24]	; (2a18c <reserve_peripheral_slot+0x1c>)
   2a174:	782c      	ldrb	r4, [r5, #0]
   2a176:	b934      	cbnz	r4, 2a186 <reserve_peripheral_slot+0x16>
            release_peripheral_slot(i);
   2a178:	4620      	mov	r0, r4
   2a17a:	f7ff ffd7 	bl	2a12c <release_peripheral_slot>
            peripherals[i].state = PERIPHERAL_SLOT_STATE_CONNECTING;
   2a17e:	2301      	movs	r3, #1
   2a180:	702b      	strb	r3, [r5, #0]
   2a182:	4620      	mov	r0, r4
}
   2a184:	bd38      	pop	{r3, r4, r5, pc}
    return -ENOMEM;
   2a186:	f06f 000b 	mvn.w	r0, #11
   2a18a:	e7fb      	b.n	2a184 <reserve_peripheral_slot+0x14>
   2a18c:	20003cc4 	.word	0x20003cc4

0002a190 <split_central_eir_found>:
static bool split_central_eir_found(struct bt_data *data, void *user_data) {
   2a190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    switch (data->type) {
   2a194:	7803      	ldrb	r3, [r0, #0]
   2a196:	3b06      	subs	r3, #6
   2a198:	2b01      	cmp	r3, #1
static bool split_central_eir_found(struct bt_data *data, void *user_data) {
   2a19a:	b0a7      	sub	sp, #156	; 0x9c
   2a19c:	4605      	mov	r5, r0
   2a19e:	460e      	mov	r6, r1
    switch (data->type) {
   2a1a0:	d903      	bls.n	2a1aa <split_central_eir_found+0x1a>
    return true;
   2a1a2:	2001      	movs	r0, #1
}
   2a1a4:	b027      	add	sp, #156	; 0x9c
   2a1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (data->data_len % 16 != 0U) {
   2a1aa:	7844      	ldrb	r4, [r0, #1]
   2a1ac:	f014 040f 	ands.w	r4, r4, #15
   2a1b0:	d1f7      	bne.n	2a1a2 <split_central_eir_found+0x12>
        for (i = 0; i < data->data_len; i += 16) {
   2a1b2:	786b      	ldrb	r3, [r5, #1]
   2a1b4:	429c      	cmp	r4, r3
   2a1b6:	daf4      	bge.n	2a1a2 <split_central_eir_found+0x12>
            if (!bt_uuid_create(&uuid.uuid, &data->data[i], 16)) {
   2a1b8:	6869      	ldr	r1, [r5, #4]
   2a1ba:	2210      	movs	r2, #16
   2a1bc:	4421      	add	r1, r4
   2a1be:	a803      	add	r0, sp, #12
   2a1c0:	f022 f9ad 	bl	4c51e <bt_uuid_create>
   2a1c4:	b378      	cbz	r0, 2a226 <split_central_eir_found+0x96>
            if (bt_uuid_cmp(&uuid.uuid, BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID))) {
   2a1c6:	4b3d      	ldr	r3, [pc, #244]	; (2a2bc <split_central_eir_found+0x12c>)
   2a1c8:	aa08      	add	r2, sp, #32
   2a1ca:	f103 0e10 	add.w	lr, r3, #16
   2a1ce:	4690      	mov	r8, r2
   2a1d0:	4677      	mov	r7, lr
   2a1d2:	6818      	ldr	r0, [r3, #0]
   2a1d4:	6859      	ldr	r1, [r3, #4]
   2a1d6:	4694      	mov	ip, r2
   2a1d8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2a1dc:	3308      	adds	r3, #8
   2a1de:	4573      	cmp	r3, lr
   2a1e0:	4662      	mov	r2, ip
   2a1e2:	d1f6      	bne.n	2a1d2 <split_central_eir_found+0x42>
   2a1e4:	781b      	ldrb	r3, [r3, #0]
   2a1e6:	f88c 3000 	strb.w	r3, [ip]
   2a1ea:	4641      	mov	r1, r8
   2a1ec:	a803      	add	r0, sp, #12
   2a1ee:	f022 f96c 	bl	4c4ca <bt_uuid_cmp>
   2a1f2:	b1d0      	cbz	r0, 2a22a <split_central_eir_found+0x9a>
                bt_uuid_to_str(&uuid.uuid, uuid_str, sizeof(uuid_str));
   2a1f4:	2225      	movs	r2, #37	; 0x25
   2a1f6:	a912      	add	r1, sp, #72	; 0x48
   2a1f8:	a803      	add	r0, sp, #12
   2a1fa:	f003 fa19 	bl	2d630 <bt_uuid_to_str>
                bt_uuid_to_str(BT_UUID_DECLARE_128(ZMK_SPLIT_BT_SERVICE_UUID), service_uuid_str,
   2a1fe:	aa0d      	add	r2, sp, #52	; 0x34
   2a200:	4b2e      	ldr	r3, [pc, #184]	; (2a2bc <split_central_eir_found+0x12c>)
   2a202:	4696      	mov	lr, r2
   2a204:	6818      	ldr	r0, [r3, #0]
   2a206:	6859      	ldr	r1, [r3, #4]
   2a208:	4694      	mov	ip, r2
   2a20a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   2a20e:	3308      	adds	r3, #8
   2a210:	42bb      	cmp	r3, r7
   2a212:	4662      	mov	r2, ip
   2a214:	d1f6      	bne.n	2a204 <split_central_eir_found+0x74>
   2a216:	781b      	ldrb	r3, [r3, #0]
   2a218:	f88c 3000 	strb.w	r3, [ip]
   2a21c:	2225      	movs	r2, #37	; 0x25
   2a21e:	a91c      	add	r1, sp, #112	; 0x70
   2a220:	4670      	mov	r0, lr
   2a222:	f003 fa05 	bl	2d630 <bt_uuid_to_str>
        for (i = 0; i < data->data_len; i += 16) {
   2a226:	3410      	adds	r4, #16
   2a228:	e7c3      	b.n	2a1b2 <split_central_eir_found+0x22>
            zmk_ble_set_peripheral_addr(addr);
   2a22a:	4630      	mov	r0, r6
   2a22c:	f7ff fcd2 	bl	29bd4 <zmk_ble_set_peripheral_addr>
            err = bt_le_scan_stop();
   2a230:	f005 f98c 	bl	2f54c <bt_le_scan_stop>
            if (err) {
   2a234:	4607      	mov	r7, r0
   2a236:	2800      	cmp	r0, #0
   2a238:	d1f5      	bne.n	2a226 <split_central_eir_found+0x96>
            uint8_t slot_idx = reserve_peripheral_slot();
   2a23a:	f7ff ff99 	bl	2a170 <reserve_peripheral_slot>
            slot->conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   2a23e:	247c      	movs	r4, #124	; 0x7c
   2a240:	fa5f f880 	uxtb.w	r8, r0
   2a244:	4631      	mov	r1, r6
   2a246:	4638      	mov	r0, r7
   2a248:	4f1d      	ldr	r7, [pc, #116]	; (2a2c0 <split_central_eir_found+0x130>)
   2a24a:	f8df 9078 	ldr.w	r9, [pc, #120]	; 2a2c4 <split_central_eir_found+0x134>
   2a24e:	f023 f8c0 	bl	4d3d2 <bt_conn_lookup_addr_le>
   2a252:	fb04 f408 	mul.w	r4, r4, r8
   2a256:	193d      	adds	r5, r7, r4
   2a258:	6068      	str	r0, [r5, #4]
            if (slot->conn) {
   2a25a:	b150      	cbz	r0, 2a272 <split_central_eir_found+0xe2>
                split_central_process_connection(slot->conn);
   2a25c:	f7ff fe1e 	bl	29e9c <split_central_process_connection>
                err = bt_conn_le_phy_update(slot->conn, BT_CONN_LE_PHY_PARAM_2M);
   2a260:	f8d9 0000 	ldr.w	r0, [r9]
   2a264:	9001      	str	r0, [sp, #4]
   2a266:	a901      	add	r1, sp, #4
   2a268:	6868      	ldr	r0, [r5, #4]
   2a26a:	f023 f8b6 	bl	4d3da <bt_conn_le_phy_update>
            return false;
   2a26e:	2000      	movs	r0, #0
   2a270:	e798      	b.n	2a1a4 <split_central_eir_found+0x14>
                param = BT_LE_CONN_PARAM(0x0006, 0x0006, 30, 400);
   2a272:	464a      	mov	r2, r9
   2a274:	ab12      	add	r3, sp, #72	; 0x48
   2a276:	f852 0f04 	ldr.w	r0, [r2, #4]!
   2a27a:	6851      	ldr	r1, [r2, #4]
   2a27c:	c303      	stmia	r3!, {r0, r1}
                err = bt_conn_le_create(addr, BT_CONN_LE_CREATE_CONN, param, &slot->conn);
   2a27e:	f109 030c 	add.w	r3, r9, #12
   2a282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2a284:	ad1c      	add	r5, sp, #112	; 0x70
   2a286:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   2a28a:	1d23      	adds	r3, r4, #4
   2a28c:	443b      	add	r3, r7
   2a28e:	aa12      	add	r2, sp, #72	; 0x48
   2a290:	4629      	mov	r1, r5
   2a292:	4630      	mov	r0, r6
   2a294:	f005 fea4 	bl	2ffe0 <bt_conn_le_create>
                if (err) {
   2a298:	b108      	cbz	r0, 2a29e <split_central_eir_found+0x10e>
                    start_scan();
   2a29a:	f7ff fcfb 	bl	29c94 <start_scan>
                err = bt_conn_le_phy_update(slot->conn, BT_CONN_LE_PHY_PARAM_2M);
   2a29e:	237c      	movs	r3, #124	; 0x7c
   2a2a0:	fb03 7308 	mla	r3, r3, r8, r7
   2a2a4:	f8d9 0000 	ldr.w	r0, [r9]
   2a2a8:	9002      	str	r0, [sp, #8]
   2a2aa:	a902      	add	r1, sp, #8
   2a2ac:	6858      	ldr	r0, [r3, #4]
   2a2ae:	f023 f894 	bl	4d3da <bt_conn_le_phy_update>
                if (err) {
   2a2b2:	2800      	cmp	r0, #0
   2a2b4:	d0db      	beq.n	2a26e <split_central_eir_found+0xde>
                    start_scan();
   2a2b6:	f7ff fced 	bl	29c94 <start_scan>
   2a2ba:	e7d8      	b.n	2a26e <split_central_eir_found+0xde>
   2a2bc:	00051dc8 	.word	0x00051dc8
   2a2c0:	20003cc4 	.word	0x20003cc4
   2a2c4:	00051dfc 	.word	0x00051dfc

0002a2c8 <confirm_peripheral_slot_conn>:
int confirm_peripheral_slot_conn(struct bt_conn *conn) {
   2a2c8:	b508      	push	{r3, lr}
   2a2ca:	f7ff fd0d 	bl	29ce8 <peripheral_slot_index_for_conn.part.0>
    if (idx < 0) {
   2a2ce:	2800      	cmp	r0, #0
   2a2d0:	db05      	blt.n	2a2de <confirm_peripheral_slot_conn+0x16>
    peripherals[idx].state = PERIPHERAL_SLOT_STATE_CONNECTED;
   2a2d2:	237c      	movs	r3, #124	; 0x7c
   2a2d4:	4358      	muls	r0, r3
   2a2d6:	4b02      	ldr	r3, [pc, #8]	; (2a2e0 <confirm_peripheral_slot_conn+0x18>)
   2a2d8:	2202      	movs	r2, #2
   2a2da:	541a      	strb	r2, [r3, r0]
    return 0;
   2a2dc:	2000      	movs	r0, #0
}
   2a2de:	bd08      	pop	{r3, pc}
   2a2e0:	20003cc4 	.word	0x20003cc4

0002a2e4 <usb_status_cb>:
        return ZMK_USB_CONN_HID;
    }
}

void usb_status_cb(enum usb_dc_status_code status, const uint8_t *params) {
    usb_status = status;
   2a2e4:	4b02      	ldr	r3, [pc, #8]	; (2a2f0 <usb_status_cb+0xc>)
   2a2e6:	7018      	strb	r0, [r3, #0]
    k_work_submit(&usb_status_notifier_work);
   2a2e8:	4802      	ldr	r0, [pc, #8]	; (2a2f4 <usb_status_cb+0x10>)
   2a2ea:	f01e bc51 	b.w	48b90 <k_work_submit>
   2a2ee:	bf00      	nop
   2a2f0:	20000d99 	.word	0x20000d99
   2a2f4:	20000368 	.word	0x20000368

0002a2f8 <zmk_usb_init>:
};

static int zmk_usb_init(const struct device *_arg) {
   2a2f8:	b510      	push	{r4, lr}
   2a2fa:	480a      	ldr	r0, [pc, #40]	; (2a324 <zmk_usb_init+0x2c>)
    int usb_enable_ret;

#ifdef CONFIG_ZMK_USB
    hid_dev = device_get_binding("HID_0");
   2a2fc:	4c0a      	ldr	r4, [pc, #40]	; (2a328 <zmk_usb_init+0x30>)
   2a2fe:	f01d ff09 	bl	48114 <z_impl_device_get_binding>
   2a302:	6020      	str	r0, [r4, #0]
    if (hid_dev == NULL) {
   2a304:	b158      	cbz	r0, 2a31e <zmk_usb_init+0x26>
        LOG_ERR("Unable to locate HID device");
        return -EINVAL;
    }

    usb_hid_register_device(hid_dev, zmk_hid_report_desc, sizeof(zmk_hid_report_desc), &ops);
   2a306:	4b09      	ldr	r3, [pc, #36]	; (2a32c <zmk_usb_init+0x34>)
   2a308:	4909      	ldr	r1, [pc, #36]	; (2a330 <zmk_usb_init+0x38>)
   2a30a:	224c      	movs	r2, #76	; 0x4c
   2a30c:	f019 ffc0 	bl	44290 <usb_hid_register_device>

    usb_hid_init(hid_dev);
   2a310:	6820      	ldr	r0, [r4, #0]
   2a312:	f025 ff99 	bl	50248 <usb_hid_init>

#endif /* CONFIG_ZMK_USB */

    usb_enable_ret = usb_enable(usb_status_cb);
   2a316:	4807      	ldr	r0, [pc, #28]	; (2a334 <zmk_usb_init+0x3c>)
   2a318:	f001 fb24 	bl	2b964 <usb_enable>

    if (usb_enable_ret != 0) {
   2a31c:	b108      	cbz	r0, 2a322 <zmk_usb_init+0x2a>
        LOG_ERR("Unable to enable USB");
        return -EINVAL;
   2a31e:	f06f 0015 	mvn.w	r0, #21
    }

    return 0;
}
   2a322:	bd10      	pop	{r4, pc}
   2a324:	00054046 	.word	0x00054046
   2a328:	20003d40 	.word	0x20003d40
   2a32c:	00052524 	.word	0x00052524
   2a330:	00053ffa 	.word	0x00053ffa
   2a334:	0002a2e5 	.word	0x0002a2e5

0002a338 <in_ready_cb>:
	z_impl_k_sem_give(sem);
   2a338:	4801      	ldr	r0, [pc, #4]	; (2a340 <in_ready_cb+0x8>)
   2a33a:	f01e babd 	b.w	488b8 <z_impl_k_sem_give>
   2a33e:	bf00      	nop
   2a340:	20001014 	.word	0x20001014

0002a344 <zmk_usb_hid_send_report>:
int zmk_usb_hid_send_report(const uint8_t *report, size_t len) {
   2a344:	b538      	push	{r3, r4, r5, lr}
    switch (usb_status) {
   2a346:	4b14      	ldr	r3, [pc, #80]	; (2a398 <zmk_usb_hid_send_report+0x54>)
   2a348:	781a      	ldrb	r2, [r3, #0]
   2a34a:	2a0b      	cmp	r2, #11
int zmk_usb_hid_send_report(const uint8_t *report, size_t len) {
   2a34c:	4604      	mov	r4, r0
   2a34e:	460d      	mov	r5, r1
   2a350:	d80b      	bhi.n	2a36a <zmk_usb_hid_send_report+0x26>
   2a352:	2301      	movs	r3, #1
   2a354:	4093      	lsls	r3, r2
   2a356:	f640 0213 	movw	r2, #2067	; 0x813
   2a35a:	4213      	tst	r3, r2
   2a35c:	d119      	bne.n	2a392 <zmk_usb_hid_send_report+0x4e>
   2a35e:	069b      	lsls	r3, r3, #26
   2a360:	d503      	bpl.n	2a36a <zmk_usb_hid_send_report+0x26>
}
   2a362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return usb_wakeup_request();
   2a366:	f001 bac7 	b.w	2b8f8 <usb_wakeup_request>
	return z_impl_k_sem_take(sem, timeout);
   2a36a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
   2a36e:	2300      	movs	r3, #0
   2a370:	480a      	ldr	r0, [pc, #40]	; (2a39c <zmk_usb_hid_send_report+0x58>)
   2a372:	f01e fac7 	bl	48904 <z_impl_k_sem_take>
        int err = hid_int_ep_write(hid_dev, report, len, NULL);
   2a376:	480a      	ldr	r0, [pc, #40]	; (2a3a0 <zmk_usb_hid_send_report+0x5c>)
   2a378:	4621      	mov	r1, r4
   2a37a:	2300      	movs	r3, #0
   2a37c:	462a      	mov	r2, r5
   2a37e:	6800      	ldr	r0, [r0, #0]
   2a380:	f025 ff6c 	bl	5025c <hid_int_ep_write>
        if (err) {
   2a384:	4604      	mov	r4, r0
   2a386:	b110      	cbz	r0, 2a38e <zmk_usb_hid_send_report+0x4a>
	z_impl_k_sem_give(sem);
   2a388:	4804      	ldr	r0, [pc, #16]	; (2a39c <zmk_usb_hid_send_report+0x58>)
   2a38a:	f01e fa95 	bl	488b8 <z_impl_k_sem_give>
}
   2a38e:	4620      	mov	r0, r4
   2a390:	bd38      	pop	{r3, r4, r5, pc}
        return -ENODEV;
   2a392:	f06f 0412 	mvn.w	r4, #18
   2a396:	e7fa      	b.n	2a38e <zmk_usb_hid_send_report+0x4a>
   2a398:	20000d99 	.word	0x20000d99
   2a39c:	20001014 	.word	0x20001014
   2a3a0:	20003d40 	.word	0x20003d40

0002a3a4 <zmk_usb_get_conn_state>:
    switch (usb_status) {
   2a3a4:	4b08      	ldr	r3, [pc, #32]	; (2a3c8 <zmk_usb_get_conn_state+0x24>)
   2a3a6:	781b      	ldrb	r3, [r3, #0]
   2a3a8:	2b0b      	cmp	r3, #11
   2a3aa:	d809      	bhi.n	2a3c0 <zmk_usb_get_conn_state+0x1c>
   2a3ac:	e8df f003 	tbb	[pc, r3]
   2a3b0:	08080606 	.word	0x08080606
   2a3b4:	0808080a 	.word	0x0808080a
   2a3b8:	0a080808 	.word	0x0a080808
        return ZMK_USB_CONN_POWERED;
   2a3bc:	2001      	movs	r0, #1
   2a3be:	4770      	bx	lr
        return ZMK_USB_CONN_HID;
   2a3c0:	2002      	movs	r0, #2
   2a3c2:	4770      	bx	lr
        return ZMK_USB_CONN_NONE;
   2a3c4:	2000      	movs	r0, #0
}
   2a3c6:	4770      	bx	lr
   2a3c8:	20000d99 	.word	0x20000d99

0002a3cc <read_hids_report_map>:
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
                             sizeof(struct hids_report));
}

static ssize_t read_hids_report_map(struct bt_conn *conn, const struct bt_gatt_attr *attr,
                                    void *buf, uint16_t len, uint16_t offset) {
   2a3cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, zmk_hid_report_desc,
   2a3ce:	244c      	movs	r4, #76	; 0x4c
   2a3d0:	9402      	str	r4, [sp, #8]
   2a3d2:	4c04      	ldr	r4, [pc, #16]	; (2a3e4 <read_hids_report_map+0x18>)
   2a3d4:	9401      	str	r4, [sp, #4]
   2a3d6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2a3da:	9400      	str	r4, [sp, #0]
   2a3dc:	f024 fb26 	bl	4ea2c <bt_gatt_attr_read>
                             sizeof(zmk_hid_report_desc));
}
   2a3e0:	b004      	add	sp, #16
   2a3e2:	bd10      	pop	{r4, pc}
   2a3e4:	00054064 	.word	0x00054064

0002a3e8 <zmk_hog_init>:
    k_work_submit_to_queue(&hog_work_q, &hog_consumer_work);

    return 0;
};

int zmk_hog_init(const struct device *_arg) {
   2a3e8:	b507      	push	{r0, r1, r2, lr}
    static const struct k_work_queue_config queue_config = {.name = "HID Over GATT Send Work"};
    k_work_queue_start(&hog_work_q, hog_q_stack, K_THREAD_STACK_SIZEOF(hog_q_stack),
   2a3ea:	4b06      	ldr	r3, [pc, #24]	; (2a404 <zmk_hog_init+0x1c>)
   2a3ec:	9300      	str	r3, [sp, #0]
   2a3ee:	f44f 7200 	mov.w	r2, #512	; 0x200
   2a3f2:	2305      	movs	r3, #5
   2a3f4:	4904      	ldr	r1, [pc, #16]	; (2a408 <zmk_hog_init+0x20>)
   2a3f6:	4805      	ldr	r0, [pc, #20]	; (2a40c <zmk_hog_init+0x24>)
   2a3f8:	f01e fbd0 	bl	48b9c <k_work_queue_start>
                       CONFIG_ZMK_BLE_THREAD_PRIORITY, &queue_config);

    return 0;
}
   2a3fc:	2000      	movs	r0, #0
   2a3fe:	b003      	add	sp, #12
   2a400:	f85d fb04 	ldr.w	pc, [sp], #4
   2a404:	00052664 	.word	0x00052664
   2a408:	20006fb0 	.word	0x20006fb0
   2a40c:	20001360 	.word	0x20001360

0002a410 <send_keyboard_report_callback>:
void send_keyboard_report_callback(struct k_work *work) {
   2a410:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a412:	4e13      	ldr	r6, [pc, #76]	; (2a460 <send_keyboard_report_callback+0x50>)
        struct bt_gatt_notify_params notify_params = {
   2a414:	4f13      	ldr	r7, [pc, #76]	; (2a464 <send_keyboard_report_callback+0x54>)
void send_keyboard_report_callback(struct k_work *work) {
   2a416:	b089      	sub	sp, #36	; 0x24
   2a418:	2200      	movs	r2, #0
   2a41a:	2300      	movs	r3, #0
   2a41c:	4669      	mov	r1, sp
   2a41e:	4630      	mov	r0, r6
   2a420:	f01e f8fa 	bl	48618 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_keyboard_msgq, &report, K_NO_WAIT) == 0) {
   2a424:	4605      	mov	r5, r0
   2a426:	b108      	cbz	r0, 2a42c <send_keyboard_report_callback+0x1c>
}
   2a428:	b009      	add	sp, #36	; 0x24
   2a42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        struct bt_conn *conn = destination_connection();
   2a42c:	f01f fd3e 	bl	49eac <destination_connection>
        if (conn == NULL) {
   2a430:	4604      	mov	r4, r0
   2a432:	2800      	cmp	r0, #0
   2a434:	d0f8      	beq.n	2a428 <send_keyboard_report_callback+0x18>
        struct bt_gatt_notify_params notify_params = {
   2a436:	2218      	movs	r2, #24
   2a438:	4629      	mov	r1, r5
   2a43a:	a802      	add	r0, sp, #8
   2a43c:	f021 ff61 	bl	4c302 <memset>
   2a440:	2308      	movs	r3, #8
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a442:	eb0d 0103 	add.w	r1, sp, r3
   2a446:	4620      	mov	r0, r4
        struct bt_gatt_notify_params notify_params = {
   2a448:	9703      	str	r7, [sp, #12]
   2a44a:	f8cd d010 	str.w	sp, [sp, #16]
   2a44e:	f8ad 3014 	strh.w	r3, [sp, #20]
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a452:	f007 fd2b 	bl	31eac <bt_gatt_notify_cb>
        bt_conn_unref(conn);
   2a456:	4620      	mov	r0, r4
   2a458:	f022 fed9 	bl	4d20e <bt_conn_unref>
   2a45c:	e7dc      	b.n	2a418 <send_keyboard_report_callback+0x8>
   2a45e:	bf00      	nop
   2a460:	20000f6c 	.word	0x20000f6c
   2a464:	0005259c 	.word	0x0005259c

0002a468 <send_consumer_report_callback>:
void send_consumer_report_callback(struct k_work *work) {
   2a468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a46c:	4f13      	ldr	r7, [pc, #76]	; (2a4bc <send_consumer_report_callback+0x54>)
        struct bt_gatt_notify_params notify_params = {
   2a46e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2a4c0 <send_consumer_report_callback+0x58>
void send_consumer_report_callback(struct k_work *work) {
   2a472:	b08a      	sub	sp, #40	; 0x28
   2a474:	ae01      	add	r6, sp, #4
   2a476:	2200      	movs	r2, #0
   2a478:	2300      	movs	r3, #0
   2a47a:	4631      	mov	r1, r6
   2a47c:	4638      	mov	r0, r7
   2a47e:	f01e f8cb 	bl	48618 <z_impl_k_msgq_get>
    while (k_msgq_get(&zmk_hog_consumer_msgq, &report, K_NO_WAIT) == 0) {
   2a482:	4605      	mov	r5, r0
   2a484:	b110      	cbz	r0, 2a48c <send_consumer_report_callback+0x24>
};
   2a486:	b00a      	add	sp, #40	; 0x28
   2a488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        struct bt_conn *conn = destination_connection();
   2a48c:	f01f fd0e 	bl	49eac <destination_connection>
        if (conn == NULL) {
   2a490:	4604      	mov	r4, r0
   2a492:	2800      	cmp	r0, #0
   2a494:	d0f7      	beq.n	2a486 <send_consumer_report_callback+0x1e>
        struct bt_gatt_notify_params notify_params = {
   2a496:	2218      	movs	r2, #24
   2a498:	4629      	mov	r1, r5
   2a49a:	a804      	add	r0, sp, #16
   2a49c:	f021 ff31 	bl	4c302 <memset>
   2a4a0:	230c      	movs	r3, #12
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a4a2:	a904      	add	r1, sp, #16
   2a4a4:	4620      	mov	r0, r4
        struct bt_gatt_notify_params notify_params = {
   2a4a6:	e9cd 8605 	strd	r8, r6, [sp, #20]
   2a4aa:	f8ad 301c 	strh.w	r3, [sp, #28]
        int err = bt_gatt_notify_cb(conn, &notify_params);
   2a4ae:	f007 fcfd 	bl	31eac <bt_gatt_notify_cb>
        bt_conn_unref(conn);
   2a4b2:	4620      	mov	r0, r4
   2a4b4:	f022 feab 	bl	4d20e <bt_conn_unref>
   2a4b8:	e7dd      	b.n	2a476 <send_consumer_report_callback+0xe>
   2a4ba:	bf00      	nop
   2a4bc:	20000f3c 	.word	0x20000f3c
   2a4c0:	00052600 	.word	0x00052600

0002a4c4 <zmk_hog_send_keyboard_report>:
int zmk_hog_send_keyboard_report(struct zmk_hid_keyboard_report_body *report) {
   2a4c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a4c6:	4605      	mov	r5, r0
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a4c8:	f640 42cd 	movw	r2, #3277	; 0xccd
   2a4cc:	4601      	mov	r1, r0
   2a4ce:	2300      	movs	r3, #0
   2a4d0:	480c      	ldr	r0, [pc, #48]	; (2a504 <zmk_hog_send_keyboard_report+0x40>)
   2a4d2:	f01e f84b 	bl	4856c <z_impl_k_msgq_put>
    if (err) {
   2a4d6:	4604      	mov	r4, r0
   2a4d8:	b178      	cbz	r0, 2a4fa <zmk_hog_send_keyboard_report+0x36>
        switch (err) {
   2a4da:	f110 0f0b 	cmn.w	r0, #11
   2a4de:	d109      	bne.n	2a4f4 <zmk_hog_send_keyboard_report+0x30>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a4e0:	2200      	movs	r2, #0
   2a4e2:	2300      	movs	r3, #0
   2a4e4:	4669      	mov	r1, sp
   2a4e6:	4807      	ldr	r0, [pc, #28]	; (2a504 <zmk_hog_send_keyboard_report+0x40>)
   2a4e8:	f01e f896 	bl	48618 <z_impl_k_msgq_get>
            return zmk_hog_send_keyboard_report(report);
   2a4ec:	4628      	mov	r0, r5
   2a4ee:	f7ff ffe9 	bl	2a4c4 <zmk_hog_send_keyboard_report>
   2a4f2:	4604      	mov	r4, r0
};
   2a4f4:	4620      	mov	r0, r4
   2a4f6:	b003      	add	sp, #12
   2a4f8:	bd30      	pop	{r4, r5, pc}
    k_work_submit_to_queue(&hog_work_q, &hog_keyboard_work);
   2a4fa:	4903      	ldr	r1, [pc, #12]	; (2a508 <zmk_hog_send_keyboard_report+0x44>)
   2a4fc:	4803      	ldr	r0, [pc, #12]	; (2a50c <zmk_hog_send_keyboard_report+0x48>)
   2a4fe:	f026 fe3f 	bl	51180 <k_work_submit_to_queue>
    return 0;
   2a502:	e7f7      	b.n	2a4f4 <zmk_hog_send_keyboard_report+0x30>
   2a504:	20000f6c 	.word	0x20000f6c
   2a508:	20000448 	.word	0x20000448
   2a50c:	20001360 	.word	0x20001360

0002a510 <zmk_hog_send_consumer_report>:
int zmk_hog_send_consumer_report(struct zmk_hid_consumer_report_body *report) {
   2a510:	b530      	push	{r4, r5, lr}
   2a512:	4605      	mov	r5, r0
   2a514:	b085      	sub	sp, #20
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a516:	f640 42cd 	movw	r2, #3277	; 0xccd
   2a51a:	4601      	mov	r1, r0
   2a51c:	2300      	movs	r3, #0
   2a51e:	480d      	ldr	r0, [pc, #52]	; (2a554 <zmk_hog_send_consumer_report+0x44>)
   2a520:	f01e f824 	bl	4856c <z_impl_k_msgq_put>
    if (err) {
   2a524:	4604      	mov	r4, r0
   2a526:	b178      	cbz	r0, 2a548 <zmk_hog_send_consumer_report+0x38>
        switch (err) {
   2a528:	f110 0f0b 	cmn.w	r0, #11
   2a52c:	d109      	bne.n	2a542 <zmk_hog_send_consumer_report+0x32>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a52e:	2200      	movs	r2, #0
   2a530:	2300      	movs	r3, #0
   2a532:	a901      	add	r1, sp, #4
   2a534:	4807      	ldr	r0, [pc, #28]	; (2a554 <zmk_hog_send_consumer_report+0x44>)
   2a536:	f01e f86f 	bl	48618 <z_impl_k_msgq_get>
            return zmk_hog_send_consumer_report(report);
   2a53a:	4628      	mov	r0, r5
   2a53c:	f7ff ffe8 	bl	2a510 <zmk_hog_send_consumer_report>
   2a540:	4604      	mov	r4, r0
};
   2a542:	4620      	mov	r0, r4
   2a544:	b005      	add	sp, #20
   2a546:	bd30      	pop	{r4, r5, pc}
    k_work_submit_to_queue(&hog_work_q, &hog_consumer_work);
   2a548:	4903      	ldr	r1, [pc, #12]	; (2a558 <zmk_hog_send_consumer_report+0x48>)
   2a54a:	4804      	ldr	r0, [pc, #16]	; (2a55c <zmk_hog_send_consumer_report+0x4c>)
   2a54c:	f026 fe18 	bl	51180 <k_work_submit_to_queue>
    return 0;
   2a550:	e7f7      	b.n	2a542 <zmk_hog_send_consumer_report+0x32>
   2a552:	bf00      	nop
   2a554:	20000f3c 	.word	0x20000f3c
   2a558:	20000438 	.word	0x20000438
   2a55c:	20001360 	.word	0x20001360

0002a560 <send_keyboard_report>:
    enum zmk_endpoint new_endpoint =
        (preferred_endpoint == ZMK_ENDPOINT_USB) ? ZMK_ENDPOINT_BLE : ZMK_ENDPOINT_USB;
    return zmk_endpoints_select(new_endpoint);
}

static int send_keyboard_report() {
   2a560:	b508      	push	{r3, lr}
    struct zmk_hid_keyboard_report *keyboard_report = zmk_hid_get_keyboard_report();
   2a562:	f7fe fe3d 	bl	291e0 <zmk_hid_get_keyboard_report>

    switch (current_endpoint) {
   2a566:	4b09      	ldr	r3, [pc, #36]	; (2a58c <send_keyboard_report+0x2c>)
   2a568:	781b      	ldrb	r3, [r3, #0]
   2a56a:	b123      	cbz	r3, 2a576 <send_keyboard_report+0x16>
   2a56c:	2b01      	cmp	r3, #1
   2a56e:	d007      	beq.n	2a580 <send_keyboard_report+0x20>

    default:
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
        return -ENOTSUP;
    }
}
   2a570:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a574:	bd08      	pop	{r3, pc}
        int err = zmk_usb_hid_send_report((uint8_t *)keyboard_report, sizeof(*keyboard_report));
   2a576:	2109      	movs	r1, #9
}
   2a578:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_usb_hid_send_report((uint8_t *)keyboard_report, sizeof(*keyboard_report));
   2a57c:	f7ff bee2 	b.w	2a344 <zmk_usb_hid_send_report>
        int err = zmk_hog_send_keyboard_report(&keyboard_report->body);
   2a580:	3001      	adds	r0, #1
}
   2a582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_hog_send_keyboard_report(&keyboard_report->body);
   2a586:	f7ff bf9d 	b.w	2a4c4 <zmk_hog_send_keyboard_report>
   2a58a:	bf00      	nop
   2a58c:	20000da2 	.word	0x20000da2

0002a590 <send_consumer_report>:

static int send_consumer_report() {
   2a590:	b508      	push	{r3, lr}
    struct zmk_hid_consumer_report *consumer_report = zmk_hid_get_consumer_report();
   2a592:	f7fe fe29 	bl	291e8 <zmk_hid_get_consumer_report>

    switch (current_endpoint) {
   2a596:	4b09      	ldr	r3, [pc, #36]	; (2a5bc <send_consumer_report+0x2c>)
   2a598:	781b      	ldrb	r3, [r3, #0]
   2a59a:	b123      	cbz	r3, 2a5a6 <send_consumer_report+0x16>
   2a59c:	2b01      	cmp	r3, #1
   2a59e:	d007      	beq.n	2a5b0 <send_consumer_report+0x20>

    default:
        LOG_ERR("Unsupported endpoint %d", current_endpoint);
        return -ENOTSUP;
    }
}
   2a5a0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a5a4:	bd08      	pop	{r3, pc}
        int err = zmk_usb_hid_send_report((uint8_t *)consumer_report, sizeof(*consumer_report));
   2a5a6:	210d      	movs	r1, #13
}
   2a5a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_usb_hid_send_report((uint8_t *)consumer_report, sizeof(*consumer_report));
   2a5ac:	f7ff beca 	b.w	2a344 <zmk_usb_hid_send_report>
        int err = zmk_hog_send_consumer_report(&consumer_report->body);
   2a5b0:	3001      	adds	r0, #1
}
   2a5b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        int err = zmk_hog_send_consumer_report(&consumer_report->body);
   2a5b6:	f7ff bfab 	b.w	2a510 <zmk_hog_send_consumer_report>
   2a5ba:	bf00      	nop
   2a5bc:	20000da2 	.word	0x20000da2

0002a5c0 <endpoints_save_preferred_work>:
    settings_save_one("endpoints/preferred", &preferred_endpoint, sizeof(preferred_endpoint));
   2a5c0:	2201      	movs	r2, #1
   2a5c2:	4902      	ldr	r1, [pc, #8]	; (2a5cc <endpoints_save_preferred_work+0xc>)
   2a5c4:	4802      	ldr	r0, [pc, #8]	; (2a5d0 <endpoints_save_preferred_work+0x10>)
   2a5c6:	f001 bcbd 	b.w	2bf44 <settings_save_one>
   2a5ca:	bf00      	nop
   2a5cc:	20006cdd 	.word	0x20006cdd
   2a5d0:	000540b0 	.word	0x000540b0

0002a5d4 <zmk_endpoints_init>:
}

struct settings_handler endpoints_handler = {.name = "endpoints", .h_set = endpoints_handle_set};
#endif /* IS_ENABLED(CONFIG_SETTINGS) */

static int zmk_endpoints_init(const struct device *_arg) {
   2a5d4:	b510      	push	{r4, lr}
#if IS_ENABLED(CONFIG_SETTINGS)
    settings_subsys_init();
   2a5d6:	f001 fe01 	bl	2c1dc <settings_subsys_init>

    int err = settings_register(&endpoints_handler);
   2a5da:	4807      	ldr	r0, [pc, #28]	; (2a5f8 <zmk_endpoints_init+0x24>)
   2a5dc:	f001 fd40 	bl	2c060 <settings_register>
    if (err) {
   2a5e0:	4604      	mov	r4, r0
   2a5e2:	b930      	cbnz	r0, 2a5f2 <zmk_endpoints_init+0x1e>
        LOG_ERR("Failed to register the endpoints settings handler (err %d)", err);
        return err;
    }

    k_work_init_delayable(&endpoints_save_work, endpoints_save_preferred_work);
   2a5e4:	4805      	ldr	r0, [pc, #20]	; (2a5fc <zmk_endpoints_init+0x28>)
   2a5e6:	4906      	ldr	r1, [pc, #24]	; (2a600 <zmk_endpoints_init+0x2c>)
   2a5e8:	f026 fde7 	bl	511ba <k_work_init_delayable>

    settings_load_subtree("endpoints");
   2a5ec:	4805      	ldr	r0, [pc, #20]	; (2a604 <zmk_endpoints_init+0x30>)
   2a5ee:	f001 fce1 	bl	2bfb4 <settings_load_subtree>
#endif

    return 0;
}
   2a5f2:	4620      	mov	r0, r4
   2a5f4:	bd10      	pop	{r4, pc}
   2a5f6:	bf00      	nop
   2a5f8:	20000458 	.word	0x20000458
   2a5fc:	20001400 	.word	0x20001400
   2a600:	0002a5c1 	.word	0x0002a5c1
   2a604:	000540c4 	.word	0x000540c4

0002a608 <update_current_endpoint>:

    zmk_endpoints_send_report(HID_USAGE_KEY);
    zmk_endpoints_send_report(HID_USAGE_CONSUMER);
}

static void update_current_endpoint() {
   2a608:	b538      	push	{r3, r4, r5, lr}
    return zmk_ble_active_profile_is_connected();
   2a60a:	f7ff f9df 	bl	299cc <zmk_ble_active_profile_is_connected>
    if (is_ble_ready()) {
   2a60e:	b1c8      	cbz	r0, 2a644 <update_current_endpoint+0x3c>
static inline bool zmk_usb_is_hid_ready() { return zmk_usb_get_conn_state() == ZMK_USB_CONN_HID; }
   2a610:	f7ff fec8 	bl	2a3a4 <zmk_usb_get_conn_state>
        if (is_usb_ready()) {
   2a614:	2802      	cmp	r0, #2
   2a616:	d11b      	bne.n	2a650 <update_current_endpoint+0x48>
            return preferred_endpoint;
   2a618:	4b0f      	ldr	r3, [pc, #60]	; (2a658 <update_current_endpoint+0x50>)
   2a61a:	781c      	ldrb	r4, [r3, #0]
    enum zmk_endpoint new_endpoint = get_selected_endpoint();

    if (new_endpoint != current_endpoint) {
   2a61c:	4d0f      	ldr	r5, [pc, #60]	; (2a65c <update_current_endpoint+0x54>)
   2a61e:	782b      	ldrb	r3, [r5, #0]
   2a620:	42a3      	cmp	r3, r4
   2a622:	d017      	beq.n	2a654 <update_current_endpoint+0x4c>
    zmk_hid_keyboard_clear();
   2a624:	f7fe fda4 	bl	29170 <zmk_hid_keyboard_clear>
    zmk_hid_consumer_clear();
   2a628:	f7fe fdd2 	bl	291d0 <zmk_hid_consumer_clear>
        return send_keyboard_report();
   2a62c:	f7ff ff98 	bl	2a560 <send_keyboard_report>
        return send_consumer_report();
   2a630:	f7ff ffae 	bl	2a590 <send_consumer_report>
        disconnect_current_endpoint();

        current_endpoint = new_endpoint;
        LOG_INF("Endpoint changed: %d", current_endpoint);

        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   2a634:	4620      	mov	r0, r4
        current_endpoint = new_endpoint;
   2a636:	702c      	strb	r4, [r5, #0]
        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   2a638:	f7fe ff30 	bl	2949c <new_zmk_endpoint_selection_changed>
            (struct zmk_endpoint_selection_changed){.endpoint = current_endpoint}));
    }
}
   2a63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ZMK_EVENT_RAISE(new_zmk_endpoint_selection_changed(
   2a640:	f01f b9c9 	b.w	499d6 <zmk_event_manager_raise>
   2a644:	f7ff feae 	bl	2a3a4 <zmk_usb_get_conn_state>
        return ZMK_ENDPOINT_BLE;
   2a648:	1e84      	subs	r4, r0, #2
   2a64a:	bf18      	it	ne
   2a64c:	2401      	movne	r4, #1
   2a64e:	e7e5      	b.n	2a61c <update_current_endpoint+0x14>
   2a650:	2401      	movs	r4, #1
   2a652:	e7e3      	b.n	2a61c <update_current_endpoint+0x14>
}
   2a654:	bd38      	pop	{r3, r4, r5, pc}
   2a656:	bf00      	nop
   2a658:	20006cdd 	.word	0x20006cdd
   2a65c:	20000da2 	.word	0x20000da2

0002a660 <endpoints_handle_set>:
                                void *cb_arg) {
   2a660:	b570      	push	{r4, r5, r6, lr}
   2a662:	460c      	mov	r4, r1
   2a664:	4615      	mov	r5, r2
    if (settings_name_steq(name, "preferred", NULL)) {
   2a666:	490a      	ldr	r1, [pc, #40]	; (2a690 <endpoints_handle_set+0x30>)
   2a668:	2200      	movs	r2, #0
                                void *cb_arg) {
   2a66a:	461e      	mov	r6, r3
    if (settings_name_steq(name, "preferred", NULL)) {
   2a66c:	f020 fb40 	bl	4acf0 <settings_name_steq>
   2a670:	b150      	cbz	r0, 2a688 <endpoints_handle_set+0x28>
        if (len != sizeof(enum zmk_endpoint)) {
   2a672:	2c01      	cmp	r4, #1
   2a674:	d109      	bne.n	2a68a <endpoints_handle_set+0x2a>
        int err = read_cb(cb_arg, &preferred_endpoint, sizeof(enum zmk_endpoint));
   2a676:	4622      	mov	r2, r4
   2a678:	4906      	ldr	r1, [pc, #24]	; (2a694 <endpoints_handle_set+0x34>)
   2a67a:	4630      	mov	r0, r6
   2a67c:	47a8      	blx	r5
        if (err <= 0) {
   2a67e:	2800      	cmp	r0, #0
   2a680:	dd02      	ble.n	2a688 <endpoints_handle_set+0x28>
        update_current_endpoint();
   2a682:	f7ff ffc1 	bl	2a608 <update_current_endpoint>
    return 0;
   2a686:	2000      	movs	r0, #0
}
   2a688:	bd70      	pop	{r4, r5, r6, pc}
            return -EINVAL;
   2a68a:	f06f 0015 	mvn.w	r0, #21
   2a68e:	e7fb      	b.n	2a688 <endpoints_handle_set+0x28>
   2a690:	000540ba 	.word	0x000540ba
   2a694:	20006cdd 	.word	0x20006cdd

0002a698 <main>:
#define ZMK_KSCAN_DEV DT_LABEL(ZMK_MATRIX_NODE_ID)

void main(void) {
    LOG_INF("Welcome to ZMK!\n");

    if (zmk_kscan_init(ZMK_KSCAN_DEV) != 0) {
   2a698:	4801      	ldr	r0, [pc, #4]	; (2a6a0 <main+0x8>)
   2a69a:	f7fe bcb3 	b.w	29004 <zmk_kscan_init>
   2a69e:	bf00      	nop
   2a6a0:	000540ce 	.word	0x000540ce

0002a6a4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   2a6a4:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2a6a6:	4c09      	ldr	r4, [pc, #36]	; (2a6cc <crc8_ccitt+0x28>)
   2a6a8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   2a6aa:	4291      	cmp	r1, r2
   2a6ac:	d100      	bne.n	2a6b0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   2a6ae:	bd10      	pop	{r4, pc}
		val ^= p[i];
   2a6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
   2a6b4:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2a6b6:	0918      	lsrs	r0, r3, #4
   2a6b8:	5c20      	ldrb	r0, [r4, r0]
   2a6ba:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   2a6be:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2a6c0:	0918      	lsrs	r0, r3, #4
   2a6c2:	5c20      	ldrb	r0, [r4, r0]
   2a6c4:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   2a6c8:	b2c0      	uxtb	r0, r0
   2a6ca:	e7ee      	b.n	2a6aa <crc8_ccitt+0x6>
   2a6cc:	000540d4 	.word	0x000540d4

0002a6d0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   2a6d0:	680b      	ldr	r3, [r1, #0]
   2a6d2:	3301      	adds	r3, #1
   2a6d4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   2a6d6:	4b01      	ldr	r3, [pc, #4]	; (2a6dc <char_out+0xc>)
   2a6d8:	681b      	ldr	r3, [r3, #0]
   2a6da:	4718      	bx	r3
   2a6dc:	20000470 	.word	0x20000470

0002a6e0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   2a6e0:	b507      	push	{r0, r1, r2, lr}

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   2a6e2:	2300      	movs	r3, #0
   2a6e4:	9301      	str	r3, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   2a6e6:	4602      	mov	r2, r0
   2a6e8:	460b      	mov	r3, r1
   2a6ea:	4803      	ldr	r0, [pc, #12]	; (2a6f8 <vprintk+0x18>)
   2a6ec:	a901      	add	r1, sp, #4
   2a6ee:	f000 f8f7 	bl	2a8e0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   2a6f2:	b003      	add	sp, #12
   2a6f4:	f85d fb04 	ldr.w	pc, [sp], #4
   2a6f8:	0002a6d1 	.word	0x0002a6d1

0002a6fc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   2a6fc:	b530      	push	{r4, r5, lr}
   2a6fe:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   2a700:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   2a704:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   2a706:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   2a708:	a901      	add	r1, sp, #4
   2a70a:	4805      	ldr	r0, [pc, #20]	; (2a720 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   2a70c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   2a70e:	f000 f8e7 	bl	2a8e0 <cbvprintf>

	if (ctx.count < ctx.max) {
   2a712:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   2a716:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   2a718:	bfb8      	it	lt
   2a71a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   2a71c:	b005      	add	sp, #20
   2a71e:	bd30      	pop	{r4, r5, pc}
   2a720:	0004a0b7 	.word	0x0004a0b7

0002a724 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   2a724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a728:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   2a72c:	f019 0808 	ands.w	r8, r9, #8
{
   2a730:	4604      	mov	r4, r0
	if (processing) {
   2a732:	d00d      	beq.n	2a750 <process_event+0x2c>
		if (evt == EVT_COMPLETE) {
   2a734:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   2a736:	bf0c      	ite	eq
   2a738:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   2a73c:	f049 0920 	orrne.w	r9, r9, #32
   2a740:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   2a744:	f382 8811 	msr	BASEPRI, r2
   2a748:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   2a74c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a750:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   2a754:	2902      	cmp	r1, #2
   2a756:	d107      	bne.n	2a768 <process_event+0x44>
			evt = process_recheck(mgr);
   2a758:	4620      	mov	r0, r4
   2a75a:	f01f fcd9 	bl	4a110 <process_recheck>
		if (evt == EVT_NOP) {
   2a75e:	2800      	cmp	r0, #0
   2a760:	d0f0      	beq.n	2a744 <process_event+0x20>
		if (evt == EVT_COMPLETE) {
   2a762:	2801      	cmp	r0, #1
   2a764:	8b23      	ldrh	r3, [r4, #24]
   2a766:	d14a      	bne.n	2a7fe <process_event+0xda>
			res = mgr->last_res;
   2a768:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a76a:	8b23      	ldrh	r3, [r4, #24]
	if (res < 0) {
   2a76c:	2f00      	cmp	r7, #0
   2a76e:	da15      	bge.n	2a79c <process_event+0x78>
		*clients = mgr->clients;
   2a770:	6825      	ldr	r5, [r4, #0]
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   2a772:	e9c4 8800 	strd	r8, r8, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a776:	f023 0307 	bic.w	r3, r3, #7
   2a77a:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   2a77e:	8323      	strh	r3, [r4, #24]
		onoff_transition_fn transit = NULL;
   2a780:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   2a782:	8b23      	ldrh	r3, [r4, #24]
   2a784:	f003 0a07 	and.w	sl, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2a788:	45ca      	cmp	sl, r9
   2a78a:	d002      	beq.n	2a792 <process_event+0x6e>
		if (do_monitors
   2a78c:	68a1      	ldr	r1, [r4, #8]
   2a78e:	2900      	cmp	r1, #0
   2a790:	d156      	bne.n	2a840 <process_event+0x11c>
		    || !sys_slist_is_empty(&clients)
   2a792:	b90d      	cbnz	r5, 2a798 <process_event+0x74>
		    || (transit != NULL)) {
   2a794:	2e00      	cmp	r6, #0
   2a796:	d06d      	beq.n	2a874 <process_event+0x150>
   2a798:	2100      	movs	r1, #0
   2a79a:	e052      	b.n	2a842 <process_event+0x11e>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2a79c:	f003 0107 	and.w	r1, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   2a7a0:	1f48      	subs	r0, r1, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   2a7a2:	2801      	cmp	r0, #1
   2a7a4:	d81c      	bhi.n	2a7e0 <process_event+0xbc>
		*clients = mgr->clients;
   2a7a6:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   2a7aa:	2906      	cmp	r1, #6
		*clients = mgr->clients;
   2a7ac:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   2a7ae:	b29b      	uxth	r3, r3
	list->tail = NULL;
   2a7b0:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   2a7b4:	d10a      	bne.n	2a7cc <process_event+0xa8>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2a7b6:	b13d      	cbz	r5, 2a7c8 <process_event+0xa4>
   2a7b8:	8b61      	ldrh	r1, [r4, #26]
   2a7ba:	4628      	mov	r0, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a7bc:	6800      	ldr	r0, [r0, #0]
				mgr->refs += 1U;
   2a7be:	3101      	adds	r1, #1
   2a7c0:	b289      	uxth	r1, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2a7c2:	2800      	cmp	r0, #0
   2a7c4:	d1fa      	bne.n	2a7bc <process_event+0x98>
   2a7c6:	8361      	strh	r1, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a7c8:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   2a7cc:	8323      	strh	r3, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2a7ce:	4620      	mov	r0, r4
   2a7d0:	f01f fc9e 	bl	4a110 <process_recheck>
   2a7d4:	2800      	cmp	r0, #0
   2a7d6:	d0d3      	beq.n	2a780 <process_event+0x5c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2a7d8:	8b23      	ldrh	r3, [r4, #24]
   2a7da:	f043 0320 	orr.w	r3, r3, #32
   2a7de:	e7ce      	b.n	2a77e <process_event+0x5a>
	} else if (state == ONOFF_STATE_TO_OFF) {
   2a7e0:	2904      	cmp	r1, #4
   2a7e2:	d10a      	bne.n	2a7fa <process_event+0xd6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a7e4:	f023 0307 	bic.w	r3, r3, #7
   2a7e8:	b299      	uxth	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   2a7ea:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   2a7ec:	4620      	mov	r0, r4
   2a7ee:	f01f fc8f 	bl	4a110 <process_recheck>
   2a7f2:	b110      	cbz	r0, 2a7fa <process_event+0xd6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2a7f4:	f041 0120 	orr.w	r1, r1, #32
   2a7f8:	8321      	strh	r1, [r4, #24]
   2a7fa:	2500      	movs	r5, #0
   2a7fc:	e7c0      	b.n	2a780 <process_event+0x5c>
		} else if (evt == EVT_START) {
   2a7fe:	2803      	cmp	r0, #3
   2a800:	d109      	bne.n	2a816 <process_event+0xf2>
			transit = mgr->transitions->start;
   2a802:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a804:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   2a808:	680e      	ldr	r6, [r1, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a80a:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   2a80e:	8323      	strh	r3, [r4, #24]
   2a810:	2500      	movs	r5, #0
		res = 0;
   2a812:	462f      	mov	r7, r5
   2a814:	e7b5      	b.n	2a782 <process_event+0x5e>
		} else if (evt == EVT_STOP) {
   2a816:	2804      	cmp	r0, #4
   2a818:	d106      	bne.n	2a828 <process_event+0x104>
			transit = mgr->transitions->stop;
   2a81a:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a81c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   2a820:	684e      	ldr	r6, [r1, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a822:	f043 0304 	orr.w	r3, r3, #4
   2a826:	e7f2      	b.n	2a80e <process_event+0xea>
		} else if (evt == EVT_RESET) {
   2a828:	2805      	cmp	r0, #5
   2a82a:	d106      	bne.n	2a83a <process_event+0x116>
			transit = mgr->transitions->reset;
   2a82c:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a82e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   2a832:	688e      	ldr	r6, [r1, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2a834:	f043 0305 	orr.w	r3, r3, #5
   2a838:	e7e9      	b.n	2a80e <process_event+0xea>
   2a83a:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   2a83c:	462e      	mov	r6, r5
   2a83e:	e7e8      	b.n	2a812 <process_event+0xee>
				   && !sys_slist_is_empty(&mgr->monitors);
   2a840:	2101      	movs	r1, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   2a842:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   2a846:	8323      	strh	r3, [r4, #24]
   2a848:	f382 8811 	msr	BASEPRI, r2
   2a84c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   2a850:	b9f9      	cbnz	r1, 2a892 <process_event+0x16e>
	while (!sys_slist_is_empty(list)) {
   2a852:	bb85      	cbnz	r5, 2a8b6 <process_event+0x192>
			if (transit != NULL) {
   2a854:	b116      	cbz	r6, 2a85c <process_event+0x138>
				transit(mgr, transition_complete);
   2a856:	4921      	ldr	r1, [pc, #132]	; (2a8dc <process_event+0x1b8>)
   2a858:	4620      	mov	r0, r4
   2a85a:	47b0      	blx	r6
	__asm__ volatile(
   2a85c:	f04f 0320 	mov.w	r3, #32
   2a860:	f3ef 8211 	mrs	r2, BASEPRI
   2a864:	f383 8812 	msr	BASEPRI_MAX, r3
   2a868:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   2a86c:	8b23      	ldrh	r3, [r4, #24]
   2a86e:	f023 0308 	bic.w	r3, r3, #8
   2a872:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   2a874:	8b23      	ldrh	r3, [r4, #24]
   2a876:	06d9      	lsls	r1, r3, #27
   2a878:	d527      	bpl.n	2a8ca <process_event+0x1a6>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2a87a:	f023 0310 	bic.w	r3, r3, #16
   2a87e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   2a880:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   2a882:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   2a886:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   2a88a:	2900      	cmp	r1, #0
   2a88c:	f47f af62 	bne.w	2a754 <process_event+0x30>
out:
   2a890:	e758      	b.n	2a744 <process_event+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2a892:	68a1      	ldr	r1, [r4, #8]
   2a894:	2900      	cmp	r1, #0
   2a896:	d0dc      	beq.n	2a852 <process_event+0x12e>
   2a898:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   2a89c:	f8d1 b004 	ldr.w	fp, [r1, #4]
   2a8a0:	463b      	mov	r3, r7
   2a8a2:	4652      	mov	r2, sl
   2a8a4:	4620      	mov	r0, r4
   2a8a6:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2a8a8:	f1b9 0f00 	cmp.w	r9, #0
   2a8ac:	d0d1      	beq.n	2a852 <process_event+0x12e>
   2a8ae:	4649      	mov	r1, r9
   2a8b0:	f8d9 9000 	ldr.w	r9, [r9]
   2a8b4:	e7f2      	b.n	2a89c <process_event+0x178>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a8b6:	f8d5 9000 	ldr.w	r9, [r5]
		notify_one(mgr, cli, state, res);
   2a8ba:	4629      	mov	r1, r5
   2a8bc:	463b      	mov	r3, r7
   2a8be:	4652      	mov	r2, sl
   2a8c0:	4620      	mov	r0, r4
   2a8c2:	f01f fc41 	bl	4a148 <notify_one>
	while (!sys_slist_is_empty(list)) {
   2a8c6:	464d      	mov	r5, r9
   2a8c8:	e7c3      	b.n	2a852 <process_event+0x12e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   2a8ca:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   2a8ce:	bf1e      	ittt	ne
   2a8d0:	f023 0320 	bicne.w	r3, r3, #32
   2a8d4:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   2a8d6:	2102      	movne	r1, #2
   2a8d8:	e7d3      	b.n	2a882 <process_event+0x15e>
   2a8da:	bf00      	nop
   2a8dc:	0004a175 	.word	0x0004a175

0002a8e0 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
   2a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a8e4:	b08d      	sub	sp, #52	; 0x34
   2a8e6:	461f      	mov	r7, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
   2a8e8:	1e53      	subs	r3, r2, #1
{
   2a8ea:	9000      	str	r0, [sp, #0]
   2a8ec:	4689      	mov	r9, r1
	fmt--;
   2a8ee:	9301      	str	r3, [sp, #4]
	size_t count = 0;
   2a8f0:	f04f 0800 	mov.w	r8, #0

start:
	while (*++fmt != '%') {
   2a8f4:	9b01      	ldr	r3, [sp, #4]
   2a8f6:	7858      	ldrb	r0, [r3, #1]
   2a8f8:	2825      	cmp	r0, #37	; 0x25
   2a8fa:	f103 0401 	add.w	r4, r3, #1
   2a8fe:	d12a      	bne.n	2a956 <cbvprintf+0x76>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
   2a900:	2200      	movs	r2, #0
	precision = -1;
   2a902:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (fmt++ ; ; fmt++) {
   2a906:	f103 0c02 	add.w	ip, r3, #2
	length_mod = 0;
   2a90a:	4611      	mov	r1, r2
	padding_mode = 0;
   2a90c:	9202      	str	r2, [sp, #8]
	min_width = -1;
   2a90e:	4634      	mov	r4, r6
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
   2a910:	f04f 0e0a 	mov.w	lr, #10
		switch (*fmt) {
   2a914:	f89c 0000 	ldrb.w	r0, [ip]
   2a918:	f8cd c004 	str.w	ip, [sp, #4]
   2a91c:	2839      	cmp	r0, #57	; 0x39
   2a91e:	f10c 0c01 	add.w	ip, ip, #1
   2a922:	d845      	bhi.n	2a9b0 <cbvprintf+0xd0>
   2a924:	2831      	cmp	r0, #49	; 0x31
   2a926:	f080 8099 	bcs.w	2aa5c <cbvprintf+0x17c>
   2a92a:	282a      	cmp	r0, #42	; 0x2a
   2a92c:	f000 809f 	beq.w	2aa6e <cbvprintf+0x18e>
   2a930:	d825      	bhi.n	2a97e <cbvprintf+0x9e>
   2a932:	2820      	cmp	r0, #32
   2a934:	d028      	beq.n	2a988 <cbvprintf+0xa8>
   2a936:	d818      	bhi.n	2a96a <cbvprintf+0x8a>
   2a938:	2800      	cmp	r0, #0
   2a93a:	f000 819a 	beq.w	2ac72 <cbvprintf+0x392>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
   2a93e:	4649      	mov	r1, r9
   2a940:	9b00      	ldr	r3, [sp, #0]
   2a942:	2025      	movs	r0, #37	; 0x25
   2a944:	4798      	blx	r3
			OUTC(*fmt);
   2a946:	9b01      	ldr	r3, [sp, #4]
   2a948:	4649      	mov	r1, r9
   2a94a:	7818      	ldrb	r0, [r3, #0]
   2a94c:	9b00      	ldr	r3, [sp, #0]
   2a94e:	4798      	blx	r3
   2a950:	f108 0802 	add.w	r8, r8, #2
			goto start;
   2a954:	e7ce      	b.n	2a8f4 <cbvprintf+0x14>
		if (*fmt == '\0') {
   2a956:	2800      	cmp	r0, #0
   2a958:	f000 818b 	beq.w	2ac72 <cbvprintf+0x392>
		OUTC(*fmt);
   2a95c:	4649      	mov	r1, r9
   2a95e:	9b00      	ldr	r3, [sp, #0]
   2a960:	4798      	blx	r3
   2a962:	f108 0801 	add.w	r8, r8, #1
	while (*++fmt != '%') {
   2a966:	9401      	str	r4, [sp, #4]
   2a968:	e7c4      	b.n	2a8f4 <cbvprintf+0x14>
		switch (*fmt) {
   2a96a:	2823      	cmp	r0, #35	; 0x23
   2a96c:	d00c      	beq.n	2a988 <cbvprintf+0xa8>
   2a96e:	2825      	cmp	r0, #37	; 0x25
   2a970:	d1e5      	bne.n	2a93e <cbvprintf+0x5e>
			OUTC('%');
   2a972:	4649      	mov	r1, r9
   2a974:	9b00      	ldr	r3, [sp, #0]
   2a976:	4798      	blx	r3
   2a978:	f108 0801 	add.w	r8, r8, #1
			goto start;
   2a97c:	e7ba      	b.n	2a8f4 <cbvprintf+0x14>
		switch (*fmt) {
   2a97e:	282d      	cmp	r0, #45	; 0x2d
   2a980:	d07f      	beq.n	2aa82 <cbvprintf+0x1a2>
   2a982:	d803      	bhi.n	2a98c <cbvprintf+0xac>
   2a984:	282b      	cmp	r0, #43	; 0x2b
   2a986:	d1da      	bne.n	2a93e <cbvprintf+0x5e>
   2a988:	4602      	mov	r2, r0
   2a98a:	e7c3      	b.n	2a914 <cbvprintf+0x34>
   2a98c:	282e      	cmp	r0, #46	; 0x2e
   2a98e:	d05f      	beq.n	2aa50 <cbvprintf+0x170>
   2a990:	2830      	cmp	r0, #48	; 0x30
   2a992:	d1d4      	bne.n	2a93e <cbvprintf+0x5e>
			if (min_width < 0 && precision < 0 && !padding_mode) {
   2a994:	2c00      	cmp	r4, #0
   2a996:	f280 8168 	bge.w	2ac6a <cbvprintf+0x38a>
   2a99a:	2e00      	cmp	r6, #0
   2a99c:	da60      	bge.n	2aa60 <cbvprintf+0x180>
   2a99e:	9b02      	ldr	r3, [sp, #8]
   2a9a0:	2b00      	cmp	r3, #0
   2a9a2:	f000 8160 	beq.w	2ac66 <cbvprintf+0x386>
					min_width = 0;
   2a9a6:	2400      	movs	r4, #0
				min_width = 10 * min_width + *fmt - '0';
   2a9a8:	fb0e 0404 	mla	r4, lr, r4, r0
   2a9ac:	3c30      	subs	r4, #48	; 0x30
   2a9ae:	e7b1      	b.n	2a914 <cbvprintf+0x34>
		switch (*fmt) {
   2a9b0:	286c      	cmp	r0, #108	; 0x6c
   2a9b2:	d103      	bne.n	2a9bc <cbvprintf+0xdc>
			} else if (*fmt == 'l' && length_mod == 'l') {
   2a9b4:	296c      	cmp	r1, #108	; 0x6c
   2a9b6:	d146      	bne.n	2aa46 <cbvprintf+0x166>
				length_mod = 'L';
   2a9b8:	214c      	movs	r1, #76	; 0x4c
   2a9ba:	e7ab      	b.n	2a914 <cbvprintf+0x34>
		switch (*fmt) {
   2a9bc:	d826      	bhi.n	2aa0c <cbvprintf+0x12c>
   2a9be:	2864      	cmp	r0, #100	; 0x64
   2a9c0:	d013      	beq.n	2a9ea <cbvprintf+0x10a>
   2a9c2:	d80e      	bhi.n	2a9e2 <cbvprintf+0x102>
   2a9c4:	2858      	cmp	r0, #88	; 0x58
   2a9c6:	f000 80ed 	beq.w	2aba4 <cbvprintf+0x2c4>
   2a9ca:	2863      	cmp	r0, #99	; 0x63
   2a9cc:	d1b7      	bne.n	2a93e <cbvprintf+0x5e>
			int c = va_arg(ap, int);
   2a9ce:	463d      	mov	r5, r7
			data_len = 1;
   2a9d0:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
   2a9d4:	f855 3b04 	ldr.w	r3, [r5], #4
   2a9d8:	f88d 3018 	strb.w	r3, [sp, #24]
			data = buf;
   2a9dc:	f10d 0a18 	add.w	sl, sp, #24
   2a9e0:	e028      	b.n	2aa34 <cbvprintf+0x154>
		switch (*fmt) {
   2a9e2:	2868      	cmp	r0, #104	; 0x68
   2a9e4:	d050      	beq.n	2aa88 <cbvprintf+0x1a8>
   2a9e6:	2869      	cmp	r0, #105	; 0x69
   2a9e8:	d1a9      	bne.n	2a93e <cbvprintf+0x5e>
			if (length_mod == 'z') {
   2a9ea:	297a      	cmp	r1, #122	; 0x7a
   2a9ec:	d150      	bne.n	2aa90 <cbvprintf+0x1b0>
				d = va_arg(ap, unsigned int);
   2a9ee:	683b      	ldr	r3, [r7, #0]
			} else if (*fmt == 'u') {
   2a9f0:	2875      	cmp	r0, #117	; 0x75
   2a9f2:	f107 0504 	add.w	r5, r7, #4
				d = va_arg(ap, unsigned int);
   2a9f6:	469a      	mov	sl, r3
			} else if (*fmt == 'u') {
   2a9f8:	f040 809a 	bne.w	2ab30 <cbvprintf+0x250>
				d = va_arg(ap, unsigned int);
   2a9fc:	f04f 0b00 	mov.w	fp, #0
			} else if (special == ' ') {
   2aa00:	2a20      	cmp	r2, #32
   2aa02:	f040 8098 	bne.w	2ab36 <cbvprintf+0x256>
				min_width--;
   2aa06:	3c01      	subs	r4, #1
				prefix = " ";
   2aa08:	4f9c      	ldr	r7, [pc, #624]	; (2ac7c <cbvprintf+0x39c>)
   2aa0a:	e057      	b.n	2aabc <cbvprintf+0x1dc>
		switch (*fmt) {
   2aa0c:	2875      	cmp	r0, #117	; 0x75
   2aa0e:	d0ec      	beq.n	2a9ea <cbvprintf+0x10a>
   2aa10:	d813      	bhi.n	2aa3a <cbvprintf+0x15a>
   2aa12:	2870      	cmp	r0, #112	; 0x70
   2aa14:	f000 809b 	beq.w	2ab4e <cbvprintf+0x26e>
   2aa18:	2873      	cmp	r0, #115	; 0x73
   2aa1a:	d190      	bne.n	2a93e <cbvprintf+0x5e>
			data = va_arg(ap, char *);
   2aa1c:	463d      	mov	r5, r7
   2aa1e:	f855 ab04 	ldr.w	sl, [r5], #4
			data_len = strlen(data);
   2aa22:	4650      	mov	r0, sl
   2aa24:	f021 fc30 	bl	4c288 <strlen>
			if (precision >= 0 && data_len > precision) {
   2aa28:	2e00      	cmp	r6, #0
			data_len = strlen(data);
   2aa2a:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
   2aa2c:	db02      	blt.n	2aa34 <cbvprintf+0x154>
   2aa2e:	42b0      	cmp	r0, r6
   2aa30:	bfa8      	it	ge
   2aa32:	46b3      	movge	fp, r6
   2aa34:	4f92      	ldr	r7, [pc, #584]	; (2ac80 <cbvprintf+0x3a0>)
   2aa36:	2600      	movs	r6, #0
   2aa38:	e06d      	b.n	2ab16 <cbvprintf+0x236>
		switch (*fmt) {
   2aa3a:	2878      	cmp	r0, #120	; 0x78
   2aa3c:	f000 80b2 	beq.w	2aba4 <cbvprintf+0x2c4>
   2aa40:	287a      	cmp	r0, #122	; 0x7a
   2aa42:	f47f af7c 	bne.w	2a93e <cbvprintf+0x5e>
			} else if (length_mod == '\0') {
   2aa46:	2900      	cmp	r1, #0
   2aa48:	f47f af79 	bne.w	2a93e <cbvprintf+0x5e>
   2aa4c:	4601      	mov	r1, r0
		switch (*fmt) {
   2aa4e:	e761      	b.n	2a914 <cbvprintf+0x34>
			padding_mode &= (char)~PAD_ZERO;
   2aa50:	9b02      	ldr	r3, [sp, #8]
   2aa52:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   2aa56:	9302      	str	r3, [sp, #8]
			precision = 0;
   2aa58:	2600      	movs	r6, #0
			continue;
   2aa5a:	e75b      	b.n	2a914 <cbvprintf+0x34>
			if (precision >= 0) {
   2aa5c:	2e00      	cmp	r6, #0
   2aa5e:	db03      	blt.n	2aa68 <cbvprintf+0x188>
				precision = 10 * precision + *fmt - '0';
   2aa60:	fb0e 0606 	mla	r6, lr, r6, r0
   2aa64:	3e30      	subs	r6, #48	; 0x30
   2aa66:	e755      	b.n	2a914 <cbvprintf+0x34>
				if (min_width < 0) {
   2aa68:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2aa6c:	e79c      	b.n	2a9a8 <cbvprintf+0xc8>
			if (precision >= 0) {
   2aa6e:	2e00      	cmp	r6, #0
   2aa70:	f857 3b04 	ldr.w	r3, [r7], #4
   2aa74:	db01      	blt.n	2aa7a <cbvprintf+0x19a>
				precision = va_arg(ap, int);
   2aa76:	461e      	mov	r6, r3
   2aa78:	e74c      	b.n	2a914 <cbvprintf+0x34>
				if (min_width < 0) {
   2aa7a:	1e1c      	subs	r4, r3, #0
   2aa7c:	f6bf af4a 	bge.w	2a914 <cbvprintf+0x34>
					min_width = -min_width;
   2aa80:	4264      	negs	r4, r4
			padding_mode = PAD_TAIL;
   2aa82:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
   2aa84:	9302      	str	r3, [sp, #8]
   2aa86:	e745      	b.n	2a914 <cbvprintf+0x34>
			if (*fmt == 'h' && length_mod == 'h') {
   2aa88:	2968      	cmp	r1, #104	; 0x68
   2aa8a:	d1dc      	bne.n	2aa46 <cbvprintf+0x166>
				length_mod = 'H';
   2aa8c:	2148      	movs	r1, #72	; 0x48
   2aa8e:	e741      	b.n	2a914 <cbvprintf+0x34>
			} else if (length_mod == 'l') {
   2aa90:	296c      	cmp	r1, #108	; 0x6c
   2aa92:	d0ac      	beq.n	2a9ee <cbvprintf+0x10e>
			} else if (length_mod == 'L') {
   2aa94:	294c      	cmp	r1, #76	; 0x4c
   2aa96:	d1aa      	bne.n	2a9ee <cbvprintf+0x10e>
				if (*fmt == 'u') {
   2aa98:	1dfd      	adds	r5, r7, #7
   2aa9a:	f025 0507 	bic.w	r5, r5, #7
   2aa9e:	2875      	cmp	r0, #117	; 0x75
   2aaa0:	e8f5 ab02 	ldrd	sl, fp, [r5], #8
   2aaa4:	d0ac      	beq.n	2aa00 <cbvprintf+0x120>
			if (*fmt != 'u' && (int_value_type)d < 0) {
   2aaa6:	f1ba 0f00 	cmp.w	sl, #0
   2aaaa:	f17b 0300 	sbcs.w	r3, fp, #0
   2aaae:	daa7      	bge.n	2aa00 <cbvprintf+0x120>
				d = -d;
   2aab0:	f1da 0a00 	rsbs	sl, sl, #0
				prefix = "-";
   2aab4:	4f73      	ldr	r7, [pc, #460]	; (2ac84 <cbvprintf+0x3a4>)
				d = -d;
   2aab6:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
				min_width--;
   2aaba:	3c01      	subs	r4, #1
	int i = 0;
   2aabc:	ab0b      	add	r3, sp, #44	; 0x2c
   2aabe:	9304      	str	r3, [sp, #16]
   2aac0:	2300      	movs	r3, #0
   2aac2:	9303      	str	r3, [sp, #12]
		buftop[--i] = c + '0';
   2aac4:	9b03      	ldr	r3, [sp, #12]
   2aac6:	3b01      	subs	r3, #1
   2aac8:	9305      	str	r3, [sp, #20]
		unsigned int c = num % base;
   2aaca:	220a      	movs	r2, #10
   2aacc:	2300      	movs	r3, #0
   2aace:	4650      	mov	r0, sl
   2aad0:	4659      	mov	r1, fp
   2aad2:	f7fb fb15 	bl	26100 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
   2aad6:	9b04      	ldr	r3, [sp, #16]
   2aad8:	3230      	adds	r2, #48	; 0x30
   2aada:	f803 2901 	strb.w	r2, [r3], #-1
		num /= base;
   2aade:	4650      	mov	r0, sl
		buftop[--i] = c + '0';
   2aae0:	9304      	str	r3, [sp, #16]
		num /= base;
   2aae2:	220a      	movs	r2, #10
   2aae4:	2300      	movs	r3, #0
   2aae6:	4659      	mov	r1, fp
   2aae8:	f7fb fb0a 	bl	26100 <__aeabi_uldivmod>
	} while (num);
   2aaec:	f1bb 0f00 	cmp.w	fp, #0
   2aaf0:	bf08      	it	eq
   2aaf2:	f1ba 0f0a 	cmpeq.w	sl, #10
   2aaf6:	d225      	bcs.n	2ab44 <cbvprintf+0x264>
	return -i;
   2aaf8:	9b03      	ldr	r3, [sp, #12]
   2aafa:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
   2aafe:	ab0c      	add	r3, sp, #48	; 0x30
   2ab00:	eba3 0a0b 	sub.w	sl, r3, fp
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   2ab04:	2e00      	cmp	r6, #0
			data = buf + sizeof(buf) - data_len;
   2ab06:	f1aa 0a03 	sub.w	sl, sl, #3
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
   2ab0a:	da04      	bge.n	2ab16 <cbvprintf+0x236>
   2ab0c:	9b02      	ldr	r3, [sp, #8]
   2ab0e:	f013 0f01 	tst.w	r3, #1
   2ab12:	bf18      	it	ne
   2ab14:	4626      	movne	r6, r4
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
   2ab16:	eba6 030b 	sub.w	r3, r6, fp
		if (precision > 0) {
   2ab1a:	2b00      	cmp	r3, #0
		precision -= data_len;
   2ab1c:	9303      	str	r3, [sp, #12]
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
   2ab1e:	9b02      	ldr	r3, [sp, #8]
		min_width -= data_len;
   2ab20:	bfd4      	ite	le
   2ab22:	eba4 040b 	suble.w	r4, r4, fp
			min_width -= precision;
   2ab26:	1ba4      	subgt	r4, r4, r6
		if (!(padding_mode & PAD_TAIL)) {
   2ab28:	079b      	lsls	r3, r3, #30
   2ab2a:	d466      	bmi.n	2abfa <cbvprintf+0x31a>
   2ab2c:	4626      	mov	r6, r4
   2ab2e:	e05d      	b.n	2abec <cbvprintf+0x30c>
				d = va_arg(ap, int);
   2ab30:	ea4f 7be3 	mov.w	fp, r3, asr #31
   2ab34:	e7b7      	b.n	2aaa6 <cbvprintf+0x1c6>
			} else if (special == '+') {
   2ab36:	2a2b      	cmp	r2, #43	; 0x2b
				min_width--;
   2ab38:	bf06      	itte	eq
   2ab3a:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
				prefix = "+";
   2ab3e:	4f52      	ldreq	r7, [pc, #328]	; (2ac88 <cbvprintf+0x3a8>)
	prefix = "";
   2ab40:	4f4f      	ldrne	r7, [pc, #316]	; (2ac80 <cbvprintf+0x3a0>)
   2ab42:	e7bb      	b.n	2aabc <cbvprintf+0x1dc>
		buftop[--i] = c + '0';
   2ab44:	9b05      	ldr	r3, [sp, #20]
   2ab46:	9303      	str	r3, [sp, #12]
		num /= base;
   2ab48:	4682      	mov	sl, r0
   2ab4a:	468b      	mov	fp, r1
   2ab4c:	e7ba      	b.n	2aac4 <cbvprintf+0x1e4>
				x = (uintptr_t)va_arg(ap, void *);
   2ab4e:	463d      	mov	r5, r7
   2ab50:	f855 2b04 	ldr.w	r2, [r5], #4
				if (x == (uint_value_type)0) {
   2ab54:	2a00      	cmp	r2, #0
   2ab56:	d040      	beq.n	2abda <cbvprintf+0x2fa>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2ab58:	4f4c      	ldr	r7, [pc, #304]	; (2ac8c <cbvprintf+0x3ac>)
				x = (uintptr_t)va_arg(ap, void *);
   2ab5a:	4692      	mov	sl, r2
   2ab5c:	f04f 0b00 	mov.w	fp, #0
				min_width -= 2;
   2ab60:	3c02      	subs	r4, #2
			data_len = convert_value(x, 16, ALPHA(*fmt),
   2ab62:	f000 0060 	and.w	r0, r0, #96	; 0x60
   2ab66:	f1a0 0e39 	sub.w	lr, r0, #57	; 0x39
	int i = 0;
   2ab6a:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
   2ab6e:	2300      	movs	r3, #0
		unsigned int c = num % base;
   2ab70:	f00a 020f 	and.w	r2, sl, #15
		if (c >= 10) {
   2ab74:	2a09      	cmp	r2, #9
			c += alpha;
   2ab76:	bf88      	it	hi
   2ab78:	4472      	addhi	r2, lr
		buftop[--i] = c + '0';
   2ab7a:	3230      	adds	r2, #48	; 0x30
	} while (num);
   2ab7c:	f1bb 0f00 	cmp.w	fp, #0
		buftop[--i] = c + '0';
   2ab80:	f80c 2901 	strb.w	r2, [ip], #-1
	} while (num);
   2ab84:	bf08      	it	eq
   2ab86:	f1ba 0f10 	cmpeq.w	sl, #16
		num /= base;
   2ab8a:	ea4f 121a 	mov.w	r2, sl, lsr #4
		buftop[--i] = c + '0';
   2ab8e:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
		num /= base;
   2ab92:	ea42 720b 	orr.w	r2, r2, fp, lsl #28
   2ab96:	ea4f 111b 	mov.w	r1, fp, lsr #4
	} while (num);
   2ab9a:	d3ae      	bcc.n	2aafa <cbvprintf+0x21a>
		buftop[--i] = c + '0';
   2ab9c:	4603      	mov	r3, r0
		num /= base;
   2ab9e:	4692      	mov	sl, r2
   2aba0:	468b      	mov	fp, r1
   2aba2:	e7e5      	b.n	2ab70 <cbvprintf+0x290>
			} else if (length_mod == 'l') {
   2aba4:	296c      	cmp	r1, #108	; 0x6c
   2aba6:	d106      	bne.n	2abb6 <cbvprintf+0x2d6>
				x = va_arg(ap, unsigned int);
   2aba8:	463d      	mov	r5, r7
   2abaa:	f04f 0b00 	mov.w	fp, #0
   2abae:	f855 3b04 	ldr.w	r3, [r5], #4
   2abb2:	469a      	mov	sl, r3
   2abb4:	e006      	b.n	2abc4 <cbvprintf+0x2e4>
			} else if (length_mod == 'L') {
   2abb6:	294c      	cmp	r1, #76	; 0x4c
   2abb8:	d1f6      	bne.n	2aba8 <cbvprintf+0x2c8>
				unsigned long long llx =
   2abba:	1dfd      	adds	r5, r7, #7
   2abbc:	f025 0507 	bic.w	r5, r5, #7
   2abc0:	e8f5 ab02 	ldrd	sl, fp, [r5], #8
			if (special == '#') {
   2abc4:	2a23      	cmp	r2, #35	; 0x23
   2abc6:	d106      	bne.n	2abd6 <cbvprintf+0x2f6>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
   2abc8:	4b30      	ldr	r3, [pc, #192]	; (2ac8c <cbvprintf+0x3ac>)
   2abca:	4f31      	ldr	r7, [pc, #196]	; (2ac90 <cbvprintf+0x3b0>)
   2abcc:	f010 0f20 	tst.w	r0, #32
   2abd0:	bf18      	it	ne
   2abd2:	461f      	movne	r7, r3
   2abd4:	e7c4      	b.n	2ab60 <cbvprintf+0x280>
	prefix = "";
   2abd6:	4f2a      	ldr	r7, [pc, #168]	; (2ac80 <cbvprintf+0x3a0>)
   2abd8:	e7c3      	b.n	2ab62 <cbvprintf+0x282>
					data_len = 5;
   2abda:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
   2abde:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 2ac94 <cbvprintf+0x3b4>
   2abe2:	e727      	b.n	2aa34 <cbvprintf+0x154>
			while (--min_width >= 0) {
				OUTC(' ');
   2abe4:	4649      	mov	r1, r9
   2abe6:	2020      	movs	r0, #32
   2abe8:	9b00      	ldr	r3, [sp, #0]
   2abea:	4798      	blx	r3
			while (--min_width >= 0) {
   2abec:	3e01      	subs	r6, #1
   2abee:	d5f9      	bpl.n	2abe4 <cbvprintf+0x304>
   2abf0:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
   2abf4:	3c01      	subs	r4, #1
   2abf6:	4490      	add	r8, r2
   2abf8:	1aa4      	subs	r4, r4, r2
   2abfa:	eba8 0607 	sub.w	r6, r8, r7
   2abfe:	e002      	b.n	2ac06 <cbvprintf+0x326>
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
   2ac00:	4649      	mov	r1, r9
   2ac02:	9b00      	ldr	r3, [sp, #0]
   2ac04:	4798      	blx	r3
   2ac06:	eb06 0807 	add.w	r8, r6, r7
		while (*prefix) {
   2ac0a:	f817 0b01 	ldrb.w	r0, [r7], #1
   2ac0e:	2800      	cmp	r0, #0
   2ac10:	d1f6      	bne.n	2ac00 <cbvprintf+0x320>
		precision -= data_len;
   2ac12:	9e03      	ldr	r6, [sp, #12]
		}
		while (--precision >= 0) {
   2ac14:	3e01      	subs	r6, #1
   2ac16:	d516      	bpl.n	2ac46 <cbvprintf+0x366>
   2ac18:	9b03      	ldr	r3, [sp, #12]
   2ac1a:	465e      	mov	r6, fp
   2ac1c:	ea23 77e3 	bic.w	r7, r3, r3, asr #31
			OUTC('0');
		}
		while (--data_len >= 0) {
   2ac20:	3e01      	subs	r6, #1
   2ac22:	d515      	bpl.n	2ac50 <cbvprintf+0x370>
   2ac24:	f1bb 0f00 	cmp.w	fp, #0
   2ac28:	bfac      	ite	ge
   2ac2a:	44bb      	addge	fp, r7
   2ac2c:	f107 0b00 	addlt.w	fp, r7, #0
   2ac30:	4626      	mov	r6, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
   2ac32:	3e01      	subs	r6, #1
   2ac34:	d512      	bpl.n	2ac5c <cbvprintf+0x37c>
   2ac36:	2c00      	cmp	r4, #0
   2ac38:	bfac      	ite	ge
   2ac3a:	445c      	addge	r4, fp
   2ac3c:	f10b 0400 	addlt.w	r4, fp, #0
   2ac40:	44a0      	add	r8, r4
   2ac42:	462f      	mov	r7, r5
   2ac44:	e656      	b.n	2a8f4 <cbvprintf+0x14>
			OUTC('0');
   2ac46:	4649      	mov	r1, r9
   2ac48:	9b00      	ldr	r3, [sp, #0]
   2ac4a:	2030      	movs	r0, #48	; 0x30
   2ac4c:	4798      	blx	r3
   2ac4e:	e7e1      	b.n	2ac14 <cbvprintf+0x334>
			OUTC(*data++);
   2ac50:	4649      	mov	r1, r9
   2ac52:	f81a 0b01 	ldrb.w	r0, [sl], #1
   2ac56:	9b00      	ldr	r3, [sp, #0]
   2ac58:	4798      	blx	r3
   2ac5a:	e7e1      	b.n	2ac20 <cbvprintf+0x340>
			OUTC(' ');
   2ac5c:	4649      	mov	r1, r9
   2ac5e:	9b00      	ldr	r3, [sp, #0]
   2ac60:	2020      	movs	r0, #32
   2ac62:	4798      	blx	r3
   2ac64:	e7e5      	b.n	2ac32 <cbvprintf+0x352>
				padding_mode = PAD_ZERO;
   2ac66:	2301      	movs	r3, #1
   2ac68:	e70c      	b.n	2aa84 <cbvprintf+0x1a4>
			if (precision >= 0) {
   2ac6a:	2e00      	cmp	r6, #0
   2ac6c:	f6bf aef8 	bge.w	2aa60 <cbvprintf+0x180>
   2ac70:	e69a      	b.n	2a9a8 <cbvprintf+0xc8>
		}

		goto start;
	}
}
   2ac72:	4640      	mov	r0, r8
   2ac74:	b00d      	add	sp, #52	; 0x34
   2ac76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac7a:	bf00      	nop
   2ac7c:	000540e6 	.word	0x000540e6
   2ac80:	0005411e 	.word	0x0005411e
   2ac84:	000540e4 	.word	0x000540e4
   2ac88:	000540e8 	.word	0x000540e8
   2ac8c:	000540ea 	.word	0x000540ea
   2ac90:	000540ed 	.word	0x000540ed
   2ac94:	000540f0 	.word	0x000540f0

0002ac98 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   2ac98:	b508      	push	{r3, lr}
   2ac9a:	f04f 0220 	mov.w	r2, #32
   2ac9e:	f3ef 8311 	mrs	r3, BASEPRI
   2aca2:	f382 8812 	msr	BASEPRI_MAX, r2
   2aca6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   2acaa:	f002 fa13 	bl	2d0d4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2acae:	4803      	ldr	r0, [pc, #12]	; (2acbc <sys_reboot+0x24>)
   2acb0:	f01f fa14 	bl	4a0dc <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   2acb4:	f001 fed2 	bl	2ca5c <arch_cpu_idle>
   2acb8:	e7fc      	b.n	2acb4 <sys_reboot+0x1c>
   2acba:	bf00      	nop
   2acbc:	000540f6 	.word	0x000540f6

0002acc0 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   2acc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   2acc2:	2407      	movs	r4, #7
   2acc4:	9402      	str	r4, [sp, #8]
   2acc6:	4c04      	ldr	r4, [pc, #16]	; (2acd8 <read_pnp_id+0x18>)
   2acc8:	9401      	str	r4, [sp, #4]
   2acca:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2acce:	9400      	str	r4, [sp, #0]
   2acd0:	f023 feac 	bl	4ea2c <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   2acd4:	b004      	add	sp, #16
   2acd6:	bd10      	pop	{r4, pc}
   2acd8:	20000da3 	.word	0x20000da3

0002acdc <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   2acdc:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   2acde:	4c08      	ldr	r4, [pc, #32]	; (2ad00 <read_blvl+0x24>)
{
   2ace0:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   2ace2:	7824      	ldrb	r4, [r4, #0]
   2ace4:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   2ace8:	2401      	movs	r4, #1
   2acea:	9402      	str	r4, [sp, #8]
   2acec:	f10d 0417 	add.w	r4, sp, #23
   2acf0:	9401      	str	r4, [sp, #4]
   2acf2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2acf6:	9400      	str	r4, [sp, #0]
   2acf8:	f023 fe98 	bl	4ea2c <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   2acfc:	b006      	add	sp, #24
   2acfe:	bd10      	pop	{r4, pc}
   2ad00:	20000daa 	.word	0x20000daa

0002ad04 <bt_bas_set_battery_level>:
{
	return battery_level;
}

int bt_bas_set_battery_level(uint8_t level)
{
   2ad04:	b500      	push	{lr}
   2ad06:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   2ad08:	2864      	cmp	r0, #100	; 0x64
{
   2ad0a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   2ad0e:	d819      	bhi.n	2ad44 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   2ad10:	4b0e      	ldr	r3, [pc, #56]	; (2ad4c <bt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
   2ad12:	2218      	movs	r2, #24
   2ad14:	7018      	strb	r0, [r3, #0]
   2ad16:	2100      	movs	r1, #0
   2ad18:	a802      	add	r0, sp, #8
   2ad1a:	f021 faf2 	bl	4c302 <memset>
	params.attr = attr;
   2ad1e:	4b0c      	ldr	r3, [pc, #48]	; (2ad50 <bt_bas_set_battery_level+0x4c>)
   2ad20:	9303      	str	r3, [sp, #12]
	params.data = data;
   2ad22:	f10d 0307 	add.w	r3, sp, #7
   2ad26:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
   2ad28:	a902      	add	r1, sp, #8
	params.len = len;
   2ad2a:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   2ad2c:	2000      	movs	r0, #0
	params.len = len;
   2ad2e:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   2ad32:	f007 f8bb 	bl	31eac <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   2ad36:	f110 0f80 	cmn.w	r0, #128	; 0x80
   2ad3a:	bf08      	it	eq
   2ad3c:	2000      	moveq	r0, #0
}
   2ad3e:	b009      	add	sp, #36	; 0x24
   2ad40:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2ad44:	f06f 0015 	mvn.w	r0, #21
   2ad48:	e7f9      	b.n	2ad3e <bt_bas_set_battery_level+0x3a>
   2ad4a:	bf00      	nop
   2ad4c:	20000daa 	.word	0x20000daa
   2ad50:	00052714 	.word	0x00052714

0002ad54 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   2ad54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2ad58:	4688      	mov	r8, r1
   2ad5a:	4607      	mov	r7, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ad5c:	2108      	movs	r1, #8
   2ad5e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   2ad60:	4e14      	ldr	r6, [pc, #80]	; (2adb4 <nvs_recover_last_ate+0x60>)
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ad62:	f01f fd3b 	bl	4a7dc <nvs_al_size.isra.0>
	*addr -= ate_size;
   2ad66:	f8d8 4000 	ldr.w	r4, [r8]
   2ad6a:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ad6c:	4681      	mov	r9, r0
	*addr -= ate_size;
   2ad6e:	f8c8 4000 	str.w	r4, [r8]
	data_end_addr = *addr & ADDR_SECT_MASK;
   2ad72:	ea04 0506 	and.w	r5, r4, r6
	while (ate_end_addr > data_end_addr) {
   2ad76:	42a5      	cmp	r5, r4
   2ad78:	d303      	bcc.n	2ad82 <nvs_recover_last_ate+0x2e>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   2ad7a:	2000      	movs	r0, #0
}
   2ad7c:	b003      	add	sp, #12
   2ad7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ad82:	2308      	movs	r3, #8
   2ad84:	466a      	mov	r2, sp
   2ad86:	4621      	mov	r1, r4
   2ad88:	4638      	mov	r0, r7
   2ad8a:	f01f fca9 	bl	4a6e0 <nvs_flash_rd>
		if (rc) {
   2ad8e:	2800      	cmp	r0, #0
   2ad90:	d1f4      	bne.n	2ad7c <nvs_recover_last_ate+0x28>
		if (nvs_ate_valid(fs, &end_ate)) {
   2ad92:	4669      	mov	r1, sp
   2ad94:	4638      	mov	r0, r7
   2ad96:	f01f fd2b 	bl	4a7f0 <nvs_ate_valid>
   2ad9a:	b140      	cbz	r0, 2adae <nvs_recover_last_ate+0x5a>
			data_end_addr += end_ate.offset + end_ate.len;
   2ad9c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2ada0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   2ada4:	f8c8 4000 	str.w	r4, [r8]
			data_end_addr &= ADDR_SECT_MASK;
   2ada8:	4035      	ands	r5, r6
			data_end_addr += end_ate.offset + end_ate.len;
   2adaa:	4413      	add	r3, r2
   2adac:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   2adae:	eba4 0409 	sub.w	r4, r4, r9
   2adb2:	e7e0      	b.n	2ad76 <nvs_recover_last_ate+0x22>
   2adb4:	ffff0000 	.word	0xffff0000

0002adb8 <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   2adb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2adbc:	4604      	mov	r4, r0
   2adbe:	b089      	sub	sp, #36	; 0x24
   2adc0:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   2adc2:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   2adc6:	4638      	mov	r0, r7
   2adc8:	f026 f87d 	bl	50ec6 <z_impl_k_mutex_init>
   2adcc:	4628      	mov	r0, r5
   2adce:	f01d f9a1 	bl	48114 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   2add2:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   2add4:	2800      	cmp	r0, #0
   2add6:	f000 811f 	beq.w	2b018 <nvs_init+0x260>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   2adda:	6883      	ldr	r3, [r0, #8]
   2addc:	68db      	ldr	r3, [r3, #12]
   2adde:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   2ade0:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   2ade2:	b928      	cbnz	r0, 2adf0 <nvs_init+0x38>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
   2ade4:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   2ade8:	4628      	mov	r0, r5
   2adea:	b009      	add	sp, #36	; 0x24
   2adec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   2adf0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   2adf2:	6883      	ldr	r3, [r0, #8]
   2adf4:	68db      	ldr	r3, [r3, #12]
   2adf6:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   2adf8:	6803      	ldr	r3, [r0, #0]
   2adfa:	3b01      	subs	r3, #1
   2adfc:	2b1f      	cmp	r3, #31
   2adfe:	d8f1      	bhi.n	2ade4 <nvs_init+0x2c>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   2ae00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2ae02:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   2ae04:	aa05      	add	r2, sp, #20
   2ae06:	f025 fc0d 	bl	50624 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   2ae0a:	2800      	cmp	r0, #0
   2ae0c:	d1ea      	bne.n	2ade4 <nvs_init+0x2c>
	if (!fs->sector_size || fs->sector_size % info.size) {
   2ae0e:	89a3      	ldrh	r3, [r4, #12]
   2ae10:	2b00      	cmp	r3, #0
   2ae12:	d0e7      	beq.n	2ade4 <nvs_init+0x2c>
   2ae14:	9a06      	ldr	r2, [sp, #24]
   2ae16:	fbb3 f5f2 	udiv	r5, r3, r2
   2ae1a:	fb02 3515 	mls	r5, r2, r5, r3
   2ae1e:	2d00      	cmp	r5, #0
   2ae20:	d1e0      	bne.n	2ade4 <nvs_init+0x2c>
	if (fs->sector_count < 2) {
   2ae22:	89e3      	ldrh	r3, [r4, #14]
   2ae24:	2b01      	cmp	r3, #1
   2ae26:	d9dd      	bls.n	2ade4 <nvs_init+0x2c>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   2ae28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   2ae2a:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   2ae2c:	f893 8004 	ldrb.w	r8, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2ae30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ae34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ae38:	4638      	mov	r0, r7
   2ae3a:	f01d fc47 	bl	486cc <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ae3e:	2108      	movs	r1, #8
   2ae40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2ae42:	f01f fccb 	bl	4a7dc <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   2ae46:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2ae48:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   2ae4a:	89e3      	ldrh	r3, [r4, #14]
   2ae4c:	fa1f fa85 	uxth.w	sl, r5
   2ae50:	4553      	cmp	r3, sl
   2ae52:	d844      	bhi.n	2aede <nvs_init+0x126>
	if (closed_sectors == fs->sector_count) {
   2ae54:	89e3      	ldrh	r3, [r4, #14]
   2ae56:	454b      	cmp	r3, r9
   2ae58:	f000 80d3 	beq.w	2b002 <nvs_init+0x24a>
	if (i == fs->sector_count) {
   2ae5c:	4553      	cmp	r3, sl
   2ae5e:	d10b      	bne.n	2ae78 <nvs_init+0xc0>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   2ae60:	9900      	ldr	r1, [sp, #0]
   2ae62:	2308      	movs	r3, #8
   2ae64:	4642      	mov	r2, r8
   2ae66:	1b89      	subs	r1, r1, r6
   2ae68:	4620      	mov	r0, r4
   2ae6a:	f01f fc70 	bl	4a74e <nvs_flash_cmp_const>
		if (!rc) {
   2ae6e:	b918      	cbnz	r0, 2ae78 <nvs_init+0xc0>
			nvs_sector_advance(fs, &addr);
   2ae70:	4669      	mov	r1, sp
   2ae72:	89e0      	ldrh	r0, [r4, #14]
   2ae74:	f01f fcd6 	bl	4a824 <nvs_sector_advance.isra.1>
	rc = nvs_recover_last_ate(fs, &addr);
   2ae78:	4669      	mov	r1, sp
   2ae7a:	4620      	mov	r0, r4
   2ae7c:	f7ff ff6a 	bl	2ad54 <nvs_recover_last_ate>
	if (rc) {
   2ae80:	4605      	mov	r5, r0
   2ae82:	2800      	cmp	r0, #0
   2ae84:	f040 80bf 	bne.w	2b006 <nvs_init+0x24e>
	fs->ate_wra = addr;
   2ae88:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
   2ae8a:	4a79      	ldr	r2, [pc, #484]	; (2b070 <nvs_init+0x2b8>)
	fs->ate_wra = addr;
   2ae8c:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   2ae8e:	4013      	ands	r3, r2
   2ae90:	60a3      	str	r3, [r4, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
   2ae92:	4691      	mov	r9, r2
	while (fs->ate_wra >= fs->data_wra) {
   2ae94:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   2ae98:	4299      	cmp	r1, r3
   2ae9a:	d30e      	bcc.n	2aeba <nvs_init+0x102>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2ae9c:	2308      	movs	r3, #8
   2ae9e:	aa01      	add	r2, sp, #4
   2aea0:	4620      	mov	r0, r4
   2aea2:	f01f fc1d 	bl	4a6e0 <nvs_flash_rd>
		if (rc) {
   2aea6:	b9c0      	cbnz	r0, 2aeda <nvs_init+0x122>
   2aea8:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   2aeaa:	f813 2b01 	ldrb.w	r2, [r3], #1
   2aeae:	4590      	cmp	r8, r2
   2aeb0:	f040 80c2 	bne.w	2b038 <nvs_init+0x280>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2aeb4:	3001      	adds	r0, #1
   2aeb6:	2808      	cmp	r0, #8
   2aeb8:	d1f7      	bne.n	2aeaa <nvs_init+0xf2>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2aeba:	6863      	ldr	r3, [r4, #4]
	nvs_sector_advance(fs, &addr);
   2aebc:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2aebe:	0c1b      	lsrs	r3, r3, #16
   2aec0:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   2aec2:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
   2aec4:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   2aec6:	f01f fcad 	bl	4a824 <nvs_sector_advance.isra.1>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   2aeca:	89a3      	ldrh	r3, [r4, #12]
   2aecc:	9900      	ldr	r1, [sp, #0]
   2aece:	4642      	mov	r2, r8
   2aed0:	4620      	mov	r0, r4
   2aed2:	f01f fc3c 	bl	4a74e <nvs_flash_cmp_const>
	if (rc < 0) {
   2aed6:	2800      	cmp	r0, #0
   2aed8:	da26      	bge.n	2af28 <nvs_init+0x170>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2aeda:	4605      	mov	r5, r0
   2aedc:	e093      	b.n	2b006 <nvs_init+0x24e>
		       (uint16_t)(fs->sector_size - ate_size);
   2aede:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   2aee0:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   2aee2:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   2aee4:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2aee8:	4642      	mov	r2, r8
   2aeea:	2308      	movs	r3, #8
   2aeec:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   2aeee:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2aef0:	f01f fc2d 	bl	4a74e <nvs_flash_cmp_const>
		if (rc) {
   2aef4:	b178      	cbz	r0, 2af16 <nvs_init+0x15e>
			nvs_sector_advance(fs, &addr);
   2aef6:	4669      	mov	r1, sp
   2aef8:	89e0      	ldrh	r0, [r4, #14]
   2aefa:	f01f fc93 	bl	4a824 <nvs_sector_advance.isra.1>
			closed_sectors++;
   2aefe:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2af02:	2308      	movs	r3, #8
   2af04:	4642      	mov	r2, r8
   2af06:	9900      	ldr	r1, [sp, #0]
   2af08:	4620      	mov	r0, r4
			closed_sectors++;
   2af0a:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   2af0e:	f01f fc1e 	bl	4a74e <nvs_flash_cmp_const>
			if (!rc) {
   2af12:	2800      	cmp	r0, #0
   2af14:	d09e      	beq.n	2ae54 <nvs_init+0x9c>
   2af16:	3501      	adds	r5, #1
   2af18:	e797      	b.n	2ae4a <nvs_init+0x92>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2af1a:	f1bb 0f00 	cmp.w	fp, #0
   2af1e:	f000 80a3 	beq.w	2b068 <nvs_init+0x2b0>
				rc = -ESPIPE;
   2af22:	f06f 051c 	mvn.w	r5, #28
   2af26:	e06e      	b.n	2b006 <nvs_init+0x24e>
	if (rc) {
   2af28:	d046      	beq.n	2afb8 <nvs_init+0x200>
		addr = fs->ate_wra + ate_size;
   2af2a:	6863      	ldr	r3, [r4, #4]
   2af2c:	4433      	add	r3, r6
   2af2e:	9300      	str	r3, [sp, #0]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   2af30:	f64f 78ff 	movw	r8, #65535	; 0xffff
   2af34:	9900      	ldr	r1, [sp, #0]
   2af36:	89a3      	ldrh	r3, [r4, #12]
   2af38:	b28a      	uxth	r2, r1
   2af3a:	1b9b      	subs	r3, r3, r6
   2af3c:	429a      	cmp	r2, r3
   2af3e:	d316      	bcc.n	2af6e <nvs_init+0x1b6>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   2af40:	6861      	ldr	r1, [r4, #4]
   2af42:	4620      	mov	r0, r4
   2af44:	f01f fc27 	bl	4a796 <nvs_flash_erase_sector>
		if (rc) {
   2af48:	2800      	cmp	r0, #0
   2af4a:	d1c6      	bne.n	2aeda <nvs_init+0x122>
		fs->ate_wra &= ADDR_SECT_MASK;
   2af4c:	6862      	ldr	r2, [r4, #4]
   2af4e:	4948      	ldr	r1, [pc, #288]	; (2b070 <nvs_init+0x2b8>)
   2af50:	ea02 0301 	and.w	r3, r2, r1
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   2af54:	89a2      	ldrh	r2, [r4, #12]
   2af56:	4413      	add	r3, r2
   2af58:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   2af5c:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   2af5e:	400b      	ands	r3, r1
   2af60:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   2af62:	4620      	mov	r0, r4
   2af64:	f01f fd30 	bl	4a9c8 <nvs_gc>
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2af68:	2800      	cmp	r0, #0
   2af6a:	d040      	beq.n	2afee <nvs_init+0x236>
   2af6c:	e7b5      	b.n	2aeda <nvs_init+0x122>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2af6e:	2308      	movs	r3, #8
   2af70:	aa03      	add	r2, sp, #12
   2af72:	4620      	mov	r0, r4
   2af74:	f01f fbb4 	bl	4a6e0 <nvs_flash_rd>
			if (rc) {
   2af78:	2800      	cmp	r0, #0
   2af7a:	d1ae      	bne.n	2aeda <nvs_init+0x122>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   2af7c:	a903      	add	r1, sp, #12
   2af7e:	4620      	mov	r0, r4
   2af80:	f01f fc36 	bl	4a7f0 <nvs_ate_valid>
   2af84:	b138      	cbz	r0, 2af96 <nvs_init+0x1de>
   2af86:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2af8a:	4543      	cmp	r3, r8
   2af8c:	d103      	bne.n	2af96 <nvs_init+0x1de>
			    (gc_done_ate.id == 0xffff) &&
   2af8e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2af92:	2b00      	cmp	r3, #0
   2af94:	d043      	beq.n	2b01e <nvs_init+0x266>
			addr += ate_size;
   2af96:	9b00      	ldr	r3, [sp, #0]
   2af98:	4433      	add	r3, r6
   2af9a:	9300      	str	r3, [sp, #0]
   2af9c:	e7ca      	b.n	2af34 <nvs_init+0x17c>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   2af9e:	1a5b      	subs	r3, r3, r1
   2afa0:	4642      	mov	r2, r8
   2afa2:	4620      	mov	r0, r4
   2afa4:	f01f fbd3 	bl	4a74e <nvs_flash_cmp_const>
		if (rc < 0) {
   2afa8:	2800      	cmp	r0, #0
   2afaa:	db96      	blt.n	2aeda <nvs_init+0x122>
		if (!rc) {
   2afac:	d008      	beq.n	2afc0 <nvs_init+0x208>
		fs->data_wra += fs->flash_parameters->write_block_size;
   2afae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2afb0:	68a3      	ldr	r3, [r4, #8]
   2afb2:	6812      	ldr	r2, [r2, #0]
   2afb4:	4413      	add	r3, r2
   2afb6:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   2afb8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   2afbc:	428b      	cmp	r3, r1
   2afbe:	d8ee      	bhi.n	2af9e <nvs_init+0x1e6>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2afc0:	6861      	ldr	r1, [r4, #4]
   2afc2:	89a3      	ldrh	r3, [r4, #12]
   2afc4:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   2afc8:	429a      	cmp	r2, r3
   2afca:	d1cd      	bne.n	2af68 <nvs_init+0x1b0>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   2afcc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2b070 <nvs_init+0x2b8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2afd0:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   2afd2:	ea01 0208 	and.w	r2, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   2afd6:	4293      	cmp	r3, r2
   2afd8:	d0c6      	beq.n	2af68 <nvs_init+0x1b0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   2afda:	4620      	mov	r0, r4
   2afdc:	f01f fbdb 	bl	4a796 <nvs_flash_erase_sector>
		if (rc) {
   2afe0:	2800      	cmp	r0, #0
   2afe2:	f47f af7a 	bne.w	2aeda <nvs_init+0x122>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   2afe6:	6863      	ldr	r3, [r4, #4]
   2afe8:	ea03 0308 	and.w	r3, r3, r8
   2afec:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   2afee:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2aff0:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   2aff2:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   2aff6:	42b2      	cmp	r2, r6
   2aff8:	d105      	bne.n	2b006 <nvs_init+0x24e>
		rc = nvs_add_gc_done_ate(fs);
   2affa:	4620      	mov	r0, r4
   2affc:	f01f fc83 	bl	4a906 <nvs_add_gc_done_ate>
   2b000:	e76b      	b.n	2aeda <nvs_init+0x122>
		rc = -EDEADLK;
   2b002:	f06f 052c 	mvn.w	r5, #44	; 0x2c
	return z_impl_k_mutex_unlock(mutex);
   2b006:	4638      	mov	r0, r7
   2b008:	f01d fbde 	bl	487c8 <z_impl_k_mutex_unlock>
	if (rc) {
   2b00c:	2d00      	cmp	r5, #0
   2b00e:	f47f aeeb 	bne.w	2ade8 <nvs_init+0x30>
	fs->ready = true;
   2b012:	2301      	movs	r3, #1
   2b014:	7423      	strb	r3, [r4, #16]
	return 0;
   2b016:	e6e7      	b.n	2ade8 <nvs_init+0x30>
		return -ENXIO;
   2b018:	f06f 0505 	mvn.w	r5, #5
   2b01c:	e6e4      	b.n	2ade8 <nvs_init+0x30>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2b01e:	6863      	ldr	r3, [r4, #4]
			nvs_sector_advance(fs, &addr);
   2b020:	89e0      	ldrh	r0, [r4, #14]
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2b022:	0c1b      	lsrs	r3, r3, #16
   2b024:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   2b026:	4669      	mov	r1, sp
			addr = fs->ate_wra & ADDR_SECT_MASK;
   2b028:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   2b02a:	f01f fbfb 	bl	4a824 <nvs_sector_advance.isra.1>
			rc = nvs_flash_erase_sector(fs, addr);
   2b02e:	9900      	ldr	r1, [sp, #0]
   2b030:	4620      	mov	r0, r4
   2b032:	f01f fbb0 	bl	4a796 <nvs_flash_erase_sector>
			goto end;
   2b036:	e797      	b.n	2af68 <nvs_init+0x1b0>
		if (nvs_ate_valid(fs, &last_ate)) {
   2b038:	a901      	add	r1, sp, #4
   2b03a:	4620      	mov	r0, r4
   2b03c:	f01f fbd8 	bl	4a7f0 <nvs_ate_valid>
   2b040:	f8d4 a004 	ldr.w	sl, [r4, #4]
   2b044:	b180      	cbz	r0, 2b068 <nvs_init+0x2b0>
			fs->data_wra = addr & ADDR_SECT_MASK;
   2b046:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   2b048:	f8bd b008 	ldrh.w	fp, [sp, #8]
   2b04c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2b050:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   2b052:	ea02 0209 	and.w	r2, r2, r9
   2b056:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   2b058:	4459      	add	r1, fp
   2b05a:	f01f fbbf 	bl	4a7dc <nvs_al_size.isra.0>
   2b05e:	4410      	add	r0, r2
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2b060:	4550      	cmp	r0, sl
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   2b062:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   2b064:	f43f af59 	beq.w	2af1a <nvs_init+0x162>
		fs->ate_wra -= ate_size;
   2b068:	ebaa 0306 	sub.w	r3, sl, r6
   2b06c:	6063      	str	r3, [r4, #4]
   2b06e:	e711      	b.n	2ae94 <nvs_init+0xdc>
   2b070:	ffff0000 	.word	0xffff0000

0002b074 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   2b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b078:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   2b07a:	7c03      	ldrb	r3, [r0, #16]
{
   2b07c:	b089      	sub	sp, #36	; 0x24
   2b07e:	4604      	mov	r4, r0
   2b080:	4689      	mov	r9, r1
   2b082:	4690      	mov	r8, r2
	if (!fs->ready) {
   2b084:	2b00      	cmp	r3, #0
   2b086:	f000 80c0 	beq.w	2b20a <nvs_write+0x196>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b08a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   2b08c:	2108      	movs	r1, #8
   2b08e:	4610      	mov	r0, r2
   2b090:	f01f fba4 	bl	4a7dc <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   2b094:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b096:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   2b098:	4610      	mov	r0, r2
   2b09a:	f01f fb9f 	bl	4a7dc <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   2b09e:	89a3      	ldrh	r3, [r4, #12]
   2b0a0:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   2b0a4:	429e      	cmp	r6, r3
	data_size = nvs_al_size(fs, len);
   2b0a6:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   2b0a8:	f200 80b2 	bhi.w	2b210 <nvs_write+0x19c>
   2b0ac:	b11e      	cbz	r6, 2b0b6 <nvs_write+0x42>
	    ((len > 0) && (data == NULL))) {
   2b0ae:	f1b8 0f00 	cmp.w	r8, #0
   2b0b2:	f000 80ad 	beq.w	2b210 <nvs_write+0x19c>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   2b0b6:	6863      	ldr	r3, [r4, #4]
   2b0b8:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2b0ba:	aa04      	add	r2, sp, #16
   2b0bc:	a903      	add	r1, sp, #12
   2b0be:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   2b0c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2b0c4:	f01f fc34 	bl	4a930 <nvs_prev_ate>
		if (rc) {
   2b0c8:	4605      	mov	r5, r0
   2b0ca:	2800      	cmp	r0, #0
   2b0cc:	d166      	bne.n	2b19c <nvs_write+0x128>
			return rc;
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   2b0ce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2b0d2:	454b      	cmp	r3, r9
   2b0d4:	d005      	beq.n	2b0e2 <nvs_write+0x6e>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   2b0d6:	6862      	ldr	r2, [r4, #4]
   2b0d8:	9b03      	ldr	r3, [sp, #12]
   2b0da:	429a      	cmp	r2, r3
   2b0dc:	d1ed      	bne.n	2b0ba <nvs_write+0x46>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   2b0de:	b9e6      	cbnz	r6, 2b11a <nvs_write+0xa6>
   2b0e0:	e05c      	b.n	2b19c <nvs_write+0x128>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   2b0e2:	a904      	add	r1, sp, #16
   2b0e4:	4620      	mov	r0, r4
   2b0e6:	f01f fb83 	bl	4a7f0 <nvs_ate_valid>
   2b0ea:	2800      	cmp	r0, #0
   2b0ec:	d0f3      	beq.n	2b0d6 <nvs_write+0x62>
		if (len == 0) {
   2b0ee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2b0f2:	b186      	cbz	r6, 2b116 <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
   2b0f4:	429e      	cmp	r6, r3
   2b0f6:	d110      	bne.n	2b11a <nvs_write+0xa6>
		rd_addr += wlk_ate.offset;
   2b0f8:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
   2b0fc:	ea4f 411b 	mov.w	r1, fp, lsr #16
   2b100:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   2b102:	4401      	add	r1, r0
   2b104:	4633      	mov	r3, r6
   2b106:	4642      	mov	r2, r8
   2b108:	4620      	mov	r0, r4
   2b10a:	f01f faf7 	bl	4a6fc <nvs_flash_block_cmp>
			if (rc <= 0) {
   2b10e:	2800      	cmp	r0, #0
   2b110:	dc03      	bgt.n	2b11a <nvs_write+0xa6>
   2b112:	4605      	mov	r5, r0
   2b114:	e042      	b.n	2b19c <nvs_write+0x128>
			if (wlk_ate.len == 0U) {
   2b116:	2b00      	cmp	r3, #0
   2b118:	d040      	beq.n	2b19c <nvs_write+0x128>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   2b11a:	2f00      	cmp	r7, #0
   2b11c:	d142      	bne.n	2b1a4 <nvs_write+0x130>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   2b11e:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   2b122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b12a:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
   2b12c:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 2b21c <nvs_write+0x1a8>
   2b130:	f01d facc 	bl	486cc <z_impl_k_mutex_lock>

	gc_count = 0;
   2b134:	2300      	movs	r3, #0
	while (1) {
		if (gc_count == fs->sector_count) {
   2b136:	89e2      	ldrh	r2, [r4, #14]
   2b138:	4293      	cmp	r3, r2
   2b13a:	d063      	beq.n	2b204 <nvs_write+0x190>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   2b13c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
   2b140:	1878      	adds	r0, r7, r1
   2b142:	4282      	cmp	r2, r0
   2b144:	d331      	bcc.n	2b1aa <nvs_write+0x136>
	entry.part = 0xff;
   2b146:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
   2b148:	a806      	add	r0, sp, #24
	entry.id = id;
   2b14a:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2b14e:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
   2b152:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
   2b156:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
   2b15a:	f01f fb36 	bl	4a7ca <nvs_ate_crc8_update>
	if (!len) {
   2b15e:	b136      	cbz	r6, 2b16e <nvs_write+0xfa>
   2b160:	4633      	mov	r3, r6
   2b162:	4642      	mov	r2, r8
   2b164:	68a1      	ldr	r1, [r4, #8]
   2b166:	4620      	mov	r0, r4
   2b168:	f01f fb84 	bl	4a874 <nvs_flash_al_wrt.part.4>
   2b16c:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
   2b16e:	4631      	mov	r1, r6
   2b170:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b172:	f01f fb33 	bl	4a7dc <nvs_al_size.isra.0>
   2b176:	68a3      	ldr	r3, [r4, #8]
   2b178:	4418      	add	r0, r3
   2b17a:	60a0      	str	r0, [r4, #8]
	if (rc) {
   2b17c:	2d00      	cmp	r5, #0
   2b17e:	d14a      	bne.n	2b216 <nvs_write+0x1a2>
	rc = nvs_flash_ate_wrt(fs, &entry);
   2b180:	a906      	add	r1, sp, #24
   2b182:	4620      	mov	r0, r4
   2b184:	f01f fbae 	bl	4a8e4 <nvs_flash_ate_wrt>
	if (rc) {
   2b188:	4605      	mov	r5, r0
   2b18a:	2800      	cmp	r0, #0
   2b18c:	d143      	bne.n	2b216 <nvs_write+0x1a2>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   2b18e:	4632      	mov	r2, r6
   2b190:	9201      	str	r2, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   2b192:	4650      	mov	r0, sl
   2b194:	f01d fb18 	bl	487c8 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
   2b198:	9a01      	ldr	r2, [sp, #4]
   2b19a:	4615      	mov	r5, r2
}
   2b19c:	4628      	mov	r0, r5
   2b19e:	b009      	add	sp, #36	; 0x24
   2b1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
   2b1a4:	4457      	add	r7, sl
   2b1a6:	b2bf      	uxth	r7, r7
   2b1a8:	e7b9      	b.n	2b11e <nvs_write+0xaa>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2b1aa:	2108      	movs	r1, #8
   2b1ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2b1ae:	9301      	str	r3, [sp, #4]
   2b1b0:	f01f fb14 	bl	4a7dc <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   2b1b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2b1b8:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
   2b1bc:	2100      	movs	r1, #0
   2b1be:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   2b1c2:	1811      	adds	r1, r2, r0
   2b1c4:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   2b1c8:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   2b1ca:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   2b1ce:	440a      	add	r2, r1
   2b1d0:	1a12      	subs	r2, r2, r0
   2b1d2:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   2b1d4:	a806      	add	r0, sp, #24
   2b1d6:	f01f faf8 	bl	4a7ca <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   2b1da:	a906      	add	r1, sp, #24
   2b1dc:	4620      	mov	r0, r4
   2b1de:	f01f fb81 	bl	4a8e4 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   2b1e2:	1d21      	adds	r1, r4, #4
   2b1e4:	89e0      	ldrh	r0, [r4, #14]
   2b1e6:	f01f fb1d 	bl	4a824 <nvs_sector_advance.isra.1>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   2b1ea:	6862      	ldr	r2, [r4, #4]
   2b1ec:	ea02 020b 	and.w	r2, r2, fp
   2b1f0:	60a2      	str	r2, [r4, #8]
		rc = nvs_gc(fs);
   2b1f2:	4620      	mov	r0, r4
   2b1f4:	f01f fbe8 	bl	4a9c8 <nvs_gc>
		if (rc) {
   2b1f8:	4602      	mov	r2, r0
   2b1fa:	2800      	cmp	r0, #0
   2b1fc:	d1c8      	bne.n	2b190 <nvs_write+0x11c>
		gc_count++;
   2b1fe:	9b01      	ldr	r3, [sp, #4]
   2b200:	3301      	adds	r3, #1
		if (gc_count == fs->sector_count) {
   2b202:	e798      	b.n	2b136 <nvs_write+0xc2>
			rc = -ENOSPC;
   2b204:	f06f 021b 	mvn.w	r2, #27
   2b208:	e7c2      	b.n	2b190 <nvs_write+0x11c>
		return -EACCES;
   2b20a:	f06f 050c 	mvn.w	r5, #12
   2b20e:	e7c5      	b.n	2b19c <nvs_write+0x128>
		return -EINVAL;
   2b210:	f06f 0515 	mvn.w	r5, #21
   2b214:	e7c2      	b.n	2b19c <nvs_write+0x128>
			if (rc) {
   2b216:	462a      	mov	r2, r5
   2b218:	e7ba      	b.n	2b190 <nvs_write+0x11c>
   2b21a:	bf00      	nop
   2b21c:	ffff0000 	.word	0xffff0000

0002b220 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b220:	4b0c      	ldr	r3, [pc, #48]	; (2b254 <class_handler+0x34>)
{
   2b222:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b224:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b226:	4e0c      	ldr	r6, [pc, #48]	; (2b258 <class_handler+0x38>)
   2b228:	4b0c      	ldr	r3, [pc, #48]	; (2b25c <class_handler+0x3c>)
   2b22a:	42b3      	cmp	r3, r6
   2b22c:	d303      	bcc.n	2b236 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
   2b22e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b232:	bcf0      	pop	{r4, r5, r6, r7}
   2b234:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
   2b236:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b238:	42bd      	cmp	r5, r7
   2b23a:	d309      	bcc.n	2b250 <class_handler+0x30>
		if (iface->class_handler &&
   2b23c:	691c      	ldr	r4, [r3, #16]
   2b23e:	b13c      	cbz	r4, 2b250 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   2b240:	f895 c002 	ldrb.w	ip, [r5, #2]
   2b244:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   2b246:	45ac      	cmp	ip, r5
   2b248:	d102      	bne.n	2b250 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
   2b24a:	4623      	mov	r3, r4
}
   2b24c:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
   2b24e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b250:	3324      	adds	r3, #36	; 0x24
   2b252:	e7ea      	b.n	2b22a <class_handler+0xa>
   2b254:	20003d44 	.word	0x20003d44
   2b258:	2000125c 	.word	0x2000125c
   2b25c:	20001238 	.word	0x20001238

0002b260 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   2b260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b264:	4c13      	ldr	r4, [pc, #76]	; (2b2b4 <custom_handler+0x54>)
   2b266:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2b2b8 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b26a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2b2bc <custom_handler+0x5c>
{
   2b26e:	4605      	mov	r5, r0
   2b270:	460e      	mov	r6, r1
   2b272:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b274:	4544      	cmp	r4, r8
   2b276:	d303      	bcc.n	2b280 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
   2b278:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
   2b280:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   2b282:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   2b286:	429a      	cmp	r2, r3
   2b288:	d312      	bcc.n	2b2b0 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
   2b28a:	69a3      	ldr	r3, [r4, #24]
   2b28c:	b183      	cbz	r3, 2b2b0 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   2b28e:	7890      	ldrb	r0, [r2, #2]
   2b290:	7929      	ldrb	r1, [r5, #4]
   2b292:	4288      	cmp	r0, r1
   2b294:	d105      	bne.n	2b2a2 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
   2b296:	463a      	mov	r2, r7
   2b298:	4631      	mov	r1, r6
   2b29a:	4628      	mov	r0, r5
}
   2b29c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
   2b2a0:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   2b2a2:	7952      	ldrb	r2, [r2, #5]
   2b2a4:	2a01      	cmp	r2, #1
   2b2a6:	d103      	bne.n	2b2b0 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
   2b2a8:	463a      	mov	r2, r7
   2b2aa:	4631      	mov	r1, r6
   2b2ac:	4628      	mov	r0, r5
   2b2ae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b2b0:	3424      	adds	r4, #36	; 0x24
   2b2b2:	e7df      	b.n	2b274 <custom_handler+0x14>
   2b2b4:	20001238 	.word	0x20001238
   2b2b8:	2000125c 	.word	0x2000125c
   2b2bc:	20003d44 	.word	0x20003d44

0002b2c0 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   2b2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b2c4:	4c0a      	ldr	r4, [pc, #40]	; (2b2f0 <vendor_handler+0x30>)
   2b2c6:	4d0b      	ldr	r5, [pc, #44]	; (2b2f4 <vendor_handler+0x34>)
{
   2b2c8:	4606      	mov	r6, r0
   2b2ca:	460f      	mov	r7, r1
   2b2cc:	4690      	mov	r8, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b2ce:	42ac      	cmp	r4, r5
   2b2d0:	d302      	bcc.n	2b2d8 <vendor_handler+0x18>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   2b2d2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2b2d6:	e009      	b.n	2b2ec <vendor_handler+0x2c>
		if (iface->vendor_handler) {
   2b2d8:	6963      	ldr	r3, [r4, #20]
   2b2da:	b90b      	cbnz	r3, 2b2e0 <vendor_handler+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b2dc:	3424      	adds	r4, #36	; 0x24
   2b2de:	e7f6      	b.n	2b2ce <vendor_handler+0xe>
			if (!iface->vendor_handler(pSetup, len, data)) {
   2b2e0:	4642      	mov	r2, r8
   2b2e2:	4639      	mov	r1, r7
   2b2e4:	4630      	mov	r0, r6
   2b2e6:	4798      	blx	r3
   2b2e8:	2800      	cmp	r0, #0
   2b2ea:	d1f7      	bne.n	2b2dc <vendor_handler+0x1c>
}
   2b2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b2f0:	20001238 	.word	0x20001238
   2b2f4:	2000125c 	.word	0x2000125c

0002b2f8 <set_endpoint>:
{
   2b2f8:	b507      	push	{r0, r1, r2, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   2b2fa:	7883      	ldrb	r3, [r0, #2]
   2b2fc:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   2b300:	7903      	ldrb	r3, [r0, #4]
   2b302:	7942      	ldrb	r2, [r0, #5]
   2b304:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b308:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   2b30c:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
   2b30e:	4668      	mov	r0, sp
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   2b310:	f003 0303 	and.w	r3, r3, #3
   2b314:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
   2b318:	f019 fb7a 	bl	44a10 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   2b31c:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2b320:	d004      	beq.n	2b32c <set_endpoint+0x34>
	} else if (ret) {
   2b322:	b118      	cbz	r0, 2b32c <set_endpoint+0x34>
		return false;
   2b324:	2000      	movs	r0, #0
}
   2b326:	b003      	add	sp, #12
   2b328:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   2b32c:	f89d 0000 	ldrb.w	r0, [sp]
   2b330:	f019 fbf4 	bl	44b1c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   2b334:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2b338:	d001      	beq.n	2b33e <set_endpoint+0x46>
	} else if (ret) {
   2b33a:	2800      	cmp	r0, #0
   2b33c:	d1f2      	bne.n	2b324 <set_endpoint+0x2c>
	usb_dev.configured = true;
   2b33e:	4b02      	ldr	r3, [pc, #8]	; (2b348 <set_endpoint+0x50>)
   2b340:	2001      	movs	r0, #1
   2b342:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
   2b346:	e7ee      	b.n	2b326 <set_endpoint+0x2e>
   2b348:	20003d44 	.word	0x20003d44

0002b34c <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   2b34c:	2208      	movs	r2, #8
   2b34e:	2100      	movs	r1, #0
   2b350:	4801      	ldr	r0, [pc, #4]	; (2b358 <usb_reset_alt_setting+0xc>)
   2b352:	f020 bfd6 	b.w	4c302 <memset>
   2b356:	bf00      	nop
   2b358:	20003dff 	.word	0x20003dff

0002b35c <is_ep_valid.part.6>:
static bool is_ep_valid(uint8_t ep)
   2b35c:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b35e:	4b0b      	ldr	r3, [pc, #44]	; (2b38c <is_ep_valid.part.6+0x30>)
   2b360:	4c0b      	ldr	r4, [pc, #44]	; (2b390 <is_ep_valid.part.6+0x34>)
   2b362:	42a3      	cmp	r3, r4
   2b364:	d301      	bcc.n	2b36a <is_ep_valid.part.6+0xe>
	return false;
   2b366:	2000      	movs	r0, #0
}
   2b368:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
   2b36a:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b36c:	7f1e      	ldrb	r6, [r3, #28]
   2b36e:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
   2b370:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b372:	b2d5      	uxtb	r5, r2
   2b374:	42ae      	cmp	r6, r5
   2b376:	d801      	bhi.n	2b37c <is_ep_valid.part.6+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b378:	3324      	adds	r3, #36	; 0x24
   2b37a:	e7f2      	b.n	2b362 <is_ep_valid.part.6+0x6>
			if (ep_data[n].ep_addr == ep) {
   2b37c:	3201      	adds	r2, #1
   2b37e:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
   2b382:	4285      	cmp	r5, r0
   2b384:	d1f5      	bne.n	2b372 <is_ep_valid.part.6+0x16>
				return true;
   2b386:	2001      	movs	r0, #1
   2b388:	e7ee      	b.n	2b368 <is_ep_valid.part.6+0xc>
   2b38a:	bf00      	nop
   2b38c:	20001238 	.word	0x20001238
   2b390:	2000125c 	.word	0x2000125c

0002b394 <usb_halt_endpoint_req.isra.8>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   2b394:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
   2b396:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
   2b398:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
   2b39a:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
   2b39c:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
   2b3a0:	d007      	beq.n	2b3b2 <usb_halt_endpoint_req.isra.8+0x1e>
   2b3a2:	4620      	mov	r0, r4
   2b3a4:	f7ff ffda 	bl	2b35c <is_ep_valid.part.6>
	if (!is_ep_valid(ep)) {
   2b3a8:	b188      	cbz	r0, 2b3ce <usb_halt_endpoint_req.isra.8+0x3a>
	return (usb_dev.configuration != 0);
   2b3aa:	4b0f      	ldr	r3, [pc, #60]	; (2b3e8 <usb_halt_endpoint_req.isra.8+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   2b3ac:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
   2b3b0:	b168      	cbz	r0, 2b3ce <usb_halt_endpoint_req.isra.8+0x3a>
		if (halt) {
   2b3b2:	4d0d      	ldr	r5, [pc, #52]	; (2b3e8 <usb_halt_endpoint_req.isra.8+0x54>)
			usb_dc_ep_set_stall(ep);
   2b3b4:	4620      	mov	r0, r4
		if (halt) {
   2b3b6:	b166      	cbz	r6, 2b3d2 <usb_halt_endpoint_req.isra.8+0x3e>
			usb_dc_ep_set_stall(ep);
   2b3b8:	f019 fb4c 	bl	44a54 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   2b3bc:	69eb      	ldr	r3, [r5, #28]
   2b3be:	b90b      	cbnz	r3, 2b3c4 <usb_halt_endpoint_req.isra.8+0x30>
		return true;
   2b3c0:	2001      	movs	r0, #1
   2b3c2:	e004      	b.n	2b3ce <usb_halt_endpoint_req.isra.8+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   2b3c4:	2008      	movs	r0, #8
   2b3c6:	f10d 0107 	add.w	r1, sp, #7
   2b3ca:	4798      	blx	r3
		return true;
   2b3cc:	4630      	mov	r0, r6
}
   2b3ce:	b002      	add	sp, #8
   2b3d0:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
   2b3d2:	f019 fb67 	bl	44aa4 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   2b3d6:	69eb      	ldr	r3, [r5, #28]
   2b3d8:	2b00      	cmp	r3, #0
   2b3da:	d0f1      	beq.n	2b3c0 <usb_halt_endpoint_req.isra.8+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   2b3dc:	f10d 0107 	add.w	r1, sp, #7
   2b3e0:	2009      	movs	r0, #9
   2b3e2:	4798      	blx	r3
   2b3e4:	e7ec      	b.n	2b3c0 <usb_halt_endpoint_req.isra.8+0x2c>
   2b3e6:	bf00      	nop
   2b3e8:	20003d44 	.word	0x20003d44

0002b3ec <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
   2b3ec:	2804      	cmp	r0, #4
{
   2b3ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b3f2:	4604      	mov	r4, r0
   2b3f4:	460f      	mov	r7, r1
   2b3f6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 2b484 <forward_status_cb+0x98>
	if (status == USB_DC_DISCONNECTED) {
   2b3fa:	d10e      	bne.n	2b41a <forward_status_cb+0x2e>
		usb_reset_alt_setting();
   2b3fc:	f7ff ffa6 	bl	2b34c <usb_reset_alt_setting>
		if (usb_dev.configured) {
   2b400:	4b1e      	ldr	r3, [pc, #120]	; (2b47c <forward_status_cb+0x90>)
   2b402:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
   2b406:	4699      	mov	r9, r3
   2b408:	b15a      	cbz	r2, 2b422 <forward_status_cb+0x36>
			usb_cancel_transfers();
   2b40a:	f000 fd07 	bl	2be1c <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
   2b40e:	2c04      	cmp	r4, #4
   2b410:	d001      	beq.n	2b416 <forward_status_cb+0x2a>
   2b412:	2c01      	cmp	r4, #1
   2b414:	d105      	bne.n	2b422 <forward_status_cb+0x36>
   2b416:	4d1a      	ldr	r5, [pc, #104]	; (2b480 <forward_status_cb+0x94>)
   2b418:	e016      	b.n	2b448 <forward_status_cb+0x5c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND || status == USB_DC_RESET) {
   2b41a:	2805      	cmp	r0, #5
   2b41c:	d0f0      	beq.n	2b400 <forward_status_cb+0x14>
   2b41e:	2801      	cmp	r0, #1
   2b420:	d0ee      	beq.n	2b400 <forward_status_cb+0x14>
   2b422:	4d17      	ldr	r5, [pc, #92]	; (2b480 <forward_status_cb+0x94>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b424:	4545      	cmp	r5, r8
   2b426:	d31e      	bcc.n	2b466 <forward_status_cb+0x7a>
	if (usb_dev.user_status_callback) {
   2b428:	4b14      	ldr	r3, [pc, #80]	; (2b47c <forward_status_cb+0x90>)
   2b42a:	6a1b      	ldr	r3, [r3, #32]
   2b42c:	b31b      	cbz	r3, 2b476 <forward_status_cb+0x8a>
		usb_dev.user_status_callback(status, param);
   2b42e:	4639      	mov	r1, r7
   2b430:	4620      	mov	r0, r4
}
   2b432:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		usb_dev.user_status_callback(status, param);
   2b436:	4718      	bx	r3
		ep_data = cfg_data->endpoint;
   2b438:	f8d5 a020 	ldr.w	sl, [r5, #32]
   2b43c:	2600      	movs	r6, #0
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2b43e:	7f2a      	ldrb	r2, [r5, #28]
   2b440:	b2f3      	uxtb	r3, r6
   2b442:	429a      	cmp	r2, r3
   2b444:	d803      	bhi.n	2b44e <forward_status_cb+0x62>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b446:	3524      	adds	r5, #36	; 0x24
   2b448:	4545      	cmp	r5, r8
   2b44a:	d3f5      	bcc.n	2b438 <forward_status_cb+0x4c>
   2b44c:	e007      	b.n	2b45e <forward_status_cb+0x72>
	return usb_dc_ep_disable(ep_data->ep_addr);
   2b44e:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
   2b452:	3601      	adds	r6, #1
   2b454:	7918      	ldrb	r0, [r3, #4]
   2b456:	f019 fb8b 	bl	44b70 <usb_dc_ep_disable>
			if (ret < 0) {
   2b45a:	2800      	cmp	r0, #0
   2b45c:	daef      	bge.n	2b43e <forward_status_cb+0x52>
				usb_dev.configured = false;
   2b45e:	2300      	movs	r3, #0
   2b460:	f889 30b9 	strb.w	r3, [r9, #185]	; 0xb9
   2b464:	e7dd      	b.n	2b422 <forward_status_cb+0x36>
		if (cfg_data->cb_usb_status) {
   2b466:	68eb      	ldr	r3, [r5, #12]
   2b468:	b11b      	cbz	r3, 2b472 <forward_status_cb+0x86>
			cfg_data->cb_usb_status(cfg_data, status, param);
   2b46a:	463a      	mov	r2, r7
   2b46c:	4621      	mov	r1, r4
   2b46e:	4628      	mov	r0, r5
   2b470:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b472:	3524      	adds	r5, #36	; 0x24
   2b474:	e7d6      	b.n	2b424 <forward_status_cb+0x38>
}
   2b476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b47a:	bf00      	nop
   2b47c:	20003d44 	.word	0x20003d44
   2b480:	20001238 	.word	0x20001238
   2b484:	2000125c 	.word	0x2000125c

0002b488 <usb_handle_standard_request>:
{
   2b488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
   2b48c:	4ead      	ldr	r6, [pc, #692]	; (2b744 <usb_handle_standard_request+0x2bc>)
   2b48e:	69b3      	ldr	r3, [r6, #24]
{
   2b490:	4605      	mov	r5, r0
   2b492:	460c      	mov	r4, r1
   2b494:	4617      	mov	r7, r2
	if (usb_dev.custom_req_handler &&
   2b496:	b97b      	cbnz	r3, 2b4b8 <usb_handle_standard_request+0x30>
	switch (setup->RequestType.recipient) {
   2b498:	7829      	ldrb	r1, [r5, #0]
   2b49a:	f3c1 0004 	ubfx	r0, r1, #0, #5
   2b49e:	b2c3      	uxtb	r3, r0
   2b4a0:	2b01      	cmp	r3, #1
   2b4a2:	f000 80a5 	beq.w	2b5f0 <usb_handle_standard_request+0x168>
   2b4a6:	b240      	sxtb	r0, r0
   2b4a8:	b158      	cbz	r0, 2b4c2 <usb_handle_standard_request+0x3a>
   2b4aa:	2b02      	cmp	r3, #2
   2b4ac:	f000 8110 	beq.w	2b6d0 <usb_handle_standard_request+0x248>
			rc = -EINVAL;
   2b4b0:	f06f 0015 	mvn.w	r0, #21
}
   2b4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   2b4b8:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   2b4ba:	2800      	cmp	r0, #0
   2b4bc:	d1ec      	bne.n	2b498 <usb_handle_standard_request+0x10>
	int rc = 0;
   2b4be:	2000      	movs	r0, #0
   2b4c0:	e7f8      	b.n	2b4b4 <usb_handle_standard_request+0x2c>
	if (usb_reqtype_is_to_host(setup)) {
   2b4c2:	0609      	lsls	r1, r1, #24
	uint8_t *data = *data_buf;
   2b4c4:	683a      	ldr	r2, [r7, #0]
 * @param setup Pointer to USB Setup packet
 * @return true If transfer direction is to host
 */
static inline bool usb_reqtype_is_to_host(struct usb_setup_packet *setup)
{
	return setup->RequestType.direction == USB_REQTYPE_DIR_TO_HOST;
   2b4c6:	786b      	ldrb	r3, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2b4c8:	d52f      	bpl.n	2b52a <usb_handle_standard_request+0xa2>
		switch (setup->bRequest) {
   2b4ca:	2b06      	cmp	r3, #6
   2b4cc:	d010      	beq.n	2b4f0 <usb_handle_standard_request+0x68>
   2b4ce:	2b08      	cmp	r3, #8
   2b4d0:	d025      	beq.n	2b51e <usb_handle_standard_request+0x96>
   2b4d2:	2b00      	cmp	r3, #0
   2b4d4:	d1ec      	bne.n	2b4b0 <usb_handle_standard_request+0x28>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   2b4d6:	2101      	movs	r1, #1
	data[1] = 0U;
   2b4d8:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   2b4da:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
   2b4dc:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
   2b4e0:	2900      	cmp	r1, #0
   2b4e2:	bf18      	it	ne
   2b4e4:	2302      	movne	r3, #2
   2b4e6:	f043 0301 	orr.w	r3, r3, #1
   2b4ea:	7013      	strb	r3, [r2, #0]
		*len = 2;
   2b4ec:	2302      	movs	r3, #2
   2b4ee:	e01a      	b.n	2b526 <usb_handle_standard_request+0x9e>
			return usb_get_descriptor(setup, len, data_buf);
   2b4f0:	8869      	ldrh	r1, [r5, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   2b4f2:	0a0a      	lsrs	r2, r1, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   2b4f4:	1f13      	subs	r3, r2, #4
   2b4f6:	2b01      	cmp	r3, #1
   2b4f8:	d9da      	bls.n	2b4b0 <usb_handle_standard_request+0x28>
   2b4fa:	2a07      	cmp	r2, #7
   2b4fc:	d8d8      	bhi.n	2b4b0 <usb_handle_standard_request+0x28>
	p = (uint8_t *)usb_dev.descriptors;
   2b4fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
			if (cur_index == index) {
   2b500:	b2c9      	uxtb	r1, r1
	while (p[DESC_bLength] != 0U) {
   2b502:	781d      	ldrb	r5, [r3, #0]
   2b504:	2d00      	cmp	r5, #0
   2b506:	d0d3      	beq.n	2b4b0 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == type) {
   2b508:	785e      	ldrb	r6, [r3, #1]
   2b50a:	4296      	cmp	r6, r2
   2b50c:	d103      	bne.n	2b516 <usb_handle_standard_request+0x8e>
			if (cur_index == index) {
   2b50e:	4281      	cmp	r1, r0
   2b510:	f000 8110 	beq.w	2b734 <usb_handle_standard_request+0x2ac>
			cur_index++;
   2b514:	3001      	adds	r0, #1
		p += p[DESC_bLength];
   2b516:	442b      	add	r3, r5
   2b518:	e7f3      	b.n	2b502 <usb_handle_standard_request+0x7a>
			*len = p[DESC_bLength];
   2b51a:	781b      	ldrb	r3, [r3, #0]
   2b51c:	e10f      	b.n	2b73e <usb_handle_standard_request+0x2b6>
			data[0] = usb_dev.configuration;
   2b51e:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2b522:	7013      	strb	r3, [r2, #0]
			*len = 1;
   2b524:	2301      	movs	r3, #1
		*len = 2;
   2b526:	6023      	str	r3, [r4, #0]
		return true;
   2b528:	e7c4      	b.n	2b4b4 <usb_handle_standard_request+0x2c>
		switch (setup->bRequest) {
   2b52a:	3b01      	subs	r3, #1
   2b52c:	2b08      	cmp	r3, #8
   2b52e:	d8bf      	bhi.n	2b4b0 <usb_handle_standard_request+0x28>
   2b530:	a201      	add	r2, pc, #4	; (adr r2, 2b538 <usb_handle_standard_request+0xb0>)
   2b532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2b536:	bf00      	nop
   2b538:	0002b5d3 	.word	0x0002b5d3
   2b53c:	0002b4b1 	.word	0x0002b4b1
   2b540:	0002b5e3 	.word	0x0002b5e3
   2b544:	0002b4b1 	.word	0x0002b4b1
   2b548:	0002b55d 	.word	0x0002b55d
   2b54c:	0002b4b1 	.word	0x0002b4b1
   2b550:	0002b4b1 	.word	0x0002b4b1
   2b554:	0002b4b1 	.word	0x0002b4b1
   2b558:	0002b569 	.word	0x0002b569
			return !usb_dc_set_address(setup->wValue);
   2b55c:	78a8      	ldrb	r0, [r5, #2]
   2b55e:	f019 fa45 	bl	449ec <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   2b562:	2800      	cmp	r0, #0
   2b564:	d0ab      	beq.n	2b4be <usb_handle_standard_request+0x36>
   2b566:	e7a3      	b.n	2b4b0 <usb_handle_standard_request+0x28>
	if (setup->wValue == 0U) {
   2b568:	886c      	ldrh	r4, [r5, #2]
   2b56a:	b154      	cbz	r4, 2b582 <usb_handle_standard_request+0xfa>
	uint8_t cur_config = 0xFF;
   2b56c:	27ff      	movs	r7, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2b56e:	6a74      	ldr	r4, [r6, #36]	; 0x24
	bool found = false;
   2b570:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
   2b572:	46b9      	mov	r9, r7
	while (p[DESC_bLength] != 0U) {
   2b574:	f894 8000 	ldrb.w	r8, [r4]
   2b578:	f1b8 0f00 	cmp.w	r8, #0
   2b57c:	d10d      	bne.n	2b59a <usb_handle_standard_request+0x112>
	if (found) {
   2b57e:	2800      	cmp	r0, #0
   2b580:	d096      	beq.n	2b4b0 <usb_handle_standard_request+0x28>
		usb_reset_alt_setting();
   2b582:	f7ff fee3 	bl	2b34c <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   2b586:	886b      	ldrh	r3, [r5, #2]
   2b588:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
   2b58c:	69f3      	ldr	r3, [r6, #28]
   2b58e:	2b00      	cmp	r3, #0
   2b590:	d095      	beq.n	2b4be <usb_handle_standard_request+0x36>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   2b592:	496d      	ldr	r1, [pc, #436]	; (2b748 <usb_handle_standard_request+0x2c0>)
   2b594:	2003      	movs	r0, #3
   2b596:	4798      	blx	r3
   2b598:	e791      	b.n	2b4be <usb_handle_standard_request+0x36>
		switch (p[DESC_bDescriptorType]) {
   2b59a:	7863      	ldrb	r3, [r4, #1]
   2b59c:	2b04      	cmp	r3, #4
   2b59e:	d00b      	beq.n	2b5b8 <usb_handle_standard_request+0x130>
   2b5a0:	2b05      	cmp	r3, #5
   2b5a2:	d00c      	beq.n	2b5be <usb_handle_standard_request+0x136>
   2b5a4:	2b02      	cmp	r3, #2
   2b5a6:	d104      	bne.n	2b5b2 <usb_handle_standard_request+0x12a>
			cur_config = p[CONF_DESC_bConfigurationValue];
   2b5a8:	7967      	ldrb	r7, [r4, #5]
			if (cur_config == setup->wValue) {
   2b5aa:	886b      	ldrh	r3, [r5, #2]
				found = true;
   2b5ac:	42bb      	cmp	r3, r7
   2b5ae:	bf08      	it	eq
   2b5b0:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
   2b5b2:	7823      	ldrb	r3, [r4, #0]
   2b5b4:	441c      	add	r4, r3
   2b5b6:	e7dd      	b.n	2b574 <usb_handle_standard_request+0xec>
			cur_alt_setting =
   2b5b8:	f894 9003 	ldrb.w	r9, [r4, #3]
			break;
   2b5bc:	e7f9      	b.n	2b5b2 <usb_handle_standard_request+0x12a>
			if ((cur_config != setup->wValue) ||
   2b5be:	886b      	ldrh	r3, [r5, #2]
   2b5c0:	42bb      	cmp	r3, r7
   2b5c2:	d1f6      	bne.n	2b5b2 <usb_handle_standard_request+0x12a>
   2b5c4:	f1b9 0f00 	cmp.w	r9, #0
   2b5c8:	d1f3      	bne.n	2b5b2 <usb_handle_standard_request+0x12a>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   2b5ca:	4620      	mov	r0, r4
   2b5cc:	f7ff fe94 	bl	2b2f8 <set_endpoint>
			break;
   2b5d0:	e7ef      	b.n	2b5b2 <usb_handle_standard_request+0x12a>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   2b5d2:	886b      	ldrh	r3, [r5, #2]
   2b5d4:	2b01      	cmp	r3, #1
   2b5d6:	f47f af6b 	bne.w	2b4b0 <usb_handle_standard_request+0x28>
					usb_dev.remote_wakeup = false;
   2b5da:	2000      	movs	r0, #0
   2b5dc:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
					return true;
   2b5e0:	e768      	b.n	2b4b4 <usb_handle_standard_request+0x2c>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
   2b5e2:	886b      	ldrh	r3, [r5, #2]
   2b5e4:	2b01      	cmp	r3, #1
   2b5e6:	f47f af63 	bne.w	2b4b0 <usb_handle_standard_request+0x28>
					usb_dev.remote_wakeup = true;
   2b5ea:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
   2b5ee:	e766      	b.n	2b4be <usb_handle_standard_request+0x36>
	if (!is_device_configured() ||
   2b5f0:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2b5f4:	2b00      	cmp	r3, #0
   2b5f6:	f43f af5b 	beq.w	2b4b0 <usb_handle_standard_request+0x28>
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   2b5fa:	f8b5 c004 	ldrh.w	ip, [r5, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2b5fe:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   2b602:	fa5f f08c 	uxtb.w	r0, ip
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   2b606:	4643      	mov	r3, r8
	while (p[DESC_bLength] != 0U) {
   2b608:	781a      	ldrb	r2, [r3, #0]
   2b60a:	2a00      	cmp	r2, #0
   2b60c:	f43f af50 	beq.w	2b4b0 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   2b610:	7859      	ldrb	r1, [r3, #1]
   2b612:	2902      	cmp	r1, #2
   2b614:	d104      	bne.n	2b620 <usb_handle_standard_request+0x198>
			if (interface < cfg_descr->bNumInterfaces) {
   2b616:	f893 e004 	ldrb.w	lr, [r3, #4]
   2b61a:	4586      	cmp	lr, r0
   2b61c:	f200 8096 	bhi.w	2b74c <usb_handle_standard_request+0x2c4>
		p += p[DESC_bLength];
   2b620:	4413      	add	r3, r2
   2b622:	e7f1      	b.n	2b608 <usb_handle_standard_request+0x180>
			data[0] = 0U;
   2b624:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
   2b626:	7050      	strb	r0, [r2, #1]
			*len = 2;
   2b628:	6021      	str	r1, [r4, #0]
			return true;
   2b62a:	e743      	b.n	2b4b4 <usb_handle_standard_request+0x2c>
		p += p[DESC_bLength];
   2b62c:	4488      	add	r8, r1
   2b62e:	e09a      	b.n	2b766 <usb_handle_standard_request+0x2de>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   2b630:	280b      	cmp	r0, #11
   2b632:	f47f af3d 	bne.w	2b4b0 <usb_handle_standard_request+0x28>
	bool ret = false;
   2b636:	2400      	movs	r4, #0
	uint8_t cur_iface = 0xFF;
   2b638:	27ff      	movs	r7, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   2b63a:	46ba      	mov	sl, r7
	const uint8_t *if_desc = NULL;
   2b63c:	46a1      	mov	r9, r4
   2b63e:	e008      	b.n	2b652 <usb_handle_standard_request+0x1ca>
		switch (p[DESC_bDescriptorType]) {
   2b640:	f898 3001 	ldrb.w	r3, [r8, #1]
   2b644:	2b04      	cmp	r3, #4
   2b646:	d011      	beq.n	2b66c <usb_handle_standard_request+0x1e4>
   2b648:	2b05      	cmp	r3, #5
   2b64a:	d024      	beq.n	2b696 <usb_handle_standard_request+0x20e>
		p += p[DESC_bLength];
   2b64c:	f898 3000 	ldrb.w	r3, [r8]
   2b650:	4498      	add	r8, r3
	while (p[DESC_bLength] != 0U) {
   2b652:	f898 3000 	ldrb.w	r3, [r8]
   2b656:	2b00      	cmp	r3, #0
   2b658:	d1f2      	bne.n	2b640 <usb_handle_standard_request+0x1b8>
	if (usb_dev.status_callback) {
   2b65a:	69f3      	ldr	r3, [r6, #28]
   2b65c:	b113      	cbz	r3, 2b664 <usb_handle_standard_request+0x1dc>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   2b65e:	4649      	mov	r1, r9
   2b660:	2007      	movs	r0, #7
   2b662:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   2b664:	2c00      	cmp	r4, #0
   2b666:	f47f af2a 	bne.w	2b4be <usb_handle_standard_request+0x36>
   2b66a:	e721      	b.n	2b4b0 <usb_handle_standard_request+0x28>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   2b66c:	f898 7002 	ldrb.w	r7, [r8, #2]
			if (cur_iface == setup->wIndex &&
   2b670:	88aa      	ldrh	r2, [r5, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   2b672:	f898 a003 	ldrb.w	sl, [r8, #3]
			if (cur_iface == setup->wIndex &&
   2b676:	b2bb      	uxth	r3, r7
   2b678:	4293      	cmp	r3, r2
   2b67a:	d1e7      	bne.n	2b64c <usb_handle_standard_request+0x1c4>
			    cur_alt_setting == setup->wValue) {
   2b67c:	8869      	ldrh	r1, [r5, #2]
			if (cur_iface == setup->wIndex &&
   2b67e:	fa1f f28a 	uxth.w	r2, sl
   2b682:	428a      	cmp	r2, r1
   2b684:	d1e2      	bne.n	2b64c <usb_handle_standard_request+0x1c4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2b686:	2b07      	cmp	r3, #7
   2b688:	d81f      	bhi.n	2b6ca <usb_handle_standard_request+0x242>
		usb_dev.alt_setting[iface] = alt_setting;
   2b68a:	4433      	add	r3, r6
   2b68c:	46c1      	mov	r9, r8
				ret = usb_set_alt_setting(setup->wIndex,
   2b68e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
   2b692:	2401      	movs	r4, #1
   2b694:	e7da      	b.n	2b64c <usb_handle_standard_request+0x1c4>
			if (cur_iface == setup->wIndex) {
   2b696:	88ab      	ldrh	r3, [r5, #4]
   2b698:	42bb      	cmp	r3, r7
   2b69a:	d1d7      	bne.n	2b64c <usb_handle_standard_request+0x1c4>
	if (cur_alt_setting != alt_setting) {
   2b69c:	78ab      	ldrb	r3, [r5, #2]
   2b69e:	4553      	cmp	r3, sl
   2b6a0:	d00e      	beq.n	2b6c0 <usb_handle_standard_request+0x238>
		ret = reset_endpoint(ep_desc);
   2b6a2:	f898 4002 	ldrb.w	r4, [r8, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   2b6a6:	4620      	mov	r0, r4
   2b6a8:	f000 fb9a 	bl	2bde0 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
   2b6ac:	4620      	mov	r0, r4
   2b6ae:	f019 fa5f 	bl	44b70 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   2b6b2:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2b6b6:	d0ec      	beq.n	2b692 <usb_handle_standard_request+0x20a>
	} else if (ret) {
   2b6b8:	fab0 f480 	clz	r4, r0
   2b6bc:	0964      	lsrs	r4, r4, #5
   2b6be:	e7c5      	b.n	2b64c <usb_handle_standard_request+0x1c4>
		ret = set_endpoint(ep_desc);
   2b6c0:	4640      	mov	r0, r8
   2b6c2:	f7ff fe19 	bl	2b2f8 <set_endpoint>
   2b6c6:	4604      	mov	r4, r0
   2b6c8:	e7c0      	b.n	2b64c <usb_handle_standard_request+0x1c4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2b6ca:	46c1      	mov	r9, r8
	return false;
   2b6cc:	2400      	movs	r4, #0
   2b6ce:	e7bd      	b.n	2b64c <usb_handle_standard_request+0x1c4>
	if (usb_reqtype_is_to_host(setup)) {
   2b6d0:	060a      	lsls	r2, r1, #24
   2b6d2:	786b      	ldrb	r3, [r5, #1]
   2b6d4:	d518      	bpl.n	2b708 <usb_handle_standard_request+0x280>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   2b6d6:	2b00      	cmp	r3, #0
   2b6d8:	f47f aeea 	bne.w	2b4b0 <usb_handle_standard_request+0x28>
	uint8_t ep = setup->wIndex;
   2b6dc:	792d      	ldrb	r5, [r5, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
   2b6de:	066b      	lsls	r3, r5, #25
   2b6e0:	d00a      	beq.n	2b6f8 <usb_handle_standard_request+0x270>
   2b6e2:	4628      	mov	r0, r5
   2b6e4:	f7ff fe3a 	bl	2b35c <is_ep_valid.part.6>
	if (!is_ep_valid(ep)) {
   2b6e8:	2800      	cmp	r0, #0
   2b6ea:	f43f aee1 	beq.w	2b4b0 <usb_handle_standard_request+0x28>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   2b6ee:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
   2b6f2:	2b00      	cmp	r3, #0
   2b6f4:	f43f aedc 	beq.w	2b4b0 <usb_handle_standard_request+0x28>
			return usb_get_status_endpoint(setup, len, data_buf);
   2b6f8:	683e      	ldr	r6, [r7, #0]
		usb_dc_ep_is_stalled(ep, &data[0]);
   2b6fa:	4628      	mov	r0, r5
   2b6fc:	4631      	mov	r1, r6
   2b6fe:	f019 f9f1 	bl	44ae4 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   2b702:	2000      	movs	r0, #0
   2b704:	7070      	strb	r0, [r6, #1]
   2b706:	e6f1      	b.n	2b4ec <usb_handle_standard_request+0x64>
		switch (setup->bRequest) {
   2b708:	2b01      	cmp	r3, #1
   2b70a:	d008      	beq.n	2b71e <usb_handle_standard_request+0x296>
   2b70c:	2b03      	cmp	r3, #3
   2b70e:	f47f aecf 	bne.w	2b4b0 <usb_handle_standard_request+0x28>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2b712:	886b      	ldrh	r3, [r5, #2]
   2b714:	2b00      	cmp	r3, #0
   2b716:	f47f aecb 	bne.w	2b4b0 <usb_handle_standard_request+0x28>
				return usb_halt_endpoint_req(setup, true);
   2b71a:	2101      	movs	r1, #1
   2b71c:	e003      	b.n	2b726 <usb_handle_standard_request+0x29e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2b71e:	8869      	ldrh	r1, [r5, #2]
   2b720:	2900      	cmp	r1, #0
   2b722:	f47f aec5 	bne.w	2b4b0 <usb_handle_standard_request+0x28>
				return usb_halt_endpoint_req(setup, true);
   2b726:	88a8      	ldrh	r0, [r5, #4]
   2b728:	f7ff fe34 	bl	2b394 <usb_halt_endpoint_req.isra.8>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   2b72c:	2800      	cmp	r0, #0
   2b72e:	f47f aec6 	bne.w	2b4be <usb_handle_standard_request+0x36>
   2b732:	e6bd      	b.n	2b4b0 <usb_handle_standard_request+0x28>
		if (type == USB_DESC_CONFIGURATION) {
   2b734:	2a02      	cmp	r2, #2
		*data = p;
   2b736:	603b      	str	r3, [r7, #0]
		if (type == USB_DESC_CONFIGURATION) {
   2b738:	f47f aeef 	bne.w	2b51a <usb_handle_standard_request+0x92>
			*len = (p[CONF_DESC_wTotalLength]) |
   2b73c:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
   2b73e:	6023      	str	r3, [r4, #0]
   2b740:	e6bd      	b.n	2b4be <usb_handle_standard_request+0x36>
   2b742:	bf00      	nop
   2b744:	20003d44 	.word	0x20003d44
   2b748:	20003dfe 	.word	0x20003dfe
   2b74c:	f995 3000 	ldrsb.w	r3, [r5]
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   2b750:	683a      	ldr	r2, [r7, #0]
   2b752:	7868      	ldrb	r0, [r5, #1]
	if (usb_reqtype_is_to_host(setup)) {
   2b754:	2b00      	cmp	r3, #0
   2b756:	f6bf af6b 	bge.w	2b630 <usb_handle_standard_request+0x1a8>
		switch (setup->bRequest) {
   2b75a:	2800      	cmp	r0, #0
   2b75c:	f43f af62 	beq.w	2b624 <usb_handle_standard_request+0x19c>
   2b760:	280a      	cmp	r0, #10
   2b762:	f47f aea5 	bne.w	2b4b0 <usb_handle_standard_request+0x28>
	while (p[DESC_bLength] != 0U) {
   2b766:	f898 1000 	ldrb.w	r1, [r8]
   2b76a:	2900      	cmp	r1, #0
   2b76c:	f43f aea0 	beq.w	2b4b0 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   2b770:	f898 3001 	ldrb.w	r3, [r8, #1]
   2b774:	2b04      	cmp	r3, #4
   2b776:	f47f af59 	bne.w	2b62c <usb_handle_standard_request+0x1a4>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   2b77a:	f898 3002 	ldrb.w	r3, [r8, #2]
			if (cur_iface == setup->wIndex) {
   2b77e:	459c      	cmp	ip, r3
   2b780:	f47f af54 	bne.w	2b62c <usb_handle_standard_request+0x1a4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   2b784:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
   2b786:	bf96      	itet	ls
   2b788:	18f6      	addls	r6, r6, r3
	return 0;
   2b78a:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
   2b78c:	f896 30bb 	ldrbls.w	r3, [r6, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
   2b790:	7013      	strb	r3, [r2, #0]
				*len = 1;
   2b792:	2301      	movs	r3, #1
   2b794:	e7d3      	b.n	2b73e <usb_handle_standard_request+0x2b6>
   2b796:	bf00      	nop

0002b798 <usb_data_to_host>:
{
   2b798:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
   2b79a:	4c12      	ldr	r4, [pc, #72]	; (2b7e4 <usb_data_to_host+0x4c>)
   2b79c:	7d23      	ldrb	r3, [r4, #20]
   2b79e:	b9cb      	cbnz	r3, 2b7d4 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
   2b7a0:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2b7a2:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
   2b7a4:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   2b7a6:	ab01      	add	r3, sp, #4
   2b7a8:	2080      	movs	r0, #128	; 0x80
   2b7aa:	f01f fa38 	bl	4ac1e <usb_write>
		usb_dev.data_buf += chunk;
   2b7ae:	9a01      	ldr	r2, [sp, #4]
   2b7b0:	68a3      	ldr	r3, [r4, #8]
   2b7b2:	4413      	add	r3, r2
   2b7b4:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2b7b6:	68e3      	ldr	r3, [r4, #12]
   2b7b8:	1a9b      	subs	r3, r3, r2
   2b7ba:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
   2b7bc:	b943      	cbnz	r3, 2b7d0 <usb_data_to_host+0x38>
   2b7be:	b13a      	cbz	r2, 2b7d0 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   2b7c0:	6923      	ldr	r3, [r4, #16]
   2b7c2:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
   2b7c4:	429a      	cmp	r2, r3
   2b7c6:	dd03      	ble.n	2b7d0 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   2b7c8:	069b      	lsls	r3, r3, #26
   2b7ca:	d101      	bne.n	2b7d0 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
   2b7cc:	2301      	movs	r3, #1
   2b7ce:	7523      	strb	r3, [r4, #20]
}
   2b7d0:	b002      	add	sp, #8
   2b7d2:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
   2b7d4:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   2b7d6:	461a      	mov	r2, r3
   2b7d8:	4619      	mov	r1, r3
   2b7da:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
   2b7dc:	7523      	strb	r3, [r4, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   2b7de:	f019 f9ed 	bl	44bbc <usb_dc_ep_write>
}
   2b7e2:	e7f5      	b.n	2b7d0 <usb_data_to_host+0x38>
   2b7e4:	20003d44 	.word	0x20003d44

0002b7e8 <usb_handle_control_transfer>:
{
   2b7e8:	b530      	push	{r4, r5, lr}
   2b7ea:	b085      	sub	sp, #20
	uint32_t chunk = 0U;
   2b7ec:	2300      	movs	r3, #0
{
   2b7ee:	460c      	mov	r4, r1
	uint32_t chunk = 0U;
   2b7f0:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   2b7f2:	4602      	mov	r2, r0
   2b7f4:	2800      	cmp	r0, #0
   2b7f6:	d171      	bne.n	2b8dc <usb_handle_control_transfer+0xf4>
   2b7f8:	2900      	cmp	r1, #0
   2b7fa:	d142      	bne.n	2b882 <usb_handle_control_transfer+0x9a>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   2b7fc:	2208      	movs	r2, #8
   2b7fe:	460b      	mov	r3, r1
   2b800:	eb0d 0102 	add.w	r1, sp, r2
   2b804:	f024 fd69 	bl	502da <usb_dc_ep_read>
   2b808:	2800      	cmp	r0, #0
   2b80a:	da04      	bge.n	2b816 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2b80c:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2b80e:	f019 f921 	bl	44a54 <usb_dc_ep_set_stall>
}
   2b812:	b005      	add	sp, #20
   2b814:	bd30      	pop	{r4, r5, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
   2b816:	4b36      	ldr	r3, [pc, #216]	; (2b8f0 <usb_handle_control_transfer+0x108>)
   2b818:	9902      	ldr	r1, [sp, #8]
   2b81a:	6019      	str	r1, [r3, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   2b81c:	9903      	ldr	r1, [sp, #12]
   2b81e:	6059      	str	r1, [r3, #4]
		usb_dev.data_buf = usb_dev.req_data;
   2b820:	f103 0138 	add.w	r1, r3, #56	; 0x38
   2b824:	6099      	str	r1, [r3, #8]
		if (usb_reqtype_is_to_device(setup)) {
   2b826:	f99d 1008 	ldrsb.w	r1, [sp, #8]
		usb_dev.zlp_flag = false;
   2b82a:	751c      	strb	r4, [r3, #20]
		if (usb_reqtype_is_to_device(setup)) {
   2b82c:	2900      	cmp	r1, #0
		usb_dev.data_buf_residue = 0;
   2b82e:	e9c3 4403 	strd	r4, r4, [r3, #12]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   2b832:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2b836:	461c      	mov	r4, r3
		if (usb_reqtype_is_to_device(setup)) {
   2b838:	db0a      	blt.n	2b850 <usb_handle_control_transfer+0x68>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   2b83a:	2a80      	cmp	r2, #128	; 0x80
   2b83c:	d904      	bls.n	2b848 <usb_handle_control_transfer+0x60>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   2b83e:	2080      	movs	r0, #128	; 0x80
   2b840:	f019 f908 	bl	44a54 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   2b844:	2000      	movs	r0, #0
   2b846:	e7e2      	b.n	2b80e <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
   2b848:	b112      	cbz	r2, 2b850 <usb_handle_control_transfer+0x68>
				usb_dev.data_buf_residue = setup->wLength;
   2b84a:	e9c3 2203 	strd	r2, r2, [r3, #12]
				return;
   2b84e:	e7e0      	b.n	2b812 <usb_handle_control_transfer+0x2a>
	uint32_t type = setup->RequestType.type;
   2b850:	7823      	ldrb	r3, [r4, #0]
   2b852:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   2b856:	330a      	adds	r3, #10
   2b858:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
   2b85c:	2b00      	cmp	r3, #0
   2b85e:	d0d5      	beq.n	2b80c <usb_handle_control_transfer+0x24>
	if ((*handler)(setup, len, data) < 0) {
   2b860:	4a24      	ldr	r2, [pc, #144]	; (2b8f4 <usb_handle_control_transfer+0x10c>)
   2b862:	f102 0108 	add.w	r1, r2, #8
   2b866:	f1a2 0008 	sub.w	r0, r2, #8
   2b86a:	4798      	blx	r3
   2b86c:	2800      	cmp	r0, #0
   2b86e:	dbcd      	blt.n	2b80c <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   2b870:	88e2      	ldrh	r2, [r4, #6]
   2b872:	6923      	ldr	r3, [r4, #16]
   2b874:	429a      	cmp	r2, r3
   2b876:	bfd4      	ite	le
   2b878:	60e2      	strle	r2, [r4, #12]
   2b87a:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
   2b87c:	f7ff ff8c 	bl	2b798 <usb_data_to_host>
   2b880:	e7c7      	b.n	2b812 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
   2b882:	4c1b      	ldr	r4, [pc, #108]	; (2b8f0 <usb_handle_control_transfer+0x108>)
   2b884:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
   2b888:	2d00      	cmp	r5, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2b88a:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
   2b88c:	dc04      	bgt.n	2b898 <usb_handle_control_transfer+0xb0>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2b88e:	f024 fd24 	bl	502da <usb_dc_ep_read>
   2b892:	2800      	cmp	r0, #0
   2b894:	dabd      	bge.n	2b812 <usb_handle_control_transfer+0x2a>
   2b896:	e7b9      	b.n	2b80c <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   2b898:	462a      	mov	r2, r5
   2b89a:	f024 fd1e 	bl	502da <usb_dc_ep_read>
   2b89e:	2800      	cmp	r0, #0
   2b8a0:	dbcd      	blt.n	2b83e <usb_handle_control_transfer+0x56>
		usb_dev.data_buf += chunk;
   2b8a2:	9901      	ldr	r1, [sp, #4]
   2b8a4:	68a2      	ldr	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2b8a6:	68e3      	ldr	r3, [r4, #12]
		usb_dev.data_buf += chunk;
   2b8a8:	440a      	add	r2, r1
		usb_dev.data_buf_residue -= chunk;
   2b8aa:	1a5b      	subs	r3, r3, r1
		usb_dev.data_buf += chunk;
   2b8ac:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   2b8ae:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
   2b8b0:	2b00      	cmp	r3, #0
   2b8b2:	d1ae      	bne.n	2b812 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
   2b8b4:	f104 0338 	add.w	r3, r4, #56	; 0x38
   2b8b8:	60a3      	str	r3, [r4, #8]
	uint32_t type = setup->RequestType.type;
   2b8ba:	7823      	ldrb	r3, [r4, #0]
   2b8bc:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
   2b8c0:	330a      	adds	r3, #10
   2b8c2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
   2b8c6:	2b00      	cmp	r3, #0
   2b8c8:	d0a0      	beq.n	2b80c <usb_handle_control_transfer+0x24>
	if ((*handler)(setup, len, data) < 0) {
   2b8ca:	f104 0208 	add.w	r2, r4, #8
   2b8ce:	f104 0110 	add.w	r1, r4, #16
   2b8d2:	4620      	mov	r0, r4
   2b8d4:	4798      	blx	r3
   2b8d6:	2800      	cmp	r0, #0
   2b8d8:	dad0      	bge.n	2b87c <usb_handle_control_transfer+0x94>
   2b8da:	e797      	b.n	2b80c <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
   2b8dc:	2880      	cmp	r0, #128	; 0x80
   2b8de:	d198      	bne.n	2b812 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   2b8e0:	4b03      	ldr	r3, [pc, #12]	; (2b8f0 <usb_handle_control_transfer+0x108>)
   2b8e2:	68da      	ldr	r2, [r3, #12]
   2b8e4:	2a00      	cmp	r2, #0
   2b8e6:	d1c9      	bne.n	2b87c <usb_handle_control_transfer+0x94>
   2b8e8:	7d1b      	ldrb	r3, [r3, #20]
   2b8ea:	2b00      	cmp	r3, #0
   2b8ec:	d1c6      	bne.n	2b87c <usb_handle_control_transfer+0x94>
   2b8ee:	e790      	b.n	2b812 <usb_handle_control_transfer+0x2a>
   2b8f0:	20003d44 	.word	0x20003d44
   2b8f4:	20003d4c 	.word	0x20003d4c

0002b8f8 <usb_wakeup_request>:
	return usb_dev.remote_wakeup;
   2b8f8:	4b04      	ldr	r3, [pc, #16]	; (2b90c <usb_wakeup_request+0x14>)
		if (usb_get_remote_wakeup_status()) {
   2b8fa:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
   2b8fe:	b10b      	cbz	r3, 2b904 <usb_wakeup_request+0xc>
			return usb_dc_wakeup_request();
   2b900:	f024 bcfa 	b.w	502f8 <usb_dc_wakeup_request>
}
   2b904:	f06f 000c 	mvn.w	r0, #12
   2b908:	4770      	bx	lr
   2b90a:	bf00      	nop
   2b90c:	20003d44 	.word	0x20003d44

0002b910 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
   2b910:	4b05      	ldr	r3, [pc, #20]	; (2b928 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
   2b912:	4a06      	ldr	r2, [pc, #24]	; (2b92c <usb_set_config+0x1c>)
   2b914:	629a      	str	r2, [r3, #40]	; 0x28
   2b916:	4a06      	ldr	r2, [pc, #24]	; (2b930 <usb_set_config+0x20>)
   2b918:	62da      	str	r2, [r3, #44]	; 0x2c
   2b91a:	4a06      	ldr	r2, [pc, #24]	; (2b934 <usb_set_config+0x24>)
   2b91c:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
   2b91e:	4a06      	ldr	r2, [pc, #24]	; (2b938 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
   2b920:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
   2b922:	619a      	str	r2, [r3, #24]

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);

	return 0;
}
   2b924:	2000      	movs	r0, #0
   2b926:	4770      	bx	lr
   2b928:	20003d44 	.word	0x20003d44
   2b92c:	0002b489 	.word	0x0002b489
   2b930:	0002b221 	.word	0x0002b221
   2b934:	0002b2c1 	.word	0x0002b2c1
   2b938:	0002b261 	.word	0x0002b261

0002b93c <usb_device_init>:
 */
static int usb_device_init(const struct device *dev)
{
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   2b93c:	4b08      	ldr	r3, [pc, #32]	; (2b960 <usb_device_init+0x24>)
{
   2b93e:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
   2b940:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
   2b944:	b934      	cbnz	r4, 2b954 <usb_device_init+0x18>
		return -EALREADY;
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
   2b946:	f000 f9a1 	bl	2bc8c <usb_get_device_descriptor>
	if (!device_descriptor) {
   2b94a:	b130      	cbz	r0, 2b95a <usb_device_init+0x1e>
		LOG_ERR("Failed to configure USB device stack");
		return -1;
	}

	usb_set_config(device_descriptor);
   2b94c:	f7ff ffe0 	bl	2b910 <usb_set_config>

	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
   2b950:	4620      	mov	r0, r4
}
   2b952:	bd10      	pop	{r4, pc}
		return -EALREADY;
   2b954:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2b958:	e7fb      	b.n	2b952 <usb_device_init+0x16>
		return -1;
   2b95a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b95e:	e7f8      	b.n	2b952 <usb_device_init+0x16>
   2b960:	20003d44 	.word	0x20003d44

0002b964 <usb_enable>:
{
   2b964:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b968:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
   2b96a:	4d35      	ldr	r5, [pc, #212]	; (2ba40 <usb_enable+0xdc>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2b96c:	4835      	ldr	r0, [pc, #212]	; (2ba44 <usb_enable+0xe0>)
   2b96e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b976:	f01c fea9 	bl	486cc <z_impl_k_mutex_lock>
   2b97a:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
   2b97e:	2e00      	cmp	r6, #0
   2b980:	d15b      	bne.n	2ba3a <usb_enable+0xd6>
	usb_dev.status_callback = cb;
   2b982:	4831      	ldr	r0, [pc, #196]	; (2ba48 <usb_enable+0xe4>)
	usb_dev.user_status_callback = status_cb;
   2b984:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
   2b986:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
   2b988:	f019 fa2e 	bl	44de8 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   2b98c:	f018 fff0 	bl	44970 <usb_dc_attach>
	if (ret < 0) {
   2b990:	1e04      	subs	r4, r0, #0
   2b992:	db36      	blt.n	2ba02 <usb_enable+0x9e>
	ret = usb_transfer_init();
   2b994:	f000 fa6a 	bl	2be6c <usb_transfer_init>
	if (ret < 0) {
   2b998:	1e04      	subs	r4, r0, #0
   2b99a:	db32      	blt.n	2ba02 <usb_enable+0x9e>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   2b99c:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
   2b99e:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   2b9a0:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   2b9a4:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   2b9a8:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   2b9ac:	f019 f830 	bl	44a10 <usb_dc_ep_configure>
	if (ret < 0) {
   2b9b0:	1e04      	subs	r4, r0, #0
   2b9b2:	db26      	blt.n	2ba02 <usb_enable+0x9e>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   2b9b4:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
   2b9b6:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   2b9b8:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   2b9bc:	f019 f828 	bl	44a10 <usb_dc_ep_configure>
	if (ret < 0) {
   2b9c0:	1e04      	subs	r4, r0, #0
   2b9c2:	db1e      	blt.n	2ba02 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   2b9c4:	4921      	ldr	r1, [pc, #132]	; (2ba4c <usb_enable+0xe8>)
   2b9c6:	4630      	mov	r0, r6
   2b9c8:	f019 f9fa 	bl	44dc0 <usb_dc_ep_set_callback>
	if (ret < 0) {
   2b9cc:	1e04      	subs	r4, r0, #0
   2b9ce:	db18      	blt.n	2ba02 <usb_enable+0x9e>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   2b9d0:	491e      	ldr	r1, [pc, #120]	; (2ba4c <usb_enable+0xe8>)
   2b9d2:	4638      	mov	r0, r7
   2b9d4:	f019 f9f4 	bl	44dc0 <usb_dc_ep_set_callback>
	if (ret < 0) {
   2b9d8:	1e04      	subs	r4, r0, #0
   2b9da:	db12      	blt.n	2ba02 <usb_enable+0x9e>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2b9dc:	4c1c      	ldr	r4, [pc, #112]	; (2ba50 <usb_enable+0xec>)
   2b9de:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2ba54 <usb_enable+0xf0>
   2b9e2:	4544      	cmp	r4, r8
   2b9e4:	d314      	bcc.n	2ba10 <usb_enable+0xac>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   2b9e6:	2000      	movs	r0, #0
   2b9e8:	f019 f898 	bl	44b1c <usb_dc_ep_enable>
	if (ret < 0) {
   2b9ec:	1e04      	subs	r4, r0, #0
   2b9ee:	db08      	blt.n	2ba02 <usb_enable+0x9e>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   2b9f0:	2080      	movs	r0, #128	; 0x80
   2b9f2:	f019 f893 	bl	44b1c <usb_dc_ep_enable>
	if (ret < 0) {
   2b9f6:	1e04      	subs	r4, r0, #0
   2b9f8:	db03      	blt.n	2ba02 <usb_enable+0x9e>
	usb_dev.enabled = true;
   2b9fa:	2301      	movs	r3, #1
   2b9fc:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
   2ba00:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   2ba02:	4810      	ldr	r0, [pc, #64]	; (2ba44 <usb_enable+0xe0>)
   2ba04:	f01c fee0 	bl	487c8 <z_impl_k_mutex_unlock>
}
   2ba08:	4620      	mov	r0, r4
   2ba0a:	b002      	add	sp, #8
   2ba0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
   2ba10:	6a27      	ldr	r7, [r4, #32]
   2ba12:	2600      	movs	r6, #0
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
   2ba14:	7f22      	ldrb	r2, [r4, #28]
   2ba16:	b2f3      	uxtb	r3, r6
   2ba18:	429a      	cmp	r2, r3
   2ba1a:	d801      	bhi.n	2ba20 <usb_enable+0xbc>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2ba1c:	3424      	adds	r4, #36	; 0x24
   2ba1e:	e7e0      	b.n	2b9e2 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   2ba20:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   2ba24:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   2ba28:	7910      	ldrb	r0, [r2, #4]
   2ba2a:	f019 f9c9 	bl	44dc0 <usb_dc_ep_set_callback>
   2ba2e:	3601      	adds	r6, #1
   2ba30:	2800      	cmp	r0, #0
   2ba32:	d0ef      	beq.n	2ba14 <usb_enable+0xb0>
   2ba34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2ba38:	e7e3      	b.n	2ba02 <usb_enable+0x9e>
		ret = -EALREADY;
   2ba3a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2ba3e:	e7e0      	b.n	2ba02 <usb_enable+0x9e>
   2ba40:	20003d44 	.word	0x20003d44
   2ba44:	20000ef8 	.word	0x20000ef8
   2ba48:	0002b3ed 	.word	0x0002b3ed
   2ba4c:	0002b7e9 	.word	0x0002b7e9
   2ba50:	20001238 	.word	0x20001238
   2ba54:	2000125c 	.word	0x2000125c

0002ba58 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   2ba58:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   2ba5a:	4b1f      	ldr	r3, [pc, #124]	; (2bad8 <usb_update_sn_string_descriptor+0x80>)
{
   2ba5c:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
   2ba5e:	aa05      	add	r2, sp, #20
   2ba60:	f103 0510 	add.w	r5, r3, #16
   2ba64:	6818      	ldr	r0, [r3, #0]
   2ba66:	6859      	ldr	r1, [r3, #4]
   2ba68:	4614      	mov	r4, r2
   2ba6a:	c403      	stmia	r4!, {r0, r1}
   2ba6c:	3308      	adds	r3, #8
   2ba6e:	42ab      	cmp	r3, r5
   2ba70:	4622      	mov	r2, r4
   2ba72:	d1f7      	bne.n	2ba64 <usb_update_sn_string_descriptor+0xc>
   2ba74:	781b      	ldrb	r3, [r3, #0]
   2ba76:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   2ba78:	2210      	movs	r2, #16
   2ba7a:	2100      	movs	r1, #0
   2ba7c:	a801      	add	r0, sp, #4
   2ba7e:	f020 fc40 	bl	4c302 <memset>
	memset(sn, 0, sizeof(sn));
   2ba82:	2212      	movs	r2, #18
   2ba84:	2100      	movs	r1, #0
   2ba86:	4815      	ldr	r0, [pc, #84]	; (2badc <usb_update_sn_string_descriptor+0x84>)
   2ba88:	f020 fc3b 	bl	4c302 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   2ba8c:	2110      	movs	r1, #16
   2ba8e:	a801      	add	r0, sp, #4
   2ba90:	f024 fd38 	bl	50504 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   2ba94:	2800      	cmp	r0, #0
   2ba96:	dd1b      	ble.n	2bad0 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
   2ba98:	2808      	cmp	r0, #8
   2ba9a:	bfb8      	it	lt
   2ba9c:	2008      	movlt	r0, #8
   2ba9e:	3808      	subs	r0, #8
   2baa0:	ab01      	add	r3, sp, #4
   2baa2:	4a0e      	ldr	r2, [pc, #56]	; (2badc <usb_update_sn_string_descriptor+0x84>)
   2baa4:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   2baa6:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2baa8:	f810 3b01 	ldrb.w	r3, [r0], #1
   2baac:	ac0a      	add	r4, sp, #40	; 0x28
   2baae:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2bab2:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   2bab6:	f814 4c14 	ldrb.w	r4, [r4, #-20]
   2baba:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2babc:	ac0a      	add	r4, sp, #40	; 0x28
   2babe:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
   2bac0:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   2bac2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   2bac6:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
   2bac8:	2908      	cmp	r1, #8
   2baca:	f102 0202 	add.w	r2, r2, #2
   2bace:	d1eb      	bne.n	2baa8 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
   2bad0:	4802      	ldr	r0, [pc, #8]	; (2badc <usb_update_sn_string_descriptor+0x84>)
   2bad2:	b00b      	add	sp, #44	; 0x2c
   2bad4:	bd30      	pop	{r4, r5, pc}
   2bad6:	bf00      	nop
   2bad8:	0005413a 	.word	0x0005413a
   2badc:	20006cde 	.word	0x20006cde

0002bae0 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
   2bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
   2bae4:	2700      	movs	r7, #0
{
   2bae6:	b085      	sub	sp, #20
   2bae8:	4604      	mov	r4, r0
	uint32_t requested_ep = BIT(16) | BIT(0);
   2baea:	f04f 1a01 	mov.w	sl, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
   2baee:	46b9      	mov	r9, r7
	struct usb_cfg_data *cfg_data = NULL;
   2baf0:	463e      	mov	r6, r7
	struct usb_cfg_descriptor *cfg_descr = NULL;
   2baf2:	46b8      	mov	r8, r7

	while (head->bLength != 0U) {
   2baf4:	7823      	ldrb	r3, [r4, #0]
   2baf6:	b93b      	cbnz	r3, 2bb08 <usb_fix_descriptor+0x28>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
   2baf8:	4a60      	ldr	r2, [pc, #384]	; (2bc7c <usb_fix_descriptor+0x19c>)
   2bafa:	1ca0      	adds	r0, r4, #2
   2bafc:	4290      	cmp	r0, r2
   2bafe:	f000 80b3 	beq.w	2bc68 <usb_fix_descriptor+0x188>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
   2bb02:	f7ff ffed 	bl	2bae0 <usb_fix_descriptor>
   2bb06:	e01e      	b.n	2bb46 <usb_fix_descriptor+0x66>
		switch (head->bDescriptorType) {
   2bb08:	7863      	ldrb	r3, [r4, #1]
   2bb0a:	2b05      	cmp	r3, #5
   2bb0c:	d805      	bhi.n	2bb1a <usb_fix_descriptor+0x3a>
   2bb0e:	e8df f003 	tbb	[pc, r3]
   2bb12:	0472      	.short	0x0472
   2bb14:	20077203 	.word	0x20077203
   2bb18:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   2bb1a:	7823      	ldrb	r3, [r4, #0]
   2bb1c:	441c      	add	r4, r3
   2bb1e:	e7e9      	b.n	2baf4 <usb_fix_descriptor+0x14>
			if (if_descr->bAlternateSetting) {
   2bb20:	78e3      	ldrb	r3, [r4, #3]
   2bb22:	2b00      	cmp	r3, #0
   2bb24:	d1f9      	bne.n	2bb1a <usb_fix_descriptor+0x3a>
			if (if_descr->bInterfaceNumber == 0U) {
   2bb26:	78a3      	ldrb	r3, [r4, #2]
   2bb28:	b183      	cbz	r3, 2bb4c <usb_fix_descriptor+0x6c>
			numof_ifaces++;
   2bb2a:	f109 0901 	add.w	r9, r9, #1
   2bb2e:	fa5f f989 	uxtb.w	r9, r9
			break;
   2bb32:	e7f2      	b.n	2bb1a <usb_fix_descriptor+0x3a>
		if (cfg_data->interface_descriptor == iface) {
   2bb34:	6872      	ldr	r2, [r6, #4]
   2bb36:	4294      	cmp	r4, r2
   2bb38:	f000 8098 	beq.w	2bc6c <usb_fix_descriptor+0x18c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bb3c:	3624      	adds	r6, #36	; 0x24
   2bb3e:	429e      	cmp	r6, r3
   2bb40:	d3f8      	bcc.n	2bb34 <usb_fix_descriptor+0x54>
					return -1;
   2bb42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return 0;
}
   2bb46:	b005      	add	sp, #20
   2bb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
   2bb4c:	4e4c      	ldr	r6, [pc, #304]	; (2bc80 <usb_fix_descriptor+0x1a0>)
   2bb4e:	4b4d      	ldr	r3, [pc, #308]	; (2bc84 <usb_fix_descriptor+0x1a4>)
   2bb50:	e7f5      	b.n	2bb3e <usb_fix_descriptor+0x5e>
			if (!cfg_data) {
   2bb52:	2e00      	cmp	r6, #0
   2bb54:	d0f5      	beq.n	2bb42 <usb_fix_descriptor+0x62>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2bb56:	f04f 0b00 	mov.w	fp, #0
   2bb5a:	2101      	movs	r1, #1
   2bb5c:	7f33      	ldrb	r3, [r6, #28]
   2bb5e:	459b      	cmp	fp, r3
   2bb60:	d2ef      	bcs.n	2bb42 <usb_fix_descriptor+0x62>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   2bb62:	6a33      	ldr	r3, [r6, #32]
   2bb64:	78a0      	ldrb	r0, [r4, #2]
   2bb66:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   2bb6a:	791a      	ldrb	r2, [r3, #4]
   2bb6c:	4290      	cmp	r0, r2
   2bb6e:	d002      	beq.n	2bb76 <usb_fix_descriptor+0x96>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   2bb70:	f10b 0b01 	add.w	fp, fp, #1
   2bb74:	e7f2      	b.n	2bb5c <usb_fix_descriptor+0x7c>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   2bb76:	2501      	movs	r5, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   2bb78:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   2bb7a:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   2bb7e:	f000 0003 	and.w	r0, r0, #3
   2bb82:	f88d 000c 	strb.w	r0, [sp, #12]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   2bb86:	7920      	ldrb	r0, [r4, #4]
   2bb88:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
   2bb8c:	f8ad 000a 	strh.w	r0, [sp, #10]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
   2bb90:	78a0      	ldrb	r0, [r4, #2]
   2bb92:	f88d 0008 	strb.w	r0, [sp, #8]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2bb96:	0600      	lsls	r0, r0, #24
   2bb98:	b2ea      	uxtb	r2, r5
   2bb9a:	d523      	bpl.n	2bbe4 <usb_fix_descriptor+0x104>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   2bb9c:	f105 0010 	add.w	r0, r5, #16
   2bba0:	fa01 f000 	lsl.w	r0, r1, r0
   2bba4:	ea10 0f0a 	tst.w	r0, sl
   2bba8:	d121      	bne.n	2bbee <usb_fix_descriptor+0x10e>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   2bbaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   2bbae:	a802      	add	r0, sp, #8
   2bbb0:	9301      	str	r3, [sp, #4]
				ep_cfg.ep_addr = idx;
   2bbb2:	f88d 2008 	strb.w	r2, [sp, #8]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   2bbb6:	f024 fb78 	bl	502aa <usb_dc_ep_check_cap>
   2bbba:	9b01      	ldr	r3, [sp, #4]
   2bbbc:	2101      	movs	r1, #1
   2bbbe:	b9b0      	cbnz	r0, 2bbee <usb_fix_descriptor+0x10e>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   2bbc0:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2bbc4:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   2bbc6:	f012 0f80 	tst.w	r2, #128	; 0x80
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   2bbca:	711a      	strb	r2, [r3, #4]
					*requested_ep |= (1U << (idx + 16U));
   2bbcc:	bf18      	it	ne
   2bbce:	3510      	addne	r5, #16
   2bbd0:	460b      	mov	r3, r1
   2bbd2:	bf15      	itete	ne
   2bbd4:	40ab      	lslne	r3, r5
					*requested_ep |= (1U << idx);
   2bbd6:	fa03 f505 	lsleq.w	r5, r3, r5
					*requested_ep |= (1U << (idx + 16U));
   2bbda:	ea4a 0a03 	orrne.w	sl, sl, r3
					*requested_ep |= (1U << idx);
   2bbde:	ea4a 0a05 	orreq.w	sl, sl, r5
				return 0;
   2bbe2:	e79a      	b.n	2bb1a <usb_fix_descriptor+0x3a>
				if ((*requested_ep & (1U << (idx)))) {
   2bbe4:	fa01 f005 	lsl.w	r0, r1, r5
   2bbe8:	ea10 0f0a 	tst.w	r0, sl
   2bbec:	d0df      	beq.n	2bbae <usb_fix_descriptor+0xce>
   2bbee:	3501      	adds	r5, #1
		for (uint8_t idx = 1; idx < 16U; idx++) {
   2bbf0:	2d10      	cmp	r5, #16
   2bbf2:	d1c1      	bne.n	2bb78 <usb_fix_descriptor+0x98>
   2bbf4:	e7bc      	b.n	2bb70 <usb_fix_descriptor+0x90>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   2bbf6:	2f03      	cmp	r7, #3
   2bbf8:	d11e      	bne.n	2bc38 <usb_fix_descriptor+0x158>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   2bbfa:	f7ff ff2d 	bl	2ba58 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
   2bbfe:	4683      	mov	fp, r0
   2bc00:	b168      	cbz	r0, 2bc1e <usb_fix_descriptor+0x13e>
	runtime_sn_len = strlen(runtime_sn);
   2bc02:	f020 fb41 	bl	4c288 <strlen>
	if (!runtime_sn_len) {
   2bc06:	4605      	mov	r5, r0
   2bc08:	b148      	cbz	r0, 2bc1e <usb_fix_descriptor+0x13e>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   2bc0a:	481f      	ldr	r0, [pc, #124]	; (2bc88 <usb_fix_descriptor+0x1a8>)
   2bc0c:	f020 fb3c 	bl	4c288 <strlen>
	if (runtime_sn_len != default_sn_len) {
   2bc10:	4285      	cmp	r5, r0
   2bc12:	d104      	bne.n	2bc1e <usb_fix_descriptor+0x13e>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   2bc14:	462a      	mov	r2, r5
   2bc16:	4659      	mov	r1, fp
   2bc18:	1ca0      	adds	r0, r4, #2
   2bc1a:	f020 fb67 	bl	4c2ec <memcpy>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   2bc1e:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
   2bc20:	f06f 0102 	mvn.w	r1, #2
   2bc24:	18e2      	adds	r2, r4, r3
   2bc26:	1b09      	subs	r1, r1, r4
   2bc28:	eb04 0353 	add.w	r3, r4, r3, lsr #1
		buf[i] = 0U;
   2bc2c:	2000      	movs	r0, #0
	for (int i = idx_max; i >= 0; i -= 2) {
   2bc2e:	42d1      	cmn	r1, r2
   2bc30:	d513      	bpl.n	2bc5a <usb_fix_descriptor+0x17a>
			str_descr_idx += 1U;
   2bc32:	3701      	adds	r7, #1
   2bc34:	b2ff      	uxtb	r7, r7
			break;
   2bc36:	e770      	b.n	2bb1a <usb_fix_descriptor+0x3a>
			if (str_descr_idx) {
   2bc38:	2f00      	cmp	r7, #0
   2bc3a:	d1f0      	bne.n	2bc1e <usb_fix_descriptor+0x13e>
				if (!cfg_descr) {
   2bc3c:	f1b8 0f00 	cmp.w	r8, #0
   2bc40:	f43f af7f 	beq.w	2bb42 <usb_fix_descriptor+0x62>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   2bc44:	eba4 0308 	sub.w	r3, r4, r8
   2bc48:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
   2bc4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2bc50:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
   2bc54:	f888 9004 	strb.w	r9, [r8, #4]
   2bc58:	e7eb      	b.n	2bc32 <usb_fix_descriptor+0x152>
		buf[i] = 0U;
   2bc5a:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
   2bc5e:	f813 5901 	ldrb.w	r5, [r3], #-1
   2bc62:	f802 5d02 	strb.w	r5, [r2, #-2]!
   2bc66:	e7e2      	b.n	2bc2e <usb_fix_descriptor+0x14e>
	return 0;
   2bc68:	4618      	mov	r0, r3
   2bc6a:	e76c      	b.n	2bb46 <usb_fix_descriptor+0x66>
				if (cfg_data->interface_config) {
   2bc6c:	68b3      	ldr	r3, [r6, #8]
   2bc6e:	2b00      	cmp	r3, #0
   2bc70:	f43f af5b 	beq.w	2bb2a <usb_fix_descriptor+0x4a>
					cfg_data->interface_config(head,
   2bc74:	4649      	mov	r1, r9
   2bc76:	4620      	mov	r0, r4
   2bc78:	4798      	blx	r3
   2bc7a:	e756      	b.n	2bb2a <usb_fix_descriptor+0x4a>
   2bc7c:	20001238 	.word	0x20001238
   2bc80:	20001238 	.word	0x20001238
   2bc84:	2000125c 	.word	0x2000125c
   2bc88:	0005413a 	.word	0x0005413a

0002bc8c <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
   2bc8c:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
   2bc8e:	4804      	ldr	r0, [pc, #16]	; (2bca0 <usb_get_device_descriptor+0x14>)
   2bc90:	f7ff ff26 	bl	2bae0 <usb_fix_descriptor>
   2bc94:	2800      	cmp	r0, #0
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
}
   2bc96:	4802      	ldr	r0, [pc, #8]	; (2bca0 <usb_get_device_descriptor+0x14>)
   2bc98:	bf18      	it	ne
   2bc9a:	2000      	movne	r0, #0
   2bc9c:	bd08      	pop	{r3, pc}
   2bc9e:	bf00      	nop
   2bca0:	200011ac 	.word	0x200011ac

0002bca4 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
   2bca4:	b510      	push	{r4, lr}
   2bca6:	4a09      	ldr	r2, [pc, #36]	; (2bccc <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2bca8:	2300      	movs	r3, #0
   2bcaa:	4611      	mov	r1, r2
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   2bcac:	7814      	ldrb	r4, [r2, #0]
   2bcae:	4284      	cmp	r4, r0
   2bcb0:	d105      	bne.n	2bcbe <usb_ep_get_transfer+0x1a>
   2bcb2:	6854      	ldr	r4, [r2, #4]
   2bcb4:	b11c      	cbz	r4, 2bcbe <usb_ep_get_transfer+0x1a>
			return &ut_data[i];
   2bcb6:	2048      	movs	r0, #72	; 0x48
   2bcb8:	fb00 1003 	mla	r0, r0, r3, r1
		}
	}

	return NULL;
}
   2bcbc:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2bcbe:	3301      	adds	r3, #1
   2bcc0:	2b04      	cmp	r3, #4
   2bcc2:	f102 0248 	add.w	r2, r2, #72	; 0x48
   2bcc6:	d1f1      	bne.n	2bcac <usb_ep_get_transfer+0x8>
	return NULL;
   2bcc8:	2000      	movs	r0, #0
   2bcca:	e7f7      	b.n	2bcbc <usb_ep_get_transfer+0x18>
   2bccc:	20003e08 	.word	0x20003e08

0002bcd0 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   2bcd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
   2bcd4:	f850 3c30 	ldr.w	r3, [r0, #-48]
	ep = trans->ep;
   2bcd8:	f810 5c34 	ldrb.w	r5, [r0, #-52]
	if (trans->status != -EBUSY) {
   2bcdc:	3310      	adds	r3, #16
{
   2bcde:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
   2bce0:	d110      	bne.n	2bd04 <usb_transfer_work+0x34>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   2bce2:	6903      	ldr	r3, [r0, #16]
   2bce4:	f850 2c28 	ldr.w	r2, [r0, #-40]
   2bce8:	0799      	lsls	r1, r3, #30
   2bcea:	d53c      	bpl.n	2bd66 <usb_transfer_work+0x96>
		if (!trans->bsize) {
   2bcec:	bb02      	cbnz	r2, 2bd30 <usb_transfer_work+0x60>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   2bcee:	f013 0304 	ands.w	r3, r3, #4
   2bcf2:	d104      	bne.n	2bcfe <usb_transfer_work+0x2e>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
   2bcf4:	461a      	mov	r2, r3
   2bcf6:	4619      	mov	r1, r3
   2bcf8:	4628      	mov	r0, r5
   2bcfa:	f01e ff90 	bl	4ac1e <usb_write>
			}
			trans->status = 0;
   2bcfe:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
   2bd00:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   2bd04:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2bd08:	3310      	adds	r3, #16
   2bd0a:	d00e      	beq.n	2bd2a <usb_transfer_work+0x5a>
   2bd0c:	f854 6c20 	ldr.w	r6, [r4, #-32]
   2bd10:	b15e      	cbz	r6, 2bd2a <usb_transfer_work+0x5a>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   2bd12:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   2bd16:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   2bd1a:	f025 f8c2 	bl	50ea2 <k_is_in_isr>
   2bd1e:	2800      	cmp	r0, #0
   2bd20:	d04c      	beq.n	2bdbc <usb_transfer_work+0xec>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2bd22:	4621      	mov	r1, r4
   2bd24:	482d      	ldr	r0, [pc, #180]	; (2bddc <usb_transfer_work+0x10c>)
   2bd26:	f025 fa2b 	bl	51180 <k_work_submit_to_queue>
		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
			cb(ep, tsize, priv);
		}
	}
}
   2bd2a:	b002      	add	sp, #8
   2bd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   2bd30:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2bd34:	ab01      	add	r3, sp, #4
   2bd36:	4628      	mov	r0, r5
   2bd38:	f01e ff71 	bl	4ac1e <usb_write>
		if (ret) {
   2bd3c:	b110      	cbz	r0, 2bd44 <usb_transfer_work+0x74>
			trans->status = -EINVAL;
   2bd3e:	f06f 0315 	mvn.w	r3, #21
   2bd42:	e7dd      	b.n	2bd00 <usb_transfer_work+0x30>
		trans->buffer += bytes;
   2bd44:	9a01      	ldr	r2, [sp, #4]
   2bd46:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2bd4a:	4413      	add	r3, r2
   2bd4c:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   2bd50:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2bd54:	1a9b      	subs	r3, r3, r2
   2bd56:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   2bd5a:	f854 3c24 	ldr.w	r3, [r4, #-36]
   2bd5e:	4413      	add	r3, r2
   2bd60:	f844 3c24 	str.w	r3, [r4, #-36]
   2bd64:	e7ce      	b.n	2bd04 <usb_transfer_work+0x34>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   2bd66:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   2bd6a:	ab01      	add	r3, sp, #4
   2bd6c:	4628      	mov	r0, r5
   2bd6e:	f018 ff99 	bl	44ca4 <usb_dc_ep_read_wait>
		if (ret) {
   2bd72:	2800      	cmp	r0, #0
   2bd74:	d1e3      	bne.n	2bd3e <usb_transfer_work+0x6e>
		trans->buffer += bytes;
   2bd76:	9e01      	ldr	r6, [sp, #4]
   2bd78:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2bd7c:	4433      	add	r3, r6
   2bd7e:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   2bd82:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2bd86:	1b9b      	subs	r3, r3, r6
   2bd88:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   2bd8c:	f854 3c24 	ldr.w	r3, [r4, #-36]
   2bd90:	4433      	add	r3, r6
   2bd92:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   2bd96:	2e00      	cmp	r6, #0
   2bd98:	d0b1      	beq.n	2bcfe <usb_transfer_work+0x2e>
   2bd9a:	4628      	mov	r0, r5
   2bd9c:	f019 f82a 	bl	44df4 <usb_dc_ep_mps>
   2bda0:	fbb6 f3f0 	udiv	r3, r6, r0
   2bda4:	fb03 6010 	mls	r0, r3, r0, r6
   2bda8:	2800      	cmp	r0, #0
   2bdaa:	d1a8      	bne.n	2bcfe <usb_transfer_work+0x2e>
   2bdac:	f854 3c28 	ldr.w	r3, [r4, #-40]
   2bdb0:	2b00      	cmp	r3, #0
   2bdb2:	d0a4      	beq.n	2bcfe <usb_transfer_work+0x2e>
		usb_dc_ep_read_continue(ep);
   2bdb4:	4628      	mov	r0, r5
   2bdb6:	f018 ffc1 	bl	44d3c <usb_dc_ep_read_continue>
   2bdba:	e7a3      	b.n	2bd04 <usb_transfer_work+0x34>
		trans->cb = NULL;
   2bdbc:	f844 0c20 	str.w	r0, [r4, #-32]
	z_impl_k_sem_give(sem);
   2bdc0:	f1a4 0018 	sub.w	r0, r4, #24
   2bdc4:	f01c fd78 	bl	488b8 <z_impl_k_sem_give>
		if (trans->status != -ECANCELED) {
   2bdc8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2bdcc:	338c      	adds	r3, #140	; 0x8c
   2bdce:	d0ac      	beq.n	2bd2a <usb_transfer_work+0x5a>
			cb(ep, tsize, priv);
   2bdd0:	4642      	mov	r2, r8
   2bdd2:	4639      	mov	r1, r7
   2bdd4:	4628      	mov	r0, r5
   2bdd6:	47b0      	blx	r6
   2bdd8:	e7a7      	b.n	2bd2a <usb_transfer_work+0x5a>
   2bdda:	bf00      	nop
   2bddc:	20003b08 	.word	0x20003b08

0002bde0 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
   2bde0:	b510      	push	{r4, lr}
   2bde2:	f04f 0320 	mov.w	r3, #32
   2bde6:	f3ef 8411 	mrs	r4, BASEPRI
   2bdea:	f383 8812 	msr	BASEPRI_MAX, r3
   2bdee:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   2bdf2:	f7ff ff57 	bl	2bca4 <usb_ep_get_transfer>
	if (!trans) {
   2bdf6:	b150      	cbz	r0, 2be0e <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
   2bdf8:	6843      	ldr	r3, [r0, #4]
   2bdfa:	3310      	adds	r3, #16
   2bdfc:	d107      	bne.n	2be0e <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
   2bdfe:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   2be02:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2be04:	f100 0134 	add.w	r1, r0, #52	; 0x34
   2be08:	4803      	ldr	r0, [pc, #12]	; (2be18 <usb_cancel_transfer+0x38>)
   2be0a:	f025 f9b9 	bl	51180 <k_work_submit_to_queue>
	__asm__ volatile(
   2be0e:	f384 8811 	msr	BASEPRI, r4
   2be12:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
   2be16:	bd10      	pop	{r4, pc}
   2be18:	20003b08 	.word	0x20003b08

0002be1c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   2be1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2be20:	4c10      	ldr	r4, [pc, #64]	; (2be64 <usb_cancel_transfers+0x48>)

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2be22:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2be68 <usb_cancel_transfers+0x4c>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2be26:	2500      	movs	r5, #0
			trans->status = -ECANCELED;
   2be28:	f06f 078b 	mvn.w	r7, #139	; 0x8b
	__asm__ volatile(
   2be2c:	f04f 0320 	mov.w	r3, #32
   2be30:	f3ef 8611 	mrs	r6, BASEPRI
   2be34:	f383 8812 	msr	BASEPRI_MAX, r3
   2be38:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
   2be3c:	6863      	ldr	r3, [r4, #4]
   2be3e:	3310      	adds	r3, #16
   2be40:	d105      	bne.n	2be4e <usb_cancel_transfers+0x32>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2be42:	f104 0134 	add.w	r1, r4, #52	; 0x34
   2be46:	4640      	mov	r0, r8
			trans->status = -ECANCELED;
   2be48:	6067      	str	r7, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   2be4a:	f025 f999 	bl	51180 <k_work_submit_to_queue>
	__asm__ volatile(
   2be4e:	f386 8811 	msr	BASEPRI, r6
   2be52:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2be56:	3501      	adds	r5, #1
   2be58:	2d04      	cmp	r5, #4
   2be5a:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2be5e:	d1e5      	bne.n	2be2c <usb_cancel_transfers+0x10>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   2be60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2be64:	20003e08 	.word	0x20003e08
   2be68:	20003b08 	.word	0x20003b08

0002be6c <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   2be6c:	b570      	push	{r4, r5, r6, lr}
   2be6e:	4c0a      	ldr	r4, [pc, #40]	; (2be98 <usb_transfer_init+0x2c>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
   2be70:	4e0a      	ldr	r6, [pc, #40]	; (2be9c <usb_transfer_init+0x30>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2be72:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
   2be74:	4631      	mov	r1, r6
   2be76:	4620      	mov	r0, r4
   2be78:	f025 f97a 	bl	51170 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2be7c:	2201      	movs	r2, #1
   2be7e:	f1a4 0018 	sub.w	r0, r4, #24
   2be82:	4611      	mov	r1, r2
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   2be84:	3501      	adds	r5, #1
   2be86:	f025 f8f2 	bl	5106e <z_impl_k_sem_init>
   2be8a:	2d04      	cmp	r5, #4
   2be8c:	f104 0448 	add.w	r4, r4, #72	; 0x48
   2be90:	d1f0      	bne.n	2be74 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
   2be92:	2000      	movs	r0, #0
   2be94:	bd70      	pop	{r4, r5, r6, pc}
   2be96:	bf00      	nop
   2be98:	20003e3c 	.word	0x20003e3c
   2be9c:	0002bcd1 	.word	0x0002bcd1

0002bea0 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   2bea0:	4b0c      	ldr	r3, [pc, #48]	; (2bed4 <flash_area_open+0x34>)
   2bea2:	681b      	ldr	r3, [r3, #0]
{
   2bea4:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   2bea6:	b173      	cbz	r3, 2bec6 <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   2bea8:	4a0b      	ldr	r2, [pc, #44]	; (2bed8 <flash_area_open+0x38>)
   2beaa:	6815      	ldr	r5, [r2, #0]
   2beac:	2200      	movs	r2, #0
   2beae:	42aa      	cmp	r2, r5
   2beb0:	db02      	blt.n	2beb8 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   2beb2:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   2beb6:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   2beb8:	461c      	mov	r4, r3
   2beba:	f813 6b10 	ldrb.w	r6, [r3], #16
   2bebe:	4286      	cmp	r6, r0
   2bec0:	d004      	beq.n	2becc <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   2bec2:	3201      	adds	r2, #1
   2bec4:	e7f3      	b.n	2beae <flash_area_open+0xe>
		return -EACCES;
   2bec6:	f06f 000c 	mvn.w	r0, #12
   2beca:	e7f4      	b.n	2beb6 <flash_area_open+0x16>
	*fap = area;
   2becc:	600c      	str	r4, [r1, #0]
	return 0;
   2bece:	2000      	movs	r0, #0
   2bed0:	e7f1      	b.n	2beb6 <flash_area_open+0x16>
   2bed2:	bf00      	nop
   2bed4:	200004e0 	.word	0x200004e0
   2bed8:	00052790 	.word	0x00052790

0002bedc <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   2bedc:	b570      	push	{r4, r5, r6, lr}
   2bede:	b088      	sub	sp, #32
   2bee0:	4605      	mov	r5, r0
   2bee2:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   2bee4:	b2c0      	uxtb	r0, r0
   2bee6:	4669      	mov	r1, sp
{
   2bee8:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   2beea:	f7ff ffd9 	bl	2bea0 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   2beee:	2800      	cmp	r0, #0
   2bef0:	db1f      	blt.n	2bf32 <flash_area_get_sectors+0x56>
   2bef2:	9b00      	ldr	r3, [sp, #0]
   2bef4:	b1eb      	cbz	r3, 2bf32 <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   2bef6:	685a      	ldr	r2, [r3, #4]
   2bef8:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   2befa:	689a      	ldr	r2, [r3, #8]
	cb_data->ret_len = *cnt;
   2befc:	6821      	ldr	r1, [r4, #0]
	cb_data->area_idx = idx;
   2befe:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   2bf00:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   2bf04:	2200      	movs	r2, #0
   2bf06:	9205      	str	r2, [sp, #20]
	cb_data->status = 0;
   2bf08:	e9cd 1206 	strd	r1, r2, [sp, #24]
	flash_dev = device_get_binding(fa->fa_dev_name);
   2bf0c:	68d8      	ldr	r0, [r3, #12]
   2bf0e:	f01c f901 	bl	48114 <z_impl_device_get_binding>
   2bf12:	4605      	mov	r5, r0
	flash_area_close(fa);
   2bf14:	9800      	ldr	r0, [sp, #0]
   2bf16:	f01e fec8 	bl	4acaa <flash_area_close>
	if (flash_dev == NULL) {
   2bf1a:	b16d      	cbz	r5, 2bf38 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   2bf1c:	4628      	mov	r0, r5
   2bf1e:	aa01      	add	r2, sp, #4
   2bf20:	4907      	ldr	r1, [pc, #28]	; (2bf40 <flash_area_get_sectors+0x64>)
   2bf22:	f024 fb83 	bl	5062c <flash_page_foreach>
	if (cb_data->status == 0) {
   2bf26:	9807      	ldr	r0, [sp, #28]
   2bf28:	b908      	cbnz	r0, 2bf2e <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   2bf2a:	9b05      	ldr	r3, [sp, #20]
   2bf2c:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   2bf2e:	b008      	add	sp, #32
   2bf30:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2bf32:	f06f 0015 	mvn.w	r0, #21
   2bf36:	e7fa      	b.n	2bf2e <flash_area_get_sectors+0x52>
		return -ENODEV;
   2bf38:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   2bf3c:	e7f7      	b.n	2bf2e <flash_area_get_sectors+0x52>
   2bf3e:	bf00      	nop
   2bf40:	0004acad 	.word	0x0004acad

0002bf44 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   2bf44:	4b0f      	ldr	r3, [pc, #60]	; (2bf84 <settings_save_one+0x40>)
{
   2bf46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   2bf4a:	681c      	ldr	r4, [r3, #0]
{
   2bf4c:	4606      	mov	r6, r0
   2bf4e:	460f      	mov	r7, r1
   2bf50:	4690      	mov	r8, r2
	if (!cs) {
   2bf52:	b1a4      	cbz	r4, 2bf7e <settings_save_one+0x3a>
	return z_impl_k_mutex_lock(mutex, timeout);
   2bf54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bf58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bf5c:	480a      	ldr	r0, [pc, #40]	; (2bf88 <settings_save_one+0x44>)
   2bf5e:	f01c fbb5 	bl	486cc <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   2bf62:	6863      	ldr	r3, [r4, #4]
   2bf64:	463a      	mov	r2, r7
   2bf66:	689d      	ldr	r5, [r3, #8]
   2bf68:	4631      	mov	r1, r6
   2bf6a:	4643      	mov	r3, r8
   2bf6c:	4620      	mov	r0, r4
   2bf6e:	47a8      	blx	r5
   2bf70:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2bf72:	4805      	ldr	r0, [pc, #20]	; (2bf88 <settings_save_one+0x44>)
   2bf74:	f01c fc28 	bl	487c8 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   2bf78:	4620      	mov	r0, r4
   2bf7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   2bf7e:	f06f 0401 	mvn.w	r4, #1
   2bf82:	e7f9      	b.n	2bf78 <settings_save_one+0x34>
   2bf84:	20003f30 	.word	0x20003f30
   2bf88:	20000ee4 	.word	0x20000ee4

0002bf8c <settings_src_register>:
	parent->next = child;
   2bf8c:	2300      	movs	r3, #0
   2bf8e:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   2bf90:	4b04      	ldr	r3, [pc, #16]	; (2bfa4 <settings_src_register+0x18>)
   2bf92:	685a      	ldr	r2, [r3, #4]
   2bf94:	b912      	cbnz	r2, 2bf9c <settings_src_register+0x10>
	list->head = node;
   2bf96:	e9c3 0000 	strd	r0, r0, [r3]
   2bf9a:	4770      	bx	lr
	parent->next = child;
   2bf9c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2bf9e:	6058      	str	r0, [r3, #4]
}
   2bfa0:	4770      	bx	lr
   2bfa2:	bf00      	nop
   2bfa4:	20003f28 	.word	0x20003f28

0002bfa8 <settings_dst_register>:
	settings_save_dst = cs;
   2bfa8:	4b01      	ldr	r3, [pc, #4]	; (2bfb0 <settings_dst_register+0x8>)
   2bfaa:	6018      	str	r0, [r3, #0]
}
   2bfac:	4770      	bx	lr
   2bfae:	bf00      	nop
   2bfb0:	20003f30 	.word	0x20003f30

0002bfb4 <settings_load_subtree>:
{
   2bfb4:	b530      	push	{r4, r5, lr}
   2bfb6:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   2bfb8:	2300      	movs	r3, #0
{
   2bfba:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   2bfbc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2bfc0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2bfc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bfc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bfca:	480b      	ldr	r0, [pc, #44]	; (2bff8 <settings_load_subtree+0x44>)
   2bfcc:	f01c fb7e 	bl	486cc <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2bfd0:	4b0a      	ldr	r3, [pc, #40]	; (2bffc <settings_load_subtree+0x48>)
   2bfd2:	681c      	ldr	r4, [r3, #0]
   2bfd4:	b134      	cbz	r4, 2bfe4 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   2bfd6:	6863      	ldr	r3, [r4, #4]
   2bfd8:	4620      	mov	r0, r4
   2bfda:	681b      	ldr	r3, [r3, #0]
   2bfdc:	a901      	add	r1, sp, #4
   2bfde:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2bfe0:	6824      	ldr	r4, [r4, #0]
	return node->next;
   2bfe2:	e7f7      	b.n	2bfd4 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   2bfe4:	4628      	mov	r0, r5
   2bfe6:	f000 f8c1 	bl	2c16c <settings_commit_subtree>
   2bfea:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2bfec:	4802      	ldr	r0, [pc, #8]	; (2bff8 <settings_load_subtree+0x44>)
   2bfee:	f01c fbeb 	bl	487c8 <z_impl_k_mutex_unlock>
}
   2bff2:	4620      	mov	r0, r4
   2bff4:	b005      	add	sp, #20
   2bff6:	bd30      	pop	{r4, r5, pc}
   2bff8:	20000ee4 	.word	0x20000ee4
   2bffc:	20003f28 	.word	0x20003f28

0002c000 <settings_load_subtree_direct>:
{
   2c000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   2c002:	e9cd 0101 	strd	r0, r1, [sp, #4]
   2c006:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   2c008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c00c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c010:	4809      	ldr	r0, [pc, #36]	; (2c038 <settings_load_subtree_direct+0x38>)
   2c012:	f01c fb5b 	bl	486cc <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2c016:	4b09      	ldr	r3, [pc, #36]	; (2c03c <settings_load_subtree_direct+0x3c>)
   2c018:	681c      	ldr	r4, [r3, #0]
   2c01a:	b134      	cbz	r4, 2c02a <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
   2c01c:	6863      	ldr	r3, [r4, #4]
   2c01e:	4620      	mov	r0, r4
   2c020:	681b      	ldr	r3, [r3, #0]
   2c022:	a901      	add	r1, sp, #4
   2c024:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2c026:	6824      	ldr	r4, [r4, #0]
	return node->next;
   2c028:	e7f7      	b.n	2c01a <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
   2c02a:	4803      	ldr	r0, [pc, #12]	; (2c038 <settings_load_subtree_direct+0x38>)
   2c02c:	f01c fbcc 	bl	487c8 <z_impl_k_mutex_unlock>
}
   2c030:	2000      	movs	r0, #0
   2c032:	b004      	add	sp, #16
   2c034:	bd10      	pop	{r4, pc}
   2c036:	bf00      	nop
   2c038:	20000ee4 	.word	0x20000ee4
   2c03c:	20003f28 	.word	0x20003f28

0002c040 <settings_store_init>:
	list->head = NULL;
   2c040:	4b02      	ldr	r3, [pc, #8]	; (2c04c <settings_store_init+0xc>)
   2c042:	2200      	movs	r2, #0
	list->tail = NULL;
   2c044:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   2c048:	4770      	bx	lr
   2c04a:	bf00      	nop
   2c04c:	20003f28 	.word	0x20003f28

0002c050 <settings_init>:
	list->head = NULL;
   2c050:	4b02      	ldr	r3, [pc, #8]	; (2c05c <settings_init+0xc>)
   2c052:	2200      	movs	r2, #0
	list->tail = NULL;
   2c054:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   2c058:	f7ff bff2 	b.w	2c040 <settings_store_init>
   2c05c:	20003f34 	.word	0x20003f34

0002c060 <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   2c060:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c062:	4c1b      	ldr	r4, [pc, #108]	; (2c0d0 <settings_register+0x70>)
   2c064:	4d1b      	ldr	r5, [pc, #108]	; (2c0d4 <settings_register+0x74>)
{
   2c066:	4606      	mov	r6, r0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c068:	42ac      	cmp	r4, r5
   2c06a:	d317      	bcc.n	2c09c <settings_register+0x3c>
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c06c:	4d1a      	ldr	r5, [pc, #104]	; (2c0d8 <settings_register+0x78>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2c06e:	481b      	ldr	r0, [pc, #108]	; (2c0dc <settings_register+0x7c>)
   2c070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c078:	f01c fb28 	bl	486cc <z_impl_k_mutex_lock>
   2c07c:	682c      	ldr	r4, [r5, #0]
   2c07e:	b9a4      	cbnz	r4, 2c0aa <settings_register+0x4a>
Z_GENLIST_APPEND(slist, snode)
   2c080:	686a      	ldr	r2, [r5, #4]
	parent->next = child;
   2c082:	2400      	movs	r4, #0
		if (strcmp(handler->name, ch->name) == 0) {
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   2c084:	f106 0314 	add.w	r3, r6, #20
   2c088:	6174      	str	r4, [r6, #20]
Z_GENLIST_APPEND(slist, snode)
   2c08a:	b9c2      	cbnz	r2, 2c0be <settings_register+0x5e>
	list->head = node;
   2c08c:	e9c5 3300 	strd	r3, r3, [r5]
	int rc = 0;
   2c090:	4614      	mov	r4, r2
	return z_impl_k_mutex_unlock(mutex);
   2c092:	4812      	ldr	r0, [pc, #72]	; (2c0dc <settings_register+0x7c>)
   2c094:	f01c fb98 	bl	487c8 <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   2c098:	4620      	mov	r0, r4
   2c09a:	bd70      	pop	{r4, r5, r6, pc}
		if (strcmp(handler->name, ch->name) == 0) {
   2c09c:	6821      	ldr	r1, [r4, #0]
   2c09e:	6830      	ldr	r0, [r6, #0]
   2c0a0:	f020 f8f9 	bl	4c296 <strcmp>
   2c0a4:	b188      	cbz	r0, 2c0ca <settings_register+0x6a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c0a6:	3414      	adds	r4, #20
   2c0a8:	e7de      	b.n	2c068 <settings_register+0x8>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c0aa:	3c14      	subs	r4, #20
   2c0ac:	2c00      	cmp	r4, #0
   2c0ae:	d0e7      	beq.n	2c080 <settings_register+0x20>
		if (strcmp(handler->name, ch->name) == 0) {
   2c0b0:	6821      	ldr	r1, [r4, #0]
   2c0b2:	6830      	ldr	r0, [r6, #0]
   2c0b4:	f020 f8ef 	bl	4c296 <strcmp>
   2c0b8:	b120      	cbz	r0, 2c0c4 <settings_register+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2c0ba:	6964      	ldr	r4, [r4, #20]
	return node->next;
   2c0bc:	e7df      	b.n	2c07e <settings_register+0x1e>
	parent->next = child;
   2c0be:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2c0c0:	606b      	str	r3, [r5, #4]
   2c0c2:	e7e6      	b.n	2c092 <settings_register+0x32>
			rc = -EEXIST;
   2c0c4:	f06f 0410 	mvn.w	r4, #16
   2c0c8:	e7e3      	b.n	2c092 <settings_register+0x32>
			return -EEXIST;
   2c0ca:	f06f 0410 	mvn.w	r4, #16
   2c0ce:	e7e3      	b.n	2c098 <settings_register+0x38>
   2c0d0:	00051cb8 	.word	0x00051cb8
   2c0d4:	00051d30 	.word	0x00051d30
   2c0d8:	20003f34 	.word	0x20003f34
   2c0dc:	20000ee4 	.word	0x20000ee4

0002c0e0 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   2c0e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2c0e4:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   2c0e6:	460e      	mov	r6, r1
   2c0e8:	b109      	cbz	r1, 2c0ee <settings_parse_and_lookup+0xe>
		*next = NULL;
   2c0ea:	2300      	movs	r3, #0
   2c0ec:	600b      	str	r3, [r1, #0]
   2c0ee:	4c1c      	ldr	r4, [pc, #112]	; (2c160 <settings_parse_and_lookup+0x80>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c0f0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2c168 <settings_parse_and_lookup+0x88>
   2c0f4:	2500      	movs	r5, #0
   2c0f6:	4544      	cmp	r4, r8
   2c0f8:	d308      	bcc.n	2c10c <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c0fa:	4b1a      	ldr	r3, [pc, #104]	; (2c164 <settings_parse_and_lookup+0x84>)
   2c0fc:	681c      	ldr	r4, [r3, #0]
   2c0fe:	b10c      	cbz	r4, 2c104 <settings_parse_and_lookup+0x24>
   2c100:	3c14      	subs	r4, #20
   2c102:	b9c4      	cbnz	r4, 2c136 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   2c104:	4628      	mov	r0, r5
   2c106:	b002      	add	sp, #8
   2c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2c10c:	aa01      	add	r2, sp, #4
   2c10e:	6821      	ldr	r1, [r4, #0]
   2c110:	4638      	mov	r0, r7
   2c112:	f01e fded 	bl	4acf0 <settings_name_steq>
   2c116:	b160      	cbz	r0, 2c132 <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
   2c118:	b925      	cbnz	r5, 2c124 <settings_parse_and_lookup+0x44>
			if (next) {
   2c11a:	b10e      	cbz	r6, 2c120 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
   2c11c:	9b01      	ldr	r3, [sp, #4]
   2c11e:	6033      	str	r3, [r6, #0]
   2c120:	4625      	mov	r5, r4
   2c122:	e006      	b.n	2c132 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2c124:	2200      	movs	r2, #0
   2c126:	6829      	ldr	r1, [r5, #0]
   2c128:	6820      	ldr	r0, [r4, #0]
   2c12a:	f01e fde1 	bl	4acf0 <settings_name_steq>
   2c12e:	2800      	cmp	r0, #0
   2c130:	d1f3      	bne.n	2c11a <settings_parse_and_lookup+0x3a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c132:	3414      	adds	r4, #20
   2c134:	e7df      	b.n	2c0f6 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2c136:	aa01      	add	r2, sp, #4
   2c138:	6821      	ldr	r1, [r4, #0]
   2c13a:	4638      	mov	r0, r7
   2c13c:	f01e fdd8 	bl	4acf0 <settings_name_steq>
   2c140:	b160      	cbz	r0, 2c15c <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   2c142:	b925      	cbnz	r5, 2c14e <settings_parse_and_lookup+0x6e>
			if (next) {
   2c144:	b10e      	cbz	r6, 2c14a <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   2c146:	9b01      	ldr	r3, [sp, #4]
   2c148:	6033      	str	r3, [r6, #0]
   2c14a:	4625      	mov	r5, r4
   2c14c:	e006      	b.n	2c15c <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2c14e:	2200      	movs	r2, #0
   2c150:	6829      	ldr	r1, [r5, #0]
   2c152:	6820      	ldr	r0, [r4, #0]
   2c154:	f01e fdcc 	bl	4acf0 <settings_name_steq>
   2c158:	2800      	cmp	r0, #0
   2c15a:	d1f3      	bne.n	2c144 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2c15c:	6964      	ldr	r4, [r4, #20]
   2c15e:	e7ce      	b.n	2c0fe <settings_parse_and_lookup+0x1e>
   2c160:	00051cb8 	.word	0x00051cb8
   2c164:	20003f34 	.word	0x20003f34
   2c168:	00051d30 	.word	0x00051d30

0002c16c <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   2c16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c16e:	4c18      	ldr	r4, [pc, #96]	; (2c1d0 <settings_commit_subtree+0x64>)
   2c170:	4f18      	ldr	r7, [pc, #96]	; (2c1d4 <settings_commit_subtree+0x68>)
{
   2c172:	4606      	mov	r6, r0
	rc = 0;
   2c174:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c176:	42bc      	cmp	r4, r7
   2c178:	d306      	bcc.n	2c188 <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2c17a:	4b17      	ldr	r3, [pc, #92]	; (2c1d8 <settings_commit_subtree+0x6c>)
   2c17c:	681c      	ldr	r4, [r3, #0]
   2c17e:	b10c      	cbz	r4, 2c184 <settings_commit_subtree+0x18>
   2c180:	3c14      	subs	r4, #20
   2c182:	b99c      	cbnz	r4, 2c1ac <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   2c184:	4628      	mov	r0, r5
   2c186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2c188:	b91e      	cbnz	r6, 2c192 <settings_commit_subtree+0x26>
		if (ch->h_commit) {
   2c18a:	68e3      	ldr	r3, [r4, #12]
   2c18c:	b94b      	cbnz	r3, 2c1a2 <settings_commit_subtree+0x36>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2c18e:	3414      	adds	r4, #20
   2c190:	e7f1      	b.n	2c176 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2c192:	2200      	movs	r2, #0
   2c194:	4631      	mov	r1, r6
   2c196:	6820      	ldr	r0, [r4, #0]
   2c198:	f01e fdaa 	bl	4acf0 <settings_name_steq>
   2c19c:	2800      	cmp	r0, #0
   2c19e:	d1f4      	bne.n	2c18a <settings_commit_subtree+0x1e>
   2c1a0:	e7f5      	b.n	2c18e <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
   2c1a2:	4798      	blx	r3
				rc = rc2;
   2c1a4:	2d00      	cmp	r5, #0
   2c1a6:	bf08      	it	eq
   2c1a8:	4605      	moveq	r5, r0
   2c1aa:	e7f0      	b.n	2c18e <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2c1ac:	b91e      	cbnz	r6, 2c1b6 <settings_commit_subtree+0x4a>
		if (ch->h_commit) {
   2c1ae:	68e3      	ldr	r3, [r4, #12]
   2c1b0:	b94b      	cbnz	r3, 2c1c6 <settings_commit_subtree+0x5a>
   2c1b2:	6964      	ldr	r4, [r4, #20]
   2c1b4:	e7e3      	b.n	2c17e <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2c1b6:	2200      	movs	r2, #0
   2c1b8:	4631      	mov	r1, r6
   2c1ba:	6820      	ldr	r0, [r4, #0]
   2c1bc:	f01e fd98 	bl	4acf0 <settings_name_steq>
   2c1c0:	2800      	cmp	r0, #0
   2c1c2:	d1f4      	bne.n	2c1ae <settings_commit_subtree+0x42>
   2c1c4:	e7f5      	b.n	2c1b2 <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
   2c1c6:	4798      	blx	r3
				rc = rc2;
   2c1c8:	2d00      	cmp	r5, #0
   2c1ca:	bf08      	it	eq
   2c1cc:	4605      	moveq	r5, r0
   2c1ce:	e7f0      	b.n	2c1b2 <settings_commit_subtree+0x46>
   2c1d0:	00051cb8 	.word	0x00051cb8
   2c1d4:	00051d30 	.word	0x00051d30
   2c1d8:	20003f34 	.word	0x20003f34

0002c1dc <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   2c1dc:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   2c1de:	4c06      	ldr	r4, [pc, #24]	; (2c1f8 <settings_subsys_init+0x1c>)
   2c1e0:	7823      	ldrb	r3, [r4, #0]
   2c1e2:	b93b      	cbnz	r3, 2c1f4 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   2c1e4:	f7ff ff34 	bl	2c050 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   2c1e8:	f000 f864 	bl	2c2b4 <settings_backend_init>

	if (!err) {
   2c1ec:	b908      	cbnz	r0, 2c1f2 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   2c1ee:	2301      	movs	r3, #1
   2c1f0:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   2c1f2:	bd10      	pop	{r4, pc}
		return 0;
   2c1f4:	2000      	movs	r0, #0
   2c1f6:	e7fc      	b.n	2c1f2 <settings_subsys_init+0x16>
   2c1f8:	20006cf0 	.word	0x20006cf0

0002c1fc <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   2c1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   2c200:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
   2c202:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 2c2b0 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
   2c206:	3401      	adds	r4, #1
{
   2c208:	b098      	sub	sp, #96	; 0x60
   2c20a:	4680      	mov	r8, r0
   2c20c:	468a      	mov	sl, r1
	name_id = cf->last_name_id + 1;
   2c20e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   2c210:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   2c214:	1e65      	subs	r5, r4, #1
   2c216:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   2c218:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2c21c:	d045      	beq.n	2c2aa <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   2c21e:	234a      	movs	r3, #74	; 0x4a
   2c220:	aa05      	add	r2, sp, #20
   2c222:	4629      	mov	r1, r5
   2c224:	4630      	mov	r0, r6
   2c226:	f01e fcf3 	bl	4ac10 <nvs_read>
   2c22a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   2c22e:	343f      	adds	r4, #63	; 0x3f
   2c230:	b2a4      	uxth	r4, r4
   2c232:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   2c234:	4621      	mov	r1, r4
   2c236:	2301      	movs	r3, #1
   2c238:	f10d 020b 	add.w	r2, sp, #11
   2c23c:	4630      	mov	r0, r6
   2c23e:	f01e fce7 	bl	4ac10 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   2c242:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   2c244:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   2c246:	dc03      	bgt.n	2c250 <settings_nvs_load+0x54>
   2c248:	2800      	cmp	r0, #0
   2c24a:	dc03      	bgt.n	2c254 <settings_nvs_load+0x58>
{
   2c24c:	462c      	mov	r4, r5
   2c24e:	e7e1      	b.n	2c214 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   2c250:	2800      	cmp	r0, #0
   2c252:	dc16      	bgt.n	2c282 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   2c254:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   2c258:	42ab      	cmp	r3, r5
   2c25a:	d109      	bne.n	2c270 <settings_nvs_load+0x74>
				cf->last_name_id--;
   2c25c:	4642      	mov	r2, r8
   2c25e:	1e6b      	subs	r3, r5, #1
   2c260:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2c264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2c268:	2302      	movs	r3, #2
   2c26a:	4630      	mov	r0, r6
   2c26c:	f7fe ff02 	bl	2b074 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   2c270:	4629      	mov	r1, r5
   2c272:	4630      	mov	r0, r6
   2c274:	f01e fc74 	bl	4ab60 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   2c278:	4621      	mov	r1, r4
   2c27a:	4630      	mov	r0, r6
   2c27c:	f01e fc70 	bl	4ab60 <nvs_delete>
			continue;
   2c280:	e7e4      	b.n	2c24c <settings_nvs_load+0x50>
		name[rc1] = '\0';
   2c282:	ab18      	add	r3, sp, #96	; 0x60
   2c284:	441f      	add	r7, r3
   2c286:	2300      	movs	r3, #0
   2c288:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   2c28c:	464a      	mov	r2, r9
   2c28e:	f8cd a000 	str.w	sl, [sp]
   2c292:	ab03      	add	r3, sp, #12
   2c294:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   2c296:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   2c298:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   2c29c:	f01e fd5e 	bl	4ad5c <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   2c2a0:	2800      	cmp	r0, #0
   2c2a2:	d0d3      	beq.n	2c24c <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   2c2a4:	b018      	add	sp, #96	; 0x60
   2c2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c2aa:	2000      	movs	r0, #0
	return ret;
   2c2ac:	e7fa      	b.n	2c2a4 <settings_nvs_load+0xa8>
   2c2ae:	bf00      	nop
   2c2b0:	0004adb9 	.word	0x0004adb9

0002c2b4 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   2c2b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   2c2b6:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   2c2b8:	4669      	mov	r1, sp
   2c2ba:	2002      	movs	r0, #2
	uint32_t sector_cnt = 1;
   2c2bc:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
   2c2be:	f7ff fdef 	bl	2bea0 <flash_area_open>
	if (rc) {
   2c2c2:	4604      	mov	r4, r0
   2c2c4:	2800      	cmp	r0, #0
   2c2c6:	d137      	bne.n	2c338 <settings_backend_init+0x84>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   2c2c8:	aa02      	add	r2, sp, #8
   2c2ca:	a901      	add	r1, sp, #4
   2c2cc:	2002      	movs	r0, #2
   2c2ce:	f7ff fe05 	bl	2bedc <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   2c2d2:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
   2c2d6:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   2c2d8:	d02e      	beq.n	2c338 <settings_backend_init+0x84>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   2c2da:	b140      	cbz	r0, 2c2ee <settings_backend_init+0x3a>
   2c2dc:	f110 040c 	adds.w	r4, r0, #12
   2c2e0:	d005      	beq.n	2c2ee <settings_backend_init+0x3a>
		k_panic();
   2c2e2:	4040      	eors	r0, r0
   2c2e4:	f380 8811 	msr	BASEPRI, r0
   2c2e8:	f04f 0004 	mov.w	r0, #4
   2c2ec:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   2c2ee:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   2c2f0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   2c2f4:	d223      	bcs.n	2c33e <settings_backend_init+0x8a>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   2c2f6:	9a00      	ldr	r2, [sp, #0]
   2c2f8:	2300      	movs	r3, #0
   2c2fa:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   2c2fc:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   2c2fe:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   2c300:	4285      	cmp	r5, r0
   2c302:	b29c      	uxth	r4, r3
   2c304:	d303      	bcc.n	2c30e <settings_backend_init+0x5a>
			break;
		}
		cnt++;
   2c306:	3301      	adds	r3, #1
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   2c308:	2b08      	cmp	r3, #8
   2c30a:	d1f8      	bne.n	2c2fe <settings_backend_init+0x4a>
   2c30c:	461c      	mov	r4, r3
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   2c30e:	4d0d      	ldr	r5, [pc, #52]	; (2c344 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   2c310:	6853      	ldr	r3, [r2, #4]
   2c312:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   2c314:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   2c316:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   2c318:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   2c31a:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
   2c31c:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   2c31e:	f01e fde2 	bl	4aee6 <settings_nvs_backend_init>
	if (rc) {
   2c322:	4604      	mov	r4, r0
   2c324:	b940      	cbnz	r0, 2c338 <settings_backend_init+0x84>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   2c326:	4e08      	ldr	r6, [pc, #32]	; (2c348 <settings_backend_init+0x94>)
   2c328:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   2c32a:	4628      	mov	r0, r5
   2c32c:	f7ff fe2e 	bl	2bf8c <settings_src_register>
	settings_dst_register(&cf->cf_store);
   2c330:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   2c332:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   2c334:	f7ff fe38 	bl	2bfa8 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   2c338:	4620      	mov	r0, r4
   2c33a:	b004      	add	sp, #16
   2c33c:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
   2c33e:	f06f 0420 	mvn.w	r4, #32
   2c342:	e7f9      	b.n	2c338 <settings_backend_init+0x84>
   2c344:	20003f3c 	.word	0x20003f3c
   2c348:	200004e4 	.word	0x200004e4

0002c34c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   2c34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c350:	4606      	mov	r6, r0
	__asm__ volatile(
   2c352:	f04f 0320 	mov.w	r3, #32
   2c356:	f3ef 8511 	mrs	r5, BASEPRI
   2c35a:	f383 8812 	msr	BASEPRI_MAX, r3
   2c35e:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2c362:	4b0e      	ldr	r3, [pc, #56]	; (2c39c <pm_state_notify+0x50>)
   2c364:	681c      	ldr	r4, [r3, #0]
   2c366:	b19c      	cbz	r4, 2c390 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2c368:	4f0d      	ldr	r7, [pc, #52]	; (2c3a0 <pm_state_notify+0x54>)
   2c36a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2c3a4 <pm_state_notify+0x58>
   2c36e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   2c372:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   2c376:	2e00      	cmp	r6, #0
   2c378:	bf08      	it	eq
   2c37a:	4613      	moveq	r3, r2
		if (callback) {
   2c37c:	b12b      	cbz	r3, 2c38a <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2c37e:	f898 2014 	ldrb.w	r2, [r8, #20]
   2c382:	fb09 f202 	mul.w	r2, r9, r2
   2c386:	5cb8      	ldrb	r0, [r7, r2]
   2c388:	4798      	blx	r3
   2c38a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2c38c:	2c00      	cmp	r4, #0
   2c38e:	d1f0      	bne.n	2c372 <pm_state_notify+0x26>
	__asm__ volatile(
   2c390:	f385 8811 	msr	BASEPRI, r5
   2c394:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   2c398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2c39c:	20003f80 	.word	0x20003f80
   2c3a0:	20003f88 	.word	0x20003f88
   2c3a4:	20006b30 	.word	0x20006b30

0002c3a8 <pm_resume_devices>:
{
   2c3a8:	b570      	push	{r4, r5, r6, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
   2c3aa:	4d08      	ldr	r5, [pc, #32]	; (2c3cc <pm_resume_devices+0x24>)
		pm_device_action_run(__pm_device_slots_start[i],
   2c3ac:	4e08      	ldr	r6, [pc, #32]	; (2c3d0 <pm_resume_devices+0x28>)
	for (int i = (num_susp - 1); i >= 0; i--) {
   2c3ae:	682c      	ldr	r4, [r5, #0]
   2c3b0:	3c01      	subs	r4, #1
   2c3b2:	2c00      	cmp	r4, #0
   2c3b4:	da02      	bge.n	2c3bc <pm_resume_devices+0x14>
	num_susp = 0;
   2c3b6:	2300      	movs	r3, #0
   2c3b8:	602b      	str	r3, [r5, #0]
}
   2c3ba:	bd70      	pop	{r4, r5, r6, pc}
		pm_device_action_run(__pm_device_slots_start[i],
   2c3bc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   2c3c0:	2101      	movs	r1, #1
   2c3c2:	f01e fdca 	bl	4af5a <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
   2c3c6:	3c01      	subs	r4, #1
   2c3c8:	e7f3      	b.n	2c3b2 <pm_resume_devices+0xa>
   2c3ca:	bf00      	nop
   2c3cc:	20003f7c 	.word	0x20003f7c
   2c3d0:	20000dec 	.word	0x20000dec

0002c3d4 <atomic_clear_bit.constprop.12>:
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c3d4:	0941      	lsrs	r1, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c3d6:	f000 021f 	and.w	r2, r0, #31
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c3da:	4b09      	ldr	r3, [pc, #36]	; (2c400 <atomic_clear_bit.constprop.12+0x2c>)
   2c3dc:	f3bf 8f5b 	dmb	ish
   2c3e0:	2001      	movs	r0, #1
   2c3e2:	4090      	lsls	r0, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c3e4:	43c0      	mvns	r0, r0
   2c3e6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2c3ea:	e853 2f00 	ldrex	r2, [r3]
   2c3ee:	4002      	ands	r2, r0
   2c3f0:	e843 2100 	strex	r1, r2, [r3]
   2c3f4:	2900      	cmp	r1, #0
   2c3f6:	d1f8      	bne.n	2c3ea <atomic_clear_bit.constprop.12+0x16>
   2c3f8:	f3bf 8f5b 	dmb	ish
}
   2c3fc:	4770      	bx	lr
   2c3fe:	bf00      	nop
   2c400:	20003f94 	.word	0x20003f94

0002c404 <pm_system_resume>:

void pm_system_resume(void)
{
   2c404:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   2c406:	4b1d      	ldr	r3, [pc, #116]	; (2c47c <pm_system_resume+0x78>)
   2c408:	7d1d      	ldrb	r5, [r3, #20]
   2c40a:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c40e:	f005 031f 	and.w	r3, r5, #31
   2c412:	2201      	movs	r2, #1
   2c414:	409a      	lsls	r2, r3
   2c416:	4b1a      	ldr	r3, [pc, #104]	; (2c480 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c418:	0969      	lsrs	r1, r5, #5
{
   2c41a:	b085      	sub	sp, #20
   2c41c:	43d0      	mvns	r0, r2
   2c41e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2c422:	e853 1f00 	ldrex	r1, [r3]
   2c426:	ea01 0400 	and.w	r4, r1, r0
   2c42a:	e843 4c00 	strex	ip, r4, [r3]
   2c42e:	f1bc 0f00 	cmp.w	ip, #0
   2c432:	d1f6      	bne.n	2c422 <pm_system_resume+0x1e>
   2c434:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   2c438:	4211      	tst	r1, r2
   2c43a:	d017      	beq.n	2c46c <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
   2c43c:	4c11      	ldr	r4, [pc, #68]	; (2c484 <pm_system_resume+0x80>)
   2c43e:	220c      	movs	r2, #12
   2c440:	fb02 4205 	mla	r2, r2, r5, r4
   2c444:	ca07      	ldmia	r2, {r0, r1, r2}
   2c446:	ab01      	add	r3, sp, #4
   2c448:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   2c44c:	4a0e      	ldr	r2, [pc, #56]	; (2c488 <pm_system_resume+0x84>)
   2c44e:	b17a      	cbz	r2, 2c470 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   2c450:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2c454:	f01f ff7e 	bl	4c354 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   2c458:	2000      	movs	r0, #0
   2c45a:	f7ff ff77 	bl	2c34c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   2c45e:	230c      	movs	r3, #12
   2c460:	436b      	muls	r3, r5
   2c462:	2200      	movs	r2, #0
   2c464:	18e1      	adds	r1, r4, r3
   2c466:	50e2      	str	r2, [r4, r3]
   2c468:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   2c46c:	b005      	add	sp, #20
   2c46e:	bd30      	pop	{r4, r5, pc}
   2c470:	f382 8811 	msr	BASEPRI, r2
   2c474:	f3bf 8f6f 	isb	sy
   2c478:	e7ee      	b.n	2c458 <pm_system_resume+0x54>
   2c47a:	bf00      	nop
   2c47c:	20006b30 	.word	0x20006b30
   2c480:	20003f98 	.word	0x20003f98
   2c484:	20003f88 	.word	0x20003f88
   2c488:	0004c355 	.word	0x0004c355

0002c48c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   2c48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   2c490:	4b6c      	ldr	r3, [pc, #432]	; (2c644 <pm_system_suspend+0x1b8>)
   2c492:	4f6d      	ldr	r7, [pc, #436]	; (2c648 <pm_system_suspend+0x1bc>)
   2c494:	7d1c      	ldrb	r4, [r3, #20]
{
   2c496:	b087      	sub	sp, #28
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2c498:	0963      	lsrs	r3, r4, #5
   2c49a:	009a      	lsls	r2, r3, #2
   2c49c:	9201      	str	r2, [sp, #4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c49e:	4a6b      	ldr	r2, [pc, #428]	; (2c64c <pm_system_suspend+0x1c0>)
   2c4a0:	f3bf 8f5b 	dmb	ish
   2c4a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2c4a8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c4ac:	f004 091f 	and.w	r9, r4, #31
   2c4b0:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   2c4b4:	f013 0f01 	tst.w	r3, #1
{
   2c4b8:	4605      	mov	r5, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   2c4ba:	d10a      	bne.n	2c4d2 <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   2c4bc:	4601      	mov	r1, r0
   2c4be:	4620      	mov	r0, r4
   2c4c0:	f000 f8ea 	bl	2c698 <pm_policy_next_state>
		if (info != NULL) {
   2c4c4:	b128      	cbz	r0, 2c4d2 <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
   2c4c6:	c807      	ldmia	r0, {r0, r1, r2}
   2c4c8:	230c      	movs	r3, #12
   2c4ca:	fb03 7304 	mla	r3, r3, r4, r7
   2c4ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   2c4d2:	230c      	movs	r3, #12
   2c4d4:	4363      	muls	r3, r4
   2c4d6:	18fa      	adds	r2, r7, r3
   2c4d8:	5cfe      	ldrb	r6, [r7, r3]
   2c4da:	b93e      	cbnz	r6, 2c4ec <pm_system_suspend+0x60>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   2c4dc:	4620      	mov	r0, r4
   2c4de:	f7ff ff79 	bl	2c3d4 <atomic_clear_bit.constprop.12>
		ret = false;
   2c4e2:	46b3      	mov	fp, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   2c4e4:	4658      	mov	r0, fp
   2c4e6:	b007      	add	sp, #28
   2c4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ticks != K_TICKS_FOREVER) {
   2c4ec:	1c6b      	adds	r3, r5, #1
   2c4ee:	d00f      	beq.n	2c510 <pm_system_suspend+0x84>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2c4f0:	f8d2 c008 	ldr.w	ip, [r2, #8]
   2c4f4:	4856      	ldr	r0, [pc, #344]	; (2c650 <pm_system_suspend+0x1c4>)
   2c4f6:	4a57      	ldr	r2, [pc, #348]	; (2c654 <pm_system_suspend+0x1c8>)
   2c4f8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2c4fc:	2100      	movs	r1, #0
   2c4fe:	2300      	movs	r3, #0
   2c500:	fbe6 010c 	umlal	r0, r1, r6, ip
   2c504:	f7f9 fdfc 	bl	26100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   2c508:	2101      	movs	r1, #1
   2c50a:	1a28      	subs	r0, r5, r0
   2c50c:	f024 ffdb 	bl	514c6 <z_set_timeout_expiry>
	if ((z_cpus_pm_state[id].state != PM_STATE_RUNTIME_IDLE) &&
   2c510:	230c      	movs	r3, #12
   2c512:	4363      	muls	r3, r4
   2c514:	4d50      	ldr	r5, [pc, #320]	; (2c658 <pm_system_suspend+0x1cc>)
   2c516:	5cfb      	ldrb	r3, [r7, r3]
   2c518:	2b01      	cmp	r3, #1
   2c51a:	ae03      	add	r6, sp, #12
   2c51c:	d01c      	beq.n	2c558 <pm_system_suspend+0xcc>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2c51e:	f3bf 8f5b 	dmb	ish
   2c522:	e855 3f00 	ldrex	r3, [r5]
   2c526:	1e5a      	subs	r2, r3, #1
   2c528:	e845 2100 	strex	r1, r2, [r5]
   2c52c:	2900      	cmp	r1, #0
   2c52e:	d1f8      	bne.n	2c522 <pm_system_suspend+0x96>
   2c530:	f3bf 8f5b 	dmb	ish
   2c534:	2b01      	cmp	r3, #1
   2c536:	d10f      	bne.n	2c558 <pm_system_suspend+0xcc>
	devc = z_device_get_all_static(&devs);
   2c538:	4630      	mov	r0, r6
   2c53a:	f01b fddd 	bl	480f8 <z_device_get_all_static>
	num_susp = 0;
   2c53e:	4a47      	ldr	r2, [pc, #284]	; (2c65c <pm_system_suspend+0x1d0>)
   2c540:	2300      	movs	r3, #0
   2c542:	6013      	str	r3, [r2, #0]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   2c544:	231c      	movs	r3, #28
   2c546:	4343      	muls	r3, r0
   2c548:	9803      	ldr	r0, [sp, #12]
   2c54a:	3b1c      	subs	r3, #28
   2c54c:	eb00 0a03 	add.w	sl, r0, r3
   2c550:	4690      	mov	r8, r2
   2c552:	9a03      	ldr	r2, [sp, #12]
   2c554:	4592      	cmp	sl, r2
   2c556:	d23a      	bcs.n	2c5ce <pm_system_suspend+0x142>
	k_sched_lock();
   2c558:	f01c fc18 	bl	48d8c <k_sched_lock>
	pm_state_notify(true);
   2c55c:	2001      	movs	r0, #1
   2c55e:	f7ff fef5 	bl	2c34c <pm_state_notify>
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c562:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c564:	9a01      	ldr	r2, [sp, #4]
   2c566:	f3bf 8f5b 	dmb	ish
   2c56a:	fa03 f909 	lsl.w	r9, r3, r9
   2c56e:	4b3c      	ldr	r3, [pc, #240]	; (2c660 <pm_system_suspend+0x1d4>)
   2c570:	441a      	add	r2, r3
   2c572:	4692      	mov	sl, r2
   2c574:	e85a 3f00 	ldrex	r3, [sl]
   2c578:	ea43 0309 	orr.w	r3, r3, r9
   2c57c:	e84a 3200 	strex	r2, r3, [sl]
   2c580:	2a00      	cmp	r2, #0
   2c582:	d1f7      	bne.n	2c574 <pm_system_suspend+0xe8>
   2c584:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
   2c588:	230c      	movs	r3, #12
   2c58a:	fb03 7704 	mla	r7, r3, r4, r7
   2c58e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   2c592:	4b34      	ldr	r3, [pc, #208]	; (2c664 <pm_system_suspend+0x1d8>)
   2c594:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   2c598:	b10b      	cbz	r3, 2c59e <pm_system_suspend+0x112>
		pm_power_state_set(info);
   2c59a:	f01f fec8 	bl	4c32e <pm_power_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2c59e:	f3bf 8f5b 	dmb	ish
   2c5a2:	e855 3f00 	ldrex	r3, [r5]
   2c5a6:	1c5a      	adds	r2, r3, #1
   2c5a8:	e845 2100 	strex	r1, r2, [r5]
   2c5ac:	2900      	cmp	r1, #0
   2c5ae:	d1f8      	bne.n	2c5a2 <pm_system_suspend+0x116>
   2c5b0:	f3bf 8f5b 	dmb	ish
	if (atomic_add(&z_cpus_active, 1) == 0) {
   2c5b4:	b90b      	cbnz	r3, 2c5ba <pm_system_suspend+0x12e>
		pm_resume_devices();
   2c5b6:	f7ff fef7 	bl	2c3a8 <pm_resume_devices>
	pm_system_resume();
   2c5ba:	f7ff ff23 	bl	2c404 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   2c5be:	4620      	mov	r0, r4
   2c5c0:	f7ff ff08 	bl	2c3d4 <atomic_clear_bit.constprop.12>
	bool ret = true;
   2c5c4:	f04f 0b01 	mov.w	fp, #1
	k_sched_unlock();
   2c5c8:	f01c fda8 	bl	4911c <k_sched_unlock>
   2c5cc:	e78a      	b.n	2c4e4 <pm_system_suspend+0x58>
		if (pm_device_is_busy(dev) || pm_device_state_is_locked(dev)
   2c5ce:	4650      	mov	r0, sl
   2c5d0:	f01e fcae 	bl	4af30 <pm_device_is_busy>
   2c5d4:	b9e8      	cbnz	r0, 2c612 <pm_system_suspend+0x186>
   2c5d6:	4650      	mov	r0, sl
   2c5d8:	f01e fcb8 	bl	4af4c <pm_device_state_is_locked>
   2c5dc:	b9c8      	cbnz	r0, 2c612 <pm_system_suspend+0x186>
		    || pm_device_wakeup_is_enabled(dev) ||
   2c5de:	4650      	mov	r0, sl
   2c5e0:	f01e fcad 	bl	4af3e <pm_device_wakeup_is_enabled>
   2c5e4:	4683      	mov	fp, r0
   2c5e6:	b9a0      	cbnz	r0, 2c612 <pm_system_suspend+0x186>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
   2c5e8:	4601      	mov	r1, r0
   2c5ea:	4650      	mov	r0, sl
   2c5ec:	f01e fcb5 	bl	4af5a <pm_device_action_run>
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
   2c5f0:	f110 0f86 	cmn.w	r0, #134	; 0x86
   2c5f4:	d00d      	beq.n	2c612 <pm_system_suspend+0x186>
   2c5f6:	f020 0120 	bic.w	r1, r0, #32
   2c5fa:	3178      	adds	r1, #120	; 0x78
   2c5fc:	d009      	beq.n	2c612 <pm_system_suspend+0x186>
		} else if (ret < 0) {
   2c5fe:	2800      	cmp	r0, #0
   2c600:	db0a      	blt.n	2c618 <pm_system_suspend+0x18c>
		__pm_device_slots_start[num_susp] = dev;
   2c602:	f8d8 2000 	ldr.w	r2, [r8]
   2c606:	4b18      	ldr	r3, [pc, #96]	; (2c668 <pm_system_suspend+0x1dc>)
   2c608:	f843 a022 	str.w	sl, [r3, r2, lsl #2]
		num_susp++;
   2c60c:	3201      	adds	r2, #1
   2c60e:	f8c8 2000 	str.w	r2, [r8]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   2c612:	f1aa 0a1c 	sub.w	sl, sl, #28
   2c616:	e79c      	b.n	2c552 <pm_system_suspend+0xc6>
			pm_resume_devices();
   2c618:	f7ff fec6 	bl	2c3a8 <pm_resume_devices>
			z_cpus_pm_state[id].state = PM_STATE_ACTIVE;
   2c61c:	230c      	movs	r3, #12
   2c61e:	4363      	muls	r3, r4
   2c620:	f807 b003 	strb.w	fp, [r7, r3]
   2c624:	f3bf 8f5b 	dmb	ish
   2c628:	e855 3f00 	ldrex	r3, [r5]
   2c62c:	3301      	adds	r3, #1
   2c62e:	e845 3200 	strex	r2, r3, [r5]
   2c632:	2a00      	cmp	r2, #0
   2c634:	d1f8      	bne.n	2c628 <pm_system_suspend+0x19c>
   2c636:	f3bf 8f5b 	dmb	ish
			atomic_clear_bit(z_cpus_pm_state_forced, id);
   2c63a:	4620      	mov	r0, r4
   2c63c:	f7ff feca 	bl	2c3d4 <atomic_clear_bit.constprop.12>
			goto end;
   2c640:	e750      	b.n	2c4e4 <pm_system_suspend+0x58>
   2c642:	bf00      	nop
   2c644:	20006b30 	.word	0x20006b30
   2c648:	20003f88 	.word	0x20003f88
   2c64c:	20003f94 	.word	0x20003f94
   2c650:	000f423f 	.word	0x000f423f
   2c654:	000f4240 	.word	0x000f4240
   2c658:	200004f4 	.word	0x200004f4
   2c65c:	20003f7c 	.word	0x20003f7c
   2c660:	20003f98 	.word	0x20003f98
   2c664:	0004c32f 	.word	0x0004c32f
   2c668:	20000dec 	.word	0x20000dec

0002c66c <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c66c:	4b05      	ldr	r3, [pc, #20]	; (2c684 <pm_constraint_get+0x18>)
   2c66e:	f3bf 8f5b 	dmb	ish
   2c672:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2c676:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
   2c67a:	fab0 f080 	clz	r0, r0
   2c67e:	0940      	lsrs	r0, r0, #5
   2c680:	4770      	bx	lr
   2c682:	bf00      	nop
   2c684:	20003f9c 	.word	0x20003f9c

0002c688 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   2c688:	b908      	cbnz	r0, 2c68e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   2c68a:	4b02      	ldr	r3, [pc, #8]	; (2c694 <pm_state_cpu_get_all+0xc>)
   2c68c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   2c68e:	2000      	movs	r0, #0
   2c690:	4770      	bx	lr
   2c692:	bf00      	nop
   2c694:	00052794 	.word	0x00052794

0002c698 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   2c698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c69c:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   2c69e:	a901      	add	r1, sp, #4
   2c6a0:	f7ff fff2 	bl	2c688 <pm_state_cpu_get_all>
   2c6a4:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2c71c <pm_policy_next_state+0x84>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2c6a8:	3801      	subs	r0, #1
   2c6aa:	b204      	sxth	r4, r0
   2c6ac:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   2c6b0:	f04f 0900 	mov.w	r9, #0
   2c6b4:	1c63      	adds	r3, r4, #1
   2c6b6:	d104      	bne.n	2c6c2 <pm_policy_next_state+0x2a>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   2c6b8:	2500      	movs	r5, #0
}
   2c6ba:	4628      	mov	r0, r5
   2c6bc:	b003      	add	sp, #12
   2c6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   2c6c2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2c6c6:	9a01      	ldr	r2, [sp, #4]
		if (!pm_constraint_get(state->state)) {
   2c6c8:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
		const struct pm_state_info *state = &cpu_states[i];
   2c6cc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
   2c6d0:	f7ff ffcc 	bl	2c66c <pm_constraint_get>
   2c6d4:	b1f8      	cbz	r0, 2c716 <pm_policy_next_state+0x7e>
   2c6d6:	6869      	ldr	r1, [r5, #4]
   2c6d8:	f8df a044 	ldr.w	sl, [pc, #68]	; 2c720 <pm_policy_next_state+0x88>
   2c6dc:	f04f 0b00 	mov.w	fp, #0
   2c6e0:	fbe7 ab01 	umlal	sl, fp, r7, r1
   2c6e4:	4642      	mov	r2, r8
   2c6e6:	464b      	mov	r3, r9
   2c6e8:	4650      	mov	r0, sl
   2c6ea:	4659      	mov	r1, fp
   2c6ec:	f7f9 fd08 	bl	26100 <__aeabi_uldivmod>
   2c6f0:	f8df b02c 	ldr.w	fp, [pc, #44]	; 2c720 <pm_policy_next_state+0x88>
   2c6f4:	68a9      	ldr	r1, [r5, #8]
   2c6f6:	f04f 0c00 	mov.w	ip, #0
   2c6fa:	fbe7 bc01 	umlal	fp, ip, r7, r1
   2c6fe:	4642      	mov	r2, r8
   2c700:	4682      	mov	sl, r0
   2c702:	464b      	mov	r3, r9
   2c704:	4658      	mov	r0, fp
   2c706:	4661      	mov	r1, ip
   2c708:	f7f9 fcfa 	bl	26100 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
   2c70c:	1c72      	adds	r2, r6, #1
   2c70e:	d0d4      	beq.n	2c6ba <pm_policy_next_state+0x22>
		    (ticks >= (min_residency + exit_latency))) {
   2c710:	4482      	add	sl, r0
		if ((ticks == K_TICKS_FOREVER) ||
   2c712:	45b2      	cmp	sl, r6
   2c714:	d9d1      	bls.n	2c6ba <pm_policy_next_state+0x22>
   2c716:	3c01      	subs	r4, #1
   2c718:	b224      	sxth	r4, r4
   2c71a:	e7cb      	b.n	2c6b4 <pm_policy_next_state+0x1c>
   2c71c:	000f4240 	.word	0x000f4240
   2c720:	000f423f 	.word	0x000f423f

0002c724 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   2c724:	4b01      	ldr	r3, [pc, #4]	; (2c72c <uECC_get_rng+0x8>)
   2c726:	6818      	ldr	r0, [r3, #0]
   2c728:	4770      	bx	lr
   2c72a:	bf00      	nop
   2c72c:	200004f8 	.word	0x200004f8

0002c730 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   2c730:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2c732:	2208      	movs	r2, #8
{
   2c734:	b089      	sub	sp, #36	; 0x24
   2c736:	460c      	mov	r4, r1
   2c738:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2c73a:	f01e fe0b 	bl	4b354 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   2c73e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   2c740:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   2c742:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   2c744:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   2c746:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   2c748:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   2c74a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   2c74c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   2c74e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   2c750:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
   2c752:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c754:	2308      	movs	r3, #8
   2c756:	466a      	mov	r2, sp
   2c758:	4669      	mov	r1, sp
   2c75a:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
   2c75c:	e9cd 7701 	strd	r7, r7, [sp, #4]
   2c760:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c762:	f01e fcfc 	bl	4b15e <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c766:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c768:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c76a:	466a      	mov	r2, sp
   2c76c:	4631      	mov	r1, r6
   2c76e:	4630      	mov	r0, r6
   2c770:	f01e fcf5 	bl	4b15e <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   2c774:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c776:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   2c778:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c77a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   2c77c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2c77e:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   2c780:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c782:	4405      	add	r5, r0
	tmp[7] = 0;
   2c784:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c788:	466a      	mov	r2, sp
   2c78a:	2308      	movs	r3, #8
   2c78c:	4669      	mov	r1, sp
   2c78e:	4668      	mov	r0, sp
   2c790:	f01e fce5 	bl	4b15e <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c794:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2c796:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c798:	2308      	movs	r3, #8
   2c79a:	466a      	mov	r2, sp
   2c79c:	4630      	mov	r0, r6
   2c79e:	f01e fcde 	bl	4b15e <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   2c7a2:	6a23      	ldr	r3, [r4, #32]
   2c7a4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   2c7a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c7a8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   2c7aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c7ac:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   2c7ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2c7b0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   2c7b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2c7b4:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c7b6:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c7b8:	2308      	movs	r3, #8
   2c7ba:	466a      	mov	r2, sp
   2c7bc:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2c7be:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2c7c2:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c7c4:	f01e fccb 	bl	4b15e <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   2c7c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c7ca:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   2c7cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   2c7ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
   2c7d0:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   2c7d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c7d4:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
   2c7d6:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
   2c7d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
   2c7da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   2c7dc:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
   2c7de:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
   2c7e2:	6a23      	ldr	r3, [r4, #32]
   2c7e4:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c7e6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c7e8:	2308      	movs	r3, #8
   2c7ea:	466a      	mov	r2, sp
   2c7ec:	4630      	mov	r0, r6
   2c7ee:	f01e fcb6 	bl	4b15e <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   2c7f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c7f4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   2c7f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c7f8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   2c7fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c7fc:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   2c7fe:	6a23      	ldr	r3, [r4, #32]
   2c800:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   2c802:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c804:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2c806:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c808:	2308      	movs	r3, #8
   2c80a:	466a      	mov	r2, sp
   2c80c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   2c80e:	e9cd 7704 	strd	r7, r7, [sp, #16]
   2c812:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c814:	f01e fdd1 	bl	4b3ba <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   2c818:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c81a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   2c81c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c81e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   2c820:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2c822:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   2c824:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2c826:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   2c828:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c82a:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   2c82c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2c82e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c830:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c832:	2308      	movs	r3, #8
   2c834:	466a      	mov	r2, sp
   2c836:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   2c838:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c83c:	f01e fdbd 	bl	4b3ba <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   2c840:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c842:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   2c844:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2c846:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   2c848:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2c84a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   2c84c:	6a23      	ldr	r3, [r4, #32]
   2c84e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   2c850:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c852:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   2c854:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   2c856:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   2c85a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2c85c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c85e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c860:	2308      	movs	r3, #8
   2c862:	466a      	mov	r2, sp
   2c864:	4630      	mov	r0, r6
   2c866:	f01e fda8 	bl	4b3ba <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   2c86a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2c86c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   2c86e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   2c870:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   2c874:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c876:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   2c878:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2c87a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   2c87c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   2c87e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   2c882:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2c884:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c886:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2c888:	2308      	movs	r3, #8
   2c88a:	466a      	mov	r2, sp
   2c88c:	4630      	mov	r0, r6
   2c88e:	f01e fd94 	bl	4b3ba <uECC_vli_sub>

	if (carry < 0) {
   2c892:	1a2d      	subs	r5, r5, r0
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2c894:	4c0d      	ldr	r4, [pc, #52]	; (2c8cc <vli_mmod_fast_secp256r1+0x19c>)
	if (carry < 0) {
   2c896:	d40f      	bmi.n	2c8b8 <vli_mmod_fast_secp256r1+0x188>
		}
		while (carry < 0);
	} else  {
		while (carry || 
   2c898:	b935      	cbnz	r5, 2c8a8 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2c89a:	2208      	movs	r2, #8
   2c89c:	4631      	mov	r1, r6
   2c89e:	4620      	mov	r0, r4
   2c8a0:	f01e fd64 	bl	4b36c <uECC_vli_cmp_unsafe>
		while (carry || 
   2c8a4:	2801      	cmp	r0, #1
   2c8a6:	d00f      	beq.n	2c8c8 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2c8a8:	2308      	movs	r3, #8
   2c8aa:	4622      	mov	r2, r4
   2c8ac:	4631      	mov	r1, r6
   2c8ae:	4630      	mov	r0, r6
   2c8b0:	f01e fd83 	bl	4b3ba <uECC_vli_sub>
   2c8b4:	1a2d      	subs	r5, r5, r0
   2c8b6:	e7ef      	b.n	2c898 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2c8b8:	2308      	movs	r3, #8
   2c8ba:	4622      	mov	r2, r4
   2c8bc:	4631      	mov	r1, r6
   2c8be:	4630      	mov	r0, r6
   2c8c0:	f01e fc4d 	bl	4b15e <uECC_vli_add>
		while (carry < 0);
   2c8c4:	182d      	adds	r5, r5, r0
   2c8c6:	d4f7      	bmi.n	2c8b8 <vli_mmod_fast_secp256r1+0x188>
		}
	}
}
   2c8c8:	b009      	add	sp, #36	; 0x24
   2c8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c8cc:	00052798 	.word	0x00052798

0002c8d0 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   2c8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   2c8d2:	4e28      	ldr	r6, [pc, #160]	; (2c974 <tc_aes128_set_encrypt_key+0xa4>)
{
   2c8d4:	4607      	mov	r7, r0
   2c8d6:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   2c8d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   2c8da:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   2c8dc:	ad01      	add	r5, sp, #4
   2c8de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c8e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2c8e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c8e4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2c8e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   2c8ec:	2f00      	cmp	r7, #0
   2c8ee:	d03c      	beq.n	2c96a <tc_aes128_set_encrypt_key+0x9a>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   2c8f0:	2c00      	cmp	r4, #0
   2c8f2:	d03c      	beq.n	2c96e <tc_aes128_set_encrypt_key+0x9e>
   2c8f4:	1f38      	subs	r0, r7, #4
   2c8f6:	4621      	mov	r1, r4
   2c8f8:	4602      	mov	r2, r0
   2c8fa:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2c8fc:	784b      	ldrb	r3, [r1, #1]
   2c8fe:	780d      	ldrb	r5, [r1, #0]
   2c900:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2c902:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   2c906:	78cd      	ldrb	r5, [r1, #3]
   2c908:	432b      	orrs	r3, r5
   2c90a:	788d      	ldrb	r5, [r1, #2]
   2c90c:	3104      	adds	r1, #4
   2c90e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   2c912:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2c914:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   2c918:	d1f0      	bne.n	2c8fc <tc_aes128_set_encrypt_key+0x2c>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2c91a:	4c17      	ldr	r4, [pc, #92]	; (2c978 <tc_aes128_set_encrypt_key+0xa8>)
   2c91c:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   2c91e:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   2c920:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   2c922:	d118      	bne.n	2c956 <tc_aes128_set_encrypt_key+0x86>
	return (((a) >> 24)|((a) << 8));
   2c924:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2c928:	0e1a      	lsrs	r2, r3, #24
   2c92a:	5ca5      	ldrb	r5, [r4, r2]
   2c92c:	b2da      	uxtb	r2, r3
   2c92e:	5ca2      	ldrb	r2, [r4, r2]
   2c930:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   2c934:	f3c3 4507 	ubfx	r5, r3, #16, #8
   2c938:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2c93c:	5d65      	ldrb	r5, [r4, r5]
   2c93e:	5ce3      	ldrb	r3, [r4, r3]
   2c940:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   2c944:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   2c948:	ad0c      	add	r5, sp, #48	; 0x30
   2c94a:	f021 0303 	bic.w	r3, r1, #3
   2c94e:	442b      	add	r3, r5
   2c950:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   2c954:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   2c956:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   2c95a:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   2c95c:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   2c95e:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   2c960:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   2c962:	d1dc      	bne.n	2c91e <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
   2c964:	2001      	movs	r0, #1
}
   2c966:	b00d      	add	sp, #52	; 0x34
   2c968:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2c96a:	4638      	mov	r0, r7
   2c96c:	e7fb      	b.n	2c966 <tc_aes128_set_encrypt_key+0x96>
   2c96e:	4620      	mov	r0, r4
   2c970:	e7f9      	b.n	2c966 <tc_aes128_set_encrypt_key+0x96>
   2c972:	bf00      	nop
   2c974:	00051e18 	.word	0x00051e18
   2c978:	0005415e 	.word	0x0005415e

0002c97c <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2c97c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c980:	4615      	mov	r5, r2
   2c982:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2c984:	4607      	mov	r7, r0
   2c986:	2800      	cmp	r0, #0
   2c988:	d059      	beq.n	2ca3e <tc_aes_encrypt+0xc2>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2c98a:	2900      	cmp	r1, #0
   2c98c:	d05a      	beq.n	2ca44 <tc_aes_encrypt+0xc8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2c98e:	2a00      	cmp	r2, #0
   2c990:	d05a      	beq.n	2ca48 <tc_aes_encrypt+0xcc>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2c992:	2310      	movs	r3, #16
   2c994:	460a      	mov	r2, r1
   2c996:	4668      	mov	r0, sp
   2c998:	4619      	mov	r1, r3
   2c99a:	f01e fb1c 	bl	4afd6 <_copy>
	add_round_key(state, s->words);
   2c99e:	4629      	mov	r1, r5
   2c9a0:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   2c9a2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2ca4c <tc_aes_encrypt+0xd0>
	add_round_key(state, s->words);
   2c9a6:	f01f fa1f 	bl	4bde8 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2c9aa:	f105 0610 	add.w	r6, r5, #16
   2c9ae:	46c8      	mov	r8, r9
   2c9b0:	35a0      	adds	r5, #160	; 0xa0
   2c9b2:	466c      	mov	r4, sp
{
   2c9b4:	466a      	mov	r2, sp
   2c9b6:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   2c9b8:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   2c9ba:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   2c9bc:	f819 1001 	ldrb.w	r1, [r9, r1]
   2c9c0:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   2c9c4:	d1f8      	bne.n	2c9b8 <tc_aes_encrypt+0x3c>
		sub_bytes(state);
		shift_rows(state);
   2c9c6:	4668      	mov	r0, sp
   2c9c8:	f01f fa53 	bl	4be72 <shift_rows>
	mult_row_column(t, s);
   2c9cc:	4669      	mov	r1, sp
   2c9ce:	a804      	add	r0, sp, #16
   2c9d0:	f01f fa88 	bl	4bee4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2c9d4:	a901      	add	r1, sp, #4
   2c9d6:	a805      	add	r0, sp, #20
   2c9d8:	f01f fa84 	bl	4bee4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2c9dc:	a902      	add	r1, sp, #8
   2c9de:	a806      	add	r0, sp, #24
   2c9e0:	f01f fa80 	bl	4bee4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2c9e4:	a903      	add	r1, sp, #12
   2c9e6:	a807      	add	r0, sp, #28
   2c9e8:	f01f fa7c 	bl	4bee4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2c9ec:	2310      	movs	r3, #16
   2c9ee:	4619      	mov	r1, r3
   2c9f0:	eb0d 0203 	add.w	r2, sp, r3
   2c9f4:	4668      	mov	r0, sp
   2c9f6:	f01e faee 	bl	4afd6 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2c9fa:	4631      	mov	r1, r6
   2c9fc:	4668      	mov	r0, sp
   2c9fe:	3610      	adds	r6, #16
   2ca00:	f01f f9f2 	bl	4bde8 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2ca04:	42ae      	cmp	r6, r5
   2ca06:	d1d4      	bne.n	2c9b2 <tc_aes_encrypt+0x36>
   2ca08:	2610      	movs	r6, #16
		s[i] = sbox[s[i]];
   2ca0a:	7823      	ldrb	r3, [r4, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   2ca0c:	3e01      	subs	r6, #1
		s[i] = sbox[s[i]];
   2ca0e:	f818 3003 	ldrb.w	r3, [r8, r3]
   2ca12:	f804 3b01 	strb.w	r3, [r4], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   2ca16:	d1f8      	bne.n	2ca0a <tc_aes_encrypt+0x8e>
	}

	sub_bytes(state);
	shift_rows(state);
   2ca18:	4668      	mov	r0, sp
   2ca1a:	f01f fa2a 	bl	4be72 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2ca1e:	4629      	mov	r1, r5
   2ca20:	4668      	mov	r0, sp
   2ca22:	f01f f9e1 	bl	4bde8 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2ca26:	2310      	movs	r3, #16
   2ca28:	4619      	mov	r1, r3
   2ca2a:	466a      	mov	r2, sp
   2ca2c:	4638      	mov	r0, r7
   2ca2e:	f01e fad2 	bl	4afd6 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2ca32:	4668      	mov	r0, sp
   2ca34:	2210      	movs	r2, #16
   2ca36:	4631      	mov	r1, r6
   2ca38:	f01e fada 	bl	4aff0 <_set>

	return TC_CRYPTO_SUCCESS;
   2ca3c:	2001      	movs	r0, #1
}
   2ca3e:	b009      	add	sp, #36	; 0x24
   2ca40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   2ca44:	4608      	mov	r0, r1
   2ca46:	e7fa      	b.n	2ca3e <tc_aes_encrypt+0xc2>
   2ca48:	4610      	mov	r0, r2
   2ca4a:	e7f8      	b.n	2ca3e <tc_aes_encrypt+0xc2>
   2ca4c:	0005415e 	.word	0x0005415e

0002ca50 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   2ca50:	4901      	ldr	r1, [pc, #4]	; (2ca58 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2ca52:	2210      	movs	r2, #16
	str	r2, [r1]
   2ca54:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   2ca56:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   2ca58:	e000ed10 	.word	0xe000ed10

0002ca5c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   2ca5c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2ca5e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   2ca60:	f380 8811 	msr	BASEPRI, r0
	isb
   2ca64:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   2ca68:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   2ca6c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2ca6e:	b662      	cpsie	i
	isb
   2ca70:	f3bf 8f6f 	isb	sy

	bx	lr
   2ca74:	4770      	bx	lr
   2ca76:	bf00      	nop

0002ca78 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   2ca78:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   2ca7a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   2ca7c:	f381 8811 	msr	BASEPRI, r1

	wfe
   2ca80:	bf20      	wfe

	msr	BASEPRI, r0
   2ca82:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   2ca86:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   2ca88:	4770      	bx	lr
   2ca8a:	bf00      	nop

0002ca8c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   2ca8c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2ca8e:	2b00      	cmp	r3, #0
   2ca90:	db08      	blt.n	2caa4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2ca92:	2201      	movs	r2, #1
   2ca94:	f000 001f 	and.w	r0, r0, #31
   2ca98:	fa02 f000 	lsl.w	r0, r2, r0
   2ca9c:	095b      	lsrs	r3, r3, #5
   2ca9e:	4a02      	ldr	r2, [pc, #8]	; (2caa8 <arch_irq_enable+0x1c>)
   2caa0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   2caa4:	4770      	bx	lr
   2caa6:	bf00      	nop
   2caa8:	e000e100 	.word	0xe000e100

0002caac <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   2caac:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2caae:	2b00      	cmp	r3, #0
   2cab0:	db0d      	blt.n	2cace <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2cab2:	2201      	movs	r2, #1
   2cab4:	095b      	lsrs	r3, r3, #5
   2cab6:	f000 001f 	and.w	r0, r0, #31
   2caba:	fa02 f000 	lsl.w	r0, r2, r0
   2cabe:	3320      	adds	r3, #32
   2cac0:	4a03      	ldr	r2, [pc, #12]	; (2cad0 <arch_irq_disable+0x24>)
   2cac2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   2cac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2caca:	f3bf 8f6f 	isb	sy
}
   2cace:	4770      	bx	lr
   2cad0:	e000e100 	.word	0xe000e100

0002cad4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   2cad4:	0942      	lsrs	r2, r0, #5
   2cad6:	4b05      	ldr	r3, [pc, #20]	; (2caec <arch_irq_is_enabled+0x18>)
   2cad8:	f000 001f 	and.w	r0, r0, #31
   2cadc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2cae0:	2301      	movs	r3, #1
   2cae2:	fa03 f000 	lsl.w	r0, r3, r0
}
   2cae6:	4010      	ands	r0, r2
   2cae8:	4770      	bx	lr
   2caea:	bf00      	nop
   2caec:	e000e100 	.word	0xe000e100

0002caf0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2caf0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2caf2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2caf4:	bfa8      	it	ge
   2caf6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   2cafa:	f101 0101 	add.w	r1, r1, #1
   2cafe:	ea4f 1141 	mov.w	r1, r1, lsl #5
   2cb02:	bfae      	itee	ge
   2cb04:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cb08:	f000 000f 	andlt.w	r0, r0, #15
   2cb0c:	4b03      	ldrlt	r3, [pc, #12]	; (2cb1c <z_arm_irq_priority_set+0x2c>)
   2cb0e:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cb10:	bfac      	ite	ge
   2cb12:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2cb16:	5419      	strblt	r1, [r3, r0]
}
   2cb18:	4770      	bx	lr
   2cb1a:	bf00      	nop
   2cb1c:	e000ed14 	.word	0xe000ed14

0002cb20 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   2cb20:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2cb22:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   2cb24:	4b04      	ldr	r3, [pc, #16]	; (2cb38 <_arch_isr_direct_pm+0x18>)
   2cb26:	699a      	ldr	r2, [r3, #24]
   2cb28:	b11a      	cbz	r2, 2cb32 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   2cb2a:	2200      	movs	r2, #0
   2cb2c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   2cb2e:	f024 f9c3 	bl	50eb8 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2cb32:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   2cb34:	bd08      	pop	{r3, pc}
   2cb36:	bf00      	nop
   2cb38:	20006b30 	.word	0x20006b30

0002cb3c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   2cb3c:	bf30      	wfi
    b z_SysNmiOnReset
   2cb3e:	f7ff bffd 	b.w	2cb3c <z_SysNmiOnReset>
   2cb42:	bf00      	nop

0002cb44 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2cb44:	4a0f      	ldr	r2, [pc, #60]	; (2cb84 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   2cb46:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2cb48:	4b0f      	ldr	r3, [pc, #60]	; (2cb88 <z_arm_prep_c+0x44>)
   2cb4a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2cb4e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2cb50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2cb54:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   2cb58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   2cb5c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   2cb60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
   2cb64:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   2cb68:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   2cb6c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   2cb70:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   2cb74:	f01b fb44 	bl	48200 <z_bss_zero>
	z_data_copy();
   2cb78:	f01c fc18 	bl	493ac <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   2cb7c:	f000 f996 	bl	2ceac <z_arm_interrupt_init>
	z_cstart();
   2cb80:	f01b fb48 	bl	48214 <z_cstart>
   2cb84:	00026000 	.word	0x00026000
   2cb88:	e000ed00 	.word	0xe000ed00

0002cb8c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   2cb8c:	4a09      	ldr	r2, [pc, #36]	; (2cbb4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   2cb8e:	490a      	ldr	r1, [pc, #40]	; (2cbb8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   2cb90:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   2cb92:	6809      	ldr	r1, [r1, #0]
   2cb94:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2cb96:	4909      	ldr	r1, [pc, #36]	; (2cbbc <arch_swap+0x30>)
	_current->arch.basepri = key;
   2cb98:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2cb9a:	684b      	ldr	r3, [r1, #4]
   2cb9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2cba0:	604b      	str	r3, [r1, #4]
   2cba2:	2300      	movs	r3, #0
   2cba4:	f383 8811 	msr	BASEPRI, r3
   2cba8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   2cbac:	6893      	ldr	r3, [r2, #8]
}
   2cbae:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   2cbb0:	4770      	bx	lr
   2cbb2:	bf00      	nop
   2cbb4:	20006b30 	.word	0x20006b30
   2cbb8:	00053dac 	.word	0x00053dac
   2cbbc:	e000ed00 	.word	0xe000ed00

0002cbc0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2cbc0:	490f      	ldr	r1, [pc, #60]	; (2cc00 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2cbc2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   2cbc4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   2cbc8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2cbca:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2cbce:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2cbd2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   2cbd4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   2cbd8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   2cbdc:	4f09      	ldr	r7, [pc, #36]	; (2cc04 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   2cbde:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2cbe2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   2cbe4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2cbe6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   2cbe8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   2cbea:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   2cbec:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2cbee:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2cbf2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2cbf6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2cbfa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   2cbfe:	4770      	bx	lr
    ldr r1, =_kernel
   2cc00:	20006b30 	.word	0x20006b30
    ldr v4, =_SCS_ICSR
   2cc04:	e000ed04 	.word	0xe000ed04

0002cc08 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   2cc08:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   2cc0c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2cc0e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2cc12:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   2cc16:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   2cc18:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   2cc1c:	2902      	cmp	r1, #2
    beq _oops
   2cc1e:	d0ff      	beq.n	2cc20 <_oops>

0002cc20 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   2cc20:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   2cc22:	f01f fa9f 	bl	4c164 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   2cc26:	bd01      	pop	{r0, pc}

0002cc28 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   2cc28:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2cc2c:	9b00      	ldr	r3, [sp, #0]
   2cc2e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   2cc32:	490a      	ldr	r1, [pc, #40]	; (2cc5c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   2cc34:	9b01      	ldr	r3, [sp, #4]
   2cc36:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   2cc3a:	9b02      	ldr	r3, [sp, #8]
   2cc3c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   2cc40:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   2cc44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2cc48:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   2cc4c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   2cc50:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   2cc52:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   2cc54:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   2cc56:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   2cc58:	4770      	bx	lr
   2cc5a:	bf00      	nop
   2cc5c:	0004a311 	.word	0x0004a311

0002cc60 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   2cc60:	4b07      	ldr	r3, [pc, #28]	; (2cc80 <arch_switch_to_main_thread+0x20>)
   2cc62:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   2cc64:	4610      	mov	r0, r2
   2cc66:	f381 8809 	msr	PSP, r1
   2cc6a:	2100      	movs	r1, #0
   2cc6c:	b663      	cpsie	if
   2cc6e:	f381 8811 	msr	BASEPRI, r1
   2cc72:	f3bf 8f6f 	isb	sy
   2cc76:	2200      	movs	r2, #0
   2cc78:	2300      	movs	r3, #0
   2cc7a:	f01d fb49 	bl	4a310 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   2cc7e:	bf00      	nop
   2cc80:	20006b30 	.word	0x20006b30

0002cc84 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   2cc84:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   2cc86:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   2cc88:	4a0b      	ldr	r2, [pc, #44]	; (2ccb8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   2cc8a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   2cc8c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   2cc8e:	bf1e      	ittt	ne
	movne	r1, #0
   2cc90:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2cc92:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   2cc94:	f024 f910 	blne	50eb8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   2cc98:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   2cc9a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   2cc9e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2cca2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   2cca6:	4905      	ldr	r1, [pc, #20]	; (2ccbc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   2cca8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   2ccaa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   2ccac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   2ccae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   2ccb2:	4903      	ldr	r1, [pc, #12]	; (2ccc0 <_isr_wrapper+0x3c>)
	bx r1
   2ccb4:	4708      	bx	r1
   2ccb6:	0000      	.short	0x0000
	ldr r2, =_kernel
   2ccb8:	20006b30 	.word	0x20006b30
	ldr r1, =_sw_isr_table
   2ccbc:	00051aec 	.word	0x00051aec
	ldr r1, =z_arm_int_exit
   2ccc0:	0002ccc5 	.word	0x0002ccc5

0002ccc4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   2ccc4:	4b04      	ldr	r3, [pc, #16]	; (2ccd8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2ccc6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   2ccc8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   2ccca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   2cccc:	d003      	beq.n	2ccd6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2ccce:	4903      	ldr	r1, [pc, #12]	; (2ccdc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   2ccd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   2ccd4:	600a      	str	r2, [r1, #0]

0002ccd6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2ccd6:	4770      	bx	lr
	ldr r3, =_kernel
   2ccd8:	20006b30 	.word	0x20006b30
	ldr r1, =_SCS_ICSR
   2ccdc:	e000ed04 	.word	0xe000ed04

0002cce0 <mem_manage_fault.isra.2>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2cce0:	4b0e      	ldr	r3, [pc, #56]	; (2cd1c <mem_manage_fault.isra.2+0x3c>)
   2cce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   2cce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   2cce6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cce8:	0792      	lsls	r2, r2, #30
   2ccea:	d508      	bpl.n	2ccfe <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   2ccec:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2ccee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ccf0:	0612      	lsls	r2, r2, #24
   2ccf2:	d504      	bpl.n	2ccfe <mem_manage_fault.isra.2+0x1e>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   2ccf4:	b118      	cbz	r0, 2ccfe <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2ccf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ccf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   2ccfc:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   2ccfe:	4b07      	ldr	r3, [pc, #28]	; (2cd1c <mem_manage_fault.isra.2+0x3c>)
   2cd00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2cd02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2cd04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cd06:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   2cd08:	bf58      	it	pl
   2cd0a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2cd0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   2cd0e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2cd10:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   2cd14:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2cd16:	7008      	strb	r0, [r1, #0]

	return reason;
}
   2cd18:	4770      	bx	lr
   2cd1a:	bf00      	nop
   2cd1c:	e000ed00 	.word	0xe000ed00

0002cd20 <bus_fault.isra.3>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2cd20:	4b0d      	ldr	r3, [pc, #52]	; (2cd58 <bus_fault.isra.3+0x38>)
   2cd22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   2cd24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   2cd26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cd28:	0592      	lsls	r2, r2, #22
   2cd2a:	d508      	bpl.n	2cd3e <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   2cd2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2cd2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cd30:	0412      	lsls	r2, r2, #16
   2cd32:	d504      	bpl.n	2cd3e <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   2cd34:	b118      	cbz	r0, 2cd3e <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2cd36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cd38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2cd3c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2cd3e:	4b06      	ldr	r3, [pc, #24]	; (2cd58 <bus_fault.isra.3+0x38>)
   2cd40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2cd42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cd44:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2cd46:	bf58      	it	pl
   2cd48:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2cd4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   2cd4c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2cd4e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   2cd52:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2cd54:	7008      	strb	r0, [r1, #0]

	return reason;
}
   2cd56:	4770      	bx	lr
   2cd58:	e000ed00 	.word	0xe000ed00

0002cd5c <usage_fault.isra.4>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   2cd5c:	4b07      	ldr	r3, [pc, #28]	; (2cd7c <usage_fault.isra.4+0x20>)
   2cd5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2cd60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   2cd62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   2cd64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   2cd66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   2cd68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   2cd6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2cd6c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   2cd70:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   2cd74:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   2cd76:	2000      	movs	r0, #0
   2cd78:	4770      	bx	lr
   2cd7a:	bf00      	nop
   2cd7c:	e000ed00 	.word	0xe000ed00

0002cd80 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   2cd80:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2cd82:	4b3e      	ldr	r3, [pc, #248]	; (2ce7c <z_arm_fault+0xfc>)
   2cd84:	685b      	ldr	r3, [r3, #4]
{
   2cd86:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2cd88:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2cd8c:	2500      	movs	r5, #0
   2cd8e:	f385 8811 	msr	BASEPRI, r5
   2cd92:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   2cd96:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   2cd9a:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   2cd9e:	d112      	bne.n	2cdc6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   2cda0:	f002 040c 	and.w	r4, r2, #12
   2cda4:	2c08      	cmp	r4, #8
   2cda6:	d00e      	beq.n	2cdc6 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   2cda8:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   2cdaa:	bf4e      	itee	mi
   2cdac:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
   2cdae:	4606      	movpl	r6, r0
			*nested_exc = true;
   2cdb0:	2501      	movpl	r5, #1
	*recoverable = false;
   2cdb2:	2200      	movs	r2, #0
	switch (fault) {
   2cdb4:	3b03      	subs	r3, #3
	*recoverable = false;
   2cdb6:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   2cdba:	2b03      	cmp	r3, #3
   2cdbc:	d856      	bhi.n	2ce6c <z_arm_fault+0xec>
   2cdbe:	e8df f003 	tbb	[pc, r3]
   2cdc2:	4d04      	.short	0x4d04
   2cdc4:	4a51      	.short	0x4a51
		return NULL;
   2cdc6:	462e      	mov	r6, r5
   2cdc8:	e7f3      	b.n	2cdb2 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2cdca:	4b2c      	ldr	r3, [pc, #176]	; (2ce7c <z_arm_fault+0xfc>)
   2cdcc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2cdce:	f014 0402 	ands.w	r4, r4, #2
   2cdd2:	d14b      	bne.n	2ce6c <z_arm_fault+0xec>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2cdd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2cdd6:	2a00      	cmp	r2, #0
   2cdd8:	db17      	blt.n	2ce0a <z_arm_fault+0x8a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2cdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2cddc:	005b      	lsls	r3, r3, #1
   2cdde:	d514      	bpl.n	2ce0a <z_arm_fault+0x8a>
	uint16_t fault_insn = *(ret_addr - 1);
   2cde0:	69b3      	ldr	r3, [r6, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   2cde2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   2cde6:	f64d 7302 	movw	r3, #57090	; 0xdf02
   2cdea:	429a      	cmp	r2, r3
   2cdec:	d00c      	beq.n	2ce08 <z_arm_fault+0x88>
		} else if (SCB_MMFSR != 0) {
   2cdee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   2cdf2:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   2cdf6:	781b      	ldrb	r3, [r3, #0]
   2cdf8:	b1fb      	cbz	r3, 2ce3a <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
   2cdfa:	f10d 0107 	add.w	r1, sp, #7
   2cdfe:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   2ce00:	f7ff ff6e 	bl	2cce0 <mem_manage_fault.isra.2>
   2ce04:	4604      	mov	r4, r0
		break;
   2ce06:	e000      	b.n	2ce0a <z_arm_fault+0x8a>
			reason = esf->basic.r0;
   2ce08:	6834      	ldr	r4, [r6, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   2ce0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2ce0e:	b993      	cbnz	r3, 2ce36 <z_arm_fault+0xb6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2ce10:	2220      	movs	r2, #32
   2ce12:	4631      	mov	r1, r6
   2ce14:	a802      	add	r0, sp, #8
   2ce16:	f01f fa69 	bl	4c2ec <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2ce1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ce1c:	b345      	cbz	r5, 2ce70 <z_arm_fault+0xf0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2ce1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2ce22:	b922      	cbnz	r2, 2ce2e <z_arm_fault+0xae>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   2ce24:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2ce28:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2ce2c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2ce2e:	a902      	add	r1, sp, #8
   2ce30:	4620      	mov	r0, r4
   2ce32:	f01f f995 	bl	4c160 <z_arm_fatal_error>
}
   2ce36:	b00a      	add	sp, #40	; 0x28
   2ce38:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
   2ce3a:	4b11      	ldr	r3, [pc, #68]	; (2ce80 <z_arm_fault+0x100>)
   2ce3c:	781b      	ldrb	r3, [r3, #0]
   2ce3e:	b12b      	cbz	r3, 2ce4c <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
   2ce40:	f10d 0107 	add.w	r1, sp, #7
   2ce44:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   2ce46:	f7ff ff6b 	bl	2cd20 <bus_fault.isra.3>
   2ce4a:	e7db      	b.n	2ce04 <z_arm_fault+0x84>
		} else if (SCB_UFSR != 0) {
   2ce4c:	4b0d      	ldr	r3, [pc, #52]	; (2ce84 <z_arm_fault+0x104>)
   2ce4e:	881b      	ldrh	r3, [r3, #0]
   2ce50:	b29b      	uxth	r3, r3
   2ce52:	2b00      	cmp	r3, #0
   2ce54:	d0d9      	beq.n	2ce0a <z_arm_fault+0x8a>
		reason = usage_fault(esf);
   2ce56:	f7ff ff81 	bl	2cd5c <usage_fault.isra.4>
   2ce5a:	e7d3      	b.n	2ce04 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
   2ce5c:	f10d 0107 	add.w	r1, sp, #7
   2ce60:	2000      	movs	r0, #0
   2ce62:	e7cd      	b.n	2ce00 <z_arm_fault+0x80>
		reason = bus_fault(esf, 0, recoverable);
   2ce64:	f10d 0107 	add.w	r1, sp, #7
   2ce68:	2000      	movs	r0, #0
   2ce6a:	e7ec      	b.n	2ce46 <z_arm_fault+0xc6>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2ce6c:	2400      	movs	r4, #0
   2ce6e:	e7cc      	b.n	2ce0a <z_arm_fault+0x8a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2ce70:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2ce74:	f023 0301 	bic.w	r3, r3, #1
   2ce78:	e7d8      	b.n	2ce2c <z_arm_fault+0xac>
   2ce7a:	bf00      	nop
   2ce7c:	e000ed00 	.word	0xe000ed00
   2ce80:	e000ed29 	.word	0xe000ed29
   2ce84:	e000ed2a 	.word	0xe000ed2a

0002ce88 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   2ce88:	4a02      	ldr	r2, [pc, #8]	; (2ce94 <z_arm_fault_init+0xc>)
   2ce8a:	6953      	ldr	r3, [r2, #20]
   2ce8c:	f043 0310 	orr.w	r3, r3, #16
   2ce90:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2ce92:	4770      	bx	lr
   2ce94:	e000ed00 	.word	0xe000ed00

0002ce98 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   2ce98:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2ce9c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   2cea0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2cea2:	4672      	mov	r2, lr
	bl z_arm_fault
   2cea4:	f7ff ff6c 	bl	2cd80 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   2cea8:	bd01      	pop	{r0, pc}
   2ceaa:	bf00      	nop

0002ceac <z_arm_interrupt_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2ceac:	4804      	ldr	r0, [pc, #16]	; (2cec0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2ceae:	2300      	movs	r3, #0
   2ceb0:	2120      	movs	r1, #32
   2ceb2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2ceb4:	3301      	adds	r3, #1
   2ceb6:	2b30      	cmp	r3, #48	; 0x30
   2ceb8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2cebc:	d1f9      	bne.n	2ceb2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2cebe:	4770      	bx	lr
   2cec0:	e000e100 	.word	0xe000e100

0002cec4 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   2cec4:	f024 fcbe 	bl	51844 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2cec8:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2ceca:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2cece:	4808      	ldr	r0, [pc, #32]	; (2cef0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2ced0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2ced4:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2ced6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2ceda:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2cede:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2cee0:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2cee2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2cee6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2ceea:	f7ff fe2b 	bl	2cb44 <z_arm_prep_c>
   2ceee:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   2cef0:	20009570 	.word	0x20009570

0002cef4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   2cef4:	4b06      	ldr	r3, [pc, #24]	; (2cf10 <z_impl_k_thread_abort+0x1c>)
   2cef6:	689b      	ldr	r3, [r3, #8]
   2cef8:	4283      	cmp	r3, r0
   2cefa:	d107      	bne.n	2cf0c <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2cefc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   2cf00:	b123      	cbz	r3, 2cf0c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2cf02:	4a04      	ldr	r2, [pc, #16]	; (2cf14 <z_impl_k_thread_abort+0x20>)
   2cf04:	6853      	ldr	r3, [r2, #4]
   2cf06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   2cf0a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   2cf0c:	f01c b9ea 	b.w	492e4 <z_thread_abort>
   2cf10:	20006b30 	.word	0x20006b30
   2cf14:	e000ed00 	.word	0xe000ed00

0002cf18 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2cf18:	4b02      	ldr	r3, [pc, #8]	; (2cf24 <z_arm_configure_static_mpu_regions+0xc>)
   2cf1a:	4a03      	ldr	r2, [pc, #12]	; (2cf28 <z_arm_configure_static_mpu_regions+0x10>)
   2cf1c:	4803      	ldr	r0, [pc, #12]	; (2cf2c <z_arm_configure_static_mpu_regions+0x14>)
   2cf1e:	2101      	movs	r1, #1
   2cf20:	f000 b858 	b.w	2cfd4 <arm_core_mpu_configure_static_mpu_regions>
   2cf24:	20040000 	.word	0x20040000
   2cf28:	20000000 	.word	0x20000000
   2cf2c:	00052844 	.word	0x00052844

0002cf30 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   2cf30:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   2cf32:	4f1e      	ldr	r7, [pc, #120]	; (2cfac <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   2cf34:	2600      	movs	r6, #0
   2cf36:	428e      	cmp	r6, r1
   2cf38:	db01      	blt.n	2cf3e <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   2cf3a:	4610      	mov	r0, r2
   2cf3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   2cf3e:	6844      	ldr	r4, [r0, #4]
   2cf40:	b384      	cbz	r4, 2cfa4 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
   2cf42:	b153      	cbz	r3, 2cf5a <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   2cf44:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   2cf48:	ea14 0f0c 	tst.w	r4, ip
   2cf4c:	d118      	bne.n	2cf80 <mpu_configure_regions+0x50>
		&&
   2cf4e:	2c1f      	cmp	r4, #31
   2cf50:	d916      	bls.n	2cf80 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
   2cf52:	6805      	ldr	r5, [r0, #0]
		&&
   2cf54:	ea1c 0f05 	tst.w	ip, r5
   2cf58:	d112      	bne.n	2cf80 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   2cf5a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   2cf5c:	b2d2      	uxtb	r2, r2
	region_conf.base = new_region->start;
   2cf5e:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   2cf60:	f8d0 c008 	ldr.w	ip, [r0, #8]
   2cf64:	d90f      	bls.n	2cf86 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   2cf66:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   2cf6a:	d80e      	bhi.n	2cf8a <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   2cf6c:	3c01      	subs	r4, #1
   2cf6e:	fab4 f484 	clz	r4, r4
   2cf72:	f1c4 041f 	rsb	r4, r4, #31
   2cf76:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   2cf78:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2cf7a:	ea4c 0404 	orr.w	r4, ip, r4
   2cf7e:	d906      	bls.n	2cf8e <mpu_configure_regions+0x5e>
			return -EINVAL;
   2cf80:	f06f 0215 	mvn.w	r2, #21
   2cf84:	e7d9      	b.n	2cf3a <mpu_configure_regions+0xa>
		return REGION_32B;
   2cf86:	2408      	movs	r4, #8
   2cf88:	e7f6      	b.n	2cf78 <mpu_configure_regions+0x48>
		return REGION_4G;
   2cf8a:	243e      	movs	r4, #62	; 0x3e
   2cf8c:	e7f4      	b.n	2cf78 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2cf8e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
   2cf92:	4315      	orrs	r5, r2
   2cf94:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2cf98:	f044 0401 	orr.w	r4, r4, #1
   2cf9c:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2cf9e:	60fd      	str	r5, [r7, #12]
		reg_index++;
   2cfa0:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2cfa2:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
   2cfa4:	3601      	adds	r6, #1
   2cfa6:	300c      	adds	r0, #12
   2cfa8:	e7c5      	b.n	2cf36 <mpu_configure_regions+0x6>
   2cfaa:	bf00      	nop
   2cfac:	e000ed90 	.word	0xe000ed90

0002cfb0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2cfb0:	4b03      	ldr	r3, [pc, #12]	; (2cfc0 <arm_core_mpu_enable+0x10>)
   2cfb2:	2205      	movs	r2, #5
   2cfb4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   2cfb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2cfba:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   2cfbe:	4770      	bx	lr
   2cfc0:	e000ed90 	.word	0xe000ed90

0002cfc4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   2cfc4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2cfc8:	4b01      	ldr	r3, [pc, #4]	; (2cfd0 <arm_core_mpu_disable+0xc>)
   2cfca:	2200      	movs	r2, #0
   2cfcc:	605a      	str	r2, [r3, #4]
}
   2cfce:	4770      	bx	lr
   2cfd0:	e000ed90 	.word	0xe000ed90

0002cfd4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   2cfd4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2cfd6:	4c03      	ldr	r4, [pc, #12]	; (2cfe4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   2cfd8:	2301      	movs	r3, #1
   2cfda:	7822      	ldrb	r2, [r4, #0]
   2cfdc:	f7ff ffa8 	bl	2cf30 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2cfe0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   2cfe2:	bd10      	pop	{r4, pc}
   2cfe4:	20006cf1 	.word	0x20006cf1

0002cfe8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2cfe8:	4913      	ldr	r1, [pc, #76]	; (2d038 <z_arm_mpu_init+0x50>)
   2cfea:	6808      	ldr	r0, [r1, #0]
   2cfec:	2808      	cmp	r0, #8
{
   2cfee:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   2cff0:	d81e      	bhi.n	2d030 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   2cff2:	f7ff ffe7 	bl	2cfc4 <arm_core_mpu_disable>
   2cff6:	4c11      	ldr	r4, [pc, #68]	; (2d03c <z_arm_mpu_init+0x54>)
   2cff8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2cffa:	2200      	movs	r2, #0
   2cffc:	4290      	cmp	r0, r2
   2cffe:	f101 010c 	add.w	r1, r1, #12
   2d002:	d105      	bne.n	2d010 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   2d004:	4b0e      	ldr	r3, [pc, #56]	; (2d040 <z_arm_mpu_init+0x58>)
   2d006:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   2d008:	f7ff ffd2 	bl	2cfb0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   2d00c:	2000      	movs	r0, #0
}
   2d00e:	bd10      	pop	{r4, pc}
   2d010:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d012:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   2d016:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   2d01a:	4313      	orrs	r3, r2
   2d01c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   2d020:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   2d022:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2d026:	f043 0301 	orr.w	r3, r3, #1
   2d02a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2d02c:	3201      	adds	r2, #1
   2d02e:	e7e5      	b.n	2cffc <z_arm_mpu_init+0x14>
		return -1;
   2d030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d034:	e7eb      	b.n	2d00e <z_arm_mpu_init+0x26>
   2d036:	bf00      	nop
   2d038:	00052850 	.word	0x00052850
   2d03c:	e000ed90 	.word	0xe000ed90
   2d040:	20006cf1 	.word	0x20006cf1

0002d044 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   2d044:	b40c      	push	{r2, r3}
   2d046:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   2d048:	b909      	cbnz	r1, 2d04e <snprintf+0xa>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   2d04a:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
	p.len = (int) len;
   2d04e:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
   2d052:	ab07      	add	r3, sp, #28
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2d054:	9a06      	ldr	r2, [sp, #24]
   2d056:	4806      	ldr	r0, [pc, #24]	; (2d070 <snprintf+0x2c>)
	va_start(vargs, format);
   2d058:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2d05a:	a902      	add	r1, sp, #8
   2d05c:	f7fd fc40 	bl	2a8e0 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   2d060:	9b02      	ldr	r3, [sp, #8]
   2d062:	2200      	movs	r2, #0
   2d064:	701a      	strb	r2, [r3, #0]
	return r;
}
   2d066:	b005      	add	sp, #20
   2d068:	f85d eb04 	ldr.w	lr, [sp], #4
   2d06c:	b002      	add	sp, #8
   2d06e:	4770      	bx	lr
   2d070:	0004c315 	.word	0x0004c315

0002d074 <sprintf>:

int sprintf(char *ZRESTRICT str, const char *ZRESTRICT format, ...)
{
   2d074:	b40e      	push	{r1, r2, r3}
   2d076:	b50f      	push	{r0, r1, r2, r3, lr}
   2d078:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   2d07a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   2d07e:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
   2d082:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   2d084:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2d086:	4806      	ldr	r0, [pc, #24]	; (2d0a0 <sprintf+0x2c>)
	va_start(vargs, format);
   2d088:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   2d08a:	a902      	add	r1, sp, #8
   2d08c:	f7fd fc28 	bl	2a8e0 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   2d090:	9b02      	ldr	r3, [sp, #8]
   2d092:	2200      	movs	r2, #0
   2d094:	701a      	strb	r2, [r3, #0]
	return r;
}
   2d096:	b004      	add	sp, #16
   2d098:	f85d eb04 	ldr.w	lr, [sp], #4
   2d09c:	b003      	add	sp, #12
   2d09e:	4770      	bx	lr
   2d0a0:	0004c315 	.word	0x0004c315

0002d0a4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   2d0a4:	f04f 0320 	mov.w	r3, #32
   2d0a8:	f3ef 8211 	mrs	r2, BASEPRI
   2d0ac:	f383 8812 	msr	BASEPRI_MAX, r3
   2d0b0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2d0b4:	4906      	ldr	r1, [pc, #24]	; (2d0d0 <nordicsemi_nrf52_init+0x2c>)
   2d0b6:	2301      	movs	r3, #1
   2d0b8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   2d0bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   2d0c0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   2d0c4:	f382 8811 	msr	BASEPRI, r2
   2d0c8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2d0cc:	2000      	movs	r0, #0
   2d0ce:	4770      	bx	lr
   2d0d0:	4001e000 	.word	0x4001e000

0002d0d4 <sys_arch_reboot>:
    *p_gpregret = val;
   2d0d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2d0d8:	b2c0      	uxtb	r0, r0
   2d0da:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   2d0de:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2d0e2:	4905      	ldr	r1, [pc, #20]	; (2d0f8 <sys_arch_reboot+0x24>)
   2d0e4:	4b05      	ldr	r3, [pc, #20]	; (2d0fc <sys_arch_reboot+0x28>)
   2d0e6:	68ca      	ldr	r2, [r1, #12]
   2d0e8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2d0ec:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2d0ee:	60cb      	str	r3, [r1, #12]
   2d0f0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2d0f4:	bf00      	nop
   2d0f6:	e7fd      	b.n	2d0f4 <sys_arch_reboot+0x20>
   2d0f8:	e000ed00 	.word	0xe000ed00
   2d0fc:	05fa0004 	.word	0x05fa0004

0002d100 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2d100:	b120      	cbz	r0, 2d10c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   2d102:	4b03      	ldr	r3, [pc, #12]	; (2d110 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   2d104:	0180      	lsls	r0, r0, #6
   2d106:	f043 0301 	orr.w	r3, r3, #1
   2d10a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   2d10c:	4770      	bx	lr
   2d10e:	bf00      	nop
   2d110:	00051e70 	.word	0x00051e70

0002d114 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
   2d114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d118:	4e5c      	ldr	r6, [pc, #368]	; (2d28c <ecc_thread+0x178>)
	return z_impl_k_sem_take(sem, timeout);
   2d11a:	f8df 8188 	ldr.w	r8, [pc, #392]	; 2d2a4 <ecc_thread+0x190>
   2d11e:	4635      	mov	r5, r6
   2d120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d128:	4640      	mov	r0, r8
   2d12a:	f01b fbeb 	bl	48904 <z_impl_k_sem_take>
   2d12e:	f3bf 8f5b 	dmb	ish
   2d132:	6834      	ldr	r4, [r6, #0]
   2d134:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2d138:	f014 0401 	ands.w	r4, r4, #1
   2d13c:	d050      	beq.n	2d1e0 <ecc_thread+0xcc>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2d13e:	f8df 9160 	ldr.w	r9, [pc, #352]	; 2d2a0 <ecc_thread+0x18c>
   2d142:	4c53      	ldr	r4, [pc, #332]	; (2d290 <ecc_thread+0x17c>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2d144:	4f53      	ldr	r7, [pc, #332]	; (2d294 <ecc_thread+0x180>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   2d146:	4854      	ldr	r0, [pc, #336]	; (2d298 <ecc_thread+0x184>)
   2d148:	464a      	mov	r2, r9
   2d14a:	4621      	mov	r1, r4
   2d14c:	f01d ff5b 	bl	4b006 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   2d150:	b3d8      	cbz	r0, 2d1ca <ecc_thread+0xb6>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   2d152:	2220      	movs	r2, #32
   2d154:	4639      	mov	r1, r7
   2d156:	4620      	mov	r0, r4
   2d158:	f01f f8b8 	bl	4c2cc <memcmp>
   2d15c:	2800      	cmp	r0, #0
   2d15e:	d0f2      	beq.n	2d146 <ecc_thread+0x32>
	return 0;
   2d160:	2400      	movs	r4, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2d162:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d16a:	2001      	movs	r0, #1
   2d16c:	f000 faba 	bl	2d6e4 <bt_buf_get_rx>
   2d170:	f100 0708 	add.w	r7, r0, #8
   2d174:	2102      	movs	r1, #2
   2d176:	4681      	mov	r9, r0
   2d178:	4638      	mov	r0, r7
   2d17a:	f023 f80c 	bl	50196 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2d17e:	233e      	movs	r3, #62	; 0x3e
   2d180:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2d182:	2342      	movs	r3, #66	; 0x42
   2d184:	7043      	strb	r3, [r0, #1]
   2d186:	2101      	movs	r1, #1
   2d188:	4638      	mov	r0, r7
   2d18a:	f023 f804 	bl	50196 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   2d18e:	2308      	movs	r3, #8
   2d190:	7003      	strb	r3, [r0, #0]
   2d192:	2141      	movs	r1, #65	; 0x41
   2d194:	4638      	mov	r0, r7
   2d196:	f022 fffe 	bl	50196 <net_buf_simple_add>
   2d19a:	4607      	mov	r7, r0
	evt->status = status;
   2d19c:	f800 4b01 	strb.w	r4, [r0], #1
	if (status) {
   2d1a0:	b1ac      	cbz	r4, 2d1ce <ecc_thread+0xba>
		(void)memset(evt->key, 0, sizeof(evt->key));
   2d1a2:	2240      	movs	r2, #64	; 0x40
   2d1a4:	2100      	movs	r1, #0
   2d1a6:	f01f f8ac 	bl	4c302 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d1aa:	f3bf 8f5b 	dmb	ish
   2d1ae:	e855 3f00 	ldrex	r3, [r5]
   2d1b2:	f023 0301 	bic.w	r3, r3, #1
   2d1b6:	e845 3200 	strex	r2, r3, [r5]
   2d1ba:	2a00      	cmp	r2, #0
   2d1bc:	d1f7      	bne.n	2d1ae <ecc_thread+0x9a>
   2d1be:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   2d1c2:	4648      	mov	r0, r9
   2d1c4:	f001 f86c 	bl	2e2a0 <bt_recv>
   2d1c8:	e7aa      	b.n	2d120 <ecc_thread+0xc>
			return BT_HCI_ERR_UNSPECIFIED;
   2d1ca:	241f      	movs	r4, #31
   2d1cc:	e7c9      	b.n	2d162 <ecc_thread+0x4e>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   2d1ce:	4932      	ldr	r1, [pc, #200]	; (2d298 <ecc_thread+0x184>)
   2d1d0:	f01f f937 	bl	4c442 <sys_memcpy_swap.constprop.2>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   2d1d4:	4931      	ldr	r1, [pc, #196]	; (2d29c <ecc_thread+0x188>)
   2d1d6:	f107 0021 	add.w	r0, r7, #33	; 0x21
   2d1da:	f01f f932 	bl	4c442 <sys_memcpy_swap.constprop.2>
   2d1de:	e7e4      	b.n	2d1aa <ecc_thread+0x96>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d1e0:	f3bf 8f5b 	dmb	ish
   2d1e4:	6833      	ldr	r3, [r6, #0]
   2d1e6:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2d1ea:	079b      	lsls	r3, r3, #30
   2d1ec:	d598      	bpl.n	2d120 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   2d1ee:	492c      	ldr	r1, [pc, #176]	; (2d2a0 <ecc_thread+0x18c>)
   2d1f0:	4829      	ldr	r0, [pc, #164]	; (2d298 <ecc_thread+0x184>)
   2d1f2:	f01e fdd6 	bl	4bda2 <uECC_valid_public_key>
	if (ret < 0) {
   2d1f6:	2800      	cmp	r0, #0
   2d1f8:	db11      	blt.n	2d21e <ecc_thread+0x10a>
   2d1fa:	f3bf 8f5b 	dmb	ish
		ret = uECC_shared_secret(ecc.public_key_be,
   2d1fe:	4924      	ldr	r1, [pc, #144]	; (2d290 <ecc_thread+0x17c>)
   2d200:	6833      	ldr	r3, [r6, #0]
   2d202:	4824      	ldr	r0, [pc, #144]	; (2d294 <ecc_thread+0x180>)
   2d204:	f3bf 8f5b 	dmb	ish
   2d208:	f013 0f04 	tst.w	r3, #4
   2d20c:	f101 0220 	add.w	r2, r1, #32
   2d210:	4b23      	ldr	r3, [pc, #140]	; (2d2a0 <ecc_thread+0x18c>)
   2d212:	bf18      	it	ne
   2d214:	4601      	movne	r1, r0
   2d216:	4610      	mov	r0, r2
   2d218:	f01d ff44 	bl	4b0a4 <uECC_shared_secret>
   2d21c:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2d21e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d226:	2001      	movs	r0, #1
   2d228:	f000 fa5c 	bl	2d6e4 <bt_buf_get_rx>
   2d22c:	f100 0708 	add.w	r7, r0, #8
   2d230:	2102      	movs	r1, #2
   2d232:	4681      	mov	r9, r0
   2d234:	4638      	mov	r0, r7
   2d236:	f022 ffae 	bl	50196 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   2d23a:	233e      	movs	r3, #62	; 0x3e
   2d23c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2d23e:	2322      	movs	r3, #34	; 0x22
   2d240:	7043      	strb	r3, [r0, #1]
   2d242:	2101      	movs	r1, #1
   2d244:	4638      	mov	r0, r7
   2d246:	f022 ffa6 	bl	50196 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   2d24a:	2309      	movs	r3, #9
   2d24c:	7003      	strb	r3, [r0, #0]
   2d24e:	2121      	movs	r1, #33	; 0x21
   2d250:	4638      	mov	r0, r7
   2d252:	f022 ffa0 	bl	50196 <net_buf_simple_add>
   2d256:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   2d258:	3001      	adds	r0, #1
   2d25a:	b984      	cbnz	r4, 2d27e <ecc_thread+0x16a>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   2d25c:	221f      	movs	r2, #31
   2d25e:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   2d260:	21ff      	movs	r1, #255	; 0xff
   2d262:	2220      	movs	r2, #32
   2d264:	f01f f84d 	bl	4c302 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d268:	f3bf 8f5b 	dmb	ish
   2d26c:	e855 3f00 	ldrex	r3, [r5]
   2d270:	f023 0302 	bic.w	r3, r3, #2
   2d274:	e845 3200 	strex	r2, r3, [r5]
   2d278:	2a00      	cmp	r2, #0
   2d27a:	d0a0      	beq.n	2d1be <ecc_thread+0xaa>
   2d27c:	e7f6      	b.n	2d26c <ecc_thread+0x158>
		evt->status = 0U;
   2d27e:	2200      	movs	r2, #0
   2d280:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   2d282:	4905      	ldr	r1, [pc, #20]	; (2d298 <ecc_thread+0x184>)
   2d284:	f01f f8dd 	bl	4c442 <sys_memcpy_swap.constprop.2>
   2d288:	e7ee      	b.n	2d268 <ecc_thread+0x154>
   2d28a:	bf00      	nop
   2d28c:	20003fb8 	.word	0x20003fb8
   2d290:	20006cf2 	.word	0x20006cf2
   2d294:	00054274 	.word	0x00054274
   2d298:	20006d12 	.word	0x20006d12
   2d29c:	20006d32 	.word	0x20006d32
   2d2a0:	00052870 	.word	0x00052870
   2d2a4:	20000ffc 	.word	0x20000ffc

0002d2a8 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   2d2a8:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d2aa:	4c21      	ldr	r4, [pc, #132]	; (2d330 <le_gen_dhkey+0x88>)
   2d2ac:	f3bf 8f5b 	dmb	ish
   2d2b0:	6823      	ldr	r3, [r4, #0]
   2d2b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2d2b6:	07da      	lsls	r2, r3, #31
{
   2d2b8:	4606      	mov	r6, r0
   2d2ba:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   2d2bc:	d501      	bpl.n	2d2c2 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   2d2be:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   2d2c0:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2d2c2:	2901      	cmp	r1, #1
   2d2c4:	d832      	bhi.n	2d32c <le_gen_dhkey+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d2c6:	f3bf 8f5b 	dmb	ish
   2d2ca:	e854 3f00 	ldrex	r3, [r4]
   2d2ce:	f043 0202 	orr.w	r2, r3, #2
   2d2d2:	e844 2100 	strex	r1, r2, [r4]
   2d2d6:	2900      	cmp	r1, #0
   2d2d8:	d1f7      	bne.n	2d2ca <le_gen_dhkey+0x22>
   2d2da:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   2d2de:	079b      	lsls	r3, r3, #30
   2d2e0:	d4ed      	bmi.n	2d2be <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   2d2e2:	4631      	mov	r1, r6
   2d2e4:	4813      	ldr	r0, [pc, #76]	; (2d334 <le_gen_dhkey+0x8c>)
   2d2e6:	f01f f8ac 	bl	4c442 <sys_memcpy_swap.constprop.2>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   2d2ea:	f106 0120 	add.w	r1, r6, #32
   2d2ee:	4812      	ldr	r0, [pc, #72]	; (2d338 <le_gen_dhkey+0x90>)
   2d2f0:	f01f f8a7 	bl	4c442 <sys_memcpy_swap.constprop.2>
   2d2f4:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
   2d2f8:	2d01      	cmp	r5, #1
   2d2fa:	d10e      	bne.n	2d31a <le_gen_dhkey+0x72>
   2d2fc:	e854 3f00 	ldrex	r3, [r4]
   2d300:	f043 0304 	orr.w	r3, r3, #4
   2d304:	e844 3200 	strex	r2, r3, [r4]
   2d308:	2a00      	cmp	r2, #0
   2d30a:	d1f7      	bne.n	2d2fc <le_gen_dhkey+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d30c:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   2d310:	480a      	ldr	r0, [pc, #40]	; (2d33c <le_gen_dhkey+0x94>)
   2d312:	f01b fad1 	bl	488b8 <z_impl_k_sem_give>
   2d316:	2000      	movs	r0, #0
   2d318:	e7d2      	b.n	2d2c0 <le_gen_dhkey+0x18>
   2d31a:	e854 3f00 	ldrex	r3, [r4]
   2d31e:	f023 0304 	bic.w	r3, r3, #4
   2d322:	e844 3200 	strex	r2, r3, [r4]
   2d326:	2a00      	cmp	r2, #0
   2d328:	d0f0      	beq.n	2d30c <le_gen_dhkey+0x64>
   2d32a:	e7f6      	b.n	2d31a <le_gen_dhkey+0x72>
		return BT_HCI_ERR_INVALID_PARAM;
   2d32c:	2012      	movs	r0, #18
   2d32e:	e7c7      	b.n	2d2c0 <le_gen_dhkey+0x18>
   2d330:	20003fb8 	.word	0x20003fb8
   2d334:	20006d12 	.word	0x20006d12
   2d338:	20006d32 	.word	0x20006d32
   2d33c:	20000ffc 	.word	0x20000ffc

0002d340 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   2d340:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2d342:	7d06      	ldrb	r6, [r0, #20]
   2d344:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   2d346:	b956      	cbnz	r6, 2d35e <bt_hci_ecc_send+0x1e>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   2d348:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   2d34a:	881d      	ldrh	r5, [r3, #0]
   2d34c:	f242 0225 	movw	r2, #8229	; 0x2025
   2d350:	4295      	cmp	r5, r2
   2d352:	d01c      	beq.n	2d38e <bt_hci_ecc_send+0x4e>
   2d354:	d80b      	bhi.n	2d36e <bt_hci_ecc_send+0x2e>
   2d356:	f242 0201 	movw	r2, #8193	; 0x2001
   2d35a:	4295      	cmp	r5, r2
   2d35c:	d04f      	beq.n	2d3fe <bt_hci_ecc_send+0xbe>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   2d35e:	4b2c      	ldr	r3, [pc, #176]	; (2d410 <bt_hci_ecc_send+0xd0>)
   2d360:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   2d364:	4620      	mov	r0, r4
   2d366:	691b      	ldr	r3, [r3, #16]
}
   2d368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   2d36c:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   2d36e:	f242 0326 	movw	r3, #8230	; 0x2026
   2d372:	429d      	cmp	r5, r3
   2d374:	d034      	beq.n	2d3e0 <bt_hci_ecc_send+0xa0>
   2d376:	f242 035e 	movw	r3, #8286	; 0x205e
   2d37a:	429d      	cmp	r5, r3
   2d37c:	d1ef      	bne.n	2d35e <bt_hci_ecc_send+0x1e>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
   2d37e:	2103      	movs	r1, #3
   2d380:	3008      	adds	r0, #8
   2d382:	f022 ff31 	bl	501e8 <net_buf_simple_pull>
	cmd = (void *)buf->data;
   2d386:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2d388:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2d38c:	e02e      	b.n	2d3ec <bt_hci_ecc_send+0xac>
   2d38e:	2103      	movs	r1, #3
   2d390:	3008      	adds	r0, #8
   2d392:	f022 ff29 	bl	501e8 <net_buf_simple_pull>
	net_buf_unref(buf);
   2d396:	4620      	mov	r0, r4
   2d398:	f016 fe66 	bl	44068 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d39c:	f3bf 8f5b 	dmb	ish
   2d3a0:	4b1c      	ldr	r3, [pc, #112]	; (2d414 <bt_hci_ecc_send+0xd4>)
   2d3a2:	681a      	ldr	r2, [r3, #0]
   2d3a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   2d3a8:	0792      	lsls	r2, r2, #30
   2d3aa:	d507      	bpl.n	2d3bc <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   2d3ac:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   2d3ae:	4631      	mov	r1, r6
   2d3b0:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   2d3b4:	f01f f820 	bl	4c3f8 <send_cmd_status>
}
   2d3b8:	2000      	movs	r0, #0
   2d3ba:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d3bc:	f3bf 8f5b 	dmb	ish
   2d3c0:	e853 2f00 	ldrex	r2, [r3]
   2d3c4:	f042 0101 	orr.w	r1, r2, #1
   2d3c8:	e843 1000 	strex	r0, r1, [r3]
   2d3cc:	2800      	cmp	r0, #0
   2d3ce:	d1f7      	bne.n	2d3c0 <bt_hci_ecc_send+0x80>
   2d3d0:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   2d3d4:	07d3      	lsls	r3, r2, #31
   2d3d6:	d4e9      	bmi.n	2d3ac <bt_hci_ecc_send+0x6c>
   2d3d8:	480f      	ldr	r0, [pc, #60]	; (2d418 <bt_hci_ecc_send+0xd8>)
   2d3da:	f01b fa6d 	bl	488b8 <z_impl_k_sem_give>
   2d3de:	e7e6      	b.n	2d3ae <bt_hci_ecc_send+0x6e>
   2d3e0:	2103      	movs	r1, #3
   2d3e2:	3008      	adds	r0, #8
   2d3e4:	f022 ff00 	bl	501e8 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   2d3e8:	68a0      	ldr	r0, [r4, #8]
   2d3ea:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   2d3ec:	f7ff ff5c 	bl	2d2a8 <le_gen_dhkey>
   2d3f0:	4606      	mov	r6, r0
	net_buf_unref(buf);
   2d3f2:	4620      	mov	r0, r4
   2d3f4:	f016 fe38 	bl	44068 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   2d3f8:	4631      	mov	r1, r6
   2d3fa:	4628      	mov	r0, r5
   2d3fc:	e7da      	b.n	2d3b4 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   2d3fe:	78da      	ldrb	r2, [r3, #3]
   2d400:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2d404:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   2d406:	791a      	ldrb	r2, [r3, #4]
   2d408:	f022 0201 	bic.w	r2, r2, #1
   2d40c:	711a      	strb	r2, [r3, #4]
   2d40e:	e7a6      	b.n	2d35e <bt_hci_ecc_send+0x1e>
   2d410:	20000000 	.word	0x20000000
   2d414:	20003fb8 	.word	0x20003fb8
   2d418:	20000ffc 	.word	0x20000ffc

0002d41c <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   2d41c:	b510      	push	{r4, lr}
   2d41e:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2d420:	4c0c      	ldr	r4, [pc, #48]	; (2d454 <bt_hci_ecc_init+0x38>)
   2d422:	490d      	ldr	r1, [pc, #52]	; (2d458 <bt_hci_ecc_init+0x3c>)
   2d424:	2200      	movs	r2, #0
   2d426:	2300      	movs	r3, #0
   2d428:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2d42c:	2300      	movs	r3, #0
   2d42e:	220a      	movs	r2, #10
   2d430:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2d434:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2d438:	9300      	str	r3, [sp, #0]
   2d43a:	f44f 628f 	mov.w	r2, #1144	; 0x478
   2d43e:	4b07      	ldr	r3, [pc, #28]	; (2d45c <bt_hci_ecc_init+0x40>)
   2d440:	4620      	mov	r0, r4
   2d442:	f01a ffed 	bl	48420 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2d446:	4906      	ldr	r1, [pc, #24]	; (2d460 <bt_hci_ecc_init+0x44>)
   2d448:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   2d44a:	b008      	add	sp, #32
   2d44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d450:	f023 bd2d 	b.w	50eae <z_impl_k_thread_name_set>
   2d454:	20001430 	.word	0x20001430
   2d458:	200071b0 	.word	0x200071b0
   2d45c:	0002d115 	.word	0x0002d115
   2d460:	0005426d 	.word	0x0005426d

0002d464 <save_id>:
static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   2d464:	4903      	ldr	r1, [pc, #12]	; (2d474 <save_id+0x10>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   2d466:	4804      	ldr	r0, [pc, #16]	; (2d478 <save_id+0x14>)
   2d468:	79ca      	ldrb	r2, [r1, #7]
   2d46a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   2d46e:	f7fe bd69 	b.w	2bf44 <settings_save_one>
   2d472:	bf00      	nop
   2d474:	20000000 	.word	0x20000000
   2d478:	000542d9 	.word	0x000542d9

0002d47c <set>:
{
   2d47c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d47e:	4616      	mov	r6, r2
   2d480:	461f      	mov	r7, r3
	if (!name) {
   2d482:	4604      	mov	r4, r0
   2d484:	b920      	cbnz	r0, 2d490 <set+0x14>
		return -ENOENT;
   2d486:	f06f 0401 	mvn.w	r4, #1
}
   2d48a:	4620      	mov	r0, r4
   2d48c:	b003      	add	sp, #12
   2d48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = settings_name_next(name, &next);
   2d490:	a901      	add	r1, sp, #4
   2d492:	f01d fc4d 	bl	4ad30 <settings_name_next>
	if (!strncmp(name, "id", len)) {
   2d496:	4912      	ldr	r1, [pc, #72]	; (2d4e0 <set+0x64>)
   2d498:	4602      	mov	r2, r0
   2d49a:	4620      	mov	r0, r4
   2d49c:	f01e ff07 	bl	4c2ae <strncmp>
   2d4a0:	2800      	cmp	r0, #0
   2d4a2:	d1f0      	bne.n	2d486 <set+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d4a4:	f3bf 8f5b 	dmb	ish
   2d4a8:	4d0e      	ldr	r5, [pc, #56]	; (2d4e4 <set+0x68>)
   2d4aa:	682c      	ldr	r4, [r5, #0]
   2d4ac:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2d4b0:	f3c4 0480 	ubfx	r4, r4, #2, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   2d4b4:	b994      	cbnz	r4, 2d4dc <set+0x60>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   2d4b6:	3dcc      	subs	r5, #204	; 0xcc
   2d4b8:	2207      	movs	r2, #7
   2d4ba:	4629      	mov	r1, r5
   2d4bc:	4638      	mov	r0, r7
   2d4be:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   2d4c0:	2806      	cmp	r0, #6
   2d4c2:	d806      	bhi.n	2d4d2 <set+0x56>
			(void)memset(bt_dev.id_addr, 0,
   2d4c4:	2207      	movs	r2, #7
   2d4c6:	4621      	mov	r1, r4
   2d4c8:	4628      	mov	r0, r5
   2d4ca:	f01e ff1a 	bl	4c302 <memset>
			bt_dev.id_count = 0U;
   2d4ce:	71ec      	strb	r4, [r5, #7]
   2d4d0:	e7db      	b.n	2d48a <set+0xe>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   2d4d2:	2307      	movs	r3, #7
   2d4d4:	fbb0 f0f3 	udiv	r0, r0, r3
   2d4d8:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   2d4da:	e7d6      	b.n	2d48a <set+0xe>
			return 0;
   2d4dc:	4604      	mov	r4, r0
   2d4de:	e7d4      	b.n	2d48a <set+0xe>
   2d4e0:	00053f70 	.word	0x00053f70
   2d4e4:	200000cc 	.word	0x200000cc

0002d4e8 <bt_settings_encode_key>:
{
   2d4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d4ec:	b088      	sub	sp, #32
   2d4ee:	799c      	ldrb	r4, [r3, #6]
   2d4f0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
   2d4f4:	795d      	ldrb	r5, [r3, #5]
   2d4f6:	791e      	ldrb	r6, [r3, #4]
   2d4f8:	78df      	ldrb	r7, [r3, #3]
   2d4fa:	f893 c002 	ldrb.w	ip, [r3, #2]
   2d4fe:	f893 e001 	ldrb.w	lr, [r3, #1]
   2d502:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   2d504:	f1b8 0f00 	cmp.w	r8, #0
   2d508:	d00e      	beq.n	2d528 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   2d50a:	e9cd 3806 	strd	r3, r8, [sp, #24]
   2d50e:	e9cd ce04 	strd	ip, lr, [sp, #16]
   2d512:	4613      	mov	r3, r2
   2d514:	e9cd 6702 	strd	r6, r7, [sp, #8]
   2d518:	e9cd 4500 	strd	r4, r5, [sp]
   2d51c:	4a08      	ldr	r2, [pc, #32]	; (2d540 <bt_settings_encode_key+0x58>)
   2d51e:	f01c fdea 	bl	4a0f6 <snprintk>
}
   2d522:	b008      	add	sp, #32
   2d524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   2d528:	e9cd e305 	strd	lr, r3, [sp, #20]
   2d52c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   2d530:	4613      	mov	r3, r2
   2d532:	e9cd 5601 	strd	r5, r6, [sp, #4]
   2d536:	9400      	str	r4, [sp, #0]
   2d538:	4a02      	ldr	r2, [pc, #8]	; (2d544 <bt_settings_encode_key+0x5c>)
   2d53a:	f01c fddc 	bl	4a0f6 <snprintk>
}
   2d53e:	e7f0      	b.n	2d522 <bt_settings_encode_key+0x3a>
   2d540:	00054294 	.word	0x00054294
   2d544:	000542b8 	.word	0x000542b8

0002d548 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   2d548:	4801      	ldr	r0, [pc, #4]	; (2d550 <bt_settings_save_id+0x8>)
   2d54a:	f01b bb21 	b.w	48b90 <k_work_submit>
   2d54e:	bf00      	nop
   2d550:	200004fc 	.word	0x200004fc

0002d554 <commit>:
}

static int commit(void)
{
   2d554:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   2d556:	4c15      	ldr	r4, [pc, #84]	; (2d5ac <commit+0x58>)
   2d558:	79e3      	ldrb	r3, [r4, #7]
   2d55a:	b1e3      	cbz	r3, 2d596 <commit+0x42>
   2d55c:	f3bf 8f5b 	dmb	ish
   2d560:	4c13      	ldr	r4, [pc, #76]	; (2d5b0 <commit+0x5c>)
   2d562:	6823      	ldr	r3, [r4, #0]
   2d564:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2d568:	079b      	lsls	r3, r3, #30
   2d56a:	d401      	bmi.n	2d570 <commit+0x1c>
		bt_finalize_init();
   2d56c:	f000 ff4e 	bl	2e40c <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d570:	f3bf 8f5b 	dmb	ish
   2d574:	e854 0f00 	ldrex	r0, [r4]
   2d578:	f420 4380 	bic.w	r3, r0, #16384	; 0x4000
   2d57c:	e844 3200 	strex	r2, r3, [r4]
   2d580:	2a00      	cmp	r2, #0
   2d582:	d1f7      	bne.n	2d574 <commit+0x20>
   2d584:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   2d588:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
   2d58c:	d00d      	beq.n	2d5aa <commit+0x56>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
   2d58e:	f7ff ffdb 	bl	2d548 <bt_settings_save_id>
	}

	return 0;
   2d592:	2000      	movs	r0, #0
   2d594:	e009      	b.n	2d5aa <commit+0x56>
		err = bt_setup_public_id_addr();
   2d596:	f001 fa09 	bl	2e9ac <bt_setup_public_id_addr>
		if (err) {
   2d59a:	b930      	cbnz	r0, 2d5aa <commit+0x56>
	if (!bt_dev.id_count) {
   2d59c:	79e3      	ldrb	r3, [r4, #7]
   2d59e:	2b00      	cmp	r3, #0
   2d5a0:	d1dc      	bne.n	2d55c <commit+0x8>
		err = bt_setup_random_id_addr();
   2d5a2:	f001 fa43 	bl	2ea2c <bt_setup_random_id_addr>
		if (err) {
   2d5a6:	2800      	cmp	r0, #0
   2d5a8:	d0d8      	beq.n	2d55c <commit+0x8>
}
   2d5aa:	bd10      	pop	{r4, pc}
   2d5ac:	20000000 	.word	0x20000000
   2d5b0:	200000cc 	.word	0x200000cc

0002d5b4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   2d5b4:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   2d5b6:	7802      	ldrb	r2, [r0, #0]
   2d5b8:	2a01      	cmp	r2, #1
{
   2d5ba:	4604      	mov	r4, r0
   2d5bc:	460b      	mov	r3, r1
	switch (src->type) {
   2d5be:	d017      	beq.n	2d5f0 <uuid_to_uuid128+0x3c>
   2d5c0:	b11a      	cbz	r2, 2d5ca <uuid_to_uuid128+0x16>
   2d5c2:	2a02      	cmp	r2, #2
   2d5c4:	d02c      	beq.n	2d620 <uuid_to_uuid128+0x6c>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   2d5c6:	bcf0      	pop	{r4, r5, r6, r7}
   2d5c8:	4770      	bx	lr
		*dst = uuid128_base;
   2d5ca:	4a18      	ldr	r2, [pc, #96]	; (2d62c <uuid_to_uuid128+0x78>)
   2d5cc:	460d      	mov	r5, r1
   2d5ce:	f102 0710 	add.w	r7, r2, #16
   2d5d2:	6810      	ldr	r0, [r2, #0]
   2d5d4:	6851      	ldr	r1, [r2, #4]
   2d5d6:	462e      	mov	r6, r5
   2d5d8:	c603      	stmia	r6!, {r0, r1}
   2d5da:	3208      	adds	r2, #8
   2d5dc:	42ba      	cmp	r2, r7
   2d5de:	4635      	mov	r5, r6
   2d5e0:	d1f7      	bne.n	2d5d2 <uuid_to_uuid128+0x1e>
   2d5e2:	7812      	ldrb	r2, [r2, #0]
   2d5e4:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   2d5e6:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   2d5e8:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   2d5ea:	0a12      	lsrs	r2, r2, #8
   2d5ec:	739a      	strb	r2, [r3, #14]
   2d5ee:	e7ea      	b.n	2d5c6 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   2d5f0:	4a0e      	ldr	r2, [pc, #56]	; (2d62c <uuid_to_uuid128+0x78>)
   2d5f2:	460d      	mov	r5, r1
   2d5f4:	f102 0710 	add.w	r7, r2, #16
   2d5f8:	6810      	ldr	r0, [r2, #0]
   2d5fa:	6851      	ldr	r1, [r2, #4]
   2d5fc:	462e      	mov	r6, r5
   2d5fe:	c603      	stmia	r6!, {r0, r1}
   2d600:	3208      	adds	r2, #8
   2d602:	42ba      	cmp	r2, r7
   2d604:	4635      	mov	r5, r6
   2d606:	d1f7      	bne.n	2d5f8 <uuid_to_uuid128+0x44>
   2d608:	7812      	ldrb	r2, [r2, #0]
   2d60a:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   2d60c:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   2d60e:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   2d610:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   2d614:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   2d616:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   2d618:	0a12      	lsrs	r2, r2, #8
   2d61a:	7399      	strb	r1, [r3, #14]
   2d61c:	741a      	strb	r2, [r3, #16]
   2d61e:	e7d2      	b.n	2d5c6 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   2d620:	4601      	mov	r1, r0
   2d622:	2211      	movs	r2, #17
   2d624:	4618      	mov	r0, r3
}
   2d626:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   2d628:	f01e be60 	b.w	4c2ec <memcpy>
   2d62c:	00054301 	.word	0x00054301

0002d630 <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
   2d630:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
   2d632:	7805      	ldrb	r5, [r0, #0]
   2d634:	2d01      	cmp	r5, #1
{
   2d636:	b08b      	sub	sp, #44	; 0x2c
   2d638:	4604      	mov	r4, r0
   2d63a:	460e      	mov	r6, r1
   2d63c:	4617      	mov	r7, r2
	switch (uuid->type) {
   2d63e:	d00f      	beq.n	2d660 <bt_uuid_to_str+0x30>
   2d640:	b135      	cbz	r5, 2d650 <bt_uuid_to_str+0x20>
   2d642:	2d02      	cmp	r5, #2
   2d644:	d00f      	beq.n	2d666 <bt_uuid_to_str+0x36>
			 sys_le32_to_cpu(tmp5), sys_le16_to_cpu(tmp4),
			 sys_le16_to_cpu(tmp3), sys_le16_to_cpu(tmp2),
			 sys_le32_to_cpu(tmp1), sys_le16_to_cpu(tmp0));
		break;
	default:
		(void)memset(str, 0, len);
   2d646:	2100      	movs	r1, #0
   2d648:	4630      	mov	r0, r6
   2d64a:	f01e fe5a 	bl	4c302 <memset>
		return;
   2d64e:	e005      	b.n	2d65c <bt_uuid_to_str+0x2c>
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
   2d650:	8843      	ldrh	r3, [r0, #2]
   2d652:	4a21      	ldr	r2, [pc, #132]	; (2d6d8 <bt_uuid_to_str+0xa8>)
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   2d654:	4639      	mov	r1, r7
   2d656:	4630      	mov	r0, r6
   2d658:	f01c fd4d 	bl	4a0f6 <snprintk>
	}
}
   2d65c:	b00b      	add	sp, #44	; 0x2c
   2d65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   2d660:	6843      	ldr	r3, [r0, #4]
   2d662:	4a1e      	ldr	r2, [pc, #120]	; (2d6dc <bt_uuid_to_str+0xac>)
   2d664:	e7f6      	b.n	2d654 <bt_uuid_to_str+0x24>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
   2d666:	462a      	mov	r2, r5
   2d668:	1c41      	adds	r1, r0, #1
   2d66a:	a806      	add	r0, sp, #24
   2d66c:	f01e fe3e 	bl	4c2ec <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
   2d670:	1ce1      	adds	r1, r4, #3
   2d672:	2204      	movs	r2, #4
   2d674:	a808      	add	r0, sp, #32
   2d676:	f01e fe39 	bl	4c2ec <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
   2d67a:	462a      	mov	r2, r5
   2d67c:	1de1      	adds	r1, r4, #7
   2d67e:	f10d 001a 	add.w	r0, sp, #26
   2d682:	f01e fe33 	bl	4c2ec <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
   2d686:	462a      	mov	r2, r5
   2d688:	f104 0109 	add.w	r1, r4, #9
   2d68c:	a807      	add	r0, sp, #28
   2d68e:	f01e fe2d 	bl	4c2ec <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
   2d692:	462a      	mov	r2, r5
   2d694:	f104 010b 	add.w	r1, r4, #11
   2d698:	f10d 001e 	add.w	r0, sp, #30
   2d69c:	f01e fe26 	bl	4c2ec <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
   2d6a0:	f104 010d 	add.w	r1, r4, #13
   2d6a4:	2204      	movs	r2, #4
   2d6a6:	a809      	add	r0, sp, #36	; 0x24
   2d6a8:	f01e fe20 	bl	4c2ec <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   2d6ac:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   2d6b0:	9304      	str	r3, [sp, #16]
   2d6b2:	9b08      	ldr	r3, [sp, #32]
   2d6b4:	9303      	str	r3, [sp, #12]
   2d6b6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2d6ba:	9302      	str	r3, [sp, #8]
   2d6bc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2d6c0:	9301      	str	r3, [sp, #4]
   2d6c2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2d6c6:	9300      	str	r3, [sp, #0]
   2d6c8:	4a05      	ldr	r2, [pc, #20]	; (2d6e0 <bt_uuid_to_str+0xb0>)
   2d6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d6cc:	4639      	mov	r1, r7
   2d6ce:	4630      	mov	r0, r6
   2d6d0:	f01c fd11 	bl	4a0f6 <snprintk>
		break;
   2d6d4:	e7c2      	b.n	2d65c <bt_uuid_to_str+0x2c>
   2d6d6:	bf00      	nop
   2d6d8:	000542fc 	.word	0x000542fc
   2d6dc:	000542df 	.word	0x000542df
   2d6e0:	000542e4 	.word	0x000542e4

0002d6e4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   2d6e4:	b538      	push	{r3, r4, r5, lr}
   2d6e6:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   2d6e8:	4805      	ldr	r0, [pc, #20]	; (2d700 <bt_buf_get_rx+0x1c>)
   2d6ea:	f022 fcee 	bl	500ca <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   2d6ee:	4604      	mov	r4, r0
   2d6f0:	b120      	cbz	r0, 2d6fc <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   2d6f2:	2100      	movs	r1, #0
   2d6f4:	3008      	adds	r0, #8
   2d6f6:	f022 fd0d 	bl	50114 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2d6fa:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   2d6fc:	4620      	mov	r0, r4
   2d6fe:	bd38      	pop	{r3, r4, r5, pc}
   2d700:	20001154 	.word	0x20001154

0002d704 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   2d704:	4b0c      	ldr	r3, [pc, #48]	; (2d738 <bt_buf_get_cmd_complete+0x34>)
   2d706:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
{
   2d70a:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   2d70c:	b933      	cbnz	r3, 2d71c <bt_buf_get_cmd_complete+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2d70e:	4602      	mov	r2, r0
   2d710:	460b      	mov	r3, r1
   2d712:	2001      	movs	r0, #1
}
   2d714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2d718:	f7ff bfe4 	b.w	2d6e4 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   2d71c:	4618      	mov	r0, r3
   2d71e:	f022 fd0a 	bl	50136 <net_buf_ref>
   2d722:	2301      	movs	r3, #1
		buf->len = 0U;
   2d724:	2100      	movs	r1, #0
   2d726:	7503      	strb	r3, [r0, #20]
   2d728:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   2d72a:	4604      	mov	r4, r0
   2d72c:	3008      	adds	r0, #8
   2d72e:	f022 fcf1 	bl	50114 <net_buf_simple_reserve>
}
   2d732:	4620      	mov	r0, r4
   2d734:	bd10      	pop	{r4, pc}
   2d736:	bf00      	nop
   2d738:	20000000 	.word	0x20000000

0002d73c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   2d73c:	b570      	push	{r4, r5, r6, lr}
   2d73e:	4604      	mov	r4, r0
	switch (evt) {
   2d740:	2c0e      	cmp	r4, #14
{
   2d742:	460d      	mov	r5, r1
   2d744:	4610      	mov	r0, r2
   2d746:	4619      	mov	r1, r3
	switch (evt) {
   2d748:	d314      	bcc.n	2d774 <bt_buf_get_evt+0x38>
   2d74a:	2c0f      	cmp	r4, #15
   2d74c:	d90e      	bls.n	2d76c <bt_buf_get_evt+0x30>
   2d74e:	2c13      	cmp	r4, #19
   2d750:	d110      	bne.n	2d774 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   2d752:	480d      	ldr	r0, [pc, #52]	; (2d788 <bt_buf_get_evt+0x4c>)
   2d754:	f022 fcb9 	bl	500ca <net_buf_alloc_fixed>
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
			struct net_buf *buf;

			buf = net_buf_alloc(&discardable_pool, timeout);
			if (buf) {
   2d758:	4604      	mov	r4, r0
   2d75a:	b128      	cbz	r0, 2d768 <bt_buf_get_evt+0x2c>
	net_buf_simple_reserve(&buf->b, reserve);
   2d75c:	2100      	movs	r1, #0
   2d75e:	3008      	adds	r0, #8
   2d760:	f022 fcd8 	bl	50114 <net_buf_simple_reserve>
   2d764:	2301      	movs	r3, #1
   2d766:	7523      	strb	r3, [r4, #20]
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   2d768:	4620      	mov	r0, r4
   2d76a:	bd70      	pop	{r4, r5, r6, pc}
   2d76c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   2d770:	f7ff bfc8 	b.w	2d704 <bt_buf_get_cmd_complete>
	return net_buf_alloc_fixed(pool, timeout);
   2d774:	4602      	mov	r2, r0
   2d776:	460b      	mov	r3, r1
		if (discardable) {
   2d778:	b10d      	cbz	r5, 2d77e <bt_buf_get_evt+0x42>
   2d77a:	4804      	ldr	r0, [pc, #16]	; (2d78c <bt_buf_get_evt+0x50>)
   2d77c:	e7ea      	b.n	2d754 <bt_buf_get_evt+0x18>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2d77e:	2001      	movs	r0, #1
}
   2d780:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2d784:	f7ff bfae 	b.w	2d6e4 <bt_buf_get_rx>
   2d788:	20001180 	.word	0x20001180
   2d78c:	200010d0 	.word	0x200010d0

0002d790 <unpair>:
{
   2d790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d794:	4606      	mov	r6, r0
   2d796:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   2d798:	f01f fe1b 	bl	4d3d2 <bt_conn_lookup_addr_le>
	if (conn) {
   2d79c:	4604      	mov	r4, r0
   2d79e:	b9b0      	cbnz	r0, 2d7ce <unpair+0x3e>
			keys = bt_keys_find_addr(id, addr);
   2d7a0:	4639      	mov	r1, r7
   2d7a2:	4630      	mov	r0, r6
   2d7a4:	f006 fabc 	bl	33d20 <bt_keys_find_addr>
		if (keys) {
   2d7a8:	4605      	mov	r5, r0
   2d7aa:	b110      	cbz	r0, 2d7b2 <unpair+0x22>
			bt_keys_clear(keys);
   2d7ac:	4628      	mov	r0, r5
   2d7ae:	f006 fad7 	bl	33d60 <bt_keys_clear>
	bt_gatt_clear(id, addr);
   2d7b2:	4639      	mov	r1, r7
   2d7b4:	4630      	mov	r0, r6
   2d7b6:	f005 f85f 	bl	32878 <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
   2d7ba:	4b10      	ldr	r3, [pc, #64]	; (2d7fc <unpair+0x6c>)
   2d7bc:	681b      	ldr	r3, [r3, #0]
   2d7be:	b1db      	cbz	r3, 2d7f8 <unpair+0x68>
   2d7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2d7c2:	b1cb      	cbz	r3, 2d7f8 <unpair+0x68>
		bt_auth->bond_deleted(id, addr);
   2d7c4:	4639      	mov	r1, r7
   2d7c6:	4630      	mov	r0, r6
}
   2d7c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
   2d7cc:	4718      	bx	r3
		if (conn->type == BT_CONN_TYPE_LE) {
   2d7ce:	7883      	ldrb	r3, [r0, #2]
   2d7d0:	2b01      	cmp	r3, #1
   2d7d2:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
   2d7d6:	bf04      	itt	eq
   2d7d8:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
   2d7dc:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   2d7e0:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
   2d7e4:	bf18      	it	ne
   2d7e6:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   2d7e8:	f01f fe13 	bl	4d412 <bt_conn_disconnect>
		bt_conn_unref(conn);
   2d7ec:	4620      	mov	r0, r4
   2d7ee:	f01f fd0e 	bl	4d20e <bt_conn_unref>
		if (!keys) {
   2d7f2:	2d00      	cmp	r5, #0
   2d7f4:	d1da      	bne.n	2d7ac <unpair+0x1c>
   2d7f6:	e7d3      	b.n	2d7a0 <unpair+0x10>
}
   2d7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d7fc:	20003ff4 	.word	0x20003ff4

0002d800 <hci_disconn_complete_prio>:
{
   2d800:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2d802:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   2d804:	781a      	ldrb	r2, [r3, #0]
   2d806:	b99a      	cbnz	r2, 2d830 <hci_disconn_complete_prio+0x30>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2d808:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   2d80c:	4620      	mov	r0, r4
   2d80e:	f002 f949 	bl	2faa4 <bt_conn_lookup_handle>
	if (!conn) {
   2d812:	4605      	mov	r5, r0
   2d814:	b968      	cbnz	r0, 2d832 <hci_disconn_complete_prio+0x32>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2d816:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   2d81a:	4a0a      	ldr	r2, [pc, #40]	; (2d844 <hci_disconn_complete_prio+0x44>)
	if (!conn) {
   2d81c:	2306      	movs	r3, #6
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2d81e:	ea6f 5010 	mvn.w	r0, r0, lsr #20
		if (!disconnected_handles[i]) {
   2d822:	f832 1b02 	ldrh.w	r1, [r2], #2
   2d826:	b909      	cbnz	r1, 2d82c <hci_disconn_complete_prio+0x2c>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   2d828:	f822 0c02 	strh.w	r0, [r2, #-2]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2d82c:	3b01      	subs	r3, #1
   2d82e:	d1f8      	bne.n	2d822 <hci_disconn_complete_prio+0x22>
}
   2d830:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2d832:	2101      	movs	r1, #1
   2d834:	f002 f93e 	bl	2fab4 <bt_conn_set_state>
	bt_conn_unref(conn);
   2d838:	4628      	mov	r0, r5
}
   2d83a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2d83e:	f01f bce6 	b.w	4d20e <bt_conn_unref>
   2d842:	bf00      	nop
   2d844:	20006b70 	.word	0x20006b70

0002d848 <hci_encrypt_key_refresh_complete>:
{
   2d848:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   2d84a:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   2d84c:	f8b3 0001 	ldrh.w	r0, [r3, #1]
	uint8_t status = evt->status;
   2d850:	781c      	ldrb	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   2d852:	f002 f927 	bl	2faa4 <bt_conn_lookup_handle>
	if (!conn) {
   2d856:	4605      	mov	r5, r0
   2d858:	b328      	cbz	r0, 2d8a6 <hci_encrypt_key_refresh_complete+0x5e>
	if (status) {
   2d85a:	b164      	cbz	r4, 2d876 <hci_encrypt_key_refresh_complete+0x2e>
	switch (hci_err) {
   2d85c:	2c29      	cmp	r4, #41	; 0x29
   2d85e:	bf96      	itet	ls
   2d860:	4b11      	ldrls	r3, [pc, #68]	; (2d8a8 <hci_encrypt_key_refresh_complete+0x60>)
	if (status) {
   2d862:	2209      	movhi	r2, #9
   2d864:	5d1a      	ldrbls	r2, [r3, r4]
		bt_conn_security_changed(conn, status,
   2d866:	4621      	mov	r1, r4
   2d868:	f002 faf0 	bl	2fe4c <bt_conn_security_changed>
	bt_conn_unref(conn);
   2d86c:	4628      	mov	r0, r5
}
   2d86e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2d872:	f01f bccc 	b.w	4d20e <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   2d876:	7883      	ldrb	r3, [r0, #2]
   2d878:	2b01      	cmp	r3, #1
   2d87a:	d107      	bne.n	2d88c <hci_encrypt_key_refresh_complete+0x44>
		bt_smp_update_keys(conn);
   2d87c:	f022 fb56 	bl	4ff2c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   2d880:	4628      	mov	r0, r5
   2d882:	f01e fe83 	bl	4c58c <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   2d886:	2800      	cmp	r0, #0
   2d888:	bf08      	it	eq
   2d88a:	2405      	moveq	r4, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   2d88c:	4b06      	ldr	r3, [pc, #24]	; (2d8a8 <hci_encrypt_key_refresh_complete+0x60>)
   2d88e:	4621      	mov	r1, r4
   2d890:	5d1a      	ldrb	r2, [r3, r4]
   2d892:	4628      	mov	r0, r5
   2d894:	f002 fada 	bl	2fe4c <bt_conn_security_changed>
	if (status) {
   2d898:	2c00      	cmp	r4, #0
   2d89a:	d0e7      	beq.n	2d86c <hci_encrypt_key_refresh_complete+0x24>
		bt_conn_disconnect(conn, status);
   2d89c:	4621      	mov	r1, r4
   2d89e:	4628      	mov	r0, r5
   2d8a0:	f01f fdb7 	bl	4d412 <bt_conn_disconnect>
   2d8a4:	e7e2      	b.n	2d86c <hci_encrypt_key_refresh_complete+0x24>
}
   2d8a6:	bd38      	pop	{r3, r4, r5, pc}
   2d8a8:	00054315 	.word	0x00054315

0002d8ac <hci_encrypt_change>:
{
   2d8ac:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   2d8ae:	6886      	ldr	r6, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   2d8b0:	f8b6 0001 	ldrh.w	r0, [r6, #1]
	uint8_t status = evt->status;
   2d8b4:	7834      	ldrb	r4, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   2d8b6:	f002 f8f5 	bl	2faa4 <bt_conn_lookup_handle>
	if (!conn) {
   2d8ba:	4605      	mov	r5, r0
   2d8bc:	b340      	cbz	r0, 2d910 <hci_encrypt_change+0x64>
	if (status) {
   2d8be:	b164      	cbz	r4, 2d8da <hci_encrypt_change+0x2e>
	switch (hci_err) {
   2d8c0:	2c29      	cmp	r4, #41	; 0x29
   2d8c2:	bf96      	itet	ls
   2d8c4:	4b13      	ldrls	r3, [pc, #76]	; (2d914 <hci_encrypt_change+0x68>)
	if (status) {
   2d8c6:	2209      	movhi	r2, #9
   2d8c8:	5d1a      	ldrbls	r2, [r3, r4]
		bt_conn_security_changed(conn, status,
   2d8ca:	4621      	mov	r1, r4
   2d8cc:	f002 fabe 	bl	2fe4c <bt_conn_security_changed>
	bt_conn_unref(conn);
   2d8d0:	4628      	mov	r0, r5
}
   2d8d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   2d8d6:	f01f bc9a 	b.w	4d20e <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   2d8da:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   2d8dc:	78f3      	ldrb	r3, [r6, #3]
   2d8de:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   2d8e0:	2a01      	cmp	r2, #1
   2d8e2:	d108      	bne.n	2d8f6 <hci_encrypt_change+0x4a>
		if (conn->encrypt) {
   2d8e4:	b10b      	cbz	r3, 2d8ea <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
   2d8e6:	f022 fb21 	bl	4ff2c <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   2d8ea:	4628      	mov	r0, r5
   2d8ec:	f01e fe4e 	bl	4c58c <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   2d8f0:	2800      	cmp	r0, #0
   2d8f2:	bf08      	it	eq
   2d8f4:	2405      	moveq	r4, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   2d8f6:	4b07      	ldr	r3, [pc, #28]	; (2d914 <hci_encrypt_change+0x68>)
   2d8f8:	4621      	mov	r1, r4
   2d8fa:	5d1a      	ldrb	r2, [r3, r4]
   2d8fc:	4628      	mov	r0, r5
   2d8fe:	f002 faa5 	bl	2fe4c <bt_conn_security_changed>
	if (status) {
   2d902:	2c00      	cmp	r4, #0
   2d904:	d0e4      	beq.n	2d8d0 <hci_encrypt_change+0x24>
		bt_conn_disconnect(conn, status);
   2d906:	4621      	mov	r1, r4
   2d908:	4628      	mov	r0, r5
   2d90a:	f01f fd82 	bl	4d412 <bt_conn_disconnect>
   2d90e:	e7df      	b.n	2d8d0 <hci_encrypt_change+0x24>
}
   2d910:	bd70      	pop	{r4, r5, r6, pc}
   2d912:	bf00      	nop
   2d914:	00054315 	.word	0x00054315

0002d918 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2d918:	281a      	cmp	r0, #26
   2d91a:	d80b      	bhi.n	2d934 <bt_hci_evt_get_flags+0x1c>
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
   2d91c:	2301      	movs	r3, #1
   2d91e:	4a07      	ldr	r2, [pc, #28]	; (2d93c <bt_hci_evt_get_flags+0x24>)
   2d920:	fa03 f000 	lsl.w	r0, r3, r0
   2d924:	4210      	tst	r0, r2
   2d926:	d107      	bne.n	2d938 <bt_hci_evt_get_flags+0x20>
   2d928:	f010 0f20 	tst.w	r0, #32
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   2d92c:	bf0c      	ite	eq
   2d92e:	2002      	moveq	r0, #2
   2d930:	2003      	movne	r0, #3
   2d932:	4770      	bx	lr
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2d934:	2002      	movs	r0, #2
   2d936:	4770      	bx	lr
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   2d938:	4618      	mov	r0, r3
	}
}
   2d93a:	4770      	bx	lr
   2d93c:	0408c000 	.word	0x0408c000

0002d940 <hci_le_meta_event>:
{
   2d940:	b510      	push	{r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   2d942:	2101      	movs	r1, #1
   2d944:	4604      	mov	r4, r0
   2d946:	3008      	adds	r0, #8
   2d948:	f022 fc56 	bl	501f8 <net_buf_simple_pull_mem>
	for (i = 0; i < num_handlers; i++) {
   2d94c:	4621      	mov	r1, r4
   2d94e:	230b      	movs	r3, #11
   2d950:	4a02      	ldr	r2, [pc, #8]	; (2d95c <hci_le_meta_event+0x1c>)
   2d952:	7800      	ldrb	r0, [r0, #0]
}
   2d954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d958:	f01e be90 	b.w	4c67c <handle_event.part.7>
   2d95c:	00052950 	.word	0x00052950

0002d960 <find_pending_connect.part.8>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   2d960:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   2d962:	4c0c      	ldr	r4, [pc, #48]	; (2d994 <find_pending_connect.part.8+0x34>)
   2d964:	4601      	mov	r1, r0
   2d966:	2205      	movs	r2, #5
   2d968:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   2d96c:	f002 fadc 	bl	2ff28 <bt_conn_lookup_state_le>
		if (!conn) {
   2d970:	b970      	cbnz	r0, 2d990 <find_pending_connect.part.8+0x30>
						       BT_ADDR_LE_NONE,
   2d972:	4b09      	ldr	r3, [pc, #36]	; (2d998 <find_pending_connect.part.8+0x38>)
   2d974:	6818      	ldr	r0, [r3, #0]
   2d976:	889a      	ldrh	r2, [r3, #4]
   2d978:	9000      	str	r0, [sp, #0]
   2d97a:	799b      	ldrb	r3, [r3, #6]
   2d97c:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2d980:	4669      	mov	r1, sp
   2d982:	2204      	movs	r2, #4
   2d984:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   2d988:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   2d98c:	f002 facc 	bl	2ff28 <bt_conn_lookup_state_le>
}
   2d990:	b002      	add	sp, #8
   2d992:	bd10      	pop	{r4, pc}
   2d994:	20000000 	.word	0x20000000
   2d998:	00051e4c 	.word	0x00051e4c

0002d99c <hci_cmd_done>:
{
   2d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d99e:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2d9a0:	7990      	ldrb	r0, [r2, #6]
{
   2d9a2:	460f      	mov	r7, r1
   2d9a4:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   2d9a6:	f016 fa9f 	bl	43ee8 <net_buf_pool_get>
   2d9aa:	4b2c      	ldr	r3, [pc, #176]	; (2da5c <hci_cmd_done+0xc0>)
   2d9ac:	4283      	cmp	r3, r0
   2d9ae:	d154      	bne.n	2da5a <hci_cmd_done+0xbe>
	if (cmd(buf)->opcode != opcode) {
   2d9b0:	4628      	mov	r0, r5
   2d9b2:	f016 faa1 	bl	43ef8 <net_buf_id>
   2d9b6:	4c2a      	ldr	r4, [pc, #168]	; (2da60 <hci_cmd_done+0xc4>)
   2d9b8:	230c      	movs	r3, #12
   2d9ba:	fb03 4000 	mla	r0, r3, r0, r4
   2d9be:	8843      	ldrh	r3, [r0, #2]
   2d9c0:	42b3      	cmp	r3, r6
   2d9c2:	d14a      	bne.n	2da5a <hci_cmd_done+0xbe>
	if (bt_dev.sent_cmd) {
   2d9c4:	4e27      	ldr	r6, [pc, #156]	; (2da64 <hci_cmd_done+0xc8>)
   2d9c6:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   2d9ca:	b120      	cbz	r0, 2d9d6 <hci_cmd_done+0x3a>
		net_buf_unref(bt_dev.sent_cmd);
   2d9cc:	f016 fb4c 	bl	44068 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2d9d0:	2300      	movs	r3, #0
   2d9d2:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   2d9d6:	4628      	mov	r0, r5
   2d9d8:	f016 fa8e 	bl	43ef8 <net_buf_id>
   2d9dc:	260c      	movs	r6, #12
   2d9de:	fb06 4000 	mla	r0, r6, r0, r4
   2d9e2:	6843      	ldr	r3, [r0, #4]
   2d9e4:	b19b      	cbz	r3, 2da0e <hci_cmd_done+0x72>
   2d9e6:	b997      	cbnz	r7, 2da0e <hci_cmd_done+0x72>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   2d9e8:	4628      	mov	r0, r5
   2d9ea:	f016 fa85 	bl	43ef8 <net_buf_id>
   2d9ee:	fb06 4000 	mla	r0, r6, r0, r4
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d9f2:	2101      	movs	r1, #1
   2d9f4:	6842      	ldr	r2, [r0, #4]
   2d9f6:	e9d2 3000 	ldrd	r3, r0, [r2]
	if (val) {
   2d9fa:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   2d9fc:	f000 061f 	and.w	r6, r0, #31
   2da00:	40b1      	lsls	r1, r6
	if (val) {
   2da02:	0940      	lsrs	r0, r0, #5
   2da04:	b1d2      	cbz	r2, 2da3c <hci_cmd_done+0xa0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2da06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2da0a:	f01e fdda 	bl	4c5c2 <atomic_or>
	if (cmd(buf)->sync) {
   2da0e:	4628      	mov	r0, r5
   2da10:	f016 fa72 	bl	43ef8 <net_buf_id>
   2da14:	260c      	movs	r6, #12
   2da16:	fb06 4000 	mla	r0, r6, r0, r4
   2da1a:	6883      	ldr	r3, [r0, #8]
   2da1c:	b1eb      	cbz	r3, 2da5a <hci_cmd_done+0xbe>
		cmd(buf)->status = status;
   2da1e:	4628      	mov	r0, r5
   2da20:	f016 fa6a 	bl	43ef8 <net_buf_id>
   2da24:	4370      	muls	r0, r6
   2da26:	5427      	strb	r7, [r4, r0]
		k_sem_give(cmd(buf)->sync);
   2da28:	4628      	mov	r0, r5
   2da2a:	f016 fa65 	bl	43ef8 <net_buf_id>
   2da2e:	fb06 4000 	mla	r0, r6, r0, r4
   2da32:	6880      	ldr	r0, [r0, #8]
}
   2da34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2da38:	f01a bf3e 	b.w	488b8 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2da3c:	43c9      	mvns	r1, r1
   2da3e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   2da42:	f3bf 8f5b 	dmb	ish
   2da46:	e853 2f00 	ldrex	r2, [r3]
   2da4a:	400a      	ands	r2, r1
   2da4c:	e843 2000 	strex	r0, r2, [r3]
   2da50:	2800      	cmp	r0, #0
   2da52:	d1f8      	bne.n	2da46 <hci_cmd_done+0xaa>
   2da54:	f3bf 8f5b 	dmb	ish
   2da58:	e7d9      	b.n	2da0e <hci_cmd_done+0x72>
   2da5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2da5c:	20001128 	.word	0x20001128
   2da60:	20003fc0 	.word	0x20003fc0
   2da64:	20000000 	.word	0x20000000

0002da68 <hci_cmd_status>:
{
   2da68:	b538      	push	{r3, r4, r5, lr}
   2da6a:	2104      	movs	r1, #4
   2da6c:	4604      	mov	r4, r0
   2da6e:	3008      	adds	r0, #8
   2da70:	f022 fbc2 	bl	501f8 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   2da74:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   2da76:	7801      	ldrb	r1, [r0, #0]
   2da78:	8840      	ldrh	r0, [r0, #2]
   2da7a:	4622      	mov	r2, r4
   2da7c:	f7ff ff8e 	bl	2d99c <hci_cmd_done>
	if (ncmd) {
   2da80:	b125      	cbz	r5, 2da8c <hci_cmd_status+0x24>
   2da82:	4803      	ldr	r0, [pc, #12]	; (2da90 <hci_cmd_status+0x28>)
}
   2da84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2da88:	f01a bf16 	b.w	488b8 <z_impl_k_sem_give>
   2da8c:	bd38      	pop	{r3, r4, r5, pc}
   2da8e:	bf00      	nop
   2da90:	20000120 	.word	0x20000120

0002da94 <hci_cmd_complete>:
{
   2da94:	b538      	push	{r3, r4, r5, lr}
   2da96:	2103      	movs	r1, #3
   2da98:	4604      	mov	r4, r0
   2da9a:	3008      	adds	r0, #8
   2da9c:	f022 fbac 	bl	501f8 <net_buf_simple_pull_mem>
	status = buf->data[0];
   2daa0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   2daa2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   2daa4:	7819      	ldrb	r1, [r3, #0]
   2daa6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   2daaa:	4622      	mov	r2, r4
   2daac:	f7ff ff76 	bl	2d99c <hci_cmd_done>
	if (ncmd) {
   2dab0:	b125      	cbz	r5, 2dabc <hci_cmd_complete+0x28>
   2dab2:	4803      	ldr	r0, [pc, #12]	; (2dac0 <hci_cmd_complete+0x2c>)
}
   2dab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2dab8:	f01a befe 	b.w	488b8 <z_impl_k_sem_give>
   2dabc:	bd38      	pop	{r3, r4, r5, pc}
   2dabe:	bf00      	nop
   2dac0:	20000120 	.word	0x20000120

0002dac4 <hci_tx_thread>:
{
   2dac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   2dac8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 2dbd8 <hci_tx_thread+0x114>
		BT_ASSERT(err == 0);
   2dacc:	f8df a120 	ldr.w	sl, [pc, #288]	; 2dbf0 <hci_tx_thread+0x12c>
		events[0].state = K_POLL_STATE_NOT_READY;
   2dad0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2dad4:	483f      	ldr	r0, [pc, #252]	; (2dbd4 <hci_tx_thread+0x110>)
		events[0].state = K_POLL_STATE_NOT_READY;
   2dad6:	f36f 3352 	bfc	r3, #13, #6
   2dada:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   2dade:	f001 ff95 	bl	2fa0c <bt_conn_prepare_events>
   2dae2:	1c47      	adds	r7, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   2dae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2dae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2daec:	4639      	mov	r1, r7
   2daee:	483a      	ldr	r0, [pc, #232]	; (2dbd8 <hci_tx_thread+0x114>)
   2daf0:	f01b fe8c 	bl	4980c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   2daf4:	b160      	cbz	r0, 2db10 <hci_tx_thread+0x4c>
   2daf6:	f640 1393 	movw	r3, #2451	; 0x993
   2dafa:	4652      	mov	r2, sl
   2dafc:	4937      	ldr	r1, [pc, #220]	; (2dbdc <hci_tx_thread+0x118>)
   2dafe:	4838      	ldr	r0, [pc, #224]	; (2dbe0 <hci_tx_thread+0x11c>)
   2db00:	f01c faec 	bl	4a0dc <printk>
   2db04:	4040      	eors	r0, r0
   2db06:	f380 8811 	msr	BASEPRI, r0
   2db0a:	f04f 0003 	mov.w	r0, #3
   2db0e:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2db10:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 2dbf4 <hci_tx_thread+0x130>
{
   2db14:	4d30      	ldr	r5, [pc, #192]	; (2dbd8 <hci_tx_thread+0x114>)
	return z_impl_k_sem_take(sem, timeout);
   2db16:	f5a9 769e 	sub.w	r6, r9, #316	; 0x13c
   2db1a:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
   2db1e:	b917      	cbnz	r7, 2db26 <hci_tx_thread+0x62>
	z_impl_k_yield();
   2db20:	f01b fb24 	bl	4916c <z_impl_k_yield>
   2db24:	e7d4      	b.n	2dad0 <hci_tx_thread+0xc>
		switch (ev->state) {
   2db26:	68eb      	ldr	r3, [r5, #12]
   2db28:	f3c3 3345 	ubfx	r3, r3, #13, #6
   2db2c:	2b04      	cmp	r3, #4
   2db2e:	d147      	bne.n	2dbc0 <hci_tx_thread+0xfc>
			if (ev->tag == BT_EVENT_CMD_TX) {
   2db30:	7b2b      	ldrb	r3, [r5, #12]
   2db32:	2b00      	cmp	r3, #0
   2db34:	d147      	bne.n	2dbc6 <hci_tx_thread+0x102>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   2db36:	2200      	movs	r2, #0
   2db38:	2300      	movs	r3, #0
   2db3a:	4648      	mov	r0, r9
   2db3c:	f022 faca 	bl	500d4 <net_buf_get>
	BT_ASSERT(buf);
   2db40:	4604      	mov	r4, r0
   2db42:	b960      	cbnz	r0, 2db5e <hci_tx_thread+0x9a>
   2db44:	f640 132a 	movw	r3, #2346	; 0x92a
   2db48:	4652      	mov	r2, sl
   2db4a:	4926      	ldr	r1, [pc, #152]	; (2dbe4 <hci_tx_thread+0x120>)
   2db4c:	4824      	ldr	r0, [pc, #144]	; (2dbe0 <hci_tx_thread+0x11c>)
   2db4e:	f01c fac5 	bl	4a0dc <printk>
   2db52:	4040      	eors	r0, r0
   2db54:	f380 8811 	msr	BASEPRI, r0
   2db58:	f04f 0003 	mov.w	r0, #3
   2db5c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   2db5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2db62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2db66:	4658      	mov	r0, fp
   2db68:	f01a fecc 	bl	48904 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   2db6c:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   2db70:	b120      	cbz	r0, 2db7c <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
   2db72:	f016 fa79 	bl	44068 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2db76:	2300      	movs	r3, #0
   2db78:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   2db7c:	4620      	mov	r0, r4
   2db7e:	f022 fada 	bl	50136 <net_buf_ref>
   2db82:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   2db86:	4620      	mov	r0, r4
   2db88:	f7ff fbda 	bl	2d340 <bt_hci_ecc_send>
	if (err) {
   2db8c:	b1c0      	cbz	r0, 2dbc0 <hci_tx_thread+0xfc>
	z_impl_k_sem_give(sem);
   2db8e:	4816      	ldr	r0, [pc, #88]	; (2dbe8 <hci_tx_thread+0x124>)
   2db90:	f01a fe92 	bl	488b8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   2db94:	4620      	mov	r0, r4
   2db96:	f016 f9af 	bl	43ef8 <net_buf_id>
   2db9a:	4a14      	ldr	r2, [pc, #80]	; (2dbec <hci_tx_thread+0x128>)
   2db9c:	230c      	movs	r3, #12
   2db9e:	fb03 2000 	mla	r0, r3, r0, r2
   2dba2:	211f      	movs	r1, #31
   2dba4:	4622      	mov	r2, r4
   2dba6:	8840      	ldrh	r0, [r0, #2]
   2dba8:	f7ff fef8 	bl	2d99c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   2dbac:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   2dbb0:	f016 fa5a 	bl	44068 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   2dbb4:	2300      	movs	r3, #0
		net_buf_unref(buf);
   2dbb6:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   2dbb8:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
		net_buf_unref(buf);
   2dbbc:	f016 fa54 	bl	44068 <net_buf_unref>
	for (; count; ev++, count--) {
   2dbc0:	3514      	adds	r5, #20
   2dbc2:	3f01      	subs	r7, #1
   2dbc4:	e7ab      	b.n	2db1e <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   2dbc6:	2b01      	cmp	r3, #1
   2dbc8:	d1fa      	bne.n	2dbc0 <hci_tx_thread+0xfc>
					conn = CONTAINER_OF(ev->fifo,
   2dbca:	6928      	ldr	r0, [r5, #16]
					bt_conn_process_tx(conn);
   2dbcc:	3838      	subs	r0, #56	; 0x38
   2dbce:	f002 fbff 	bl	303d0 <bt_conn_process_tx>
   2dbd2:	e7f5      	b.n	2dbc0 <hci_tx_thread+0xfc>
   2dbd4:	20000520 	.word	0x20000520
   2dbd8:	2000050c 	.word	0x2000050c
   2dbdc:	0005441c 	.word	0x0005441c
   2dbe0:	00054425 	.word	0x00054425
   2dbe4:	00054442 	.word	0x00054442
   2dbe8:	20000120 	.word	0x20000120
   2dbec:	20003fc0 	.word	0x20003fc0
   2dbf0:	000543e8 	.word	0x000543e8
   2dbf4:	2000013c 	.word	0x2000013c

0002dbf8 <bt_hci_cmd_state_set_init>:
{
   2dbf8:	b510      	push	{r4, lr}
	state->bit = bit;
   2dbfa:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   2dbfe:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2dc02:	720b      	strb	r3, [r1, #8]
{
   2dc04:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   2dc06:	f016 f977 	bl	43ef8 <net_buf_id>
   2dc0a:	4a03      	ldr	r2, [pc, #12]	; (2dc18 <bt_hci_cmd_state_set_init+0x20>)
   2dc0c:	230c      	movs	r3, #12
   2dc0e:	fb03 2000 	mla	r0, r3, r0, r2
   2dc12:	6044      	str	r4, [r0, #4]
}
   2dc14:	bd10      	pop	{r4, pc}
   2dc16:	bf00      	nop
   2dc18:	20003fc0 	.word	0x20003fc0

0002dc1c <bt_hci_cmd_create>:
{
   2dc1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   2dc20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2dc24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2dc28:	4682      	mov	sl, r0
   2dc2a:	4816      	ldr	r0, [pc, #88]	; (2dc84 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   2dc2c:	4f16      	ldr	r7, [pc, #88]	; (2dc88 <bt_hci_cmd_create+0x6c>)
{
   2dc2e:	4689      	mov	r9, r1
   2dc30:	f022 fa4b 	bl	500ca <net_buf_alloc_fixed>
   2dc34:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   2dc36:	f100 0808 	add.w	r8, r0, #8
   2dc3a:	2100      	movs	r1, #0
   2dc3c:	2600      	movs	r6, #0
   2dc3e:	4640      	mov	r0, r8
   2dc40:	f022 fa68 	bl	50114 <net_buf_simple_reserve>
   2dc44:	7526      	strb	r6, [r4, #20]
	cmd(buf)->opcode = opcode;
   2dc46:	4620      	mov	r0, r4
   2dc48:	f016 f956 	bl	43ef8 <net_buf_id>
   2dc4c:	250c      	movs	r5, #12
   2dc4e:	fb05 7000 	mla	r0, r5, r0, r7
   2dc52:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   2dc56:	4620      	mov	r0, r4
   2dc58:	f016 f94e 	bl	43ef8 <net_buf_id>
   2dc5c:	fb05 7000 	mla	r0, r5, r0, r7
   2dc60:	6086      	str	r6, [r0, #8]
	cmd(buf)->state = NULL;
   2dc62:	4620      	mov	r0, r4
   2dc64:	f016 f948 	bl	43ef8 <net_buf_id>
   2dc68:	fb05 7000 	mla	r0, r5, r0, r7
	return net_buf_simple_add(&buf->b, len);
   2dc6c:	2103      	movs	r1, #3
   2dc6e:	6046      	str	r6, [r0, #4]
   2dc70:	4640      	mov	r0, r8
   2dc72:	f022 fa90 	bl	50196 <net_buf_simple_add>
	hdr->param_len = param_len;
   2dc76:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   2dc7a:	f8a0 a000 	strh.w	sl, [r0]
}
   2dc7e:	4620      	mov	r0, r4
   2dc80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc84:	20001128 	.word	0x20001128
   2dc88:	20003fc0 	.word	0x20003fc0

0002dc8c <bt_hci_cmd_send>:
{
   2dc8c:	b538      	push	{r3, r4, r5, lr}
   2dc8e:	4605      	mov	r5, r0
	if (!buf) {
   2dc90:	460c      	mov	r4, r1
   2dc92:	b919      	cbnz	r1, 2dc9c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   2dc94:	f7ff ffc2 	bl	2dc1c <bt_hci_cmd_create>
		if (!buf) {
   2dc98:	4604      	mov	r4, r0
   2dc9a:	b198      	cbz	r0, 2dcc4 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   2dc9c:	f640 4335 	movw	r3, #3125	; 0xc35
   2dca0:	429d      	cmp	r5, r3
   2dca2:	d109      	bne.n	2dcb8 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
   2dca4:	4620      	mov	r0, r4
   2dca6:	f7ff fb4b 	bl	2d340 <bt_hci_ecc_send>
		if (err) {
   2dcaa:	4605      	mov	r5, r0
   2dcac:	b110      	cbz	r0, 2dcb4 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
   2dcae:	4620      	mov	r0, r4
   2dcb0:	f016 f9da 	bl	44068 <net_buf_unref>
}
   2dcb4:	4628      	mov	r0, r5
   2dcb6:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   2dcb8:	4621      	mov	r1, r4
   2dcba:	4804      	ldr	r0, [pc, #16]	; (2dccc <bt_hci_cmd_send+0x40>)
   2dcbc:	f022 fa2e 	bl	5011c <net_buf_put>
	return 0;
   2dcc0:	2500      	movs	r5, #0
   2dcc2:	e7f7      	b.n	2dcb4 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
   2dcc4:	f06f 0568 	mvn.w	r5, #104	; 0x68
   2dcc8:	e7f4      	b.n	2dcb4 <bt_hci_cmd_send+0x28>
   2dcca:	bf00      	nop
   2dccc:	2000013c 	.word	0x2000013c

0002dcd0 <bt_hci_cmd_send_sync>:
{
   2dcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dcd2:	4614      	mov	r4, r2
   2dcd4:	b087      	sub	sp, #28
	if (!buf) {
   2dcd6:	460d      	mov	r5, r1
   2dcd8:	b921      	cbnz	r1, 2dce4 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
   2dcda:	f7ff ff9f 	bl	2dc1c <bt_hci_cmd_create>
		if (!buf) {
   2dcde:	4605      	mov	r5, r0
   2dce0:	2800      	cmp	r0, #0
   2dce2:	d048      	beq.n	2dd76 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2dce4:	2201      	movs	r2, #1
   2dce6:	2100      	movs	r1, #0
   2dce8:	4668      	mov	r0, sp
   2dcea:	f023 f9c0 	bl	5106e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   2dcee:	4628      	mov	r0, r5
   2dcf0:	f016 f902 	bl	43ef8 <net_buf_id>
   2dcf4:	4e21      	ldr	r6, [pc, #132]	; (2dd7c <bt_hci_cmd_send_sync+0xac>)
   2dcf6:	230c      	movs	r3, #12
   2dcf8:	fb03 6000 	mla	r0, r3, r0, r6
   2dcfc:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   2dd00:	4628      	mov	r0, r5
   2dd02:	f022 fa18 	bl	50136 <net_buf_ref>
   2dd06:	4601      	mov	r1, r0
   2dd08:	481d      	ldr	r0, [pc, #116]	; (2dd80 <bt_hci_cmd_send_sync+0xb0>)
   2dd0a:	f022 fa07 	bl	5011c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   2dd0e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2dd12:	2300      	movs	r3, #0
   2dd14:	4668      	mov	r0, sp
   2dd16:	f01a fdf5 	bl	48904 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   2dd1a:	4607      	mov	r7, r0
   2dd1c:	b180      	cbz	r0, 2dd40 <bt_hci_cmd_send_sync+0x70>
   2dd1e:	f240 1331 	movw	r3, #305	; 0x131
   2dd22:	4a18      	ldr	r2, [pc, #96]	; (2dd84 <bt_hci_cmd_send_sync+0xb4>)
   2dd24:	4918      	ldr	r1, [pc, #96]	; (2dd88 <bt_hci_cmd_send_sync+0xb8>)
   2dd26:	4819      	ldr	r0, [pc, #100]	; (2dd8c <bt_hci_cmd_send_sync+0xbc>)
   2dd28:	f01c f9d8 	bl	4a0dc <printk>
   2dd2c:	4639      	mov	r1, r7
   2dd2e:	4818      	ldr	r0, [pc, #96]	; (2dd90 <bt_hci_cmd_send_sync+0xc0>)
   2dd30:	f01c f9d4 	bl	4a0dc <printk>
   2dd34:	4040      	eors	r0, r0
   2dd36:	f380 8811 	msr	BASEPRI, r0
   2dd3a:	f04f 0003 	mov.w	r0, #3
   2dd3e:	df02      	svc	2
	status = cmd(buf)->status;
   2dd40:	4628      	mov	r0, r5
   2dd42:	f016 f8d9 	bl	43ef8 <net_buf_id>
   2dd46:	230c      	movs	r3, #12
   2dd48:	4358      	muls	r0, r3
   2dd4a:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   2dd4c:	b156      	cbz	r6, 2dd64 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
   2dd4e:	4628      	mov	r0, r5
   2dd50:	f016 f98a 	bl	44068 <net_buf_unref>
			return -EIO;
   2dd54:	2e09      	cmp	r6, #9
   2dd56:	bf0c      	ite	eq
   2dd58:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   2dd5c:	f06f 0004 	mvnne.w	r0, #4
}
   2dd60:	b007      	add	sp, #28
   2dd62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   2dd64:	b114      	cbz	r4, 2dd6c <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
   2dd66:	6025      	str	r5, [r4, #0]
	return 0;
   2dd68:	4630      	mov	r0, r6
   2dd6a:	e7f9      	b.n	2dd60 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
   2dd6c:	4628      	mov	r0, r5
   2dd6e:	f016 f97b 	bl	44068 <net_buf_unref>
	return 0;
   2dd72:	4620      	mov	r0, r4
   2dd74:	e7f4      	b.n	2dd60 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
   2dd76:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2dd7a:	e7f1      	b.n	2dd60 <bt_hci_cmd_send_sync+0x90>
   2dd7c:	20003fc0 	.word	0x20003fc0
   2dd80:	2000013c 	.word	0x2000013c
   2dd84:	000543e8 	.word	0x000543e8
   2dd88:	0005441c 	.word	0x0005441c
   2dd8c:	00054425 	.word	0x00054425
   2dd90:	00054345 	.word	0x00054345

0002dd94 <bt_get_phy>:
	switch (hci_phy) {
   2dd94:	3801      	subs	r0, #1
   2dd96:	b2c0      	uxtb	r0, r0
   2dd98:	2802      	cmp	r0, #2
   2dd9a:	bf9a      	itte	ls
   2dd9c:	4b01      	ldrls	r3, [pc, #4]	; (2dda4 <bt_get_phy+0x10>)
   2dd9e:	5c18      	ldrbls	r0, [r3, r0]
{
   2dda0:	2000      	movhi	r0, #0
}
   2dda2:	4770      	bx	lr
   2dda4:	00054312 	.word	0x00054312

0002dda8 <bt_le_create_conn_legacy>:
{
   2dda8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2ddac:	4605      	mov	r5, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   2ddae:	f10d 0103 	add.w	r1, sp, #3
   2ddb2:	2000      	movs	r0, #0
   2ddb4:	f000 fe66 	bl	2ea84 <bt_id_set_create_conn_own_addr>
	if (err) {
   2ddb8:	4606      	mov	r6, r0
   2ddba:	2800      	cmp	r0, #0
   2ddbc:	d150      	bne.n	2de60 <bt_le_create_conn_legacy+0xb8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   2ddbe:	2119      	movs	r1, #25
   2ddc0:	f242 000d 	movw	r0, #8205	; 0x200d
   2ddc4:	f7ff ff2a 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   2ddc8:	4607      	mov	r7, r0
   2ddca:	2800      	cmp	r0, #0
   2ddcc:	d04f      	beq.n	2de6e <bt_le_create_conn_legacy+0xc6>
   2ddce:	2119      	movs	r1, #25
   2ddd0:	3008      	adds	r0, #8
   2ddd2:	f022 f9e0 	bl	50196 <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
   2ddd6:	4631      	mov	r1, r6
   2ddd8:	4604      	mov	r4, r0
   2ddda:	2219      	movs	r2, #25
   2dddc:	f01e fa91 	bl	4c302 <memset>
		if (!bt_dev.le.rl_size ||
   2dde0:	4e24      	ldr	r6, [pc, #144]	; (2de74 <bt_le_create_conn_legacy+0xcc>)
	cp->own_addr_type = own_addr_type;
   2dde2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2dde6:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
   2dde8:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   2ddec:	2b00      	cmp	r3, #0
   2ddee:	d03b      	beq.n	2de68 <bt_le_create_conn_legacy+0xc0>
   2ddf0:	f896 2119 	ldrb.w	r2, [r6, #281]	; 0x119
   2ddf4:	429a      	cmp	r2, r3
   2ddf6:	d837      	bhi.n	2de68 <bt_le_create_conn_legacy+0xc0>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   2ddf8:	f105 0188 	add.w	r1, r5, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   2ddfc:	1d60      	adds	r0, r4, #5
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   2ddfe:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   2de02:	f01e fbdb 	bl	4c5bc <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   2de06:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   2de0a:	89b3      	ldrh	r3, [r6, #12]
   2de0c:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   2de0e:	89f3      	ldrh	r3, [r6, #14]
   2de10:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   2de12:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   2de16:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   2de1a:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   2de1e:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   2de22:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   2de26:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   2de2a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
   2de2e:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
   2de32:	4b11      	ldr	r3, [pc, #68]	; (2de78 <bt_le_create_conn_legacy+0xd0>)
   2de34:	9301      	str	r3, [sp, #4]
	state->bit = bit;
   2de36:	230b      	movs	r3, #11
   2de38:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = state;
   2de3a:	4638      	mov	r0, r7
	state->val = val;
   2de3c:	2301      	movs	r3, #1
   2de3e:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = state;
   2de42:	f016 f859 	bl	43ef8 <net_buf_id>
   2de46:	4a0d      	ldr	r2, [pc, #52]	; (2de7c <bt_le_create_conn_legacy+0xd4>)
   2de48:	230c      	movs	r3, #12
   2de4a:	fb03 2000 	mla	r0, r3, r0, r2
   2de4e:	ab01      	add	r3, sp, #4
   2de50:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   2de52:	4642      	mov	r2, r8
   2de54:	4639      	mov	r1, r7
   2de56:	f242 000d 	movw	r0, #8205	; 0x200d
   2de5a:	f7ff ff39 	bl	2dcd0 <bt_hci_cmd_send_sync>
   2de5e:	4606      	mov	r6, r0
}
   2de60:	4630      	mov	r0, r6
   2de62:	b004      	add	sp, #16
   2de64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			peer_addr = &conn->le.resp_addr;
   2de68:	f105 0196 	add.w	r1, r5, #150	; 0x96
   2de6c:	e7c6      	b.n	2ddfc <bt_le_create_conn_legacy+0x54>
		return -ENOBUFS;
   2de6e:	f06f 0668 	mvn.w	r6, #104	; 0x68
   2de72:	e7f5      	b.n	2de60 <bt_le_create_conn_legacy+0xb8>
   2de74:	20000000 	.word	0x20000000
   2de78:	200000cc 	.word	0x200000cc
   2de7c:	20003fc0 	.word	0x20003fc0

0002de80 <bt_le_create_conn_cancel>:
{
   2de80:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2de82:	2100      	movs	r1, #0
{
   2de84:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2de86:	f242 000e 	movw	r0, #8206	; 0x200e
   2de8a:	f7ff fec7 	bl	2dc1c <bt_hci_cmd_create>
	state->target = target;
   2de8e:	4b0c      	ldr	r3, [pc, #48]	; (2dec0 <bt_le_create_conn_cancel+0x40>)
   2de90:	9301      	str	r3, [sp, #4]
	state->val = val;
   2de92:	2400      	movs	r4, #0
	state->bit = bit;
   2de94:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   2de96:	4605      	mov	r5, r0
	state->bit = bit;
   2de98:	9302      	str	r3, [sp, #8]
	state->val = val;
   2de9a:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = state;
   2de9e:	f016 f82b 	bl	43ef8 <net_buf_id>
   2dea2:	4a08      	ldr	r2, [pc, #32]	; (2dec4 <bt_le_create_conn_cancel+0x44>)
   2dea4:	230c      	movs	r3, #12
   2dea6:	fb03 2000 	mla	r0, r3, r0, r2
   2deaa:	ab01      	add	r3, sp, #4
   2deac:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   2deae:	4622      	mov	r2, r4
   2deb0:	4629      	mov	r1, r5
   2deb2:	f242 000e 	movw	r0, #8206	; 0x200e
   2deb6:	f7ff ff0b 	bl	2dcd0 <bt_hci_cmd_send_sync>
}
   2deba:	b005      	add	sp, #20
   2debc:	bd30      	pop	{r4, r5, pc}
   2debe:	bf00      	nop
   2dec0:	200000cc 	.word	0x200000cc
   2dec4:	20003fc0 	.word	0x20003fc0

0002dec8 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   2dec8:	7b43      	ldrb	r3, [r0, #13]
   2deca:	2b07      	cmp	r3, #7
{
   2decc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2dece:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   2ded0:	d11f      	bne.n	2df12 <conn_auto_initiate+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ded2:	f3bf 8f5b 	dmb	ish
   2ded6:	6843      	ldr	r3, [r0, #4]
   2ded8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   2dedc:	0498      	lsls	r0, r3, #18
   2dede:	d41a      	bmi.n	2df16 <conn_auto_initiate+0x4e>
   2dee0:	78e3      	ldrb	r3, [r4, #3]
   2dee2:	b123      	cbz	r3, 2deee <conn_auto_initiate+0x26>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   2dee4:	4b18      	ldr	r3, [pc, #96]	; (2df48 <conn_auto_initiate+0x80>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   2dee6:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   2deea:	0719      	lsls	r1, r3, #28
   2deec:	d513      	bpl.n	2df16 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   2deee:	2102      	movs	r1, #2
   2def0:	f242 0016 	movw	r0, #8214	; 0x2016
   2def4:	f7ff fe92 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   2def8:	4605      	mov	r5, r0
   2defa:	b160      	cbz	r0, 2df16 <conn_auto_initiate+0x4e>
   2defc:	2102      	movs	r1, #2
   2defe:	3008      	adds	r0, #8
   2df00:	f022 f949 	bl	50196 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2df04:	8823      	ldrh	r3, [r4, #0]
   2df06:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2df08:	4629      	mov	r1, r5
   2df0a:	f242 0016 	movw	r0, #8214	; 0x2016
   2df0e:	f7ff febd 	bl	2dc8c <bt_hci_cmd_send>
}
   2df12:	b003      	add	sp, #12
   2df14:	bd30      	pop	{r4, r5, pc}
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   2df16:	4b0c      	ldr	r3, [pc, #48]	; (2df48 <conn_auto_initiate+0x80>)
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   2df18:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
   2df1c:	0692      	lsls	r2, r2, #26
   2df1e:	d5f8      	bpl.n	2df12 <conn_auto_initiate+0x4a>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   2df20:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   2df24:	689b      	ldr	r3, [r3, #8]
   2df26:	079b      	lsls	r3, r3, #30
   2df28:	d5f3      	bpl.n	2df12 <conn_auto_initiate+0x4a>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   2df2a:	f10d 0106 	add.w	r1, sp, #6
   2df2e:	a801      	add	r0, sp, #4
   2df30:	f01e fcfc 	bl	4c92c <hci_le_read_max_data_len>
			if (!err) {
   2df34:	2800      	cmp	r0, #0
   2df36:	d1ec      	bne.n	2df12 <conn_auto_initiate+0x4a>
				err = bt_le_set_data_len(conn,
   2df38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2df3c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2df40:	4620      	mov	r0, r4
   2df42:	f01e fd43 	bl	4c9cc <bt_le_set_data_len>
		}
   2df46:	e7e4      	b.n	2df12 <conn_auto_initiate+0x4a>
   2df48:	20000000 	.word	0x20000000

0002df4c <bt_hci_le_enh_conn_complete>:
{
   2df4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   2df50:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   2df54:	4a90      	ldr	r2, [pc, #576]	; (2e198 <bt_hci_le_enh_conn_complete+0x24c>)
   2df56:	fa1f f887 	uxth.w	r8, r7
{
   2df5a:	4605      	mov	r5, r0
   2df5c:	b085      	sub	sp, #20
	handle |= ~BT_ACL_HANDLE_MASK;
   2df5e:	f448 4170 	orr.w	r1, r8, #61440	; 0xf000
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2df62:	2300      	movs	r3, #0
   2df64:	4610      	mov	r0, r2
		if (disconnected_handles[i] == handle) {
   2df66:	f832 4b02 	ldrh.w	r4, [r2], #2
   2df6a:	42a1      	cmp	r1, r4
   2df6c:	d128      	bne.n	2dfc0 <bt_hci_le_enh_conn_complete+0x74>
			disconnected_handles[i] = 0;
   2df6e:	2200      	movs	r2, #0
   2df70:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
			return true;
   2df74:	2601      	movs	r6, #1
	bt_id_pending_keys_update();
   2df76:	f000 fb49 	bl	2e60c <bt_id_pending_keys_update>
	if (evt->status) {
   2df7a:	782c      	ldrb	r4, [r5, #0]
   2df7c:	2c00      	cmp	r4, #0
   2df7e:	d043      	beq.n	2e008 <bt_hci_le_enh_conn_complete+0xbc>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2df80:	2c3c      	cmp	r4, #60	; 0x3c
   2df82:	d122      	bne.n	2dfca <bt_hci_le_enh_conn_complete+0x7e>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2df84:	f000 fea2 	bl	2eccc <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2df88:	f3bf 8f5b 	dmb	ish
   2df8c:	3010      	adds	r0, #16
   2df8e:	e850 3f00 	ldrex	r3, [r0]
   2df92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   2df96:	e840 3200 	strex	r2, r3, [r0]
   2df9a:	2a00      	cmp	r2, #0
   2df9c:	d1f7      	bne.n	2df8e <bt_hci_le_enh_conn_complete+0x42>
   2df9e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2dfa2:	2000      	movs	r0, #0
   2dfa4:	f7ff fcdc 	bl	2d960 <find_pending_connect.part.8>
		if (!conn) {
   2dfa8:	4605      	mov	r5, r0
   2dfaa:	b130      	cbz	r0, 2dfba <bt_hci_le_enh_conn_complete+0x6e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   2dfac:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2dfae:	2100      	movs	r1, #0
   2dfb0:	f001 fd80 	bl	2fab4 <bt_conn_set_state>
		bt_conn_unref(conn);
   2dfb4:	4628      	mov	r0, r5
   2dfb6:	f01f f92a 	bl	4d20e <bt_conn_unref>
}
   2dfba:	b005      	add	sp, #20
   2dfbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   2dfc0:	3301      	adds	r3, #1
   2dfc2:	2b06      	cmp	r3, #6
   2dfc4:	d1cf      	bne.n	2df66 <bt_hci_le_enh_conn_complete+0x1a>
	return false;
   2dfc6:	2600      	movs	r6, #0
   2dfc8:	e7d5      	b.n	2df76 <bt_hci_le_enh_conn_complete+0x2a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2dfca:	2c02      	cmp	r4, #2
   2dfcc:	d1f5      	bne.n	2dfba <bt_hci_le_enh_conn_complete+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   2dfce:	2100      	movs	r1, #0
   2dfd0:	2206      	movs	r2, #6
   2dfd2:	4608      	mov	r0, r1
   2dfd4:	f001 ffa8 	bl	2ff28 <bt_conn_lookup_state_le>
	if (!conn) {
   2dfd8:	4605      	mov	r5, r0
   2dfda:	b188      	cbz	r0, 2e000 <bt_hci_le_enh_conn_complete+0xb4>
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   2dfdc:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2dfde:	2100      	movs	r1, #0
   2dfe0:	f001 fd68 	bl	2fab4 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2dfe4:	f3bf 8f5b 	dmb	ish
   2dfe8:	686b      	ldr	r3, [r5, #4]
   2dfea:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   2dfee:	07db      	lsls	r3, r3, #31
   2dff0:	d503      	bpl.n	2dffa <bt_hci_le_enh_conn_complete+0xae>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   2dff2:	4621      	mov	r1, r4
   2dff4:	4628      	mov	r0, r5
   2dff6:	f001 fd5d 	bl	2fab4 <bt_conn_set_state>
	bt_conn_unref(conn);
   2dffa:	4628      	mov	r0, r5
   2dffc:	f01f f907 	bl	4d20e <bt_conn_unref>
			bt_le_scan_update(false);
   2e000:	2000      	movs	r0, #0
   2e002:	f001 f8f5 	bl	2f1f0 <bt_le_scan_update>
			return;
   2e006:	e7d8      	b.n	2dfba <bt_hci_le_enh_conn_complete+0x6e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   2e008:	792b      	ldrb	r3, [r5, #4]
   2e00a:	3b02      	subs	r3, #2
   2e00c:	2b01      	cmp	r3, #1
   2e00e:	f105 0904 	add.w	r9, r5, #4
   2e012:	d844      	bhi.n	2e09e <bt_hci_le_enh_conn_complete+0x152>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   2e014:	4649      	mov	r1, r9
   2e016:	a802      	add	r0, sp, #8
   2e018:	f01e fad0 	bl	4c5bc <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2e01c:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   2e020:	2206      	movs	r2, #6
   2e022:	3b02      	subs	r3, #2
   2e024:	f105 0111 	add.w	r1, r5, #17
   2e028:	f10d 0001 	add.w	r0, sp, #1
   2e02c:	f88d 3008 	strb.w	r3, [sp, #8]
   2e030:	f01e f95c 	bl	4c2ec <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   2e034:	2301      	movs	r3, #1
   2e036:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   2e03a:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   2e03c:	2800      	cmp	r0, #0
   2e03e:	d141      	bne.n	2e0c4 <bt_hci_le_enh_conn_complete+0x178>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   2e040:	2206      	movs	r2, #6
   2e042:	a902      	add	r1, sp, #8
   2e044:	f001 ff70 	bl	2ff28 <bt_conn_lookup_state_le>
   2e048:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e04a:	78eb      	ldrb	r3, [r5, #3]
   2e04c:	2b01      	cmp	r3, #1
   2e04e:	d111      	bne.n	2e074 <bt_hci_le_enh_conn_complete+0x128>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2e050:	f000 fe3c 	bl	2eccc <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e054:	f3bf 8f5b 	dmb	ish
   2e058:	f100 0310 	add.w	r3, r0, #16
   2e05c:	e853 2f00 	ldrex	r2, [r3]
   2e060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   2e064:	e843 2100 	strex	r1, r2, [r3]
   2e068:	2900      	cmp	r1, #0
   2e06a:	d1f7      	bne.n	2e05c <bt_hci_le_enh_conn_complete+0x110>
   2e06c:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   2e070:	f01e fff4 	bl	4d05c <bt_le_lim_adv_cancel_timeout>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e074:	78eb      	ldrb	r3, [r5, #3]
   2e076:	b963      	cbnz	r3, 2e092 <bt_hci_le_enh_conn_complete+0x146>
   2e078:	f3bf 8f5b 	dmb	ish
   2e07c:	4b47      	ldr	r3, [pc, #284]	; (2e19c <bt_hci_le_enh_conn_complete+0x250>)
   2e07e:	e853 2f00 	ldrex	r2, [r3]
   2e082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   2e086:	e843 2100 	strex	r1, r2, [r3]
   2e08a:	2900      	cmp	r1, #0
   2e08c:	d1f7      	bne.n	2e07e <bt_hci_le_enh_conn_complete+0x132>
   2e08e:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   2e092:	b9fc      	cbnz	r4, 2e0d4 <bt_hci_le_enh_conn_complete+0x188>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   2e094:	211f      	movs	r1, #31
   2e096:	4640      	mov	r0, r8
   2e098:	f01e fc7d 	bl	4c996 <bt_hci_disconnect>
		return;
   2e09c:	e78d      	b.n	2dfba <bt_hci_le_enh_conn_complete+0x6e>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   2e09e:	78eb      	ldrb	r3, [r5, #3]
   2e0a0:	2b01      	cmp	r3, #1
   2e0a2:	bf04      	itt	eq
   2e0a4:	4b3e      	ldreq	r3, [pc, #248]	; (2e1a0 <bt_hci_le_enh_conn_complete+0x254>)
   2e0a6:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   2e0aa:	4649      	mov	r1, r9
   2e0ac:	4620      	mov	r0, r4
   2e0ae:	f01e fe43 	bl	4cd38 <bt_lookup_id_addr>
   2e0b2:	4601      	mov	r1, r0
   2e0b4:	a802      	add	r0, sp, #8
   2e0b6:	f01e fa81 	bl	4c5bc <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   2e0ba:	4649      	mov	r1, r9
   2e0bc:	4668      	mov	r0, sp
   2e0be:	f01e fa7d 	bl	4c5bc <bt_addr_le_copy>
   2e0c2:	e7ba      	b.n	2e03a <bt_hci_le_enh_conn_complete+0xee>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   2e0c4:	2801      	cmp	r0, #1
   2e0c6:	d103      	bne.n	2e0d0 <bt_hci_le_enh_conn_complete+0x184>
   2e0c8:	a802      	add	r0, sp, #8
   2e0ca:	f7ff fc49 	bl	2d960 <find_pending_connect.part.8>
   2e0ce:	e7bb      	b.n	2e048 <bt_hci_le_enh_conn_complete+0xfc>
	return NULL;
   2e0d0:	2400      	movs	r4, #0
   2e0d2:	e7ba      	b.n	2e04a <bt_hci_le_enh_conn_complete+0xfe>
	conn->handle = handle;
   2e0d4:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   2e0d6:	a902      	add	r1, sp, #8
	conn->handle = handle;
   2e0d8:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   2e0dc:	f01e fa6e 	bl	4c5bc <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   2e0e0:	7e2a      	ldrb	r2, [r5, #24]
   2e0e2:	7deb      	ldrb	r3, [r5, #23]
   2e0e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e0e8:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   2e0ec:	7eaa      	ldrb	r2, [r5, #26]
   2e0ee:	7e6b      	ldrb	r3, [r5, #25]
   2e0f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e0f4:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   2e0f8:	7f2a      	ldrb	r2, [r5, #28]
   2e0fa:	7eeb      	ldrb	r3, [r5, #27]
   2e0fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2e100:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   2e104:	78eb      	ldrb	r3, [r5, #3]
   2e106:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   2e108:	2500      	movs	r5, #0
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   2e10a:	f240 1201 	movw	r2, #257	; 0x101
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e10e:	2b01      	cmp	r3, #1
	conn->err = 0U;
   2e110:	7325      	strb	r5, [r4, #12]
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   2e112:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2e116:	d118      	bne.n	2e14a <bt_hci_le_enh_conn_complete+0x1fe>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   2e118:	4669      	mov	r1, sp
   2e11a:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2e11e:	f01e fa4d 	bl	4c5bc <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   2e122:	f000 fdd3 	bl	2eccc <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   2e126:	7a21      	ldrb	r1, [r4, #8]
   2e128:	4f1d      	ldr	r7, [pc, #116]	; (2e1a0 <bt_hci_le_enh_conn_complete+0x254>)
   2e12a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   2e12e:	4439      	add	r1, r7
   2e130:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2e134:	f01e fa42 	bl	4c5bc <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   2e138:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
   2e13c:	462a      	mov	r2, r5
   2e13e:	f001 0340 	and.w	r3, r1, #64	; 0x40
   2e142:	4313      	orrs	r3, r2
   2e144:	d001      	beq.n	2e14a <bt_hci_le_enh_conn_complete+0x1fe>
			bt_le_adv_resume();
   2e146:	f000 ff7f 	bl	2f048 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e14a:	78e3      	ldrb	r3, [r4, #3]
   2e14c:	b96b      	cbnz	r3, 2e16a <bt_hci_le_enh_conn_complete+0x21e>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   2e14e:	4669      	mov	r1, sp
   2e150:	f104 0096 	add.w	r0, r4, #150	; 0x96
   2e154:	f01e fa32 	bl	4c5bc <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   2e158:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   2e15a:	4b11      	ldr	r3, [pc, #68]	; (2e1a0 <bt_hci_le_enh_conn_complete+0x254>)
					&bt_dev.id_addr[conn->id]);
   2e15c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   2e160:	4419      	add	r1, r3
   2e162:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   2e166:	f01e fa29 	bl	4c5bc <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   2e16a:	2107      	movs	r1, #7
   2e16c:	4620      	mov	r0, r4
   2e16e:	f001 fca1 	bl	2fab4 <bt_conn_set_state>
	if (is_disconnected) {
   2e172:	b11e      	cbz	r6, 2e17c <bt_hci_le_enh_conn_complete+0x230>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2e174:	2101      	movs	r1, #1
   2e176:	4620      	mov	r0, r4
   2e178:	f001 fc9c 	bl	2fab4 <bt_conn_set_state>
	bt_conn_connected(conn);
   2e17c:	4620      	mov	r0, r4
   2e17e:	f01f f887 	bl	4d290 <bt_conn_connected>
	conn_auto_initiate(conn);
   2e182:	4620      	mov	r0, r4
   2e184:	f7ff fea0 	bl	2dec8 <conn_auto_initiate>
	bt_conn_unref(conn);
   2e188:	4620      	mov	r0, r4
   2e18a:	f01f f840 	bl	4d20e <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e18e:	78e3      	ldrb	r3, [r4, #3]
   2e190:	2b00      	cmp	r3, #0
   2e192:	f47f af12 	bne.w	2dfba <bt_hci_le_enh_conn_complete+0x6e>
   2e196:	e733      	b.n	2e000 <bt_hci_le_enh_conn_complete+0xb4>
   2e198:	20006b70 	.word	0x20006b70
   2e19c:	200000cc 	.word	0x200000cc
   2e1a0:	20000000 	.word	0x20000000

0002e1a4 <bt_unpair>:
{
   2e1a4:	b530      	push	{r4, r5, lr}
   2e1a6:	b085      	sub	sp, #20
   2e1a8:	460d      	mov	r5, r1
   2e1aa:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   2e1ae:	b9d0      	cbnz	r0, 2e1e6 <bt_unpair+0x42>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e1b0:	b949      	cbnz	r1, 2e1c6 <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
   2e1b2:	f10d 0207 	add.w	r2, sp, #7
   2e1b6:	490d      	ldr	r1, [pc, #52]	; (2e1ec <bt_unpair+0x48>)
   2e1b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2e1bc:	f005 fcfc 	bl	33bb8 <bt_foreach_bond>
		return 0;
   2e1c0:	2000      	movs	r0, #0
}
   2e1c2:	b005      	add	sp, #20
   2e1c4:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2e1c6:	9002      	str	r0, [sp, #8]
	return memcmp(a, b, sizeof(*a));
   2e1c8:	2207      	movs	r2, #7
   2e1ca:	f8cd 000b 	str.w	r0, [sp, #11]
   2e1ce:	a902      	add	r1, sp, #8
   2e1d0:	4628      	mov	r0, r5
   2e1d2:	f01e f87b 	bl	4c2cc <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   2e1d6:	2800      	cmp	r0, #0
   2e1d8:	d0eb      	beq.n	2e1b2 <bt_unpair+0xe>
	unpair(id, addr);
   2e1da:	4629      	mov	r1, r5
   2e1dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2e1e0:	f7ff fad6 	bl	2d790 <unpair>
	return 0;
   2e1e4:	e7ec      	b.n	2e1c0 <bt_unpair+0x1c>
		return -EINVAL;
   2e1e6:	f06f 0015 	mvn.w	r0, #21
   2e1ea:	e7ea      	b.n	2e1c2 <bt_unpair+0x1e>
   2e1ec:	0004c5e1 	.word	0x0004c5e1

0002e1f0 <bt_security_err_get>:
	switch (hci_err) {
   2e1f0:	2829      	cmp	r0, #41	; 0x29
   2e1f2:	bf9a      	itte	ls
   2e1f4:	4b01      	ldrls	r3, [pc, #4]	; (2e1fc <bt_security_err_get+0xc>)
   2e1f6:	5c18      	ldrbls	r0, [r3, r0]
{
   2e1f8:	2009      	movhi	r0, #9
}
   2e1fa:	4770      	bx	lr
   2e1fc:	00054315 	.word	0x00054315

0002e200 <hci_event_prio>:
{
   2e200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e204:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   2e206:	f100 0708 	add.w	r7, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   2e20a:	4638      	mov	r0, r7
   2e20c:	f022 f80c 	bl	50228 <net_buf_simple_headroom>
	state->len = buf->len;
   2e210:	89a6      	ldrh	r6, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2e212:	2e01      	cmp	r6, #1
	state->offset = net_buf_simple_headroom(buf);
   2e214:	4605      	mov	r5, r0
   2e216:	d80c      	bhi.n	2e232 <hci_event_prio+0x32>
   2e218:	f640 532f 	movw	r3, #3375	; 0xd2f
   2e21c:	4a1b      	ldr	r2, [pc, #108]	; (2e28c <hci_event_prio+0x8c>)
   2e21e:	491c      	ldr	r1, [pc, #112]	; (2e290 <hci_event_prio+0x90>)
   2e220:	481c      	ldr	r0, [pc, #112]	; (2e294 <hci_event_prio+0x94>)
   2e222:	f01b ff5b 	bl	4a0dc <printk>
   2e226:	4040      	eors	r0, r0
   2e228:	f380 8811 	msr	BASEPRI, r0
   2e22c:	f04f 0003 	mov.w	r0, #3
   2e230:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2e232:	2102      	movs	r1, #2
   2e234:	4638      	mov	r0, r7
   2e236:	f021 ffdf 	bl	501f8 <net_buf_simple_pull_mem>
   2e23a:	4680      	mov	r8, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2e23c:	7800      	ldrb	r0, [r0, #0]
   2e23e:	f7ff fb6b 	bl	2d918 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2e242:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   2e244:	4607      	mov	r7, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   2e246:	d40c      	bmi.n	2e262 <hci_event_prio+0x62>
   2e248:	f640 5333 	movw	r3, #3379	; 0xd33
   2e24c:	4a0f      	ldr	r2, [pc, #60]	; (2e28c <hci_event_prio+0x8c>)
   2e24e:	4912      	ldr	r1, [pc, #72]	; (2e298 <hci_event_prio+0x98>)
   2e250:	4810      	ldr	r0, [pc, #64]	; (2e294 <hci_event_prio+0x94>)
   2e252:	f01b ff43 	bl	4a0dc <printk>
   2e256:	4040      	eors	r0, r0
   2e258:	f380 8811 	msr	BASEPRI, r0
   2e25c:	f04f 0003 	mov.w	r0, #3
   2e260:	df02      	svc	2
	for (i = 0; i < num_handlers; i++) {
   2e262:	2305      	movs	r3, #5
   2e264:	4a0d      	ldr	r2, [pc, #52]	; (2e29c <hci_event_prio+0x9c>)
   2e266:	f898 0000 	ldrb.w	r0, [r8]
   2e26a:	4621      	mov	r1, r4
   2e26c:	f01e fa06 	bl	4c67c <handle_event.part.7>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   2e270:	07bb      	lsls	r3, r7, #30
   2e272:	d506      	bpl.n	2e282 <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   2e274:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   2e276:	81a6      	strh	r6, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2e278:	fa13 f585 	uxtah	r5, r3, r5
   2e27c:	60a5      	str	r5, [r4, #8]
}
   2e27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   2e282:	4620      	mov	r0, r4
}
   2e284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   2e288:	f015 beee 	b.w	44068 <net_buf_unref>
   2e28c:	000543e8 	.word	0x000543e8
   2e290:	000543b6 	.word	0x000543b6
   2e294:	00054425 	.word	0x00054425
   2e298:	000543cf 	.word	0x000543cf
   2e29c:	000529e8 	.word	0x000529e8

0002e2a0 <bt_recv>:
{
   2e2a0:	b570      	push	{r4, r5, r6, lr}
	if (bt_recv_thread_id == NULL) {
   2e2a2:	4d3b      	ldr	r5, [pc, #236]	; (2e390 <bt_recv+0xf0>)
   2e2a4:	682b      	ldr	r3, [r5, #0]
{
   2e2a6:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
   2e2a8:	b913      	cbnz	r3, 2e2b0 <bt_recv+0x10>
	return z_impl_z_current_get();
   2e2aa:	f01b f805 	bl	492b8 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
   2e2ae:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2e2b0:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
   2e2b2:	2b01      	cmp	r3, #1
   2e2b4:	d036      	beq.n	2e324 <bt_recv+0x84>
   2e2b6:	2b03      	cmp	r3, #3
   2e2b8:	d163      	bne.n	2e382 <bt_recv+0xe2>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2e2ba:	89a3      	ldrh	r3, [r4, #12]
   2e2bc:	2b03      	cmp	r3, #3
   2e2be:	d80c      	bhi.n	2e2da <bt_recv+0x3a>
   2e2c0:	f240 13b5 	movw	r3, #437	; 0x1b5
   2e2c4:	4a33      	ldr	r2, [pc, #204]	; (2e394 <bt_recv+0xf4>)
   2e2c6:	4934      	ldr	r1, [pc, #208]	; (2e398 <bt_recv+0xf8>)
   2e2c8:	4834      	ldr	r0, [pc, #208]	; (2e39c <bt_recv+0xfc>)
   2e2ca:	f01b ff07 	bl	4a0dc <printk>
   2e2ce:	4040      	eors	r0, r0
   2e2d0:	f380 8811 	msr	BASEPRI, r0
   2e2d4:	f04f 0003 	mov.w	r0, #3
   2e2d8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   2e2da:	2104      	movs	r1, #4
   2e2dc:	f104 0008 	add.w	r0, r4, #8
   2e2e0:	f021 ff8a 	bl	501f8 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2e2e4:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   2e2e6:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   2e2e8:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   2e2ea:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
   2e2ec:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
   2e2ee:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   2e2f2:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   2e2f4:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
   2e2f6:	d003      	beq.n	2e300 <bt_recv+0x60>
	net_buf_unref(buf);
   2e2f8:	4620      	mov	r0, r4
   2e2fa:	f015 feb5 	bl	44068 <net_buf_unref>
   2e2fe:	e00f      	b.n	2e320 <bt_recv+0x80>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   2e300:	f001 fbd0 	bl	2faa4 <bt_conn_lookup_handle>
	if (!conn) {
   2e304:	4605      	mov	r5, r0
   2e306:	2800      	cmp	r0, #0
   2e308:	d0f6      	beq.n	2e2f8 <bt_recv+0x58>
	acl(buf)->index = bt_conn_index(conn);
   2e30a:	f001 fcaf 	bl	2fc6c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   2e30e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   2e310:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   2e312:	4621      	mov	r1, r4
   2e314:	4628      	mov	r0, r5
   2e316:	f01e ff28 	bl	4d16a <bt_conn_recv>
	bt_conn_unref(conn);
   2e31a:	4628      	mov	r0, r5
   2e31c:	f01e ff77 	bl	4d20e <bt_conn_unref>
		return 0;
   2e320:	2000      	movs	r0, #0
}
   2e322:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   2e324:	89a3      	ldrh	r3, [r4, #12]
   2e326:	2b01      	cmp	r3, #1
   2e328:	d80c      	bhi.n	2e344 <bt_recv+0xa4>
   2e32a:	f640 1317 	movw	r3, #2327	; 0x917
   2e32e:	4a19      	ldr	r2, [pc, #100]	; (2e394 <bt_recv+0xf4>)
   2e330:	4919      	ldr	r1, [pc, #100]	; (2e398 <bt_recv+0xf8>)
   2e332:	481a      	ldr	r0, [pc, #104]	; (2e39c <bt_recv+0xfc>)
   2e334:	f01b fed2 	bl	4a0dc <printk>
   2e338:	4040      	eors	r0, r0
   2e33a:	f380 8811 	msr	BASEPRI, r0
   2e33e:	f04f 0003 	mov.w	r0, #3
   2e342:	df02      	svc	2
   2e344:	2102      	movs	r1, #2
   2e346:	f104 0008 	add.w	r0, r4, #8
   2e34a:	f021 ff55 	bl	501f8 <net_buf_simple_pull_mem>
   2e34e:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   2e350:	7800      	ldrb	r0, [r0, #0]
   2e352:	f7ff fae1 	bl	2d918 <bt_hci_evt_get_flags>
   2e356:	0783      	lsls	r3, r0, #30
   2e358:	d40c      	bmi.n	2e374 <bt_recv+0xd4>
   2e35a:	f640 131b 	movw	r3, #2331	; 0x91b
   2e35e:	4a0d      	ldr	r2, [pc, #52]	; (2e394 <bt_recv+0xf4>)
   2e360:	490f      	ldr	r1, [pc, #60]	; (2e3a0 <bt_recv+0x100>)
   2e362:	480e      	ldr	r0, [pc, #56]	; (2e39c <bt_recv+0xfc>)
   2e364:	f01b feba 	bl	4a0dc <printk>
   2e368:	4040      	eors	r0, r0
   2e36a:	f380 8811 	msr	BASEPRI, r0
   2e36e:	f04f 0003 	mov.w	r0, #3
   2e372:	df02      	svc	2
	for (i = 0; i < num_handlers; i++) {
   2e374:	2306      	movs	r3, #6
   2e376:	4a0b      	ldr	r2, [pc, #44]	; (2e3a4 <bt_recv+0x104>)
   2e378:	7828      	ldrb	r0, [r5, #0]
   2e37a:	4621      	mov	r1, r4
   2e37c:	f01e f97e 	bl	4c67c <handle_event.part.7>
   2e380:	e7ba      	b.n	2e2f8 <bt_recv+0x58>
		net_buf_unref(buf);
   2e382:	4620      	mov	r0, r4
   2e384:	f015 fe70 	bl	44068 <net_buf_unref>
		return -EINVAL;
   2e388:	f06f 0015 	mvn.w	r0, #21
   2e38c:	e7c9      	b.n	2e322 <bt_recv+0x82>
   2e38e:	bf00      	nop
   2e390:	20003fbc 	.word	0x20003fbc
   2e394:	000543e8 	.word	0x000543e8
   2e398:	000543b6 	.word	0x000543b6
   2e39c:	00054425 	.word	0x00054425
   2e3a0:	00054365 	.word	0x00054365
   2e3a4:	000529b8 	.word	0x000529b8

0002e3a8 <bt_recv_prio>:
{
   2e3a8:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2e3aa:	7d03      	ldrb	r3, [r0, #20]
   2e3ac:	2b01      	cmp	r3, #1
{
   2e3ae:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   2e3b0:	d00c      	beq.n	2e3cc <bt_recv_prio+0x24>
   2e3b2:	f640 537c 	movw	r3, #3452	; 0xd7c
   2e3b6:	4a08      	ldr	r2, [pc, #32]	; (2e3d8 <bt_recv_prio+0x30>)
   2e3b8:	4908      	ldr	r1, [pc, #32]	; (2e3dc <bt_recv_prio+0x34>)
   2e3ba:	4809      	ldr	r0, [pc, #36]	; (2e3e0 <bt_recv_prio+0x38>)
   2e3bc:	f01b fe8e 	bl	4a0dc <printk>
   2e3c0:	4040      	eors	r0, r0
   2e3c2:	f380 8811 	msr	BASEPRI, r0
   2e3c6:	f04f 0003 	mov.w	r0, #3
   2e3ca:	df02      	svc	2
	hci_event_prio(buf);
   2e3cc:	4620      	mov	r0, r4
   2e3ce:	f7ff ff17 	bl	2e200 <hci_event_prio>
}
   2e3d2:	2000      	movs	r0, #0
   2e3d4:	bd10      	pop	{r4, pc}
   2e3d6:	bf00      	nop
   2e3d8:	000543e8 	.word	0x000543e8
   2e3dc:	00054393 	.word	0x00054393
   2e3e0:	00054425 	.word	0x00054425

0002e3e4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   2e3e4:	4a08      	ldr	r2, [pc, #32]	; (2e408 <bt_hci_driver_register+0x24>)
   2e3e6:	f8d2 3154 	ldr.w	r3, [r2, #340]	; 0x154
   2e3ea:	b93b      	cbnz	r3, 2e3fc <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   2e3ec:	68c1      	ldr	r1, [r0, #12]
   2e3ee:	b141      	cbz	r1, 2e402 <bt_hci_driver_register+0x1e>
   2e3f0:	6901      	ldr	r1, [r0, #16]
   2e3f2:	b131      	cbz	r1, 2e402 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   2e3f4:	f8c2 0154 	str.w	r0, [r2, #340]	; 0x154
	return 0;
   2e3f8:	4618      	mov	r0, r3
   2e3fa:	4770      	bx	lr
		return -EALREADY;
   2e3fc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2e400:	4770      	bx	lr
		return -EINVAL;
   2e402:	f06f 0015 	mvn.w	r0, #21
}
   2e406:	4770      	bx	lr
   2e408:	20000000 	.word	0x20000000

0002e40c <bt_finalize_init>:
{
   2e40c:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e40e:	2102      	movs	r1, #2
   2e410:	4803      	ldr	r0, [pc, #12]	; (2e420 <bt_finalize_init+0x14>)
   2e412:	f01e f8d6 	bl	4c5c2 <atomic_or>
		bt_le_scan_update(false);
   2e416:	2000      	movs	r0, #0
}
   2e418:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   2e41c:	f000 bee8 	b.w	2f1f0 <bt_le_scan_update>
   2e420:	200000cc 	.word	0x200000cc

0002e424 <init_work>:

static void init_work(struct k_work *work)
{
   2e424:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   2e426:	f7f7 ffef 	bl	26408 <bt_init>
	if (ready_cb) {
   2e42a:	4b03      	ldr	r3, [pc, #12]	; (2e438 <init_work+0x14>)
   2e42c:	681b      	ldr	r3, [r3, #0]
   2e42e:	b113      	cbz	r3, 2e436 <init_work+0x12>
		ready_cb(err);
	}
}
   2e430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   2e434:	4718      	bx	r3
}
   2e436:	bd10      	pop	{r4, pc}
   2e438:	20003fd8 	.word	0x20003fd8

0002e43c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   2e43c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   2e43e:	4d22      	ldr	r5, [pc, #136]	; (2e4c8 <bt_enable+0x8c>)
   2e440:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   2e444:	b088      	sub	sp, #32
   2e446:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   2e448:	2b00      	cmp	r3, #0
   2e44a:	d037      	beq.n	2e4bc <bt_enable+0x80>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2e44c:	2101      	movs	r1, #1
   2e44e:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   2e452:	f01e f8b6 	bl	4c5c2 <atomic_or>
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2e456:	07c3      	lsls	r3, r0, #31
   2e458:	d433      	bmi.n	2e4c2 <bt_enable+0x86>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   2e45a:	f01e f834 	bl	4c4c6 <bt_settings_init>
		if (err) {
   2e45e:	4604      	mov	r4, r0
   2e460:	bb48      	cbnz	r0, 2e4b6 <bt_enable+0x7a>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   2e462:	4b1a      	ldr	r3, [pc, #104]	; (2e4cc <bt_enable+0x90>)
   2e464:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2e466:	2200      	movs	r2, #0
   2e468:	2300      	movs	r3, #0
   2e46a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2e46e:	f06f 0308 	mvn.w	r3, #8
   2e472:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2e476:	9004      	str	r0, [sp, #16]
   2e478:	e9cd 0000 	strd	r0, r0, [sp]
   2e47c:	4b14      	ldr	r3, [pc, #80]	; (2e4d0 <bt_enable+0x94>)
   2e47e:	4915      	ldr	r1, [pc, #84]	; (2e4d4 <bt_enable+0x98>)
   2e480:	4815      	ldr	r0, [pc, #84]	; (2e4d8 <bt_enable+0x9c>)
   2e482:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2e486:	f019 ffcb 	bl	48420 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   2e48a:	4914      	ldr	r1, [pc, #80]	; (2e4dc <bt_enable+0xa0>)
   2e48c:	4812      	ldr	r0, [pc, #72]	; (2e4d8 <bt_enable+0x9c>)
   2e48e:	f022 fd0e 	bl	50eae <z_impl_k_thread_name_set>
			0, K_NO_WAIT);
	k_thread_name_set(&rx_thread_data, "BT RX");
#endif

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
   2e492:	f7fe ffc3 	bl	2d41c <bt_hci_ecc_init>
	}

	err = bt_dev.drv->open();
   2e496:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   2e49a:	68db      	ldr	r3, [r3, #12]
   2e49c:	4798      	blx	r3
	if (err) {
   2e49e:	4604      	mov	r4, r0
   2e4a0:	b948      	cbnz	r0, 2e4b6 <bt_enable+0x7a>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   2e4a2:	b926      	cbnz	r6, 2e4ae <bt_enable+0x72>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   2e4a4:	b008      	add	sp, #32
   2e4a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   2e4aa:	f7f7 bfad 	b.w	26408 <bt_init>
	k_work_submit(&bt_dev.init);
   2e4ae:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   2e4b2:	f01a fb6d 	bl	48b90 <k_work_submit>
}
   2e4b6:	4620      	mov	r0, r4
   2e4b8:	b008      	add	sp, #32
   2e4ba:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2e4bc:	f06f 0412 	mvn.w	r4, #18
   2e4c0:	e7f9      	b.n	2e4b6 <bt_enable+0x7a>
		return -EALREADY;
   2e4c2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2e4c6:	e7f6      	b.n	2e4b6 <bt_enable+0x7a>
   2e4c8:	20000000 	.word	0x20000000
   2e4cc:	20003fd8 	.word	0x20003fd8
   2e4d0:	0002dac5 	.word	0x0002dac5
   2e4d4:	20007628 	.word	0x20007628
   2e4d8:	200014b0 	.word	0x200014b0
   2e4dc:	0005433f 	.word	0x0005433f

0002e4e0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   2e4e0:	4800      	ldr	r0, [pc, #0]	; (2e4e4 <bt_get_name+0x4>)
   2e4e2:	4770      	bx	lr
   2e4e4:	00053fb7 	.word	0x00053fb7

0002e4e8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   2e4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   2e4ea:	4e0b      	ldr	r6, [pc, #44]	; (2e518 <id_find+0x30>)
{
   2e4ec:	4607      	mov	r7, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   2e4ee:	2500      	movs	r5, #0
   2e4f0:	79f3      	ldrb	r3, [r6, #7]
   2e4f2:	b2ec      	uxtb	r4, r5
   2e4f4:	42a3      	cmp	r3, r4
   2e4f6:	d802      	bhi.n	2e4fe <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   2e4f8:	f06f 0401 	mvn.w	r4, #1
   2e4fc:	e009      	b.n	2e512 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   2e4fe:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   2e502:	2207      	movs	r2, #7
   2e504:	4431      	add	r1, r6
   2e506:	4638      	mov	r0, r7
   2e508:	f01d fee0 	bl	4c2cc <memcmp>
   2e50c:	3501      	adds	r5, #1
   2e50e:	2800      	cmp	r0, #0
   2e510:	d1ee      	bne.n	2e4f0 <id_find+0x8>
}
   2e512:	4620      	mov	r0, r4
   2e514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e516:	bf00      	nop
   2e518:	20000000 	.word	0x20000000

0002e51c <set_random_address>:
{
   2e51c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   2e51e:	2206      	movs	r2, #6
   2e520:	4913      	ldr	r1, [pc, #76]	; (2e570 <set_random_address+0x54>)
   2e522:	4605      	mov	r5, r0
   2e524:	f01d fed2 	bl	4c2cc <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   2e528:	4604      	mov	r4, r0
   2e52a:	b1e0      	cbz	r0, 2e566 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   2e52c:	2106      	movs	r1, #6
   2e52e:	f242 0005 	movw	r0, #8197	; 0x2005
   2e532:	f7ff fb73 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   2e536:	4604      	mov	r4, r0
   2e538:	b1b8      	cbz	r0, 2e56a <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2e53a:	2206      	movs	r2, #6
   2e53c:	4629      	mov	r1, r5
   2e53e:	3008      	adds	r0, #8
   2e540:	f021 fe2f 	bl	501a2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   2e544:	4621      	mov	r1, r4
   2e546:	2200      	movs	r2, #0
   2e548:	f242 0005 	movw	r0, #8197	; 0x2005
   2e54c:	f7ff fbc0 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   2e550:	4604      	mov	r4, r0
   2e552:	b940      	cbnz	r0, 2e566 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   2e554:	2206      	movs	r2, #6
   2e556:	4629      	mov	r1, r5
   2e558:	4805      	ldr	r0, [pc, #20]	; (2e570 <set_random_address+0x54>)
   2e55a:	f01d fec7 	bl	4c2ec <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   2e55e:	4b05      	ldr	r3, [pc, #20]	; (2e574 <set_random_address+0x58>)
   2e560:	2201      	movs	r2, #1
   2e562:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   2e566:	4620      	mov	r0, r4
   2e568:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2e56a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2e56e:	e7fa      	b.n	2e566 <set_random_address+0x4a>
   2e570:	20000061 	.word	0x20000061
   2e574:	20000000 	.word	0x20000000

0002e578 <id_create.isra.4>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   2e578:	b530      	push	{r4, r5, lr}
   2e57a:	4604      	mov	r4, r0
   2e57c:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2e57e:	460d      	mov	r5, r1
   2e580:	b1d1      	cbz	r1, 2e5b8 <id_create.isra.4+0x40>
   2e582:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2e584:	2207      	movs	r2, #7
   2e586:	a902      	add	r1, sp, #8
   2e588:	4628      	mov	r0, r5
   2e58a:	9302      	str	r3, [sp, #8]
   2e58c:	f8cd 300b 	str.w	r3, [sp, #11]
   2e590:	f01d fe9c 	bl	4c2cc <memcmp>
   2e594:	b180      	cbz	r0, 2e5b8 <id_create.isra.4+0x40>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   2e596:	4814      	ldr	r0, [pc, #80]	; (2e5e8 <id_create.isra.4+0x70>)
   2e598:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2e59c:	4629      	mov	r1, r5
   2e59e:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2e5a0:	f01e fb39 	bl	4cc16 <bt_addr_le_copy>
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2e5a4:	2101      	movs	r1, #1
   2e5a6:	4811      	ldr	r0, [pc, #68]	; (2e5ec <id_create.isra.4+0x74>)
   2e5a8:	f01e fb38 	bl	4cc1c <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   2e5ac:	b110      	cbz	r0, 2e5b4 <id_create.isra.4+0x3c>
		bt_settings_save_id();
   2e5ae:	f7fe ffcb 	bl	2d548 <bt_settings_save_id>
   2e5b2:	2000      	movs	r0, #0
	}

	return 0;
}
   2e5b4:	b005      	add	sp, #20
   2e5b6:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   2e5b8:	4668      	mov	r0, sp
   2e5ba:	f01d ffd8 	bl	4c56e <bt_addr_le_create_static>
			if (err) {
   2e5be:	2800      	cmp	r0, #0
   2e5c0:	d1f8      	bne.n	2e5b4 <id_create.isra.4+0x3c>
		} while (id_find(&new_addr) >= 0);
   2e5c2:	4668      	mov	r0, sp
   2e5c4:	f7ff ff90 	bl	2e4e8 <id_find>
   2e5c8:	2800      	cmp	r0, #0
   2e5ca:	daf5      	bge.n	2e5b8 <id_create.isra.4+0x40>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   2e5cc:	4806      	ldr	r0, [pc, #24]	; (2e5e8 <id_create.isra.4+0x70>)
   2e5ce:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   2e5d2:	4404      	add	r4, r0
   2e5d4:	4669      	mov	r1, sp
   2e5d6:	4620      	mov	r0, r4
   2e5d8:	f01e fb1d 	bl	4cc16 <bt_addr_le_copy>
		if (addr) {
   2e5dc:	2d00      	cmp	r5, #0
   2e5de:	d0e1      	beq.n	2e5a4 <id_create.isra.4+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   2e5e0:	4621      	mov	r1, r4
   2e5e2:	4628      	mov	r0, r5
   2e5e4:	e7dc      	b.n	2e5a0 <id_create.isra.4+0x28>
   2e5e6:	bf00      	nop
   2e5e8:	20000000 	.word	0x20000000
   2e5ec:	200000cc 	.word	0x200000cc

0002e5f0 <bt_id_adv_random_addr_check>:
{
   2e5f0:	b508      	push	{r3, lr}
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
   2e5f2:	210b      	movs	r1, #11
   2e5f4:	4804      	ldr	r0, [pc, #16]	; (2e608 <bt_id_adv_random_addr_check+0x18>)
   2e5f6:	f01e fb11 	bl	4cc1c <atomic_test_bit>
   2e5fa:	b918      	cbnz	r0, 2e604 <bt_id_adv_random_addr_check+0x14>
	      atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING))) {
   2e5fc:	2105      	movs	r1, #5
   2e5fe:	4802      	ldr	r0, [pc, #8]	; (2e608 <bt_id_adv_random_addr_check+0x18>)
   2e600:	f01e fb0c 	bl	4cc1c <atomic_test_bit>
}
   2e604:	2001      	movs	r0, #1
   2e606:	bd08      	pop	{r3, pc}
   2e608:	200000cc 	.word	0x200000cc

0002e60c <bt_id_pending_keys_update>:
   2e60c:	4b0a      	ldr	r3, [pc, #40]	; (2e638 <bt_id_pending_keys_update+0x2c>)
   2e60e:	f3bf 8f5b 	dmb	ish
   2e612:	e853 2f00 	ldrex	r2, [r3]
   2e616:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   2e61a:	e843 1000 	strex	r0, r1, [r3]
   2e61e:	2800      	cmp	r0, #0
   2e620:	d1f7      	bne.n	2e612 <bt_id_pending_keys_update+0x6>
   2e622:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   2e626:	0493      	lsls	r3, r2, #18
   2e628:	d504      	bpl.n	2e634 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   2e62a:	2200      	movs	r2, #0
   2e62c:	4903      	ldr	r1, [pc, #12]	; (2e63c <bt_id_pending_keys_update+0x30>)
   2e62e:	2002      	movs	r0, #2
   2e630:	f005 bae0 	b.w	33bf4 <bt_keys_foreach>
}
   2e634:	4770      	bx	lr
   2e636:	bf00      	nop
   2e638:	200000cc 	.word	0x200000cc
   2e63c:	0004cda5 	.word	0x0004cda5

0002e640 <bt_id_add>:
{
   2e640:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2e644:	4e4c      	ldr	r6, [pc, #304]	; (2e778 <bt_id_add+0x138>)
   2e646:	f896 2118 	ldrb.w	r2, [r6, #280]	; 0x118
   2e64a:	f896 3119 	ldrb.w	r3, [r6, #281]	; 0x119
{
   2e64e:	4604      	mov	r4, r0
   2e650:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2e652:	b10a      	cbz	r2, 2e658 <bt_id_add+0x18>
   2e654:	429a      	cmp	r2, r3
   2e656:	d209      	bcs.n	2e66c <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
   2e658:	3301      	adds	r3, #1
   2e65a:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2e65e:	7a23      	ldrb	r3, [r4, #8]
   2e660:	f043 0304 	orr.w	r3, r3, #4
   2e664:	7223      	strb	r3, [r4, #8]
}
   2e666:	b002      	add	sp, #8
   2e668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2e66c:	2100      	movs	r1, #0
   2e66e:	2206      	movs	r2, #6
   2e670:	4608      	mov	r0, r1
   2e672:	f001 fc59 	bl	2ff28 <bt_conn_lookup_state_le>
	if (conn) {
   2e676:	36cc      	adds	r6, #204	; 0xcc
   2e678:	4607      	mov	r7, r0
   2e67a:	b190      	cbz	r0, 2e6a2 <bt_id_add+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2e67c:	f3bf 8f5b 	dmb	ish
   2e680:	e856 3f00 	ldrex	r3, [r6]
   2e684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2e688:	e846 3200 	strex	r2, r3, [r6]
   2e68c:	2a00      	cmp	r2, #0
   2e68e:	d1f7      	bne.n	2e680 <bt_id_add+0x40>
   2e690:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2e694:	7a23      	ldrb	r3, [r4, #8]
   2e696:	f043 0301 	orr.w	r3, r3, #1
   2e69a:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   2e69c:	f01e fdb7 	bl	4d20e <bt_conn_unref>
		return;
   2e6a0:	e7e1      	b.n	2e666 <bt_id_add+0x26>
	bool scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
   2e6a2:	2105      	movs	r1, #5
   2e6a4:	4630      	mov	r0, r6
   2e6a6:	f01e fab9 	bl	4cc1c <atomic_test_bit>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2e6aa:	4639      	mov	r1, r7
	bool scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
   2e6ac:	4606      	mov	r6, r0
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2e6ae:	4833      	ldr	r0, [pc, #204]	; (2e77c <bt_id_add+0x13c>)
   2e6b0:	f000 fb06 	bl	2ecc0 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
   2e6b4:	b116      	cbz	r6, 2e6bc <bt_id_add+0x7c>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2e6b6:	4638      	mov	r0, r7
   2e6b8:	f01e fce4 	bl	4d084 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   2e6bc:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2e6c0:	b9b3      	cbnz	r3, 2e6f0 <bt_id_add+0xb0>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   2e6c2:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   2e6c6:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   2e6ca:	429a      	cmp	r2, r3
   2e6cc:	d121      	bne.n	2e712 <bt_id_add+0xd2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   2e6ce:	2200      	movs	r2, #0
   2e6d0:	4611      	mov	r1, r2
   2e6d2:	f242 0029 	movw	r0, #8233	; 0x2029
   2e6d6:	f7ff fafb 	bl	2dcd0 <bt_hci_cmd_send_sync>
		if (err) {
   2e6da:	b970      	cbnz	r0, 2e6fa <bt_id_add+0xba>
		bt_dev.le.rl_entries++;
   2e6dc:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2e6e0:	3301      	adds	r3, #1
   2e6e2:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   2e6e6:	7a23      	ldrb	r3, [r4, #8]
   2e6e8:	f043 0304 	orr.w	r3, r3, #4
   2e6ec:	7223      	strb	r3, [r4, #8]
		goto done;
   2e6ee:	e004      	b.n	2e6fa <bt_id_add+0xba>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2e6f0:	2000      	movs	r0, #0
   2e6f2:	f01e fabc 	bl	4cc6e <addr_res_enable>
		if (err) {
   2e6f6:	2800      	cmp	r0, #0
   2e6f8:	d0e3      	beq.n	2e6c2 <bt_id_add+0x82>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2e6fa:	2001      	movs	r0, #1
   2e6fc:	f01e fab7 	bl	4cc6e <addr_res_enable>
	if (scan_enabled) {
   2e700:	b116      	cbz	r6, 2e708 <bt_id_add+0xc8>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2e702:	2001      	movs	r0, #1
   2e704:	f01e fcbe 	bl	4d084 <bt_le_scan_set_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2e708:	2100      	movs	r1, #0
   2e70a:	481d      	ldr	r0, [pc, #116]	; (2e780 <bt_id_add+0x140>)
   2e70c:	f000 fad8 	bl	2ecc0 <bt_le_ext_adv_foreach>
   2e710:	e7a9      	b.n	2e666 <bt_id_add+0x26>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2e712:	f104 0801 	add.w	r8, r4, #1
   2e716:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   2e71a:	4640      	mov	r0, r8
   2e71c:	f01e fabf 	bl	4cc9e <hci_id_add.isra.3>
	if (err) {
   2e720:	4607      	mov	r7, r0
   2e722:	2800      	cmp	r0, #0
   2e724:	d1e9      	bne.n	2e6fa <bt_id_add+0xba>
	bt_dev.le.rl_entries++;
   2e726:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   2e72a:	3301      	adds	r3, #1
   2e72c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   2e730:	7a23      	ldrb	r3, [r4, #8]
   2e732:	f043 0304 	orr.w	r3, r3, #4
   2e736:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   2e738:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   2e73c:	075b      	lsls	r3, r3, #29
   2e73e:	d5dc      	bpl.n	2e6fa <bt_id_add+0xba>
	bt_addr_le_copy(&cp.id_addr, addr);
   2e740:	4641      	mov	r1, r8
   2e742:	4668      	mov	r0, sp
   2e744:	f01e fa67 	bl	4cc16 <bt_addr_le_copy>
	cp.mode = mode;
   2e748:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2e74a:	2108      	movs	r1, #8
   2e74c:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   2e750:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   2e754:	f7ff fa62 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   2e758:	4604      	mov	r4, r0
   2e75a:	2800      	cmp	r0, #0
   2e75c:	d0cd      	beq.n	2e6fa <bt_id_add+0xba>
   2e75e:	2208      	movs	r2, #8
   2e760:	4669      	mov	r1, sp
   2e762:	4410      	add	r0, r2
   2e764:	f021 fd1d 	bl	501a2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   2e768:	463a      	mov	r2, r7
   2e76a:	4621      	mov	r1, r4
   2e76c:	f242 004e 	movw	r0, #8270	; 0x204e
   2e770:	f7ff faae 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   2e774:	e7c1      	b.n	2e6fa <bt_id_add+0xba>
   2e776:	bf00      	nop
   2e778:	20000000 	.word	0x20000000
   2e77c:	0004cd01 	.word	0x0004cd01
   2e780:	0004cc45 	.word	0x0004cc45

0002e784 <bt_id_del>:
{
   2e784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
   2e788:	4d43      	ldr	r5, [pc, #268]	; (2e898 <bt_id_del+0x114>)
   2e78a:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   2e78e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
{
   2e792:	4604      	mov	r4, r0
   2e794:	462e      	mov	r6, r5
	if (!bt_dev.le.rl_size ||
   2e796:	b112      	cbz	r2, 2e79e <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   2e798:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   2e79a:	4293      	cmp	r3, r2
   2e79c:	dd08      	ble.n	2e7b0 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   2e79e:	3b01      	subs	r3, #1
   2e7a0:	f886 3119 	strb.w	r3, [r6, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e7a4:	7a23      	ldrb	r3, [r4, #8]
   2e7a6:	f023 0304 	bic.w	r3, r3, #4
   2e7aa:	7223      	strb	r3, [r4, #8]
}
   2e7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   2e7b0:	2100      	movs	r1, #0
   2e7b2:	2206      	movs	r2, #6
   2e7b4:	4608      	mov	r0, r1
   2e7b6:	f001 fbb7 	bl	2ff28 <bt_conn_lookup_state_le>
	if (conn) {
   2e7ba:	35cc      	adds	r5, #204	; 0xcc
   2e7bc:	4607      	mov	r7, r0
   2e7be:	b198      	cbz	r0, 2e7e8 <bt_id_del+0x64>
   2e7c0:	f3bf 8f5b 	dmb	ish
   2e7c4:	e855 3f00 	ldrex	r3, [r5]
   2e7c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2e7cc:	e845 3200 	strex	r2, r3, [r5]
   2e7d0:	2a00      	cmp	r2, #0
   2e7d2:	d1f7      	bne.n	2e7c4 <bt_id_del+0x40>
   2e7d4:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   2e7d8:	7a23      	ldrb	r3, [r4, #8]
   2e7da:	f043 0302 	orr.w	r3, r3, #2
   2e7de:	7223      	strb	r3, [r4, #8]
}
   2e7e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   2e7e4:	f01e bd13 	b.w	4d20e <bt_conn_unref>
	bool scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
   2e7e8:	2105      	movs	r1, #5
   2e7ea:	4628      	mov	r0, r5
   2e7ec:	f01e fa16 	bl	4cc1c <atomic_test_bit>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2e7f0:	4639      	mov	r1, r7
	bool scan_enabled = atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING);
   2e7f2:	4605      	mov	r5, r0
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   2e7f4:	4829      	ldr	r0, [pc, #164]	; (2e89c <bt_id_del+0x118>)
   2e7f6:	f000 fa63 	bl	2ecc0 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
   2e7fa:	b115      	cbz	r5, 2e802 <bt_id_del+0x7e>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2e7fc:	4638      	mov	r0, r7
   2e7fe:	f01e fc41 	bl	4d084 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   2e802:	2000      	movs	r0, #0
   2e804:	f01e fa33 	bl	4cc6e <addr_res_enable>
	if (err) {
   2e808:	4680      	mov	r8, r0
   2e80a:	b988      	cbnz	r0, 2e830 <bt_id_del+0xac>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   2e80c:	f896 3119 	ldrb.w	r3, [r6, #281]	; 0x119
   2e810:	f896 2118 	ldrb.w	r2, [r6, #280]	; 0x118
   2e814:	429a      	cmp	r2, r3
   2e816:	d21b      	bcs.n	2e850 <bt_id_del+0xcc>
		bt_dev.le.rl_entries--;
   2e818:	3b01      	subs	r3, #1
   2e81a:	f886 3119 	strb.w	r3, [r6, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e81e:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2e820:	491f      	ldr	r1, [pc, #124]	; (2e8a0 <bt_id_del+0x11c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e822:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2e826:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   2e828:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   2e82a:	2002      	movs	r0, #2
   2e82c:	f005 f9e2 	bl	33bf4 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
   2e830:	f896 3119 	ldrb.w	r3, [r6, #281]	; 0x119
   2e834:	b113      	cbz	r3, 2e83c <bt_id_del+0xb8>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   2e836:	2001      	movs	r0, #1
   2e838:	f01e fa19 	bl	4cc6e <addr_res_enable>
	if (scan_enabled) {
   2e83c:	b115      	cbz	r5, 2e844 <bt_id_del+0xc0>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2e83e:	2001      	movs	r0, #1
   2e840:	f01e fc20 	bl	4d084 <bt_le_scan_set_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2e844:	2100      	movs	r1, #0
   2e846:	4817      	ldr	r0, [pc, #92]	; (2e8a4 <bt_id_del+0x120>)
}
   2e848:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   2e84c:	f000 ba38 	b.w	2ecc0 <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   2e850:	2107      	movs	r1, #7
   2e852:	f242 0028 	movw	r0, #8232	; 0x2028
   2e856:	f7ff f9e1 	bl	2dc1c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   2e85a:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   2e85e:	4607      	mov	r7, r0
   2e860:	2800      	cmp	r0, #0
   2e862:	d0e5      	beq.n	2e830 <bt_id_del+0xac>
	return net_buf_simple_add(&buf->b, len);
   2e864:	2107      	movs	r1, #7
   2e866:	3008      	adds	r0, #8
   2e868:	f021 fc95 	bl	50196 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2e86c:	4649      	mov	r1, r9
   2e86e:	f01e f9d2 	bl	4cc16 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   2e872:	4642      	mov	r2, r8
   2e874:	4639      	mov	r1, r7
   2e876:	f242 0028 	movw	r0, #8232	; 0x2028
   2e87a:	f7ff fa29 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   2e87e:	2800      	cmp	r0, #0
   2e880:	d1d6      	bne.n	2e830 <bt_id_del+0xac>
	bt_dev.le.rl_entries--;
   2e882:	f896 3119 	ldrb.w	r3, [r6, #281]	; 0x119
   2e886:	3b01      	subs	r3, #1
   2e888:	f886 3119 	strb.w	r3, [r6, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   2e88c:	7a23      	ldrb	r3, [r4, #8]
   2e88e:	f023 0304 	bic.w	r3, r3, #4
   2e892:	7223      	strb	r3, [r4, #8]
   2e894:	e7cc      	b.n	2e830 <bt_id_del+0xac>
   2e896:	bf00      	nop
   2e898:	20000000 	.word	0x20000000
   2e89c:	0004cd01 	.word	0x0004cd01
   2e8a0:	0004ccef 	.word	0x0004ccef
   2e8a4:	0004cc45 	.word	0x0004cc45

0002e8a8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   2e8a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2e8aa:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2e8ac:	4605      	mov	r5, r0
   2e8ae:	b920      	cbnz	r0, 2e8ba <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   2e8b0:	b1ec      	cbz	r4, 2e8ee <bt_id_create+0x46>
			return -EINVAL;
   2e8b2:	f06f 0015 	mvn.w	r0, #21
	if (err) {
		return err;
	}

	return new_id;
}
   2e8b6:	b004      	add	sp, #16
   2e8b8:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   2e8ba:	2300      	movs	r3, #0
   2e8bc:	2207      	movs	r2, #7
   2e8be:	4669      	mov	r1, sp
   2e8c0:	9300      	str	r3, [sp, #0]
   2e8c2:	f8cd 3003 	str.w	r3, [sp, #3]
   2e8c6:	f01d fd01 	bl	4c2cc <memcmp>
   2e8ca:	2800      	cmp	r0, #0
   2e8cc:	d0f0      	beq.n	2e8b0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   2e8ce:	782b      	ldrb	r3, [r5, #0]
   2e8d0:	2b01      	cmp	r3, #1
   2e8d2:	d1ee      	bne.n	2e8b2 <bt_id_create+0xa>
   2e8d4:	79ab      	ldrb	r3, [r5, #6]
   2e8d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2e8da:	2bc0      	cmp	r3, #192	; 0xc0
   2e8dc:	d1e9      	bne.n	2e8b2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   2e8de:	4628      	mov	r0, r5
   2e8e0:	f7ff fe02 	bl	2e4e8 <id_find>
   2e8e4:	2800      	cmp	r0, #0
   2e8e6:	dbe3      	blt.n	2e8b0 <bt_id_create+0x8>
			return -EALREADY;
   2e8e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2e8ec:	e7e3      	b.n	2e8b6 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   2e8ee:	4e12      	ldr	r6, [pc, #72]	; (2e938 <bt_id_create+0x90>)
   2e8f0:	79f3      	ldrb	r3, [r6, #7]
   2e8f2:	2b01      	cmp	r3, #1
   2e8f4:	d01d      	beq.n	2e932 <bt_id_create+0x8a>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   2e8f6:	4621      	mov	r1, r4
   2e8f8:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   2e8fc:	f01e f98e 	bl	4cc1c <atomic_test_bit>
   2e900:	b150      	cbz	r0, 2e918 <bt_id_create+0x70>
	new_id = bt_dev.id_count++;
   2e902:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
   2e904:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   2e906:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
   2e908:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   2e90a:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
   2e90c:	f7ff fe34 	bl	2e578 <id_create.isra.4>
	new_id = bt_dev.id_count++;
   2e910:	2800      	cmp	r0, #0
   2e912:	bf08      	it	eq
   2e914:	4620      	moveq	r0, r4
   2e916:	e7ce      	b.n	2e8b6 <bt_id_create+0xe>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   2e918:	2d00      	cmp	r5, #0
   2e91a:	d0ca      	beq.n	2e8b2 <bt_id_create+0xa>
   2e91c:	2207      	movs	r2, #7
   2e91e:	a902      	add	r1, sp, #8
   2e920:	4628      	mov	r0, r5
   2e922:	9402      	str	r4, [sp, #8]
   2e924:	f8cd 400b 	str.w	r4, [sp, #11]
   2e928:	f01d fcd0 	bl	4c2cc <memcmp>
   2e92c:	2800      	cmp	r0, #0
   2e92e:	d1e8      	bne.n	2e902 <bt_id_create+0x5a>
   2e930:	e7bf      	b.n	2e8b2 <bt_id_create+0xa>
		return -ENOMEM;
   2e932:	f06f 000b 	mvn.w	r0, #11
   2e936:	e7be      	b.n	2e8b6 <bt_id_create+0xe>
   2e938:	20000000 	.word	0x20000000

0002e93c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   2e93c:	b570      	push	{r4, r5, r6, lr}
   2e93e:	b086      	sub	sp, #24
   2e940:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   2e942:	aa01      	add	r2, sp, #4
   2e944:	2100      	movs	r1, #0
   2e946:	f241 0009 	movw	r0, #4105	; 0x1009
   2e94a:	f7ff f9c1 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   2e94e:	4605      	mov	r5, r0
   2e950:	b970      	cbnz	r0, 2e970 <bt_id_read_public_addr+0x34>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   2e952:	9b01      	ldr	r3, [sp, #4]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2e954:	9002      	str	r0, [sp, #8]
   2e956:	689c      	ldr	r4, [r3, #8]
   2e958:	f8ad 000c 	strh.w	r0, [sp, #12]
   2e95c:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   2e95e:	2206      	movs	r2, #6
   2e960:	a902      	add	r1, sp, #8
   2e962:	4620      	mov	r0, r4
   2e964:	f01d fcb2 	bl	4c2cc <memcmp>
   2e968:	b920      	cbnz	r0, 2e974 <bt_id_read_public_addr+0x38>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   2e96a:	9801      	ldr	r0, [sp, #4]
   2e96c:	f015 fb7c 	bl	44068 <net_buf_unref>
		return 0U;
   2e970:	2000      	movs	r0, #0
   2e972:	e016      	b.n	2e9a2 <bt_id_read_public_addr+0x66>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   2e974:	4b0c      	ldr	r3, [pc, #48]	; (2e9a8 <bt_id_read_public_addr+0x6c>)
   2e976:	6818      	ldr	r0, [r3, #0]
   2e978:	9004      	str	r0, [sp, #16]
   2e97a:	889b      	ldrh	r3, [r3, #4]
   2e97c:	f8ad 3014 	strh.w	r3, [sp, #20]
   2e980:	2206      	movs	r2, #6
   2e982:	a904      	add	r1, sp, #16
   2e984:	4620      	mov	r0, r4
   2e986:	f01d fca1 	bl	4c2cc <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   2e98a:	2800      	cmp	r0, #0
   2e98c:	d0ed      	beq.n	2e96a <bt_id_read_public_addr+0x2e>
	memcpy(dst, src, sizeof(*dst));
   2e98e:	2206      	movs	r2, #6
   2e990:	4621      	mov	r1, r4
   2e992:	1c70      	adds	r0, r6, #1
   2e994:	f01d fcaa 	bl	4c2ec <memcpy>
	}

	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
   2e998:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   2e99a:	7035      	strb	r5, [r6, #0]
	net_buf_unref(rsp);
   2e99c:	f015 fb64 	bl	44068 <net_buf_unref>
	return 1U;
   2e9a0:	2001      	movs	r0, #1
}
   2e9a2:	b006      	add	sp, #24
   2e9a4:	bd70      	pop	{r4, r5, r6, pc}
   2e9a6:	bf00      	nop
   2e9a8:	00051e53 	.word	0x00051e53

0002e9ac <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   2e9ac:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   2e9ae:	4668      	mov	r0, sp
   2e9b0:	f7ff ffc4 	bl	2e93c <bt_id_read_public_addr>
   2e9b4:	4b04      	ldr	r3, [pc, #16]	; (2e9c8 <bt_setup_public_id_addr+0x1c>)
   2e9b6:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   2e9b8:	b118      	cbz	r0, 2e9c2 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   2e9ba:	4669      	mov	r1, sp
   2e9bc:	2000      	movs	r0, #0
   2e9be:	f7ff fddb 	bl	2e578 <id_create.isra.4>
}
   2e9c2:	b003      	add	sp, #12
   2e9c4:	f85d fb04 	ldr.w	pc, [sp], #4
   2e9c8:	20000000 	.word	0x20000000

0002e9cc <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   2e9cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2e9d0:	4b15      	ldr	r3, [pc, #84]	; (2ea28 <bt_read_static_addr+0x5c>)
   2e9d2:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   2e9d6:	f014 0401 	ands.w	r4, r4, #1
{
   2e9da:	4607      	mov	r7, r0
   2e9dc:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   2e9de:	d015      	beq.n	2ea0c <bt_read_static_addr+0x40>
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   2e9e0:	aa01      	add	r2, sp, #4
   2e9e2:	2100      	movs	r1, #0
   2e9e4:	f64f 4009 	movw	r0, #64521	; 0xfc09
   2e9e8:	f7ff f972 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   2e9ec:	4605      	mov	r5, r0
   2e9ee:	b9c8      	cbnz	r0, 2ea24 <bt_read_static_addr+0x58>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   2e9f0:	9b01      	ldr	r3, [sp, #4]
   2e9f2:	6899      	ldr	r1, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   2e9f4:	784c      	ldrb	r4, [r1, #1]
   2e9f6:	42b4      	cmp	r4, r6
   2e9f8:	bf28      	it	cs
   2e9fa:	4634      	movcs	r4, r6
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2e9fc:	f04f 0816 	mov.w	r8, #22
   2ea00:	1c8e      	adds	r6, r1, #2
	for (i = 0; i < cnt; i++) {
   2ea02:	42a5      	cmp	r5, r4
   2ea04:	db06      	blt.n	2ea14 <bt_read_static_addr+0x48>
	}

	net_buf_unref(rsp);
   2ea06:	9801      	ldr	r0, [sp, #4]
   2ea08:	f015 fb2e 	bl	44068 <net_buf_unref>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   2ea0c:	4620      	mov	r0, r4
   2ea0e:	b002      	add	sp, #8
   2ea10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   2ea14:	fb08 7005 	mla	r0, r8, r5, r7
   2ea18:	2216      	movs	r2, #22
   2ea1a:	4631      	mov	r1, r6
   2ea1c:	f01d fc66 	bl	4c2ec <memcpy>
	for (i = 0; i < cnt; i++) {
   2ea20:	3501      	adds	r5, #1
   2ea22:	e7ee      	b.n	2ea02 <bt_read_static_addr+0x36>
		return 0;
   2ea24:	2400      	movs	r4, #0
   2ea26:	e7f1      	b.n	2ea0c <bt_read_static_addr+0x40>
   2ea28:	20000000 	.word	0x20000000

0002ea2c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   2ea2c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   2ea2e:	4d14      	ldr	r5, [pc, #80]	; (2ea80 <bt_setup_random_id_addr+0x54>)
   2ea30:	79ec      	ldrb	r4, [r5, #7]
{
   2ea32:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   2ea34:	b92c      	cbnz	r4, 2ea42 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   2ea36:	2101      	movs	r1, #1
   2ea38:	a802      	add	r0, sp, #8
   2ea3a:	f7ff ffc7 	bl	2e9cc <bt_read_static_addr>
   2ea3e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   2ea40:	b9b8      	cbnz	r0, 2ea72 <bt_setup_random_id_addr+0x46>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   2ea42:	2100      	movs	r1, #0
   2ea44:	4608      	mov	r0, r1
   2ea46:	f7ff ff2f 	bl	2e8a8 <bt_id_create>
   2ea4a:	e010      	b.n	2ea6e <bt_setup_random_id_addr+0x42>
   2ea4c:	ab02      	add	r3, sp, #8
   2ea4e:	fb07 3106 	mla	r1, r7, r6, r3
   2ea52:	2206      	movs	r2, #6
   2ea54:	f10d 0001 	add.w	r0, sp, #1
   2ea58:	f01d fc48 	bl	4c2ec <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   2ea5c:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   2ea5e:	4669      	mov	r1, sp
   2ea60:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   2ea62:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   2ea66:	f7ff fd87 	bl	2e578 <id_create.isra.4>
				if (err) {
   2ea6a:	3401      	adds	r4, #1
   2ea6c:	b110      	cbz	r0, 2ea74 <bt_setup_random_id_addr+0x48>
}
   2ea6e:	b009      	add	sp, #36	; 0x24
   2ea70:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   2ea72:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   2ea74:	79eb      	ldrb	r3, [r5, #7]
   2ea76:	b2e6      	uxtb	r6, r4
   2ea78:	42b3      	cmp	r3, r6
   2ea7a:	d8e7      	bhi.n	2ea4c <bt_setup_random_id_addr+0x20>
			return 0;
   2ea7c:	2000      	movs	r0, #0
   2ea7e:	e7f6      	b.n	2ea6e <bt_setup_random_id_addr+0x42>
   2ea80:	20000000 	.word	0x20000000

0002ea84 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   2ea84:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   2ea86:	4c07      	ldr	r4, [pc, #28]	; (2eaa4 <bt_id_set_create_conn_own_addr+0x20>)
   2ea88:	7823      	ldrb	r3, [r4, #0]
   2ea8a:	2b01      	cmp	r3, #1
{
   2ea8c:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   2ea8e:	d003      	beq.n	2ea98 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   2ea90:	7823      	ldrb	r3, [r4, #0]
   2ea92:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   2ea94:	2000      	movs	r0, #0
}
   2ea96:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   2ea98:	1c60      	adds	r0, r4, #1
   2ea9a:	f7ff fd3f 	bl	2e51c <set_random_address>
			if (err) {
   2ea9e:	2800      	cmp	r0, #0
   2eaa0:	d0f6      	beq.n	2ea90 <bt_id_set_create_conn_own_addr+0xc>
   2eaa2:	e7f8      	b.n	2ea96 <bt_id_set_create_conn_own_addr+0x12>
   2eaa4:	20000000 	.word	0x20000000

0002eaa8 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   2eaa8:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   2eaaa:	4b0b      	ldr	r3, [pc, #44]	; (2ead8 <bt_id_set_scan_own_addr+0x30>)
   2eaac:	781b      	ldrb	r3, [r3, #0]
   2eaae:	700b      	strb	r3, [r1, #0]
{
   2eab0:	4606      	mov	r6, r0
   2eab2:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   2eab4:	f01e f8bb 	bl	4cc2e <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   2eab8:	b928      	cbnz	r0, 2eac6 <bt_id_set_scan_own_addr+0x1e>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   2eaba:	f01e f945 	bl	4cd48 <bt_id_set_private_addr>
			if (err) {
   2eabe:	4604      	mov	r4, r0
   2eac0:	b918      	cbnz	r0, 2eaca <bt_id_set_scan_own_addr+0x22>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   2eac2:	2301      	movs	r3, #1
   2eac4:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
   2eac6:	2400      	movs	r4, #0
   2eac8:	e004      	b.n	2ead4 <bt_id_set_scan_own_addr+0x2c>
				if (active_scan || !is_adv_using_rand_addr()) {
   2eaca:	b91e      	cbnz	r6, 2ead4 <bt_id_set_scan_own_addr+0x2c>
   2eacc:	f01e f8af 	bl	4cc2e <is_adv_using_rand_addr>
   2ead0:	2800      	cmp	r0, #0
   2ead2:	d1f6      	bne.n	2eac2 <bt_id_set_scan_own_addr+0x1a>
}
   2ead4:	4620      	mov	r0, r4
   2ead6:	bd70      	pop	{r4, r5, r6, pc}
   2ead8:	20000000 	.word	0x20000000

0002eadc <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   2eadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2eae0:	f011 0401 	ands.w	r4, r1, #1
{
   2eae4:	4680      	mov	r8, r0
   2eae6:	460d      	mov	r5, r1
   2eae8:	4692      	mov	sl, r2
   2eaea:	461f      	mov	r7, r3
	id_addr = &bt_dev.id_addr[adv->id];
   2eaec:	7806      	ldrb	r6, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   2eaee:	d02b      	beq.n	2eb48 <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   2eaf0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 2eba4 <bt_id_set_adv_own_addr+0xc8>
   2eaf4:	b12a      	cbz	r2, 2eb02 <bt_id_set_adv_own_addr+0x26>
   2eaf6:	0688      	lsls	r0, r1, #26
   2eaf8:	d503      	bpl.n	2eb02 <bt_id_set_adv_own_addr+0x26>
   2eafa:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
   2eafe:	0659      	lsls	r1, r3, #25
   2eb00:	d54d      	bpl.n	2eb9e <bt_id_set_adv_own_addr+0xc2>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2eb02:	ea4f 09c6 	mov.w	r9, r6, lsl #3
   2eb06:	eba9 0306 	sub.w	r3, r9, r6
   2eb0a:	f818 3003 	ldrb.w	r3, [r8, r3]
   2eb0e:	2b01      	cmp	r3, #1
   2eb10:	d009      	beq.n	2eb26 <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   2eb12:	eba9 0606 	sub.w	r6, r9, r6
   2eb16:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2eb1a:	f1ba 0f00 	cmp.w	sl, #0
   2eb1e:	d10e      	bne.n	2eb3e <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2eb20:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   2eb22:	2400      	movs	r4, #0
   2eb24:	e008      	b.n	2eb38 <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2eb26:	2007      	movs	r0, #7
   2eb28:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
   2eb2c:	4440      	add	r0, r8
   2eb2e:	f7ff fcf5 	bl	2e51c <set_random_address>
				if (err) {
   2eb32:	4604      	mov	r4, r0
   2eb34:	2800      	cmp	r0, #0
   2eb36:	d0ec      	beq.n	2eb12 <bt_id_set_adv_own_addr+0x36>
}
   2eb38:	4620      	mov	r0, r4
   2eb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   2eb3e:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   2eb40:	bf48      	it	mi
   2eb42:	f043 0302 	orrmi.w	r3, r3, #2
   2eb46:	e7eb      	b.n	2eb20 <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   2eb48:	f011 0504 	ands.w	r5, r1, #4
   2eb4c:	d013      	beq.n	2eb76 <bt_id_set_adv_own_addr+0x9a>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   2eb4e:	ea4f 08c6 	mov.w	r8, r6, lsl #3
   2eb52:	4d14      	ldr	r5, [pc, #80]	; (2eba4 <bt_id_set_adv_own_addr+0xc8>)
   2eb54:	eba8 0306 	sub.w	r3, r8, r6
   2eb58:	5ceb      	ldrb	r3, [r5, r3]
   2eb5a:	2b01      	cmp	r3, #1
   2eb5c:	d106      	bne.n	2eb6c <bt_id_set_adv_own_addr+0x90>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   2eb5e:	2007      	movs	r0, #7
   2eb60:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
   2eb64:	4428      	add	r0, r5
   2eb66:	f7ff fcd9 	bl	2e51c <set_random_address>
   2eb6a:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
   2eb6c:	eba8 0606 	sub.w	r6, r8, r6
   2eb70:	5dab      	ldrb	r3, [r5, r6]
   2eb72:	703b      	strb	r3, [r7, #0]
   2eb74:	e7e0      	b.n	2eb38 <bt_id_set_adv_own_addr+0x5c>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2eb76:	2105      	movs	r1, #5
   2eb78:	480b      	ldr	r0, [pc, #44]	; (2eba8 <bt_id_set_adv_own_addr+0xcc>)
   2eb7a:	f01e f84f 	bl	4cc1c <atomic_test_bit>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   2eb7e:	4606      	mov	r6, r0
   2eb80:	b110      	cbz	r0, 2eb88 <bt_id_set_adv_own_addr+0xac>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2eb82:	4628      	mov	r0, r5
   2eb84:	f01e fa7e 	bl	4d084 <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
   2eb88:	4640      	mov	r0, r8
   2eb8a:	f01e f8ef 	bl	4cd6c <bt_id_set_adv_private_addr>
   2eb8e:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
   2eb90:	2001      	movs	r0, #1
   2eb92:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
   2eb94:	2e00      	cmp	r6, #0
   2eb96:	d0cf      	beq.n	2eb38 <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2eb98:	f01e fa74 	bl	4d084 <bt_le_scan_set_enable>
		if (err) {
   2eb9c:	e7cc      	b.n	2eb38 <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
   2eb9e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2eba2:	e7c9      	b.n	2eb38 <bt_id_set_adv_own_addr+0x5c>
   2eba4:	20000000 	.word	0x20000000
   2eba8:	200000cc 	.word	0x200000cc

0002ebac <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2ebac:	6843      	ldr	r3, [r0, #4]
{
   2ebae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ebb0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   2ebb2:	0558      	lsls	r0, r3, #21
   2ebb4:	d502      	bpl.n	2ebbc <valid_adv_param+0x10>
		return false;
   2ebb6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   2ebb8:	b003      	add	sp, #12
   2ebba:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2ebbc:	6922      	ldr	r2, [r4, #16]
   2ebbe:	b10a      	cbz	r2, 2ebc4 <valid_adv_param+0x18>
   2ebc0:	07d9      	lsls	r1, r3, #31
   2ebc2:	d5f8      	bpl.n	2ebb6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   2ebc4:	4d1a      	ldr	r5, [pc, #104]	; (2ec30 <valid_adv_param+0x84>)
   2ebc6:	7820      	ldrb	r0, [r4, #0]
   2ebc8:	79eb      	ldrb	r3, [r5, #7]
   2ebca:	4283      	cmp	r3, r0
   2ebcc:	d9f3      	bls.n	2ebb6 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   2ebce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   2ebd2:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2ebd4:	2207      	movs	r2, #7
   2ebd6:	4669      	mov	r1, sp
   2ebd8:	4428      	add	r0, r5
   2ebda:	9300      	str	r3, [sp, #0]
   2ebdc:	f8cd 3003 	str.w	r3, [sp, #3]
   2ebe0:	f01d fb74 	bl	4c2cc <memcmp>
	if (param->id >= bt_dev.id_count ||
   2ebe4:	2800      	cmp	r0, #0
   2ebe6:	d0e6      	beq.n	2ebb6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2ebe8:	6860      	ldr	r0, [r4, #4]
   2ebea:	07c2      	lsls	r2, r0, #31
   2ebec:	d406      	bmi.n	2ebfc <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   2ebee:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   2ebf2:	2b08      	cmp	r3, #8
   2ebf4:	d802      	bhi.n	2ebfc <valid_adv_param+0x50>
   2ebf6:	68a3      	ldr	r3, [r4, #8]
   2ebf8:	2b9f      	cmp	r3, #159	; 0x9f
   2ebfa:	d9dc      	bls.n	2ebb6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   2ebfc:	f010 0f30 	tst.w	r0, #48	; 0x30
   2ec00:	d002      	beq.n	2ec08 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   2ec02:	6923      	ldr	r3, [r4, #16]
   2ec04:	2b00      	cmp	r3, #0
   2ec06:	d0d6      	beq.n	2ebb6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   2ec08:	06c3      	lsls	r3, r0, #27
   2ec0a:	d401      	bmi.n	2ec10 <valid_adv_param+0x64>
   2ec0c:	6923      	ldr	r3, [r4, #16]
   2ec0e:	b943      	cbnz	r3, 2ec22 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   2ec10:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2ec14:	429a      	cmp	r2, r3
   2ec16:	d8ce      	bhi.n	2ebb6 <valid_adv_param+0xa>
   2ec18:	2a1f      	cmp	r2, #31
   2ec1a:	d9cc      	bls.n	2ebb6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   2ec1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2ec20:	d8c9      	bhi.n	2ebb6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   2ec22:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   2ec26:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   2ec2a:	bf18      	it	ne
   2ec2c:	2001      	movne	r0, #1
   2ec2e:	e7c3      	b.n	2ebb8 <valid_adv_param+0xc>
   2ec30:	20000000 	.word	0x20000000

0002ec34 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   2ec34:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   2ec36:	4605      	mov	r5, r0
   2ec38:	4b1f      	ldr	r3, [pc, #124]	; (2ecb8 <le_adv_start_add_conn+0x84>)
   2ec3a:	f815 2b09 	ldrb.w	r2, [r5], #9
   2ec3e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   2ec42:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2ec44:	2300      	movs	r3, #0
{
   2ec46:	4606      	mov	r6, r0
   2ec48:	2207      	movs	r2, #7
   2ec4a:	460f      	mov	r7, r1
   2ec4c:	4628      	mov	r0, r5
   2ec4e:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2ec50:	9300      	str	r3, [sp, #0]
   2ec52:	f8cd 3003 	str.w	r3, [sp, #3]
   2ec56:	f01d fb39 	bl	4c2cc <memcmp>
   2ec5a:	7832      	ldrb	r2, [r6, #0]
   2ec5c:	4604      	mov	r4, r0
   2ec5e:	b9c0      	cbnz	r0, 2ec92 <le_adv_start_add_conn+0x5e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   2ec60:	4b16      	ldr	r3, [pc, #88]	; (2ecbc <le_adv_start_add_conn+0x88>)
   2ec62:	6818      	ldr	r0, [r3, #0]
   2ec64:	8899      	ldrh	r1, [r3, #4]
   2ec66:	9002      	str	r0, [sp, #8]
   2ec68:	799b      	ldrb	r3, [r3, #6]
   2ec6a:	f8ad 100c 	strh.w	r1, [sp, #12]
   2ec6e:	4610      	mov	r0, r2
   2ec70:	a902      	add	r1, sp, #8
   2ec72:	f88d 300e 	strb.w	r3, [sp, #14]
   2ec76:	f001 f917 	bl	2fea8 <bt_conn_add_le>
		if (!conn) {
   2ec7a:	4605      	mov	r5, r0
   2ec7c:	b920      	cbnz	r0, 2ec88 <le_adv_start_add_conn+0x54>
			return -ENOMEM;
   2ec7e:	f06f 040b 	mvn.w	r4, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   2ec82:	4620      	mov	r0, r4
   2ec84:	b005      	add	sp, #20
   2ec86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   2ec88:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2ec8a:	f000 ff13 	bl	2fab4 <bt_conn_set_state>
	*out_conn = conn;
   2ec8e:	603d      	str	r5, [r7, #0]
	return 0;
   2ec90:	e7f7      	b.n	2ec82 <le_adv_start_add_conn+0x4e>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   2ec92:	4629      	mov	r1, r5
   2ec94:	4610      	mov	r0, r2
   2ec96:	f01e fb94 	bl	4d3c2 <bt_conn_exists_le>
   2ec9a:	4604      	mov	r4, r0
   2ec9c:	b940      	cbnz	r0, 2ecb0 <le_adv_start_add_conn+0x7c>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   2ec9e:	4629      	mov	r1, r5
   2eca0:	7830      	ldrb	r0, [r6, #0]
   2eca2:	f001 f901 	bl	2fea8 <bt_conn_add_le>
	if (!conn) {
   2eca6:	4605      	mov	r5, r0
   2eca8:	2800      	cmp	r0, #0
   2ecaa:	d0e8      	beq.n	2ec7e <le_adv_start_add_conn+0x4a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   2ecac:	2105      	movs	r1, #5
   2ecae:	e7ec      	b.n	2ec8a <le_adv_start_add_conn+0x56>
		return -EINVAL;
   2ecb0:	f06f 0415 	mvn.w	r4, #21
   2ecb4:	e7e5      	b.n	2ec82 <le_adv_start_add_conn+0x4e>
   2ecb6:	bf00      	nop
   2ecb8:	20000000 	.word	0x20000000
   2ecbc:	00051e59 	.word	0x00051e59

0002ecc0 <bt_le_ext_adv_foreach>:
{
   2ecc0:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   2ecc2:	4801      	ldr	r0, [pc, #4]	; (2ecc8 <bt_le_ext_adv_foreach+0x8>)
   2ecc4:	4718      	bx	r3
   2ecc6:	bf00      	nop
   2ecc8:	20000018 	.word	0x20000018

0002eccc <bt_le_adv_lookup_legacy>:
}
   2eccc:	4800      	ldr	r0, [pc, #0]	; (2ecd0 <bt_le_adv_lookup_legacy+0x4>)
   2ecce:	4770      	bx	lr
   2ecd0:	20000018 	.word	0x20000018

0002ecd4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   2ecd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   2ecd8:	690d      	ldr	r5, [r1, #16]
{
   2ecda:	b08f      	sub	sp, #60	; 0x3c
   2ecdc:	469b      	mov	fp, r3
	struct bt_conn *conn = NULL;
   2ecde:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   2ece0:	ebb5 0903 	subs.w	r9, r5, r3
{
   2ece4:	4606      	mov	r6, r0
   2ece6:	460c      	mov	r4, r1
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ece8:	488c      	ldr	r0, [pc, #560]	; (2ef1c <bt_le_adv_start_legacy+0x248>)
{
   2ecea:	9205      	str	r2, [sp, #20]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ecec:	f04f 0101 	mov.w	r1, #1
	bool dir_adv = (param->peer != NULL), scannable = false;
   2ecf0:	bf18      	it	ne
   2ecf2:	f04f 0901 	movne.w	r9, #1
	struct bt_conn *conn = NULL;
   2ecf6:	9307      	str	r3, [sp, #28]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ecf8:	f01e f875 	bl	4cde6 <atomic_test_bit>
   2ecfc:	2800      	cmp	r0, #0
   2ecfe:	f000 8102 	beq.w	2ef06 <bt_le_adv_start_legacy+0x232>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   2ed02:	4620      	mov	r0, r4
   2ed04:	f7ff ff52 	bl	2ebac <valid_adv_param>
   2ed08:	b928      	cbnz	r0, 2ed16 <bt_le_adv_start_legacy+0x42>
		return -EINVAL;
   2ed0a:	f06f 0a15 	mvn.w	sl, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   2ed0e:	4650      	mov	r0, sl
   2ed10:	b00f      	add	sp, #60	; 0x3c
   2ed12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   2ed16:	4620      	mov	r0, r4
   2ed18:	f7ff fc6a 	bl	2e5f0 <bt_id_adv_random_addr_check>
   2ed1c:	4680      	mov	r8, r0
   2ed1e:	2800      	cmp	r0, #0
   2ed20:	d0f3      	beq.n	2ed0a <bt_le_adv_start_legacy+0x36>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2ed22:	f106 0710 	add.w	r7, r6, #16
   2ed26:	2106      	movs	r1, #6
   2ed28:	4638      	mov	r0, r7
   2ed2a:	f01e f85c 	bl	4cde6 <atomic_test_bit>
   2ed2e:	4682      	mov	sl, r0
   2ed30:	2800      	cmp	r0, #0
   2ed32:	f040 80eb 	bne.w	2ef0c <bt_le_adv_start_legacy+0x238>
	(void)memset(&set_param, 0, sizeof(set_param));
   2ed36:	4601      	mov	r1, r0
   2ed38:	220f      	movs	r2, #15
   2ed3a:	a80a      	add	r0, sp, #40	; 0x28
   2ed3c:	f01d fae1 	bl	4c302 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   2ed40:	68a2      	ldr	r2, [r4, #8]
   2ed42:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   2ed46:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   2ed48:	68e2      	ldr	r2, [r4, #12]
   2ed4a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   2ed4e:	f01e f83b 	bl	4cdc8 <get_adv_channel_map>
	if (adv->id != param->id) {
   2ed52:	7832      	ldrb	r2, [r6, #0]
   2ed54:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   2ed56:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   2ed5a:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   2ed5c:	f88d a036 	strb.w	sl, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   2ed60:	d004      	beq.n	2ed6c <bt_le_adv_start_legacy+0x98>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ed62:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   2ed66:	486d      	ldr	r0, [pc, #436]	; (2ef1c <bt_le_adv_start_legacy+0x248>)
   2ed68:	f01e f846 	bl	4cdf8 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   2ed6c:	4a6c      	ldr	r2, [pc, #432]	; (2ef20 <bt_le_adv_start_legacy+0x24c>)
	adv->id = param->id;
   2ed6e:	7823      	ldrb	r3, [r4, #0]
   2ed70:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   2ed72:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   2ed76:	6861      	ldr	r1, [r4, #4]
   2ed78:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   2ed7c:	464a      	mov	r2, r9
   2ed7e:	4630      	mov	r0, r6
   2ed80:	f7ff feac 	bl	2eadc <bt_id_set_adv_own_addr>
	if (err) {
   2ed84:	4682      	mov	sl, r0
   2ed86:	2800      	cmp	r0, #0
   2ed88:	d1c1      	bne.n	2ed0e <bt_le_adv_start_legacy+0x3a>
	if (dir_adv) {
   2ed8a:	f106 0009 	add.w	r0, r6, #9
   2ed8e:	2d00      	cmp	r5, #0
   2ed90:	d049      	beq.n	2ee26 <bt_le_adv_start_legacy+0x152>
	memcpy(dst, src, sizeof(*dst));
   2ed92:	6921      	ldr	r1, [r4, #16]
   2ed94:	2207      	movs	r2, #7
   2ed96:	f01d faa9 	bl	4c2ec <memcpy>
	name_type = get_adv_name_type_param(param);
   2ed9a:	4620      	mov	r0, r4
   2ed9c:	f01e f927 	bl	4cfee <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2eda0:	6863      	ldr	r3, [r4, #4]
   2eda2:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   2eda4:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   2eda6:	d547      	bpl.n	2ee38 <bt_le_adv_start_legacy+0x164>
		if (dir_adv) {
   2eda8:	2d00      	cmp	r5, #0
   2edaa:	d042      	beq.n	2ee32 <bt_le_adv_start_legacy+0x15e>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   2edac:	f013 0f10 	tst.w	r3, #16
   2edb0:	bf14      	ite	ne
   2edb2:	2304      	movne	r3, #4
   2edb4:	2301      	moveq	r3, #1
   2edb6:	2207      	movs	r2, #7
   2edb8:	6921      	ldr	r1, [r4, #16]
   2edba:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2edbe:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   2edc2:	f01d fa93 	bl	4c2ec <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   2edc6:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   2edca:	210f      	movs	r1, #15
   2edcc:	f242 0006 	movw	r0, #8198	; 0x2006
   2edd0:	f7fe ff24 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   2edd4:	4682      	mov	sl, r0
   2edd6:	2800      	cmp	r0, #0
   2edd8:	f000 809b 	beq.w	2ef12 <bt_le_adv_start_legacy+0x23e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2eddc:	220f      	movs	r2, #15
   2edde:	a90a      	add	r1, sp, #40	; 0x28
   2ede0:	3008      	adds	r0, #8
   2ede2:	f021 f9de 	bl	501a2 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   2ede6:	2200      	movs	r2, #0
   2ede8:	4651      	mov	r1, sl
   2edea:	f242 0006 	movw	r0, #8198	; 0x2006
   2edee:	f7fe ff6f 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   2edf2:	2800      	cmp	r0, #0
   2edf4:	f040 8090 	bne.w	2ef18 <bt_le_adv_start_legacy+0x244>
	if (!dir_adv) {
   2edf8:	b375      	cbz	r5, 2ee58 <bt_le_adv_start_legacy+0x184>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2edfa:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2edfc:	07db      	lsls	r3, r3, #31
   2edfe:	d439      	bmi.n	2ee74 <bt_le_adv_start_legacy+0x1a0>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2ee00:	2101      	movs	r1, #1
   2ee02:	4630      	mov	r0, r6
   2ee04:	f01e f903 	bl	4d00e <bt_le_adv_set_enable_legacy>
	if (err) {
   2ee08:	4682      	mov	sl, r0
   2ee0a:	9807      	ldr	r0, [sp, #28]
   2ee0c:	f1ba 0f00 	cmp.w	sl, #0
   2ee10:	d073      	beq.n	2eefa <bt_le_adv_start_legacy+0x226>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2ee12:	2800      	cmp	r0, #0
   2ee14:	f43f af7b 	beq.w	2ed0e <bt_le_adv_start_legacy+0x3a>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2ee18:	2100      	movs	r1, #0
   2ee1a:	f000 fe4b 	bl	2fab4 <bt_conn_set_state>
			bt_conn_unref(conn);
   2ee1e:	9807      	ldr	r0, [sp, #28]
   2ee20:	f01e f9f5 	bl	4d20e <bt_conn_unref>
   2ee24:	e773      	b.n	2ed0e <bt_le_adv_start_legacy+0x3a>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   2ee26:	9508      	str	r5, [sp, #32]
   2ee28:	2207      	movs	r2, #7
   2ee2a:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   2ee2e:	a908      	add	r1, sp, #32
   2ee30:	e7b1      	b.n	2ed96 <bt_le_adv_start_legacy+0xc2>
			set_param.type = BT_HCI_ADV_IND;
   2ee32:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   2ee36:	e7c8      	b.n	2edca <bt_le_adv_start_legacy+0xf6>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   2ee38:	059a      	lsls	r2, r3, #22
   2ee3a:	d403      	bmi.n	2ee44 <bt_le_adv_start_legacy+0x170>
   2ee3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2ee3e:	b90b      	cbnz	r3, 2ee44 <bt_le_adv_start_legacy+0x170>
   2ee40:	2802      	cmp	r0, #2
   2ee42:	d103      	bne.n	2ee4c <bt_le_adv_start_legacy+0x178>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   2ee44:	2302      	movs	r3, #2
   2ee46:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2ee4a:	e7be      	b.n	2edca <bt_le_adv_start_legacy+0xf6>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   2ee4c:	2303      	movs	r3, #3
   2ee4e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bool dir_adv = (param->peer != NULL), scannable = false;
   2ee52:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   2ee56:	e7b8      	b.n	2edca <bt_le_adv_start_legacy+0xf6>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   2ee58:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2ee5a:	9300      	str	r3, [sp, #0]
   2ee5c:	e9cd 8901 	strd	r8, r9, [sp, #4]
   2ee60:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2ee62:	9905      	ldr	r1, [sp, #20]
   2ee64:	465a      	mov	r2, fp
   2ee66:	4630      	mov	r0, r6
   2ee68:	f01e f84a 	bl	4cf00 <le_adv_update.constprop.6>
		if (err) {
   2ee6c:	4682      	mov	sl, r0
   2ee6e:	2800      	cmp	r0, #0
   2ee70:	d0c3      	beq.n	2edfa <bt_le_adv_start_legacy+0x126>
   2ee72:	e74c      	b.n	2ed0e <bt_le_adv_start_legacy+0x3a>
		err = le_adv_start_add_conn(adv, &conn);
   2ee74:	a907      	add	r1, sp, #28
   2ee76:	4630      	mov	r0, r6
   2ee78:	f7ff fedc 	bl	2ec34 <le_adv_start_add_conn>
		if (err) {
   2ee7c:	4682      	mov	sl, r0
   2ee7e:	2800      	cmp	r0, #0
   2ee80:	d0be      	beq.n	2ee00 <bt_le_adv_start_legacy+0x12c>
			if (err == -ENOMEM && !dir_adv &&
   2ee82:	f110 0f0c 	cmn.w	r0, #12
   2ee86:	f47f af42 	bne.w	2ed0e <bt_le_adv_start_legacy+0x3a>
   2ee8a:	2d00      	cmp	r5, #0
   2ee8c:	f47f af3f 	bne.w	2ed0e <bt_le_adv_start_legacy+0x3a>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   2ee90:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   2ee92:	0798      	lsls	r0, r3, #30
   2ee94:	f53f af3b 	bmi.w	2ed0e <bt_le_adv_start_legacy+0x3a>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2ee98:	6862      	ldr	r2, [r4, #4]
   2ee9a:	f082 0202 	eor.w	r2, r2, #2
   2ee9e:	f3c2 0a40 	ubfx	sl, r2, #1, #1
   2eea2:	f00a 0201 	and.w	r2, sl, #1
   2eea6:	210d      	movs	r1, #13
   2eea8:	4638      	mov	r0, r7
   2eeaa:	f01e f812 	bl	4ced2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   2eeae:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2eeb2:	425a      	negs	r2, r3
   2eeb4:	415a      	adcs	r2, r3
   2eeb6:	2107      	movs	r1, #7
   2eeb8:	4638      	mov	r0, r7
   2eeba:	f01e f80a 	bl	4ced2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   2eebe:	f1a9 0102 	sub.w	r1, r9, #2
   2eec2:	424a      	negs	r2, r1
   2eec4:	414a      	adcs	r2, r1
   2eec6:	4638      	mov	r0, r7
   2eec8:	2108      	movs	r1, #8
   2eeca:	f01e f802 	bl	4ced2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   2eece:	6862      	ldr	r2, [r4, #4]
   2eed0:	2109      	movs	r1, #9
   2eed2:	f002 0201 	and.w	r2, r2, #1
   2eed6:	4638      	mov	r0, r7
   2eed8:	f01d fffb 	bl	4ced2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   2eedc:	4642      	mov	r2, r8
   2eede:	210a      	movs	r1, #10
   2eee0:	4638      	mov	r0, r7
   2eee2:	f01d fff6 	bl	4ced2 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   2eee6:	6862      	ldr	r2, [r4, #4]
   2eee8:	210c      	movs	r1, #12
   2eeea:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2eeee:	4638      	mov	r0, r7
   2eef0:	f01d ffef 	bl	4ced2 <atomic_set_bit_to>
	return 0;
   2eef4:	f04f 0a00 	mov.w	sl, #0
   2eef8:	e709      	b.n	2ed0e <bt_le_adv_start_legacy+0x3a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   2eefa:	b108      	cbz	r0, 2ef00 <bt_le_adv_start_legacy+0x22c>
		bt_conn_unref(conn);
   2eefc:	f01e f987 	bl	4d20e <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   2ef00:	2d00      	cmp	r5, #0
   2ef02:	d1ce      	bne.n	2eea2 <bt_le_adv_start_legacy+0x1ce>
   2ef04:	e7c8      	b.n	2ee98 <bt_le_adv_start_legacy+0x1c4>
		return -EAGAIN;
   2ef06:	f06f 0a0a 	mvn.w	sl, #10
   2ef0a:	e700      	b.n	2ed0e <bt_le_adv_start_legacy+0x3a>
		return -EALREADY;
   2ef0c:	f06f 0a77 	mvn.w	sl, #119	; 0x77
   2ef10:	e6fd      	b.n	2ed0e <bt_le_adv_start_legacy+0x3a>
		return -ENOBUFS;
   2ef12:	f06f 0a68 	mvn.w	sl, #104	; 0x68
   2ef16:	e6fa      	b.n	2ed0e <bt_le_adv_start_legacy+0x3a>
   2ef18:	4682      	mov	sl, r0
   2ef1a:	e6f8      	b.n	2ed0e <bt_le_adv_start_legacy+0x3a>
   2ef1c:	200000cc 	.word	0x200000cc
   2ef20:	20000000 	.word	0x20000000

0002ef24 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   2ef24:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ef26:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2ef28:	9a06      	ldr	r2, [sp, #24]
{
   2ef2a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   2ef2c:	e9cd 3200 	strd	r3, r2, [sp]
   2ef30:	462b      	mov	r3, r5
   2ef32:	460a      	mov	r2, r1
   2ef34:	4601      	mov	r1, r0
   2ef36:	4811      	ldr	r0, [pc, #68]	; (2ef7c <bt_le_adv_start+0x58>)
   2ef38:	f7ff fecc 	bl	2ecd4 <bt_le_adv_start_legacy>
   2ef3c:	4621      	mov	r1, r4
   2ef3e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   2ef40:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   2ef42:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   2ef46:	429d      	cmp	r5, r3
   2ef48:	d102      	bne.n	2ef50 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   2ef4a:	4630      	mov	r0, r6
   2ef4c:	b002      	add	sp, #8
   2ef4e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   2ef50:	880a      	ldrh	r2, [r1, #0]
   2ef52:	4282      	cmp	r2, r0
   2ef54:	d104      	bne.n	2ef60 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   2ef56:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   2ef58:	b112      	cbz	r2, 2ef60 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   2ef5a:	7812      	ldrb	r2, [r2, #0]
   2ef5c:	07d2      	lsls	r2, r2, #31
   2ef5e:	d402      	bmi.n	2ef66 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   2ef60:	3301      	adds	r3, #1
   2ef62:	3108      	adds	r1, #8
   2ef64:	e7ef      	b.n	2ef46 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   2ef66:	4906      	ldr	r1, [pc, #24]	; (2ef80 <bt_le_adv_start+0x5c>)
   2ef68:	4806      	ldr	r0, [pc, #24]	; (2ef84 <bt_le_adv_start+0x60>)
   2ef6a:	f022 f926 	bl	511ba <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   2ef6e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ef72:	2300      	movs	r3, #0
   2ef74:	4803      	ldr	r0, [pc, #12]	; (2ef84 <bt_le_adv_start+0x60>)
   2ef76:	f019 fea9 	bl	48ccc <k_work_reschedule>
   2ef7a:	e7e6      	b.n	2ef4a <bt_le_adv_start+0x26>
   2ef7c:	20000018 	.word	0x20000018
   2ef80:	0004d063 	.word	0x0004d063
   2ef84:	20000030 	.word	0x20000030

0002ef88 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   2ef88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   2ef8a:	4829      	ldr	r0, [pc, #164]	; (2f030 <bt_le_adv_stop+0xa8>)
   2ef8c:	f01e f866 	bl	4d05c <bt_le_lim_adv_cancel_timeout>
   2ef90:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2ef94:	4827      	ldr	r0, [pc, #156]	; (2f034 <bt_le_adv_stop+0xac>)
   2ef96:	f01d ff2f 	bl	4cdf8 <atomic_and>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2ef9a:	2106      	movs	r1, #6
   2ef9c:	4825      	ldr	r0, [pc, #148]	; (2f034 <bt_le_adv_stop+0xac>)
   2ef9e:	f01d ff22 	bl	4cde6 <atomic_test_bit>
   2efa2:	b918      	cbnz	r0, 2efac <bt_le_adv_stop+0x24>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   2efa4:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   2efa6:	4620      	mov	r0, r4
   2efa8:	b004      	add	sp, #16
   2efaa:	bd10      	pop	{r4, pc}
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2efac:	2109      	movs	r1, #9
   2efae:	4821      	ldr	r0, [pc, #132]	; (2f034 <bt_le_adv_stop+0xac>)
   2efb0:	f01d ff19 	bl	4cde6 <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2efb4:	b308      	cbz	r0, 2effa <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   2efb6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   2efb8:	2207      	movs	r2, #7
   2efba:	4669      	mov	r1, sp
   2efbc:	481e      	ldr	r0, [pc, #120]	; (2f038 <bt_le_adv_stop+0xb0>)
   2efbe:	9300      	str	r3, [sp, #0]
   2efc0:	f8cd 3003 	str.w	r3, [sp, #3]
   2efc4:	f01d f982 	bl	4c2cc <memcmp>
   2efc8:	4b1c      	ldr	r3, [pc, #112]	; (2f03c <bt_le_adv_stop+0xb4>)
   2efca:	bb68      	cbnz	r0, 2f028 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   2efcc:	4a1c      	ldr	r2, [pc, #112]	; (2f040 <bt_le_adv_stop+0xb8>)
   2efce:	8891      	ldrh	r1, [r2, #4]
   2efd0:	6810      	ldr	r0, [r2, #0]
   2efd2:	7992      	ldrb	r2, [r2, #6]
   2efd4:	f8ad 100c 	strh.w	r1, [sp, #12]
   2efd8:	f88d 200e 	strb.w	r2, [sp, #14]
   2efdc:	9002      	str	r0, [sp, #8]
   2efde:	2204      	movs	r2, #4
   2efe0:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2efe2:	7e18      	ldrb	r0, [r3, #24]
   2efe4:	f000 ffa0 	bl	2ff28 <bt_conn_lookup_state_le>
   2efe8:	4604      	mov	r4, r0
	if (conn) {
   2efea:	b130      	cbz	r0, 2effa <bt_le_adv_stop+0x72>
		conn->err = status;
   2efec:	2100      	movs	r1, #0
   2efee:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2eff0:	f000 fd60 	bl	2fab4 <bt_conn_set_state>
		bt_conn_unref(conn);
   2eff4:	4620      	mov	r0, r4
   2eff6:	f01e f90a 	bl	4d20e <bt_conn_unref>
		err = bt_le_adv_set_enable_legacy(adv, false);
   2effa:	2100      	movs	r1, #0
   2effc:	480c      	ldr	r0, [pc, #48]	; (2f030 <bt_le_adv_stop+0xa8>)
   2effe:	f01e f806 	bl	4d00e <bt_le_adv_set_enable_legacy>
		if (err) {
   2f002:	4604      	mov	r4, r0
   2f004:	2800      	cmp	r0, #0
   2f006:	d1ce      	bne.n	2efa6 <bt_le_adv_stop+0x1e>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2f008:	2105      	movs	r1, #5
   2f00a:	480e      	ldr	r0, [pc, #56]	; (2f044 <bt_le_adv_stop+0xbc>)
   2f00c:	f01d feeb 	bl	4cde6 <atomic_test_bit>
   2f010:	2800      	cmp	r0, #0
   2f012:	d0c7      	beq.n	2efa4 <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   2f014:	4620      	mov	r0, r4
   2f016:	f01e f835 	bl	4d084 <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
   2f01a:	4620      	mov	r0, r4
   2f01c:	f01d fe94 	bl	4cd48 <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   2f020:	2001      	movs	r0, #1
   2f022:	f01e f82f 	bl	4d084 <bt_le_scan_set_enable>
   2f026:	e7be      	b.n	2efa6 <bt_le_adv_stop+0x1e>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   2f028:	2205      	movs	r2, #5
   2f02a:	f103 0121 	add.w	r1, r3, #33	; 0x21
   2f02e:	e7d8      	b.n	2efe2 <bt_le_adv_stop+0x5a>
   2f030:	20000018 	.word	0x20000018
   2f034:	20000028 	.word	0x20000028
   2f038:	20000021 	.word	0x20000021
   2f03c:	20000000 	.word	0x20000000
   2f040:	00051e59 	.word	0x00051e59
   2f044:	200000cc 	.word	0x200000cc

0002f048 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   2f048:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2f04a:	210d      	movs	r1, #13
   2f04c:	481c      	ldr	r0, [pc, #112]	; (2f0c0 <bt_le_adv_resume+0x78>)
   2f04e:	4c1c      	ldr	r4, [pc, #112]	; (2f0c0 <bt_le_adv_resume+0x78>)
   2f050:	f01d fec9 	bl	4cde6 <atomic_test_bit>
   2f054:	b388      	cbz	r0, 2f0ba <bt_le_adv_resume+0x72>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
   2f056:	2106      	movs	r1, #6
   2f058:	4620      	mov	r0, r4
   2f05a:	f01d fec4 	bl	4cde6 <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   2f05e:	4605      	mov	r5, r0
   2f060:	bb58      	cbnz	r0, 2f0ba <bt_le_adv_resume+0x72>
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   2f062:	2109      	movs	r1, #9
   2f064:	4620      	mov	r0, r4
   2f066:	f01d febe 	bl	4cde6 <atomic_test_bit>
   2f06a:	b330      	cbz	r0, 2f0ba <bt_le_adv_resume+0x72>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   2f06c:	a901      	add	r1, sp, #4
   2f06e:	f1a4 0010 	sub.w	r0, r4, #16
   2f072:	f7ff fddf 	bl	2ec34 <le_adv_start_add_conn>
	if (err) {
   2f076:	bb00      	cbnz	r0, 2f0ba <bt_le_adv_resume+0x72>
	return bt_le_adv_set_enable_legacy(adv, enable);
   2f078:	2101      	movs	r1, #1
   2f07a:	f1a4 0010 	sub.w	r0, r4, #16
   2f07e:	f01d ffc6 	bl	4d00e <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   2f082:	b150      	cbz	r0, 2f09a <bt_le_adv_resume+0x52>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2f084:	4629      	mov	r1, r5
   2f086:	9801      	ldr	r0, [sp, #4]
   2f088:	f000 fd14 	bl	2fab4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f08c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2f090:	4620      	mov	r0, r4
   2f092:	f01d feb1 	bl	4cdf8 <atomic_and>
	return (old & mask) != 0;
   2f096:	f3c0 3540 	ubfx	r5, r0, #13, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   2f09a:	9801      	ldr	r0, [sp, #4]
   2f09c:	f01e f8b7 	bl	4d20e <bt_conn_unref>
	if (persist_paused) {
   2f0a0:	b15d      	cbz	r5, 2f0ba <bt_le_adv_resume+0x72>
   2f0a2:	f3bf 8f5b 	dmb	ish
   2f0a6:	e854 3f00 	ldrex	r3, [r4]
   2f0aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2f0ae:	e844 3200 	strex	r2, r3, [r4]
   2f0b2:	2a00      	cmp	r2, #0
   2f0b4:	d1f7      	bne.n	2f0a6 <bt_le_adv_resume+0x5e>
   2f0b6:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   2f0ba:	b003      	add	sp, #12
   2f0bc:	bd30      	pop	{r4, r5, pc}
   2f0be:	bf00      	nop
   2f0c0:	20000028 	.word	0x20000028

0002f0c4 <atomic_test_bit.constprop.14>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f0c4:	4b05      	ldr	r3, [pc, #20]	; (2f0dc <atomic_test_bit.constprop.14+0x18>)
   2f0c6:	f3bf 8f5b 	dmb	ish
   2f0ca:	681b      	ldr	r3, [r3, #0]
   2f0cc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2f0d0:	fa43 f000 	asr.w	r0, r3, r0
}
   2f0d4:	f000 0001 	and.w	r0, r0, #1
   2f0d8:	4770      	bx	lr
   2f0da:	bf00      	nop
   2f0dc:	200000cc 	.word	0x200000cc

0002f0e0 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   2f0e0:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   2f0e2:	2102      	movs	r1, #2
{
   2f0e4:	b087      	sub	sp, #28
   2f0e6:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   2f0e8:	f242 000c 	movw	r0, #8204	; 0x200c
   2f0ec:	f7fe fd96 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   2f0f0:	4605      	mov	r5, r0
   2f0f2:	b300      	cbz	r0, 2f136 <bt_le_scan_set_enable_legacy+0x56>
	return net_buf_simple_add(&buf->b, len);
   2f0f4:	2102      	movs	r1, #2
   2f0f6:	3008      	adds	r0, #8
   2f0f8:	f021 f84d 	bl	50196 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   2f0fc:	2c01      	cmp	r4, #1
   2f0fe:	4602      	mov	r2, r0
   2f100:	d116      	bne.n	2f130 <bt_le_scan_set_enable_legacy+0x50>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   2f102:	2008      	movs	r0, #8
   2f104:	f7ff ffde 	bl	2f0c4 <atomic_test_bit.constprop.14>
   2f108:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2f10a:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   2f10c:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   2f10e:	425c      	negs	r4, r3
   2f110:	415c      	adcs	r4, r3
   2f112:	4a0a      	ldr	r2, [pc, #40]	; (2f13c <bt_le_scan_set_enable_legacy+0x5c>)
   2f114:	9400      	str	r4, [sp, #0]
   2f116:	a903      	add	r1, sp, #12
   2f118:	4628      	mov	r0, r5
   2f11a:	2305      	movs	r3, #5
   2f11c:	f7fe fd6c 	bl	2dbf8 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   2f120:	2200      	movs	r2, #0
   2f122:	4629      	mov	r1, r5
   2f124:	f242 000c 	movw	r0, #8204	; 0x200c
   2f128:	f7fe fdd2 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   2f12c:	b007      	add	sp, #28
   2f12e:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   2f130:	2300      	movs	r3, #0
   2f132:	7043      	strb	r3, [r0, #1]
   2f134:	e7e9      	b.n	2f10a <bt_le_scan_set_enable_legacy+0x2a>
		return -ENOBUFS;
   2f136:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2f13a:	e7f7      	b.n	2f12c <bt_le_scan_set_enable_legacy+0x4c>
   2f13c:	200000cc 	.word	0x200000cc

0002f140 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   2f140:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f142:	4605      	mov	r5, r0
   2f144:	4614      	mov	r4, r2
   2f146:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   2f148:	2207      	movs	r2, #7
   2f14a:	2100      	movs	r1, #0
   2f14c:	4668      	mov	r0, sp
   2f14e:	f01d f8d8 	bl	4c302 <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   2f152:	2300      	movs	r3, #0
   2f154:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   2f158:	1e6b      	subs	r3, r5, #1
   2f15a:	4258      	negs	r0, r3
   2f15c:	f10d 0105 	add.w	r1, sp, #5
   2f160:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   2f162:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   2f166:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   2f16a:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   2f16e:	f7ff fc9b 	bl	2eaa8 <bt_id_set_scan_own_addr>
	if (err) {
   2f172:	4604      	mov	r4, r0
   2f174:	bb38      	cbnz	r0, 2f1c6 <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   2f176:	2107      	movs	r1, #7
   2f178:	f242 000b 	movw	r0, #8203	; 0x200b
   2f17c:	f7fe fd4e 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   2f180:	4606      	mov	r6, r0
   2f182:	b348      	cbz	r0, 2f1d8 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2f184:	2207      	movs	r2, #7
   2f186:	4669      	mov	r1, sp
   2f188:	3008      	adds	r0, #8
   2f18a:	f021 f80a 	bl	501a2 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   2f18e:	4622      	mov	r2, r4
   2f190:	4631      	mov	r1, r6
   2f192:	f242 000b 	movw	r0, #8203	; 0x200b
   2f196:	f7fe fd9b 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   2f19a:	4604      	mov	r4, r0
   2f19c:	b998      	cbnz	r0, 2f1c6 <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   2f19e:	2001      	movs	r0, #1
   2f1a0:	f7ff ff9e 	bl	2f0e0 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   2f1a4:	4604      	mov	r4, r0
   2f1a6:	b970      	cbnz	r0, 2f1c6 <start_le_scan_legacy+0x86>
	if (val) {
   2f1a8:	2d01      	cmp	r5, #1
   2f1aa:	d10f      	bne.n	2f1cc <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2f1ac:	f3bf 8f5b 	dmb	ish
   2f1b0:	4b0b      	ldr	r3, [pc, #44]	; (2f1e0 <start_le_scan_legacy+0xa0>)
   2f1b2:	e853 2f00 	ldrex	r2, [r3]
   2f1b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2f1ba:	e843 2100 	strex	r1, r2, [r3]
   2f1be:	2900      	cmp	r1, #0
   2f1c0:	d1f7      	bne.n	2f1b2 <start_le_scan_legacy+0x72>
   2f1c2:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   2f1c6:	4620      	mov	r0, r4
   2f1c8:	b002      	add	sp, #8
   2f1ca:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f1cc:	f06f 0180 	mvn.w	r1, #128	; 0x80
   2f1d0:	4803      	ldr	r0, [pc, #12]	; (2f1e0 <start_le_scan_legacy+0xa0>)
   2f1d2:	f01d ff48 	bl	4d066 <atomic_and>
   2f1d6:	e7f6      	b.n	2f1c6 <start_le_scan_legacy+0x86>
		return -ENOBUFS;
   2f1d8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2f1dc:	e7f3      	b.n	2f1c6 <start_le_scan_legacy+0x86>
   2f1de:	bf00      	nop
   2f1e0:	200000cc 	.word	0x200000cc

0002f1e4 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   2f1e4:	4b01      	ldr	r3, [pc, #4]	; (2f1ec <bt_scan_reset+0x8>)
   2f1e6:	2200      	movs	r2, #0
   2f1e8:	601a      	str	r2, [r3, #0]
}
   2f1ea:	4770      	bx	lr
   2f1ec:	20003fe4 	.word	0x20003fe4

0002f1f0 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   2f1f0:	b538      	push	{r3, r4, r5, lr}
   2f1f2:	4605      	mov	r5, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f1f4:	2006      	movs	r0, #6
   2f1f6:	f7ff ff65 	bl	2f0c4 <atomic_test_bit.constprop.14>
   2f1fa:	4602      	mov	r2, r0
   2f1fc:	b108      	cbz	r0, 2f202 <bt_le_scan_update+0x12>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   2f1fe:	2000      	movs	r0, #0
   2f200:	e030      	b.n	2f264 <bt_le_scan_update+0x74>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2f202:	2005      	movs	r0, #5
   2f204:	f7ff ff5e 	bl	2f0c4 <atomic_test_bit.constprop.14>
   2f208:	bb38      	cbnz	r0, 2f25a <bt_le_scan_update+0x6a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   2f20a:	2100      	movs	r1, #0
   2f20c:	2206      	movs	r2, #6
   2f20e:	4608      	mov	r0, r1
   2f210:	f000 fe8a 	bl	2ff28 <bt_conn_lookup_state_le>
		if (conn) {
   2f214:	4604      	mov	r4, r0
   2f216:	bb30      	cbnz	r0, 2f266 <bt_le_scan_update+0x76>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   2f218:	2202      	movs	r2, #2
   2f21a:	4601      	mov	r1, r0
   2f21c:	f000 fe84 	bl	2ff28 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   2f220:	2800      	cmp	r0, #0
   2f222:	d0ec      	beq.n	2f1fe <bt_le_scan_update+0xe>
   2f224:	f3bf 8f5b 	dmb	ish
   2f228:	4b10      	ldr	r3, [pc, #64]	; (2f26c <bt_le_scan_update+0x7c>)
   2f22a:	e853 2f00 	ldrex	r2, [r3]
   2f22e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2f232:	e843 2100 	strex	r1, r2, [r3]
   2f236:	2900      	cmp	r1, #0
   2f238:	d1f7      	bne.n	2f22a <bt_le_scan_update+0x3a>
   2f23a:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   2f23e:	f01d ffe6 	bl	4d20e <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   2f242:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2f244:	4620      	mov	r0, r4
   2f246:	bf15      	itete	ne
   2f248:	2230      	movne	r2, #48	; 0x30
   2f24a:	2212      	moveq	r2, #18
   2f24c:	2160      	movne	r1, #96	; 0x60
   2f24e:	f44f 6100 	moveq.w	r1, #2048	; 0x800
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   2f252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   2f256:	f7ff bf73 	b.w	2f140 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   2f25a:	4610      	mov	r0, r2
   2f25c:	f7ff ff40 	bl	2f0e0 <bt_le_scan_set_enable_legacy>
		if (err) {
   2f260:	2800      	cmp	r0, #0
   2f262:	d0d2      	beq.n	2f20a <bt_le_scan_update+0x1a>
}
   2f264:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   2f266:	f01d ffd2 	bl	4d20e <bt_conn_unref>
   2f26a:	e7c8      	b.n	2f1fe <bt_le_scan_update+0xe>
   2f26c:	200000cc 	.word	0x200000cc

0002f270 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   2f270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   2f274:	f100 0508 	add.w	r5, r0, #8
   2f278:	b08d      	sub	sp, #52	; 0x34
   2f27a:	4604      	mov	r4, r0
   2f27c:	4628      	mov	r0, r5
   2f27e:	f020 ffc3 	bl	50208 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   2f282:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 2f448 <bt_hci_le_adv_report+0x1d8>
   2f286:	4680      	mov	r8, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   2f288:	f1b8 0f00 	cmp.w	r8, #0
   2f28c:	d102      	bne.n	2f294 <bt_hci_le_adv_report+0x24>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   2f28e:	b00d      	add	sp, #52	; 0x34
   2f290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   2f294:	89a3      	ldrh	r3, [r4, #12]
   2f296:	2b08      	cmp	r3, #8
   2f298:	d9f9      	bls.n	2f28e <bt_hci_le_adv_report+0x1e>
	return net_buf_simple_pull_mem(&buf->b, len);
   2f29a:	2109      	movs	r1, #9
   2f29c:	4628      	mov	r0, r5
   2f29e:	f020 ffab 	bl	501f8 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   2f2a2:	7a01      	ldrb	r1, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   2f2a4:	237f      	movs	r3, #127	; 0x7f
   2f2a6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   2f2aa:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   2f2ac:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   2f2ae:	7a5b      	ldrb	r3, [r3, #9]
   2f2b0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   2f2b4:	23ff      	movs	r3, #255	; 0xff
   2f2b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   2f2ba:	2300      	movs	r3, #0
   2f2bc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   2f2c0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   2f2c4:	7802      	ldrb	r2, [r0, #0]
   2f2c6:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   2f2ca:	2a04      	cmp	r2, #4
   2f2cc:	bf9c      	itt	ls
   2f2ce:	4b5c      	ldrls	r3, [pc, #368]	; (2f440 <bt_hci_le_adv_report+0x1d0>)
   2f2d0:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   2f2d2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   2f2d6:	4607      	mov	r7, r0
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   2f2d8:	f100 0901 	add.w	r9, r0, #1
   2f2dc:	b28b      	uxth	r3, r1
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   2f2de:	2006      	movs	r0, #6
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   2f2e0:	9301      	str	r3, [sp, #4]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   2f2e2:	f7ff feef 	bl	2f0c4 <atomic_test_bit.constprop.14>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   2f2e6:	b168      	cbz	r0, 2f304 <bt_hci_le_adv_report+0x94>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   2f2e8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   2f2ec:	075a      	lsls	r2, r3, #29
   2f2ee:	d509      	bpl.n	2f304 <bt_hci_le_adv_report+0x94>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   2f2f0:	7a39      	ldrb	r1, [r7, #8]
	return net_buf_simple_pull(&buf->b, len);
   2f2f2:	4628      	mov	r0, r5
   2f2f4:	3101      	adds	r1, #1
   2f2f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2f2fa:	f020 ff75 	bl	501e8 <net_buf_simple_pull>
   2f2fe:	fa5f f888 	uxtb.w	r8, r8
   2f302:	e7c1      	b.n	2f288 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   2f304:	787b      	ldrb	r3, [r7, #1]
   2f306:	1e9a      	subs	r2, r3, #2
   2f308:	2a01      	cmp	r2, #1
   2f30a:	d84c      	bhi.n	2f3a6 <bt_hci_le_adv_report+0x136>
	memcpy(dst, src, sizeof(*dst));
   2f30c:	2207      	movs	r2, #7
   2f30e:	4649      	mov	r1, r9
   2f310:	a804      	add	r0, sp, #16
   2f312:	f01c ffeb 	bl	4c2ec <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   2f316:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2f31a:	3b02      	subs	r3, #2
   2f31c:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   2f320:	ab04      	add	r3, sp, #16
   2f322:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   2f324:	f8da 3000 	ldr.w	r3, [sl]
   2f328:	b1b3      	cbz	r3, 2f358 <bt_hci_le_adv_report+0xe8>
	state->offset = net_buf_simple_headroom(buf);
   2f32a:	4628      	mov	r0, r5
   2f32c:	f020 ff7c 	bl	50228 <net_buf_simple_headroom>
	state->len = buf->len;
   2f330:	89a3      	ldrh	r3, [r4, #12]
   2f332:	9302      	str	r3, [sp, #8]
		buf->len = len;
   2f334:	9b01      	ldr	r3, [sp, #4]
   2f336:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2f338:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   2f33a:	462b      	mov	r3, r5
   2f33c:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   2f340:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   2f344:	f8da 6000 	ldr.w	r6, [sl]
   2f348:	a804      	add	r0, sp, #16
   2f34a:	47b0      	blx	r6
	buf->data = buf->__buf + state->offset;
   2f34c:	6923      	ldr	r3, [r4, #16]
   2f34e:	fa13 f38b 	uxtah	r3, r3, fp
   2f352:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   2f354:	9b02      	ldr	r3, [sp, #8]
   2f356:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2f358:	4b3a      	ldr	r3, [pc, #232]	; (2f444 <bt_hci_le_adv_report+0x1d4>)
   2f35a:	681b      	ldr	r3, [r3, #0]
   2f35c:	2b00      	cmp	r3, #0
   2f35e:	d035      	beq.n	2f3cc <bt_hci_le_adv_report+0x15c>
   2f360:	f1b3 0208 	subs.w	r2, r3, #8
   2f364:	d032      	beq.n	2f3cc <bt_hci_le_adv_report+0x15c>
   2f366:	681e      	ldr	r6, [r3, #0]
   2f368:	b106      	cbz	r6, 2f36c <bt_hci_le_adv_report+0xfc>
   2f36a:	3e08      	subs	r6, #8
		if (listener->recv) {
   2f36c:	6813      	ldr	r3, [r2, #0]
   2f36e:	9203      	str	r2, [sp, #12]
   2f370:	b193      	cbz	r3, 2f398 <bt_hci_le_adv_report+0x128>
	state->offset = net_buf_simple_headroom(buf);
   2f372:	4628      	mov	r0, r5
   2f374:	f020 ff58 	bl	50228 <net_buf_simple_headroom>
	state->len = buf->len;
   2f378:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
   2f37a:	9a03      	ldr	r2, [sp, #12]
   2f37c:	9302      	str	r3, [sp, #8]
			buf->len = len;
   2f37e:	9b01      	ldr	r3, [sp, #4]
   2f380:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   2f382:	4683      	mov	fp, r0
			listener->recv(info, buf);
   2f384:	6812      	ldr	r2, [r2, #0]
   2f386:	4629      	mov	r1, r5
   2f388:	a808      	add	r0, sp, #32
   2f38a:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   2f38c:	6922      	ldr	r2, [r4, #16]
	buf->len = state->len;
   2f38e:	9b02      	ldr	r3, [sp, #8]
   2f390:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   2f392:	fa12 f28b 	uxtah	r2, r2, fp
   2f396:	60a2      	str	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   2f398:	b1c6      	cbz	r6, 2f3cc <bt_hci_le_adv_report+0x15c>
   2f39a:	68b3      	ldr	r3, [r6, #8]
   2f39c:	b103      	cbz	r3, 2f3a0 <bt_hci_le_adv_report+0x130>
   2f39e:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   2f3a0:	4632      	mov	r2, r6
   2f3a2:	461e      	mov	r6, r3
   2f3a4:	e7e2      	b.n	2f36c <bt_hci_le_adv_report+0xfc>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   2f3a6:	2bff      	cmp	r3, #255	; 0xff
   2f3a8:	d109      	bne.n	2f3be <bt_hci_le_adv_report+0x14e>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   2f3aa:	2300      	movs	r3, #0
   2f3ac:	9306      	str	r3, [sp, #24]
   2f3ae:	2207      	movs	r2, #7
   2f3b0:	f8cd 301b 	str.w	r3, [sp, #27]
   2f3b4:	a906      	add	r1, sp, #24
   2f3b6:	a804      	add	r0, sp, #16
   2f3b8:	f01c ff98 	bl	4c2ec <memcpy>
   2f3bc:	e7b0      	b.n	2f320 <bt_hci_le_adv_report+0xb0>
		bt_addr_le_copy(&id_addr,
   2f3be:	4649      	mov	r1, r9
   2f3c0:	2000      	movs	r0, #0
   2f3c2:	f01d fcb9 	bl	4cd38 <bt_lookup_id_addr>
   2f3c6:	2207      	movs	r2, #7
   2f3c8:	4601      	mov	r1, r0
   2f3ca:	e7f4      	b.n	2f3b6 <bt_hci_le_adv_report+0x146>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f3cc:	2006      	movs	r0, #6
	check_pending_conn(&id_addr, addr, info->adv_props);
   2f3ce:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f3d2:	f7ff fe77 	bl	2f0c4 <atomic_test_bit.constprop.14>
   2f3d6:	4683      	mov	fp, r0
   2f3d8:	2800      	cmp	r0, #0
   2f3da:	d189      	bne.n	2f2f0 <bt_hci_le_adv_report+0x80>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   2f3dc:	07d3      	lsls	r3, r2, #31
   2f3de:	d587      	bpl.n	2f2f0 <bt_hci_le_adv_report+0x80>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   2f3e0:	2202      	movs	r2, #2
   2f3e2:	a904      	add	r1, sp, #16
   2f3e4:	f000 fda0 	bl	2ff28 <bt_conn_lookup_state_le>
	if (!conn) {
   2f3e8:	4606      	mov	r6, r0
   2f3ea:	2800      	cmp	r0, #0
   2f3ec:	d080      	beq.n	2f2f0 <bt_hci_le_adv_report+0x80>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   2f3ee:	2005      	movs	r0, #5
   2f3f0:	f7ff fe68 	bl	2f0c4 <atomic_test_bit.constprop.14>
   2f3f4:	b988      	cbnz	r0, 2f41a <bt_hci_le_adv_report+0x1aa>
   2f3f6:	2207      	movs	r2, #7
   2f3f8:	4649      	mov	r1, r9
   2f3fa:	f106 0096 	add.w	r0, r6, #150	; 0x96
   2f3fe:	f01c ff75 	bl	4c2ec <memcpy>
	if (bt_le_create_conn(conn)) {
   2f402:	4630      	mov	r0, r6
   2f404:	f01d fac5 	bl	4c992 <bt_le_create_conn>
   2f408:	b960      	cbnz	r0, 2f424 <bt_hci_le_adv_report+0x1b4>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   2f40a:	4630      	mov	r0, r6
   2f40c:	2106      	movs	r1, #6
   2f40e:	f000 fb51 	bl	2fab4 <bt_conn_set_state>
	bt_conn_unref(conn);
   2f412:	4630      	mov	r0, r6
   2f414:	f01d fefb 	bl	4d20e <bt_conn_unref>
	return;
   2f418:	e76a      	b.n	2f2f0 <bt_hci_le_adv_report+0x80>
	return bt_le_scan_set_enable_legacy(enable);
   2f41a:	4658      	mov	r0, fp
   2f41c:	f7ff fe60 	bl	2f0e0 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   2f420:	2800      	cmp	r0, #0
   2f422:	d0e8      	beq.n	2f3f6 <bt_hci_le_adv_report+0x186>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   2f424:	231f      	movs	r3, #31
   2f426:	7333      	strb	r3, [r6, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2f428:	2100      	movs	r1, #0
   2f42a:	4630      	mov	r0, r6
   2f42c:	f000 fb42 	bl	2fab4 <bt_conn_set_state>
	bt_conn_unref(conn);
   2f430:	4630      	mov	r0, r6
   2f432:	f01d feec 	bl	4d20e <bt_conn_unref>
	bt_le_scan_update(false);
   2f436:	2000      	movs	r0, #0
   2f438:	f7ff feda 	bl	2f1f0 <bt_le_scan_update>
   2f43c:	e758      	b.n	2f2f0 <bt_hci_le_adv_report+0x80>
   2f43e:	bf00      	nop
   2f440:	00054446 	.word	0x00054446
   2f444:	20003fdc 	.word	0x20003fdc
   2f448:	20003fe4 	.word	0x20003fe4

0002f44c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   2f44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f450:	4604      	mov	r4, r0
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2f452:	2001      	movs	r0, #1
{
   2f454:	460f      	mov	r7, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2f456:	f7ff fe35 	bl	2f0c4 <atomic_test_bit.constprop.14>
   2f45a:	2800      	cmp	r0, #0
   2f45c:	d06f      	beq.n	2f53e <bt_le_scan_start+0xf2>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   2f45e:	7822      	ldrb	r2, [r4, #0]
   2f460:	2a01      	cmp	r2, #1
   2f462:	d904      	bls.n	2f46e <bt_le_scan_start+0x22>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   2f464:	f06f 0515 	mvn.w	r5, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   2f468:	4628      	mov	r0, r5
   2f46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   2f46e:	6863      	ldr	r3, [r4, #4]
   2f470:	f033 030f 	bics.w	r3, r3, #15
   2f474:	d1f6      	bne.n	2f464 <bt_le_scan_start+0x18>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   2f476:	8920      	ldrh	r0, [r4, #8]
   2f478:	1f03      	subs	r3, r0, #4
   2f47a:	b29b      	uxth	r3, r3
   2f47c:	f643 75fc 	movw	r5, #16380	; 0x3ffc
   2f480:	42ab      	cmp	r3, r5
   2f482:	d8ef      	bhi.n	2f464 <bt_le_scan_start+0x18>
	if (param->window < 0x0004 || param->window > 0x4000) {
   2f484:	8961      	ldrh	r1, [r4, #10]
   2f486:	1f0b      	subs	r3, r1, #4
   2f488:	b29b      	uxth	r3, r3
   2f48a:	42ab      	cmp	r3, r5
   2f48c:	d8ea      	bhi.n	2f464 <bt_le_scan_start+0x18>
	if (param->window > param->interval) {
   2f48e:	4288      	cmp	r0, r1
   2f490:	d3e8      	bcc.n	2f464 <bt_le_scan_start+0x18>
	if (param->type && !bt_id_scan_random_addr_check()) {
   2f492:	b99a      	cbnz	r2, 2f4bc <bt_le_scan_start+0x70>
   2f494:	f3bf 8f5b 	dmb	ish
   2f498:	4e2a      	ldr	r6, [pc, #168]	; (2f544 <bt_le_scan_start+0xf8>)
   2f49a:	e856 0f00 	ldrex	r0, [r6]
   2f49e:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   2f4a2:	e846 3200 	strex	r2, r3, [r6]
   2f4a6:	2a00      	cmp	r2, #0
   2f4a8:	d1f7      	bne.n	2f49a <bt_le_scan_start+0x4e>
   2f4aa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f4ae:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   2f4b2:	46b0      	mov	r8, r6
   2f4b4:	d007      	beq.n	2f4c6 <bt_le_scan_start+0x7a>
		return -EALREADY;
   2f4b6:	f06f 0577 	mvn.w	r5, #119	; 0x77
   2f4ba:	e7d5      	b.n	2f468 <bt_le_scan_start+0x1c>
	if (param->type && !bt_id_scan_random_addr_check()) {
   2f4bc:	f01d fc68 	bl	4cd90 <bt_id_scan_random_addr_check>
   2f4c0:	2800      	cmp	r0, #0
   2f4c2:	d1e7      	bne.n	2f494 <bt_le_scan_start+0x48>
   2f4c4:	e7ce      	b.n	2f464 <bt_le_scan_start+0x18>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   2f4c6:	2005      	movs	r0, #5
   2f4c8:	f7ff fdfc 	bl	2f0c4 <atomic_test_bit.constprop.14>
   2f4cc:	b150      	cbz	r0, 2f4e4 <bt_le_scan_start+0x98>
	return bt_le_scan_set_enable_legacy(enable);
   2f4ce:	4610      	mov	r0, r2
   2f4d0:	f7ff fe06 	bl	2f0e0 <bt_le_scan_set_enable_legacy>
		if (err) {
   2f4d4:	4605      	mov	r5, r0
   2f4d6:	b128      	cbz	r0, 2f4e4 <bt_le_scan_start+0x98>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f4d8:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f4dc:	4630      	mov	r0, r6
   2f4de:	f01d fdc2 	bl	4d066 <atomic_and>
		return err;
   2f4e2:	e7c1      	b.n	2f468 <bt_le_scan_start+0x1c>
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
   2f4e4:	6863      	ldr	r3, [r4, #4]
	if (val) {
   2f4e6:	07db      	lsls	r3, r3, #31
   2f4e8:	d515      	bpl.n	2f516 <bt_le_scan_start+0xca>
   2f4ea:	f3bf 8f5b 	dmb	ish
   2f4ee:	e858 3f00 	ldrex	r3, [r8]
   2f4f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2f4f6:	e848 3200 	strex	r2, r3, [r8]
   2f4fa:	2a00      	cmp	r2, #0
   2f4fc:	d1f7      	bne.n	2f4ee <bt_le_scan_start+0xa2>
   2f4fe:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   2f502:	89a3      	ldrh	r3, [r4, #12]
   2f504:	b16b      	cbz	r3, 2f522 <bt_le_scan_start+0xd6>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f506:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f50a:	480e      	ldr	r0, [pc, #56]	; (2f544 <bt_le_scan_start+0xf8>)
   2f50c:	f01d fdab 	bl	4d066 <atomic_and>
			return -ENOTSUP;
   2f510:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2f514:	e7a8      	b.n	2f468 <bt_le_scan_start+0x1c>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f516:	f46f 7180 	mvn.w	r1, #256	; 0x100
   2f51a:	480a      	ldr	r0, [pc, #40]	; (2f544 <bt_le_scan_start+0xf8>)
   2f51c:	f01d fda3 	bl	4d066 <atomic_and>
   2f520:	e7ef      	b.n	2f502 <bt_le_scan_start+0xb6>
		err = start_le_scan_legacy(param->type, param->interval,
   2f522:	8962      	ldrh	r2, [r4, #10]
   2f524:	8921      	ldrh	r1, [r4, #8]
   2f526:	7820      	ldrb	r0, [r4, #0]
   2f528:	f7ff fe0a 	bl	2f140 <start_le_scan_legacy>
	if (err) {
   2f52c:	4605      	mov	r5, r0
   2f52e:	b118      	cbz	r0, 2f538 <bt_le_scan_start+0xec>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f530:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f534:	4803      	ldr	r0, [pc, #12]	; (2f544 <bt_le_scan_start+0xf8>)
   2f536:	e7d2      	b.n	2f4de <bt_le_scan_start+0x92>
	scan_dev_found_cb = cb;
   2f538:	4b03      	ldr	r3, [pc, #12]	; (2f548 <bt_le_scan_start+0xfc>)
   2f53a:	601f      	str	r7, [r3, #0]
	return 0;
   2f53c:	e794      	b.n	2f468 <bt_le_scan_start+0x1c>
		return -EAGAIN;
   2f53e:	f06f 050a 	mvn.w	r5, #10
   2f542:	e791      	b.n	2f468 <bt_le_scan_start+0x1c>
   2f544:	200000cc 	.word	0x200000cc
   2f548:	20003fe4 	.word	0x20003fe4

0002f54c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   2f54c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2f54e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   2f552:	4807      	ldr	r0, [pc, #28]	; (2f570 <bt_le_scan_stop+0x24>)
   2f554:	f01d fd87 	bl	4d066 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   2f558:	0643      	lsls	r3, r0, #25
   2f55a:	d506      	bpl.n	2f56a <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   2f55c:	4b05      	ldr	r3, [pc, #20]	; (2f574 <bt_le_scan_stop+0x28>)
   2f55e:	2000      	movs	r0, #0
   2f560:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   2f562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   2f566:	f7ff be43 	b.w	2f1f0 <bt_le_scan_update>
}
   2f56a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f56e:	bd08      	pop	{r3, pc}
   2f570:	200000cc 	.word	0x200000cc
   2f574:	20003fe4 	.word	0x20003fe4

0002f578 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   2f578:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   2f57a:	2240      	movs	r2, #64	; 0x40
   2f57c:	4903      	ldr	r1, [pc, #12]	; (2f58c <bt_pub_key_is_debug+0x14>)
   2f57e:	f01c fea5 	bl	4c2cc <memcmp>
}
   2f582:	fab0 f080 	clz	r0, r0
   2f586:	0940      	lsrs	r0, r0, #5
   2f588:	bd08      	pop	{r3, pc}
   2f58a:	bf00      	nop
   2f58c:	0005444b 	.word	0x0005444b

0002f590 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   2f590:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   2f592:	4b34      	ldr	r3, [pc, #208]	; (2f664 <bt_pub_key_gen+0xd4>)
   2f594:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   2f598:	f003 0306 	and.w	r3, r3, #6
   2f59c:	2b06      	cmp	r3, #6
   2f59e:	d157      	bne.n	2f650 <bt_pub_key_gen+0xc0>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   2f5a0:	2800      	cmp	r0, #0
   2f5a2:	d058      	beq.n	2f656 <bt_pub_key_gen+0xc6>
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f5a4:	4d30      	ldr	r5, [pc, #192]	; (2f668 <bt_pub_key_gen+0xd8>)
   2f5a6:	682a      	ldr	r2, [r5, #0]
   2f5a8:	b10a      	cbz	r2, 2f5ae <bt_pub_key_gen+0x1e>
   2f5aa:	1f13      	subs	r3, r2, #4
   2f5ac:	b9c3      	cbnz	r3, 2f5e0 <bt_pub_key_gen+0x50>
	parent->next = child;
   2f5ae:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   2f5b0:	686a      	ldr	r2, [r5, #4]
			BT_WARN("Callback already registered");
			return -EALREADY;
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   2f5b2:	1d03      	adds	r3, r0, #4
	list->head = node;
   2f5b4:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2f5b6:	b902      	cbnz	r2, 2f5ba <bt_pub_key_gen+0x2a>
	list->tail = node;
   2f5b8:	606b      	str	r3, [r5, #4]
   2f5ba:	4c2c      	ldr	r4, [pc, #176]	; (2f66c <bt_pub_key_gen+0xdc>)
   2f5bc:	f3bf 8f5b 	dmb	ish
   2f5c0:	e854 2f00 	ldrex	r2, [r4]
   2f5c4:	f042 0310 	orr.w	r3, r2, #16
   2f5c8:	e844 3100 	strex	r1, r3, [r4]
   2f5cc:	2900      	cmp	r1, #0
   2f5ce:	d1f7      	bne.n	2f5c0 <bt_pub_key_gen+0x30>
   2f5d0:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2f5d4:	f012 0210 	ands.w	r2, r2, #16
   2f5d8:	d00b      	beq.n	2f5f2 <bt_pub_key_gen+0x62>
		return 0;
   2f5da:	2600      	movs	r6, #0
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   2f5dc:	4630      	mov	r0, r6
   2f5de:	bd70      	pop	{r4, r5, r6, pc}
		if (cb == new_cb) {
   2f5e0:	4283      	cmp	r3, r0
   2f5e2:	d03b      	beq.n	2f65c <bt_pub_key_gen+0xcc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2f5e4:	1d19      	adds	r1, r3, #4
   2f5e6:	d0e2      	beq.n	2f5ae <bt_pub_key_gen+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2f5e8:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f5ea:	2b00      	cmp	r3, #0
   2f5ec:	d0df      	beq.n	2f5ae <bt_pub_key_gen+0x1e>
   2f5ee:	3b04      	subs	r3, #4
   2f5f0:	e7dc      	b.n	2f5ac <bt_pub_key_gen+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f5f2:	f3bf 8f5b 	dmb	ish
   2f5f6:	e854 3f00 	ldrex	r3, [r4]
   2f5fa:	f023 0308 	bic.w	r3, r3, #8
   2f5fe:	e844 3100 	strex	r1, r3, [r4]
   2f602:	2900      	cmp	r1, #0
   2f604:	d1f7      	bne.n	2f5f6 <bt_pub_key_gen+0x66>
   2f606:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   2f60a:	4611      	mov	r1, r2
   2f60c:	f242 0025 	movw	r0, #8229	; 0x2025
   2f610:	f7fe fb5e 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   2f614:	4606      	mov	r6, r0
   2f616:	2800      	cmp	r0, #0
   2f618:	d0df      	beq.n	2f5da <bt_pub_key_gen+0x4a>
   2f61a:	f3bf 8f5b 	dmb	ish
   2f61e:	e854 3f00 	ldrex	r3, [r4]
   2f622:	f023 0310 	bic.w	r3, r3, #16
   2f626:	e844 3200 	strex	r2, r3, [r4]
   2f62a:	2a00      	cmp	r2, #0
   2f62c:	d1f7      	bne.n	2f61e <bt_pub_key_gen+0x8e>
   2f62e:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f632:	682c      	ldr	r4, [r5, #0]
   2f634:	b91c      	cbnz	r4, 2f63e <bt_pub_key_gen+0xae>
	list->head = NULL;
   2f636:	2300      	movs	r3, #0
	list->tail = NULL;
   2f638:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
   2f63c:	e7ce      	b.n	2f5dc <bt_pub_key_gen+0x4c>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f63e:	3c04      	subs	r4, #4
   2f640:	2c00      	cmp	r4, #0
   2f642:	d0f8      	beq.n	2f636 <bt_pub_key_gen+0xa6>
			if (cb->func) {
   2f644:	6823      	ldr	r3, [r4, #0]
   2f646:	b10b      	cbz	r3, 2f64c <bt_pub_key_gen+0xbc>
				cb->func(NULL);
   2f648:	2000      	movs	r0, #0
   2f64a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2f64c:	6864      	ldr	r4, [r4, #4]
	return node->next;
   2f64e:	e7f1      	b.n	2f634 <bt_pub_key_gen+0xa4>
		return -ENOTSUP;
   2f650:	f06f 0685 	mvn.w	r6, #133	; 0x85
   2f654:	e7c2      	b.n	2f5dc <bt_pub_key_gen+0x4c>
		return -EINVAL;
   2f656:	f06f 0615 	mvn.w	r6, #21
   2f65a:	e7bf      	b.n	2f5dc <bt_pub_key_gen+0x4c>
			return -EALREADY;
   2f65c:	f06f 0677 	mvn.w	r6, #119	; 0x77
   2f660:	e7bc      	b.n	2f5dc <bt_pub_key_gen+0x4c>
   2f662:	bf00      	nop
   2f664:	20000000 	.word	0x20000000
   2f668:	20003fec 	.word	0x20003fec
   2f66c:	200000cc 	.word	0x200000cc

0002f670 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f670:	4b05      	ldr	r3, [pc, #20]	; (2f688 <bt_pub_key_get+0x18>)
   2f672:	f3bf 8f5b 	dmb	ish
   2f676:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   2f678:	4804      	ldr	r0, [pc, #16]	; (2f68c <bt_pub_key_get+0x1c>)
   2f67a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   2f67e:	f013 0f08 	tst.w	r3, #8
}
   2f682:	bf08      	it	eq
   2f684:	2000      	moveq	r0, #0
   2f686:	4770      	bx	lr
   2f688:	200000cc 	.word	0x200000cc
   2f68c:	20006d52 	.word	0x20006d52

0002f690 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   2f690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   2f692:	4c1f      	ldr	r4, [pc, #124]	; (2f710 <bt_dh_key_gen+0x80>)
   2f694:	6823      	ldr	r3, [r4, #0]
   2f696:	428b      	cmp	r3, r1
{
   2f698:	4607      	mov	r7, r0
	if (dh_key_cb == cb) {
   2f69a:	d032      	beq.n	2f702 <bt_dh_key_gen+0x72>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2f69c:	b113      	cbz	r3, 2f6a4 <bt_dh_key_gen+0x14>
		return -EBUSY;
   2f69e:	f06f 000f 	mvn.w	r0, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   2f6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f6a4:	4b1b      	ldr	r3, [pc, #108]	; (2f714 <bt_dh_key_gen+0x84>)
   2f6a6:	f3bf 8f5b 	dmb	ish
   2f6aa:	681d      	ldr	r5, [r3, #0]
   2f6ac:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2f6b0:	f3c5 1500 	ubfx	r5, r5, #4, #1
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   2f6b4:	2d00      	cmp	r5, #0
   2f6b6:	d1f2      	bne.n	2f69e <bt_dh_key_gen+0xe>
   2f6b8:	f3bf 8f5b 	dmb	ish
   2f6bc:	681b      	ldr	r3, [r3, #0]
   2f6be:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   2f6c2:	071b      	lsls	r3, r3, #28
   2f6c4:	d520      	bpl.n	2f708 <bt_dh_key_gen+0x78>
	dh_key_cb = cb;
   2f6c6:	6021      	str	r1, [r4, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   2f6c8:	f242 0026 	movw	r0, #8230	; 0x2026
   2f6cc:	2140      	movs	r1, #64	; 0x40
   2f6ce:	f7fe faa5 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   2f6d2:	4606      	mov	r6, r0
   2f6d4:	b190      	cbz	r0, 2f6fc <bt_dh_key_gen+0x6c>
	return net_buf_simple_add(&buf->b, len);
   2f6d6:	2140      	movs	r1, #64	; 0x40
   2f6d8:	3008      	adds	r0, #8
   2f6da:	f020 fd5c 	bl	50196 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   2f6de:	2240      	movs	r2, #64	; 0x40
   2f6e0:	4639      	mov	r1, r7
   2f6e2:	f01c fe03 	bl	4c2ec <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   2f6e6:	462a      	mov	r2, r5
   2f6e8:	4631      	mov	r1, r6
   2f6ea:	f242 0026 	movw	r0, #8230	; 0x2026
   2f6ee:	f7fe faef 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   2f6f2:	2800      	cmp	r0, #0
   2f6f4:	d0d5      	beq.n	2f6a2 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   2f6f6:	2300      	movs	r3, #0
   2f6f8:	6023      	str	r3, [r4, #0]
		return err;
   2f6fa:	e7d2      	b.n	2f6a2 <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   2f6fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2f700:	e7f9      	b.n	2f6f6 <bt_dh_key_gen+0x66>
		return -EALREADY;
   2f702:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2f706:	e7cc      	b.n	2f6a2 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   2f708:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   2f70c:	e7c9      	b.n	2f6a2 <bt_dh_key_gen+0x12>
   2f70e:	bf00      	nop
   2f710:	20003fe8 	.word	0x20003fe8
   2f714:	200000cc 	.word	0x200000cc

0002f718 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   2f718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f71a:	4c1c      	ldr	r4, [pc, #112]	; (2f78c <bt_hci_evt_le_pkey_complete+0x74>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   2f71c:	6886      	ldr	r6, [r0, #8]
   2f71e:	f3bf 8f5b 	dmb	ish
   2f722:	e854 3f00 	ldrex	r3, [r4]
   2f726:	f023 0310 	bic.w	r3, r3, #16
   2f72a:	e844 3200 	strex	r2, r3, [r4]
   2f72e:	2a00      	cmp	r2, #0
   2f730:	d1f7      	bne.n	2f722 <bt_hci_evt_le_pkey_complete+0xa>
   2f732:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   2f736:	7833      	ldrb	r3, [r6, #0]
   2f738:	b983      	cbnz	r3, 2f75c <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   2f73a:	2240      	movs	r2, #64	; 0x40
   2f73c:	1c71      	adds	r1, r6, #1
   2f73e:	4814      	ldr	r0, [pc, #80]	; (2f790 <bt_hci_evt_le_pkey_complete+0x78>)
   2f740:	f01c fdd4 	bl	4c2ec <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2f744:	f3bf 8f5b 	dmb	ish
   2f748:	e854 3f00 	ldrex	r3, [r4]
   2f74c:	f043 0308 	orr.w	r3, r3, #8
   2f750:	e844 3200 	strex	r2, r3, [r4]
   2f754:	2a00      	cmp	r2, #0
   2f756:	d1f7      	bne.n	2f748 <bt_hci_evt_le_pkey_complete+0x30>
   2f758:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f75c:	4d0d      	ldr	r5, [pc, #52]	; (2f794 <bt_hci_evt_le_pkey_complete+0x7c>)
   2f75e:	682c      	ldr	r4, [r5, #0]
   2f760:	b91c      	cbnz	r4, 2f76a <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
   2f762:	2300      	movs	r3, #0
	list->tail = NULL;
   2f764:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   2f768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
   2f76a:	4f09      	ldr	r7, [pc, #36]	; (2f790 <bt_hci_evt_le_pkey_complete+0x78>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f76c:	3c04      	subs	r4, #4
   2f76e:	2c00      	cmp	r4, #0
   2f770:	d0f7      	beq.n	2f762 <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
   2f772:	6823      	ldr	r3, [r4, #0]
   2f774:	b12b      	cbz	r3, 2f782 <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
   2f776:	7832      	ldrb	r2, [r6, #0]
   2f778:	2a00      	cmp	r2, #0
   2f77a:	bf0c      	ite	eq
   2f77c:	4638      	moveq	r0, r7
   2f77e:	2000      	movne	r0, #0
   2f780:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2f782:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   2f784:	2c00      	cmp	r4, #0
   2f786:	d0ec      	beq.n	2f762 <bt_hci_evt_le_pkey_complete+0x4a>
   2f788:	3c04      	subs	r4, #4
   2f78a:	e7f0      	b.n	2f76e <bt_hci_evt_le_pkey_complete+0x56>
   2f78c:	200000cc 	.word	0x200000cc
   2f790:	20006d52 	.word	0x20006d52
   2f794:	20003fec 	.word	0x20003fec

0002f798 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   2f798:	4905      	ldr	r1, [pc, #20]	; (2f7b0 <bt_hci_evt_le_dhkey_complete+0x18>)
   2f79a:	680b      	ldr	r3, [r1, #0]
   2f79c:	b133      	cbz	r3, 2f7ac <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   2f79e:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   2f7a0:	2000      	movs	r0, #0
   2f7a2:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   2f7a4:	7811      	ldrb	r1, [r2, #0]
   2f7a6:	b901      	cbnz	r1, 2f7aa <bt_hci_evt_le_dhkey_complete+0x12>
   2f7a8:	1c50      	adds	r0, r2, #1
   2f7aa:	4718      	bx	r3
	}
}
   2f7ac:	4770      	bx	lr
   2f7ae:	bf00      	nop
   2f7b0:	20003fe8 	.word	0x20003fe8

0002f7b4 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   2f7b4:	2300      	movs	r3, #0
{
   2f7b6:	4601      	mov	r1, r0
	tx->user_data = NULL;
   2f7b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   2f7bc:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   2f7be:	4801      	ldr	r0, [pc, #4]	; (2f7c4 <tx_free+0x10>)
   2f7c0:	f021 bc04 	b.w	50fcc <k_queue_append>
   2f7c4:	2000105c 	.word	0x2000105c

0002f7c8 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2f7c8:	4b0e      	ldr	r3, [pc, #56]	; (2f804 <notify_connected+0x3c>)
{
   2f7ca:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   2f7cc:	681d      	ldr	r5, [r3, #0]
{
   2f7ce:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   2f7d0:	b955      	cbnz	r5, 2f7e8 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f7d2:	4d0d      	ldr	r5, [pc, #52]	; (2f808 <notify_connected+0x40>)
   2f7d4:	4e0d      	ldr	r6, [pc, #52]	; (2f80c <notify_connected+0x44>)
   2f7d6:	7b21      	ldrb	r1, [r4, #12]
   2f7d8:	42b5      	cmp	r5, r6
   2f7da:	d30c      	bcc.n	2f7f6 <notify_connected+0x2e>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   2f7dc:	b989      	cbnz	r1, 2f802 <notify_connected+0x3a>
		bt_gatt_connected(conn);
   2f7de:	4620      	mov	r0, r4
	}
}
   2f7e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   2f7e4:	f002 bf54 	b.w	32690 <bt_gatt_connected>
		if (cb->connected) {
   2f7e8:	682b      	ldr	r3, [r5, #0]
   2f7ea:	b113      	cbz	r3, 2f7f2 <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   2f7ec:	7b21      	ldrb	r1, [r4, #12]
   2f7ee:	4620      	mov	r0, r4
   2f7f0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2f7f2:	69ed      	ldr	r5, [r5, #28]
   2f7f4:	e7ec      	b.n	2f7d0 <notify_connected+0x8>
		if (cb->connected) {
   2f7f6:	682b      	ldr	r3, [r5, #0]
   2f7f8:	b10b      	cbz	r3, 2f7fe <notify_connected+0x36>
			cb->connected(conn, conn->err);
   2f7fa:	4620      	mov	r0, r4
   2f7fc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2f7fe:	3520      	adds	r5, #32
   2f800:	e7e9      	b.n	2f7d6 <notify_connected+0xe>
}
   2f802:	bd70      	pop	{r4, r5, r6, pc}
   2f804:	20003ff8 	.word	0x20003ff8
   2f808:	00051c90 	.word	0x00051c90
   2f80c:	00051c90 	.word	0x00051c90

0002f810 <bt_conn_new.part.11>:
struct bt_conn *bt_conn_new(struct bt_conn *conns, size_t size)
   2f810:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   2f812:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2f814:	2501      	movs	r5, #1
   2f816:	428b      	cmp	r3, r1
   2f818:	d102      	bne.n	2f820 <bt_conn_new.part.11+0x10>
		return NULL;
   2f81a:	2400      	movs	r4, #0
}
   2f81c:	4620      	mov	r0, r4
   2f81e:	bd38      	pop	{r3, r4, r5, pc}
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2f820:	4604      	mov	r4, r0
   2f822:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
   2f826:	f3bf 8f5b 	dmb	ish
   2f82a:	e852 0f00 	ldrex	r0, [r2]
   2f82e:	2800      	cmp	r0, #0
   2f830:	d104      	bne.n	2f83c <bt_conn_new.part.11+0x2c>
   2f832:	e842 5c00 	strex	ip, r5, [r2]
   2f836:	f1bc 0f00 	cmp.w	ip, #0
   2f83a:	d1f6      	bne.n	2f82a <bt_conn_new.part.11+0x1a>
   2f83c:	f3bf 8f5b 	dmb	ish
   2f840:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   2f844:	d001      	beq.n	2f84a <_flash_used+0x6>
	for (i = 0; i < size; i++) {
   2f846:	3301      	adds	r3, #1
   2f848:	e7e5      	b.n	2f816 <bt_conn_new.part.11+0x6>
	if (!conn) {
   2f84a:	2c00      	cmp	r4, #0
   2f84c:	d0e6      	beq.n	2f81c <bt_conn_new.part.11+0xc>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   2f84e:	22bc      	movs	r2, #188	; 0xbc
   2f850:	2100      	movs	r1, #0
   2f852:	4620      	mov	r0, r4
   2f854:	f01c fd55 	bl	4c302 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   2f858:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2f85c:	4904      	ldr	r1, [pc, #16]	; (2f870 <_flash_used+0x2c>)
   2f85e:	f021 fcac 	bl	511ba <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   2f862:	4904      	ldr	r1, [pc, #16]	; (2f874 <_flash_used+0x30>)
   2f864:	f104 0028 	add.w	r0, r4, #40	; 0x28
   2f868:	f021 fc82 	bl	51170 <k_work_init>
	return conn;
   2f86c:	e7d6      	b.n	2f81c <bt_conn_new.part.11+0xc>
   2f86e:	bf00      	nop
   2f870:	0003028d 	.word	0x0003028d
   2f874:	0004d0cf 	.word	0x0004d0cf

0002f878 <send_frag>:
{
   2f878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f87c:	4604      	mov	r4, r0
   2f87e:	460e      	mov	r6, r1
   2f880:	4617      	mov	r7, r2
   2f882:	4698      	mov	r8, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   2f884:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   2f886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f88a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f88e:	4841      	ldr	r0, [pc, #260]	; (2f994 <send_frag+0x11c>)
   2f890:	f019 f838 	bl	48904 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   2f894:	7b63      	ldrb	r3, [r4, #13]
   2f896:	2b07      	cmp	r3, #7
   2f898:	d148      	bne.n	2f92c <send_frag+0xb4>
	__asm__ volatile(
   2f89a:	f04f 0320 	mov.w	r3, #32
   2f89e:	f3ef 8211 	mrs	r2, BASEPRI
   2f8a2:	f383 8812 	msr	BASEPRI_MAX, r3
   2f8a6:	f3bf 8f6f 	isb	sy
	if (tx) {
   2f8aa:	2d00      	cmp	r5, #0
   2f8ac:	d053      	beq.n	2f956 <send_frag+0xde>
	parent->next = child;
   2f8ae:	2300      	movs	r3, #0
   2f8b0:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   2f8b2:	69a3      	ldr	r3, [r4, #24]
   2f8b4:	2b00      	cmp	r3, #0
   2f8b6:	d14b      	bne.n	2f950 <send_frag+0xd8>
	list->head = node;
   2f8b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   2f8bc:	f382 8811 	msr	BASEPRI, r2
   2f8c0:	f3bf 8f6f 	isb	sy
	switch (flags) {
   2f8c4:	2f01      	cmp	r7, #1
   2f8c6:	d002      	beq.n	2f8ce <send_frag+0x56>
		flags = BT_ACL_START_NO_FLUSH;
   2f8c8:	1efb      	subs	r3, r7, #3
   2f8ca:	425f      	negs	r7, r3
   2f8cc:	415f      	adcs	r7, r3
	return net_buf_simple_push(&buf->b, len);
   2f8ce:	2104      	movs	r1, #4
   2f8d0:	f106 0008 	add.w	r0, r6, #8
   2f8d4:	f020 fc80 	bl	501d8 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2f8d8:	8823      	ldrh	r3, [r4, #0]
   2f8da:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2f8de:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   2f8e0:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2f8e2:	3b04      	subs	r3, #4
   2f8e4:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2f8e6:	2302      	movs	r3, #2
   2f8e8:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   2f8ea:	4630      	mov	r0, r6
   2f8ec:	f01d f92a 	bl	4cb44 <bt_send>
	if (err) {
   2f8f0:	2800      	cmp	r0, #0
   2f8f2:	d04c      	beq.n	2f98e <send_frag+0x116>
	__asm__ volatile(
   2f8f4:	f04f 0320 	mov.w	r3, #32
   2f8f8:	f3ef 8111 	mrs	r1, BASEPRI
   2f8fc:	f383 8812 	msr	BASEPRI_MAX, r3
   2f900:	f3bf 8f6f 	isb	sy
		if (tx) {
   2f904:	2d00      	cmp	r5, #0
   2f906:	d03c      	beq.n	2f982 <send_frag+0x10a>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f908:	6963      	ldr	r3, [r4, #20]
   2f90a:	2200      	movs	r2, #0
   2f90c:	b153      	cbz	r3, 2f924 <send_frag+0xac>
   2f90e:	429d      	cmp	r5, r3
   2f910:	d134      	bne.n	2f97c <send_frag+0x104>
Z_GENLIST_REMOVE(slist, snode)
   2f912:	682b      	ldr	r3, [r5, #0]
   2f914:	bb62      	cbnz	r2, 2f970 <send_frag+0xf8>
   2f916:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   2f918:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   2f91a:	4295      	cmp	r5, r2
   2f91c:	d100      	bne.n	2f920 <send_frag+0xa8>
	list->tail = node;
   2f91e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   2f920:	2300      	movs	r3, #0
   2f922:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   2f924:	f381 8811 	msr	BASEPRI, r1
   2f928:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   2f92c:	4819      	ldr	r0, [pc, #100]	; (2f994 <send_frag+0x11c>)
   2f92e:	f018 ffc3 	bl	488b8 <z_impl_k_sem_give>
	if (tx) {
   2f932:	b115      	cbz	r5, 2f93a <send_frag+0xc2>
		tx_free(tx);
   2f934:	4628      	mov	r0, r5
   2f936:	f7ff ff3d 	bl	2f7b4 <tx_free>
	if (always_consume) {
   2f93a:	f1b8 0f00 	cmp.w	r8, #0
   2f93e:	d004      	beq.n	2f94a <send_frag+0xd2>
		net_buf_unref(buf);
   2f940:	4630      	mov	r0, r6
   2f942:	f014 fb91 	bl	44068 <net_buf_unref>
	return false;
   2f946:	f04f 0800 	mov.w	r8, #0
}
   2f94a:	4640      	mov	r0, r8
   2f94c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2f950:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2f952:	61a5      	str	r5, [r4, #24]
   2f954:	e7b2      	b.n	2f8bc <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   2f956:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   2f958:	b133      	cbz	r3, 2f968 <send_frag+0xf0>
			pending_no_cb = &tail_tx->pending_no_cb;
   2f95a:	f103 090c 	add.w	r9, r3, #12
   2f95e:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   2f960:	3301      	adds	r3, #1
   2f962:	f8c9 3000 	str.w	r3, [r9]
   2f966:	e7a9      	b.n	2f8bc <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   2f968:	f104 091c 	add.w	r9, r4, #28
   2f96c:	69e3      	ldr	r3, [r4, #28]
   2f96e:	e7f7      	b.n	2f960 <send_frag+0xe8>
	parent->next = child;
   2f970:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f972:	69a3      	ldr	r3, [r4, #24]
   2f974:	429d      	cmp	r5, r3
	list->tail = node;
   2f976:	bf08      	it	eq
   2f978:	61a2      	streq	r2, [r4, #24]
   2f97a:	e7d1      	b.n	2f920 <send_frag+0xa8>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2f97c:	461a      	mov	r2, r3
   2f97e:	681b      	ldr	r3, [r3, #0]
   2f980:	e7c4      	b.n	2f90c <send_frag+0x94>
			(*pending_no_cb)--;
   2f982:	f8d9 3000 	ldr.w	r3, [r9]
   2f986:	3b01      	subs	r3, #1
   2f988:	f8c9 3000 	str.w	r3, [r9]
   2f98c:	e7ca      	b.n	2f924 <send_frag+0xac>
	return true;
   2f98e:	f04f 0801 	mov.w	r8, #1
   2f992:	e7da      	b.n	2f94a <send_frag+0xd2>
   2f994:	20000100 	.word	0x20000100

0002f998 <bt_conn_get_pkts>:
}
   2f998:	4800      	ldr	r0, [pc, #0]	; (2f99c <bt_conn_get_pkts+0x4>)
   2f99a:	4770      	bx	lr
   2f99c:	20000100 	.word	0x20000100

0002f9a0 <bt_conn_send_cb>:
{
   2f9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f9a2:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   2f9a4:	7b43      	ldrb	r3, [r0, #13]
   2f9a6:	2b07      	cmp	r3, #7
{
   2f9a8:	4604      	mov	r4, r0
   2f9aa:	460d      	mov	r5, r1
   2f9ac:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2f9ae:	d114      	bne.n	2f9da <bt_conn_send_cb+0x3a>
	if (cb) {
   2f9b0:	b312      	cbz	r2, 2f9f8 <bt_conn_send_cb+0x58>
	return z_impl_z_current_get();
   2f9b2:	f019 fc81 	bl	492b8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   2f9b6:	4b13      	ldr	r3, [pc, #76]	; (2fa04 <bt_conn_send_cb+0x64>)
   2f9b8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   2f9ba:	4813      	ldr	r0, [pc, #76]	; (2fa08 <bt_conn_send_cb+0x68>)
   2f9bc:	bf07      	ittee	eq
   2f9be:	2200      	moveq	r2, #0
   2f9c0:	2300      	moveq	r3, #0
   2f9c2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2f9c6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2f9ca:	f018 ff43 	bl	48854 <z_impl_k_queue_get>
		if (!tx) {
   2f9ce:	b1a8      	cbz	r0, 2f9fc <bt_conn_send_cb+0x5c>
		if (conn->state != BT_CONN_CONNECTED) {
   2f9d0:	7b63      	ldrb	r3, [r4, #13]
   2f9d2:	2b07      	cmp	r3, #7
   2f9d4:	d004      	beq.n	2f9e0 <bt_conn_send_cb+0x40>
			tx_free(tx);
   2f9d6:	f7ff feed 	bl	2f7b4 <tx_free>
		return -ENOTCONN;
   2f9da:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2f9de:	e00a      	b.n	2f9f6 <bt_conn_send_cb+0x56>
		tx->pending_no_cb = 0U;
   2f9e0:	2300      	movs	r3, #0
		tx->user_data = user_data;
   2f9e2:	e9c0 6701 	strd	r6, r7, [r0, #4]
		tx->pending_no_cb = 0U;
   2f9e6:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   2f9e8:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   2f9ea:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2f9ee:	4629      	mov	r1, r5
   2f9f0:	f020 fb94 	bl	5011c <net_buf_put>
	return 0;
   2f9f4:	2000      	movs	r0, #0
}
   2f9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_data(buf)->tx = NULL;
   2f9f8:	616a      	str	r2, [r5, #20]
   2f9fa:	e7f6      	b.n	2f9ea <bt_conn_send_cb+0x4a>
			return -ENOBUFS;
   2f9fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2fa00:	e7f9      	b.n	2f9f6 <bt_conn_send_cb+0x56>
   2fa02:	bf00      	nop
   2fa04:	20003b08 	.word	0x20003b08
   2fa08:	2000105c 	.word	0x2000105c

0002fa0c <bt_conn_prepare_events>:
{
   2fa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	conn_change.signaled = 0U;
   2fa10:	4b22      	ldr	r3, [pc, #136]	; (2fa9c <bt_conn_prepare_events+0x90>)
   2fa12:	4d23      	ldr	r5, [pc, #140]	; (2faa0 <bt_conn_prepare_events+0x94>)
   2fa14:	2400      	movs	r4, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2fa16:	4622      	mov	r2, r4
   2fa18:	2101      	movs	r1, #1
{
   2fa1a:	4680      	mov	r8, r0
	conn_change.signaled = 0U;
   2fa1c:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   2fa1e:	f019 fee1 	bl	497e4 <k_poll_event_init>
   2fa22:	2601      	movs	r6, #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2fa24:	f04f 0914 	mov.w	r9, #20
		conn_cleanup(conn);
   2fa28:	f1a5 0abc 	sub.w	sl, r5, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2fa2c:	f3bf 8f5b 	dmb	ish
   2fa30:	682b      	ldr	r3, [r5, #0]
   2fa32:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2fa36:	fb09 8706 	mla	r7, r9, r6, r8
	if (!atomic_get(&conn->ref)) {
   2fa3a:	b1bb      	cbz	r3, 2fa6c <bt_conn_prepare_events+0x60>
	if (conn->state == BT_CONN_DISCONNECTED &&
   2fa3c:	f815 3caf 	ldrb.w	r3, [r5, #-175]
   2fa40:	b9e3      	cbnz	r3, 2fa7c <bt_conn_prepare_events+0x70>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2fa42:	f3bf 8f5b 	dmb	ish
   2fa46:	f1a5 03b8 	sub.w	r3, r5, #184	; 0xb8
   2fa4a:	e853 2f00 	ldrex	r2, [r3]
   2fa4e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   2fa52:	e843 1000 	strex	r0, r1, [r3]
   2fa56:	2800      	cmp	r0, #0
   2fa58:	d1f7      	bne.n	2fa4a <bt_conn_prepare_events+0x3e>
   2fa5a:	f3bf 8f5b 	dmb	ish
   2fa5e:	0653      	lsls	r3, r2, #25
   2fa60:	d50c      	bpl.n	2fa7c <bt_conn_prepare_events+0x70>
		conn_cleanup(conn);
   2fa62:	20c0      	movs	r0, #192	; 0xc0
   2fa64:	fb00 a004 	mla	r0, r0, r4, sl
   2fa68:	f01d fb61 	bl	4d12e <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2fa6c:	3401      	adds	r4, #1
   2fa6e:	2c06      	cmp	r4, #6
   2fa70:	f105 05c0 	add.w	r5, r5, #192	; 0xc0
   2fa74:	d1da      	bne.n	2fa2c <bt_conn_prepare_events+0x20>
}
   2fa76:	4630      	mov	r0, r6
   2fa78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   2fa7c:	f815 3caf 	ldrb.w	r3, [r5, #-175]
   2fa80:	2b07      	cmp	r3, #7
   2fa82:	d1f3      	bne.n	2fa6c <bt_conn_prepare_events+0x60>
	k_poll_event_init(&events[0],
   2fa84:	f1a5 0384 	sub.w	r3, r5, #132	; 0x84
   2fa88:	2200      	movs	r2, #0
   2fa8a:	2104      	movs	r1, #4
   2fa8c:	4638      	mov	r0, r7
   2fa8e:	f019 fea9 	bl	497e4 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   2fa92:	2301      	movs	r3, #1
   2fa94:	733b      	strb	r3, [r7, #12]
			ev_count++;
   2fa96:	441e      	add	r6, r3
   2fa98:	e7e8      	b.n	2fa6c <bt_conn_prepare_events+0x60>
   2fa9a:	bf00      	nop
   2fa9c:	200005ac 	.word	0x200005ac
   2faa0:	200015ec 	.word	0x200015ec

0002faa4 <bt_conn_lookup_handle>:
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   2faa4:	4602      	mov	r2, r0
   2faa6:	2106      	movs	r1, #6
   2faa8:	4801      	ldr	r0, [pc, #4]	; (2fab0 <bt_conn_lookup_handle+0xc>)
   2faaa:	f01d bbca 	b.w	4d242 <conn_lookup_handle>
   2faae:	bf00      	nop
   2fab0:	20001530 	.word	0x20001530

0002fab4 <bt_conn_set_state>:
{
   2fab4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   2fab6:	7b45      	ldrb	r5, [r0, #13]
   2fab8:	428d      	cmp	r5, r1
{
   2faba:	4604      	mov	r4, r0
	if (conn->state == state) {
   2fabc:	f000 80cf 	beq.w	2fc5e <bt_conn_set_state+0x1aa>
	conn->state = state;
   2fac0:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   2fac2:	b15d      	cbz	r5, 2fadc <bt_conn_set_state+0x28>
   2fac4:	2d06      	cmp	r5, #6
   2fac6:	d00f      	beq.n	2fae8 <bt_conn_set_state+0x34>
	switch (conn->state) {
   2fac8:	7b63      	ldrb	r3, [r4, #13]
   2faca:	2b07      	cmp	r3, #7
   2facc:	f200 80c7 	bhi.w	2fc5e <bt_conn_set_state+0x1aa>
   2fad0:	e8df f003 	tbb	[pc, r3]
   2fad4:	c5c51145 	.word	0xc5c51145
   2fad8:	2984c5c5 	.word	0x2984c5c5
		if (conn->type != BT_CONN_TYPE_ISO) {
   2fadc:	7883      	ldrb	r3, [r0, #2]
   2fade:	2b08      	cmp	r3, #8
   2fae0:	d0f2      	beq.n	2fac8 <bt_conn_set_state+0x14>
			bt_conn_ref(conn);
   2fae2:	f01d fb92 	bl	4d20a <bt_conn_ref>
   2fae6:	e7ef      	b.n	2fac8 <bt_conn_set_state+0x14>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2fae8:	7883      	ldrb	r3, [r0, #2]
   2faea:	2b01      	cmp	r3, #1
   2faec:	d1ec      	bne.n	2fac8 <bt_conn_set_state+0x14>
			k_work_cancel_delayable(&conn->deferred_work);
   2faee:	3058      	adds	r0, #88	; 0x58
   2faf0:	f021 fb6e 	bl	511d0 <k_work_cancel_delayable>
   2faf4:	e7e8      	b.n	2fac8 <bt_conn_set_state+0x14>
	z_impl_k_sem_give(sem);
   2faf6:	4d5a      	ldr	r5, [pc, #360]	; (2fc60 <bt_conn_set_state+0x1ac>)
		tx->pending_no_cb = 0U;
   2faf8:	2600      	movs	r6, #0
	__asm__ volatile(
   2fafa:	f04f 0320 	mov.w	r3, #32
   2fafe:	f3ef 8211 	mrs	r2, BASEPRI
   2fb02:	f383 8812 	msr	BASEPRI_MAX, r3
   2fb06:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   2fb0a:	69e3      	ldr	r3, [r4, #28]
   2fb0c:	2b00      	cmp	r3, #0
   2fb0e:	f000 8087 	beq.w	2fc20 <bt_conn_set_state+0x16c>
			conn->pending_no_cb--;
   2fb12:	3b01      	subs	r3, #1
   2fb14:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   2fb16:	f382 8811 	msr	BASEPRI, r2
   2fb1a:	f3bf 8f6f 	isb	sy
   2fb1e:	4628      	mov	r0, r5
   2fb20:	f018 feca 	bl	488b8 <z_impl_k_sem_give>
   2fb24:	e7e9      	b.n	2fafa <bt_conn_set_state+0x46>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2fb26:	78a3      	ldrb	r3, [r4, #2]
   2fb28:	2b04      	cmp	r3, #4
   2fb2a:	f000 8098 	beq.w	2fc5e <bt_conn_set_state+0x1aa>
	z_impl_k_queue_init(queue);
   2fb2e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   2fb32:	f021 fa3f 	bl	50fb4 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   2fb36:	2100      	movs	r1, #0
   2fb38:	484a      	ldr	r0, [pc, #296]	; (2fc64 <bt_conn_set_state+0x1b0>)
   2fb3a:	f019 fec3 	bl	498c4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   2fb3e:	2300      	movs	r3, #0
	list->tail = NULL;
   2fb40:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2fb44:	78e3      	ldrb	r3, [r4, #3]
   2fb46:	2b01      	cmp	r3, #1
   2fb48:	f040 8089 	bne.w	2fc5e <bt_conn_set_state+0x1aa>
			k_work_schedule(&conn->deferred_work,
   2fb4c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   2fb50:	2300      	movs	r3, #0
   2fb52:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
   2fb56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   2fb5a:	f019 b883 	b.w	48c64 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2fb5e:	78a3      	ldrb	r3, [r4, #2]
   2fb60:	2b04      	cmp	r3, #4
   2fb62:	d104      	bne.n	2fb6e <bt_conn_set_state+0xba>
			bt_conn_unref(conn);
   2fb64:	4620      	mov	r0, r4
}
   2fb66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   2fb6a:	f01d bb50 	b.w	4d20e <bt_conn_unref>
		switch (old_state) {
   2fb6e:	3d01      	subs	r5, #1
   2fb70:	2d05      	cmp	r5, #5
   2fb72:	d874      	bhi.n	2fc5e <bt_conn_set_state+0x1aa>
   2fb74:	a301      	add	r3, pc, #4	; (adr r3, 2fb7c <bt_conn_set_state+0xc8>)
   2fb76:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   2fb7a:	bf00      	nop
   2fb7c:	0002fb95 	.word	0x0002fb95
   2fb80:	0002fbcf 	.word	0x0002fbcf
   2fb84:	0002fb65 	.word	0x0002fb65
   2fb88:	0002fb65 	.word	0x0002fb65
   2fb8c:	0002fbcf 	.word	0x0002fbcf
   2fb90:	0002fbcf 	.word	0x0002fbcf
			tx_notify(conn);
   2fb94:	4620      	mov	r0, r4
   2fb96:	f01d fa77 	bl	4d088 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   2fb9a:	78a3      	ldrb	r3, [r4, #2]
   2fb9c:	2b01      	cmp	r3, #1
   2fb9e:	d103      	bne.n	2fba8 <bt_conn_set_state+0xf4>
				k_work_cancel_delayable(&conn->deferred_work);
   2fba0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2fba4:	f021 fb14 	bl	511d0 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2fba8:	f3bf 8f5b 	dmb	ish
   2fbac:	3404      	adds	r4, #4
   2fbae:	e854 3f00 	ldrex	r3, [r4]
   2fbb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2fbb6:	e844 3200 	strex	r2, r3, [r4]
   2fbba:	2a00      	cmp	r2, #0
   2fbbc:	d1f7      	bne.n	2fbae <bt_conn_set_state+0xfa>
   2fbbe:	f3bf 8f5b 	dmb	ish
   2fbc2:	2100      	movs	r1, #0
   2fbc4:	4827      	ldr	r0, [pc, #156]	; (2fc64 <bt_conn_set_state+0x1b0>)
}
   2fbc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2fbca:	f019 be7b 	b.w	498c4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   2fbce:	7b23      	ldrb	r3, [r4, #12]
   2fbd0:	2b00      	cmp	r3, #0
   2fbd2:	d0c7      	beq.n	2fb64 <bt_conn_set_state+0xb0>
				notify_connected(conn);
   2fbd4:	4620      	mov	r0, r4
   2fbd6:	f7ff fdf7 	bl	2f7c8 <notify_connected>
   2fbda:	e7c3      	b.n	2fb64 <bt_conn_set_state+0xb0>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2fbdc:	78a3      	ldrb	r3, [r4, #2]
   2fbde:	2b01      	cmp	r3, #1
   2fbe0:	d13d      	bne.n	2fc5e <bt_conn_set_state+0x1aa>
					K_MSEC(10 * bt_dev.create_param.timeout));
   2fbe2:	4b21      	ldr	r3, [pc, #132]	; (2fc68 <bt_conn_set_state+0x1b4>)
   2fbe4:	8a9b      	ldrh	r3, [r3, #20]
			k_work_schedule(&conn->deferred_work,
   2fbe6:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
   2fbe8:	b1bb      	cbz	r3, 2fc1a <bt_conn_set_state+0x166>
   2fbea:	220a      	movs	r2, #10
   2fbec:	435a      	muls	r2, r3
   2fbee:	17d3      	asrs	r3, r2, #31
			return ((t * to_hz + off) / from_hz);
   2fbf0:	03d9      	lsls	r1, r3, #15
   2fbf2:	03d0      	lsls	r0, r2, #15
   2fbf4:	f240 35e7 	movw	r5, #999	; 0x3e7
   2fbf8:	1940      	adds	r0, r0, r5
   2fbfa:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
   2fbfe:	f04f 0500 	mov.w	r5, #0
   2fc02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2fc06:	f04f 0300 	mov.w	r3, #0
   2fc0a:	eb45 0101 	adc.w	r1, r5, r1
   2fc0e:	f7f6 fa77 	bl	26100 <__aeabi_uldivmod>
			k_work_schedule(&conn->deferred_work,
   2fc12:	4602      	mov	r2, r0
   2fc14:	460b      	mov	r3, r1
   2fc16:	4620      	mov	r0, r4
   2fc18:	e79d      	b.n	2fb56 <bt_conn_set_state+0xa2>
					K_MSEC(10 * bt_dev.create_param.timeout));
   2fc1a:	2200      	movs	r2, #0
   2fc1c:	2300      	movs	r3, #0
   2fc1e:	e7e7      	b.n	2fbf0 <bt_conn_set_state+0x13c>
Z_GENLIST_IS_EMPTY(slist)
   2fc20:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2fc22:	b128      	cbz	r0, 2fc30 <bt_conn_set_state+0x17c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2fc24:	69a1      	ldr	r1, [r4, #24]
   2fc26:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   2fc28:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2fc2a:	4288      	cmp	r0, r1
	list->tail = node;
   2fc2c:	bf08      	it	eq
   2fc2e:	61a3      	streq	r3, [r4, #24]
   2fc30:	f382 8811 	msr	BASEPRI, r2
   2fc34:	f3bf 8f6f 	isb	sy
		if (!node) {
   2fc38:	b188      	cbz	r0, 2fc5e <bt_conn_set_state+0x1aa>
	__asm__ volatile(
   2fc3a:	f04f 0220 	mov.w	r2, #32
   2fc3e:	f3ef 8311 	mrs	r3, BASEPRI
   2fc42:	f382 8812 	msr	BASEPRI_MAX, r2
   2fc46:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   2fc4a:	68c2      	ldr	r2, [r0, #12]
   2fc4c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   2fc4e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   2fc50:	f383 8811 	msr	BASEPRI, r3
   2fc54:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   2fc58:	f7ff fdac 	bl	2f7b4 <tx_free>
   2fc5c:	e75f      	b.n	2fb1e <bt_conn_set_state+0x6a>
}
   2fc5e:	bd70      	pop	{r4, r5, r6, pc}
   2fc60:	20000100 	.word	0x20000100
   2fc64:	200005ac 	.word	0x200005ac
   2fc68:	20000000 	.word	0x20000000

0002fc6c <bt_conn_index>:
		index = conn - acl_conns;
   2fc6c:	4b03      	ldr	r3, [pc, #12]	; (2fc7c <bt_conn_index+0x10>)
   2fc6e:	1ac0      	subs	r0, r0, r3
   2fc70:	4b03      	ldr	r3, [pc, #12]	; (2fc80 <bt_conn_index+0x14>)
   2fc72:	1180      	asrs	r0, r0, #6
   2fc74:	4358      	muls	r0, r3
}
   2fc76:	b2c0      	uxtb	r0, r0
   2fc78:	4770      	bx	lr
   2fc7a:	bf00      	nop
   2fc7c:	20001530 	.word	0x20001530
   2fc80:	aaaaaaab 	.word	0xaaaaaaab

0002fc84 <bt_conn_create_pdu_timeout>:
{
   2fc84:	b538      	push	{r3, r4, r5, lr}
   2fc86:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   2fc88:	4906      	ldr	r1, [pc, #24]	; (2fca4 <bt_conn_create_pdu_timeout+0x20>)
   2fc8a:	2800      	cmp	r0, #0
   2fc8c:	bf08      	it	eq
   2fc8e:	4608      	moveq	r0, r1
   2fc90:	f020 fa1b 	bl	500ca <net_buf_alloc_fixed>
	if (!buf) {
   2fc94:	4604      	mov	r4, r0
   2fc96:	b118      	cbz	r0, 2fca0 <bt_conn_create_pdu_timeout+0x1c>
	net_buf_simple_reserve(&buf->b, reserve);
   2fc98:	1d29      	adds	r1, r5, #4
   2fc9a:	3008      	adds	r0, #8
   2fc9c:	f020 fa3a 	bl	50114 <net_buf_simple_reserve>
}
   2fca0:	4620      	mov	r0, r4
   2fca2:	bd38      	pop	{r3, r4, r5, pc}
   2fca4:	200010a4 	.word	0x200010a4

0002fca8 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   2fca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2fcaa:	1d03      	adds	r3, r0, #4
{
   2fcac:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2fcae:	2109      	movs	r1, #9
   2fcb0:	4618      	mov	r0, r3
   2fcb2:	f01d fa2a 	bl	4d10a <atomic_test_bit>
   2fcb6:	b1c8      	cbz	r0, 2fcec <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   2fcb8:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2fcbc:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   2fcc0:	4291      	cmp	r1, r2
   2fcc2:	d813      	bhi.n	2fcec <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   2fcc4:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   2fcc8:	4291      	cmp	r1, r2
   2fcca:	d30f      	bcc.n	2fcec <notify_le_param_updated+0x44>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   2fccc:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   2fcd0:	4291      	cmp	r1, r2
   2fcd2:	d10b      	bne.n	2fcec <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2fcd4:	f3bf 8f5b 	dmb	ish
   2fcd8:	e853 2f00 	ldrex	r2, [r3]
   2fcdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   2fce0:	e843 2100 	strex	r1, r2, [r3]
   2fce4:	2900      	cmp	r1, #0
   2fce6:	d1f7      	bne.n	2fcd8 <notify_le_param_updated+0x30>
   2fce8:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2fcec:	4b0f      	ldr	r3, [pc, #60]	; (2fd2c <notify_le_param_updated+0x84>)
   2fcee:	681d      	ldr	r5, [r3, #0]
   2fcf0:	b925      	cbnz	r5, 2fcfc <notify_le_param_updated+0x54>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fcf2:	4d0f      	ldr	r5, [pc, #60]	; (2fd30 <notify_le_param_updated+0x88>)
   2fcf4:	4f0f      	ldr	r7, [pc, #60]	; (2fd34 <notify_le_param_updated+0x8c>)
   2fcf6:	42bd      	cmp	r5, r7
   2fcf8:	d30c      	bcc.n	2fd14 <notify_le_param_updated+0x6c>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   2fcfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   2fcfc:	68ee      	ldr	r6, [r5, #12]
   2fcfe:	b13e      	cbz	r6, 2fd10 <notify_le_param_updated+0x68>
			cb->le_param_updated(conn, conn->le.interval,
   2fd00:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2fd04:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2fd08:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2fd0c:	4620      	mov	r0, r4
   2fd0e:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   2fd10:	69ed      	ldr	r5, [r5, #28]
   2fd12:	e7ed      	b.n	2fcf0 <notify_le_param_updated+0x48>
		if (cb->le_param_updated) {
   2fd14:	68ee      	ldr	r6, [r5, #12]
   2fd16:	b13e      	cbz	r6, 2fd28 <notify_le_param_updated+0x80>
			cb->le_param_updated(conn, conn->le.interval,
   2fd18:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   2fd1c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   2fd20:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   2fd24:	4620      	mov	r0, r4
   2fd26:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fd28:	3520      	adds	r5, #32
   2fd2a:	e7e4      	b.n	2fcf6 <notify_le_param_updated+0x4e>
   2fd2c:	20003ff8 	.word	0x20003ff8
   2fd30:	00051c90 	.word	0x00051c90
   2fd34:	00051c90 	.word	0x00051c90

0002fd38 <notify_le_phy_updated>:
}
#endif

#if defined(CONFIG_BT_USER_PHY_UPDATE)
void notify_le_phy_updated(struct bt_conn *conn)
{
   2fd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   2fd3a:	4b0d      	ldr	r3, [pc, #52]	; (2fd70 <notify_le_phy_updated+0x38>)
   2fd3c:	681c      	ldr	r4, [r3, #0]
{
   2fd3e:	4605      	mov	r5, r0
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2fd40:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
	for (cb = callback_list; cb; cb = cb->_next) {
   2fd44:	b934      	cbnz	r4, 2fd54 <notify_le_phy_updated+0x1c>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fd46:	4c0b      	ldr	r4, [pc, #44]	; (2fd74 <notify_le_phy_updated+0x3c>)
   2fd48:	4e0b      	ldr	r6, [pc, #44]	; (2fd78 <notify_le_phy_updated+0x40>)
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   2fd4a:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fd4e:	42b4      	cmp	r4, r6
   2fd50:	d307      	bcc.n	2fd62 <notify_le_phy_updated+0x2a>
		}
	}
}
   2fd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_phy_updated) {
   2fd54:	69a3      	ldr	r3, [r4, #24]
   2fd56:	b113      	cbz	r3, 2fd5e <notify_le_phy_updated+0x26>
			cb->le_phy_updated(conn, &conn->le.phy);
   2fd58:	4631      	mov	r1, r6
   2fd5a:	4628      	mov	r0, r5
   2fd5c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2fd5e:	69e4      	ldr	r4, [r4, #28]
   2fd60:	e7f0      	b.n	2fd44 <notify_le_phy_updated+0xc>
		if (cb->le_phy_updated) {
   2fd62:	69a3      	ldr	r3, [r4, #24]
   2fd64:	b113      	cbz	r3, 2fd6c <notify_le_phy_updated+0x34>
			cb->le_phy_updated(conn, &conn->le.phy);
   2fd66:	4639      	mov	r1, r7
   2fd68:	4628      	mov	r0, r5
   2fd6a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fd6c:	3420      	adds	r4, #32
   2fd6e:	e7ee      	b.n	2fd4e <notify_le_phy_updated+0x16>
   2fd70:	20003ff8 	.word	0x20003ff8
   2fd74:	00051c90 	.word	0x00051c90
   2fd78:	00051c90 	.word	0x00051c90

0002fd7c <le_param_req>:
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   2fd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fd80:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   2fd82:	4608      	mov	r0, r1
{
   2fd84:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   2fd86:	f01c febd 	bl	4cb04 <bt_le_conn_params_valid>
   2fd8a:	4606      	mov	r6, r0
   2fd8c:	b918      	cbnz	r0, 2fd96 <le_param_req+0x1a>
		return false;
   2fd8e:	2600      	movs	r6, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   2fd90:	4630      	mov	r0, r6
   2fd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   2fd96:	4b13      	ldr	r3, [pc, #76]	; (2fde4 <le_param_req+0x68>)
   2fd98:	681d      	ldr	r5, [r3, #0]
   2fd9a:	b945      	cbnz	r5, 2fdae <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fd9c:	4d12      	ldr	r5, [pc, #72]	; (2fde8 <le_param_req+0x6c>)
   2fd9e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 2fdec <le_param_req+0x70>
   2fda2:	4545      	cmp	r5, r8
   2fda4:	d2f4      	bcs.n	2fd90 <le_param_req+0x14>
		if (!cb->le_param_req) {
   2fda6:	68ab      	ldr	r3, [r5, #8]
   2fda8:	b983      	cbnz	r3, 2fdcc <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fdaa:	3520      	adds	r5, #32
   2fdac:	e7f9      	b.n	2fda2 <le_param_req+0x26>
		if (!cb->le_param_req) {
   2fdae:	68ab      	ldr	r3, [r5, #8]
   2fdb0:	b90b      	cbnz	r3, 2fdb6 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   2fdb2:	69ed      	ldr	r5, [r5, #28]
   2fdb4:	e7f1      	b.n	2fd9a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   2fdb6:	4621      	mov	r1, r4
   2fdb8:	4638      	mov	r0, r7
   2fdba:	4798      	blx	r3
   2fdbc:	2800      	cmp	r0, #0
   2fdbe:	d0e6      	beq.n	2fd8e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2fdc0:	4620      	mov	r0, r4
   2fdc2:	f01c fe9f 	bl	4cb04 <bt_le_conn_params_valid>
   2fdc6:	2800      	cmp	r0, #0
   2fdc8:	d1f3      	bne.n	2fdb2 <le_param_req+0x36>
   2fdca:	e7e0      	b.n	2fd8e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   2fdcc:	4621      	mov	r1, r4
   2fdce:	4638      	mov	r0, r7
   2fdd0:	4798      	blx	r3
   2fdd2:	2800      	cmp	r0, #0
   2fdd4:	d0db      	beq.n	2fd8e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   2fdd6:	4620      	mov	r0, r4
   2fdd8:	f01c fe94 	bl	4cb04 <bt_le_conn_params_valid>
   2fddc:	2800      	cmp	r0, #0
   2fdde:	d1e4      	bne.n	2fdaa <le_param_req+0x2e>
   2fde0:	e7d5      	b.n	2fd8e <le_param_req+0x12>
   2fde2:	bf00      	nop
   2fde4:	20003ff8 	.word	0x20003ff8
   2fde8:	00051c90 	.word	0x00051c90
   2fdec:	00051c90 	.word	0x00051c90

0002fdf0 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   2fdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2fdf4:	78c3      	ldrb	r3, [r0, #3]
{
   2fdf6:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2fdf8:	b973      	cbnz	r3, 2fe18 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   2fdfa:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   2fdfe:	4b10      	ldr	r3, [pc, #64]	; (2fe40 <bt_conn_identity_resolved+0x50>)
   2fe00:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2fe02:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   2fe06:	b955      	cbnz	r5, 2fe1e <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe08:	4d0e      	ldr	r5, [pc, #56]	; (2fe44 <bt_conn_identity_resolved+0x54>)
   2fe0a:	4f0f      	ldr	r7, [pc, #60]	; (2fe48 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2fe0c:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe10:	42bd      	cmp	r5, r7
   2fe12:	d30c      	bcc.n	2fe2e <bt_conn_identity_resolved+0x3e>
		}
	}
}
   2fe14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   2fe18:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   2fe1c:	e7ef      	b.n	2fdfe <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   2fe1e:	692b      	ldr	r3, [r5, #16]
   2fe20:	b11b      	cbz	r3, 2fe2a <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2fe22:	463a      	mov	r2, r7
   2fe24:	4631      	mov	r1, r6
   2fe26:	4620      	mov	r0, r4
   2fe28:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2fe2a:	69ed      	ldr	r5, [r5, #28]
   2fe2c:	e7eb      	b.n	2fe06 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   2fe2e:	692b      	ldr	r3, [r5, #16]
   2fe30:	b11b      	cbz	r3, 2fe3a <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   2fe32:	4642      	mov	r2, r8
   2fe34:	4631      	mov	r1, r6
   2fe36:	4620      	mov	r0, r4
   2fe38:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe3a:	3520      	adds	r5, #32
   2fe3c:	e7e8      	b.n	2fe10 <bt_conn_identity_resolved+0x20>
   2fe3e:	bf00      	nop
   2fe40:	20003ff8 	.word	0x20003ff8
   2fe44:	00051c90 	.word	0x00051c90
   2fe48:	00051c90 	.word	0x00051c90

0002fe4c <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   2fe4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   2fe4e:	7a43      	ldrb	r3, [r0, #9]
   2fe50:	7283      	strb	r3, [r0, #10]
{
   2fe52:	4604      	mov	r4, r0
   2fe54:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   2fe56:	f01d fbac 	bl	4d5b2 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   2fe5a:	4b0c      	ldr	r3, [pc, #48]	; (2fe8c <bt_conn_security_changed+0x40>)
   2fe5c:	681d      	ldr	r5, [r3, #0]
   2fe5e:	b925      	cbnz	r5, 2fe6a <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe60:	4d0b      	ldr	r5, [pc, #44]	; (2fe90 <bt_conn_security_changed+0x44>)
   2fe62:	4f0c      	ldr	r7, [pc, #48]	; (2fe94 <bt_conn_security_changed+0x48>)
   2fe64:	42bd      	cmp	r5, r7
   2fe66:	d308      	bcc.n	2fe7a <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   2fe68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   2fe6a:	696b      	ldr	r3, [r5, #20]
   2fe6c:	b11b      	cbz	r3, 2fe76 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   2fe6e:	4632      	mov	r2, r6
   2fe70:	7a61      	ldrb	r1, [r4, #9]
   2fe72:	4620      	mov	r0, r4
   2fe74:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   2fe76:	69ed      	ldr	r5, [r5, #28]
   2fe78:	e7f1      	b.n	2fe5e <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   2fe7a:	696b      	ldr	r3, [r5, #20]
   2fe7c:	b11b      	cbz	r3, 2fe86 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   2fe7e:	4632      	mov	r2, r6
   2fe80:	7a61      	ldrb	r1, [r4, #9]
   2fe82:	4620      	mov	r0, r4
   2fe84:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2fe86:	3520      	adds	r5, #32
   2fe88:	e7ec      	b.n	2fe64 <bt_conn_security_changed+0x18>
   2fe8a:	bf00      	nop
   2fe8c:	20003ff8 	.word	0x20003ff8
   2fe90:	00051c90 	.word	0x00051c90
   2fe94:	00051c90 	.word	0x00051c90

0002fe98 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   2fe98:	4b02      	ldr	r3, [pc, #8]	; (2fea4 <bt_conn_cb_register+0xc>)
   2fe9a:	681a      	ldr	r2, [r3, #0]
   2fe9c:	61c2      	str	r2, [r0, #28]
	callback_list = cb;
   2fe9e:	6018      	str	r0, [r3, #0]
}
   2fea0:	4770      	bx	lr
   2fea2:	bf00      	nop
   2fea4:	20003ff8 	.word	0x20003ff8

0002fea8 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   2fea8:	b570      	push	{r4, r5, r6, lr}
   2feaa:	4606      	mov	r6, r0
   2feac:	460d      	mov	r5, r1
   2feae:	480a      	ldr	r0, [pc, #40]	; (2fed8 <bt_conn_add_le+0x30>)
   2feb0:	2106      	movs	r1, #6
   2feb2:	f7ff fcad 	bl	2f810 <bt_conn_new.part.11>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   2feb6:	4604      	mov	r4, r0
   2feb8:	b160      	cbz	r0, 2fed4 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   2feba:	7206      	strb	r6, [r0, #8]
   2febc:	2207      	movs	r2, #7
   2febe:	4629      	mov	r1, r5
   2fec0:	3088      	adds	r0, #136	; 0x88
   2fec2:	f01c fa13 	bl	4c2ec <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   2fec6:	2301      	movs	r3, #1
   2fec8:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   2feca:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   2fecc:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2fece:	4b03      	ldr	r3, [pc, #12]	; (2fedc <bt_conn_add_le+0x34>)
   2fed0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   2fed4:	4620      	mov	r0, r4
   2fed6:	bd70      	pop	{r4, r5, r6, pc}
   2fed8:	20001530 	.word	0x20001530
   2fedc:	00280018 	.word	0x00280018

0002fee0 <bt_conn_lookup_addr_le.part.14>:
	}

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
   2fee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fee4:	4e0f      	ldr	r6, [pc, #60]	; (2ff24 <bt_conn_lookup_addr_le.part.14+0x44>)
   2fee6:	4607      	mov	r7, r0
   2fee8:	4688      	mov	r8, r1
{
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2feea:	2500      	movs	r5, #0
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   2feec:	4630      	mov	r0, r6
   2feee:	f01d f8f1 	bl	4d0d4 <bt_conn_ref.part.12>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);

		if (!conn) {
   2fef2:	4604      	mov	r4, r0
   2fef4:	b120      	cbz	r0, 2ff00 <bt_conn_lookup_addr_le.part.14+0x20>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2fef6:	7883      	ldrb	r3, [r0, #2]
   2fef8:	2b01      	cmp	r3, #1
   2fefa:	d00a      	beq.n	2ff12 <bt_conn_lookup_addr_le.part.14+0x32>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   2fefc:	f01d f987 	bl	4d20e <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2ff00:	3501      	adds	r5, #1
   2ff02:	2d06      	cmp	r5, #6
   2ff04:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   2ff08:	d1f0      	bne.n	2feec <bt_conn_lookup_addr_le.part.14+0xc>
		}

		return conn;
	}

	return NULL;
   2ff0a:	2400      	movs	r4, #0
}
   2ff0c:	4620      	mov	r0, r4
   2ff0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   2ff12:	4642      	mov	r2, r8
   2ff14:	4639      	mov	r1, r7
   2ff16:	f01d fa34 	bl	4d382 <bt_conn_is_peer_addr_le>
   2ff1a:	2800      	cmp	r0, #0
   2ff1c:	d1f6      	bne.n	2ff0c <bt_conn_lookup_addr_le.part.14+0x2c>
			bt_conn_unref(conn);
   2ff1e:	4620      	mov	r0, r4
   2ff20:	e7ec      	b.n	2fefc <bt_conn_lookup_addr_le.part.14+0x1c>
   2ff22:	bf00      	nop
   2ff24:	20001530 	.word	0x20001530

0002ff28 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   2ff28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ff2c:	f8df a050 	ldr.w	sl, [pc, #80]	; 2ff80 <bt_conn_lookup_state_le+0x58>
   2ff30:	4606      	mov	r6, r0
   2ff32:	460f      	mov	r7, r1
   2ff34:	4690      	mov	r8, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2ff36:	2500      	movs	r5, #0
   2ff38:	f04f 09c0 	mov.w	r9, #192	; 0xc0
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   2ff3c:	fb09 a005 	mla	r0, r9, r5, sl
   2ff40:	f01d f8c8 	bl	4d0d4 <bt_conn_ref.part.12>
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);

		if (!conn) {
   2ff44:	4604      	mov	r4, r0
   2ff46:	b120      	cbz	r0, 2ff52 <bt_conn_lookup_state_le+0x2a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   2ff48:	7883      	ldrb	r3, [r0, #2]
   2ff4a:	2b01      	cmp	r3, #1
   2ff4c:	d006      	beq.n	2ff5c <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   2ff4e:	f01d f95e 	bl	4d20e <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   2ff52:	3501      	adds	r5, #1
   2ff54:	2d06      	cmp	r5, #6
   2ff56:	d1f1      	bne.n	2ff3c <bt_conn_lookup_state_le+0x14>
		}

		return conn;
	}

	return NULL;
   2ff58:	2400      	movs	r4, #0
   2ff5a:	e00d      	b.n	2ff78 <bt_conn_lookup_state_le+0x50>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   2ff5c:	b137      	cbz	r7, 2ff6c <bt_conn_lookup_state_le+0x44>
   2ff5e:	463a      	mov	r2, r7
   2ff60:	4631      	mov	r1, r6
   2ff62:	f01d fa0e 	bl	4d382 <bt_conn_is_peer_addr_le>
   2ff66:	b908      	cbnz	r0, 2ff6c <bt_conn_lookup_state_le+0x44>
			bt_conn_unref(conn);
   2ff68:	4620      	mov	r0, r4
   2ff6a:	e7f0      	b.n	2ff4e <bt_conn_lookup_state_le+0x26>
		if (!(conn->state == state && conn->id == id)) {
   2ff6c:	7b63      	ldrb	r3, [r4, #13]
   2ff6e:	4543      	cmp	r3, r8
   2ff70:	d1fa      	bne.n	2ff68 <bt_conn_lookup_state_le+0x40>
   2ff72:	7a23      	ldrb	r3, [r4, #8]
   2ff74:	42b3      	cmp	r3, r6
   2ff76:	d1f7      	bne.n	2ff68 <bt_conn_lookup_state_le+0x40>
}
   2ff78:	4620      	mov	r0, r4
   2ff7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ff7e:	bf00      	nop
   2ff80:	20001530 	.word	0x20001530

0002ff84 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   2ff84:	b510      	push	{r4, lr}
	info->type = conn->type;
   2ff86:	7882      	ldrb	r2, [r0, #2]
   2ff88:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   2ff8a:	78c4      	ldrb	r4, [r0, #3]
   2ff8c:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   2ff8e:	7a03      	ldrb	r3, [r0, #8]
   2ff90:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   2ff92:	2a01      	cmp	r2, #1
   2ff94:	d11e      	bne.n	2ffd4 <bt_conn_get_info+0x50>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   2ff96:	f100 0288 	add.w	r2, r0, #136	; 0x88
   2ff9a:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   2ff9c:	4a0f      	ldr	r2, [pc, #60]	; (2ffdc <bt_conn_get_info+0x58>)
   2ff9e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   2ffa2:	4413      	add	r3, r2
   2ffa4:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2ffa6:	f100 0296 	add.w	r2, r0, #150	; 0x96
   2ffaa:	f100 038f 	add.w	r3, r0, #143	; 0x8f
   2ffae:	b974      	cbnz	r4, 2ffce <bt_conn_get_info+0x4a>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   2ffb0:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   2ffb4:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   2ffb8:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   2ffba:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   2ffbe:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
#if defined(CONFIG_BT_USER_PHY_UPDATE)
		info->le.phy = &conn->le.phy;
   2ffc0:	30b8      	adds	r0, #184	; 0xb8
		info->le.timeout = conn->le.timeout;
   2ffc2:	f830 3c12 	ldrh.w	r3, [r0, #-18]
   2ffc6:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
   2ffc8:	61c8      	str	r0, [r1, #28]
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   2ffca:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   2ffcc:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   2ffce:	e9c1 2303 	strd	r2, r3, [r1, #12]
   2ffd2:	e7ef      	b.n	2ffb4 <bt_conn_get_info+0x30>
	return -EINVAL;
   2ffd4:	f06f 0015 	mvn.w	r0, #21
   2ffd8:	e7f8      	b.n	2ffcc <bt_conn_get_info+0x48>
   2ffda:	bf00      	nop
   2ffdc:	20000000 	.word	0x20000000

0002ffe0 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   2ffe0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ffe4:	4604      	mov	r4, r0
   2ffe6:	4688      	mov	r8, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2ffe8:	4850      	ldr	r0, [pc, #320]	; (3012c <bt_conn_le_create+0x14c>)
   2ffea:	2101      	movs	r1, #1
{
   2ffec:	4615      	mov	r5, r2
   2ffee:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   2fff0:	f01d f88b 	bl	4d10a <atomic_test_bit>
   2fff4:	b928      	cbnz	r0, 30002 <bt_conn_le_create+0x22>
		return -EAGAIN;
   2fff6:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   2fffa:	4628      	mov	r0, r5
   2fffc:	b002      	add	sp, #8
   2fffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   30002:	4610      	mov	r0, r2
   30004:	f01c fd7e 	bl	4cb04 <bt_le_conn_params_valid>
   30008:	b910      	cbnz	r0, 30010 <bt_conn_le_create+0x30>
		return -EINVAL;
   3000a:	f06f 0515 	mvn.w	r5, #21
   3000e:	e7f4      	b.n	2fffa <bt_conn_le_create+0x1a>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   30010:	2106      	movs	r1, #6
   30012:	4846      	ldr	r0, [pc, #280]	; (3012c <bt_conn_le_create+0x14c>)
   30014:	f01d f879 	bl	4d10a <atomic_test_bit>
   30018:	2800      	cmp	r0, #0
   3001a:	d1ec      	bne.n	2fff6 <bt_conn_le_create+0x16>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   3001c:	210b      	movs	r1, #11
   3001e:	4843      	ldr	r0, [pc, #268]	; (3012c <bt_conn_le_create+0x14c>)
   30020:	f01d f873 	bl	4d10a <atomic_test_bit>
   30024:	4606      	mov	r6, r0
   30026:	2800      	cmp	r0, #0
   30028:	d179      	bne.n	3011e <bt_conn_le_create+0x13e>
	if (!bt_id_scan_random_addr_check()) {
   3002a:	f01c feb1 	bl	4cd90 <bt_id_scan_random_addr_check>
   3002e:	2800      	cmp	r0, #0
   30030:	d0eb      	beq.n	3000a <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   30032:	4621      	mov	r1, r4
   30034:	4630      	mov	r0, r6
   30036:	f01d f9c4 	bl	4d3c2 <bt_conn_exists_le>
   3003a:	2800      	cmp	r0, #0
   3003c:	d1e5      	bne.n	3000a <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   3003e:	7823      	ldrb	r3, [r4, #0]
   30040:	3b02      	subs	r3, #2
   30042:	2b01      	cmp	r3, #1
   30044:	d84a      	bhi.n	300dc <bt_conn_le_create+0xfc>
   30046:	2207      	movs	r2, #7
   30048:	4621      	mov	r1, r4
   3004a:	4668      	mov	r0, sp
   3004c:	f01c f94e 	bl	4c2ec <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   30050:	f89d 3000 	ldrb.w	r3, [sp]
   30054:	3b02      	subs	r3, #2
   30056:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   3005a:	4669      	mov	r1, sp
   3005c:	2000      	movs	r0, #0
   3005e:	f7ff ff23 	bl	2fea8 <bt_conn_add_le>
	if (!conn) {
   30062:	4604      	mov	r4, r0
   30064:	2800      	cmp	r0, #0
   30066:	d05d      	beq.n	30124 <bt_conn_le_create+0x144>
	conn->le.interval_min = param->interval_min;
   30068:	882b      	ldrh	r3, [r5, #0]
   3006a:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   3006e:	886b      	ldrh	r3, [r5, #2]
   30070:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   30074:	88ab      	ldrh	r3, [r5, #4]
   30076:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   3007a:	88eb      	ldrh	r3, [r5, #6]
   3007c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   30080:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
   30084:	4d2a      	ldr	r5, [pc, #168]	; (30130 <bt_conn_le_create+0x150>)
   30086:	f105 0608 	add.w	r6, r5, #8
   3008a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   3008e:	8aaa      	ldrh	r2, [r5, #20]
	bt_dev.create_param.timeout =
   30090:	2a00      	cmp	r2, #0
   30092:	bf08      	it	eq
   30094:	f44f 7296 	moveq.w	r2, #300	; 0x12c
   30098:	82aa      	strh	r2, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   3009a:	8a2a      	ldrh	r2, [r5, #16]
   3009c:	462b      	mov	r3, r5
	bt_dev.create_param.interval_coded =
   3009e:	b902      	cbnz	r2, 300a2 <bt_conn_le_create+0xc2>
   300a0:	89aa      	ldrh	r2, [r5, #12]
   300a2:	821a      	strh	r2, [r3, #16]
		(bt_dev.create_param.window_coded != 0) ?
   300a4:	8a5a      	ldrh	r2, [r3, #18]
	bt_dev.create_param.window_coded =
   300a6:	b902      	cbnz	r2, 300aa <bt_conn_le_create+0xca>
   300a8:	89da      	ldrh	r2, [r3, #14]
   300aa:	825a      	strh	r2, [r3, #18]
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   300ac:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   300b0:	b11a      	cbz	r2, 300ba <bt_conn_le_create+0xda>
   300b2:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   300b6:	4293      	cmp	r3, r2
   300b8:	d919      	bls.n	300ee <bt_conn_le_create+0x10e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   300ba:	2102      	movs	r1, #2
   300bc:	4620      	mov	r0, r4
   300be:	f7ff fcf9 	bl	2fab4 <bt_conn_set_state>
		err = bt_le_scan_update(true);
   300c2:	2001      	movs	r0, #1
   300c4:	f7ff f894 	bl	2f1f0 <bt_le_scan_update>
		if (err) {
   300c8:	4605      	mov	r5, r0
   300ca:	b330      	cbz	r0, 3011a <bt_conn_le_create+0x13a>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   300cc:	4620      	mov	r0, r4
   300ce:	2100      	movs	r1, #0
   300d0:	f7ff fcf0 	bl	2fab4 <bt_conn_set_state>
			bt_conn_unref(conn);
   300d4:	4620      	mov	r0, r4
   300d6:	f01d f89a 	bl	4d20e <bt_conn_unref>
			return err;
   300da:	e78e      	b.n	2fffa <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   300dc:	4621      	mov	r1, r4
   300de:	f01c fe2b 	bl	4cd38 <bt_lookup_id_addr>
   300e2:	2207      	movs	r2, #7
   300e4:	4601      	mov	r1, r0
   300e6:	4668      	mov	r0, sp
   300e8:	f01c f900 	bl	4c2ec <memcpy>
   300ec:	e7b5      	b.n	3005a <bt_conn_le_create+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   300ee:	2106      	movs	r1, #6
   300f0:	4620      	mov	r0, r4
   300f2:	f7ff fcdf 	bl	2fab4 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   300f6:	4620      	mov	r0, r4
   300f8:	f01c fc4b 	bl	4c992 <bt_le_create_conn>
	if (err) {
   300fc:	4605      	mov	r5, r0
   300fe:	b160      	cbz	r0, 3011a <bt_conn_le_create+0x13a>
		conn->err = 0;
   30100:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   30102:	4631      	mov	r1, r6
   30104:	4620      	mov	r0, r4
		conn->err = 0;
   30106:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   30108:	f7ff fcd4 	bl	2fab4 <bt_conn_set_state>
		bt_conn_unref(conn);
   3010c:	4620      	mov	r0, r4
   3010e:	f01d f87e 	bl	4d20e <bt_conn_unref>
		bt_le_scan_update(false);
   30112:	4630      	mov	r0, r6
   30114:	f7ff f86c 	bl	2f1f0 <bt_le_scan_update>
		return err;
   30118:	e76f      	b.n	2fffa <bt_conn_le_create+0x1a>
	*ret_conn = conn;
   3011a:	603c      	str	r4, [r7, #0]
	return 0;
   3011c:	e76d      	b.n	2fffa <bt_conn_le_create+0x1a>
		return -EALREADY;
   3011e:	f06f 0577 	mvn.w	r5, #119	; 0x77
   30122:	e76a      	b.n	2fffa <bt_conn_le_create+0x1a>
		return -ENOMEM;
   30124:	f06f 050b 	mvn.w	r5, #11
   30128:	e767      	b.n	2fffa <bt_conn_le_create+0x1a>
   3012a:	bf00      	nop
   3012c:	200000cc 	.word	0x200000cc
   30130:	20000000 	.word	0x20000000

00030134 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   30134:	b570      	push	{r4, r5, r6, lr}
   30136:	4606      	mov	r6, r0
   30138:	460d      	mov	r5, r1
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   3013a:	4838      	ldr	r0, [pc, #224]	; (3021c <bt_le_set_auto_conn+0xe8>)
   3013c:	2101      	movs	r1, #1
   3013e:	f01c ffe4 	bl	4d10a <atomic_test_bit>
   30142:	2800      	cmp	r0, #0
   30144:	d064      	beq.n	30210 <bt_le_set_auto_conn+0xdc>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   30146:	b92d      	cbnz	r5, 30154 <bt_le_set_auto_conn+0x20>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   30148:	f01c fe22 	bl	4cd90 <bt_id_scan_random_addr_check>
   3014c:	b940      	cbnz	r0, 30160 <bt_le_set_auto_conn+0x2c>
		return -EINVAL;
   3014e:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   30152:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   30154:	4628      	mov	r0, r5
   30156:	f01c fcd5 	bl	4cb04 <bt_le_conn_params_valid>
   3015a:	2800      	cmp	r0, #0
   3015c:	d1f4      	bne.n	30148 <bt_le_set_auto_conn+0x14>
   3015e:	e7f6      	b.n	3014e <bt_le_set_auto_conn+0x1a>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   30160:	4631      	mov	r1, r6
   30162:	2000      	movs	r0, #0
   30164:	f7ff febc 	bl	2fee0 <bt_conn_lookup_addr_le.part.14>
	if (!conn) {
   30168:	4604      	mov	r4, r0
   3016a:	b928      	cbnz	r0, 30178 <bt_le_set_auto_conn+0x44>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   3016c:	4631      	mov	r1, r6
   3016e:	f7ff fe9b 	bl	2fea8 <bt_conn_add_le>
		if (!conn) {
   30172:	4604      	mov	r4, r0
   30174:	2800      	cmp	r0, #0
   30176:	d04e      	beq.n	30216 <bt_le_set_auto_conn+0xe2>
	if (param) {
   30178:	1d23      	adds	r3, r4, #4
   3017a:	b385      	cbz	r5, 301de <bt_le_set_auto_conn+0xaa>
	conn->le.interval_min = param->interval_min;
   3017c:	882a      	ldrh	r2, [r5, #0]
   3017e:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   30182:	886a      	ldrh	r2, [r5, #2]
   30184:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   30188:	88aa      	ldrh	r2, [r5, #4]
   3018a:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   3018e:	88ea      	ldrh	r2, [r5, #6]
   30190:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   30194:	f3bf 8f5b 	dmb	ish
   30198:	e853 2f00 	ldrex	r2, [r3]
   3019c:	f042 0101 	orr.w	r1, r2, #1
   301a0:	e843 1000 	strex	r0, r1, [r3]
   301a4:	2800      	cmp	r0, #0
   301a6:	d1f7      	bne.n	30198 <bt_le_set_auto_conn+0x64>
   301a8:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
   301ac:	07d2      	lsls	r2, r2, #31
   301ae:	d402      	bmi.n	301b6 <bt_le_set_auto_conn+0x82>
			bt_conn_ref(conn);
   301b0:	4620      	mov	r0, r4
   301b2:	f01d f82a 	bl	4d20a <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   301b6:	7b63      	ldrb	r3, [r4, #13]
   301b8:	b963      	cbnz	r3, 301d4 <bt_le_set_auto_conn+0xa0>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   301ba:	2101      	movs	r1, #1
   301bc:	4817      	ldr	r0, [pc, #92]	; (3021c <bt_le_set_auto_conn+0xe8>)
   301be:	f01c ffa4 	bl	4d10a <atomic_test_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   301c2:	b138      	cbz	r0, 301d4 <bt_le_set_auto_conn+0xa0>
		if (param) {
   301c4:	b11d      	cbz	r5, 301ce <bt_le_set_auto_conn+0x9a>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   301c6:	2102      	movs	r1, #2
   301c8:	4620      	mov	r0, r4
   301ca:	f7ff fc73 	bl	2fab4 <bt_conn_set_state>
		bt_le_scan_update(false);
   301ce:	2000      	movs	r0, #0
   301d0:	f7ff f80e 	bl	2f1f0 <bt_le_scan_update>
	bt_conn_unref(conn);
   301d4:	4620      	mov	r0, r4
   301d6:	f01d f81a 	bl	4d20e <bt_conn_unref>
	return 0;
   301da:	2000      	movs	r0, #0
   301dc:	e7b9      	b.n	30152 <bt_le_set_auto_conn+0x1e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   301de:	f3bf 8f5b 	dmb	ish
   301e2:	e853 2f00 	ldrex	r2, [r3]
   301e6:	f022 0101 	bic.w	r1, r2, #1
   301ea:	e843 1000 	strex	r0, r1, [r3]
   301ee:	2800      	cmp	r0, #0
   301f0:	d1f7      	bne.n	301e2 <bt_le_set_auto_conn+0xae>
   301f2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
   301f6:	07d3      	lsls	r3, r2, #31
   301f8:	d5dd      	bpl.n	301b6 <bt_le_set_auto_conn+0x82>
			bt_conn_unref(conn);
   301fa:	4620      	mov	r0, r4
   301fc:	f01d f807 	bl	4d20e <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   30200:	7b63      	ldrb	r3, [r4, #13]
   30202:	2b02      	cmp	r3, #2
   30204:	d1d7      	bne.n	301b6 <bt_le_set_auto_conn+0x82>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   30206:	4629      	mov	r1, r5
   30208:	4620      	mov	r0, r4
   3020a:	f7ff fc53 	bl	2fab4 <bt_conn_set_state>
   3020e:	e7d2      	b.n	301b6 <bt_le_set_auto_conn+0x82>
		return -EAGAIN;
   30210:	f06f 000a 	mvn.w	r0, #10
   30214:	e79d      	b.n	30152 <bt_le_set_auto_conn+0x1e>
			return -ENOMEM;
   30216:	f06f 000b 	mvn.w	r0, #11
   3021a:	e79a      	b.n	30152 <bt_le_set_auto_conn+0x1e>
   3021c:	200000cc 	.word	0x200000cc

00030220 <send_conn_le_param_update>:
{
   30220:	b538      	push	{r3, r4, r5, lr}
   30222:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   30224:	4608      	mov	r0, r1
{
   30226:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   30228:	f01c fc6c 	bl	4cb04 <bt_le_conn_params_valid>
   3022c:	b340      	cbz	r0, 30280 <send_conn_le_param_update+0x60>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   3022e:	4b16      	ldr	r3, [pc, #88]	; (30288 <send_conn_le_param_update+0x68>)
   30230:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   30234:	079a      	lsls	r2, r3, #30
   30236:	d407      	bmi.n	30248 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   30238:	78e3      	ldrb	r3, [r4, #3]
   3023a:	b17b      	cbz	r3, 3025c <send_conn_le_param_update+0x3c>
	return bt_l2cap_update_conn_param(conn, param);
   3023c:	4629      	mov	r1, r5
   3023e:	4620      	mov	r0, r4
}
   30240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   30244:	f000 b9fa 	b.w	3063c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   30248:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   3024c:	079b      	lsls	r3, r3, #30
   3024e:	d5f3      	bpl.n	30238 <send_conn_le_param_update+0x18>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   30250:	210a      	movs	r1, #10
   30252:	1d20      	adds	r0, r4, #4
   30254:	f01c ff59 	bl	4d10a <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   30258:	2800      	cmp	r0, #0
   3025a:	d1ed      	bne.n	30238 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   3025c:	4629      	mov	r1, r5
   3025e:	4620      	mov	r0, r4
   30260:	f01d f910 	bl	4d484 <bt_conn_le_conn_update>
		if (rc == 0) {
   30264:	b958      	cbnz	r0, 3027e <send_conn_le_param_update+0x5e>
			conn->le.interval_min = param->interval_min;
   30266:	882b      	ldrh	r3, [r5, #0]
   30268:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   3026c:	886b      	ldrh	r3, [r5, #2]
   3026e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   30272:	88ab      	ldrh	r3, [r5, #4]
   30274:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   30278:	88eb      	ldrh	r3, [r5, #6]
   3027a:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   3027e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   30280:	f06f 0015 	mvn.w	r0, #21
   30284:	e7fb      	b.n	3027e <send_conn_le_param_update+0x5e>
   30286:	bf00      	nop
   30288:	20000000 	.word	0x20000000

0003028c <deferred_work>:
{
   3028c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   3028e:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   30292:	b085      	sub	sp, #20
   30294:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   30296:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   3029a:	b9f3      	cbnz	r3, 302da <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
   3029c:	4628      	mov	r0, r5
   3029e:	f01d f975 	bl	4d58c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   302a2:	4b29      	ldr	r3, [pc, #164]	; (30348 <deferred_work+0xbc>)
   302a4:	681e      	ldr	r6, [r3, #0]
   302a6:	b946      	cbnz	r6, 302ba <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   302a8:	4e28      	ldr	r6, [pc, #160]	; (3034c <deferred_work+0xc0>)
   302aa:	4f29      	ldr	r7, [pc, #164]	; (30350 <deferred_work+0xc4>)
   302ac:	42be      	cmp	r6, r7
   302ae:	d30c      	bcc.n	302ca <deferred_work+0x3e>
		bt_conn_unref(conn);
   302b0:	4628      	mov	r0, r5
   302b2:	f01c ffac 	bl	4d20e <bt_conn_unref>
}
   302b6:	b005      	add	sp, #20
   302b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (cb->disconnected) {
   302ba:	6873      	ldr	r3, [r6, #4]
   302bc:	b11b      	cbz	r3, 302c6 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
   302be:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   302c2:	4628      	mov	r0, r5
   302c4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   302c6:	69f6      	ldr	r6, [r6, #28]
   302c8:	e7ed      	b.n	302a6 <deferred_work+0x1a>
		if (cb->disconnected) {
   302ca:	6873      	ldr	r3, [r6, #4]
   302cc:	b11b      	cbz	r3, 302d6 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
   302ce:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   302d2:	4628      	mov	r0, r5
   302d4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   302d6:	3620      	adds	r6, #32
   302d8:	e7e8      	b.n	302ac <deferred_work+0x20>
	if (conn->type != BT_CONN_TYPE_LE) {
   302da:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   302de:	2b01      	cmp	r3, #1
   302e0:	d1e9      	bne.n	302b6 <deferred_work+0x2a>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   302e2:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   302e6:	b913      	cbnz	r3, 302ee <deferred_work+0x62>
		bt_le_create_conn_cancel();
   302e8:	f7fd fdca 	bl	2de80 <bt_le_create_conn_cancel>
		return;
   302ec:	e7e3      	b.n	302b6 <deferred_work+0x2a>
	if (atomic_test_and_clear_bit(conn->flags,
   302ee:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   302f2:	f3bf 8f5b 	dmb	ish
   302f6:	e856 3f00 	ldrex	r3, [r6]
   302fa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   302fe:	e846 2100 	strex	r1, r2, [r6]
   30302:	2900      	cmp	r1, #0
   30304:	d1f7      	bne.n	302f6 <deferred_work+0x6a>
   30306:	f3bf 8f5b 	dmb	ish
   3030a:	059b      	lsls	r3, r3, #22
   3030c:	d514      	bpl.n	30338 <deferred_work+0xac>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   3030e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   30310:	9300      	str	r3, [sp, #0]
   30312:	6d23      	ldr	r3, [r4, #80]	; 0x50
   30314:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   30316:	4669      	mov	r1, sp
		send_conn_le_param_update(conn, param);
   30318:	4628      	mov	r0, r5
   3031a:	f7ff ff81 	bl	30220 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3031e:	f3bf 8f5b 	dmb	ish
   30322:	e856 3f00 	ldrex	r3, [r6]
   30326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   3032a:	e846 3200 	strex	r2, r3, [r6]
   3032e:	2a00      	cmp	r2, #0
   30330:	d1f7      	bne.n	30322 <deferred_work+0x96>
   30332:	f3bf 8f5b 	dmb	ish
   30336:	e7be      	b.n	302b6 <deferred_work+0x2a>
		param = BT_LE_CONN_PARAM(
   30338:	4a06      	ldr	r2, [pc, #24]	; (30354 <deferred_work+0xc8>)
   3033a:	6851      	ldr	r1, [r2, #4]
   3033c:	6810      	ldr	r0, [r2, #0]
   3033e:	ab02      	add	r3, sp, #8
   30340:	c303      	stmia	r3!, {r0, r1}
		send_conn_le_param_update(conn, param);
   30342:	a902      	add	r1, sp, #8
   30344:	e7e8      	b.n	30318 <deferred_work+0x8c>
   30346:	bf00      	nop
   30348:	20003ff8 	.word	0x20003ff8
   3034c:	00051c90 	.word	0x00051c90
   30350:	00051c90 	.word	0x00051c90
   30354:	00051e44 	.word	0x00051e44

00030358 <bt_conn_create_frag_timeout>:

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   30358:	4601      	mov	r1, r0
   3035a:	4801      	ldr	r0, [pc, #4]	; (30360 <bt_conn_create_frag_timeout+0x8>)
   3035c:	f7ff bc92 	b.w	2fc84 <bt_conn_create_pdu_timeout>
   30360:	200010fc 	.word	0x200010fc

00030364 <create_frag.isra.16>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   30364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30368:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   3036a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3036e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   30372:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   30374:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   30376:	f7ff ffef 	bl	30358 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   3037a:	7833      	ldrb	r3, [r6, #0]
   3037c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   3037e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   30380:	f04f 0600 	mov.w	r6, #0
   30384:	d005      	beq.n	30392 <create_frag.isra.16+0x2e>
		net_buf_unref(frag);
   30386:	f013 fe6f 	bl	44068 <net_buf_unref>
		return NULL;
   3038a:	4635      	mov	r5, r6
}
   3038c:	4628      	mov	r0, r5
   3038e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   30392:	6146      	str	r6, [r0, #20]
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   30394:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   30398:	4e0c      	ldr	r6, [pc, #48]	; (303cc <create_frag.isra.16+0x68>)
   3039a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   3039c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   303a0:	f01f ff46 	bl	50230 <net_buf_simple_tailroom>
   303a4:	4580      	cmp	r8, r0
   303a6:	d20c      	bcs.n	303c2 <create_frag.isra.16+0x5e>
	return bt_dev.le.acl_mtu;
   303a8:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   303ac:	f854 1f08 	ldr.w	r1, [r4, #8]!
   303b0:	4632      	mov	r2, r6
   303b2:	4638      	mov	r0, r7
   303b4:	f01f fef5 	bl	501a2 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   303b8:	4631      	mov	r1, r6
   303ba:	4620      	mov	r0, r4
   303bc:	f01f ff14 	bl	501e8 <net_buf_simple_pull>
   303c0:	e7e4      	b.n	3038c <create_frag.isra.16+0x28>
	return net_buf_simple_tailroom(&buf->b);
   303c2:	4638      	mov	r0, r7
   303c4:	f01f ff34 	bl	50230 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   303c8:	b286      	uxth	r6, r0
   303ca:	e7ef      	b.n	303ac <create_frag.isra.16+0x48>
   303cc:	20000000 	.word	0x20000000

000303d0 <bt_conn_process_tx>:
{
   303d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   303d2:	7b43      	ldrb	r3, [r0, #13]
{
   303d4:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   303d6:	b993      	cbnz	r3, 303fe <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   303d8:	f3bf 8f5b 	dmb	ish
   303dc:	1d03      	adds	r3, r0, #4
   303de:	e853 2f00 	ldrex	r2, [r3]
   303e2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   303e6:	e843 1400 	strex	r4, r1, [r3]
   303ea:	2c00      	cmp	r4, #0
   303ec:	d1f7      	bne.n	303de <bt_conn_process_tx+0xe>
   303ee:	f3bf 8f5b 	dmb	ish
   303f2:	0653      	lsls	r3, r2, #25
   303f4:	d503      	bpl.n	303fe <bt_conn_process_tx+0x2e>
}
   303f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   303fa:	f01c be98 	b.w	4d12e <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   303fe:	2200      	movs	r2, #0
   30400:	2300      	movs	r3, #0
   30402:	f105 0038 	add.w	r0, r5, #56	; 0x38
   30406:	f01f fe65 	bl	500d4 <net_buf_get>
	BT_ASSERT(buf);
   3040a:	4604      	mov	r4, r0
   3040c:	b960      	cbnz	r0, 30428 <bt_conn_process_tx+0x58>
   3040e:	f240 23e7 	movw	r3, #743	; 0x2e7
   30412:	4a1f      	ldr	r2, [pc, #124]	; (30490 <bt_conn_process_tx+0xc0>)
   30414:	491f      	ldr	r1, [pc, #124]	; (30494 <bt_conn_process_tx+0xc4>)
   30416:	4820      	ldr	r0, [pc, #128]	; (30498 <bt_conn_process_tx+0xc8>)
   30418:	f019 fe60 	bl	4a0dc <printk>
   3041c:	4040      	eors	r0, r0
   3041e:	f380 8811 	msr	BASEPRI, r0
   30422:	f04f 0003 	mov.w	r0, #3
   30426:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   30428:	4e1c      	ldr	r6, [pc, #112]	; (3049c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   3042a:	89a1      	ldrh	r1, [r4, #12]
   3042c:	f8b6 20fc 	ldrh.w	r2, [r6, #252]	; 0xfc
   30430:	4291      	cmp	r1, r2
   30432:	d807      	bhi.n	30444 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   30434:	2300      	movs	r3, #0
   30436:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   30438:	4621      	mov	r1, r4
   3043a:	4628      	mov	r0, r5
   3043c:	f7ff fa1c 	bl	2f878 <send_frag>
	if (!send_buf(conn, buf)) {
   30440:	b140      	cbz	r0, 30454 <bt_conn_process_tx+0x84>
}
   30442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   30444:	f105 070d 	add.w	r7, r5, #13
   30448:	4621      	mov	r1, r4
   3044a:	4638      	mov	r0, r7
   3044c:	f7ff ff8a 	bl	30364 <create_frag.isra.16>
	if (!frag) {
   30450:	4601      	mov	r1, r0
   30452:	b920      	cbnz	r0, 3045e <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   30454:	4620      	mov	r0, r4
}
   30456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   3045a:	f013 be05 	b.w	44068 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   3045e:	2301      	movs	r3, #1
   30460:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   30462:	4628      	mov	r0, r5
   30464:	f7ff fa08 	bl	2f878 <send_frag>
   30468:	2800      	cmp	r0, #0
   3046a:	d0f3      	beq.n	30454 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   3046c:	89a2      	ldrh	r2, [r4, #12]
   3046e:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   30472:	429a      	cmp	r2, r3
   30474:	d802      	bhi.n	3047c <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   30476:	2300      	movs	r3, #0
   30478:	2203      	movs	r2, #3
   3047a:	e7dd      	b.n	30438 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   3047c:	4621      	mov	r1, r4
   3047e:	4638      	mov	r0, r7
   30480:	f7ff ff70 	bl	30364 <create_frag.isra.16>
		if (!frag) {
   30484:	4601      	mov	r1, r0
   30486:	2800      	cmp	r0, #0
   30488:	d0e4      	beq.n	30454 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   3048a:	2301      	movs	r3, #1
   3048c:	461a      	mov	r2, r3
   3048e:	e7e8      	b.n	30462 <bt_conn_process_tx+0x92>
   30490:	0005448b 	.word	0x0005448b
   30494:	00054442 	.word	0x00054442
   30498:	00054425 	.word	0x00054425
   3049c:	20000000 	.word	0x20000000

000304a0 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   304a0:	4b0c      	ldr	r3, [pc, #48]	; (304d4 <bt_conn_auth_cb_register+0x34>)
   304a2:	b908      	cbnz	r0, 304a8 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   304a4:	6018      	str	r0, [r3, #0]
		return 0;
   304a6:	4770      	bx	lr
	}

	if (bt_auth) {
   304a8:	681a      	ldr	r2, [r3, #0]
   304aa:	b962      	cbnz	r2, 304c6 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   304ac:	6942      	ldr	r2, [r0, #20]
   304ae:	b93a      	cbnz	r2, 304c0 <bt_conn_auth_cb_register+0x20>
   304b0:	6842      	ldr	r2, [r0, #4]
   304b2:	b95a      	cbnz	r2, 304cc <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   304b4:	6882      	ldr	r2, [r0, #8]
   304b6:	b94a      	cbnz	r2, 304cc <bt_conn_auth_cb_register+0x2c>
   304b8:	68c2      	ldr	r2, [r0, #12]
   304ba:	b93a      	cbnz	r2, 304cc <bt_conn_auth_cb_register+0x2c>
   304bc:	6982      	ldr	r2, [r0, #24]
   304be:	b92a      	cbnz	r2, 304cc <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   304c0:	6018      	str	r0, [r3, #0]
	return 0;
   304c2:	2000      	movs	r0, #0
   304c4:	4770      	bx	lr
		return -EALREADY;
   304c6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   304ca:	4770      	bx	lr
		return -EINVAL;
   304cc:	f06f 0015 	mvn.w	r0, #21
}
   304d0:	4770      	bx	lr
   304d2:	bf00      	nop
   304d4:	20003ff4 	.word	0x20003ff4

000304d8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   304d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   304dc:	4918      	ldr	r1, [pc, #96]	; (30540 <bt_conn_init+0x68>)
   304de:	4819      	ldr	r0, [pc, #100]	; (30544 <bt_conn_init+0x6c>)
   304e0:	f020 fd74 	bl	50fcc <k_queue_append>
   304e4:	4918      	ldr	r1, [pc, #96]	; (30548 <bt_conn_init+0x70>)
   304e6:	4817      	ldr	r0, [pc, #92]	; (30544 <bt_conn_init+0x6c>)
   304e8:	f020 fd70 	bl	50fcc <k_queue_append>
   304ec:	4917      	ldr	r1, [pc, #92]	; (3054c <bt_conn_init+0x74>)
   304ee:	4815      	ldr	r0, [pc, #84]	; (30544 <bt_conn_init+0x6c>)
   304f0:	f020 fd6c 	bl	50fcc <k_queue_append>
	}

	bt_att_init();
   304f4:	f01d fd80 	bl	4dff8 <bt_att_init>

	err = bt_smp_init();
   304f8:	f003 fb02 	bl	33b00 <bt_smp_init>
	if (err) {
   304fc:	4605      	mov	r5, r0
   304fe:	b9e0      	cbnz	r0, 3053a <bt_conn_init+0x62>
		return err;
	}

	bt_l2cap_init();
   30500:	f01d f940 	bl	4d784 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   30504:	4f12      	ldr	r7, [pc, #72]	; (30550 <bt_conn_init+0x78>)
   30506:	462e      	mov	r6, r5
			if (!conn) {
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   30508:	46a8      	mov	r8, r5
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   3050a:	4638      	mov	r0, r7
   3050c:	f01c fde2 	bl	4d0d4 <bt_conn_ref.part.12>
			if (!conn) {
   30510:	4604      	mov	r4, r0
   30512:	b168      	cbz	r0, 30530 <bt_conn_init+0x58>
			if (atomic_test_bit(conn->flags,
   30514:	2100      	movs	r1, #0
   30516:	3004      	adds	r0, #4
   30518:	f01c fdf7 	bl	4d10a <atomic_test_bit>
   3051c:	b128      	cbz	r0, 3052a <bt_conn_init+0x52>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   3051e:	f884 8008 	strb.w	r8, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   30522:	2102      	movs	r1, #2
   30524:	4620      	mov	r0, r4
   30526:	f7ff fac5 	bl	2fab4 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   3052a:	4620      	mov	r0, r4
   3052c:	f01c fe6f 	bl	4d20e <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   30530:	3601      	adds	r6, #1
   30532:	2e06      	cmp	r6, #6
   30534:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   30538:	d1e7      	bne.n	3050a <bt_conn_init+0x32>
		}
	}

	return 0;
}
   3053a:	4628      	mov	r0, r5
   3053c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30540:	20003ffc 	.word	0x20003ffc
   30544:	2000105c 	.word	0x2000105c
   30548:	2000400c 	.word	0x2000400c
   3054c:	2000401c 	.word	0x2000401c
   30550:	20001530 	.word	0x20001530

00030554 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   30554:	4b09      	ldr	r3, [pc, #36]	; (3057c <l2cap_accept+0x28>)
{
   30556:	b530      	push	{r4, r5, lr}
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   30558:	2200      	movs	r2, #0
   3055a:	25e8      	movs	r5, #232	; 0xe8
		if (l2cap->chan.chan.conn) {
   3055c:	fb05 f402 	mul.w	r4, r5, r2
   30560:	58e0      	ldr	r0, [r4, r3]
   30562:	b128      	cbz	r0, 30570 <l2cap_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   30564:	3201      	adds	r2, #1
   30566:	2a06      	cmp	r2, #6
   30568:	d1f8      	bne.n	3055c <l2cap_accept+0x8>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
   3056a:	f06f 000b 	mvn.w	r0, #11
}
   3056e:	bd30      	pop	{r4, r5, pc}
		l2cap->chan.chan.ops = &ops;
   30570:	4423      	add	r3, r4
   30572:	4a03      	ldr	r2, [pc, #12]	; (30580 <l2cap_accept+0x2c>)
   30574:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   30576:	600b      	str	r3, [r1, #0]
		return 0;
   30578:	e7f9      	b.n	3056e <l2cap_accept+0x1a>
   3057a:	bf00      	nop
   3057c:	200019b0 	.word	0x200019b0
   30580:	00052a30 	.word	0x00052a30

00030584 <bt_l2cap_connected>:
{
   30584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   30588:	4d29      	ldr	r5, [pc, #164]	; (30630 <bt_l2cap_connected+0xac>)
   3058a:	4f2a      	ldr	r7, [pc, #168]	; (30634 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   3058c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 30638 <bt_l2cap_connected+0xb4>
{
   30590:	4606      	mov	r6, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   30592:	42bd      	cmp	r5, r7
   30594:	d302      	bcc.n	3059c <bt_l2cap_connected+0x18>
}
   30596:	b003      	add	sp, #12
   30598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   3059c:	686b      	ldr	r3, [r5, #4]
   3059e:	a901      	add	r1, sp, #4
   305a0:	4630      	mov	r0, r6
   305a2:	4798      	blx	r3
   305a4:	2800      	cmp	r0, #0
   305a6:	db3d      	blt.n	30624 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   305a8:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   305aa:	882b      	ldrh	r3, [r5, #0]
   305ac:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   305b0:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   305b4:	4641      	mov	r1, r8
   305b6:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   305ba:	f8d5 9008 	ldr.w	r9, [r5, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   305be:	f020 fdfc 	bl	511ba <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   305c2:	f3bf 8f5b 	dmb	ish
   305c6:	f104 0368 	add.w	r3, r4, #104	; 0x68
   305ca:	2200      	movs	r2, #0
   305cc:	e853 1f00 	ldrex	r1, [r3]
   305d0:	e843 2000 	strex	r0, r2, [r3]
   305d4:	2800      	cmp	r0, #0
   305d6:	d1f9      	bne.n	305cc <bt_l2cap_connected+0x48>
   305d8:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   305dc:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
   305de:	6d72      	ldr	r2, [r6, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   305e0:	f104 0308 	add.w	r3, r4, #8
   305e4:	bb02      	cbnz	r2, 30628 <bt_l2cap_connected+0xa4>
	list->head = node;
   305e6:	e9c6 3314 	strd	r3, r3, [r6, #80]	; 0x50
		if (chan->ops->connected) {
   305ea:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   305ec:	6026      	str	r6, [r4, #0]
		if (chan->ops->connected) {
   305ee:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   305f0:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   305f4:	681b      	ldr	r3, [r3, #0]
   305f6:	b103      	cbz	r3, 305fa <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   305f8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   305fa:	9b01      	ldr	r3, [sp, #4]
   305fc:	f3bf 8f5b 	dmb	ish
   30600:	3368      	adds	r3, #104	; 0x68
   30602:	e853 2f00 	ldrex	r2, [r3]
   30606:	f042 0201 	orr.w	r2, r2, #1
   3060a:	e843 2100 	strex	r1, r2, [r3]
   3060e:	2900      	cmp	r1, #0
   30610:	d1f7      	bne.n	30602 <bt_l2cap_connected+0x7e>
   30612:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   30616:	9801      	ldr	r0, [sp, #4]
   30618:	6843      	ldr	r3, [r0, #4]
   3061a:	699b      	ldr	r3, [r3, #24]
   3061c:	b113      	cbz	r3, 30624 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   3061e:	f100 0168 	add.w	r1, r0, #104	; 0x68
   30622:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   30624:	350c      	adds	r5, #12
   30626:	e7b4      	b.n	30592 <bt_l2cap_connected+0xe>
	parent->next = child;
   30628:	6013      	str	r3, [r2, #0]
	list->tail = node;
   3062a:	6573      	str	r3, [r6, #84]	; 0x54
   3062c:	e7dd      	b.n	305ea <bt_l2cap_connected+0x66>
   3062e:	bf00      	nop
   30630:	00051c6c 	.word	0x00051c6c
   30634:	00051c90 	.word	0x00051c90
   30638:	0004d573 	.word	0x0004d573

0003063c <bt_l2cap_update_conn_param>:
{
   3063c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   3063e:	4b17      	ldr	r3, [pc, #92]	; (3069c <bt_l2cap_update_conn_param+0x60>)
   30640:	781a      	ldrb	r2, [r3, #0]
   30642:	3201      	adds	r2, #1
	if (!ident) {
   30644:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   30648:	bf08      	it	eq
   3064a:	2201      	moveq	r2, #1
   3064c:	701a      	strb	r2, [r3, #0]
{
   3064e:	4605      	mov	r5, r0
   30650:	460e      	mov	r6, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   30652:	2208      	movs	r2, #8
   30654:	7819      	ldrb	r1, [r3, #0]
   30656:	2012      	movs	r0, #18
   30658:	f01c ff40 	bl	4d4dc <l2cap_create_le_sig_pdu.isra.9>
	if (!buf) {
   3065c:	4604      	mov	r4, r0
   3065e:	b1d0      	cbz	r0, 30696 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   30660:	2108      	movs	r1, #8
   30662:	4408      	add	r0, r1
   30664:	f01f fd97 	bl	50196 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   30668:	8833      	ldrh	r3, [r6, #0]
   3066a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   3066c:	8873      	ldrh	r3, [r6, #2]
   3066e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   30670:	88b3      	ldrh	r3, [r6, #4]
   30672:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   30674:	88f3      	ldrh	r3, [r6, #6]
   30676:	80c3      	strh	r3, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   30678:	2300      	movs	r3, #0
   3067a:	4628      	mov	r0, r5
   3067c:	9300      	str	r3, [sp, #0]
   3067e:	4622      	mov	r2, r4
   30680:	2105      	movs	r1, #5
   30682:	f01c ffb0 	bl	4d5e6 <bt_l2cap_send_cb>
	if (err) {
   30686:	4605      	mov	r5, r0
   30688:	b110      	cbz	r0, 30690 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   3068a:	4620      	mov	r0, r4
   3068c:	f013 fcec 	bl	44068 <net_buf_unref>
}
   30690:	4628      	mov	r0, r5
   30692:	b002      	add	sp, #8
   30694:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   30696:	f06f 050b 	mvn.w	r5, #11
   3069a:	e7f9      	b.n	30690 <bt_l2cap_update_conn_param+0x54>
   3069c:	20006d92 	.word	0x20006d92

000306a0 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   306a0:	4b02      	ldr	r3, [pc, #8]	; (306ac <att_cfm_sent+0xc>)
   306a2:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   306a6:	f01d b89b 	b.w	4d7e0 <att_sent>
   306aa:	bf00      	nop
   306ac:	0004dd99 	.word	0x0004dd99

000306b0 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   306b0:	4b02      	ldr	r3, [pc, #8]	; (306bc <att_rsp_sent+0xc>)
   306b2:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   306b6:	f01d b893 	b.w	4d7e0 <att_sent>
   306ba:	bf00      	nop
   306bc:	0004dd7d 	.word	0x0004dd7d

000306c0 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   306c0:	4b02      	ldr	r3, [pc, #8]	; (306cc <att_req_sent+0xc>)
   306c2:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   306c6:	f01d b88b 	b.w	4d7e0 <att_sent>
   306ca:	bf00      	nop
   306cc:	0004dd63 	.word	0x0004dd63

000306d0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   306d0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   306d2:	3808      	subs	r0, #8
   306d4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   306d6:	a901      	add	r1, sp, #4
   306d8:	4802      	ldr	r0, [pc, #8]	; (306e4 <bt_att_released+0x14>)
   306da:	f020 fbb9 	bl	50e50 <k_mem_slab_free>
}
   306de:	b003      	add	sp, #12
   306e0:	f85d fb04 	ldr.w	pc, [sp], #4
   306e4:	20000e7c 	.word	0x20000e7c

000306e8 <chan_send>:
{
   306e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   306ec:	688b      	ldr	r3, [r1, #8]
   306ee:	781b      	ldrb	r3, [r3, #0]
   306f0:	2bd2      	cmp	r3, #210	; 0xd2
{
   306f2:	4605      	mov	r5, r0
   306f4:	460c      	mov	r4, r1
   306f6:	4616      	mov	r6, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   306f8:	d10c      	bne.n	30714 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
   306fa:	6803      	ldr	r3, [r0, #0]
   306fc:	6818      	ldr	r0, [r3, #0]
   306fe:	f01f fa21 	bl	4fb44 <bt_smp_sign>
		if (err) {
   30702:	4681      	mov	r9, r0
   30704:	b130      	cbz	r0, 30714 <chan_send+0x2c>
			net_buf_unref(buf);
   30706:	4620      	mov	r0, r4
   30708:	f013 fcae 	bl	44068 <net_buf_unref>
}
   3070c:	4648      	mov	r0, r9
   3070e:	b003      	add	sp, #12
   30710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   30714:	f104 0008 	add.w	r0, r4, #8
   30718:	f01f fd86 	bl	50228 <net_buf_simple_headroom>
	state->len = buf->len;
   3071c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   30720:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   30722:	b956      	cbnz	r6, 3073a <chan_send+0x52>
	switch (att_op_get_type(buf->data[0])) {
   30724:	68a3      	ldr	r3, [r4, #8]
   30726:	7818      	ldrb	r0, [r3, #0]
   30728:	f01d f872 	bl	4d810 <att_op_get_type>
   3072c:	3801      	subs	r0, #1
   3072e:	b2c0      	uxtb	r0, r0
   30730:	2804      	cmp	r0, #4
   30732:	bf9c      	itt	ls
   30734:	4b13      	ldrls	r3, [pc, #76]	; (30784 <chan_send+0x9c>)
   30736:	f853 6020 	ldrls.w	r6, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   3073a:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   3073c:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   30740:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   30742:	4b11      	ldr	r3, [pc, #68]	; (30788 <chan_send+0xa0>)
   30744:	429e      	cmp	r6, r3
   30746:	d018      	beq.n	3077a <chan_send+0x92>
	} else if (cb == chan_cfm_sent) {
   30748:	4b10      	ldr	r3, [pc, #64]	; (3078c <chan_send+0xa4>)
   3074a:	429e      	cmp	r6, r3
   3074c:	d017      	beq.n	3077e <chan_send+0x96>
		return att_sent;
   3074e:	4910      	ldr	r1, [pc, #64]	; (30790 <chan_send+0xa8>)
   30750:	4b10      	ldr	r3, [pc, #64]	; (30794 <chan_send+0xac>)
   30752:	4a11      	ldr	r2, [pc, #68]	; (30798 <chan_send+0xb0>)
   30754:	428e      	cmp	r6, r1
   30756:	bf18      	it	ne
   30758:	4613      	movne	r3, r2
			       &chan->chan.chan);
   3075a:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   3075c:	9500      	str	r5, [sp, #0]
   3075e:	4622      	mov	r2, r4
   30760:	2104      	movs	r1, #4
   30762:	f01c ff40 	bl	4d5e6 <bt_l2cap_send_cb>
	if (err) {
   30766:	4681      	mov	r9, r0
   30768:	2800      	cmp	r0, #0
   3076a:	d0cf      	beq.n	3070c <chan_send+0x24>
	buf->data = buf->__buf + state->offset;
   3076c:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   3076e:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   30772:	fa13 f787 	uxtah	r7, r3, r7
   30776:	60a7      	str	r7, [r4, #8]
	buf->len = state->len;
   30778:	e7c8      	b.n	3070c <chan_send+0x24>
		return att_rsp_sent;
   3077a:	4b08      	ldr	r3, [pc, #32]	; (3079c <chan_send+0xb4>)
   3077c:	e7ed      	b.n	3075a <chan_send+0x72>
		return att_cfm_sent;
   3077e:	4b08      	ldr	r3, [pc, #32]	; (307a0 <chan_send+0xb8>)
   30780:	e7eb      	b.n	3075a <chan_send+0x72>
   30782:	bf00      	nop
   30784:	00052a54 	.word	0x00052a54
   30788:	0004dd7d 	.word	0x0004dd7d
   3078c:	0004dd99 	.word	0x0004dd99
   30790:	0004dd63 	.word	0x0004dd63
   30794:	000306c1 	.word	0x000306c1
   30798:	0004d7e1 	.word	0x0004d7e1
   3079c:	000306b1 	.word	0x000306b1
   307a0:	000306a1 	.word	0x000306a1

000307a4 <read_group_cb>:
{
   307a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   307a8:	4606      	mov	r6, r0
   307aa:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   307ac:	f04f 0800 	mov.w	r8, #0
   307b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   307b4:	a902      	add	r1, sp, #8
   307b6:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   307b8:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   307ba:	f88d 8008 	strb.w	r8, [sp, #8]
{
   307be:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   307c0:	f8ad 300a 	strh.w	r3, [sp, #10]
   307c4:	f01b fe81 	bl	4c4ca <bt_uuid_cmp>
   307c8:	b190      	cbz	r0, 307f0 <read_group_cb+0x4c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   307ca:	f642 0301 	movw	r3, #10241	; 0x2801
   307ce:	a903      	add	r1, sp, #12
   307d0:	6830      	ldr	r0, [r6, #0]
   307d2:	f88d 800c 	strb.w	r8, [sp, #12]
   307d6:	f8ad 300e 	strh.w	r3, [sp, #14]
   307da:	f01b fe76 	bl	4c4ca <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   307de:	b138      	cbz	r0, 307f0 <read_group_cb+0x4c>
		if (data->group &&
   307e0:	6923      	ldr	r3, [r4, #16]
   307e2:	b11b      	cbz	r3, 307ec <read_group_cb+0x48>
   307e4:	885a      	ldrh	r2, [r3, #2]
   307e6:	42aa      	cmp	r2, r5
   307e8:	d200      	bcs.n	307ec <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   307ea:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   307ec:	2001      	movs	r0, #1
   307ee:	e012      	b.n	30816 <read_group_cb+0x72>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   307f0:	6861      	ldr	r1, [r4, #4]
   307f2:	6830      	ldr	r0, [r6, #0]
   307f4:	f01b fe69 	bl	4c4ca <bt_uuid_cmp>
   307f8:	b110      	cbz	r0, 30800 <read_group_cb+0x5c>
		data->group = NULL;
   307fa:	2300      	movs	r3, #0
   307fc:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   307fe:	e7f5      	b.n	307ec <read_group_cb+0x48>
	if (data->rsp->len &&
   30800:	68e3      	ldr	r3, [r4, #12]
   30802:	68a0      	ldr	r0, [r4, #8]
   30804:	781a      	ldrb	r2, [r3, #0]
   30806:	b14a      	cbz	r2, 3081c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   30808:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   3080c:	8981      	ldrh	r1, [r0, #12]
   3080e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   30810:	4293      	cmp	r3, r2
   30812:	da03      	bge.n	3081c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   30814:	2000      	movs	r0, #0
}
   30816:	b004      	add	sp, #16
   30818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   3081c:	2104      	movs	r1, #4
   3081e:	3008      	adds	r0, #8
   30820:	f01f fcb9 	bl	50196 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   30824:	4b09      	ldr	r3, [pc, #36]	; (3084c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   30826:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   30828:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   3082a:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   3082c:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   3082e:	4631      	mov	r1, r6
   30830:	9300      	str	r3, [sp, #0]
   30832:	9401      	str	r4, [sp, #4]
   30834:	2300      	movs	r3, #0
   30836:	4638      	mov	r0, r7
   30838:	f01d f902 	bl	4da40 <att_chan_read>
	if (read < 0) {
   3083c:	2800      	cmp	r0, #0
   3083e:	dbe9      	blt.n	30814 <read_group_cb+0x70>
	if (!data->group) {
   30840:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   30842:	3000      	adds	r0, #0
   30844:	bf18      	it	ne
   30846:	2001      	movne	r0, #1
   30848:	e7e5      	b.n	30816 <read_group_cb+0x72>
   3084a:	bf00      	nop
   3084c:	0004dd19 	.word	0x0004dd19

00030850 <read_type_cb>:
{
   30850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   30854:	6816      	ldr	r6, [r2, #0]
{
   30856:	4607      	mov	r7, r0
   30858:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   3085a:	6800      	ldr	r0, [r0, #0]
   3085c:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   3085e:	68b5      	ldr	r5, [r6, #8]
{
   30860:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   30862:	f01b fe32 	bl	4c4ca <bt_uuid_cmp>
   30866:	4680      	mov	r8, r0
   30868:	2800      	cmp	r0, #0
   3086a:	d13f      	bne.n	308ec <read_type_cb+0x9c>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   3086c:	4628      	mov	r0, r5
   3086e:	2215      	movs	r2, #21
   30870:	4639      	mov	r1, r7
   30872:	f01e f94b 	bl	4eb0c <bt_gatt_check_perm>
   30876:	4605      	mov	r5, r0
   30878:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   3087a:	b150      	cbz	r0, 30892 <read_type_cb+0x42>
		if (data->rsp->len) {
   3087c:	68e3      	ldr	r3, [r4, #12]
   3087e:	781b      	ldrb	r3, [r3, #0]
   30880:	b923      	cbnz	r3, 3088c <read_type_cb+0x3c>
		return BT_GATT_ITER_STOP;
   30882:	2500      	movs	r5, #0
}
   30884:	4628      	mov	r0, r5
   30886:	b003      	add	sp, #12
   30888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   3088c:	f884 8014 	strb.w	r8, [r4, #20]
   30890:	e7f7      	b.n	30882 <read_type_cb+0x32>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   30892:	68a0      	ldr	r0, [r4, #8]
   30894:	f01f fc53 	bl	5013e <net_buf_frag_last>
   30898:	2102      	movs	r1, #2
   3089a:	3008      	adds	r0, #8
   3089c:	f01f fc7b 	bl	50196 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   308a0:	4b13      	ldr	r3, [pc, #76]	; (308f0 <read_type_cb+0xa0>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   308a2:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   308a4:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   308a6:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   308aa:	4639      	mov	r1, r7
   308ac:	9300      	str	r3, [sp, #0]
   308ae:	9401      	str	r4, [sp, #4]
   308b0:	462b      	mov	r3, r5
   308b2:	4630      	mov	r0, r6
   308b4:	f01d f8c4 	bl	4da40 <att_chan_read>
	if (read < 0) {
   308b8:	2800      	cmp	r0, #0
   308ba:	da07      	bge.n	308cc <read_type_cb+0x7c>
	if (err < 0 && err >= -0xff) {
   308bc:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   308c0:	bf26      	itte	cs
   308c2:	4240      	negcs	r0, r0
   308c4:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   308c6:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   308c8:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   308ca:	e7db      	b.n	30884 <read_type_cb+0x34>
	if (!data->item) {
   308cc:	6923      	ldr	r3, [r4, #16]
   308ce:	2b00      	cmp	r3, #0
   308d0:	d0d7      	beq.n	30882 <read_type_cb+0x32>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   308d2:	68a0      	ldr	r0, [r4, #8]
   308d4:	f01c ff7c 	bl	4d7d0 <net_buf_frags_len>
   308d8:	f8b6 508a 	ldrh.w	r5, [r6, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   308dc:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   308de:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   308e0:	7818      	ldrb	r0, [r3, #0]
   308e2:	4285      	cmp	r5, r0
   308e4:	bf94      	ite	ls
   308e6:	2500      	movls	r5, #0
   308e8:	2501      	movhi	r5, #1
   308ea:	e7cb      	b.n	30884 <read_type_cb+0x34>
		return BT_GATT_ITER_CONTINUE;
   308ec:	2501      	movs	r5, #1
   308ee:	e7c9      	b.n	30884 <read_type_cb+0x34>
   308f0:	0004d7ed 	.word	0x0004d7ed

000308f4 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   308f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   308f6:	2300      	movs	r3, #0
{
   308f8:	4607      	mov	r7, r0
   308fa:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   308fc:	2200      	movs	r2, #0
   308fe:	4669      	mov	r1, sp
   30900:	481d      	ldr	r0, [pc, #116]	; (30978 <bt_att_accept+0x84>)
   30902:	f017 fd2f 	bl	48364 <k_mem_slab_alloc>
   30906:	4604      	mov	r4, r0
   30908:	b998      	cbnz	r0, 30932 <bt_att_accept+0x3e>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   3090a:	4601      	mov	r1, r0
   3090c:	222c      	movs	r2, #44	; 0x2c
   3090e:	9800      	ldr	r0, [sp, #0]
   30910:	f01b fcf7 	bl	4c302 <memset>
	att->conn = conn;
   30914:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   30916:	4819      	ldr	r0, [pc, #100]	; (3097c <bt_att_accept+0x88>)
	list->tail = NULL;
   30918:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   3091a:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
   3091e:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   30922:	2200      	movs	r2, #0
   30924:	2300      	movs	r3, #0
   30926:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   30928:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   3092a:	f017 fd1b 	bl	48364 <k_mem_slab_alloc>
   3092e:	4604      	mov	r4, r0
   30930:	b110      	cbz	r0, 30938 <bt_att_accept+0x44>
		return -ENOMEM;
   30932:	f06f 040b 	mvn.w	r4, #11
   30936:	e01b      	b.n	30970 <bt_att_accept+0x7c>
	(void)memset(chan, 0, sizeof(*chan));
   30938:	4601      	mov	r1, r0
   3093a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   3093e:	9801      	ldr	r0, [sp, #4]
   30940:	f01b fcdf 	bl	4c302 <memset>
	chan->chan.chan.ops = &ops;
   30944:	9801      	ldr	r0, [sp, #4]
   30946:	4b0e      	ldr	r3, [pc, #56]	; (30980 <bt_att_accept+0x8c>)
   30948:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   3094a:	30f8      	adds	r0, #248	; 0xf8
   3094c:	f020 fb32 	bl	50fb4 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   30950:	9b01      	ldr	r3, [sp, #4]
   30952:	f3bf 8f5b 	dmb	ish
   30956:	33f0      	adds	r3, #240	; 0xf0
   30958:	e853 2f00 	ldrex	r2, [r3]
   3095c:	e843 4100 	strex	r1, r4, [r3]
   30960:	2900      	cmp	r1, #0
   30962:	d1f9      	bne.n	30958 <bt_att_accept+0x64>
   30964:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   30968:	9b01      	ldr	r3, [sp, #4]
   3096a:	f843 5b08 	str.w	r5, [r3], #8
	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   3096e:	6033      	str	r3, [r6, #0]

	return 0;
}
   30970:	4620      	mov	r0, r4
   30972:	b003      	add	sp, #12
   30974:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30976:	bf00      	nop
   30978:	20000e60 	.word	0x20000e60
   3097c:	20000e7c 	.word	0x20000e7c
   30980:	200005bc 	.word	0x200005bc

00030984 <bt_att_connected>:
{
   30984:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   30986:	4606      	mov	r6, r0
{
   30988:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   3098a:	2104      	movs	r1, #4
   3098c:	f856 0908 	ldr.w	r0, [r6], #-8
   30990:	f01c fec7 	bl	4d722 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   30994:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   30998:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3099a:	b91b      	cbnz	r3, 309a4 <bt_att_connected+0x20>
   3099c:	f105 000c 	add.w	r0, r5, #12
   309a0:	f020 fb08 	bl	50fb4 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   309a4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   309a6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   309aa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   309ac:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   309b0:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   309b2:	b902      	cbnz	r2, 309b6 <bt_att_connected+0x32>
	list->tail = node;
   309b4:	62ab      	str	r3, [r5, #40]	; 0x28
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   309b6:	2103      	movs	r1, #3
   309b8:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   309bc:	f01c ff75 	bl	4d8aa <atomic_test_bit>
   309c0:	b920      	cbnz	r0, 309cc <bt_att_connected+0x48>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   309c2:	2317      	movs	r3, #23
   309c4:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   309c8:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   309cc:	4630      	mov	r0, r6
   309ce:	f01c fff4 	bl	4d9ba <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   309d2:	f504 7084 	add.w	r0, r4, #264	; 0x108
   309d6:	4902      	ldr	r1, [pc, #8]	; (309e0 <bt_att_connected+0x5c>)
}
   309d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   309dc:	f020 bbed 	b.w	511ba <k_work_init_delayable>
   309e0:	0004e0e9 	.word	0x0004e0e9

000309e4 <att_write_cmd>:
{
   309e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   309e6:	4604      	mov	r4, r0
   309e8:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   309ea:	f101 0008 	add.w	r0, r1, #8
   309ee:	460d      	mov	r5, r1
   309f0:	f01f fc12 	bl	50218 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   309f4:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   309f6:	68af      	ldr	r7, [r5, #8]
   309f8:	89ad      	ldrh	r5, [r5, #12]
   309fa:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   309fc:	2100      	movs	r1, #0
   309fe:	6818      	ldr	r0, [r3, #0]
   30a00:	f01e fbfe 	bl	4f200 <bt_gatt_change_aware>
   30a04:	b328      	cbz	r0, 30a52 <att_write_cmd+0x6e>
	if (!handle) {
   30a06:	b336      	cbz	r6, 30a56 <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   30a08:	2218      	movs	r2, #24
   30a0a:	2100      	movs	r1, #0
   30a0c:	4668      	mov	r0, sp
   30a0e:	f01b fc78 	bl	4c302 <memset>
	data.conn = chan->att->conn;
   30a12:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30a14:	4a11      	ldr	r2, [pc, #68]	; (30a5c <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
   30a16:	681b      	ldr	r3, [r3, #0]
   30a18:	9300      	str	r3, [sp, #0]
	data.req = req;
   30a1a:	2300      	movs	r3, #0
   30a1c:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   30a20:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   30a24:	2301      	movs	r3, #1
   30a26:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30a2a:	4631      	mov	r1, r6
   30a2c:	466b      	mov	r3, sp
   30a2e:	4630      	mov	r0, r6
	data.value = value;
   30a30:	9703      	str	r7, [sp, #12]
	data.len = len;
   30a32:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30a36:	f01c fff8 	bl	4da2a <bt_gatt_foreach_attr>
	if (data.err) {
   30a3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   30a3e:	b92b      	cbnz	r3, 30a4c <att_write_cmd+0x68>
	if (data.buf) {
   30a40:	9901      	ldr	r1, [sp, #4]
   30a42:	b119      	cbz	r1, 30a4c <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30a44:	4a06      	ldr	r2, [pc, #24]	; (30a60 <att_write_cmd+0x7c>)
   30a46:	4620      	mov	r0, r4
   30a48:	f01c ffa9 	bl	4d99e <bt_att_chan_send_rsp>
   30a4c:	2000      	movs	r0, #0
}
   30a4e:	b007      	add	sp, #28
   30a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   30a52:	2012      	movs	r0, #18
   30a54:	e7fb      	b.n	30a4e <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   30a56:	2001      	movs	r0, #1
   30a58:	e7f9      	b.n	30a4e <att_write_cmd+0x6a>
   30a5a:	bf00      	nop
   30a5c:	0004de07 	.word	0x0004de07
   30a60:	0004dd7d 	.word	0x0004dd7d

00030a64 <att_indicate>:
{
   30a64:	b570      	push	{r4, r5, r6, lr}
   30a66:	4604      	mov	r4, r0
   30a68:	f101 0008 	add.w	r0, r1, #8
   30a6c:	460d      	mov	r5, r1
   30a6e:	f01f fbd3 	bl	50218 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   30a72:	6826      	ldr	r6, [r4, #0]
   30a74:	89ab      	ldrh	r3, [r5, #12]
   30a76:	68aa      	ldr	r2, [r5, #8]
   30a78:	4601      	mov	r1, r0
   30a7a:	6830      	ldr	r0, [r6, #0]
   30a7c:	f01e fb52 	bl	4f124 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   30a80:	211e      	movs	r1, #30
   30a82:	2200      	movs	r2, #0
   30a84:	4620      	mov	r0, r4
   30a86:	f01d fa55 	bl	4df34 <bt_att_chan_create_pdu>
	if (!buf) {
   30a8a:	4601      	mov	r1, r0
   30a8c:	b118      	cbz	r0, 30a96 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   30a8e:	4a03      	ldr	r2, [pc, #12]	; (30a9c <att_indicate+0x38>)
   30a90:	4620      	mov	r0, r4
   30a92:	f01c ff84 	bl	4d99e <bt_att_chan_send_rsp>
}
   30a96:	2000      	movs	r0, #0
   30a98:	bd70      	pop	{r4, r5, r6, pc}
   30a9a:	bf00      	nop
   30a9c:	0004dd99 	.word	0x0004dd99

00030aa0 <send_err_rsp.part.10>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   30aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30aa4:	4688      	mov	r8, r1
   30aa6:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   30aa8:	2101      	movs	r1, #1
   30aaa:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   30aac:	4605      	mov	r5, r0
   30aae:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   30ab0:	f01d fa40 	bl	4df34 <bt_att_chan_create_pdu>
	if (!buf) {
   30ab4:	4604      	mov	r4, r0
   30ab6:	b178      	cbz	r0, 30ad8 <send_err_rsp.part.10+0x38>
	return net_buf_simple_add(&buf->b, len);
   30ab8:	2104      	movs	r1, #4
   30aba:	3008      	adds	r0, #8
   30abc:	f01f fb6b 	bl	50196 <net_buf_simple_add>
	rsp->request = req;
   30ac0:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   30ac4:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   30ac6:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   30aca:	4621      	mov	r1, r4
   30acc:	4628      	mov	r0, r5
   30ace:	4a03      	ldr	r2, [pc, #12]	; (30adc <send_err_rsp.part.10+0x3c>)
}
   30ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   30ad4:	f01c bf63 	b.w	4d99e <bt_att_chan_send_rsp>
}
   30ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30adc:	0004dd7d 	.word	0x0004dd7d

00030ae0 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   30ae0:	898b      	ldrh	r3, [r1, #12]
{
   30ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30ae6:	4604      	mov	r4, r0
   30ae8:	460f      	mov	r7, r1
	if (buf->len < sizeof(*hdr)) {
   30aea:	2b00      	cmp	r3, #0
   30aec:	d05d      	beq.n	30baa <bt_att_recv+0xca>
	return net_buf_simple_pull_mem(&buf->b, len);
   30aee:	2101      	movs	r1, #1
   30af0:	f107 0008 	add.w	r0, r7, #8
   30af4:	f01f fb80 	bl	501f8 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   30af8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   30afc:	4680      	mov	r8, r0
   30afe:	2b00      	cmp	r3, #0
   30b00:	d053      	beq.n	30baa <bt_att_recv+0xca>
		if (hdr->code == handlers[i].op) {
   30b02:	4a2d      	ldr	r2, [pc, #180]	; (30bb8 <bt_att_recv+0xd8>)
   30b04:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   30b06:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   30b0a:	2300      	movs	r3, #0
   30b0c:	4610      	mov	r0, r2
		if (hdr->code == handlers[i].op) {
   30b0e:	f812 5033 	ldrb.w	r5, [r2, r3, lsl #3]
   30b12:	428d      	cmp	r5, r1
   30b14:	d117      	bne.n	30b46 <bt_att_recv+0x66>
		if (handler->type == ATT_REQUEST &&
   30b16:	00db      	lsls	r3, r3, #3
   30b18:	441a      	add	r2, r3
   30b1a:	7895      	ldrb	r5, [r2, #2]
   30b1c:	2d01      	cmp	r5, #1
   30b1e:	d022      	beq.n	30b66 <bt_att_recv+0x86>
		} else if (handler->type == ATT_INDICATION &&
   30b20:	2d05      	cmp	r5, #5
   30b22:	d131      	bne.n	30b88 <bt_att_recv+0xa8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   30b24:	f3bf 8f5b 	dmb	ish
   30b28:	34e8      	adds	r4, #232	; 0xe8
   30b2a:	e854 2f00 	ldrex	r2, [r4]
   30b2e:	f042 0102 	orr.w	r1, r2, #2
   30b32:	e844 1c00 	strex	ip, r1, [r4]
   30b36:	f1bc 0f00 	cmp.w	ip, #0
   30b3a:	d1f6      	bne.n	30b2a <bt_att_recv+0x4a>
   30b3c:	f3bf 8f5b 	dmb	ish
   30b40:	f012 0f02 	tst.w	r2, #2
   30b44:	e01f      	b.n	30b86 <bt_att_recv+0xa6>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   30b46:	3301      	adds	r3, #1
   30b48:	2b1c      	cmp	r3, #28
   30b4a:	d1e0      	bne.n	30b0e <bt_att_recv+0x2e>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   30b4c:	4608      	mov	r0, r1
   30b4e:	f01c fe5f 	bl	4d810 <att_op_get_type>
   30b52:	b350      	cbz	r0, 30baa <bt_att_recv+0xca>
   30b54:	2805      	cmp	r0, #5
   30b56:	d028      	beq.n	30baa <bt_att_recv+0xca>
	if (!req) {
   30b58:	b339      	cbz	r1, 30baa <bt_att_recv+0xca>
   30b5a:	2306      	movs	r3, #6
   30b5c:	2200      	movs	r2, #0
   30b5e:	4630      	mov	r0, r6
   30b60:	f7ff ff9e 	bl	30aa0 <send_err_rsp.part.10>
   30b64:	e021      	b.n	30baa <bt_att_recv+0xca>
   30b66:	34e8      	adds	r4, #232	; 0xe8
   30b68:	f3bf 8f5b 	dmb	ish
   30b6c:	e854 2f00 	ldrex	r2, [r4]
   30b70:	f042 0101 	orr.w	r1, r2, #1
   30b74:	e844 1c00 	strex	ip, r1, [r4]
   30b78:	f1bc 0f00 	cmp.w	ip, #0
   30b7c:	d1f6      	bne.n	30b6c <bt_att_recv+0x8c>
   30b7e:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   30b82:	f012 0f01 	tst.w	r2, #1
   30b86:	d110      	bne.n	30baa <bt_att_recv+0xca>
	if (buf->len < handler->expect_len) {
   30b88:	4403      	add	r3, r0
   30b8a:	89b9      	ldrh	r1, [r7, #12]
   30b8c:	785a      	ldrb	r2, [r3, #1]
   30b8e:	4291      	cmp	r1, r2
   30b90:	d30e      	bcc.n	30bb0 <bt_att_recv+0xd0>
		err = handler->func(att_chan, buf);
   30b92:	685b      	ldr	r3, [r3, #4]
   30b94:	4639      	mov	r1, r7
   30b96:	4630      	mov	r0, r6
   30b98:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   30b9a:	2d01      	cmp	r5, #1
		err = handler->func(att_chan, buf);
   30b9c:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   30b9e:	d104      	bne.n	30baa <bt_att_recv+0xca>
   30ba0:	b118      	cbz	r0, 30baa <bt_att_recv+0xca>
		send_err_rsp(att_chan, hdr->code, 0, err);
   30ba2:	f898 1000 	ldrb.w	r1, [r8]
	if (!req) {
   30ba6:	2900      	cmp	r1, #0
   30ba8:	d1d8      	bne.n	30b5c <bt_att_recv+0x7c>
}
   30baa:	2000      	movs	r0, #0
   30bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
   30bb0:	2d01      	cmp	r5, #1
   30bb2:	d1fa      	bne.n	30baa <bt_att_recv+0xca>
		err = BT_ATT_ERR_INVALID_PDU;
   30bb4:	2304      	movs	r3, #4
   30bb6:	e7f4      	b.n	30ba2 <bt_att_recv+0xc2>
   30bb8:	00052a68 	.word	0x00052a68

00030bbc <att_write_req>:
{
   30bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30bc0:	4605      	mov	r5, r0
   30bc2:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   30bc4:	f101 0008 	add.w	r0, r1, #8
   30bc8:	460c      	mov	r4, r1
   30bca:	f01f fb25 	bl	50218 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   30bce:	682b      	ldr	r3, [r5, #0]
			     handle, 0, buf->data, buf->len);
   30bd0:	f8d4 9008 	ldr.w	r9, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   30bd4:	89a4      	ldrh	r4, [r4, #12]
   30bd6:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   30bd8:	2101      	movs	r1, #1
   30bda:	6818      	ldr	r0, [r3, #0]
   30bdc:	f01e fb10 	bl	4f200 <bt_gatt_change_aware>
   30be0:	2800      	cmp	r0, #0
   30be2:	d040      	beq.n	30c66 <att_write_req+0xaa>
	if (!handle) {
   30be4:	2e00      	cmp	r6, #0
   30be6:	d040      	beq.n	30c6a <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   30be8:	2218      	movs	r2, #24
   30bea:	2100      	movs	r1, #0
   30bec:	4668      	mov	r0, sp
   30bee:	f01b fb88 	bl	4c302 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   30bf2:	2200      	movs	r2, #0
   30bf4:	2113      	movs	r1, #19
   30bf6:	4628      	mov	r0, r5
   30bf8:	f01d f99c 	bl	4df34 <bt_att_chan_create_pdu>
   30bfc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   30bfe:	b380      	cbz	r0, 30c62 <att_write_req+0xa6>
	data.conn = chan->att->conn;
   30c00:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30c02:	4a1b      	ldr	r2, [pc, #108]	; (30c70 <att_write_req+0xb4>)
	data.conn = chan->att->conn;
   30c04:	681b      	ldr	r3, [r3, #0]
   30c06:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   30c08:	2301      	movs	r3, #1
   30c0a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   30c0e:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   30c12:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30c14:	466b      	mov	r3, sp
   30c16:	4631      	mov	r1, r6
   30c18:	4630      	mov	r0, r6
	data.len = len;
   30c1a:	f8ad 4010 	strh.w	r4, [sp, #16]
	data.req = req;
   30c1e:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   30c22:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   30c26:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   30c2a:	f01c fefe 	bl	4da2a <bt_gatt_foreach_attr>
	if (data.err) {
   30c2e:	f89d 4014 	ldrb.w	r4, [sp, #20]
   30c32:	b174      	cbz	r4, 30c52 <att_write_req+0x96>
			net_buf_unref(data.buf);
   30c34:	9801      	ldr	r0, [sp, #4]
   30c36:	f013 fa17 	bl	44068 <net_buf_unref>
	if (!req) {
   30c3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   30c3e:	4632      	mov	r2, r6
   30c40:	4641      	mov	r1, r8
   30c42:	4628      	mov	r0, r5
   30c44:	f7ff ff2c 	bl	30aa0 <send_err_rsp.part.10>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   30c48:	463c      	mov	r4, r7
}
   30c4a:	4620      	mov	r0, r4
   30c4c:	b007      	add	sp, #28
   30c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   30c52:	9901      	ldr	r1, [sp, #4]
   30c54:	2900      	cmp	r1, #0
   30c56:	d0f8      	beq.n	30c4a <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30c58:	4a06      	ldr	r2, [pc, #24]	; (30c74 <att_write_req+0xb8>)
   30c5a:	4628      	mov	r0, r5
   30c5c:	f01c fe9f 	bl	4d99e <bt_att_chan_send_rsp>
   30c60:	e7f3      	b.n	30c4a <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   30c62:	240e      	movs	r4, #14
   30c64:	e7f1      	b.n	30c4a <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   30c66:	2412      	movs	r4, #18
   30c68:	e7ef      	b.n	30c4a <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   30c6a:	2401      	movs	r4, #1
   30c6c:	e7ed      	b.n	30c4a <att_write_req+0x8e>
   30c6e:	bf00      	nop
   30c70:	0004de07 	.word	0x0004de07
   30c74:	0004dd7d 	.word	0x0004dd7d

00030c78 <att_read_group_req>:
{
   30c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   30c7c:	7b0c      	ldrb	r4, [r1, #12]
   30c7e:	3c04      	subs	r4, #4
   30c80:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   30c82:	2c02      	cmp	r4, #2
{
   30c84:	4606      	mov	r6, r0
   30c86:	b08c      	sub	sp, #48	; 0x30
   30c88:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   30c8a:	d001      	beq.n	30c90 <att_read_group_req+0x18>
   30c8c:	2c10      	cmp	r4, #16
   30c8e:	d16f      	bne.n	30d70 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   30c90:	2104      	movs	r1, #4
   30c92:	3008      	adds	r0, #8
   30c94:	f01f fab0 	bl	501f8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30c98:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   30c9c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   30c9e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30ca0:	1d01      	adds	r1, r0, #4
   30ca2:	4622      	mov	r2, r4
   30ca4:	4640      	mov	r0, r8
   30ca6:	f01b fc3a 	bl	4c51e <bt_uuid_create>
   30caa:	2800      	cmp	r0, #0
   30cac:	d062      	beq.n	30d74 <att_read_group_req+0xfc>
	if (!start || !end) {
   30cae:	2d00      	cmp	r5, #0
   30cb0:	d03a      	beq.n	30d28 <att_read_group_req+0xb0>
   30cb2:	2400      	movs	r4, #0
   30cb4:	2f00      	cmp	r7, #0
   30cb6:	d036      	beq.n	30d26 <att_read_group_req+0xae>
	if (start > end) {
   30cb8:	42bd      	cmp	r5, r7
   30cba:	d835      	bhi.n	30d28 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   30cbc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   30cc0:	4669      	mov	r1, sp
   30cc2:	4640      	mov	r0, r8
   30cc4:	f88d 4000 	strb.w	r4, [sp]
   30cc8:	f8ad 3002 	strh.w	r3, [sp, #2]
   30ccc:	f01b fbfd 	bl	4c4ca <bt_uuid_cmp>
   30cd0:	2800      	cmp	r0, #0
   30cd2:	d134      	bne.n	30d3e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   30cd4:	68b4      	ldr	r4, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
   30cd6:	2214      	movs	r2, #20
   30cd8:	2100      	movs	r1, #0
   30cda:	a807      	add	r0, sp, #28
   30cdc:	f01b fb11 	bl	4c302 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   30ce0:	2201      	movs	r2, #1
   30ce2:	2111      	movs	r1, #17
   30ce4:	4620      	mov	r0, r4
   30ce6:	f01d f94a 	bl	4df7e <bt_att_create_pdu>
   30cea:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   30cec:	2800      	cmp	r0, #0
   30cee:	d041      	beq.n	30d74 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   30cf0:	2101      	movs	r1, #1
   30cf2:	3008      	adds	r0, #8
	data.uuid = uuid;
   30cf4:	e9cd 6807 	strd	r6, r8, [sp, #28]
   30cf8:	f01f fa4d 	bl	50196 <net_buf_simple_add>
	data.rsp->len = 0U;
   30cfc:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   30d00:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   30d02:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   30d04:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   30d08:	4a1b      	ldr	r2, [pc, #108]	; (30d78 <att_read_group_req+0x100>)
	data.group = NULL;
   30d0a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   30d0e:	4639      	mov	r1, r7
   30d10:	4628      	mov	r0, r5
   30d12:	f01c fe8a 	bl	4da2a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   30d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30d18:	781c      	ldrb	r4, [r3, #0]
   30d1a:	bb1c      	cbnz	r4, 30d64 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   30d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
   30d1e:	f013 f9a3 	bl	44068 <net_buf_unref>
	if (!req) {
   30d22:	230a      	movs	r3, #10
   30d24:	e018      	b.n	30d58 <att_read_group_req+0xe0>
			*err = 0U;
   30d26:	463d      	mov	r5, r7
	if (!req) {
   30d28:	2301      	movs	r3, #1
   30d2a:	462a      	mov	r2, r5
   30d2c:	2110      	movs	r1, #16
   30d2e:	4630      	mov	r0, r6
   30d30:	f7ff feb6 	bl	30aa0 <send_err_rsp.part.10>
		return 0;
   30d34:	2400      	movs	r4, #0
}
   30d36:	4620      	mov	r0, r4
   30d38:	b00c      	add	sp, #48	; 0x30
   30d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   30d3e:	f642 0301 	movw	r3, #10241	; 0x2801
   30d42:	a901      	add	r1, sp, #4
   30d44:	4640      	mov	r0, r8
   30d46:	f88d 4004 	strb.w	r4, [sp, #4]
   30d4a:	f8ad 3006 	strh.w	r3, [sp, #6]
   30d4e:	f01b fbbc 	bl	4c4ca <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   30d52:	2800      	cmp	r0, #0
   30d54:	d0be      	beq.n	30cd4 <att_read_group_req+0x5c>
	if (!req) {
   30d56:	2310      	movs	r3, #16
   30d58:	462a      	mov	r2, r5
   30d5a:	2110      	movs	r1, #16
   30d5c:	4630      	mov	r0, r6
   30d5e:	f7ff fe9f 	bl	30aa0 <send_err_rsp.part.10>
		return 0;
   30d62:	e7e8      	b.n	30d36 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30d64:	4a05      	ldr	r2, [pc, #20]	; (30d7c <att_read_group_req+0x104>)
   30d66:	9909      	ldr	r1, [sp, #36]	; 0x24
   30d68:	4630      	mov	r0, r6
   30d6a:	f01c fe18 	bl	4d99e <bt_att_chan_send_rsp>
	return 0;
   30d6e:	e7e1      	b.n	30d34 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   30d70:	2404      	movs	r4, #4
   30d72:	e7e0      	b.n	30d36 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   30d74:	240e      	movs	r4, #14
   30d76:	e7de      	b.n	30d36 <att_read_group_req+0xbe>
   30d78:	000307a5 	.word	0x000307a5
   30d7c:	0004dd7d 	.word	0x0004dd7d

00030d80 <att_read_mult_req>:
{
   30d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   30d84:	6886      	ldr	r6, [r0, #8]
{
   30d86:	b085      	sub	sp, #20
   30d88:	4604      	mov	r4, r0
   30d8a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   30d8c:	4630      	mov	r0, r6
   30d8e:	2101      	movs	r1, #1
   30d90:	f01e fa36 	bl	4f200 <bt_gatt_change_aware>
   30d94:	2800      	cmp	r0, #0
   30d96:	d038      	beq.n	30e0a <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   30d98:	2210      	movs	r2, #16
   30d9a:	2100      	movs	r1, #0
   30d9c:	4668      	mov	r0, sp
   30d9e:	f01b fab0 	bl	4c302 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   30da2:	2200      	movs	r2, #0
   30da4:	210f      	movs	r1, #15
   30da6:	4630      	mov	r0, r6
   30da8:	f01d f8e9 	bl	4df7e <bt_att_create_pdu>
   30dac:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   30dae:	b370      	cbz	r0, 30e0e <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30db0:	f8df 9064 	ldr.w	r9, [pc, #100]	; 30e18 <att_read_mult_req+0x98>
	data.chan = chan;
   30db4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   30db6:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   30dba:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   30dbe:	89ab      	ldrh	r3, [r5, #12]
   30dc0:	2b01      	cmp	r3, #1
   30dc2:	d805      	bhi.n	30dd0 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30dc4:	4a13      	ldr	r2, [pc, #76]	; (30e14 <att_read_mult_req+0x94>)
   30dc6:	9902      	ldr	r1, [sp, #8]
   30dc8:	4620      	mov	r0, r4
   30dca:	f01c fde8 	bl	4d99e <bt_att_chan_send_rsp>
   30dce:	e018      	b.n	30e02 <att_read_mult_req+0x82>
   30dd0:	4638      	mov	r0, r7
   30dd2:	f01f fa21 	bl	50218 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30dd6:	466b      	mov	r3, sp
   30dd8:	464a      	mov	r2, r9
   30dda:	4601      	mov	r1, r0
   30ddc:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   30dde:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30de2:	f01c fe22 	bl	4da2a <bt_gatt_foreach_attr>
		if (data.err) {
   30de6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30dea:	2b00      	cmp	r3, #0
   30dec:	d0e7      	beq.n	30dbe <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   30dee:	9802      	ldr	r0, [sp, #8]
   30df0:	f013 f93a 	bl	44068 <net_buf_unref>
	if (!req) {
   30df4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30df8:	4632      	mov	r2, r6
   30dfa:	210e      	movs	r1, #14
   30dfc:	4620      	mov	r0, r4
   30dfe:	f7ff fe4f 	bl	30aa0 <send_err_rsp.part.10>
	return 0;
   30e02:	2000      	movs	r0, #0
}
   30e04:	b005      	add	sp, #20
   30e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   30e0a:	2012      	movs	r0, #18
   30e0c:	e7fa      	b.n	30e04 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   30e0e:	200e      	movs	r0, #14
   30e10:	e7f8      	b.n	30e04 <att_read_mult_req+0x84>
   30e12:	bf00      	nop
   30e14:	0004dd7d 	.word	0x0004dd7d
   30e18:	0004dee5 	.word	0x0004dee5

00030e1c <att_read_rsp>:
{
   30e1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   30e20:	6884      	ldr	r4, [r0, #8]
{
   30e22:	4605      	mov	r5, r0
   30e24:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   30e26:	4620      	mov	r0, r4
   30e28:	2101      	movs	r1, #1
{
   30e2a:	4690      	mov	r8, r2
   30e2c:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   30e2e:	f01e f9e7 	bl	4f200 <bt_gatt_change_aware>
   30e32:	b390      	cbz	r0, 30e9a <att_read_rsp+0x7e>
	if (!handle) {
   30e34:	b39e      	cbz	r6, 30e9e <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   30e36:	2210      	movs	r2, #16
   30e38:	2100      	movs	r1, #0
   30e3a:	4668      	mov	r0, sp
   30e3c:	f01b fa61 	bl	4c302 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   30e40:	2200      	movs	r2, #0
   30e42:	4641      	mov	r1, r8
   30e44:	4620      	mov	r0, r4
   30e46:	f01d f89a 	bl	4df7e <bt_att_create_pdu>
   30e4a:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   30e4c:	b348      	cbz	r0, 30ea2 <att_read_rsp+0x86>
	data.offset = offset;
   30e4e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   30e52:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   30e56:	2301      	movs	r3, #1
   30e58:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30e5c:	4a12      	ldr	r2, [pc, #72]	; (30ea8 <att_read_rsp+0x8c>)
	data.chan = chan;
   30e5e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   30e60:	466b      	mov	r3, sp
   30e62:	4631      	mov	r1, r6
   30e64:	4630      	mov	r0, r6
   30e66:	f01c fde0 	bl	4da2a <bt_gatt_foreach_attr>
	if (data.err) {
   30e6a:	f89d 400c 	ldrb.w	r4, [sp, #12]
   30e6e:	b174      	cbz	r4, 30e8e <att_read_rsp+0x72>
		net_buf_unref(data.buf);
   30e70:	9802      	ldr	r0, [sp, #8]
   30e72:	f013 f8f9 	bl	44068 <net_buf_unref>
	if (!req) {
   30e76:	f89d 300c 	ldrb.w	r3, [sp, #12]
   30e7a:	4632      	mov	r2, r6
   30e7c:	4639      	mov	r1, r7
   30e7e:	4628      	mov	r0, r5
   30e80:	f7ff fe0e 	bl	30aa0 <send_err_rsp.part.10>
		return 0;
   30e84:	2400      	movs	r4, #0
}
   30e86:	4620      	mov	r0, r4
   30e88:	b004      	add	sp, #16
   30e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30e8e:	4a07      	ldr	r2, [pc, #28]	; (30eac <att_read_rsp+0x90>)
   30e90:	9902      	ldr	r1, [sp, #8]
   30e92:	4628      	mov	r0, r5
   30e94:	f01c fd83 	bl	4d99e <bt_att_chan_send_rsp>
	return 0;
   30e98:	e7f5      	b.n	30e86 <att_read_rsp+0x6a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   30e9a:	2412      	movs	r4, #18
   30e9c:	e7f3      	b.n	30e86 <att_read_rsp+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   30e9e:	2401      	movs	r4, #1
   30ea0:	e7f1      	b.n	30e86 <att_read_rsp+0x6a>
		return BT_ATT_ERR_UNLIKELY;
   30ea2:	240e      	movs	r4, #14
   30ea4:	e7ef      	b.n	30e86 <att_read_rsp+0x6a>
   30ea6:	bf00      	nop
   30ea8:	0004dee5 	.word	0x0004dee5
   30eac:	0004dd7d 	.word	0x0004dd7d

00030eb0 <att_read_type_req>:
{
   30eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   30eb4:	7b0c      	ldrb	r4, [r1, #12]
   30eb6:	3c04      	subs	r4, #4
   30eb8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   30eba:	2c02      	cmp	r4, #2
{
   30ebc:	4606      	mov	r6, r0
   30ebe:	b08c      	sub	sp, #48	; 0x30
   30ec0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   30ec2:	d001      	beq.n	30ec8 <att_read_type_req+0x18>
   30ec4:	2c10      	cmp	r4, #16
   30ec6:	d150      	bne.n	30f6a <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   30ec8:	2104      	movs	r1, #4
   30eca:	3008      	adds	r0, #8
   30ecc:	f01f f994 	bl	501f8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30ed0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   30ed4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   30ed6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   30ed8:	1d01      	adds	r1, r0, #4
   30eda:	4622      	mov	r2, r4
   30edc:	4640      	mov	r0, r8
   30ede:	f01b fb1e 	bl	4c51e <bt_uuid_create>
   30ee2:	b188      	cbz	r0, 30f08 <att_read_type_req+0x58>
	if (!start || !end) {
   30ee4:	b19d      	cbz	r5, 30f0e <att_read_type_req+0x5e>
   30ee6:	b18f      	cbz	r7, 30f0c <att_read_type_req+0x5c>
	if (start > end) {
   30ee8:	42bd      	cmp	r5, r7
   30eea:	d810      	bhi.n	30f0e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   30eec:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   30eee:	68b4      	ldr	r4, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
   30ef0:	2100      	movs	r1, #0
   30ef2:	eb0d 0002 	add.w	r0, sp, r2
   30ef6:	f01b fa04 	bl	4c302 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   30efa:	2201      	movs	r2, #1
   30efc:	2109      	movs	r1, #9
   30efe:	4620      	mov	r0, r4
   30f00:	f01d f83d 	bl	4df7e <bt_att_create_pdu>
   30f04:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   30f06:	b968      	cbnz	r0, 30f24 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   30f08:	240e      	movs	r4, #14
   30f0a:	e007      	b.n	30f1c <att_read_type_req+0x6c>
			*err = 0U;
   30f0c:	463d      	mov	r5, r7
	if (!req) {
   30f0e:	2301      	movs	r3, #1
   30f10:	462a      	mov	r2, r5
   30f12:	2108      	movs	r1, #8
   30f14:	4630      	mov	r0, r6
   30f16:	f7ff fdc3 	bl	30aa0 <send_err_rsp.part.10>
		return 0;
   30f1a:	2400      	movs	r4, #0
}
   30f1c:	4620      	mov	r0, r4
   30f1e:	b00c      	add	sp, #48	; 0x30
   30f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   30f24:	2101      	movs	r1, #1
   30f26:	3008      	adds	r0, #8
	data.uuid = uuid;
   30f28:	e9cd 6806 	strd	r6, r8, [sp, #24]
   30f2c:	f01f f933 	bl	50196 <net_buf_simple_add>
	data.rsp->len = 0U;
   30f30:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   30f34:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   30f36:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   30f38:	4a0d      	ldr	r2, [pc, #52]	; (30f70 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   30f3a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   30f3e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   30f40:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   30f44:	4628      	mov	r0, r5
   30f46:	ab06      	add	r3, sp, #24
   30f48:	f01c fd6f 	bl	4da2a <bt_gatt_foreach_attr>
	if (data.err) {
   30f4c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   30f50:	b12c      	cbz	r4, 30f5e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   30f52:	9808      	ldr	r0, [sp, #32]
   30f54:	f013 f888 	bl	44068 <net_buf_unref>
	if (!req) {
   30f58:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   30f5c:	e7d8      	b.n	30f10 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   30f5e:	4a05      	ldr	r2, [pc, #20]	; (30f74 <att_read_type_req+0xc4>)
   30f60:	9908      	ldr	r1, [sp, #32]
   30f62:	4630      	mov	r0, r6
   30f64:	f01c fd1b 	bl	4d99e <bt_att_chan_send_rsp>
	return 0;
   30f68:	e7d8      	b.n	30f1c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   30f6a:	2404      	movs	r4, #4
   30f6c:	e7d6      	b.n	30f1c <att_read_type_req+0x6c>
   30f6e:	bf00      	nop
   30f70:	00030851 	.word	0x00030851
   30f74:	0004dd7d 	.word	0x0004dd7d

00030f78 <att_find_type_req>:
{
   30f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30f7c:	4689      	mov	r9, r1
   30f7e:	b088      	sub	sp, #32
   30f80:	4606      	mov	r6, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   30f82:	2106      	movs	r1, #6
   30f84:	f109 0008 	add.w	r0, r9, #8
   30f88:	f01f f936 	bl	501f8 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   30f8c:	8805      	ldrh	r5, [r0, #0]
	if (!start || !end) {
   30f8e:	b315      	cbz	r5, 30fd6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   30f90:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	if (!start || !end) {
   30f94:	f1b8 0f00 	cmp.w	r8, #0
   30f98:	d01c      	beq.n	30fd4 <att_find_type_req+0x5c>
	if (start > end) {
   30f9a:	4545      	cmp	r5, r8
   30f9c:	d81b      	bhi.n	30fd6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   30f9e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   30fa0:	f8ad 3006 	strh.w	r3, [sp, #6]
   30fa4:	2400      	movs	r4, #0
   30fa6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   30faa:	a902      	add	r1, sp, #8
   30fac:	a801      	add	r0, sp, #4
	value = buf->data;
   30fae:	f8d9 a008 	ldr.w	sl, [r9, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   30fb2:	f88d 4004 	strb.w	r4, [sp, #4]
   30fb6:	f88d 4008 	strb.w	r4, [sp, #8]
   30fba:	f8ad 300a 	strh.w	r3, [sp, #10]
   30fbe:	f01b fa84 	bl	4c4ca <bt_uuid_cmp>
   30fc2:	4607      	mov	r7, r0
   30fc4:	b190      	cbz	r0, 30fec <att_find_type_req+0x74>
	if (!req) {
   30fc6:	230a      	movs	r3, #10
   30fc8:	462a      	mov	r2, r5
   30fca:	2106      	movs	r1, #6
   30fcc:	4630      	mov	r0, r6
   30fce:	f7ff fd67 	bl	30aa0 <send_err_rsp.part.10>
		return 0;
   30fd2:	e007      	b.n	30fe4 <att_find_type_req+0x6c>
			*err = 0U;
   30fd4:	4645      	mov	r5, r8
	if (!req) {
   30fd6:	2301      	movs	r3, #1
   30fd8:	462a      	mov	r2, r5
   30fda:	2106      	movs	r1, #6
   30fdc:	4630      	mov	r0, r6
   30fde:	f7ff fd5f 	bl	30aa0 <send_err_rsp.part.10>
		return 0;
   30fe2:	2400      	movs	r4, #0
}
   30fe4:	4620      	mov	r0, r4
   30fe6:	b008      	add	sp, #32
   30fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   30fec:	f899 400c 	ldrb.w	r4, [r9, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   30ff0:	f8d6 9008 	ldr.w	r9, [r6, #8]
	(void)memset(&data, 0, sizeof(data));
   30ff4:	4601      	mov	r1, r0
   30ff6:	2214      	movs	r2, #20
   30ff8:	a803      	add	r0, sp, #12
   30ffa:	f01b f982 	bl	4c302 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   30ffe:	463a      	mov	r2, r7
   31000:	2107      	movs	r1, #7
   31002:	4648      	mov	r0, r9
   31004:	f01c ffbb 	bl	4df7e <bt_att_create_pdu>
   31008:	9004      	str	r0, [sp, #16]
	if (!data.buf) {
   3100a:	b1e0      	cbz	r0, 31046 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   3100c:	230a      	movs	r3, #10
   3100e:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   31012:	4a0e      	ldr	r2, [pc, #56]	; (3104c <att_find_type_req+0xd4>)
	data.value_len = value_len;
   31014:	f88d 401c 	strb.w	r4, [sp, #28]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   31018:	ab03      	add	r3, sp, #12
   3101a:	4641      	mov	r1, r8
   3101c:	4628      	mov	r0, r5
	data.chan = chan;
   3101e:	9603      	str	r6, [sp, #12]
	data.value = value;
   31020:	e9cd 7a05 	strd	r7, sl, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   31024:	f01c fd01 	bl	4da2a <bt_gatt_foreach_attr>
	if (data.err) {
   31028:	f89d 401d 	ldrb.w	r4, [sp, #29]
   3102c:	b12c      	cbz	r4, 3103a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   3102e:	9804      	ldr	r0, [sp, #16]
   31030:	f013 f81a 	bl	44068 <net_buf_unref>
	if (!req) {
   31034:	f89d 301d 	ldrb.w	r3, [sp, #29]
   31038:	e7ce      	b.n	30fd8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   3103a:	4a05      	ldr	r2, [pc, #20]	; (31050 <att_find_type_req+0xd8>)
   3103c:	9904      	ldr	r1, [sp, #16]
   3103e:	4630      	mov	r0, r6
   31040:	f01c fcad 	bl	4d99e <bt_att_chan_send_rsp>
	return 0;
   31044:	e7ce      	b.n	30fe4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   31046:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   31048:	e7cc      	b.n	30fe4 <att_find_type_req+0x6c>
   3104a:	bf00      	nop
   3104c:	0004db57 	.word	0x0004db57
   31050:	0004dd7d 	.word	0x0004dd7d

00031054 <att_find_info_req>:
{
   31054:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   31056:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   31058:	881d      	ldrh	r5, [r3, #0]
{
   3105a:	b085      	sub	sp, #20
   3105c:	4606      	mov	r6, r0
	if (!start || !end) {
   3105e:	b19d      	cbz	r5, 31088 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   31060:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   31062:	b184      	cbz	r4, 31086 <att_find_info_req+0x32>
	if (start > end) {
   31064:	42a5      	cmp	r5, r4
   31066:	d80f      	bhi.n	31088 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   31068:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   3106a:	2210      	movs	r2, #16
   3106c:	2100      	movs	r1, #0
   3106e:	4668      	mov	r0, sp
   31070:	f01b f947 	bl	4c302 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   31074:	2200      	movs	r2, #0
   31076:	2105      	movs	r1, #5
   31078:	4638      	mov	r0, r7
   3107a:	f01c ff80 	bl	4df7e <bt_att_create_pdu>
   3107e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   31080:	b958      	cbnz	r0, 3109a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   31082:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   31084:	e007      	b.n	31096 <att_find_info_req+0x42>
			*err = 0U;
   31086:	4625      	mov	r5, r4
	if (!req) {
   31088:	2301      	movs	r3, #1
   3108a:	462a      	mov	r2, r5
   3108c:	2104      	movs	r1, #4
   3108e:	4630      	mov	r0, r6
   31090:	f7ff fd06 	bl	30aa0 <send_err_rsp.part.10>
	return 0;
   31094:	2000      	movs	r0, #0
}
   31096:	b005      	add	sp, #20
   31098:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   3109a:	4621      	mov	r1, r4
   3109c:	466b      	mov	r3, sp
   3109e:	4a09      	ldr	r2, [pc, #36]	; (310c4 <att_find_info_req+0x70>)
	data.chan = chan;
   310a0:	9600      	str	r6, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   310a2:	4628      	mov	r0, r5
   310a4:	f01c fcc1 	bl	4da2a <bt_gatt_foreach_attr>
	if (!data.rsp) {
   310a8:	9c02      	ldr	r4, [sp, #8]
   310aa:	b924      	cbnz	r4, 310b6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   310ac:	9801      	ldr	r0, [sp, #4]
   310ae:	f012 ffdb 	bl	44068 <net_buf_unref>
	if (!req) {
   310b2:	230a      	movs	r3, #10
   310b4:	e7e9      	b.n	3108a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   310b6:	4a04      	ldr	r2, [pc, #16]	; (310c8 <att_find_info_req+0x74>)
   310b8:	9901      	ldr	r1, [sp, #4]
   310ba:	4630      	mov	r0, r6
   310bc:	f01c fc6f 	bl	4d99e <bt_att_chan_send_rsp>
   310c0:	e7e8      	b.n	31094 <att_find_info_req+0x40>
   310c2:	bf00      	nop
   310c4:	0004dc81 	.word	0x0004dc81
   310c8:	0004dd7d 	.word	0x0004dd7d

000310cc <att_mtu_req>:
{
   310cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   310ce:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   310d0:	f850 3bf0 	ldr.w	r3, [r0], #240
{
   310d4:	460a      	mov	r2, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   310d6:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   310d8:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   310da:	f01c fbe6 	bl	4d8aa <atomic_test_bit>
   310de:	4604      	mov	r4, r0
   310e0:	bb10      	cbnz	r0, 31128 <att_mtu_req+0x5c>
	mtu_client = sys_le16_to_cpu(req->mtu);
   310e2:	6892      	ldr	r2, [r2, #8]
   310e4:	8816      	ldrh	r6, [r2, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   310e6:	2e16      	cmp	r6, #22
   310e8:	d920      	bls.n	3112c <att_mtu_req+0x60>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   310ea:	2202      	movs	r2, #2
   310ec:	2103      	movs	r1, #3
   310ee:	4618      	mov	r0, r3
   310f0:	f01c ff45 	bl	4df7e <bt_att_create_pdu>
	if (!pdu) {
   310f4:	4607      	mov	r7, r0
   310f6:	b1d8      	cbz	r0, 31130 <att_mtu_req+0x64>
	return net_buf_simple_add(&buf->b, len);
   310f8:	2102      	movs	r1, #2
   310fa:	3008      	adds	r0, #8
   310fc:	f01f f84b 	bl	50196 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   31100:	2341      	movs	r3, #65	; 0x41
   31102:	7003      	strb	r3, [r0, #0]
   31104:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   31106:	4a0b      	ldr	r2, [pc, #44]	; (31134 <att_mtu_req+0x68>)
   31108:	4639      	mov	r1, r7
   3110a:	4628      	mov	r0, r5
   3110c:	f01c fc47 	bl	4d99e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   31110:	2e41      	cmp	r6, #65	; 0x41
   31112:	bf28      	it	cs
   31114:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   31116:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   31118:	f8a5 607a 	strh.w	r6, [r5, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   3111c:	f8a5 608a 	strh.w	r6, [r5, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   31120:	f01c fc4b 	bl	4d9ba <att_chan_mtu_updated>
	return 0;
   31124:	4620      	mov	r0, r4
}
   31126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   31128:	2006      	movs	r0, #6
   3112a:	e7fc      	b.n	31126 <att_mtu_req+0x5a>
		return BT_ATT_ERR_INVALID_PDU;
   3112c:	2004      	movs	r0, #4
   3112e:	e7fa      	b.n	31126 <att_mtu_req+0x5a>
		return BT_ATT_ERR_UNLIKELY;
   31130:	200e      	movs	r0, #14
   31132:	e7f8      	b.n	31126 <att_mtu_req+0x5a>
   31134:	0004dd7d 	.word	0x0004dd7d

00031138 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   31138:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   3113a:	2300      	movs	r3, #0
{
   3113c:	4604      	mov	r4, r0
   3113e:	460d      	mov	r5, r1
	struct bt_att_req *req = NULL;
   31140:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   31142:	f018 f8b9 	bl	492b8 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
   31146:	4b0b      	ldr	r3, [pc, #44]	; (31174 <bt_att_req_alloc+0x3c>)
   31148:	681b      	ldr	r3, [r3, #0]
   3114a:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   3114c:	bf04      	itt	eq
   3114e:	2400      	moveq	r4, #0
   31150:	2500      	moveq	r5, #0
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   31152:	a901      	add	r1, sp, #4
   31154:	4622      	mov	r2, r4
   31156:	462b      	mov	r3, r5
   31158:	4807      	ldr	r0, [pc, #28]	; (31178 <bt_att_req_alloc+0x40>)
   3115a:	f017 f903 	bl	48364 <k_mem_slab_alloc>
   3115e:	4601      	mov	r1, r0
   31160:	b930      	cbnz	r0, 31170 <bt_att_req_alloc+0x38>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   31162:	221c      	movs	r2, #28
   31164:	9801      	ldr	r0, [sp, #4]
   31166:	f01b f8cc 	bl	4c302 <memset>

	return req;
   3116a:	9801      	ldr	r0, [sp, #4]
}
   3116c:	b003      	add	sp, #12
   3116e:	bd30      	pop	{r4, r5, pc}
		return NULL;
   31170:	2000      	movs	r0, #0
   31172:	e7fb      	b.n	3116c <bt_att_req_alloc+0x34>
   31174:	20003fbc 	.word	0x20003fbc
   31178:	20000eb4 	.word	0x20000eb4

0003117c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   3117c:	b507      	push	{r0, r1, r2, lr}
   3117e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   31180:	6880      	ldr	r0, [r0, #8]
   31182:	b120      	cbz	r0, 3118e <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   31184:	f012 ff70 	bl	44068 <net_buf_unref>
		req->buf = NULL;
   31188:	9b01      	ldr	r3, [sp, #4]
   3118a:	2200      	movs	r2, #0
   3118c:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   3118e:	a901      	add	r1, sp, #4
   31190:	4802      	ldr	r0, [pc, #8]	; (3119c <bt_att_req_free+0x20>)
   31192:	f01f fe5d 	bl	50e50 <k_mem_slab_free>
}
   31196:	b003      	add	sp, #12
   31198:	f85d fb04 	ldr.w	pc, [sp], #4
   3119c:	20000eb4 	.word	0x20000eb4

000311a0 <att_handle_rsp>:
{
   311a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   311a4:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   311a6:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   311aa:	4688      	mov	r8, r1
   311ac:	4691      	mov	r9, r2
   311ae:	461f      	mov	r7, r3
	k_work_cancel_delayable(&chan->timeout_work);
   311b0:	f020 f80e 	bl	511d0 <k_work_cancel_delayable>
	if (!chan->req) {
   311b4:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   311b8:	2600      	movs	r6, #0
   311ba:	b1f0      	cbz	r0, 311fa <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   311bc:	4b10      	ldr	r3, [pc, #64]	; (31200 <att_handle_rsp+0x60>)
   311be:	4298      	cmp	r0, r3
   311c0:	d112      	bne.n	311e8 <att_handle_rsp+0x48>
		chan->req = NULL;
   311c2:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   311c6:	4635      	mov	r5, r6
	att_req_send_process(chan->att);
   311c8:	6820      	ldr	r0, [r4, #0]
   311ca:	f01c fdf3 	bl	4ddb4 <att_req_send_process>
	if (func) {
   311ce:	b13d      	cbz	r5, 311e0 <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   311d0:	6820      	ldr	r0, [r4, #0]
   311d2:	f8cd a000 	str.w	sl, [sp]
   311d6:	464b      	mov	r3, r9
   311d8:	4642      	mov	r2, r8
   311da:	4639      	mov	r1, r7
   311dc:	6800      	ldr	r0, [r0, #0]
   311de:	47a8      	blx	r5
}
   311e0:	2000      	movs	r0, #0
   311e2:	b002      	add	sp, #8
   311e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	func = chan->req->func;
   311e8:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   311ea:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
   311ec:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   311f0:	f7ff ffc4 	bl	3117c <bt_att_req_free>
	chan->req = NULL;
   311f4:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
   311f8:	e7e6      	b.n	311c8 <att_handle_rsp+0x28>
	bt_att_func_t func = NULL;
   311fa:	4605      	mov	r5, r0
   311fc:	e7e4      	b.n	311c8 <att_handle_rsp+0x28>
   311fe:	bf00      	nop
   31200:	2000402c 	.word	0x2000402c

00031204 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   31204:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
{
   31208:	b570      	push	{r4, r5, r6, lr}
   3120a:	4605      	mov	r5, r0
	if (!chan->req || chan->req == &cancel) {
   3120c:	b313      	cbz	r3, 31254 <att_error_rsp+0x50>
   3120e:	4a16      	ldr	r2, [pc, #88]	; (31268 <att_error_rsp+0x64>)
   31210:	4293      	cmp	r3, r2
   31212:	d01f      	beq.n	31254 <att_error_rsp+0x50>
	err = rsp->error;
   31214:	688b      	ldr	r3, [r1, #8]
	if (!att_change_security(chan->chan.chan.conn, err)) {
   31216:	6880      	ldr	r0, [r0, #8]
	err = rsp->error;
   31218:	78dc      	ldrb	r4, [r3, #3]
	switch (err) {
   3121a:	2c05      	cmp	r4, #5
   3121c:	d006      	beq.n	3122c <att_error_rsp+0x28>
   3121e:	2c0f      	cmp	r4, #15
   31220:	d119      	bne.n	31256 <att_error_rsp+0x52>
		if (conn->sec_level >= BT_SECURITY_L2)
   31222:	7a43      	ldrb	r3, [r0, #9]
   31224:	2b01      	cmp	r3, #1
   31226:	d816      	bhi.n	31256 <att_error_rsp+0x52>
		sec = BT_SECURITY_L2;
   31228:	2102      	movs	r1, #2
   3122a:	e007      	b.n	3123c <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
   3122c:	7a43      	ldrb	r3, [r0, #9]
   3122e:	2b01      	cmp	r3, #1
   31230:	d9fa      	bls.n	31228 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   31232:	2b02      	cmp	r3, #2
   31234:	d00c      	beq.n	31250 <att_error_rsp+0x4c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   31236:	2b03      	cmp	r3, #3
   31238:	d10d      	bne.n	31256 <att_error_rsp+0x52>
			sec = BT_SECURITY_L4;
   3123a:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   3123c:	f01c f86c 	bl	4d318 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   31240:	b948      	cbnz	r0, 31256 <att_error_rsp+0x52>
		chan->req->retrying = true;
   31242:	f8d5 20f4 	ldr.w	r2, [r5, #244]	; 0xf4
   31246:	7c13      	ldrb	r3, [r2, #16]
   31248:	f043 0301 	orr.w	r3, r3, #1
   3124c:	7413      	strb	r3, [r2, #16]
}
   3124e:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   31250:	2103      	movs	r1, #3
   31252:	e7f3      	b.n	3123c <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
   31254:	240e      	movs	r4, #14
	return att_handle_rsp(chan, NULL, 0, err);
   31256:	2200      	movs	r2, #0
   31258:	4623      	mov	r3, r4
   3125a:	4628      	mov	r0, r5
   3125c:	4611      	mov	r1, r2
}
   3125e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   31262:	f7ff bf9d 	b.w	311a0 <att_handle_rsp>
   31266:	bf00      	nop
   31268:	2000402c 	.word	0x2000402c

0003126c <bt_att_disconnected>:
{
   3126c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   3126e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   31272:	b085      	sub	sp, #20
   31274:	4604      	mov	r4, r0
	if (!att_chan->att) {
   31276:	b385      	cbz	r5, 312da <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   31278:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   3127c:	f105 0024 	add.w	r0, r5, #36	; 0x24
   31280:	f01c fa8b 	bl	4d79a <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   31284:	f1a4 0608 	sub.w	r6, r4, #8
   31288:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   3128c:	2200      	movs	r2, #0
   3128e:	2300      	movs	r3, #0
   31290:	4638      	mov	r0, r7
   31292:	f01e ff1f 	bl	500d4 <net_buf_get>
   31296:	4602      	mov	r2, r0
   31298:	bb08      	cbnz	r0, 312de <bt_att_disconnected+0x72>
	if (chan->req) {
   3129a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   3129e:	b123      	cbz	r3, 312aa <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   312a0:	4601      	mov	r1, r0
   312a2:	230e      	movs	r3, #14
   312a4:	4630      	mov	r0, r6
   312a6:	f7ff ff7b 	bl	311a0 <att_handle_rsp>
	chan->att = NULL;
   312aa:	2300      	movs	r3, #0
   312ac:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   312b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   312b2:	b993      	cbnz	r3, 312da <bt_att_disconnected+0x6e>
	att_reset(att);
   312b4:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   312b6:	9803      	ldr	r0, [sp, #12]
   312b8:	2200      	movs	r2, #0
   312ba:	2300      	movs	r3, #0
   312bc:	300c      	adds	r0, #12
   312be:	f01e ff09 	bl	500d4 <net_buf_get>
   312c2:	b978      	cbnz	r0, 312e4 <bt_att_disconnected+0x78>
	while (!sys_slist_is_empty(&att->reqs)) {
   312c4:	9803      	ldr	r0, [sp, #12]
Z_GENLIST_IS_EMPTY(slist)
   312c6:	6845      	ldr	r5, [r0, #4]
   312c8:	b97d      	cbnz	r5, 312ea <bt_att_disconnected+0x7e>
	att->conn = NULL;
   312ca:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   312cc:	a903      	add	r1, sp, #12
   312ce:	4810      	ldr	r0, [pc, #64]	; (31310 <bt_att_disconnected+0xa4>)
   312d0:	f01f fdbe 	bl	50e50 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   312d4:	6820      	ldr	r0, [r4, #0]
   312d6:	f001 fb51 	bl	3297c <bt_gatt_disconnected>
}
   312da:	b005      	add	sp, #20
   312dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   312de:	f012 fec3 	bl	44068 <net_buf_unref>
   312e2:	e7d3      	b.n	3128c <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   312e4:	f012 fec0 	bl	44068 <net_buf_unref>
   312e8:	e7e5      	b.n	312b6 <bt_att_disconnected+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   312ea:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
   312ec:	686e      	ldr	r6, [r5, #4]
   312ee:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   312f0:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   312f2:	4295      	cmp	r5, r2
	list->tail = node;
   312f4:	bf08      	it	eq
   312f6:	6083      	streq	r3, [r0, #8]
   312f8:	b136      	cbz	r6, 31308 <bt_att_disconnected+0x9c>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   312fa:	69ab      	ldr	r3, [r5, #24]
   312fc:	9300      	str	r3, [sp, #0]
   312fe:	2300      	movs	r3, #0
   31300:	461a      	mov	r2, r3
   31302:	210e      	movs	r1, #14
   31304:	6800      	ldr	r0, [r0, #0]
   31306:	47b0      	blx	r6
		bt_att_req_free(req);
   31308:	4628      	mov	r0, r5
   3130a:	f7ff ff37 	bl	3117c <bt_att_req_free>
   3130e:	e7d9      	b.n	312c4 <bt_att_disconnected+0x58>
   31310:	20000e60 	.word	0x20000e60

00031314 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   31314:	b510      	push	{r4, lr}
   31316:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   31318:	b330      	cbz	r0, 31368 <bt_att_req_cancel+0x54>
   3131a:	b329      	cbz	r1, 31368 <bt_att_req_cancel+0x54>
		return;
	}

	att = att_get(conn);
   3131c:	f01c fd0c 	bl	4dd38 <att_get>
	if (!att) {
   31320:	b310      	cbz	r0, 31368 <bt_att_req_cancel+0x54>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   31322:	6a43      	ldr	r3, [r0, #36]	; 0x24
   31324:	b15b      	cbz	r3, 3133e <bt_att_req_cancel+0x2a>
   31326:	f5b3 71a2 	subs.w	r1, r3, #324	; 0x144
   3132a:	d008      	beq.n	3133e <bt_att_req_cancel+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   3132c:	681b      	ldr	r3, [r3, #0]
   3132e:	b10b      	cbz	r3, 31334 <bt_att_req_cancel+0x20>
   31330:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
   31334:	f8d1 20f4 	ldr.w	r2, [r1, #244]	; 0xf4
   31338:	4294      	cmp	r4, r2
   3133a:	d005      	beq.n	31348 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3133c:	b963      	cbnz	r3, 31358 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   3133e:	4621      	mov	r1, r4
   31340:	3004      	adds	r0, #4
   31342:	f01c fa2a 	bl	4d79a <sys_slist_find_and_remove>
   31346:	e002      	b.n	3134e <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
   31348:	4b08      	ldr	r3, [pc, #32]	; (3136c <bt_att_req_cancel+0x58>)
   3134a:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4

	bt_att_req_free(req);
   3134e:	4620      	mov	r0, r4
}
   31350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   31354:	f7ff bf12 	b.w	3117c <bt_att_req_free>
   31358:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3135c:	b10a      	cbz	r2, 31362 <bt_att_req_cancel+0x4e>
   3135e:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   31362:	4619      	mov	r1, r3
   31364:	4613      	mov	r3, r2
   31366:	e7e5      	b.n	31334 <bt_att_req_cancel+0x20>
}
   31368:	bd10      	pop	{r4, pc}
   3136a:	bf00      	nop
   3136c:	2000402c 	.word	0x2000402c

00031370 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   31370:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   31372:	4904      	ldr	r1, [pc, #16]	; (31384 <db_hash_set+0x14>)
{
   31374:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   31376:	4618      	mov	r0, r3
   31378:	2210      	movs	r2, #16
   3137a:	47a0      	blx	r4

	BT_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash),
		       "Stored Hash: ");

	return 0;
}
   3137c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   31380:	bd10      	pop	{r4, pc}
   31382:	bf00      	nop
   31384:	20001f30 	.word	0x20001f30

00031388 <find_cf_cfg>:
{
   31388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3138a:	4c0f      	ldr	r4, [pc, #60]	; (313c8 <find_cf_cfg+0x40>)
   3138c:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   3138e:	2600      	movs	r6, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   31390:	4627      	mov	r7, r4
		if (!conn) {
   31392:	1c62      	adds	r2, r4, #1
   31394:	b985      	cbnz	r5, 313b8 <find_cf_cfg+0x30>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   31396:	4669      	mov	r1, sp
   31398:	4610      	mov	r0, r2
   3139a:	9500      	str	r5, [sp, #0]
   3139c:	f8cd 5003 	str.w	r5, [sp, #3]
   313a0:	f01c ffb8 	bl	4e314 <bt_addr_le_cmp>
   313a4:	b128      	cbz	r0, 313b2 <find_cf_cfg+0x2a>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   313a6:	3601      	adds	r6, #1
   313a8:	2e0c      	cmp	r6, #12
   313aa:	f104 0410 	add.w	r4, r4, #16
   313ae:	d1ef      	bne.n	31390 <find_cf_cfg+0x8>
	return NULL;
   313b0:	2700      	movs	r7, #0
}
   313b2:	4638      	mov	r0, r7
   313b4:	b003      	add	sp, #12
   313b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   313b8:	7821      	ldrb	r1, [r4, #0]
   313ba:	4628      	mov	r0, r5
   313bc:	f01b ffe1 	bl	4d382 <bt_conn_is_peer_addr_le>
   313c0:	2800      	cmp	r0, #0
   313c2:	d0f0      	beq.n	313a6 <find_cf_cfg+0x1e>
   313c4:	e7f5      	b.n	313b2 <find_cf_cfg+0x2a>
   313c6:	bf00      	nop
   313c8:	20004050 	.word	0x20004050

000313cc <find_sc_cfg>:
{
   313cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   313d0:	4c0d      	ldr	r4, [pc, #52]	; (31408 <find_sc_cfg+0x3c>)
   313d2:	4607      	mov	r7, r0
   313d4:	4688      	mov	r8, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   313d6:	2600      	movs	r6, #0
   313d8:	4625      	mov	r5, r4
   313da:	f04f 090c 	mov.w	r9, #12
		if (id == sc_cfg[i].id &&
   313de:	7823      	ldrb	r3, [r4, #0]
   313e0:	42bb      	cmp	r3, r7
   313e2:	d10a      	bne.n	313fa <find_sc_cfg+0x2e>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   313e4:	4641      	mov	r1, r8
   313e6:	1c60      	adds	r0, r4, #1
   313e8:	fb09 fa06 	mul.w	sl, r9, r6
   313ec:	f01c ff92 	bl	4e314 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   313f0:	b918      	cbnz	r0, 313fa <find_sc_cfg+0x2e>
			return &sc_cfg[i];
   313f2:	eb05 000a 	add.w	r0, r5, sl
}
   313f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   313fa:	3601      	adds	r6, #1
   313fc:	2e0c      	cmp	r6, #12
   313fe:	f104 040c 	add.w	r4, r4, #12
   31402:	d1ec      	bne.n	313de <find_sc_cfg+0x12>
	return NULL;
   31404:	2000      	movs	r0, #0
   31406:	e7f6      	b.n	313f6 <find_sc_cfg+0x2a>
   31408:	20006b82 	.word	0x20006b82

0003140c <gatt_sub_find>:
{
   3140c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3140e:	4c0f      	ldr	r4, [pc, #60]	; (3144c <gatt_sub_find+0x40>)
   31410:	4605      	mov	r5, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   31412:	2600      	movs	r6, #0
		struct gatt_sub *sub = &subscriptions[i];
   31414:	4627      	mov	r7, r4
		if (!conn) {
   31416:	1c62      	adds	r2, r4, #1
   31418:	b985      	cbnz	r5, 3143c <gatt_sub_find+0x30>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   3141a:	4669      	mov	r1, sp
   3141c:	4610      	mov	r0, r2
   3141e:	9500      	str	r5, [sp, #0]
   31420:	f8cd 5003 	str.w	r5, [sp, #3]
   31424:	f01c ff76 	bl	4e314 <bt_addr_le_cmp>
   31428:	b128      	cbz	r0, 31436 <gatt_sub_find+0x2a>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   3142a:	3601      	adds	r6, #1
   3142c:	2e0c      	cmp	r6, #12
   3142e:	f104 0410 	add.w	r4, r4, #16
   31432:	d1ef      	bne.n	31414 <gatt_sub_find+0x8>
	return NULL;
   31434:	2700      	movs	r7, #0
}
   31436:	4638      	mov	r0, r7
   31438:	b003      	add	sp, #12
   3143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   3143c:	7821      	ldrb	r1, [r4, #0]
   3143e:	4628      	mov	r0, r5
   31440:	f01b ff9f 	bl	4d382 <bt_conn_is_peer_addr_le>
   31444:	2800      	cmp	r0, #0
   31446:	d0f0      	beq.n	3142a <gatt_sub_find+0x1e>
   31448:	e7f5      	b.n	31436 <gatt_sub_find+0x2a>
   3144a:	bf00      	nop
   3144c:	200041a8 	.word	0x200041a8

00031450 <find_cf_cfg_by_addr>:
{
   31450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31454:	4c0c      	ldr	r4, [pc, #48]	; (31488 <find_cf_cfg_by_addr+0x38>)
   31456:	4607      	mov	r7, r0
   31458:	4688      	mov	r8, r1
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   3145a:	2600      	movs	r6, #0
   3145c:	4625      	mov	r5, r4
			if (id == cf_cfg[i].id &&
   3145e:	7823      	ldrb	r3, [r4, #0]
   31460:	42bb      	cmp	r3, r7
   31462:	d10a      	bne.n	3147a <find_cf_cfg_by_addr+0x2a>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   31464:	1c61      	adds	r1, r4, #1
   31466:	4640      	mov	r0, r8
   31468:	ea4f 1906 	mov.w	r9, r6, lsl #4
   3146c:	f01c ff52 	bl	4e314 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   31470:	b918      	cbnz	r0, 3147a <find_cf_cfg_by_addr+0x2a>
				return &cf_cfg[i];
   31472:	eb05 0009 	add.w	r0, r5, r9
}
   31476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   3147a:	3601      	adds	r6, #1
   3147c:	2e0c      	cmp	r6, #12
   3147e:	f104 0410 	add.w	r4, r4, #16
   31482:	d1ec      	bne.n	3145e <find_cf_cfg_by_addr+0xe>
	return NULL;
   31484:	2000      	movs	r0, #0
   31486:	e7f6      	b.n	31476 <find_cf_cfg_by_addr+0x26>
   31488:	20004050 	.word	0x20004050

0003148c <sc_store>:
{
   3148c:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   3148e:	4604      	mov	r4, r0
{
   31490:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   31492:	f814 2b01 	ldrb.w	r2, [r4], #1
{
   31496:	4605      	mov	r5, r0
	if (cfg->id) {
   31498:	b19a      	cbz	r2, 314c2 <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   3149a:	ae02      	add	r6, sp, #8
   3149c:	2104      	movs	r1, #4
   3149e:	4630      	mov	r0, r6
   314a0:	f018 fd68 	bl	49f74 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   314a4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   314a6:	4623      	mov	r3, r4
   314a8:	a803      	add	r0, sp, #12
   314aa:	4a07      	ldr	r2, [pc, #28]	; (314c8 <sc_store+0x3c>)
   314ac:	2124      	movs	r1, #36	; 0x24
   314ae:	f7fc f81b 	bl	2d4e8 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   314b2:	2204      	movs	r2, #4
   314b4:	f105 0108 	add.w	r1, r5, #8
   314b8:	a803      	add	r0, sp, #12
   314ba:	f7fa fd43 	bl	2bf44 <settings_save_one>
}
   314be:	b00c      	add	sp, #48	; 0x30
   314c0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   314c2:	9200      	str	r2, [sp, #0]
   314c4:	e7ef      	b.n	314a6 <sc_store+0x1a>
   314c6:	bf00      	nop
   314c8:	000544d3 	.word	0x000544d3

000314cc <bt_gatt_store_cf>:
{
   314cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   314ce:	b08d      	sub	sp, #52	; 0x34
   314d0:	4605      	mov	r5, r0
	cfg = find_cf_cfg(conn);
   314d2:	f7ff ff59 	bl	31388 <find_cf_cfg>
	if (!cfg) {
   314d6:	f105 0688 	add.w	r6, r5, #136	; 0x88
   314da:	4604      	mov	r4, r0
   314dc:	b300      	cbz	r0, 31520 <bt_gatt_store_cf+0x54>
		if (conn->id) {
   314de:	7a2a      	ldrb	r2, [r5, #8]
		str = (char *)cfg->data;
   314e0:	3408      	adds	r4, #8
		if (conn->id) {
   314e2:	b1fa      	cbz	r2, 31524 <bt_gatt_store_cf+0x58>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   314e4:	af02      	add	r7, sp, #8
   314e6:	2104      	movs	r1, #4
   314e8:	4638      	mov	r0, r7
   314ea:	f018 fd43 	bl	49f74 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   314ee:	4633      	mov	r3, r6
   314f0:	9700      	str	r7, [sp, #0]
   314f2:	4a0d      	ldr	r2, [pc, #52]	; (31528 <bt_gatt_store_cf+0x5c>)
   314f4:	2124      	movs	r1, #36	; 0x24
   314f6:	a803      	add	r0, sp, #12
   314f8:	f7fb fff6 	bl	2d4e8 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   314fc:	7a2b      	ldrb	r3, [r5, #8]
   314fe:	2501      	movs	r5, #1
   31500:	b93b      	cbnz	r3, 31512 <bt_gatt_store_cf+0x46>
		bt_settings_encode_key(key, sizeof(key), "cf",
   31502:	2300      	movs	r3, #0
   31504:	9300      	str	r3, [sp, #0]
   31506:	4a08      	ldr	r2, [pc, #32]	; (31528 <bt_gatt_store_cf+0x5c>)
   31508:	4633      	mov	r3, r6
   3150a:	2124      	movs	r1, #36	; 0x24
   3150c:	a803      	add	r0, sp, #12
   3150e:	f7fb ffeb 	bl	2d4e8 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   31512:	462a      	mov	r2, r5
   31514:	4621      	mov	r1, r4
   31516:	a803      	add	r0, sp, #12
   31518:	f7fa fd14 	bl	2bf44 <settings_save_one>
}
   3151c:	b00d      	add	sp, #52	; 0x34
   3151e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   31520:	4605      	mov	r5, r0
   31522:	e7ee      	b.n	31502 <bt_gatt_store_cf+0x36>
   31524:	2501      	movs	r5, #1
   31526:	e7ec      	b.n	31502 <bt_gatt_store_cf+0x36>
   31528:	000544cd 	.word	0x000544cd

0003152c <db_hash_commit>:

static int db_hash_commit(void)
{
   3152c:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   3152e:	2108      	movs	r1, #8
   31530:	4804      	ldr	r0, [pc, #16]	; (31544 <db_hash_commit+0x18>)
   31532:	f01c fee0 	bl	4e2f6 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	k_work_reschedule(&db_hash.work, K_NO_WAIT);
   31536:	2200      	movs	r2, #0
   31538:	2300      	movs	r3, #0
   3153a:	4803      	ldr	r0, [pc, #12]	; (31548 <db_hash_commit+0x1c>)
   3153c:	f017 fbc6 	bl	48ccc <k_work_reschedule>

	return 0;
}
   31540:	2000      	movs	r0, #0
   31542:	bd08      	pop	{r3, pc}
   31544:	20002030 	.word	0x20002030
   31548:	20001f40 	.word	0x20001f40

0003154c <bt_gatt_attr_write_ccc>:
{
   3154c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31550:	4698      	mov	r8, r3
   31552:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   31556:	68cf      	ldr	r7, [r1, #12]
{
   31558:	4605      	mov	r5, r0
   3155a:	4689      	mov	r9, r1
	if (offset) {
   3155c:	2b00      	cmp	r3, #0
   3155e:	d160      	bne.n	31622 <bt_gatt_attr_write_ccc+0xd6>
	if (!len || len > sizeof(uint16_t)) {
   31560:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   31564:	2b01      	cmp	r3, #1
   31566:	d85f      	bhi.n	31628 <bt_gatt_attr_write_ccc+0xdc>
	if (len < sizeof(uint16_t)) {
   31568:	f1b8 0f01 	cmp.w	r8, #1
		value = *(uint8_t *)buf;
   3156c:	7814      	ldrb	r4, [r2, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   3156e:	bf18      	it	ne
   31570:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   31572:	4639      	mov	r1, r7
		value = *(uint8_t *)buf;
   31574:	bf0c      	ite	eq
   31576:	b2a4      	uxtheq	r4, r4
   31578:	ea44 2403 	orrne.w	r4, r4, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   3157c:	f01c fecd 	bl	4e31a <find_ccc_cfg>
	if (!cfg) {
   31580:	4606      	mov	r6, r0
   31582:	b980      	cbnz	r0, 315a6 <bt_gatt_attr_write_ccc+0x5a>
		if (!value) {
   31584:	b914      	cbnz	r4, 3158c <bt_gatt_attr_write_ccc+0x40>
			return len;
   31586:	4640      	mov	r0, r8
}
   31588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   3158c:	4639      	mov	r1, r7
   3158e:	f01c fec4 	bl	4e31a <find_ccc_cfg>
		if (!cfg) {
   31592:	4606      	mov	r6, r0
   31594:	2800      	cmp	r0, #0
   31596:	d04a      	beq.n	3162e <bt_gatt_attr_write_ccc+0xe2>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   31598:	f105 0188 	add.w	r1, r5, #136	; 0x88
   3159c:	3001      	adds	r0, #1
   3159e:	f01c fef6 	bl	4e38e <bt_addr_le_copy>
		cfg->id = conn->id;
   315a2:	7a2b      	ldrb	r3, [r5, #8]
   315a4:	7033      	strb	r3, [r6, #0]
	if (ccc->cfg_write) {
   315a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   315a8:	bb7b      	cbnz	r3, 3160a <bt_gatt_attr_write_ccc+0xbe>
	if (cfg->value != ccc->value) {
   315aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
	value_changed = cfg->value != value;
   315ac:	f8b6 a008 	ldrh.w	sl, [r6, #8]
	cfg->value = value;
   315b0:	8134      	strh	r4, [r6, #8]
	if (cfg->value != ccc->value) {
   315b2:	42a3      	cmp	r3, r4
   315b4:	d003      	beq.n	315be <bt_gatt_attr_write_ccc+0x72>
		gatt_ccc_changed(attr, ccc);
   315b6:	4639      	mov	r1, r7
   315b8:	4648      	mov	r0, r9
   315ba:	f01c fe10 	bl	4e1de <gatt_ccc_changed>
	if (value_changed) {
   315be:	45a2      	cmp	sl, r4
   315c0:	d01d      	beq.n	315fe <bt_gatt_attr_write_ccc+0xb2>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   315c2:	4628      	mov	r0, r5
   315c4:	f7fe fb52 	bl	2fc6c <bt_conn_index>
   315c8:	4f1a      	ldr	r7, [pc, #104]	; (31634 <bt_gatt_attr_write_ccc+0xe8>)
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   315ca:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
   315ce:	429d      	cmp	r5, r3
   315d0:	d015      	beq.n	315fe <bt_gatt_attr_write_ccc+0xb2>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   315d2:	f105 0188 	add.w	r1, r5, #136	; 0x88
   315d6:	7a28      	ldrb	r0, [r5, #8]
   315d8:	f01b fab6 	bl	4cb48 <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   315dc:	b178      	cbz	r0, 315fe <bt_gatt_attr_write_ccc+0xb2>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   315de:	4628      	mov	r0, r5
   315e0:	f7fe fb44 	bl	2fc6c <bt_conn_index>
   315e4:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   315e6:	4628      	mov	r0, r5
   315e8:	f01b fe0f 	bl	4d20a <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   315ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   315f0:	f847 0029 	str.w	r0, [r7, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   315f4:	2300      	movs	r3, #0
   315f6:	f107 0018 	add.w	r0, r7, #24
   315fa:	f017 fb67 	bl	48ccc <k_work_reschedule>
	if (!value) {
   315fe:	2c00      	cmp	r4, #0
   31600:	d1c1      	bne.n	31586 <bt_gatt_attr_write_ccc+0x3a>
		clear_ccc_cfg(cfg);
   31602:	4630      	mov	r0, r6
   31604:	f01c fec6 	bl	4e394 <clear_ccc_cfg>
   31608:	e7bd      	b.n	31586 <bt_gatt_attr_write_ccc+0x3a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   3160a:	4622      	mov	r2, r4
   3160c:	4649      	mov	r1, r9
   3160e:	4628      	mov	r0, r5
   31610:	4798      	blx	r3
		if (write < 0) {
   31612:	2800      	cmp	r0, #0
   31614:	dbb8      	blt.n	31588 <bt_gatt_attr_write_ccc+0x3c>
		if (write != sizeof(value) && write != 1) {
   31616:	3801      	subs	r0, #1
   31618:	2801      	cmp	r0, #1
   3161a:	d9c6      	bls.n	315aa <bt_gatt_attr_write_ccc+0x5e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   3161c:	f06f 000d 	mvn.w	r0, #13
   31620:	e7b2      	b.n	31588 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   31622:	f06f 0006 	mvn.w	r0, #6
   31626:	e7af      	b.n	31588 <bt_gatt_attr_write_ccc+0x3c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   31628:	f06f 000c 	mvn.w	r0, #12
   3162c:	e7ac      	b.n	31588 <bt_gatt_attr_write_ccc+0x3c>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   3162e:	f06f 0010 	mvn.w	r0, #16
   31632:	e7a9      	b.n	31588 <bt_gatt_attr_write_ccc+0x3c>
   31634:	20001f98 	.word	0x20001f98

00031638 <ccc_save>:
{
   31638:	b538      	push	{r3, r4, r5, lr}
   3163a:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   3163c:	4b0b      	ldr	r3, [pc, #44]	; (3166c <ccc_save+0x34>)
   3163e:	6882      	ldr	r2, [r0, #8]
   31640:	429a      	cmp	r2, r3
{
   31642:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   31644:	d10f      	bne.n	31666 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   31646:	7922      	ldrb	r2, [r4, #4]
   31648:	6821      	ldr	r1, [r4, #0]
   3164a:	68c0      	ldr	r0, [r0, #12]
   3164c:	f01c fe84 	bl	4e358 <ccc_find_cfg>
	if (!cfg) {
   31650:	b148      	cbz	r0, 31666 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   31652:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   31656:	8901      	ldrh	r1, [r0, #8]
   31658:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   3165c:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   3165e:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   31660:	8151      	strh	r1, [r2, #10]
	save->count++;
   31662:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   31666:	2001      	movs	r0, #1
   31668:	bd38      	pop	{r3, r4, r5, pc}
   3166a:	bf00      	nop
   3166c:	0003154d 	.word	0x0003154d

00031670 <convert_to_id_on_match>:
{
   31670:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31672:	4b0b      	ldr	r3, [pc, #44]	; (316a0 <convert_to_id_on_match+0x30>)
{
   31674:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31676:	6882      	ldr	r2, [r0, #8]
   31678:	429a      	cmp	r2, r3
   3167a:	d10e      	bne.n	3169a <convert_to_id_on_match+0x2a>
	ccc = attr->user_data;
   3167c:	68c5      	ldr	r5, [r0, #12]
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   3167e:	1c6c      	adds	r4, r5, #1
   31680:	353d      	adds	r5, #61	; 0x3d
		if (bt_addr_le_cmp(&ccc->cfg[i].peer, match->private_addr) == 0) {
   31682:	6831      	ldr	r1, [r6, #0]
   31684:	4620      	mov	r0, r4
   31686:	f01c fe45 	bl	4e314 <bt_addr_le_cmp>
   3168a:	b918      	cbnz	r0, 31694 <convert_to_id_on_match+0x24>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   3168c:	6871      	ldr	r1, [r6, #4]
   3168e:	4620      	mov	r0, r4
   31690:	f01c fe7d 	bl	4e38e <bt_addr_le_copy>
   31694:	340a      	adds	r4, #10
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31696:	42ac      	cmp	r4, r5
   31698:	d1f3      	bne.n	31682 <convert_to_id_on_match+0x12>
}
   3169a:	2001      	movs	r0, #1
   3169c:	bd70      	pop	{r4, r5, r6, pc}
   3169e:	bf00      	nop
   316a0:	0003154d 	.word	0x0003154d

000316a4 <ccc_load>:
{
   316a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   316a6:	4b21      	ldr	r3, [pc, #132]	; (3172c <ccc_load+0x88>)
{
   316a8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   316aa:	6882      	ldr	r2, [r0, #8]
   316ac:	429a      	cmp	r2, r3
   316ae:	d002      	beq.n	316b6 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   316b0:	2001      	movs	r0, #1
}
   316b2:	b002      	add	sp, #8
   316b4:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   316b6:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
   316b8:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   316ba:	b94b      	cbnz	r3, 316d0 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   316bc:	7922      	ldrb	r2, [r4, #4]
   316be:	6821      	ldr	r1, [r4, #0]
   316c0:	4630      	mov	r0, r6
   316c2:	f01c fe49 	bl	4e358 <ccc_find_cfg>
	if (!cfg) {
   316c6:	2800      	cmp	r0, #0
   316c8:	d0f2      	beq.n	316b0 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   316ca:	f01c fe63 	bl	4e394 <clear_ccc_cfg>
   316ce:	e7ef      	b.n	316b0 <ccc_load+0xc>
	} else if (!load->count) {
   316d0:	68e0      	ldr	r0, [r4, #12]
   316d2:	2800      	cmp	r0, #0
   316d4:	d0ed      	beq.n	316b2 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   316d6:	881b      	ldrh	r3, [r3, #0]
   316d8:	4299      	cmp	r1, r3
   316da:	d00a      	beq.n	316f2 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   316dc:	d9e8      	bls.n	316b0 <ccc_load+0xc>
	load->count--;
   316de:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   316e0:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   316e2:	3801      	subs	r0, #1
	load->entry++;
   316e4:	3304      	adds	r3, #4
	load->count--;
   316e6:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   316e8:	3000      	adds	r0, #0
	load->entry++;
   316ea:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   316ec:	bf18      	it	ne
   316ee:	2001      	movne	r0, #1
   316f0:	e7df      	b.n	316b2 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   316f2:	7922      	ldrb	r2, [r4, #4]
   316f4:	6821      	ldr	r1, [r4, #0]
   316f6:	4630      	mov	r0, r6
   316f8:	f01c fe2e 	bl	4e358 <ccc_find_cfg>
	if (!cfg) {
   316fc:	4605      	mov	r5, r0
   316fe:	b980      	cbnz	r0, 31722 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   31700:	9000      	str	r0, [sp, #0]
   31702:	4602      	mov	r2, r0
   31704:	f8cd 0003 	str.w	r0, [sp, #3]
   31708:	4669      	mov	r1, sp
   3170a:	4630      	mov	r0, r6
   3170c:	f01c fe24 	bl	4e358 <ccc_find_cfg>
		if (!cfg) {
   31710:	4605      	mov	r5, r0
   31712:	2800      	cmp	r0, #0
   31714:	d0e3      	beq.n	316de <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   31716:	6821      	ldr	r1, [r4, #0]
   31718:	3001      	adds	r0, #1
   3171a:	f01c fe38 	bl	4e38e <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   3171e:	7923      	ldrb	r3, [r4, #4]
   31720:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   31722:	68a3      	ldr	r3, [r4, #8]
   31724:	885b      	ldrh	r3, [r3, #2]
   31726:	812b      	strh	r3, [r5, #8]
   31728:	e7d9      	b.n	316de <ccc_load+0x3a>
   3172a:	bf00      	nop
   3172c:	0003154d 	.word	0x0003154d

00031730 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   31730:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   31732:	6881      	ldr	r1, [r0, #8]
{
   31734:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31736:	4a07      	ldr	r2, [pc, #28]	; (31754 <remove_peer_from_attr+0x24>)
   31738:	4291      	cmp	r1, r2
   3173a:	d109      	bne.n	31750 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   3173c:	791a      	ldrb	r2, [r3, #4]
   3173e:	6819      	ldr	r1, [r3, #0]
   31740:	68c0      	ldr	r0, [r0, #12]
   31742:	f01c fe09 	bl	4e358 <ccc_find_cfg>
	if (cfg) {
   31746:	b118      	cbz	r0, 31750 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   31748:	220a      	movs	r2, #10
   3174a:	2100      	movs	r1, #0
   3174c:	f01a fdd9 	bl	4c302 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   31750:	2001      	movs	r0, #1
   31752:	bd08      	pop	{r3, pc}
   31754:	0003154d 	.word	0x0003154d

00031758 <sc_commit>:
{
   31758:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3175a:	f06f 0102 	mvn.w	r1, #2
   3175e:	4808      	ldr	r0, [pc, #32]	; (31780 <sc_commit+0x28>)
   31760:	f01c fe84 	bl	4e46c <atomic_and>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   31764:	2100      	movs	r1, #0
   31766:	4806      	ldr	r0, [pc, #24]	; (31780 <sc_commit+0x28>)
   31768:	f01c fd69 	bl	4e23e <atomic_test_bit>
   3176c:	b128      	cbz	r0, 3177a <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   3176e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   31772:	2300      	movs	r3, #0
   31774:	4803      	ldr	r0, [pc, #12]	; (31784 <sc_commit+0x2c>)
   31776:	f017 faa9 	bl	48ccc <k_work_reschedule>
}
   3177a:	2000      	movs	r0, #0
   3177c:	bd08      	pop	{r3, pc}
   3177e:	bf00      	nop
   31780:	20002030 	.word	0x20002030
   31784:	20002000 	.word	0x20002000

00031788 <read_ppcp>:
{
   31788:	b513      	push	{r0, r1, r4, lr}
   3178a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   3178e:	4c0b      	ldr	r4, [pc, #44]	; (317bc <read_ppcp+0x34>)
{
   31790:	4610      	mov	r0, r2
	if (offset > value_len) {
   31792:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   31794:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   31798:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   3179c:	d80b      	bhi.n	317b6 <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   3179e:	f1c1 0408 	rsb	r4, r1, #8
   317a2:	429c      	cmp	r4, r3
   317a4:	bfa8      	it	ge
   317a6:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   317a8:	4622      	mov	r2, r4
   317aa:	4469      	add	r1, sp
   317ac:	f01a fd9e 	bl	4c2ec <memcpy>
}
   317b0:	4620      	mov	r0, r4
   317b2:	b002      	add	sp, #8
   317b4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   317b6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   317ba:	e7f9      	b.n	317b0 <read_ppcp+0x28>
   317bc:	00280018 	.word	0x00280018

000317c0 <sc_indicate_rsp>:
{
   317c0:	b510      	push	{r4, lr}
   317c2:	f06f 0102 	mvn.w	r1, #2
   317c6:	4604      	mov	r4, r0
   317c8:	480d      	ldr	r0, [pc, #52]	; (31800 <sc_indicate_rsp+0x40>)
   317ca:	f01c fe4f 	bl	4e46c <atomic_and>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   317ce:	2100      	movs	r1, #0
   317d0:	480b      	ldr	r0, [pc, #44]	; (31800 <sc_indicate_rsp+0x40>)
   317d2:	f01c fd34 	bl	4e23e <atomic_test_bit>
   317d6:	b120      	cbz	r0, 317e2 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   317d8:	2200      	movs	r2, #0
   317da:	2300      	movs	r3, #0
   317dc:	4809      	ldr	r0, [pc, #36]	; (31804 <sc_indicate_rsp+0x44>)
   317de:	f017 fa75 	bl	48ccc <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   317e2:	4620      	mov	r0, r4
   317e4:	f7ff fdd0 	bl	31388 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   317e8:	b140      	cbz	r0, 317fc <sc_indicate_rsp+0x3c>
   317ea:	7a03      	ldrb	r3, [r0, #8]
   317ec:	07db      	lsls	r3, r3, #31
   317ee:	d505      	bpl.n	317fc <sc_indicate_rsp+0x3c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   317f0:	2101      	movs	r1, #1
   317f2:	300c      	adds	r0, #12
}
   317f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   317f8:	f01c bd7d 	b.w	4e2f6 <atomic_or>
   317fc:	bd10      	pop	{r4, pc}
   317fe:	bf00      	nop
   31800:	20002030 	.word	0x20002030
   31804:	20002000 	.word	0x20002000

00031808 <bt_gatt_clear_sc>:
{
   31808:	b570      	push	{r4, r5, r6, lr}
   3180a:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   3180c:	f7ff fdde 	bl	313cc <find_sc_cfg>
	if (!cfg) {
   31810:	4605      	mov	r5, r0
   31812:	b1b8      	cbz	r0, 31844 <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
   31814:	4604      	mov	r4, r0
   31816:	f814 2b01 	ldrb.w	r2, [r4], #1
   3181a:	b1b2      	cbz	r2, 3184a <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   3181c:	ae02      	add	r6, sp, #8
   3181e:	2104      	movs	r1, #4
   31820:	4630      	mov	r0, r6
   31822:	f018 fba7 	bl	49f74 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   31826:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   31828:	4a09      	ldr	r2, [pc, #36]	; (31850 <bt_gatt_clear_sc+0x48>)
   3182a:	2124      	movs	r1, #36	; 0x24
   3182c:	4623      	mov	r3, r4
   3182e:	a803      	add	r0, sp, #12
   31830:	f7fb fe5a 	bl	2d4e8 <bt_settings_encode_key>
		err = settings_delete(key);
   31834:	a803      	add	r0, sp, #12
   31836:	f019 fa57 	bl	4ace8 <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
   3183a:	220c      	movs	r2, #12
   3183c:	2100      	movs	r1, #0
   3183e:	4628      	mov	r0, r5
   31840:	f01a fd5f 	bl	4c302 <memset>
}
   31844:	2000      	movs	r0, #0
   31846:	b00c      	add	sp, #48	; 0x30
   31848:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   3184a:	9200      	str	r2, [sp, #0]
   3184c:	e7ec      	b.n	31828 <bt_gatt_clear_sc+0x20>
   3184e:	bf00      	nop
   31850:	000544d3 	.word	0x000544d3

00031854 <disconnected_cb>:
{
   31854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31858:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   3185a:	4b23      	ldr	r3, [pc, #140]	; (318e8 <disconnected_cb+0x94>)
   3185c:	6882      	ldr	r2, [r0, #8]
   3185e:	429a      	cmp	r2, r3
{
   31860:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   31862:	d12a      	bne.n	318ba <disconnected_cb+0x66>
	ccc = attr->user_data;
   31864:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   31866:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
   31868:	b33b      	cbz	r3, 318ba <disconnected_cb+0x66>
				if (ccc == &sc_ccc) {
   3186a:	f8df b080 	ldr.w	fp, [pc, #128]	; 318ec <disconnected_cb+0x98>
   3186e:	1c6c      	adds	r4, r5, #1
   31870:	f105 0a3d 	add.w	sl, r5, #61	; 0x3d
	value_used = false;
   31874:	2600      	movs	r6, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   31876:	f107 0988 	add.w	r9, r7, #136	; 0x88
		if (!cfg->value) {
   3187a:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   3187e:	b193      	cbz	r3, 318a6 <disconnected_cb+0x52>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   31880:	4622      	mov	r2, r4
   31882:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   31886:	4638      	mov	r0, r7
   31888:	f01b fd7b 	bl	4d382 <bt_conn_is_peer_addr_le>
   3188c:	b9c0      	cbnz	r0, 318c0 <disconnected_cb+0x6c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   3188e:	4621      	mov	r1, r4
   31890:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   31894:	f01b fd9d 	bl	4d3d2 <bt_conn_lookup_addr_le>
			if (tmp) {
   31898:	b128      	cbz	r0, 318a6 <disconnected_cb+0x52>
				if (tmp->state == BT_CONN_CONNECTED) {
   3189a:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   3189c:	2b07      	cmp	r3, #7
   3189e:	bf08      	it	eq
   318a0:	2601      	moveq	r6, #1
				bt_conn_unref(tmp);
   318a2:	f01b fcb4 	bl	4d20e <bt_conn_unref>
   318a6:	340a      	adds	r4, #10
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   318a8:	45a2      	cmp	sl, r4
   318aa:	d1e6      	bne.n	3187a <disconnected_cb+0x26>
	if (!value_used) {
   318ac:	b92e      	cbnz	r6, 318ba <disconnected_cb+0x66>
		if (ccc->cfg_changed) {
   318ae:	6c2b      	ldr	r3, [r5, #64]	; 0x40
		ccc->value = 0U;
   318b0:	87ae      	strh	r6, [r5, #60]	; 0x3c
		if (ccc->cfg_changed) {
   318b2:	b113      	cbz	r3, 318ba <disconnected_cb+0x66>
			ccc->cfg_changed(attr, ccc->value);
   318b4:	4631      	mov	r1, r6
   318b6:	4640      	mov	r0, r8
   318b8:	4798      	blx	r3
}
   318ba:	2001      	movs	r0, #1
   318bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   318c0:	4649      	mov	r1, r9
   318c2:	7a38      	ldrb	r0, [r7, #8]
   318c4:	f01b f940 	bl	4cb48 <bt_addr_le_is_bonded>
   318c8:	b940      	cbnz	r0, 318dc <disconnected_cb+0x88>
				if (ccc == &sc_ccc) {
   318ca:	455d      	cmp	r5, fp
   318cc:	d102      	bne.n	318d4 <disconnected_cb+0x80>
					sc_clear(conn);
   318ce:	4638      	mov	r0, r7
   318d0:	f01d f84b 	bl	4e96a <sc_clear>
				clear_ccc_cfg(cfg);
   318d4:	1e60      	subs	r0, r4, #1
   318d6:	f01c fd5d 	bl	4e394 <clear_ccc_cfg>
   318da:	e7e4      	b.n	318a6 <disconnected_cb+0x52>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   318dc:	4649      	mov	r1, r9
   318de:	4620      	mov	r0, r4
   318e0:	f01c fd55 	bl	4e38e <bt_addr_le_copy>
   318e4:	e7df      	b.n	318a6 <disconnected_cb+0x52>
   318e6:	bf00      	nop
   318e8:	0003154d 	.word	0x0003154d
   318ec:	20000630 	.word	0x20000630

000318f0 <gatt_write_ccc>:
{
   318f0:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   318f2:	2312      	movs	r3, #18
   318f4:	2204      	movs	r2, #4
   318f6:	e9cd 3200 	strd	r3, r2, [sp]
   318fa:	460a      	mov	r2, r1
   318fc:	4b03      	ldr	r3, [pc, #12]	; (3190c <gatt_write_ccc+0x1c>)
   318fe:	4904      	ldr	r1, [pc, #16]	; (31910 <gatt_write_ccc+0x20>)
   31900:	f01d f85c 	bl	4e9bc <gatt_req_send>
}
   31904:	b003      	add	sp, #12
   31906:	f85d fb04 	ldr.w	pc, [sp], #4
   3190a:	bf00      	nop
   3190c:	0004e6bf 	.word	0x0004e6bf
   31910:	0004e775 	.word	0x0004e775

00031914 <bt_gatt_init>:
{
   31914:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   31916:	4b26      	ldr	r3, [pc, #152]	; (319b0 <bt_gatt_init+0x9c>)
   31918:	f3bf 8f5b 	dmb	ish
   3191c:	2201      	movs	r2, #1
   3191e:	e853 1f00 	ldrex	r1, [r3]
   31922:	2900      	cmp	r1, #0
   31924:	d103      	bne.n	3192e <bt_gatt_init+0x1a>
   31926:	e843 2000 	strex	r0, r2, [r3]
   3192a:	2800      	cmp	r0, #0
   3192c:	d1f7      	bne.n	3191e <bt_gatt_init+0xa>
   3192e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   31932:	d13b      	bne.n	319ac <bt_gatt_init+0x98>
   31934:	f3bf 8f5b 	dmb	ish
   31938:	4b1e      	ldr	r3, [pc, #120]	; (319b4 <bt_gatt_init+0xa0>)
   3193a:	e853 1f00 	ldrex	r1, [r3]
   3193e:	2900      	cmp	r1, #0
   31940:	d103      	bne.n	3194a <bt_gatt_init+0x36>
   31942:	e843 2000 	strex	r0, r2, [r3]
   31946:	2800      	cmp	r0, #0
   31948:	d1f7      	bne.n	3193a <bt_gatt_init+0x26>
   3194a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   3194e:	d108      	bne.n	31962 <bt_gatt_init+0x4e>
   31950:	4a19      	ldr	r2, [pc, #100]	; (319b8 <bt_gatt_init+0xa4>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   31952:	491a      	ldr	r1, [pc, #104]	; (319bc <bt_gatt_init+0xa8>)
   31954:	8813      	ldrh	r3, [r2, #0]
   31956:	4c1a      	ldr	r4, [pc, #104]	; (319c0 <bt_gatt_init+0xac>)
	if (!atomic_cas(&service_init, 0, 1)) {
   31958:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   3195a:	42a1      	cmp	r1, r4
   3195c:	d320      	bcc.n	319a0 <bt_gatt_init+0x8c>
   3195e:	b100      	cbz	r0, 31962 <bt_gatt_init+0x4e>
   31960:	8013      	strh	r3, [r2, #0]
	list->head = NULL;
   31962:	4b18      	ldr	r3, [pc, #96]	; (319c4 <bt_gatt_init+0xb0>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   31964:	4918      	ldr	r1, [pc, #96]	; (319c8 <bt_gatt_init+0xb4>)
   31966:	4819      	ldr	r0, [pc, #100]	; (319cc <bt_gatt_init+0xb8>)
   31968:	2200      	movs	r2, #0
	list->tail = NULL;
   3196a:	e9c3 2200 	strd	r2, r2, [r3]
   3196e:	f01f fc24 	bl	511ba <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   31972:	f44f 72a4 	mov.w	r2, #328	; 0x148
   31976:	2300      	movs	r3, #0
   31978:	4814      	ldr	r0, [pc, #80]	; (319cc <bt_gatt_init+0xb8>)
   3197a:	f017 f973 	bl	48c64 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   3197e:	4914      	ldr	r1, [pc, #80]	; (319d0 <bt_gatt_init+0xbc>)
   31980:	4814      	ldr	r0, [pc, #80]	; (319d4 <bt_gatt_init+0xc0>)
   31982:	f01f fc1a 	bl	511ba <k_work_init_delayable>
   31986:	2102      	movs	r1, #2
   31988:	4813      	ldr	r0, [pc, #76]	; (319d8 <bt_gatt_init+0xc4>)
   3198a:	f01c fcb4 	bl	4e2f6 <atomic_or>
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   3198e:	4813      	ldr	r0, [pc, #76]	; (319dc <bt_gatt_init+0xc8>)
   31990:	4913      	ldr	r1, [pc, #76]	; (319e0 <bt_gatt_init+0xcc>)
   31992:	f01f fc12 	bl	511ba <k_work_init_delayable>
	bt_conn_cb_register(&gatt_conn_cb);
   31996:	4813      	ldr	r0, [pc, #76]	; (319e4 <bt_gatt_init+0xd0>)
}
   31998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   3199c:	f7fe ba7c 	b.w	2fe98 <bt_conn_cb_register>
		last_static_handle += svc->attr_count;
   319a0:	6848      	ldr	r0, [r1, #4]
   319a2:	4403      	add	r3, r0
   319a4:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   319a6:	3108      	adds	r1, #8
   319a8:	2001      	movs	r0, #1
   319aa:	e7d6      	b.n	3195a <bt_gatt_init+0x46>
}
   319ac:	bd10      	pop	{r4, pc}
   319ae:	bf00      	nop
   319b0:	20004110 	.word	0x20004110
   319b4:	200041a4 	.word	0x200041a4
   319b8:	20006b80 	.word	0x20006b80
   319bc:	00051c90 	.word	0x00051c90
   319c0:	00051cb8 	.word	0x00051cb8
   319c4:	20004048 	.word	0x20004048
   319c8:	00031b69 	.word	0x00031b69
   319cc:	20001f40 	.word	0x20001f40
   319d0:	00031e51 	.word	0x00031e51
   319d4:	20002000 	.word	0x20002000
   319d8:	20002030 	.word	0x20002030
   319dc:	20001fb0 	.word	0x20001fb0
   319e0:	0004f24f 	.word	0x0004f24f
   319e4:	20000610 	.word	0x20000610

000319e8 <bt_gatt_attr_get_handle>:
{
   319e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   319ec:	4603      	mov	r3, r0
   319ee:	b148      	cbz	r0, 31a04 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   319f0:	8a00      	ldrh	r0, [r0, #16]
   319f2:	b938      	cbnz	r0, 31a04 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   319f4:	4912      	ldr	r1, [pc, #72]	; (31a40 <bt_gatt_attr_get_handle+0x58>)
   319f6:	f8df e04c 	ldr.w	lr, [pc, #76]	; 31a44 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   319fa:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   319fc:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31a00:	4571      	cmp	r1, lr
   31a02:	d301      	bcc.n	31a08 <bt_gatt_attr_get_handle+0x20>
}
   31a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   31a08:	e9d1 7600 	ldrd	r7, r6, [r1]
   31a0c:	42bb      	cmp	r3, r7
   31a0e:	d304      	bcc.n	31a1a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   31a10:	fb0c 7206 	mla	r2, ip, r6, r7
   31a14:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   31a16:	4293      	cmp	r3, r2
   31a18:	d90e      	bls.n	31a38 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   31a1a:	19a2      	adds	r2, r4, r6
   31a1c:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31a1e:	3108      	adds	r1, #8
   31a20:	4614      	mov	r4, r2
   31a22:	e7ed      	b.n	31a00 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   31a24:	fb0c 7805 	mla	r8, ip, r5, r7
   31a28:	4543      	cmp	r3, r8
   31a2a:	d007      	beq.n	31a3c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   31a2c:	3501      	adds	r5, #1
   31a2e:	1962      	adds	r2, r4, r5
   31a30:	42b5      	cmp	r5, r6
   31a32:	b292      	uxth	r2, r2
   31a34:	d1f6      	bne.n	31a24 <bt_gatt_attr_get_handle+0x3c>
   31a36:	e7f2      	b.n	31a1e <bt_gatt_attr_get_handle+0x36>
   31a38:	2500      	movs	r5, #0
   31a3a:	e7f8      	b.n	31a2e <bt_gatt_attr_get_handle+0x46>
			if (attr == &static_svc->attrs[i]) {
   31a3c:	4610      	mov	r0, r2
   31a3e:	e7e1      	b.n	31a04 <bt_gatt_attr_get_handle+0x1c>
   31a40:	00051c90 	.word	0x00051c90
   31a44:	00051cb8 	.word	0x00051cb8

00031a48 <bt_gatt_foreach_attr_type>:
{
   31a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31a4c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   31a50:	469a      	mov	sl, r3
		num_matches = UINT16_MAX;
   31a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   31a56:	2d00      	cmp	r5, #0
   31a58:	bf08      	it	eq
   31a5a:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   31a5c:	4b22      	ldr	r3, [pc, #136]	; (31ae8 <bt_gatt_foreach_attr_type+0xa0>)
   31a5e:	881b      	ldrh	r3, [r3, #0]
   31a60:	4283      	cmp	r3, r0
{
   31a62:	4680      	mov	r8, r0
   31a64:	468b      	mov	fp, r1
   31a66:	4691      	mov	r9, r2
	if (start_handle <= last_static_handle) {
   31a68:	d23a      	bcs.n	31ae0 <bt_gatt_foreach_attr_type+0x98>
}
   31a6a:	b003      	add	sp, #12
   31a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   31a70:	6873      	ldr	r3, [r6, #4]
   31a72:	4423      	add	r3, r4
   31a74:	4543      	cmp	r3, r8
   31a76:	d231      	bcs.n	31adc <bt_gatt_foreach_attr_type+0x94>
				handle += static_svc->attr_count;
   31a78:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31a7a:	3608      	adds	r6, #8
   31a7c:	4b1b      	ldr	r3, [pc, #108]	; (31aec <bt_gatt_foreach_attr_type+0xa4>)
   31a7e:	429e      	cmp	r6, r3
   31a80:	d3f6      	bcc.n	31a70 <bt_gatt_foreach_attr_type+0x28>
   31a82:	e7f2      	b.n	31a6a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   31a84:	5889      	ldr	r1, [r1, r2]
   31a86:	9301      	str	r3, [sp, #4]
   31a88:	4648      	mov	r0, r9
   31a8a:	f01a fd1e 	bl	4c4ca <bt_uuid_cmp>
   31a8e:	9b01      	ldr	r3, [sp, #4]
   31a90:	b188      	cbz	r0, 31ab6 <bt_gatt_foreach_attr_type+0x6e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   31a92:	3401      	adds	r4, #1
   31a94:	3701      	adds	r7, #1
   31a96:	b2a4      	uxth	r4, r4
   31a98:	6873      	ldr	r3, [r6, #4]
   31a9a:	42bb      	cmp	r3, r7
   31a9c:	d9ed      	bls.n	31a7a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   31a9e:	455c      	cmp	r4, fp
   31aa0:	d8e3      	bhi.n	31a6a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   31aa2:	4544      	cmp	r4, r8
   31aa4:	d3f5      	bcc.n	31a92 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   31aa6:	2314      	movs	r3, #20
   31aa8:	6831      	ldr	r1, [r6, #0]
   31aaa:	fb03 f207 	mul.w	r2, r3, r7
   31aae:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   31ab0:	f1b9 0f00 	cmp.w	r9, #0
   31ab4:	d1e6      	bne.n	31a84 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   31ab6:	f1ba 0f00 	cmp.w	sl, #0
   31aba:	d10b      	bne.n	31ad4 <bt_gatt_foreach_attr_type+0x8c>
	*num_matches -= 1;
   31abc:	3d01      	subs	r5, #1
   31abe:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   31ac0:	4618      	mov	r0, r3
   31ac2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   31ac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   31ac6:	4621      	mov	r1, r4
   31ac8:	4798      	blx	r3
	if (!*num_matches) {
   31aca:	2d00      	cmp	r5, #0
   31acc:	d0cd      	beq.n	31a6a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   31ace:	2800      	cmp	r0, #0
   31ad0:	d1df      	bne.n	31a92 <bt_gatt_foreach_attr_type+0x4a>
   31ad2:	e7ca      	b.n	31a6a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   31ad4:	68da      	ldr	r2, [r3, #12]
   31ad6:	4592      	cmp	sl, r2
   31ad8:	d1db      	bne.n	31a92 <bt_gatt_foreach_attr_type+0x4a>
   31ada:	e7ef      	b.n	31abc <bt_gatt_foreach_attr_type+0x74>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   31adc:	2700      	movs	r7, #0
   31ade:	e7db      	b.n	31a98 <bt_gatt_foreach_attr_type+0x50>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   31ae0:	4e03      	ldr	r6, [pc, #12]	; (31af0 <bt_gatt_foreach_attr_type+0xa8>)
		uint16_t handle = 1;
   31ae2:	2401      	movs	r4, #1
   31ae4:	e7ca      	b.n	31a7c <bt_gatt_foreach_attr_type+0x34>
   31ae6:	bf00      	nop
   31ae8:	20006b80 	.word	0x20006b80
   31aec:	00051cb8 	.word	0x00051cb8
   31af0:	00051c90 	.word	0x00051c90

00031af4 <db_hash_gen>:
{
   31af4:	b530      	push	{r4, r5, lr}
   31af6:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   31af8:	2210      	movs	r2, #16
   31afa:	2100      	movs	r1, #0
{
   31afc:	4604      	mov	r4, r0
	uint8_t key[16] = {};
   31afe:	4668      	mov	r0, sp
   31b00:	f01a fbff 	bl	4c302 <memset>
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   31b04:	aa1c      	add	r2, sp, #112	; 0x70
   31b06:	4669      	mov	r1, sp
   31b08:	a804      	add	r0, sp, #16
   31b0a:	f01a fa5e 	bl	4bfca <tc_cmac_setup>
   31b0e:	b308      	cbz	r0, 31b54 <db_hash_gen+0x60>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   31b10:	f64f 71ff 	movw	r1, #65535	; 0xffff
   31b14:	2001      	movs	r0, #1
   31b16:	ab04      	add	r3, sp, #16
   31b18:	4a0f      	ldr	r2, [pc, #60]	; (31b58 <db_hash_gen+0x64>)
   31b1a:	f01c ffec 	bl	4eaf6 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   31b1e:	a904      	add	r1, sp, #16
   31b20:	480e      	ldr	r0, [pc, #56]	; (31b5c <db_hash_gen+0x68>)
   31b22:	f01a fae8 	bl	4c0f6 <tc_cmac_final>
   31b26:	b1a8      	cbz	r0, 31b54 <db_hash_gen+0x60>
   31b28:	4b0c      	ldr	r3, [pc, #48]	; (31b5c <db_hash_gen+0x68>)
   31b2a:	2208      	movs	r2, #8
   31b2c:	f103 010f 	add.w	r1, r3, #15
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   31b30:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   31b32:	780d      	ldrb	r5, [r1, #0]
   31b34:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   31b38:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   31b3a:	f801 0901 	strb.w	r0, [r1], #-1
	for (i = 0; i < (length/2); i++) {
   31b3e:	d1f7      	bne.n	31b30 <db_hash_gen+0x3c>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   31b40:	b124      	cbz	r4, 31b4c <db_hash_gen+0x58>
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   31b42:	2210      	movs	r2, #16
   31b44:	4905      	ldr	r1, [pc, #20]	; (31b5c <db_hash_gen+0x68>)
   31b46:	4806      	ldr	r0, [pc, #24]	; (31b60 <db_hash_gen+0x6c>)
   31b48:	f7fa f9fc 	bl	2bf44 <settings_save_one>
   31b4c:	2104      	movs	r1, #4
   31b4e:	4805      	ldr	r0, [pc, #20]	; (31b64 <db_hash_gen+0x70>)
   31b50:	f01c fbd1 	bl	4e2f6 <atomic_or>
}
   31b54:	b049      	add	sp, #292	; 0x124
   31b56:	bd30      	pop	{r4, r5, pc}
   31b58:	0004e251 	.word	0x0004e251
   31b5c:	20001f20 	.word	0x20001f20
   31b60:	000544c2 	.word	0x000544c2
   31b64:	20002030 	.word	0x20002030

00031b68 <db_hash_process>:
{
   31b68:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31b6a:	f06f 0108 	mvn.w	r1, #8
   31b6e:	4828      	ldr	r0, [pc, #160]	; (31c10 <db_hash_process+0xa8>)
   31b70:	f01c fc7c 	bl	4e46c <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   31b74:	0703      	lsls	r3, r0, #28
   31b76:	d545      	bpl.n	31c04 <db_hash_process+0x9c>
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   31b78:	2102      	movs	r1, #2
   31b7a:	4825      	ldr	r0, [pc, #148]	; (31c10 <db_hash_process+0xa8>)
   31b7c:	f01c fb5f 	bl	4e23e <atomic_test_bit>
   31b80:	b908      	cbnz	r0, 31b86 <db_hash_process+0x1e>
			db_hash_gen(false);
   31b82:	f7ff ffb7 	bl	31af4 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   31b86:	4923      	ldr	r1, [pc, #140]	; (31c14 <db_hash_process+0xac>)
   31b88:	2210      	movs	r2, #16
   31b8a:	1888      	adds	r0, r1, r2
   31b8c:	f01a fb9e 	bl	4c2cc <memcmp>
   31b90:	b948      	cbnz	r0, 31ba6 <db_hash_process+0x3e>
			k_work_cancel_delayable(&gatt_sc.work);
   31b92:	4821      	ldr	r0, [pc, #132]	; (31c18 <db_hash_process+0xb0>)
   31b94:	f01f fb1c 	bl	511d0 <k_work_cancel_delayable>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31b98:	f06f 0101 	mvn.w	r1, #1
   31b9c:	481c      	ldr	r0, [pc, #112]	; (31c10 <db_hash_process+0xa8>)
}
   31b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   31ba2:	f01c bc63 	b.w	4e46c <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   31ba6:	4c1d      	ldr	r4, [pc, #116]	; (31c1c <db_hash_process+0xb4>)
   31ba8:	2101      	movs	r1, #1
   31baa:	f104 0050 	add.w	r0, r4, #80	; 0x50
   31bae:	f01c fba2 	bl	4e2f6 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   31bb2:	f010 0f01 	tst.w	r0, #1
   31bb6:	4623      	mov	r3, r4
   31bb8:	d113      	bne.n	31be2 <db_hash_process+0x7a>
		gatt_sc.start = start;
   31bba:	4b19      	ldr	r3, [pc, #100]	; (31c20 <db_hash_process+0xb8>)
   31bbc:	61a3      	str	r3, [r4, #24]
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   31bbe:	2101      	movs	r1, #1
   31bc0:	4813      	ldr	r0, [pc, #76]	; (31c10 <db_hash_process+0xa8>)
   31bc2:	f01c fb3c 	bl	4e23e <atomic_test_bit>
   31bc6:	b928      	cbnz	r0, 31bd4 <db_hash_process+0x6c>
	k_work_reschedule(&gatt_sc.work, timeout);
   31bc8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   31bcc:	2300      	movs	r3, #0
   31bce:	4812      	ldr	r0, [pc, #72]	; (31c18 <db_hash_process+0xb0>)
   31bd0:	f017 f87c 	bl	48ccc <k_work_reschedule>
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   31bd4:	2210      	movs	r2, #16
   31bd6:	490f      	ldr	r1, [pc, #60]	; (31c14 <db_hash_process+0xac>)
   31bd8:	4812      	ldr	r0, [pc, #72]	; (31c24 <db_hash_process+0xbc>)
}
   31bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   31bde:	f7fa b9b1 	b.w	2bf44 <settings_save_one>
	if (new_start >= *start && new_end <= *end) {
   31be2:	8b22      	ldrh	r2, [r4, #24]
   31be4:	8b61      	ldrh	r1, [r4, #26]
   31be6:	2a01      	cmp	r2, #1
   31be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   31bec:	d805      	bhi.n	31bfa <db_hash_process+0x92>
   31bee:	4291      	cmp	r1, r2
   31bf0:	d0f0      	beq.n	31bd4 <db_hash_process+0x6c>
		*end = new_end;
   31bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   31bf6:	835a      	strh	r2, [r3, #26]
   31bf8:	e7e1      	b.n	31bbe <db_hash_process+0x56>
		*start = new_start;
   31bfa:	2001      	movs	r0, #1
	if (*end < new_end) {
   31bfc:	4291      	cmp	r1, r2
		*start = new_start;
   31bfe:	8320      	strh	r0, [r4, #24]
	if (*end < new_end) {
   31c00:	d0dd      	beq.n	31bbe <db_hash_process+0x56>
   31c02:	e7f6      	b.n	31bf2 <db_hash_process+0x8a>
	db_hash_gen(true);
   31c04:	2001      	movs	r0, #1
}
   31c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	db_hash_gen(true);
   31c0a:	f7ff bf73 	b.w	31af4 <db_hash_gen>
   31c0e:	bf00      	nop
   31c10:	20002030 	.word	0x20002030
   31c14:	20001f20 	.word	0x20001f20
   31c18:	20002000 	.word	0x20002000
   31c1c:	20001fe0 	.word	0x20001fe0
   31c20:	ffff0001 	.word	0xffff0001
   31c24:	000544c2 	.word	0x000544c2

00031c28 <ccc_set_direct>:
{
   31c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31c2c:	b0b8      	sub	sp, #224	; 0xe0
   31c2e:	4688      	mov	r8, r1
   31c30:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   31c32:	4922      	ldr	r1, [pc, #136]	; (31cbc <ccc_set_direct+0x94>)
   31c34:	983e      	ldr	r0, [sp, #248]	; 0xf8
   31c36:	466a      	mov	r2, sp
{
   31c38:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   31c3a:	f019 f859 	bl	4acf0 <settings_name_steq>
   31c3e:	2800      	cmp	r0, #0
   31c40:	d038      	beq.n	31cb4 <ccc_set_direct+0x8c>
		return ccc_set(name, len, read_cb, cb_arg);
   31c42:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   31c44:	a901      	add	r1, sp, #4
   31c46:	4620      	mov	r0, r4
   31c48:	f019 f872 	bl	4ad30 <settings_name_next>
		if (!name) {
   31c4c:	b15c      	cbz	r4, 31c66 <ccc_set_direct+0x3e>
		} else if (!next) {
   31c4e:	9801      	ldr	r0, [sp, #4]
   31c50:	b968      	cbnz	r0, 31c6e <ccc_set_direct+0x46>
		err = bt_settings_decode_key(name, &addr);
   31c52:	ad02      	add	r5, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   31c54:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   31c56:	4620      	mov	r0, r4
   31c58:	4629      	mov	r1, r5
			load.addr_with_id.id = BT_ID_DEFAULT;
   31c5a:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   31c5e:	f01a fc0e 	bl	4c47e <bt_settings_decode_key>
		if (err) {
   31c62:	4604      	mov	r4, r0
   31c64:	b150      	cbz	r0, 31c7c <ccc_set_direct+0x54>
			return -EINVAL;
   31c66:	f06f 0015 	mvn.w	r0, #21
   31c6a:	4604      	mov	r4, r0
   31c6c:	e01b      	b.n	31ca6 <ccc_set_direct+0x7e>
			unsigned long next_id = strtoul(next, NULL, 10);
   31c6e:	220a      	movs	r2, #10
   31c70:	2100      	movs	r1, #0
   31c72:	f01a fa86 	bl	4c182 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   31c76:	2800      	cmp	r0, #0
   31c78:	d0eb      	beq.n	31c52 <ccc_set_direct+0x2a>
   31c7a:	e7f4      	b.n	31c66 <ccc_set_direct+0x3e>
		load.addr_with_id.addr = &addr;
   31c7c:	9504      	str	r5, [sp, #16]
		if (len_rd) {
   31c7e:	f1b8 0f00 	cmp.w	r8, #0
   31c82:	d014      	beq.n	31cae <ccc_set_direct+0x86>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   31c84:	ad08      	add	r5, sp, #32
   31c86:	22c0      	movs	r2, #192	; 0xc0
   31c88:	4629      	mov	r1, r5
   31c8a:	4638      	mov	r0, r7
   31c8c:	47b0      	blx	r6
			if (len < 0) {
   31c8e:	2800      	cmp	r0, #0
   31c90:	dbeb      	blt.n	31c6a <ccc_set_direct+0x42>
			load.count = len / sizeof(*ccc_store);
   31c92:	0880      	lsrs	r0, r0, #2
			load.entry = ccc_store;
   31c94:	9506      	str	r5, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   31c96:	9007      	str	r0, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   31c98:	ab04      	add	r3, sp, #16
   31c9a:	4a09      	ldr	r2, [pc, #36]	; (31cc0 <ccc_set_direct+0x98>)
   31c9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   31ca0:	2001      	movs	r0, #1
   31ca2:	f01c ff28 	bl	4eaf6 <bt_gatt_foreach_attr>
}
   31ca6:	4620      	mov	r0, r4
   31ca8:	b038      	add	sp, #224	; 0xe0
   31caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			load.count = 0;
   31cae:	e9cd 0006 	strd	r0, r0, [sp, #24]
   31cb2:	e7f1      	b.n	31c98 <ccc_set_direct+0x70>
			return -EINVAL;
   31cb4:	f06f 0415 	mvn.w	r4, #21
   31cb8:	e7f5      	b.n	31ca6 <ccc_set_direct+0x7e>
   31cba:	bf00      	nop
   31cbc:	000544bb 	.word	0x000544bb
   31cc0:	000316a5 	.word	0x000316a5

00031cc4 <gatt_indicate>:
{
   31cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31cc8:	4615      	mov	r5, r2
   31cca:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   31ccc:	2214      	movs	r2, #20
   31cce:	6869      	ldr	r1, [r5, #4]
{
   31cd0:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   31cd2:	f01c ff1b 	bl	4eb0c <bt_gatt_check_perm>
   31cd6:	4607      	mov	r7, r0
   31cd8:	2800      	cmp	r0, #0
   31cda:	d13a      	bne.n	31d52 <gatt_indicate+0x8e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   31cdc:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   31ce0:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   31ce2:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   31ce4:	f7ff fa28 	bl	31138 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   31ce8:	3602      	adds	r6, #2
	if (!req) {
   31cea:	4604      	mov	r4, r0
   31cec:	b178      	cbz	r0, 31d0e <gatt_indicate+0x4a>
	req->att_op = op;
   31cee:	211d      	movs	r1, #29
	req->func = func;
   31cf0:	4b19      	ldr	r3, [pc, #100]	; (31d58 <gatt_indicate+0x94>)
	req->len = len;
   31cf2:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   31cf4:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   31cf6:	60c7      	str	r7, [r0, #12]
	req->func = func;
   31cf8:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   31cfa:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   31cfc:	4632      	mov	r2, r6
   31cfe:	4640      	mov	r0, r8
   31d00:	f01c f93d 	bl	4df7e <bt_att_create_pdu>
	if (!buf) {
   31d04:	4606      	mov	r6, r0
   31d06:	b928      	cbnz	r0, 31d14 <gatt_indicate+0x50>
		bt_att_req_free(req);
   31d08:	4620      	mov	r0, r4
   31d0a:	f7ff fa37 	bl	3117c <bt_att_req_free>
		return -ENOMEM;
   31d0e:	f06f 050b 	mvn.w	r5, #11
   31d12:	e01b      	b.n	31d4c <gatt_indicate+0x88>
   31d14:	f100 0a08 	add.w	sl, r0, #8
   31d18:	2102      	movs	r1, #2
   31d1a:	4650      	mov	r0, sl
   31d1c:	f01e fa3b 	bl	50196 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   31d20:	4607      	mov	r7, r0
   31d22:	8aa9      	ldrh	r1, [r5, #20]
   31d24:	f827 9b02 	strh.w	r9, [r7], #2
   31d28:	4650      	mov	r0, sl
   31d2a:	f01e fa34 	bl	50196 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   31d2e:	8aaa      	ldrh	r2, [r5, #20]
   31d30:	6929      	ldr	r1, [r5, #16]
   31d32:	4638      	mov	r0, r7
   31d34:	f01a fada 	bl	4c2ec <memcpy>
	req->buf = buf;
   31d38:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   31d3a:	4621      	mov	r1, r4
   31d3c:	4640      	mov	r0, r8
   31d3e:	f01c fa1e 	bl	4e17e <bt_att_req_send>
	if (err) {
   31d42:	4605      	mov	r5, r0
   31d44:	b110      	cbz	r0, 31d4c <gatt_indicate+0x88>
		bt_att_req_free(req);
   31d46:	4620      	mov	r0, r4
   31d48:	f7ff fa18 	bl	3117c <bt_att_req_free>
}
   31d4c:	4628      	mov	r0, r5
   31d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EPERM;
   31d52:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   31d56:	e7f9      	b.n	31d4c <gatt_indicate+0x88>
   31d58:	0004e20d 	.word	0x0004e20d

00031d5c <bt_gatt_indicate>:
{
   31d5c:	b530      	push	{r4, r5, lr}
   31d5e:	4604      	mov	r4, r0
   31d60:	b08d      	sub	sp, #52	; 0x34
   31d62:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   31d64:	4837      	ldr	r0, [pc, #220]	; (31e44 <bt_gatt_indicate+0xe8>)
   31d66:	2101      	movs	r1, #1
   31d68:	f01c fa69 	bl	4e23e <atomic_test_bit>
   31d6c:	2800      	cmp	r0, #0
   31d6e:	d05f      	beq.n	31e30 <bt_gatt_indicate+0xd4>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   31d70:	b114      	cbz	r4, 31d78 <bt_gatt_indicate+0x1c>
   31d72:	7b63      	ldrb	r3, [r4, #13]
   31d74:	2b07      	cmp	r3, #7
   31d76:	d15e      	bne.n	31e36 <bt_gatt_indicate+0xda>
	data.attr = params->attr;
   31d78:	6868      	ldr	r0, [r5, #4]
   31d7a:	9007      	str	r0, [sp, #28]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31d7c:	f7ff fe34 	bl	319e8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   31d80:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31d82:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (params->uuid) {
   31d86:	2a00      	cmp	r2, #0
   31d88:	d033      	beq.n	31df2 <bt_gatt_indicate+0x96>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31d8a:	a907      	add	r1, sp, #28
   31d8c:	9102      	str	r1, [sp, #8]
   31d8e:	492e      	ldr	r1, [pc, #184]	; (31e48 <bt_gatt_indicate+0xec>)
   31d90:	9101      	str	r1, [sp, #4]
   31d92:	2101      	movs	r1, #1
	found->attr = NULL;
   31d94:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31d96:	9100      	str	r1, [sp, #0]
   31d98:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   31d9c:	9307      	str	r3, [sp, #28]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31d9e:	f7ff fe53 	bl	31a48 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   31da2:	9b07      	ldr	r3, [sp, #28]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   31da4:	b91b      	cbnz	r3, 31dae <bt_gatt_indicate+0x52>
			return -ENOENT;
   31da6:	f06f 0001 	mvn.w	r0, #1
}
   31daa:	b00d      	add	sp, #52	; 0x34
   31dac:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   31dae:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   31db0:	9b07      	ldr	r3, [sp, #28]
   31db2:	6818      	ldr	r0, [r3, #0]
   31db4:	2300      	movs	r3, #0
   31db6:	f88d 3014 	strb.w	r3, [sp, #20]
   31dba:	a905      	add	r1, sp, #20
   31dbc:	f642 0303 	movw	r3, #10243	; 0x2803
   31dc0:	f8ad 3016 	strh.w	r3, [sp, #22]
   31dc4:	f01a fb81 	bl	4c4ca <bt_uuid_cmp>
   31dc8:	b940      	cbnz	r0, 31ddc <bt_gatt_indicate+0x80>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   31dca:	9807      	ldr	r0, [sp, #28]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   31dcc:	68c3      	ldr	r3, [r0, #12]
   31dce:	799b      	ldrb	r3, [r3, #6]
   31dd0:	069b      	lsls	r3, r3, #26
   31dd2:	d533      	bpl.n	31e3c <bt_gatt_indicate+0xe0>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   31dd4:	f01c fe41 	bl	4ea5a <bt_gatt_attr_value_handle>
   31dd8:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (conn) {
   31ddc:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   31de0:	b154      	cbz	r4, 31df8 <bt_gatt_indicate+0x9c>
		params->_ref = 1;
   31de2:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   31de4:	4601      	mov	r1, r0
		params->_ref = 1;
   31de6:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   31de8:	462a      	mov	r2, r5
   31dea:	4620      	mov	r0, r4
   31dec:	f7ff ff6a 	bl	31cc4 <gatt_indicate>
   31df0:	e7db      	b.n	31daa <bt_gatt_indicate+0x4e>
		if (!data.handle) {
   31df2:	2800      	cmp	r0, #0
   31df4:	d1dc      	bne.n	31db0 <bt_gatt_indicate+0x54>
   31df6:	e7d6      	b.n	31da6 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   31df8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   31dfc:	9309      	str	r3, [sp, #36]	; 0x24
	data.type = BT_GATT_CCC_INDICATE;
   31dfe:	2302      	movs	r3, #2
   31e00:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31e04:	f642 1302 	movw	r3, #10498	; 0x2902
   31e08:	f8ad 301a 	strh.w	r3, [sp, #26]
   31e0c:	ab07      	add	r3, sp, #28
   31e0e:	9302      	str	r3, [sp, #8]
   31e10:	4b0e      	ldr	r3, [pc, #56]	; (31e4c <bt_gatt_indicate+0xf0>)
   31e12:	9301      	str	r3, [sp, #4]
   31e14:	2301      	movs	r3, #1
   31e16:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   31e18:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31e1a:	4623      	mov	r3, r4
   31e1c:	aa06      	add	r2, sp, #24
   31e1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   31e22:	950b      	str	r5, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31e24:	f88d 4018 	strb.w	r4, [sp, #24]
   31e28:	f7ff fe0e 	bl	31a48 <bt_gatt_foreach_attr_type>
	return data.err;
   31e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
   31e2e:	e7bc      	b.n	31daa <bt_gatt_indicate+0x4e>
		return -EAGAIN;
   31e30:	f06f 000a 	mvn.w	r0, #10
   31e34:	e7b9      	b.n	31daa <bt_gatt_indicate+0x4e>
		return -ENOTCONN;
   31e36:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   31e3a:	e7b6      	b.n	31daa <bt_gatt_indicate+0x4e>
			return -EINVAL;
   31e3c:	f06f 0015 	mvn.w	r0, #21
   31e40:	e7b3      	b.n	31daa <bt_gatt_indicate+0x4e>
   31e42:	bf00      	nop
   31e44:	200000cc 	.word	0x200000cc
   31e48:	0004e233 	.word	0x0004e233
   31e4c:	00031f99 	.word	0x00031f99

00031e50 <sc_process>:
{
   31e50:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   31e52:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   31e56:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   31e58:	f850 3c08 	ldr.w	r3, [r0, #-8]
   31e5c:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   31e5e:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   31e62:	f06f 0101 	mvn.w	r1, #1
   31e66:	4628      	mov	r0, r5
   31e68:	f01c fb00 	bl	4e46c <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   31e6c:	4b0d      	ldr	r3, [pc, #52]	; (31ea4 <sc_process+0x54>)
   31e6e:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   31e72:	4b0d      	ldr	r3, [pc, #52]	; (31ea8 <sc_process+0x58>)
   31e74:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   31e78:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   31e7a:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   31e7c:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   31e80:	2304      	movs	r3, #4
	sc->start = 0U;
   31e82:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   31e86:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   31e8a:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   31e8e:	4631      	mov	r1, r6
   31e90:	f7ff ff64 	bl	31d5c <bt_gatt_indicate>
   31e94:	b918      	cbnz	r0, 31e9e <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   31e96:	2102      	movs	r1, #2
   31e98:	4628      	mov	r0, r5
   31e9a:	f01c fa2c 	bl	4e2f6 <atomic_or>
}
   31e9e:	b002      	add	sp, #8
   31ea0:	bd70      	pop	{r4, r5, r6, pc}
   31ea2:	bf00      	nop
   31ea4:	00052b70 	.word	0x00052b70
   31ea8:	000317c1 	.word	0x000317c1

00031eac <bt_gatt_notify_cb>:
{
   31eac:	b530      	push	{r4, r5, lr}
   31eae:	4604      	mov	r4, r0
   31eb0:	b08d      	sub	sp, #52	; 0x34
   31eb2:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   31eb4:	4835      	ldr	r0, [pc, #212]	; (31f8c <bt_gatt_notify_cb+0xe0>)
   31eb6:	2101      	movs	r1, #1
   31eb8:	f01c f9c1 	bl	4e23e <atomic_test_bit>
   31ebc:	2800      	cmp	r0, #0
   31ebe:	d05b      	beq.n	31f78 <bt_gatt_notify_cb+0xcc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   31ec0:	b114      	cbz	r4, 31ec8 <bt_gatt_notify_cb+0x1c>
   31ec2:	7b63      	ldrb	r3, [r4, #13]
   31ec4:	2b07      	cmp	r3, #7
   31ec6:	d15a      	bne.n	31f7e <bt_gatt_notify_cb+0xd2>
	data.attr = params->attr;
   31ec8:	6868      	ldr	r0, [r5, #4]
   31eca:	9007      	str	r0, [sp, #28]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31ecc:	f7ff fd8c 	bl	319e8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   31ed0:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   31ed2:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (params->uuid) {
   31ed6:	2a00      	cmp	r2, #0
   31ed8:	d031      	beq.n	31f3e <bt_gatt_notify_cb+0x92>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31eda:	a907      	add	r1, sp, #28
   31edc:	9102      	str	r1, [sp, #8]
   31ede:	492c      	ldr	r1, [pc, #176]	; (31f90 <bt_gatt_notify_cb+0xe4>)
   31ee0:	9101      	str	r1, [sp, #4]
   31ee2:	2101      	movs	r1, #1
	found->attr = NULL;
   31ee4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31ee6:	9100      	str	r1, [sp, #0]
   31ee8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   31eec:	9307      	str	r3, [sp, #28]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   31eee:	f7ff fdab 	bl	31a48 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   31ef2:	9b07      	ldr	r3, [sp, #28]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   31ef4:	b91b      	cbnz	r3, 31efe <bt_gatt_notify_cb+0x52>
			return -ENOENT;
   31ef6:	f06f 0001 	mvn.w	r0, #1
}
   31efa:	b00d      	add	sp, #52	; 0x34
   31efc:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   31efe:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   31f00:	9b07      	ldr	r3, [sp, #28]
   31f02:	6818      	ldr	r0, [r3, #0]
   31f04:	2300      	movs	r3, #0
   31f06:	f88d 3014 	strb.w	r3, [sp, #20]
   31f0a:	a905      	add	r1, sp, #20
   31f0c:	f642 0303 	movw	r3, #10243	; 0x2803
   31f10:	f8ad 3016 	strh.w	r3, [sp, #22]
   31f14:	f01a fad9 	bl	4c4ca <bt_uuid_cmp>
   31f18:	b940      	cbnz	r0, 31f2c <bt_gatt_notify_cb+0x80>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   31f1a:	9807      	ldr	r0, [sp, #28]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   31f1c:	68c3      	ldr	r3, [r0, #12]
   31f1e:	799b      	ldrb	r3, [r3, #6]
   31f20:	06db      	lsls	r3, r3, #27
   31f22:	d52f      	bpl.n	31f84 <bt_gatt_notify_cb+0xd8>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   31f24:	f01c fd99 	bl	4ea5a <bt_gatt_attr_value_handle>
   31f28:	f8ad 0020 	strh.w	r0, [sp, #32]
	if (conn) {
   31f2c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   31f30:	b144      	cbz	r4, 31f44 <bt_gatt_notify_cb+0x98>
		return gatt_notify(conn, data.handle, params);
   31f32:	4601      	mov	r1, r0
   31f34:	462a      	mov	r2, r5
   31f36:	4620      	mov	r0, r4
   31f38:	f01c fe13 	bl	4eb62 <gatt_notify>
   31f3c:	e7dd      	b.n	31efa <bt_gatt_notify_cb+0x4e>
		if (!data.handle) {
   31f3e:	2800      	cmp	r0, #0
   31f40:	d1de      	bne.n	31f00 <bt_gatt_notify_cb+0x54>
   31f42:	e7d8      	b.n	31ef6 <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31f44:	f642 1202 	movw	r2, #10498	; 0x2902
   31f48:	f8ad 201a 	strh.w	r2, [sp, #26]
   31f4c:	aa07      	add	r2, sp, #28
	data.err = -ENOTCONN;
   31f4e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31f52:	9202      	str	r2, [sp, #8]
   31f54:	4a0f      	ldr	r2, [pc, #60]	; (31f94 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   31f56:	9309      	str	r3, [sp, #36]	; 0x24
	data.type = BT_GATT_CCC_NOTIFY;
   31f58:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31f5a:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   31f5e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31f62:	aa06      	add	r2, sp, #24
   31f64:	4623      	mov	r3, r4
   31f66:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   31f6a:	950b      	str	r5, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   31f6c:	f88d 4018 	strb.w	r4, [sp, #24]
   31f70:	f7ff fd6a 	bl	31a48 <bt_gatt_foreach_attr_type>
	return data.err;
   31f74:	9809      	ldr	r0, [sp, #36]	; 0x24
   31f76:	e7c0      	b.n	31efa <bt_gatt_notify_cb+0x4e>
		return -EAGAIN;
   31f78:	f06f 000a 	mvn.w	r0, #10
   31f7c:	e7bd      	b.n	31efa <bt_gatt_notify_cb+0x4e>
		return -ENOTCONN;
   31f7e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   31f82:	e7ba      	b.n	31efa <bt_gatt_notify_cb+0x4e>
			return -EINVAL;
   31f84:	f06f 0015 	mvn.w	r0, #21
   31f88:	e7b7      	b.n	31efa <bt_gatt_notify_cb+0x4e>
   31f8a:	bf00      	nop
   31f8c:	200000cc 	.word	0x200000cc
   31f90:	0004e233 	.word	0x0004e233
   31f94:	00031f99 	.word	0x00031f99

00031f98 <notify_cb>:
{
   31f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   31f9c:	4b3d      	ldr	r3, [pc, #244]	; (32094 <notify_cb+0xfc>)
{
   31f9e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   31fa0:	6882      	ldr	r2, [r0, #8]
   31fa2:	429a      	cmp	r2, r3
{
   31fa4:	b085      	sub	sp, #20
   31fa6:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   31fa8:	d005      	beq.n	31fb6 <notify_cb+0x1e>
		return BT_GATT_ITER_CONTINUE;
   31faa:	f04f 0901 	mov.w	r9, #1
}
   31fae:	4648      	mov	r0, r9
   31fb0:	b005      	add	sp, #20
   31fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   31fb6:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   31fb8:	4b37      	ldr	r3, [pc, #220]	; (32098 <notify_cb+0x100>)
   31fba:	429f      	cmp	r7, r3
   31fbc:	d019      	beq.n	31ff2 <notify_cb+0x5a>
   31fbe:	1c7d      	adds	r5, r7, #1
   31fc0:	f107 0a3d 	add.w	sl, r7, #61	; 0x3d
		data->err = 0;
   31fc4:	f04f 0b00 	mov.w	fp, #0
		if (cfg->value != data->type) {
   31fc8:	f8b5 2007 	ldrh.w	r2, [r5, #7]
   31fcc:	89a3      	ldrh	r3, [r4, #12]
   31fce:	429a      	cmp	r2, r3
   31fd0:	d10b      	bne.n	31fea <notify_cb+0x52>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   31fd2:	4629      	mov	r1, r5
   31fd4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   31fd8:	f01b f9fb 	bl	4d3d2 <bt_conn_lookup_addr_le>
		if (!conn) {
   31fdc:	4606      	mov	r6, r0
   31fde:	b120      	cbz	r0, 31fea <notify_cb+0x52>
		if (conn->state != BT_CONN_CONNECTED) {
   31fe0:	7b43      	ldrb	r3, [r0, #13]
   31fe2:	2b07      	cmp	r3, #7
   31fe4:	d02a      	beq.n	3203c <notify_cb+0xa4>
			bt_conn_unref(conn);
   31fe6:	f01b f912 	bl	4d20e <bt_conn_unref>
			continue;
   31fea:	350a      	adds	r5, #10
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   31fec:	4555      	cmp	r5, sl
   31fee:	d1eb      	bne.n	31fc8 <notify_cb+0x30>
   31ff0:	e7db      	b.n	31faa <notify_cb+0x12>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   31ff2:	2600      	movs	r6, #0
   31ff4:	4d29      	ldr	r5, [pc, #164]	; (3209c <notify_cb+0x104>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   31ff6:	46b1      	mov	r9, r6
   31ff8:	a902      	add	r1, sp, #8
   31ffa:	4628      	mov	r0, r5
   31ffc:	f8cd 9008 	str.w	r9, [sp, #8]
   32000:	f8cd 900b 	str.w	r9, [sp, #11]
   32004:	f01c f986 	bl	4e314 <bt_addr_le_cmp>
   32008:	b178      	cbz	r0, 3202a <notify_cb+0x92>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   3200a:	2207      	movs	r2, #7
   3200c:	4629      	mov	r1, r5
   3200e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   32012:	f7fd ff89 	bl	2ff28 <bt_conn_lookup_state_le>
			if (!conn) {
   32016:	b970      	cbnz	r0, 32036 <notify_cb+0x9e>
				sc = (struct sc_data *)data->ind_params->data;
   32018:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   3201a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   3201e:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   32020:	4629      	mov	r1, r5
   32022:	8853      	ldrh	r3, [r2, #2]
   32024:	8812      	ldrh	r2, [r2, #0]
   32026:	f01c f9ef 	bl	4e408 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   3202a:	3601      	adds	r6, #1
   3202c:	2e0c      	cmp	r6, #12
   3202e:	f105 050c 	add.w	r5, r5, #12
   32032:	d1e1      	bne.n	31ff8 <notify_cb+0x60>
   32034:	e7c3      	b.n	31fbe <notify_cb+0x26>
			bt_conn_unref(conn);
   32036:	f01b f8ea 	bl	4d20e <bt_conn_unref>
   3203a:	e7f6      	b.n	3202a <notify_cb+0x92>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   3203c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3203e:	b123      	cbz	r3, 3204a <notify_cb+0xb2>
   32040:	4641      	mov	r1, r8
   32042:	4798      	blx	r3
   32044:	b908      	cbnz	r0, 3204a <notify_cb+0xb2>
			bt_conn_unref(conn);
   32046:	4630      	mov	r0, r6
   32048:	e7cd      	b.n	31fe6 <notify_cb+0x4e>
		if (bt_gatt_check_perm(conn, attr,
   3204a:	2214      	movs	r2, #20
   3204c:	4641      	mov	r1, r8
   3204e:	4630      	mov	r0, r6
   32050:	f01c fd5c 	bl	4eb0c <bt_gatt_check_perm>
   32054:	4681      	mov	r9, r0
   32056:	2800      	cmp	r0, #0
   32058:	d1c7      	bne.n	31fea <notify_cb+0x52>
		if (data->type == BT_GATT_CCC_INDICATE) {
   3205a:	89a3      	ldrh	r3, [r4, #12]
   3205c:	88a1      	ldrh	r1, [r4, #4]
   3205e:	6922      	ldr	r2, [r4, #16]
   32060:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   32062:	4630      	mov	r0, r6
		if (data->type == BT_GATT_CCC_INDICATE) {
   32064:	d111      	bne.n	3208a <notify_cb+0xf2>
			err = gatt_indicate(conn, data->handle,
   32066:	f7ff fe2d 	bl	31cc4 <gatt_indicate>
			if (err == 0) {
   3206a:	4603      	mov	r3, r0
   3206c:	b918      	cbnz	r0, 32076 <notify_cb+0xde>
				data->ind_params->_ref++;
   3206e:	6921      	ldr	r1, [r4, #16]
   32070:	7d8a      	ldrb	r2, [r1, #22]
   32072:	3201      	adds	r2, #1
   32074:	758a      	strb	r2, [r1, #22]
		bt_conn_unref(conn);
   32076:	4630      	mov	r0, r6
   32078:	9301      	str	r3, [sp, #4]
   3207a:	f01b f8c8 	bl	4d20e <bt_conn_unref>
		if (err < 0) {
   3207e:	9b01      	ldr	r3, [sp, #4]
   32080:	2b00      	cmp	r3, #0
   32082:	db94      	blt.n	31fae <notify_cb+0x16>
		data->err = 0;
   32084:	f8c4 b008 	str.w	fp, [r4, #8]
   32088:	e7af      	b.n	31fea <notify_cb+0x52>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   3208a:	f01c fd6a 	bl	4eb62 <gatt_notify>
   3208e:	4603      	mov	r3, r0
   32090:	e7f1      	b.n	32076 <notify_cb+0xde>
   32092:	bf00      	nop
   32094:	0003154d 	.word	0x0003154d
   32098:	20000630 	.word	0x20000630
   3209c:	20006b83 	.word	0x20006b83

000320a0 <update_ccc>:
{
   320a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   320a4:	4b31      	ldr	r3, [pc, #196]	; (3216c <update_ccc+0xcc>)
{
   320a6:	4690      	mov	r8, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   320a8:	6882      	ldr	r2, [r0, #8]
   320aa:	429a      	cmp	r2, r3
{
   320ac:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   320ae:	d159      	bne.n	32164 <update_ccc+0xc4>
	ccc = attr->user_data;
   320b0:	68c6      	ldr	r6, [r0, #12]
	struct bt_conn *conn = data->conn;
   320b2:	f8d8 4000 	ldr.w	r4, [r8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   320b6:	1c75      	adds	r5, r6, #1
   320b8:	f106 0a3d 	add.w	sl, r6, #61	; 0x3d
		if (!cfg->value ||
   320bc:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   320c0:	b1fb      	cbz	r3, 32102 <update_ccc+0x62>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   320c2:	462a      	mov	r2, r5
   320c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   320c8:	4620      	mov	r0, r4
   320ca:	f01b f95a 	bl	4d382 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   320ce:	b1c0      	cbz	r0, 32102 <update_ccc+0x62>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   320d0:	222a      	movs	r2, #42	; 0x2a
   320d2:	4639      	mov	r1, r7
   320d4:	4620      	mov	r0, r4
   320d6:	f01c fd19 	bl	4eb0c <bt_gatt_check_perm>
		if (err) {
   320da:	b1b0      	cbz	r0, 3210a <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   320dc:	2803      	cmp	r0, #3
   320de:	d010      	beq.n	32102 <update_ccc+0x62>
				sec = BT_SECURITY_L3;
   320e0:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   320e2:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
   320e4:	bf14      	ite	ne
   320e6:	f04f 0902 	movne.w	r9, #2
   320ea:	f04f 0903 	moveq.w	r9, #3
			    bt_conn_get_security(conn) < sec) {
   320ee:	f01b f946 	bl	4d37e <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   320f2:	4581      	cmp	r9, r0
   320f4:	d909      	bls.n	3210a <update_ccc+0x6a>
				if (data->sec < sec) {
   320f6:	f898 3004 	ldrb.w	r3, [r8, #4]
   320fa:	454b      	cmp	r3, r9
   320fc:	d201      	bcs.n	32102 <update_ccc+0x62>
					data->sec = sec;
   320fe:	f888 9004 	strb.w	r9, [r8, #4]
   32102:	350a      	adds	r5, #10
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   32104:	45aa      	cmp	sl, r5
   32106:	d1d9      	bne.n	320bc <update_ccc+0x1c>
   32108:	e02c      	b.n	32164 <update_ccc+0xc4>
		gatt_ccc_changed(attr, ccc);
   3210a:	4631      	mov	r1, r6
   3210c:	4638      	mov	r0, r7
   3210e:	f01c f866 	bl	4e1de <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   32112:	4b17      	ldr	r3, [pc, #92]	; (32170 <update_ccc+0xd0>)
   32114:	429e      	cmp	r6, r3
   32116:	d125      	bne.n	32164 <update_ccc+0xc4>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   32118:	f104 0188 	add.w	r1, r4, #136	; 0x88
   3211c:	7a20      	ldrb	r0, [r4, #8]
   3211e:	f7ff f955 	bl	313cc <find_sc_cfg>
	if (!cfg) {
   32122:	b1f8      	cbz	r0, 32164 <update_ccc+0xc4>
	if (!(cfg->data.start || cfg->data.end)) {
   32124:	8902      	ldrh	r2, [r0, #8]
   32126:	8943      	ldrh	r3, [r0, #10]
   32128:	ea52 0103 	orrs.w	r1, r2, r3
   3212c:	d01a      	beq.n	32164 <update_ccc+0xc4>
	index = bt_conn_index(conn);
   3212e:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   32130:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   32134:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   32138:	f7fd fd98 	bl	2fc6c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   3213c:	490d      	ldr	r1, [pc, #52]	; (32174 <update_ccc+0xd4>)
   3213e:	4a0e      	ldr	r2, [pc, #56]	; (32178 <update_ccc+0xd8>)
   32140:	2318      	movs	r3, #24
   32142:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   32146:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   32148:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   3214a:	4a0c      	ldr	r2, [pc, #48]	; (3217c <update_ccc+0xdc>)
   3214c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   3214e:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   32150:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   32154:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   32156:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   32158:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   3215c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   3215e:	4620      	mov	r0, r4
   32160:	f7ff fdfc 	bl	31d5c <bt_gatt_indicate>
}
   32164:	2001      	movs	r0, #1
   32166:	b002      	add	sp, #8
   32168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3216c:	0003154d 	.word	0x0003154d
   32170:	20000630 	.word	0x20000630
   32174:	20004114 	.word	0x20004114
   32178:	00052b70 	.word	0x00052b70
   3217c:	0004e7df 	.word	0x0004e7df

00032180 <bt_gatt_discover>:
{
   32180:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   32182:	7b43      	ldrb	r3, [r0, #13]
   32184:	2b07      	cmp	r3, #7
{
   32186:	b08a      	sub	sp, #40	; 0x28
   32188:	4605      	mov	r5, r0
   3218a:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
   3218c:	f040 809a 	bne.w	322c4 <bt_gatt_discover+0x144>
	switch (params->type) {
   32190:	7c0b      	ldrb	r3, [r1, #16]
   32192:	2b06      	cmp	r3, #6
   32194:	d823      	bhi.n	321de <bt_gatt_discover+0x5e>
   32196:	e8df f003 	tbb	[pc, r3]
   3219a:	0404      	.short	0x0404
   3219c:	8e5c5454 	.word	0x8e5c5454
   321a0:	20          	.byte	0x20
   321a1:	00          	.byte	0x00
		if (params->uuid) {
   321a2:	680b      	ldr	r3, [r1, #0]
   321a4:	b18b      	cbz	r3, 321ca <bt_gatt_discover+0x4a>
	switch (params->uuid->type) {
   321a6:	781b      	ldrb	r3, [r3, #0]
   321a8:	b16b      	cbz	r3, 321c6 <bt_gatt_discover+0x46>
   321aa:	2b02      	cmp	r3, #2
   321ac:	d117      	bne.n	321de <bt_gatt_discover+0x5e>
		len += BT_UUID_SIZE_128;
   321ae:	2316      	movs	r3, #22
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   321b0:	9301      	str	r3, [sp, #4]
   321b2:	2306      	movs	r3, #6
   321b4:	9300      	str	r3, [sp, #0]
   321b6:	4945      	ldr	r1, [pc, #276]	; (322cc <bt_gatt_discover+0x14c>)
   321b8:	4b45      	ldr	r3, [pc, #276]	; (322d0 <bt_gatt_discover+0x150>)
   321ba:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   321bc:	4628      	mov	r0, r5
   321be:	f01c fbfd 	bl	4e9bc <gatt_req_send>
}
   321c2:	b00a      	add	sp, #40	; 0x28
   321c4:	bd70      	pop	{r4, r5, r6, pc}
		len += BT_UUID_SIZE_16;
   321c6:	2308      	movs	r3, #8
   321c8:	e7f2      	b.n	321b0 <bt_gatt_discover+0x30>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   321ca:	2310      	movs	r3, #16
   321cc:	2104      	movs	r1, #4
   321ce:	e9cd 3100 	strd	r3, r1, [sp]
   321d2:	4622      	mov	r2, r4
   321d4:	4b3f      	ldr	r3, [pc, #252]	; (322d4 <bt_gatt_discover+0x154>)
   321d6:	4940      	ldr	r1, [pc, #256]	; (322d8 <bt_gatt_discover+0x158>)
   321d8:	e7f0      	b.n	321bc <bt_gatt_discover+0x3c>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   321da:	6808      	ldr	r0, [r1, #0]
   321dc:	b910      	cbnz	r0, 321e4 <bt_gatt_discover+0x64>
	return -EINVAL;
   321de:	f06f 0015 	mvn.w	r0, #21
   321e2:	e7ee      	b.n	321c2 <bt_gatt_discover+0x42>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   321e4:	7806      	ldrb	r6, [r0, #0]
   321e6:	2e00      	cmp	r6, #0
   321e8:	d1f9      	bne.n	321de <bt_gatt_discover+0x5e>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   321ea:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   321ee:	a902      	add	r1, sp, #8
   321f0:	f88d 6008 	strb.w	r6, [sp, #8]
   321f4:	f8ad 300a 	strh.w	r3, [sp, #10]
   321f8:	f01a f967 	bl	4c4ca <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   321fc:	b308      	cbz	r0, 32242 <bt_gatt_discover+0xc2>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   321fe:	f642 1302 	movw	r3, #10498	; 0x2902
   32202:	a903      	add	r1, sp, #12
   32204:	6820      	ldr	r0, [r4, #0]
   32206:	f88d 600c 	strb.w	r6, [sp, #12]
   3220a:	f8ad 300e 	strh.w	r3, [sp, #14]
   3220e:	f01a f95c 	bl	4c4ca <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   32212:	b1b0      	cbz	r0, 32242 <bt_gatt_discover+0xc2>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   32214:	f642 1303 	movw	r3, #10499	; 0x2903
   32218:	a904      	add	r1, sp, #16
   3221a:	6820      	ldr	r0, [r4, #0]
   3221c:	f88d 6010 	strb.w	r6, [sp, #16]
   32220:	f8ad 3012 	strh.w	r3, [sp, #18]
   32224:	f01a f951 	bl	4c4ca <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   32228:	b158      	cbz	r0, 32242 <bt_gatt_discover+0xc2>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   3222a:	f642 1304 	movw	r3, #10500	; 0x2904
   3222e:	a905      	add	r1, sp, #20
   32230:	6820      	ldr	r0, [r4, #0]
   32232:	f88d 6014 	strb.w	r6, [sp, #20]
   32236:	f8ad 3016 	strh.w	r3, [sp, #22]
   3223a:	f01a f946 	bl	4c4ca <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   3223e:	2800      	cmp	r0, #0
   32240:	d1cd      	bne.n	321de <bt_gatt_discover+0x5e>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   32242:	2308      	movs	r3, #8
   32244:	2204      	movs	r2, #4
   32246:	e9cd 3200 	strd	r3, r2, [sp]
   3224a:	4924      	ldr	r1, [pc, #144]	; (322dc <bt_gatt_discover+0x15c>)
   3224c:	4b24      	ldr	r3, [pc, #144]	; (322e0 <bt_gatt_discover+0x160>)
   3224e:	4622      	mov	r2, r4
   32250:	e7b4      	b.n	321bc <bt_gatt_discover+0x3c>
		if (params->uuid &&
   32252:	6808      	ldr	r0, [r1, #0]
   32254:	b378      	cbz	r0, 322b6 <bt_gatt_discover+0x136>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   32256:	2600      	movs	r6, #0
   32258:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   3225c:	a906      	add	r1, sp, #24
   3225e:	f88d 6018 	strb.w	r6, [sp, #24]
   32262:	f8ad 301a 	strh.w	r3, [sp, #26]
   32266:	f01a f930 	bl	4c4ca <bt_uuid_cmp>
		if (params->uuid &&
   3226a:	2800      	cmp	r0, #0
   3226c:	d0b7      	beq.n	321de <bt_gatt_discover+0x5e>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   3226e:	f642 0301 	movw	r3, #10241	; 0x2801
   32272:	a907      	add	r1, sp, #28
   32274:	6820      	ldr	r0, [r4, #0]
   32276:	f88d 601c 	strb.w	r6, [sp, #28]
   3227a:	f8ad 301e 	strh.w	r3, [sp, #30]
   3227e:	f01a f924 	bl	4c4ca <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   32282:	2800      	cmp	r0, #0
   32284:	d0ab      	beq.n	321de <bt_gatt_discover+0x5e>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   32286:	f642 0302 	movw	r3, #10242	; 0x2802
   3228a:	a908      	add	r1, sp, #32
   3228c:	6820      	ldr	r0, [r4, #0]
   3228e:	f88d 6020 	strb.w	r6, [sp, #32]
   32292:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   32296:	f01a f918 	bl	4c4ca <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   3229a:	2800      	cmp	r0, #0
   3229c:	d09f      	beq.n	321de <bt_gatt_discover+0x5e>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   3229e:	f642 0303 	movw	r3, #10243	; 0x2803
   322a2:	a909      	add	r1, sp, #36	; 0x24
   322a4:	6820      	ldr	r0, [r4, #0]
   322a6:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
   322aa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   322ae:	f01a f90c 	bl	4c4ca <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   322b2:	2800      	cmp	r0, #0
   322b4:	d093      	beq.n	321de <bt_gatt_discover+0x5e>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   322b6:	2304      	movs	r3, #4
   322b8:	e9cd 3300 	strd	r3, r3, [sp]
   322bc:	4622      	mov	r2, r4
   322be:	4b09      	ldr	r3, [pc, #36]	; (322e4 <bt_gatt_discover+0x164>)
   322c0:	4909      	ldr	r1, [pc, #36]	; (322e8 <bt_gatt_discover+0x168>)
   322c2:	e77b      	b.n	321bc <bt_gatt_discover+0x3c>
		return -ENOTCONN;
   322c4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   322c8:	e77b      	b.n	321c2 <bt_gatt_discover+0x42>
   322ca:	bf00      	nop
   322cc:	0004ec03 	.word	0x0004ec03
   322d0:	0004e5b5 	.word	0x0004e5b5
   322d4:	0004e4b7 	.word	0x0004e4b7
   322d8:	0004ec8f 	.word	0x0004ec8f
   322dc:	000322ed 	.word	0x000322ed
   322e0:	0004e4e7 	.word	0x0004e4e7
   322e4:	0004e49f 	.word	0x0004e49f
   322e8:	0004ee09 	.word	0x0004ee09

000322ec <gatt_read_type_rsp>:
{
   322ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   322f0:	b093      	sub	sp, #76	; 0x4c
   322f2:	4680      	mov	r8, r0
   322f4:	4617      	mov	r7, r2
   322f6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
	if (err) {
   322f8:	b121      	cbz	r1, 32304 <gatt_read_type_rsp+0x18>
		params->func(conn, NULL, params);
   322fa:	686b      	ldr	r3, [r5, #4]
   322fc:	462a      	mov	r2, r5
   322fe:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
   32300:	4798      	blx	r3
	if (!handle) {
   32302:	e05c      	b.n	323be <gatt_read_type_rsp+0xd2>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   32304:	7c2a      	ldrb	r2, [r5, #16]
   32306:	2a02      	cmp	r2, #2
   32308:	d175      	bne.n	323f6 <gatt_read_type_rsp+0x10a>
	switch (rsp->len) {
   3230a:	7838      	ldrb	r0, [r7, #0]
   3230c:	2806      	cmp	r0, #6
   3230e:	d018      	beq.n	32342 <gatt_read_type_rsp+0x56>
   32310:	2808      	cmp	r0, #8
   32312:	d177      	bne.n	32404 <gatt_read_type_rsp+0x118>
		u.uuid.type = BT_UUID_TYPE_16;
   32314:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   32318:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
   3231a:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   3231c:	b2a4      	uxth	r4, r4
   3231e:	f107 0901 	add.w	r9, r7, #1
			value.uuid = &u.uuid;
   32322:	f10d 0a20 	add.w	sl, sp, #32
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32326:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   32328:	783b      	ldrb	r3, [r7, #0]
   3232a:	42a3      	cmp	r3, r4
   3232c:	d90c      	bls.n	32348 <gatt_read_type_rsp+0x5c>
	if (length == 0U && handle) {
   3232e:	2c00      	cmp	r4, #0
   32330:	d168      	bne.n	32404 <gatt_read_type_rsp+0x118>
   32332:	2e00      	cmp	r6, #0
   32334:	d066      	beq.n	32404 <gatt_read_type_rsp+0x118>
	gatt_discover_next(conn, handle, params);
   32336:	462a      	mov	r2, r5
   32338:	4631      	mov	r1, r6
   3233a:	4640      	mov	r0, r8
   3233c:	f01c fc44 	bl	4ebc8 <gatt_discover_next>
   32340:	e03d      	b.n	323be <gatt_read_type_rsp+0xd2>
		u.uuid.type = BT_UUID_TYPE_128;
   32342:	f88d 2020 	strb.w	r2, [sp, #32]
		break;
   32346:	e7e7      	b.n	32318 <gatt_read_type_rsp+0x2c>
		handle = sys_le16_to_cpu(data->handle);
   32348:	f8b9 3000 	ldrh.w	r3, [r9]
   3234c:	b29e      	uxth	r6, r3
		if (!handle) {
   3234e:	2e00      	cmp	r6, #0
   32350:	d058      	beq.n	32404 <gatt_read_type_rsp+0x118>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   32352:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   32356:	f8ad 201c 	strh.w	r2, [sp, #28]
   3235a:	b291      	uxth	r1, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   3235c:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   32360:	f8ad 201e 	strh.w	r2, [sp, #30]
   32364:	b290      	uxth	r0, r2
		switch (u.uuid.type) {
   32366:	f89d 2020 	ldrb.w	r2, [sp, #32]
   3236a:	b172      	cbz	r2, 3238a <gatt_read_type_rsp+0x9e>
   3236c:	2a02      	cmp	r2, #2
   3236e:	d017      	beq.n	323a0 <gatt_read_type_rsp+0xb4>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   32370:	6829      	ldr	r1, [r5, #0]
   32372:	b339      	cbz	r1, 323c4 <gatt_read_type_rsp+0xd8>
   32374:	4650      	mov	r0, sl
   32376:	9303      	str	r3, [sp, #12]
   32378:	f01a f8a7 	bl	4c4ca <bt_uuid_cmp>
   3237c:	9b03      	ldr	r3, [sp, #12]
   3237e:	b308      	cbz	r0, 323c4 <gatt_read_type_rsp+0xd8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   32380:	783a      	ldrb	r2, [r7, #0]
   32382:	1aa4      	subs	r4, r4, r2
   32384:	b2a4      	uxth	r4, r4
   32386:	4491      	add	r9, r2
   32388:	e7ce      	b.n	32328 <gatt_read_type_rsp+0x3c>
			value.uuid = &u.uuid;
   3238a:	f8cd a018 	str.w	sl, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   3238e:	f899 2006 	ldrb.w	r2, [r9, #6]
   32392:	f899 1007 	ldrb.w	r1, [r9, #7]
   32396:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   3239a:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   3239e:	e7e7      	b.n	32370 <gatt_read_type_rsp+0x84>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   323a0:	230a      	movs	r3, #10
			params->_included.attr_handle = handle;
   323a2:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
   323a4:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
   323a6:	81a8      	strh	r0, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   323a8:	4977      	ldr	r1, [pc, #476]	; (32588 <gatt_read_type_rsp+0x29c>)
   323aa:	9201      	str	r2, [sp, #4]
   323ac:	9300      	str	r3, [sp, #0]
   323ae:	462a      	mov	r2, r5
   323b0:	4b76      	ldr	r3, [pc, #472]	; (3258c <gatt_read_type_rsp+0x2a0>)
   323b2:	4640      	mov	r0, r8
   323b4:	f01c fb02 	bl	4e9bc <gatt_req_send>
			return read_included_uuid(conn, params);
   323b8:	b286      	uxth	r6, r0
	if (!handle) {
   323ba:	2e00      	cmp	r6, #0
   323bc:	d1bb      	bne.n	32336 <gatt_read_type_rsp+0x4a>
}
   323be:	b013      	add	sp, #76	; 0x4c
   323c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   323c4:	f642 0202 	movw	r2, #10242	; 0x2802
   323c8:	f8ad 2012 	strh.w	r2, [sp, #18]
   323cc:	aa04      	add	r2, sp, #16
   323ce:	e9cd 2b0d 	strd	r2, fp, [sp, #52]	; 0x34
   323d2:	aa06      	add	r2, sp, #24
   323d4:	9210      	str	r2, [sp, #64]	; 0x40
		attr.handle = handle;
   323d6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   323da:	f88d b010 	strb.w	fp, [sp, #16]
   323de:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   323e2:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   323e6:	686b      	ldr	r3, [r5, #4]
   323e8:	462a      	mov	r2, r5
   323ea:	a90d      	add	r1, sp, #52	; 0x34
   323ec:	4640      	mov	r0, r8
   323ee:	4798      	blx	r3
   323f0:	2800      	cmp	r0, #0
   323f2:	d1c5      	bne.n	32380 <gatt_read_type_rsp+0x94>
   323f4:	e7e3      	b.n	323be <gatt_read_type_rsp+0xd2>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   323f6:	2a03      	cmp	r2, #3
   323f8:	d163      	bne.n	324c2 <gatt_read_type_rsp+0x1d6>
	switch (rsp->len) {
   323fa:	783a      	ldrb	r2, [r7, #0]
   323fc:	2a07      	cmp	r2, #7
   323fe:	d006      	beq.n	3240e <gatt_read_type_rsp+0x122>
   32400:	2a15      	cmp	r2, #21
   32402:	d026      	beq.n	32452 <gatt_read_type_rsp+0x166>
	params->func(conn, NULL, params);
   32404:	686b      	ldr	r3, [r5, #4]
   32406:	462a      	mov	r2, r5
   32408:	2100      	movs	r1, #0
   3240a:	4640      	mov	r0, r8
   3240c:	e778      	b.n	32300 <gatt_read_type_rsp+0x14>
		u.uuid.type = BT_UUID_TYPE_16;
   3240e:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   32412:	1e5c      	subs	r4, r3, #1
   32414:	b2a4      	uxth	r4, r4
   32416:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   3241a:	2600      	movs	r6, #0
   3241c:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
   32420:	783b      	ldrb	r3, [r7, #0]
   32422:	42a3      	cmp	r3, r4
   32424:	d883      	bhi.n	3232e <gatt_read_type_rsp+0x42>
		handle = sys_le16_to_cpu(data->handle);
   32426:	f8b9 b000 	ldrh.w	fp, [r9]
   3242a:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   3242e:	2e00      	cmp	r6, #0
   32430:	d0e8      	beq.n	32404 <gatt_read_type_rsp+0x118>
		switch (u.uuid.type) {
   32432:	f89d 3020 	ldrb.w	r3, [sp, #32]
   32436:	b183      	cbz	r3, 3245a <gatt_read_type_rsp+0x16e>
   32438:	2b02      	cmp	r3, #2
   3243a:	d017      	beq.n	3246c <gatt_read_type_rsp+0x180>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   3243c:	6829      	ldr	r1, [r5, #0]
   3243e:	b1e9      	cbz	r1, 3247c <gatt_read_type_rsp+0x190>
   32440:	4650      	mov	r0, sl
   32442:	f01a f842 	bl	4c4ca <bt_uuid_cmp>
   32446:	b1c8      	cbz	r0, 3247c <gatt_read_type_rsp+0x190>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   32448:	783a      	ldrb	r2, [r7, #0]
   3244a:	1aa4      	subs	r4, r4, r2
   3244c:	b2a4      	uxth	r4, r4
   3244e:	4491      	add	r9, r2
   32450:	e7e6      	b.n	32420 <gatt_read_type_rsp+0x134>
		u.uuid.type = BT_UUID_TYPE_128;
   32452:	2202      	movs	r2, #2
   32454:	f88d 2020 	strb.w	r2, [sp, #32]
		break;
   32458:	e7db      	b.n	32412 <gatt_read_type_rsp+0x126>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   3245a:	f899 3005 	ldrb.w	r3, [r9, #5]
   3245e:	f899 2006 	ldrb.w	r2, [r9, #6]
   32462:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   32466:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   3246a:	e7e7      	b.n	3243c <gatt_read_type_rsp+0x150>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   3246c:	2210      	movs	r2, #16
   3246e:	f109 0105 	add.w	r1, r9, #5
   32472:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   32476:	f019 ff39 	bl	4c2ec <memcpy>
			break;
   3247a:	e7df      	b.n	3243c <gatt_read_type_rsp+0x150>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   3247c:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   32480:	f899 3002 	ldrb.w	r3, [r9, #2]
   32484:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32488:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   3248c:	f88d 301e 	strb.w	r3, [sp, #30]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32490:	f8ad 2016 	strh.w	r2, [sp, #22]
   32494:	2300      	movs	r3, #0
   32496:	aa05      	add	r2, sp, #20
   32498:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
   3249c:	aa06      	add	r2, sp, #24
   3249e:	f88d 3014 	strb.w	r3, [sp, #20]
   324a2:	930f      	str	r3, [sp, #60]	; 0x3c
   324a4:	9210      	str	r2, [sp, #64]	; 0x40
   324a6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   324aa:	f8cd a018 	str.w	sl, [sp, #24]
		attr.handle = handle;
   324ae:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   324b2:	686b      	ldr	r3, [r5, #4]
   324b4:	462a      	mov	r2, r5
   324b6:	a90d      	add	r1, sp, #52	; 0x34
   324b8:	4640      	mov	r0, r8
   324ba:	4798      	blx	r3
   324bc:	2800      	cmp	r0, #0
   324be:	d1c3      	bne.n	32448 <gatt_read_type_rsp+0x15c>
   324c0:	e77d      	b.n	323be <gatt_read_type_rsp+0xd2>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   324c2:	682a      	ldr	r2, [r5, #0]
   324c4:	7816      	ldrb	r6, [r2, #0]
   324c6:	2e00      	cmp	r6, #0
   324c8:	d19c      	bne.n	32404 <gatt_read_type_rsp+0x118>
	uuid_val = BT_UUID_16(params->uuid)->val;
   324ca:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   324cc:	1e5c      	subs	r4, r3, #1
   324ce:	b2a4      	uxth	r4, r4
   324d0:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
   324d4:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   324d8:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   324da:	783b      	ldrb	r3, [r7, #0]
   324dc:	42a3      	cmp	r3, r4
   324de:	f63f af26 	bhi.w	3232e <gatt_read_type_rsp+0x42>
		handle = sys_le16_to_cpu(data->handle);
   324e2:	f8b9 2000 	ldrh.w	r2, [r9]
   324e6:	b296      	uxth	r6, r2
		if (!handle) {
   324e8:	2e00      	cmp	r6, #0
   324ea:	d08b      	beq.n	32404 <gatt_read_type_rsp+0x118>
		switch (uuid_val) {
   324ec:	f1bb 0f04 	cmp.w	fp, #4
   324f0:	d888      	bhi.n	32404 <gatt_read_type_rsp+0x118>
   324f2:	a301      	add	r3, pc, #4	; (adr r3, 324f8 <gatt_read_type_rsp+0x20c>)
   324f4:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
   324f8:	0003250d 	.word	0x0003250d
   324fc:	00032405 	.word	0x00032405
   32500:	0003250d 	.word	0x0003250d
   32504:	0003250d 	.word	0x0003250d
   32508:	0003254d 	.word	0x0003254d
	return ((uint16_t)src[1] << 8) | src[0];
   3250c:	f899 1003 	ldrb.w	r1, [r9, #3]
   32510:	f899 3002 	ldrb.w	r3, [r9, #2]
   32514:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			value.scc.flags = sys_get_le16(data->value);
   32518:	f8ad 3020 	strh.w	r3, [sp, #32]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   3251c:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
   3251e:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   32522:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	; 0x34
   32526:	ab08      	add	r3, sp, #32
   32528:	9310      	str	r3, [sp, #64]	; 0x40
   3252a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   3252e:	f88d a046 	strb.w	sl, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   32532:	462a      	mov	r2, r5
   32534:	a90d      	add	r1, sp, #52	; 0x34
   32536:	4640      	mov	r0, r8
   32538:	686b      	ldr	r3, [r5, #4]
   3253a:	4798      	blx	r3
   3253c:	2800      	cmp	r0, #0
   3253e:	f43f af3e 	beq.w	323be <gatt_read_type_rsp+0xd2>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   32542:	783a      	ldrb	r2, [r7, #0]
   32544:	1aa4      	subs	r4, r4, r2
   32546:	b2a4      	uxth	r4, r4
   32548:	4491      	add	r9, r2
   3254a:	e7c6      	b.n	324da <gatt_read_type_rsp+0x1ee>
			value.cpf.format = cpf->format;
   3254c:	f899 3002 	ldrb.w	r3, [r9, #2]
   32550:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   32554:	f899 3003 	ldrb.w	r3, [r9, #3]
   32558:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   3255c:	f899 1005 	ldrb.w	r1, [r9, #5]
   32560:	f899 3004 	ldrb.w	r3, [r9, #4]
   32564:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   32568:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   3256c:	f899 3006 	ldrb.w	r3, [r9, #6]
   32570:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   32574:	f899 3007 	ldrb.w	r3, [r9, #7]
   32578:	f899 1008 	ldrb.w	r1, [r9, #8]
   3257c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   32580:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   32584:	e7ca      	b.n	3251c <gatt_read_type_rsp+0x230>
   32586:	bf00      	nop
   32588:	0004ed81 	.word	0x0004ed81
   3258c:	0004e48b 	.word	0x0004e48b

00032590 <bt_gatt_subscribe>:
	if (conn->state != BT_CONN_CONNECTED) {
   32590:	7b43      	ldrb	r3, [r0, #13]
   32592:	2b07      	cmp	r3, #7
{
   32594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32596:	4604      	mov	r4, r0
   32598:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   3259a:	d16c      	bne.n	32676 <bt_gatt_subscribe+0xe6>
	sub = gatt_sub_find(conn);
   3259c:	f7fe ff36 	bl	3140c <gatt_sub_find>
	if (!sub) {
   325a0:	4605      	mov	r5, r0
   325a2:	b958      	cbnz	r0, 325bc <bt_gatt_subscribe+0x2c>
		sub = gatt_sub_find(NULL);
   325a4:	f7fe ff32 	bl	3140c <gatt_sub_find>
		if (sub) {
   325a8:	4605      	mov	r5, r0
   325aa:	2800      	cmp	r0, #0
   325ac:	d066      	beq.n	3267c <bt_gatt_subscribe+0xec>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   325ae:	f104 0188 	add.w	r1, r4, #136	; 0x88
   325b2:	3001      	adds	r0, #1
   325b4:	f01b feeb 	bl	4e38e <bt_addr_le_copy>
			sub->id = conn->id;
   325b8:	7a23      	ldrb	r3, [r4, #8]
   325ba:	702b      	strb	r3, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   325bc:	68aa      	ldr	r2, [r5, #8]
   325be:	b90a      	cbnz	r2, 325c4 <bt_gatt_subscribe+0x34>
   325c0:	4613      	mov	r3, r2
   325c2:	e001      	b.n	325c8 <bt_gatt_subscribe+0x38>
   325c4:	f1a2 031c 	sub.w	r3, r2, #28
   325c8:	2700      	movs	r7, #0
   325ca:	e014      	b.n	325f6 <bt_gatt_subscribe+0x66>
		if (tmp == params) {
   325cc:	42b3      	cmp	r3, r6
   325ce:	d106      	bne.n	325de <bt_gatt_subscribe+0x4e>
	if (gatt_sub_is_empty(sub)) {
   325d0:	b912      	cbnz	r2, 325d8 <bt_gatt_subscribe+0x48>
		gatt_sub_free(sub);
   325d2:	4628      	mov	r0, r5
   325d4:	f01b feec 	bl	4e3b0 <gatt_sub_free>
			return -EALREADY;
   325d8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   325dc:	e032      	b.n	32644 <bt_gatt_subscribe+0xb4>
		if (tmp->value_handle == params->value_handle &&
   325de:	8918      	ldrh	r0, [r3, #8]
   325e0:	8931      	ldrh	r1, [r6, #8]
   325e2:	4288      	cmp	r0, r1
   325e4:	d104      	bne.n	325f0 <bt_gatt_subscribe+0x60>
   325e6:	8a98      	ldrh	r0, [r3, #20]
   325e8:	8ab1      	ldrh	r1, [r6, #20]
			has_subscription = true;
   325ea:	4288      	cmp	r0, r1
   325ec:	bf28      	it	cs
   325ee:	2701      	movcs	r7, #1
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   325f0:	69db      	ldr	r3, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   325f2:	b113      	cbz	r3, 325fa <bt_gatt_subscribe+0x6a>
   325f4:	3b1c      	subs	r3, #28
   325f6:	2b00      	cmp	r3, #0
   325f8:	d1e8      	bne.n	325cc <bt_gatt_subscribe+0x3c>
	if (!has_subscription) {
   325fa:	2f00      	cmp	r7, #0
   325fc:	d132      	bne.n	32664 <bt_gatt_subscribe+0xd4>
		if (!params->ccc_handle) {
   325fe:	8973      	ldrh	r3, [r6, #10]
   32600:	bb1b      	cbnz	r3, 3264a <bt_gatt_subscribe+0xba>
	memcpy(&ccc_uuid, BT_UUID_GATT_CCC, sizeof(ccc_uuid));
   32602:	4d21      	ldr	r5, [pc, #132]	; (32688 <bt_gatt_subscribe+0xf8>)
   32604:	f88d 7004 	strb.w	r7, [sp, #4]
   32608:	2204      	movs	r2, #4
   3260a:	f642 1302 	movw	r3, #10498	; 0x2902
   3260e:	eb0d 0102 	add.w	r1, sp, r2
   32612:	4628      	mov	r0, r5
   32614:	f8ad 3006 	strh.w	r3, [sp, #6]
   32618:	f019 fe68 	bl	4c2ec <memcpy>
	memset(params->disc_params, 0, sizeof(*params->disc_params));
   3261c:	2218      	movs	r2, #24
   3261e:	4639      	mov	r1, r7
   32620:	6930      	ldr	r0, [r6, #16]
   32622:	f019 fe6e 	bl	4c302 <memset>
	params->disc_params->sub_params = params;
   32626:	6931      	ldr	r1, [r6, #16]
	params->disc_params->type = BT_GATT_DISCOVER_DESCRIPTOR;
   32628:	2304      	movs	r3, #4
   3262a:	740b      	strb	r3, [r1, #16]
	params->disc_params->start_handle = params->value_handle;
   3262c:	8933      	ldrh	r3, [r6, #8]
   3262e:	810b      	strh	r3, [r1, #8]
	params->disc_params->end_handle = params->end_handle;
   32630:	89b3      	ldrh	r3, [r6, #12]
   32632:	81cb      	strh	r3, [r1, #14]
	params->disc_params->func = gatt_ccc_discover_cb;
   32634:	4b15      	ldr	r3, [pc, #84]	; (3268c <bt_gatt_subscribe+0xfc>)
	params->disc_params->sub_params = params;
   32636:	614e      	str	r6, [r1, #20]
	err = bt_gatt_discover(conn, params->disc_params);
   32638:	4620      	mov	r0, r4
	params->disc_params->uuid = &ccc_uuid.uuid;
   3263a:	600d      	str	r5, [r1, #0]
	params->disc_params->func = gatt_ccc_discover_cb;
   3263c:	604b      	str	r3, [r1, #4]
	err = bt_gatt_discover(conn, params->disc_params);
   3263e:	f7ff fd9f 	bl	32180 <bt_gatt_discover>
   32642:	4604      	mov	r4, r0
}
   32644:	4620      	mov	r0, r4
   32646:	b003      	add	sp, #12
   32648:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = gatt_write_ccc(conn, params);
   3264a:	4620      	mov	r0, r4
   3264c:	4631      	mov	r1, r6
   3264e:	f7ff f94f 	bl	318f0 <gatt_write_ccc>
		if (err) {
   32652:	4604      	mov	r4, r0
   32654:	b130      	cbz	r0, 32664 <bt_gatt_subscribe+0xd4>
	if (gatt_sub_is_empty(sub)) {
   32656:	68ab      	ldr	r3, [r5, #8]
   32658:	2b00      	cmp	r3, #0
   3265a:	d1f3      	bne.n	32644 <bt_gatt_subscribe+0xb4>
		gatt_sub_free(sub);
   3265c:	4628      	mov	r0, r5
   3265e:	f01b fea7 	bl	4e3b0 <gatt_sub_free>
   32662:	e7ef      	b.n	32644 <bt_gatt_subscribe+0xb4>
Z_GENLIST_PREPEND(slist, snode)
   32664:	68aa      	ldr	r2, [r5, #8]
	parent->next = child;
   32666:	61f2      	str	r2, [r6, #28]
Z_GENLIST_PREPEND(slist, snode)
   32668:	68ec      	ldr	r4, [r5, #12]
	sys_slist_prepend(&sub->list, &params->node);
   3266a:	f106 031c 	add.w	r3, r6, #28
	list->head = node;
   3266e:	60ab      	str	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   32670:	b93c      	cbnz	r4, 32682 <bt_gatt_subscribe+0xf2>
	list->tail = node;
   32672:	60eb      	str	r3, [r5, #12]
   32674:	e7e6      	b.n	32644 <bt_gatt_subscribe+0xb4>
		return -ENOTCONN;
   32676:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3267a:	e7e3      	b.n	32644 <bt_gatt_subscribe+0xb4>
		return -ENOMEM;
   3267c:	f06f 040b 	mvn.w	r4, #11
   32680:	e7e0      	b.n	32644 <bt_gatt_subscribe+0xb4>
	return 0;
   32682:	2400      	movs	r4, #0
   32684:	e7de      	b.n	32644 <bt_gatt_subscribe+0xb4>
   32686:	bf00      	nop
   32688:	20006b7c 	.word	0x20006b7c
   3268c:	0004efc9 	.word	0x0004efc9

00032690 <bt_gatt_connected>:
{
   32690:	b570      	push	{r4, r5, r6, lr}
   32692:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32694:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   32698:	4605      	mov	r5, r0
	data.conn = conn;
   3269a:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   3269c:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   3269e:	4631      	mov	r1, r6
   326a0:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   326a2:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   326a6:	f01a fa4f 	bl	4cb48 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   326aa:	b190      	cbz	r0, 326d2 <bt_gatt_connected+0x42>
		if (conn->id) {
   326ac:	7a2a      	ldrb	r2, [r5, #8]
   326ae:	b36a      	cbz	r2, 3270c <bt_gatt_connected+0x7c>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   326b0:	ac02      	add	r4, sp, #8
   326b2:	2104      	movs	r1, #4
   326b4:	4620      	mov	r0, r4
   326b6:	f017 fc5d 	bl	49f74 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   326ba:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   326bc:	4a1d      	ldr	r2, [pc, #116]	; (32734 <bt_gatt_connected+0xa4>)
   326be:	2124      	movs	r1, #36	; 0x24
   326c0:	a805      	add	r0, sp, #20
   326c2:	4633      	mov	r3, r6
   326c4:	f7fa ff10 	bl	2d4e8 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   326c8:	aa05      	add	r2, sp, #20
   326ca:	491b      	ldr	r1, [pc, #108]	; (32738 <bt_gatt_connected+0xa8>)
   326cc:	4610      	mov	r0, r2
   326ce:	f7f9 fc97 	bl	2c000 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   326d2:	ab03      	add	r3, sp, #12
   326d4:	4a19      	ldr	r2, [pc, #100]	; (3273c <bt_gatt_connected+0xac>)
   326d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   326da:	2001      	movs	r0, #1
   326dc:	f01c fa0b 	bl	4eaf6 <bt_gatt_foreach_attr>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   326e0:	78eb      	ldrb	r3, [r5, #3]
   326e2:	b94b      	cbnz	r3, 326f8 <bt_gatt_connected+0x68>
	    bt_conn_get_security(conn) < data.sec) {
   326e4:	4628      	mov	r0, r5
   326e6:	f01a fe4a 	bl	4d37e <bt_conn_get_security>
   326ea:	f89d 1010 	ldrb.w	r1, [sp, #16]
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
   326ee:	4288      	cmp	r0, r1
   326f0:	d202      	bcs.n	326f8 <bt_gatt_connected+0x68>
		int err = bt_conn_set_security(conn, data.sec);
   326f2:	4628      	mov	r0, r5
   326f4:	f01a fe10 	bl	4d318 <bt_conn_set_security>
	sub = gatt_sub_find(conn);
   326f8:	4628      	mov	r0, r5
   326fa:	f7fe fe87 	bl	3140c <gatt_sub_find>
	if (!sub) {
   326fe:	b118      	cbz	r0, 32708 <bt_gatt_connected+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   32700:	6884      	ldr	r4, [r0, #8]
   32702:	b10c      	cbz	r4, 32708 <bt_gatt_connected+0x78>
   32704:	3c1c      	subs	r4, #28
   32706:	b91c      	cbnz	r4, 32710 <bt_gatt_connected+0x80>
}
   32708:	b00e      	add	sp, #56	; 0x38
   3270a:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   3270c:	9200      	str	r2, [sp, #0]
   3270e:	e7d5      	b.n	326bc <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   32710:	4631      	mov	r1, r6
   32712:	7a28      	ldrb	r0, [r5, #8]
   32714:	f01a fa18 	bl	4cb48 <bt_addr_le_is_bonded>
   32718:	b148      	cbz	r0, 3272e <bt_gatt_connected+0x9e>
		    !atomic_test_bit(params->flags,
   3271a:	2101      	movs	r1, #1
   3271c:	f104 0018 	add.w	r0, r4, #24
   32720:	f01b fd8d 	bl	4e23e <atomic_test_bit>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   32724:	b918      	cbnz	r0, 3272e <bt_gatt_connected+0x9e>
			gatt_write_ccc(conn, params);
   32726:	4621      	mov	r1, r4
   32728:	4628      	mov	r0, r5
   3272a:	f7ff f8e1 	bl	318f0 <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   3272e:	69e4      	ldr	r4, [r4, #28]
   32730:	e7e7      	b.n	32702 <bt_gatt_connected+0x72>
   32732:	bf00      	nop
   32734:	000544be 	.word	0x000544be
   32738:	00031c29 	.word	0x00031c29
   3273c:	000320a1 	.word	0x000320a1

00032740 <bt_gatt_att_max_mtu_changed>:
{
   32740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   32742:	4b08      	ldr	r3, [pc, #32]	; (32764 <bt_gatt_att_max_mtu_changed+0x24>)
   32744:	681c      	ldr	r4, [r3, #0]
{
   32746:	4605      	mov	r5, r0
   32748:	460e      	mov	r6, r1
   3274a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   3274c:	b10c      	cbz	r4, 32752 <bt_gatt_att_max_mtu_changed+0x12>
   3274e:	3c04      	subs	r4, #4
   32750:	b904      	cbnz	r4, 32754 <bt_gatt_att_max_mtu_changed+0x14>
}
   32752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   32754:	6823      	ldr	r3, [r4, #0]
   32756:	b11b      	cbz	r3, 32760 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   32758:	463a      	mov	r2, r7
   3275a:	4631      	mov	r1, r6
   3275c:	4628      	mov	r0, r5
   3275e:	4798      	blx	r3
   32760:	6864      	ldr	r4, [r4, #4]
   32762:	e7f3      	b.n	3274c <bt_gatt_att_max_mtu_changed+0xc>
   32764:	20004048 	.word	0x20004048

00032768 <bt_gatt_encrypt_change>:
{
   32768:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   3276a:	4a06      	ldr	r2, [pc, #24]	; (32784 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   3276c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   3276e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   32770:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   32772:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   32776:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   3277a:	f01c f9bc 	bl	4eaf6 <bt_gatt_foreach_attr>
}
   3277e:	b003      	add	sp, #12
   32780:	f85d fb04 	ldr.w	pc, [sp], #4
   32784:	000320a1 	.word	0x000320a1

00032788 <db_hash_read>:
{
   32788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   3278a:	4914      	ldr	r1, [pc, #80]	; (327dc <db_hash_read+0x54>)
{
   3278c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   32790:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   32792:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   32796:	4616      	mov	r6, r2
   32798:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   3279a:	f01e fd2d 	bl	511f8 <k_work_cancel_delayable_sync>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   3279e:	2102      	movs	r1, #2
   327a0:	480f      	ldr	r0, [pc, #60]	; (327e0 <db_hash_read+0x58>)
   327a2:	f01b fd4c 	bl	4e23e <atomic_test_bit>
   327a6:	b910      	cbnz	r0, 327ae <db_hash_read+0x26>
		db_hash_gen(true);
   327a8:	2001      	movs	r0, #1
   327aa:	f7ff f9a3 	bl	31af4 <db_hash_gen>
	(void)bt_gatt_change_aware(conn, true);
   327ae:	2101      	movs	r1, #1
   327b0:	4620      	mov	r0, r4
   327b2:	f01c fd25 	bl	4f200 <bt_gatt_change_aware>
	if (offset > value_len) {
   327b6:	2d10      	cmp	r5, #16
   327b8:	d80c      	bhi.n	327d4 <db_hash_read+0x4c>
	len = MIN(buf_len, value_len - offset);
   327ba:	f1c5 0410 	rsb	r4, r5, #16
   327be:	42bc      	cmp	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   327c0:	4908      	ldr	r1, [pc, #32]	; (327e4 <db_hash_read+0x5c>)
	len = MIN(buf_len, value_len - offset);
   327c2:	bfa8      	it	ge
   327c4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   327c6:	4622      	mov	r2, r4
   327c8:	4429      	add	r1, r5
   327ca:	4630      	mov	r0, r6
   327cc:	f019 fd8e 	bl	4c2ec <memcpy>
}
   327d0:	4620      	mov	r0, r4
   327d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   327d4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   327d8:	e7fa      	b.n	327d0 <db_hash_read+0x48>
   327da:	bf00      	nop
   327dc:	20001f70 	.word	0x20001f70
   327e0:	20002030 	.word	0x20002030
   327e4:	20001f20 	.word	0x20001f20

000327e8 <bt_gatt_store_ccc>:
{
   327e8:	b570      	push	{r4, r5, r6, lr}
   327ea:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   327ec:	2300      	movs	r3, #0
{
   327ee:	4604      	mov	r4, r0
   327f0:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   327f2:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   327f4:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   327f8:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   327fa:	4a11      	ldr	r2, [pc, #68]	; (32840 <bt_gatt_store_ccc+0x58>)
   327fc:	ab0d      	add	r3, sp, #52	; 0x34
   327fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32802:	2001      	movs	r0, #1
   32804:	f01c f977 	bl	4eaf6 <bt_gatt_foreach_attr>
	if (id) {
   32808:	b1ac      	cbz	r4, 32836 <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
   3280a:	ae03      	add	r6, sp, #12
   3280c:	4622      	mov	r2, r4
   3280e:	2104      	movs	r1, #4
   32810:	4630      	mov	r0, r6
   32812:	f017 fbaf 	bl	49f74 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   32816:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   32818:	4a0a      	ldr	r2, [pc, #40]	; (32844 <bt_gatt_store_ccc+0x5c>)
   3281a:	462b      	mov	r3, r5
   3281c:	2124      	movs	r1, #36	; 0x24
   3281e:	a804      	add	r0, sp, #16
   32820:	f7fa fe62 	bl	2d4e8 <bt_settings_encode_key>
	if (save.count) {
   32824:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   32826:	b142      	cbz	r2, 3283a <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
   32828:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   3282a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   3282c:	a804      	add	r0, sp, #16
   3282e:	f7f9 fb89 	bl	2bf44 <settings_save_one>
}
   32832:	b040      	add	sp, #256	; 0x100
   32834:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   32836:	9400      	str	r4, [sp, #0]
   32838:	e7ee      	b.n	32818 <bt_gatt_store_ccc+0x30>
		str = NULL;
   3283a:	4611      	mov	r1, r2
   3283c:	e7f6      	b.n	3282c <bt_gatt_store_ccc+0x44>
   3283e:	bf00      	nop
   32840:	00031639 	.word	0x00031639
   32844:	000544be 	.word	0x000544be

00032848 <bt_gatt_identity_resolved>:
{
   32848:	b513      	push	{r0, r1, r4, lr}
   3284a:	4604      	mov	r4, r0
	struct addr_match user_data = {
   3284c:	e9cd 1200 	strd	r1, r2, [sp]
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   32850:	466b      	mov	r3, sp
   32852:	4a08      	ldr	r2, [pc, #32]	; (32874 <bt_gatt_identity_resolved+0x2c>)
   32854:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32858:	2001      	movs	r0, #1
   3285a:	f01c f94c 	bl	4eaf6 <bt_gatt_foreach_attr>
	bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   3285e:	f104 0188 	add.w	r1, r4, #136	; 0x88
   32862:	7a20      	ldrb	r0, [r4, #8]
   32864:	f7ff ffc0 	bl	327e8 <bt_gatt_store_ccc>
	bt_gatt_store_cf(conn);
   32868:	4620      	mov	r0, r4
   3286a:	f7fe fe2f 	bl	314cc <bt_gatt_store_cf>
}
   3286e:	b002      	add	sp, #8
   32870:	bd10      	pop	{r4, pc}
   32872:	bf00      	nop
   32874:	00031671 	.word	0x00031671

00032878 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   32878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3287c:	b08e      	sub	sp, #56	; 0x38
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   3287e:	ae03      	add	r6, sp, #12
{
   32880:	4604      	mov	r4, r0
   32882:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   32884:	9103      	str	r1, [sp, #12]
   32886:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   3288a:	4633      	mov	r3, r6
   3288c:	4a36      	ldr	r2, [pc, #216]	; (32968 <bt_gatt_clear+0xf0>)
   3288e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   32892:	2001      	movs	r0, #1
   32894:	f01c f92f 	bl	4eaf6 <bt_gatt_foreach_attr>
		if (id) {
   32898:	2c00      	cmp	r4, #0
   3289a:	d03f      	beq.n	3291c <bt_gatt_clear+0xa4>
			u8_to_dec(id_str, sizeof(id_str), id);
   3289c:	af02      	add	r7, sp, #8
   3289e:	4622      	mov	r2, r4
   328a0:	2104      	movs	r1, #4
   328a2:	4638      	mov	r0, r7
   328a4:	f017 fb66 	bl	49f74 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   328a8:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   328aa:	462b      	mov	r3, r5
   328ac:	4a2f      	ldr	r2, [pc, #188]	; (3296c <bt_gatt_clear+0xf4>)
   328ae:	2124      	movs	r1, #36	; 0x24
   328b0:	a805      	add	r0, sp, #20
   328b2:	f7fa fe19 	bl	2d4e8 <bt_settings_encode_key>
		return settings_delete(key);
   328b6:	a805      	add	r0, sp, #20
   328b8:	f018 fa16 	bl	4ace8 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   328bc:	2800      	cmp	r0, #0
   328be:	db2a      	blt.n	32916 <bt_gatt_clear+0x9e>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   328c0:	4629      	mov	r1, r5
   328c2:	4620      	mov	r0, r4
   328c4:	f7fe ffa0 	bl	31808 <bt_gatt_clear_sc>
		if (err < 0) {
   328c8:	2800      	cmp	r0, #0
   328ca:	db24      	blt.n	32916 <bt_gatt_clear+0x9e>
	cfg = find_cf_cfg_by_addr(id, addr);
   328cc:	4629      	mov	r1, r5
   328ce:	4620      	mov	r0, r4
   328d0:	f7fe fdbe 	bl	31450 <find_cf_cfg_by_addr>
	if (cfg) {
   328d4:	b108      	cbz	r0, 328da <bt_gatt_clear+0x62>
		clear_cf_cfg(cfg);
   328d6:	f01b fe93 	bl	4e600 <clear_cf_cfg>
		if (id) {
   328da:	b30c      	cbz	r4, 32920 <bt_gatt_clear+0xa8>
			u8_to_dec(id_str, sizeof(id_str), id);
   328dc:	4622      	mov	r2, r4
   328de:	2104      	movs	r1, #4
   328e0:	4630      	mov	r0, r6
   328e2:	f017 fb47 	bl	49f74 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   328e6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   328e8:	462b      	mov	r3, r5
   328ea:	4a21      	ldr	r2, [pc, #132]	; (32970 <bt_gatt_clear+0xf8>)
   328ec:	2124      	movs	r1, #36	; 0x24
   328ee:	a805      	add	r0, sp, #20
   328f0:	f7fa fdfa 	bl	2d4e8 <bt_settings_encode_key>
		return settings_delete(key);
   328f4:	a805      	add	r0, sp, #20
   328f6:	f018 f9f7 	bl	4ace8 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   328fa:	2800      	cmp	r0, #0
   328fc:	db0b      	blt.n	32916 <bt_gatt_clear+0x9e>
   328fe:	4e1d      	ldr	r6, [pc, #116]	; (32974 <bt_gatt_clear+0xfc>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   32900:	2700      	movs	r7, #0
		if (id == sub->id &&
   32902:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   32906:	42a3      	cmp	r3, r4
   32908:	d00c      	beq.n	32924 <bt_gatt_clear+0xac>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   3290a:	3701      	adds	r7, #1
   3290c:	2f0c      	cmp	r7, #12
   3290e:	f106 0610 	add.w	r6, r6, #16
   32912:	d1f6      	bne.n	32902 <bt_gatt_clear+0x8a>

	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
   32914:	2000      	movs	r0, #0
}
   32916:	b00e      	add	sp, #56	; 0x38
   32918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   3291c:	9400      	str	r4, [sp, #0]
   3291e:	e7c4      	b.n	328aa <bt_gatt_clear+0x32>
			bt_settings_encode_key(key, sizeof(key), "cf",
   32920:	9400      	str	r4, [sp, #0]
   32922:	e7e1      	b.n	328e8 <bt_gatt_clear+0x70>
		    !bt_addr_le_cmp(addr, &sub->peer)) {
   32924:	4631      	mov	r1, r6
   32926:	4628      	mov	r0, r5
   32928:	ea4f 1807 	mov.w	r8, r7, lsl #4
   3292c:	f01b fcf2 	bl	4e314 <bt_addr_le_cmp>
		if (id == sub->id &&
   32930:	2800      	cmp	r0, #0
   32932:	d1ea      	bne.n	3290a <bt_gatt_clear+0x92>
		struct gatt_sub *sub = &subscriptions[i];
   32934:	4d10      	ldr	r5, [pc, #64]	; (32978 <bt_gatt_clear+0x100>)
   32936:	4445      	add	r5, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   32938:	68aa      	ldr	r2, [r5, #8]
   3293a:	2a00      	cmp	r2, #0
   3293c:	d0ea      	beq.n	32914 <bt_gatt_clear+0x9c>
   3293e:	f1b2 031c 	subs.w	r3, r2, #28
   32942:	d0e7      	beq.n	32914 <bt_gatt_clear+0x9c>
   32944:	6814      	ldr	r4, [r2, #0]
   32946:	b104      	cbz	r4, 3294a <bt_gatt_clear+0xd2>
   32948:	3c1c      	subs	r4, #28
		params->value = 0U;
   3294a:	2600      	movs	r6, #0
		gatt_sub_remove(NULL, sub, prev, params);
   3294c:	2200      	movs	r2, #0
		params->value = 0U;
   3294e:	829e      	strh	r6, [r3, #20]
		gatt_sub_remove(NULL, sub, prev, params);
   32950:	4629      	mov	r1, r5
   32952:	4610      	mov	r0, r2
   32954:	f01b fd38 	bl	4e3c8 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   32958:	2c00      	cmp	r4, #0
   3295a:	d0db      	beq.n	32914 <bt_gatt_clear+0x9c>
   3295c:	69e2      	ldr	r2, [r4, #28]
   3295e:	b102      	cbz	r2, 32962 <bt_gatt_clear+0xea>
   32960:	3a1c      	subs	r2, #28
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   32962:	4623      	mov	r3, r4
   32964:	4614      	mov	r4, r2
   32966:	e7f1      	b.n	3294c <bt_gatt_clear+0xd4>
   32968:	00031731 	.word	0x00031731
   3296c:	000544be 	.word	0x000544be
   32970:	000544cd 	.word	0x000544cd
   32974:	200041a9 	.word	0x200041a9
   32978:	200041a8 	.word	0x200041a8

0003297c <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   3297c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   32980:	4603      	mov	r3, r0
{
   32982:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   32984:	4a46      	ldr	r2, [pc, #280]	; (32aa0 <bt_gatt_disconnected+0x124>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   32986:	4d47      	ldr	r5, [pc, #284]	; (32aa4 <bt_gatt_disconnected+0x128>)
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   32988:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3298c:	2001      	movs	r0, #1
   3298e:	f01c f8b2 	bl	4eaf6 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   32992:	4620      	mov	r0, r4
   32994:	f7fd f96a 	bl	2fc6c <bt_conn_index>
   32998:	4606      	mov	r6, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   3299a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   3299e:	b120      	cbz	r0, 329aa <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   329a0:	f01a fc35 	bl	4d20e <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   329a4:	2300      	movs	r3, #0
   329a6:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   329aa:	4a3e      	ldr	r2, [pc, #248]	; (32aa4 <bt_gatt_disconnected+0x128>)
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   329ac:	2300      	movs	r3, #0
		if (gatt_ccc_store.conn_list[i]) {
   329ae:	f852 1b04 	ldr.w	r1, [r2], #4
   329b2:	b929      	cbnz	r1, 329c0 <bt_gatt_disconnected+0x44>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   329b4:	3301      	adds	r3, #1
   329b6:	2b06      	cmp	r3, #6
   329b8:	d1f9      	bne.n	329ae <bt_gatt_disconnected+0x32>

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   329ba:	483b      	ldr	r0, [pc, #236]	; (32aa8 <bt_gatt_disconnected+0x12c>)
   329bc:	f01e fc08 	bl	511d0 <k_work_cancel_delayable>
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   329c0:	f104 0588 	add.w	r5, r4, #136	; 0x88
   329c4:	4629      	mov	r1, r5
   329c6:	7a20      	ldrb	r0, [r4, #8]
   329c8:	f01a f8be 	bl	4cb48 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   329cc:	b130      	cbz	r0, 329dc <bt_gatt_disconnected+0x60>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   329ce:	4629      	mov	r1, r5
   329d0:	7a20      	ldrb	r0, [r4, #8]
   329d2:	f7ff ff09 	bl	327e8 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   329d6:	4620      	mov	r0, r4
   329d8:	f7fe fd78 	bl	314cc <bt_gatt_store_cf>
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   329dc:	4629      	mov	r1, r5
   329de:	7a20      	ldrb	r0, [r4, #8]
   329e0:	f01a f8b2 	bl	4cb48 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   329e4:	b150      	cbz	r0, 329fc <bt_gatt_disconnected+0x80>
		struct addr_with_id addr_with_id = {
   329e6:	7a23      	ldrb	r3, [r4, #8]
   329e8:	f88d 3004 	strb.w	r3, [sp, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   329ec:	4a2f      	ldr	r2, [pc, #188]	; (32aac <bt_gatt_disconnected+0x130>)
		struct addr_with_id addr_with_id = {
   329ee:	9500      	str	r5, [sp, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   329f0:	466b      	mov	r3, sp
   329f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   329f6:	2001      	movs	r0, #1
   329f8:	f01c f87d 	bl	4eaf6 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   329fc:	4620      	mov	r0, r4
   329fe:	f7fe fd05 	bl	3140c <gatt_sub_find>
	if (!sub) {
   32a02:	4680      	mov	r8, r0
   32a04:	b388      	cbz	r0, 32a6a <bt_gatt_disconnected+0xee>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   32a06:	6883      	ldr	r3, [r0, #8]
   32a08:	b37b      	cbz	r3, 32a6a <bt_gatt_disconnected+0xee>
   32a0a:	f1b3 071c 	subs.w	r7, r3, #28
   32a0e:	d02c      	beq.n	32a6a <bt_gatt_disconnected+0xee>
   32a10:	681e      	ldr	r6, [r3, #0]
   32a12:	b106      	cbz	r6, 32a16 <bt_gatt_disconnected+0x9a>
   32a14:	3e1c      	subs	r6, #28
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   32a16:	f04f 0900 	mov.w	r9, #0
		    (atomic_test_bit(params->flags,
   32a1a:	46ca      	mov	sl, r9
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   32a1c:	f108 0b01 	add.w	fp, r8, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   32a20:	4629      	mov	r1, r5
   32a22:	7a20      	ldrb	r0, [r4, #8]
   32a24:	f01a f890 	bl	4cb48 <bt_addr_le_is_bonded>
   32a28:	b970      	cbnz	r0, 32a48 <bt_gatt_disconnected+0xcc>
			params->value = 0U;
   32a2a:	f8a7 a014 	strh.w	sl, [r7, #20]
			gatt_sub_remove(conn, sub, prev, params);
   32a2e:	463b      	mov	r3, r7
   32a30:	464a      	mov	r2, r9
   32a32:	4641      	mov	r1, r8
   32a34:	4620      	mov	r0, r4
   32a36:	f01b fcc7 	bl	4e3c8 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   32a3a:	b1b6      	cbz	r6, 32a6a <bt_gatt_disconnected+0xee>
   32a3c:	69f3      	ldr	r3, [r6, #28]
   32a3e:	b103      	cbz	r3, 32a42 <bt_gatt_disconnected+0xc6>
   32a40:	3b1c      	subs	r3, #28
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   32a42:	4637      	mov	r7, r6
   32a44:	461e      	mov	r6, r3
   32a46:	e7eb      	b.n	32a20 <bt_gatt_disconnected+0xa4>
		    (atomic_test_bit(params->flags,
   32a48:	2100      	movs	r1, #0
   32a4a:	f107 0018 	add.w	r0, r7, #24
   32a4e:	f01b fbf6 	bl	4e23e <atomic_test_bit>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   32a52:	2800      	cmp	r0, #0
   32a54:	d1e9      	bne.n	32a2a <bt_gatt_disconnected+0xae>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   32a56:	f898 3001 	ldrb.w	r3, [r8, #1]
   32a5a:	b11b      	cbz	r3, 32a64 <bt_gatt_disconnected+0xe8>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   32a5c:	4629      	mov	r1, r5
   32a5e:	4658      	mov	r0, fp
   32a60:	f01b fc95 	bl	4e38e <bt_addr_le_copy>
			prev = &params->node;
   32a64:	f107 091c 	add.w	r9, r7, #28
   32a68:	e7e7      	b.n	32a3a <bt_gatt_disconnected+0xbe>
	cfg = find_cf_cfg(conn);
   32a6a:	4620      	mov	r0, r4
   32a6c:	f7fe fc8c 	bl	31388 <find_cf_cfg>
	if (!cfg) {
   32a70:	4606      	mov	r6, r0
   32a72:	b138      	cbz	r0, 32a84 <bt_gatt_disconnected+0x108>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   32a74:	4629      	mov	r1, r5
   32a76:	7a20      	ldrb	r0, [r4, #8]
   32a78:	f01a f866 	bl	4cb48 <bt_addr_le_is_bonded>
   32a7c:	b928      	cbnz	r0, 32a8a <bt_gatt_disconnected+0x10e>
		clear_cf_cfg(cfg);
   32a7e:	4630      	mov	r0, r6
   32a80:	f01b fdbe 	bl	4e600 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   32a84:	b003      	add	sp, #12
   32a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   32a8a:	4629      	mov	r1, r5
   32a8c:	1c70      	adds	r0, r6, #1
   32a8e:	f01b fc7e 	bl	4e38e <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   32a92:	f06f 0102 	mvn.w	r1, #2
   32a96:	f106 000c 	add.w	r0, r6, #12
   32a9a:	f01b fce7 	bl	4e46c <atomic_and>
}
   32a9e:	e7f1      	b.n	32a84 <bt_gatt_disconnected+0x108>
   32aa0:	00031855 	.word	0x00031855
   32aa4:	20001f98 	.word	0x20001f98
   32aa8:	20001fb0 	.word	0x20001fb0
   32aac:	00031731 	.word	0x00031731

00032ab0 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   32ab0:	4b10      	ldr	r3, [pc, #64]	; (32af4 <get_io_capa+0x44>)
   32ab2:	681b      	ldr	r3, [r3, #0]
   32ab4:	b1bb      	cbz	r3, 32ae6 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   32ab6:	685a      	ldr	r2, [r3, #4]
   32ab8:	b142      	cbz	r2, 32acc <get_io_capa+0x1c>
   32aba:	6899      	ldr	r1, [r3, #8]
   32abc:	b131      	cbz	r1, 32acc <get_io_capa+0x1c>
   32abe:	68d9      	ldr	r1, [r3, #12]
   32ac0:	b911      	cbnz	r1, 32ac8 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   32ac2:	490d      	ldr	r1, [pc, #52]	; (32af8 <get_io_capa+0x48>)
   32ac4:	7809      	ldrb	r1, [r1, #0]
   32ac6:	b939      	cbnz	r1, 32ad8 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   32ac8:	2004      	movs	r0, #4
   32aca:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   32acc:	490a      	ldr	r1, [pc, #40]	; (32af8 <get_io_capa+0x48>)
   32ace:	7809      	ldrb	r1, [r1, #0]
   32ad0:	b111      	cbz	r1, 32ad8 <get_io_capa+0x28>
   32ad2:	b10a      	cbz	r2, 32ad8 <get_io_capa+0x28>
   32ad4:	68d9      	ldr	r1, [r3, #12]
   32ad6:	b941      	cbnz	r1, 32aea <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   32ad8:	689b      	ldr	r3, [r3, #8]
   32ada:	b943      	cbnz	r3, 32aee <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   32adc:	2a00      	cmp	r2, #0
   32ade:	bf0c      	ite	eq
   32ae0:	2003      	moveq	r0, #3
   32ae2:	2000      	movne	r0, #0
   32ae4:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   32ae6:	2003      	movs	r0, #3
   32ae8:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   32aea:	2001      	movs	r0, #1
   32aec:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   32aee:	2002      	movs	r0, #2
	}
}
   32af0:	4770      	bx	lr
   32af2:	bf00      	nop
   32af4:	20003ff4 	.word	0x20003ff4
   32af8:	20006d94 	.word	0x20006d94

00032afc <get_pair_method>:

	return true;
}

static uint8_t get_pair_method(struct bt_smp *smp, uint8_t remote_io)
{
   32afc:	b510      	push	{r4, lr}
   32afe:	460c      	mov	r4, r1
	struct bt_smp_pairing *req, *rsp;

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   32b00:	7b03      	ldrb	r3, [r0, #12]
   32b02:	7cc1      	ldrb	r1, [r0, #19]
   32b04:	ea03 0201 	and.w	r2, r3, r1
   32b08:	0712      	lsls	r2, r2, #28
   32b0a:	d504      	bpl.n	32b16 <get_pair_method+0x1a>
		/* if one side has OOB data use OOB */
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   32b0c:	7ac2      	ldrb	r2, [r0, #11]
   32b0e:	7c80      	ldrb	r0, [r0, #18]
   32b10:	4302      	orrs	r2, r0
   32b12:	07d2      	lsls	r2, r2, #31
   32b14:	d40e      	bmi.n	32b34 <get_pair_method+0x38>
			return LE_SC_OOB;
		}
	}

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   32b16:	2c04      	cmp	r4, #4
   32b18:	d80e      	bhi.n	32b38 <get_pair_method+0x3c>
		return JUST_WORKS;
	}

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   32b1a:	ea43 0001 	orr.w	r0, r3, r1
   32b1e:	f010 0004 	ands.w	r0, r0, #4
   32b22:	d006      	beq.n	32b32 <get_pair_method+0x36>
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
   32b24:	f7ff ffc4 	bl	32ab0 <get_io_capa>
   32b28:	4904      	ldr	r1, [pc, #16]	; (32b3c <get_pair_method+0x40>)
   32b2a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   32b2e:	440c      	add	r4, r1
   32b30:	5c20      	ldrb	r0, [r4, r0]
#else
	return JUST_WORKS;
#endif
}
   32b32:	bd10      	pop	{r4, pc}
			return LE_SC_OOB;
   32b34:	2005      	movs	r0, #5
   32b36:	e7fc      	b.n	32b32 <get_pair_method+0x36>
		return JUST_WORKS;
   32b38:	2000      	movs	r0, #0
   32b3a:	e7fa      	b.n	32b32 <get_pair_method+0x36>
   32b3c:	000544f6 	.word	0x000544f6

00032b40 <smp_find>:
}

static struct bt_smp *smp_find(int flag)
{
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   32b40:	4a08      	ldr	r2, [pc, #32]	; (32b64 <smp_find+0x24>)
{
   32b42:	b538      	push	{r3, r4, r5, lr}
   32b44:	4604      	mov	r4, r0
   32b46:	2300      	movs	r3, #0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   32b48:	1d15      	adds	r5, r2, #4
   32b4a:	4621      	mov	r1, r4
   32b4c:	18e8      	adds	r0, r5, r3
   32b4e:	f01c fbc4 	bl	4f2da <atomic_test_bit>
   32b52:	b108      	cbz	r0, 32b58 <smp_find+0x18>
			return &bt_smp_pool[i];
   32b54:	18d0      	adds	r0, r2, r3
		}
	}

	return NULL;
}
   32b56:	bd38      	pop	{r3, r4, r5, pc}
   32b58:	f503 7302 	add.w	r3, r3, #520	; 0x208
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   32b5c:	f5b3 6f43 	cmp.w	r3, #3120	; 0xc30
   32b60:	d1f3      	bne.n	32b4a <smp_find+0xa>
   32b62:	e7f8      	b.n	32b56 <smp_find+0x16>
   32b64:	20002038 	.word	0x20002038

00032b68 <smp_g2>:
{
   32b68:	b5f0      	push	{r4, r5, r6, r7, lr}
   32b6a:	b099      	sub	sp, #100	; 0x64
   32b6c:	4615      	mov	r5, r2
   32b6e:	460f      	mov	r7, r1
	sys_memcpy_swap(m, u, 32);
   32b70:	2220      	movs	r2, #32
   32b72:	4601      	mov	r1, r0
   32b74:	a804      	add	r0, sp, #16
{
   32b76:	461e      	mov	r6, r3
   32b78:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   32b7a:	f01c fb86 	bl	4f28a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   32b7e:	2220      	movs	r2, #32
   32b80:	4639      	mov	r1, r7
   32b82:	a80c      	add	r0, sp, #48	; 0x30
   32b84:	f01c fb81 	bl	4f28a <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   32b88:	2210      	movs	r2, #16
   32b8a:	4631      	mov	r1, r6
   32b8c:	a814      	add	r0, sp, #80	; 0x50
   32b8e:	f01c fb7c 	bl	4f28a <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   32b92:	4629      	mov	r1, r5
   32b94:	2210      	movs	r2, #16
   32b96:	4668      	mov	r0, sp
   32b98:	f01c fb77 	bl	4f28a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   32b9c:	466b      	mov	r3, sp
   32b9e:	2250      	movs	r2, #80	; 0x50
   32ba0:	a904      	add	r1, sp, #16
   32ba2:	4618      	mov	r0, r3
   32ba4:	f01c fbd4 	bl	4f350 <bt_smp_aes_cmac>
	if (err) {
   32ba8:	4605      	mov	r5, r0
   32baa:	b960      	cbnz	r0, 32bc6 <smp_g2+0x5e>
	memcpy(passkey, xs + 12, 4);
   32bac:	2204      	movs	r2, #4
   32bae:	a903      	add	r1, sp, #12
   32bb0:	4620      	mov	r0, r4
   32bb2:	f019 fb9b 	bl	4c2ec <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   32bb6:	6823      	ldr	r3, [r4, #0]
   32bb8:	4904      	ldr	r1, [pc, #16]	; (32bcc <smp_g2+0x64>)
   32bba:	ba1b      	rev	r3, r3
   32bbc:	fbb3 f2f1 	udiv	r2, r3, r1
   32bc0:	fb01 3312 	mls	r3, r1, r2, r3
   32bc4:	6023      	str	r3, [r4, #0]
}
   32bc6:	4628      	mov	r0, r5
   32bc8:	b019      	add	sp, #100	; 0x64
   32bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32bcc:	000f4240 	.word	0x000f4240

00032bd0 <display_passkey>:

	return 0;
}

static uint8_t display_passkey(struct bt_smp *smp)
{
   32bd0:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		smp->passkey = fixed_passkey;
	} else {
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   32bd2:	2104      	movs	r1, #4
{
   32bd4:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   32bd6:	30d8      	adds	r0, #216	; 0xd8
   32bd8:	f004 fae8 	bl	371ac <bt_rand>
   32bdc:	4605      	mov	r5, r0
   32bde:	b9e0      	cbnz	r0, 32c1a <display_passkey+0x4a>
		smp->passkey %= 1000000;
	}

	smp->passkey_round = 0U;

	if (bt_auth && bt_auth->passkey_display) {
   32be0:	4e0f      	ldr	r6, [pc, #60]	; (32c20 <display_passkey+0x50>)
		smp->passkey %= 1000000;
   32be2:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   32be6:	4a0f      	ldr	r2, [pc, #60]	; (32c24 <display_passkey+0x54>)
	smp->passkey_round = 0U;
   32be8:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   32bec:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
   32bee:	fbb1 f3f2 	udiv	r3, r1, r2
   32bf2:	fb02 1313 	mls	r3, r2, r3, r1
   32bf6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   32bfa:	b168      	cbz	r0, 32c18 <display_passkey+0x48>
   32bfc:	6840      	ldr	r0, [r0, #4]
   32bfe:	b158      	cbz	r0, 32c18 <display_passkey+0x48>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   32c00:	210b      	movs	r1, #11
   32c02:	1d20      	adds	r0, r4, #4
   32c04:	f01c fb54 	bl	4f2b0 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   32c08:	6833      	ldr	r3, [r6, #0]
   32c0a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   32c0e:	685b      	ldr	r3, [r3, #4]
   32c10:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   32c14:	4798      	blx	r3
	}

	smp->passkey = sys_cpu_to_le32(smp->passkey);

	return 0;
   32c16:	4628      	mov	r0, r5
}
   32c18:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   32c1a:	2008      	movs	r0, #8
   32c1c:	e7fc      	b.n	32c18 <display_passkey+0x48>
   32c1e:	bf00      	nop
   32c20:	20003ff4 	.word	0x20003ff4
   32c24:	000f4240 	.word	0x000f4240

00032c28 <smp_dhkey_generate>:
{
   32c28:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   32c2a:	1d04      	adds	r4, r0, #4
{
   32c2c:	4605      	mov	r5, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   32c2e:	2108      	movs	r1, #8
   32c30:	4620      	mov	r0, r4
   32c32:	f01c fb3d 	bl	4f2b0 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   32c36:	4906      	ldr	r1, [pc, #24]	; (32c50 <smp_dhkey_generate+0x28>)
   32c38:	f105 0057 	add.w	r0, r5, #87	; 0x57
   32c3c:	f7fc fd28 	bl	2f690 <bt_dh_key_gen>
	if (err) {
   32c40:	b120      	cbz	r0, 32c4c <smp_dhkey_generate+0x24>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   32c42:	4620      	mov	r0, r4
   32c44:	2108      	movs	r1, #8
   32c46:	f01c fb73 	bl	4f330 <atomic_clear_bit>
		return BT_SMP_ERR_UNSPECIFIED;
   32c4a:	2008      	movs	r0, #8
}
   32c4c:	bd38      	pop	{r3, r4, r5, pc}
   32c4e:	bf00      	nop
   32c50:	0004fd15 	.word	0x0004fd15

00032c54 <get_auth.isra.1>:
	if (sc_supported) {
   32c54:	4b0c      	ldr	r3, [pc, #48]	; (32c88 <get_auth.isra.1+0x34>)
   32c56:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   32c58:	b510      	push	{r4, lr}
	if (sc_supported) {
   32c5a:	b17b      	cbz	r3, 32c7c <get_auth.isra.1+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   32c5c:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   32c60:	f7ff ff26 	bl	32ab0 <get_io_capa>
	if (bondable) {
   32c64:	4b09      	ldr	r3, [pc, #36]	; (32c8c <get_auth.isra.1+0x38>)
   32c66:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   32c68:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   32c6a:	bf0c      	ite	eq
   32c6c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   32c70:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   32c74:	b12b      	cbz	r3, 32c82 <get_auth.isra.1+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   32c76:	f044 0001 	orr.w	r0, r4, #1
}
   32c7a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   32c7c:	f000 0407 	and.w	r4, r0, #7
   32c80:	e7ee      	b.n	32c60 <get_auth.isra.1+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   32c82:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   32c86:	e7f8      	b.n	32c7a <get_auth.isra.1+0x26>
   32c88:	20006d94 	.word	0x20006d94
   32c8c:	20000dab 	.word	0x20000dab

00032c90 <sec_level_reachable.isra.2>:
	switch (conn->required_sec_level) {
   32c90:	3801      	subs	r0, #1
static bool sec_level_reachable(struct bt_conn *conn)
   32c92:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
   32c94:	2803      	cmp	r0, #3
   32c96:	d803      	bhi.n	32ca0 <sec_level_reachable.isra.2+0x10>
   32c98:	e8df f000 	tbb	[pc, r0]
   32c9c:	11041f1f 	.word	0x11041f1f
		return false;
   32ca0:	2000      	movs	r0, #0
}
   32ca2:	bd08      	pop	{r3, pc}
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32ca4:	f7ff ff04 	bl	32ab0 <get_io_capa>
   32ca8:	2803      	cmp	r0, #3
   32caa:	d116      	bne.n	32cda <sec_level_reachable.isra.2+0x4a>
		       (bt_auth && bt_auth->oob_data_request);
   32cac:	4b0c      	ldr	r3, [pc, #48]	; (32ce0 <sec_level_reachable.isra.2+0x50>)
   32cae:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32cb0:	2800      	cmp	r0, #0
   32cb2:	d0f6      	beq.n	32ca2 <sec_level_reachable.isra.2+0x12>
		       (bt_auth && bt_auth->oob_data_request);
   32cb4:	6900      	ldr	r0, [r0, #16]
   32cb6:	3000      	adds	r0, #0
   32cb8:	bf18      	it	ne
   32cba:	2001      	movne	r0, #1
   32cbc:	e7f1      	b.n	32ca2 <sec_level_reachable.isra.2+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32cbe:	f7ff fef7 	bl	32ab0 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   32cc2:	2803      	cmp	r0, #3
   32cc4:	d104      	bne.n	32cd0 <sec_level_reachable.isra.2+0x40>
   32cc6:	4b06      	ldr	r3, [pc, #24]	; (32ce0 <sec_level_reachable.isra.2+0x50>)
   32cc8:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   32cca:	b118      	cbz	r0, 32cd4 <sec_level_reachable.isra.2+0x44>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   32ccc:	6900      	ldr	r0, [r0, #16]
   32cce:	b108      	cbz	r0, 32cd4 <sec_level_reachable.isra.2+0x44>
   32cd0:	4b04      	ldr	r3, [pc, #16]	; (32ce4 <sec_level_reachable.isra.2+0x54>)
   32cd2:	7818      	ldrb	r0, [r3, #0]
   32cd4:	f000 0001 	and.w	r0, r0, #1
   32cd8:	e7e3      	b.n	32ca2 <sec_level_reachable.isra.2+0x12>
		return true;
   32cda:	2001      	movs	r0, #1
   32cdc:	e7e1      	b.n	32ca2 <sec_level_reachable.isra.2+0x12>
   32cde:	bf00      	nop
   32ce0:	20003ff4 	.word	0x20003ff4
   32ce4:	20006d94 	.word	0x20006d94

00032ce8 <bt_smp_accept>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   32ce8:	4b0c      	ldr	r3, [pc, #48]	; (32d1c <bt_smp_accept+0x34>)
{
   32cea:	b530      	push	{r4, r5, lr}
   32cec:	461a      	mov	r2, r3
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   32cee:	2400      	movs	r4, #0
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   32cf0:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   32cf4:	b138      	cbz	r0, 32d06 <bt_smp_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   32cf6:	3401      	adds	r4, #1
   32cf8:	2c06      	cmp	r4, #6
   32cfa:	f503 7302 	add.w	r3, r3, #520	; 0x208
   32cfe:	d1f7      	bne.n	32cf0 <bt_smp_accept+0x8>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
   32d00:	f06f 000b 	mvn.w	r0, #11
}
   32d04:	bd30      	pop	{r4, r5, pc}
		smp->chan.chan.ops = &ops;
   32d06:	f44f 7302 	mov.w	r3, #520	; 0x208
   32d0a:	4363      	muls	r3, r4
   32d0c:	18d4      	adds	r4, r2, r3
		*chan = &smp->chan.chan;
   32d0e:	33f0      	adds	r3, #240	; 0xf0
		smp->chan.chan.ops = &ops;
   32d10:	4d03      	ldr	r5, [pc, #12]	; (32d20 <bt_smp_accept+0x38>)
   32d12:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		*chan = &smp->chan.chan;
   32d16:	4413      	add	r3, r2
   32d18:	600b      	str	r3, [r1, #0]
		return 0;
   32d1a:	e7f3      	b.n	32d04 <bt_smp_accept+0x1c>
   32d1c:	20002038 	.word	0x20002038
   32d20:	00052cec 	.word	0x00052cec

00032d24 <smp_init>:
{
   32d24:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   32d26:	22f0      	movs	r2, #240	; 0xf0
{
   32d28:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   32d2a:	2100      	movs	r1, #0
   32d2c:	f019 fae9 	bl	4c302 <memset>
	if (bt_rand(smp->prnd, 16)) {
   32d30:	2110      	movs	r1, #16
   32d32:	f105 0027 	add.w	r0, r5, #39	; 0x27
   32d36:	f004 fa39 	bl	371ac <bt_rand>
   32d3a:	4604      	mov	r4, r0
   32d3c:	b948      	cbnz	r0, 32d52 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   32d3e:	2105      	movs	r1, #5
   32d40:	4628      	mov	r0, r5
   32d42:	f01c fab5 	bl	4f2b0 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   32d46:	f7fc fc93 	bl	2f670 <bt_pub_key_get>
   32d4a:	4b03      	ldr	r3, [pc, #12]	; (32d58 <smp_init+0x34>)
   32d4c:	6018      	str	r0, [r3, #0]
}
   32d4e:	4620      	mov	r0, r4
   32d50:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   32d52:	2408      	movs	r4, #8
   32d54:	e7fb      	b.n	32d4e <smp_init+0x2a>
   32d56:	bf00      	nop
   32d58:	20004268 	.word	0x20004268

00032d5c <smp_f5>:
{
   32d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32d60:	b09a      	sub	sp, #104	; 0x68
   32d62:	4604      	mov	r4, r0
   32d64:	4688      	mov	r8, r1
   32d66:	4617      	mov	r7, r2
	uint8_t m[53] = { 0x00, /* counter */
   32d68:	2100      	movs	r1, #0
   32d6a:	2235      	movs	r2, #53	; 0x35
   32d6c:	a80c      	add	r0, sp, #48	; 0x30
{
   32d6e:	461d      	mov	r5, r3
	uint8_t m[53] = { 0x00, /* counter */
   32d70:	f019 fac7 	bl	4c302 <memset>
   32d74:	2362      	movs	r3, #98	; 0x62
   32d76:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   32d7a:	f646 4374 	movw	r3, #27764	; 0x6c74
	sys_memcpy_swap(ws, w, 32);
   32d7e:	4621      	mov	r1, r4
	uint8_t m[53] = { 0x00, /* counter */
   32d80:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
	sys_memcpy_swap(ws, w, 32);
   32d84:	2220      	movs	r2, #32
	uint8_t m[53] = { 0x00, /* counter */
   32d86:	2365      	movs	r3, #101	; 0x65
	sys_memcpy_swap(ws, w, 32);
   32d88:	a804      	add	r0, sp, #16
	uint8_t m[53] = { 0x00, /* counter */
   32d8a:	2601      	movs	r6, #1
   32d8c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   32d90:	f88d 6063 	strb.w	r6, [sp, #99]	; 0x63
	sys_memcpy_swap(ws, w, 32);
   32d94:	f01c fa79 	bl	4f28a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   32d98:	466b      	mov	r3, sp
   32d9a:	2220      	movs	r2, #32
   32d9c:	a904      	add	r1, sp, #16
   32d9e:	4820      	ldr	r0, [pc, #128]	; (32e20 <smp_f5+0xc4>)
   32da0:	f01c fad6 	bl	4f350 <bt_smp_aes_cmac>
	if (err) {
   32da4:	4604      	mov	r4, r0
   32da6:	bbb8      	cbnz	r0, 32e18 <smp_f5+0xbc>
	sys_memcpy_swap(m + 5, n1, 16);
   32da8:	2210      	movs	r2, #16
   32daa:	4641      	mov	r1, r8
   32dac:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   32db0:	f01c fa6b 	bl	4f28a <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   32db4:	2210      	movs	r2, #16
   32db6:	4639      	mov	r1, r7
   32db8:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   32dbc:	f01c fa65 	bl	4f28a <sys_memcpy_swap>
	m[37] = a1->type;
   32dc0:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   32dc2:	2206      	movs	r2, #6
	m[37] = a1->type;
   32dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
   32dc8:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   32dcc:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   32dd0:	f01c fa5b 	bl	4f28a <sys_memcpy_swap>
	m[44] = a2->type;
   32dd4:	9920      	ldr	r1, [sp, #128]	; 0x80
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   32dd6:	2206      	movs	r2, #6
	m[44] = a2->type;
   32dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
   32ddc:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   32de0:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   32de4:	f01c fa51 	bl	4f28a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   32de8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   32dea:	2235      	movs	r2, #53	; 0x35
   32dec:	a90c      	add	r1, sp, #48	; 0x30
   32dee:	4668      	mov	r0, sp
   32df0:	f01c faae 	bl	4f350 <bt_smp_aes_cmac>
	if (err) {
   32df4:	4604      	mov	r4, r0
   32df6:	b978      	cbnz	r0, 32e18 <smp_f5+0xbc>
	sys_mem_swap(mackey, 16);
   32df8:	9821      	ldr	r0, [sp, #132]	; 0x84
   32dfa:	f01c fb7d 	bl	4f4f8 <sys_mem_swap.constprop.18>
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   32dfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
	m[0] = 0x01;
   32e00:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   32e04:	2235      	movs	r2, #53	; 0x35
   32e06:	a90c      	add	r1, sp, #48	; 0x30
   32e08:	4668      	mov	r0, sp
   32e0a:	f01c faa1 	bl	4f350 <bt_smp_aes_cmac>
	if (err) {
   32e0e:	4604      	mov	r4, r0
   32e10:	b910      	cbnz	r0, 32e18 <smp_f5+0xbc>
	sys_mem_swap(ltk, 16);
   32e12:	9822      	ldr	r0, [sp, #136]	; 0x88
   32e14:	f01c fb70 	bl	4f4f8 <sys_mem_swap.constprop.18>
}
   32e18:	4620      	mov	r0, r4
   32e1a:	b01a      	add	sp, #104	; 0x68
   32e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32e20:	0005450f 	.word	0x0005450f

00032e24 <sc_smp_check_confirm>:
{
   32e24:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
   32e26:	7a03      	ldrb	r3, [r0, #8]
{
   32e28:	b087      	sub	sp, #28
   32e2a:	4604      	mov	r4, r0
	switch (smp->method) {
   32e2c:	2b05      	cmp	r3, #5
   32e2e:	d829      	bhi.n	32e84 <sc_smp_check_confirm+0x60>
   32e30:	e8df f003 	tbb	[pc, r3]
   32e34:	24030324 	.word	0x24030324
   32e38:	2628      	.short	0x2628
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   32e3a:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   32e3e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
   32e42:	40d3      	lsrs	r3, r2
   32e44:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   32e48:	f063 037f 	orn	r3, r3, #127	; 0x7f
   32e4c:	b2db      	uxtb	r3, r3
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   32e4e:	ad02      	add	r5, sp, #8
   32e50:	490d      	ldr	r1, [pc, #52]	; (32e88 <sc_smp_check_confirm+0x64>)
   32e52:	9500      	str	r5, [sp, #0]
   32e54:	f104 0237 	add.w	r2, r4, #55	; 0x37
   32e58:	6809      	ldr	r1, [r1, #0]
   32e5a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   32e5e:	f01c fba4 	bl	4f5aa <smp_f4>
   32e62:	b978      	cbnz	r0, 32e84 <sc_smp_check_confirm+0x60>
	if (memcmp(smp->pcnf, cfm, 16)) {
   32e64:	2210      	movs	r2, #16
   32e66:	4629      	mov	r1, r5
   32e68:	f104 0017 	add.w	r0, r4, #23
   32e6c:	f019 fa2e 	bl	4c2cc <memcmp>
   32e70:	2800      	cmp	r0, #0
		return BT_SMP_ERR_CONFIRM_FAILED;
   32e72:	bf0c      	ite	eq
   32e74:	2000      	moveq	r0, #0
   32e76:	2004      	movne	r0, #4
}
   32e78:	b007      	add	sp, #28
   32e7a:	bd30      	pop	{r4, r5, pc}
		r = 0U;
   32e7c:	2300      	movs	r3, #0
   32e7e:	e7e6      	b.n	32e4e <sc_smp_check_confirm+0x2a>
		return 0;
   32e80:	2000      	movs	r0, #0
   32e82:	e7f9      	b.n	32e78 <sc_smp_check_confirm+0x54>
		return BT_SMP_ERR_UNSPECIFIED;
   32e84:	2008      	movs	r0, #8
   32e86:	e7f7      	b.n	32e78 <sc_smp_check_confirm+0x54>
   32e88:	20004268 	.word	0x20004268

00032e8c <smp_send_pairing_req>:
{
   32e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   32e90:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   32e92:	f01c fa06 	bl	4f2a2 <smp_chan_get>
	if (!smp) {
   32e96:	4606      	mov	r6, r0
   32e98:	2800      	cmp	r0, #0
   32e9a:	d071      	beq.n	32f80 <smp_send_pairing_req+0xf4>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   32e9c:	1d07      	adds	r7, r0, #4
   32e9e:	2104      	movs	r1, #4
   32ea0:	4638      	mov	r0, r7
   32ea2:	f01c fa1a 	bl	4f2da <atomic_test_bit>
   32ea6:	4604      	mov	r4, r0
   32ea8:	2800      	cmp	r0, #0
   32eaa:	d16c      	bne.n	32f86 <smp_send_pairing_req+0xfa>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   32eac:	2102      	movs	r1, #2
   32eae:	4638      	mov	r0, r7
   32eb0:	f01c fa13 	bl	4f2da <atomic_test_bit>
   32eb4:	b930      	cbnz	r0, 32ec4 <smp_send_pairing_req+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   32eb6:	2103      	movs	r1, #3
   32eb8:	4638      	mov	r0, r7
   32eba:	f01c fa0e 	bl	4f2da <atomic_test_bit>
   32ebe:	b120      	cbz	r0, 32eca <smp_send_pairing_req+0x3e>
		return -EBUSY;
   32ec0:	f06f 040f 	mvn.w	r4, #15
}
   32ec4:	4620      	mov	r0, r4
   32ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   32eca:	2101      	movs	r1, #1
   32ecc:	4638      	mov	r0, r7
   32ece:	f01c fa04 	bl	4f2da <atomic_test_bit>
   32ed2:	2800      	cmp	r0, #0
   32ed4:	d1f4      	bne.n	32ec0 <smp_send_pairing_req+0x34>
	if (!sec_level_reachable(conn)) {
   32ed6:	7aa8      	ldrb	r0, [r5, #10]
   32ed8:	f7ff feda 	bl	32c90 <sec_level_reachable.isra.2>
   32edc:	2800      	cmp	r0, #0
   32ede:	d055      	beq.n	32f8c <smp_send_pairing_req+0x100>
	if (!conn->le.keys) {
   32ee0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   32ee4:	b13b      	cbz	r3, 32ef6 <smp_send_pairing_req+0x6a>
	if (smp_init(smp)) {
   32ee6:	4630      	mov	r0, r6
   32ee8:	f7ff ff1c 	bl	32d24 <smp_init>
   32eec:	4604      	mov	r4, r0
   32eee:	b170      	cbz	r0, 32f0e <smp_send_pairing_req+0x82>
		return -ENOBUFS;
   32ef0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   32ef4:	e7e6      	b.n	32ec4 <smp_send_pairing_req+0x38>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   32ef6:	f105 0188 	add.w	r1, r5, #136	; 0x88
   32efa:	7a28      	ldrb	r0, [r5, #8]
   32efc:	f000 fe1c 	bl	33b38 <bt_keys_get_addr>
   32f00:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   32f04:	2800      	cmp	r0, #0
   32f06:	d1ee      	bne.n	32ee6 <smp_send_pairing_req+0x5a>
			return -ENOMEM;
   32f08:	f06f 040b 	mvn.w	r4, #11
   32f0c:	e7da      	b.n	32ec4 <smp_send_pairing_req+0x38>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   32f0e:	2101      	movs	r1, #1
   32f10:	4630      	mov	r0, r6
   32f12:	f01c fad0 	bl	4f4b6 <smp_create_pdu.isra.8>
	if (!req_buf) {
   32f16:	4680      	mov	r8, r0
   32f18:	2800      	cmp	r0, #0
   32f1a:	d0e9      	beq.n	32ef0 <smp_send_pairing_req+0x64>
   32f1c:	2106      	movs	r1, #6
   32f1e:	3008      	adds	r0, #8
   32f20:	f01d f939 	bl	50196 <net_buf_simple_add>
   32f24:	4605      	mov	r5, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   32f26:	2009      	movs	r0, #9
   32f28:	f7ff fe94 	bl	32c54 <get_auth.isra.1>
   32f2c:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
   32f2e:	f7ff fdbf 	bl	32ab0 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   32f32:	4b18      	ldr	r3, [pc, #96]	; (32f94 <smp_send_pairing_req+0x108>)
	req->io_capability = get_io_capa();
   32f34:	7028      	strb	r0, [r5, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   32f36:	781b      	ldrb	r3, [r3, #0]
   32f38:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   32f3a:	2310      	movs	r3, #16
   32f3c:	70eb      	strb	r3, [r5, #3]
	req->resp_key_dist = RECV_KEYS;
   32f3e:	f04f 0903 	mov.w	r9, #3
	req->init_key_dist = SEND_KEYS;
   32f42:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
   32f44:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
   32f48:	712b      	strb	r3, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
   32f4a:	f885 9005 	strb.w	r9, [r5, #5]
	memcpy(smp->preq + 1, req, sizeof(*req));
   32f4e:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   32f50:	7273      	strb	r3, [r6, #9]
	smp->local_dist = SEND_KEYS;
   32f52:	f8a6 20e8 	strh.w	r2, [r6, #232]	; 0xe8
	memcpy(smp->preq + 1, req, sizeof(*req));
   32f56:	f106 000a 	add.w	r0, r6, #10
   32f5a:	2206      	movs	r2, #6
   32f5c:	f019 f9c6 	bl	4c2ec <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   32f60:	4641      	mov	r1, r8
   32f62:	4630      	mov	r0, r6
   32f64:	f01c fb45 	bl	4f5f2 <smp_send.isra.9.constprop.21>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   32f68:	4630      	mov	r0, r6
   32f6a:	2102      	movs	r1, #2
   32f6c:	f01c f9a0 	bl	4f2b0 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   32f70:	210b      	movs	r1, #11
   32f72:	f01c f99d 	bl	4f2b0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   32f76:	4649      	mov	r1, r9
   32f78:	4638      	mov	r0, r7
   32f7a:	f01c f999 	bl	4f2b0 <atomic_set_bit>
	return 0;
   32f7e:	e7a1      	b.n	32ec4 <smp_send_pairing_req+0x38>
		return -ENOTCONN;
   32f80:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   32f84:	e79e      	b.n	32ec4 <smp_send_pairing_req+0x38>
		return -EIO;
   32f86:	f06f 0404 	mvn.w	r4, #4
   32f8a:	e79b      	b.n	32ec4 <smp_send_pairing_req+0x38>
		return -EINVAL;
   32f8c:	f06f 0415 	mvn.w	r4, #21
   32f90:	e798      	b.n	32ec4 <smp_send_pairing_req+0x38>
   32f92:	bf00      	nop
   32f94:	20006d93 	.word	0x20006d93

00032f98 <smp_security_request>:
{
   32f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   32f9a:	1d05      	adds	r5, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   32f9c:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
   32fa0:	688b      	ldr	r3, [r1, #8]
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   32fa2:	4628      	mov	r0, r5
   32fa4:	2102      	movs	r1, #2
   32fa6:	f01c f998 	bl	4f2da <atomic_test_bit>
   32faa:	b108      	cbz	r0, 32fb0 <smp_security_request+0x18>
	return 0;
   32fac:	2000      	movs	r0, #0
   32fae:	e04a      	b.n	33046 <smp_security_request+0xae>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   32fb0:	2103      	movs	r1, #3
   32fb2:	4628      	mov	r0, r5
   32fb4:	f01c f991 	bl	4f2da <atomic_test_bit>
   32fb8:	2800      	cmp	r0, #0
   32fba:	d1f7      	bne.n	32fac <smp_security_request+0x14>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   32fbc:	2101      	movs	r1, #1
   32fbe:	4628      	mov	r0, r5
   32fc0:	f01c f98b 	bl	4f2da <atomic_test_bit>
   32fc4:	2800      	cmp	r0, #0
   32fc6:	d1f1      	bne.n	32fac <smp_security_request+0x14>
	if (sc_supported) {
   32fc8:	4a23      	ldr	r2, [pc, #140]	; (33058 <smp_security_request+0xc0>)
   32fca:	7812      	ldrb	r2, [r2, #0]
   32fcc:	2a00      	cmp	r2, #0
   32fce:	d041      	beq.n	33054 <smp_security_request+0xbc>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   32fd0:	781e      	ldrb	r6, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   32fd2:	0737      	lsls	r7, r6, #28
   32fd4:	d53e      	bpl.n	33054 <smp_security_request+0xbc>
	if (conn->le.keys) {
   32fd6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   32fda:	b153      	cbz	r3, 32ff2 <smp_security_request+0x5a>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   32fdc:	89db      	ldrh	r3, [r3, #14]
   32fde:	f003 0324 	and.w	r3, r3, #36	; 0x24
   32fe2:	b9bb      	cbnz	r3, 33014 <smp_security_request+0x7c>
	if (smp_send_pairing_req(conn) < 0) {
   32fe4:	4620      	mov	r0, r4
   32fe6:	f7ff ff51 	bl	32e8c <smp_send_pairing_req>
   32fea:	2800      	cmp	r0, #0
   32fec:	db2a      	blt.n	33044 <smp_security_request+0xac>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   32fee:	210f      	movs	r1, #15
   32ff0:	e02c      	b.n	3304c <smp_security_request+0xb4>
					     &conn->le.dst);
   32ff2:	f104 0788 	add.w	r7, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   32ff6:	463a      	mov	r2, r7
   32ff8:	7a21      	ldrb	r1, [r4, #8]
   32ffa:	2020      	movs	r0, #32
   32ffc:	f000 fe1a 	bl	33c34 <bt_keys_find>
   33000:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   33004:	b930      	cbnz	r0, 33014 <smp_security_request+0x7c>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   33006:	463a      	mov	r2, r7
   33008:	7a21      	ldrb	r1, [r4, #8]
   3300a:	2004      	movs	r0, #4
   3300c:	f000 fe12 	bl	33c34 <bt_keys_find>
   33010:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   33014:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   33018:	2900      	cmp	r1, #0
   3301a:	d0e3      	beq.n	32fe4 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_MITM) &&
   3301c:	0770      	lsls	r0, r6, #29
   3301e:	d502      	bpl.n	33026 <smp_security_request+0x8e>
   33020:	7b4b      	ldrb	r3, [r1, #13]
   33022:	07da      	lsls	r2, r3, #31
   33024:	d5de      	bpl.n	32fe4 <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_SC) &&
   33026:	89cb      	ldrh	r3, [r1, #14]
   33028:	069b      	lsls	r3, r3, #26
   3302a:	d5db      	bpl.n	32fe4 <smp_security_request+0x4c>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   3302c:	7b0b      	ldrb	r3, [r1, #12]
   3302e:	9300      	str	r3, [sp, #0]
   33030:	f101 0218 	add.w	r2, r1, #24
   33034:	f101 031a 	add.w	r3, r1, #26
   33038:	4620      	mov	r0, r4
   3303a:	3110      	adds	r1, #16
   3303c:	f01a f931 	bl	4d2a2 <bt_conn_le_start_encryption>
   33040:	2800      	cmp	r0, #0
   33042:	da02      	bge.n	3304a <smp_security_request+0xb2>
		return BT_SMP_ERR_UNSPECIFIED;
   33044:	2008      	movs	r0, #8
}
   33046:	b003      	add	sp, #12
   33048:	bdf0      	pop	{r4, r5, r6, r7, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   3304a:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   3304c:	4628      	mov	r0, r5
   3304e:	f01c f92f 	bl	4f2b0 <atomic_set_bit>
   33052:	e7ab      	b.n	32fac <smp_security_request+0x14>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   33054:	2003      	movs	r0, #3
   33056:	e7f6      	b.n	33046 <smp_security_request+0xae>
   33058:	20006d94 	.word	0x20006d94

0003305c <sc_send_public_key>:
{
   3305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   3305e:	210c      	movs	r1, #12
{
   33060:	4606      	mov	r6, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   33062:	f01c fa28 	bl	4f4b6 <smp_create_pdu.isra.8>
	if (!req_buf) {
   33066:	4604      	mov	r4, r0
   33068:	b1a8      	cbz	r0, 33096 <sc_send_public_key+0x3a>
   3306a:	2140      	movs	r1, #64	; 0x40
   3306c:	3008      	adds	r0, #8
   3306e:	f01d f892 	bl	50196 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   33072:	4d0a      	ldr	r5, [pc, #40]	; (3309c <sc_send_public_key+0x40>)
   33074:	2220      	movs	r2, #32
   33076:	6829      	ldr	r1, [r5, #0]
   33078:	4607      	mov	r7, r0
   3307a:	f019 f937 	bl	4c2ec <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   3307e:	6829      	ldr	r1, [r5, #0]
   33080:	2220      	movs	r2, #32
   33082:	4411      	add	r1, r2
   33084:	18b8      	adds	r0, r7, r2
   33086:	f019 f931 	bl	4c2ec <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   3308a:	4630      	mov	r0, r6
   3308c:	4621      	mov	r1, r4
   3308e:	f01c fab0 	bl	4f5f2 <smp_send.isra.9.constprop.21>
	return 0;
   33092:	2000      	movs	r0, #0
}
   33094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   33096:	2008      	movs	r0, #8
   33098:	e7fc      	b.n	33094 <sc_send_public_key+0x38>
   3309a:	bf00      	nop
   3309c:	20004268 	.word	0x20004268

000330a0 <smp_send_pairing_confirm>:
{
   330a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   330a2:	7a03      	ldrb	r3, [r0, #8]
{
   330a4:	4605      	mov	r5, r0
	switch (smp->method) {
   330a6:	2b03      	cmp	r3, #3
   330a8:	d826      	bhi.n	330f8 <smp_send_pairing_confirm+0x58>
   330aa:	e8df f003 	tbb	[pc, r3]
   330ae:	0227      	.short	0x0227
   330b0:	2702      	.short	0x2702
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   330b2:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   330b6:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   330ba:	40dc      	lsrs	r4, r3
   330bc:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   330c0:	f064 047f 	orn	r4, r4, #127	; 0x7f
   330c4:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   330c6:	2103      	movs	r1, #3
   330c8:	4628      	mov	r0, r5
   330ca:	f01c f9f4 	bl	4f4b6 <smp_create_pdu.isra.8>
	if (!buf) {
   330ce:	4606      	mov	r6, r0
   330d0:	b190      	cbz	r0, 330f8 <smp_send_pairing_confirm+0x58>
   330d2:	2110      	movs	r1, #16
   330d4:	3008      	adds	r0, #8
   330d6:	f01d f85e 	bl	50196 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   330da:	9000      	str	r0, [sp, #0]
   330dc:	480e      	ldr	r0, [pc, #56]	; (33118 <smp_send_pairing_confirm+0x78>)
   330de:	4623      	mov	r3, r4
   330e0:	f105 0227 	add.w	r2, r5, #39	; 0x27
   330e4:	f105 0157 	add.w	r1, r5, #87	; 0x57
   330e8:	6800      	ldr	r0, [r0, #0]
   330ea:	f01c fa5e 	bl	4f5aa <smp_f4>
   330ee:	4604      	mov	r4, r0
   330f0:	b130      	cbz	r0, 33100 <smp_send_pairing_confirm+0x60>
		net_buf_unref(buf);
   330f2:	4630      	mov	r0, r6
   330f4:	f010 ffb8 	bl	44068 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   330f8:	2008      	movs	r0, #8
   330fa:	e00a      	b.n	33112 <smp_send_pairing_confirm+0x72>
		r = 0U;
   330fc:	2400      	movs	r4, #0
   330fe:	e7e2      	b.n	330c6 <smp_send_pairing_confirm+0x26>
	smp_send(smp, buf, NULL, NULL);
   33100:	4631      	mov	r1, r6
   33102:	4628      	mov	r0, r5
   33104:	f01c fa75 	bl	4f5f2 <smp_send.isra.9.constprop.21>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   33108:	1d28      	adds	r0, r5, #4
   3310a:	4621      	mov	r1, r4
   3310c:	f01c f910 	bl	4f330 <atomic_clear_bit>
	return 0;
   33110:	4620      	mov	r0, r4
}
   33112:	b002      	add	sp, #8
   33114:	bd70      	pop	{r4, r5, r6, pc}
   33116:	bf00      	nop
   33118:	20004268 	.word	0x20004268

0003311c <smp_pairing_random>:
{
   3311c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   3311e:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   33120:	f100 0637 	add.w	r6, r0, #55	; 0x37
   33124:	2210      	movs	r2, #16
   33126:	6889      	ldr	r1, [r1, #8]
   33128:	4630      	mov	r0, r6
   3312a:	f019 f8df 	bl	4c2ec <memcpy>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   3312e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   33132:	78db      	ldrb	r3, [r3, #3]
   33134:	2b00      	cmp	r3, #0
   33136:	d154      	bne.n	331e2 <smp_pairing_random+0xc6>
		err = sc_smp_check_confirm(smp);
   33138:	4620      	mov	r0, r4
   3313a:	f7ff fe73 	bl	32e24 <sc_smp_check_confirm>
		if (err) {
   3313e:	4605      	mov	r5, r0
   33140:	2800      	cmp	r0, #0
   33142:	d147      	bne.n	331d4 <smp_pairing_random+0xb8>
		switch (smp->method) {
   33144:	7a23      	ldrb	r3, [r4, #8]
   33146:	2b05      	cmp	r3, #5
   33148:	f200 809c 	bhi.w	33284 <smp_pairing_random+0x168>
   3314c:	e8df f003 	tbb	[pc, r3]
   33150:	03212138 	.word	0x03212138
   33154:	389a      	.short	0x389a
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
   33156:	ab03      	add	r3, sp, #12
   33158:	485c      	ldr	r0, [pc, #368]	; (332cc <smp_pairing_random+0x1b0>)
   3315a:	9300      	str	r3, [sp, #0]
   3315c:	f104 0227 	add.w	r2, r4, #39	; 0x27
   33160:	4633      	mov	r3, r6
   33162:	f104 0157 	add.w	r1, r4, #87	; 0x57
   33166:	6800      	ldr	r0, [r0, #0]
   33168:	f7ff fcfe 	bl	32b68 <smp_g2>
   3316c:	2800      	cmp	r0, #0
   3316e:	f040 8089 	bne.w	33284 <smp_pairing_random+0x168>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   33172:	1d26      	adds	r6, r4, #4
   33174:	210a      	movs	r1, #10
   33176:	4630      	mov	r0, r6
   33178:	f01c f89a 	bl	4f2b0 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   3317c:	2109      	movs	r1, #9
   3317e:	f01c f897 	bl	4f2b0 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   33182:	4b53      	ldr	r3, [pc, #332]	; (332d0 <smp_pairing_random+0x1b4>)
   33184:	9903      	ldr	r1, [sp, #12]
   33186:	681b      	ldr	r3, [r3, #0]
   33188:	68db      	ldr	r3, [r3, #12]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   3318a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   3318e:	4798      	blx	r3
			return 0;
   33190:	e020      	b.n	331d4 <smp_pairing_random+0xb8>
			smp->passkey_round++;
   33192:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   33196:	3301      	adds	r3, #1
   33198:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   3319a:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   3319c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   331a0:	d00e      	beq.n	331c0 <smp_pairing_random+0xa4>
			if (bt_rand(smp->prnd, 16)) {
   331a2:	2110      	movs	r1, #16
   331a4:	f104 0027 	add.w	r0, r4, #39	; 0x27
   331a8:	f004 f800 	bl	371ac <bt_rand>
   331ac:	2800      	cmp	r0, #0
   331ae:	d169      	bne.n	33284 <smp_pairing_random+0x168>
			atomic_set_bit(smp->allowed_cmds,
   331b0:	2103      	movs	r1, #3
   331b2:	4620      	mov	r0, r4
   331b4:	f01c f87c 	bl	4f2b0 <atomic_set_bit>
			return smp_send_pairing_confirm(smp);
   331b8:	f7ff ff72 	bl	330a0 <smp_send_pairing_confirm>
	return smp_send_pairing_random(smp);
   331bc:	4605      	mov	r5, r0
   331be:	e009      	b.n	331d4 <smp_pairing_random+0xb8>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   331c0:	1d23      	adds	r3, r4, #4
   331c2:	2107      	movs	r1, #7
   331c4:	4618      	mov	r0, r3
   331c6:	f01c f888 	bl	4f2da <atomic_test_bit>
   331ca:	b130      	cbz	r0, 331da <smp_pairing_random+0xbe>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   331cc:	2109      	movs	r1, #9
   331ce:	4618      	mov	r0, r3
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   331d0:	f01c f86e 	bl	4f2b0 <atomic_set_bit>
}
   331d4:	4628      	mov	r0, r5
   331d6:	b004      	add	sp, #16
   331d8:	bd70      	pop	{r4, r5, r6, pc}
		return compute_and_send_central_dhcheck(smp);
   331da:	4620      	mov	r0, r4
   331dc:	f01c fa55 	bl	4f68a <compute_and_send_central_dhcheck>
   331e0:	e7ec      	b.n	331bc <smp_pairing_random+0xa0>
	switch (smp->method) {
   331e2:	7a23      	ldrb	r3, [r4, #8]
   331e4:	2b05      	cmp	r3, #5
   331e6:	d84d      	bhi.n	33284 <smp_pairing_random+0x168>
   331e8:	e8df f003 	tbb	[pc, r3]
   331ec:	0327271b 	.word	0x0327271b
   331f0:	4e4c      	.short	0x4e4c
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   331f2:	ab03      	add	r3, sp, #12
   331f4:	4935      	ldr	r1, [pc, #212]	; (332cc <smp_pairing_random+0x1b0>)
   331f6:	9300      	str	r3, [sp, #0]
   331f8:	4632      	mov	r2, r6
   331fa:	f104 0327 	add.w	r3, r4, #39	; 0x27
   331fe:	6809      	ldr	r1, [r1, #0]
   33200:	f104 0057 	add.w	r0, r4, #87	; 0x57
   33204:	f7ff fcb0 	bl	32b68 <smp_g2>
   33208:	2800      	cmp	r0, #0
   3320a:	d13b      	bne.n	33284 <smp_pairing_random+0x168>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   3320c:	210a      	movs	r1, #10
   3320e:	1d20      	adds	r0, r4, #4
   33210:	f01c f84e 	bl	4f2b0 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   33214:	4b2e      	ldr	r3, [pc, #184]	; (332d0 <smp_pairing_random+0x1b4>)
   33216:	9903      	ldr	r1, [sp, #12]
   33218:	681b      	ldr	r3, [r3, #0]
   3321a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   3321e:	68db      	ldr	r3, [r3, #12]
   33220:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   33222:	4620      	mov	r0, r4
   33224:	210d      	movs	r1, #13
   33226:	f01c f843 	bl	4f2b0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   3322a:	1d20      	adds	r0, r4, #4
   3322c:	2110      	movs	r1, #16
   3322e:	f01c f83f 	bl	4f2b0 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   33232:	4620      	mov	r0, r4
   33234:	f01c f9f9 	bl	4f62a <smp_send_pairing_random>
   33238:	e7c0      	b.n	331bc <smp_pairing_random+0xa0>
		err = sc_smp_check_confirm(smp);
   3323a:	4620      	mov	r0, r4
   3323c:	f7ff fdf2 	bl	32e24 <sc_smp_check_confirm>
		if (err) {
   33240:	4605      	mov	r5, r0
   33242:	2800      	cmp	r0, #0
   33244:	d1c6      	bne.n	331d4 <smp_pairing_random+0xb8>
		atomic_set_bit(smp->allowed_cmds,
   33246:	2103      	movs	r1, #3
   33248:	4620      	mov	r0, r4
   3324a:	f01c f831 	bl	4f2b0 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   3324e:	f01c f9ec 	bl	4f62a <smp_send_pairing_random>
		if (err) {
   33252:	4605      	mov	r5, r0
   33254:	2800      	cmp	r0, #0
   33256:	d1bd      	bne.n	331d4 <smp_pairing_random+0xb8>
		smp->passkey_round++;
   33258:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   3325c:	3301      	adds	r3, #1
   3325e:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   33260:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   33262:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   33266:	d106      	bne.n	33276 <smp_pairing_random+0x15a>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   33268:	210d      	movs	r1, #13
   3326a:	4620      	mov	r0, r4
   3326c:	f01c f820 	bl	4f2b0 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   33270:	2110      	movs	r1, #16
   33272:	1d20      	adds	r0, r4, #4
   33274:	e7ac      	b.n	331d0 <smp_pairing_random+0xb4>
		if (bt_rand(smp->prnd, 16)) {
   33276:	2110      	movs	r1, #16
   33278:	f104 0027 	add.w	r0, r4, #39	; 0x27
   3327c:	f003 ff96 	bl	371ac <bt_rand>
   33280:	2800      	cmp	r0, #0
   33282:	d0a7      	beq.n	331d4 <smp_pairing_random+0xb8>
			return BT_SMP_ERR_UNSPECIFIED;
   33284:	2508      	movs	r5, #8
   33286:	e7a5      	b.n	331d4 <smp_pairing_random+0xb8>
		if (bt_rand(smp->prnd, 16)) {
   33288:	2110      	movs	r1, #16
   3328a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   3328e:	f003 ff8d 	bl	371ac <bt_rand>
   33292:	4605      	mov	r5, r0
   33294:	2800      	cmp	r0, #0
   33296:	d1f5      	bne.n	33284 <smp_pairing_random+0x168>
		if (bt_auth && bt_auth->oob_data_request) {
   33298:	4e0d      	ldr	r6, [pc, #52]	; (332d0 <smp_pairing_random+0x1b4>)
   3329a:	6833      	ldr	r3, [r6, #0]
   3329c:	b1a3      	cbz	r3, 332c8 <smp_pairing_random+0x1ac>
   3329e:	691b      	ldr	r3, [r3, #16]
   332a0:	b193      	cbz	r3, 332c8 <smp_pairing_random+0x1ac>
			struct bt_conn_oob_info info = {
   332a2:	4b0c      	ldr	r3, [pc, #48]	; (332d4 <smp_pairing_random+0x1b8>)
			le_sc_oob_config_set(smp, &info);
   332a4:	f10d 010d 	add.w	r1, sp, #13
			struct bt_conn_oob_info info = {
   332a8:	881b      	ldrh	r3, [r3, #0]
   332aa:	f8ad 300c 	strh.w	r3, [sp, #12]
			le_sc_oob_config_set(smp, &info);
   332ae:	4620      	mov	r0, r4
   332b0:	f01c f89a 	bl	4f3e8 <le_sc_oob_config_set.isra.4>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   332b4:	210c      	movs	r1, #12
			smp->oobd_remote = NULL;
   332b6:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   332ba:	1d20      	adds	r0, r4, #4
   332bc:	f01b fff8 	bl	4f2b0 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   332c0:	6833      	ldr	r3, [r6, #0]
   332c2:	a903      	add	r1, sp, #12
   332c4:	691b      	ldr	r3, [r3, #16]
   332c6:	e760      	b.n	3318a <smp_pairing_random+0x6e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   332c8:	2502      	movs	r5, #2
   332ca:	e783      	b.n	331d4 <smp_pairing_random+0xb8>
   332cc:	20004268 	.word	0x20004268
   332d0:	20003ff4 	.word	0x20003ff4
   332d4:	00051e60 	.word	0x00051e60

000332d8 <smp_public_key_periph>:
{
   332d8:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   332da:	1d05      	adds	r5, r0, #4
{
   332dc:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   332de:	210e      	movs	r1, #14
   332e0:	4628      	mov	r0, r5
   332e2:	f01b fffa 	bl	4f2da <atomic_test_bit>
   332e6:	b120      	cbz	r0, 332f2 <smp_public_key_periph+0x1a>
	err = sc_send_public_key(smp);
   332e8:	4620      	mov	r0, r4
   332ea:	f7ff feb7 	bl	3305c <sc_send_public_key>
	if (err) {
   332ee:	b158      	cbz	r0, 33308 <smp_public_key_periph+0x30>
}
   332f0:	bd38      	pop	{r3, r4, r5, pc}
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   332f2:	4b26      	ldr	r3, [pc, #152]	; (3338c <smp_public_key_periph+0xb4>)
   332f4:	2220      	movs	r2, #32
   332f6:	6819      	ldr	r1, [r3, #0]
   332f8:	f104 0057 	add.w	r0, r4, #87	; 0x57
   332fc:	f018 ffe6 	bl	4c2cc <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   33300:	2800      	cmp	r0, #0
   33302:	d1f1      	bne.n	332e8 <smp_public_key_periph+0x10>
		return BT_SMP_ERR_UNSPECIFIED;
   33304:	2008      	movs	r0, #8
   33306:	e7f3      	b.n	332f0 <smp_public_key_periph+0x18>
	switch (smp->method) {
   33308:	7a23      	ldrb	r3, [r4, #8]
   3330a:	2b05      	cmp	r3, #5
   3330c:	d8fa      	bhi.n	33304 <smp_public_key_periph+0x2c>
   3330e:	a201      	add	r2, pc, #4	; (adr r2, 33314 <smp_public_key_periph+0x3c>)
   33310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   33314:	0003332d 	.word	0x0003332d
   33318:	00033363 	.word	0x00033363
   3331c:	00033347 	.word	0x00033347
   33320:	0003332d 	.word	0x0003332d
   33324:	00033305 	.word	0x00033305
   33328:	00033387 	.word	0x00033387
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   3332c:	2104      	movs	r1, #4
   3332e:	4620      	mov	r0, r4
   33330:	f01b ffbe 	bl	4f2b0 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   33334:	f7ff feb4 	bl	330a0 <smp_send_pairing_confirm>
		if (err) {
   33338:	2800      	cmp	r0, #0
   3333a:	d1d9      	bne.n	332f0 <smp_public_key_periph+0x18>
	return generate_dhkey(smp);
   3333c:	4620      	mov	r0, r4
}
   3333e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return generate_dhkey(smp);
   33342:	f01c b821 	b.w	4f388 <generate_dhkey>
		err = display_passkey(smp);
   33346:	4620      	mov	r0, r4
   33348:	f7ff fc42 	bl	32bd0 <display_passkey>
		if (err) {
   3334c:	2800      	cmp	r0, #0
   3334e:	d1cf      	bne.n	332f0 <smp_public_key_periph+0x18>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   33350:	2103      	movs	r1, #3
   33352:	4620      	mov	r0, r4
   33354:	f01b ffac 	bl	4f2b0 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   33358:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   3335a:	4620      	mov	r0, r4
   3335c:	f01b ffa8 	bl	4f2b0 <atomic_set_bit>
		break;
   33360:	e7ec      	b.n	3333c <smp_public_key_periph+0x64>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   33362:	4620      	mov	r0, r4
   33364:	2103      	movs	r1, #3
   33366:	f01b ffa3 	bl	4f2b0 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   3336a:	210e      	movs	r1, #14
   3336c:	f01b ffa0 	bl	4f2b0 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   33370:	4628      	mov	r0, r5
   33372:	210a      	movs	r1, #10
   33374:	f01b ff9c 	bl	4f2b0 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   33378:	4b05      	ldr	r3, [pc, #20]	; (33390 <smp_public_key_periph+0xb8>)
   3337a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   3337e:	681b      	ldr	r3, [r3, #0]
   33380:	689b      	ldr	r3, [r3, #8]
   33382:	4798      	blx	r3
		break;
   33384:	e7da      	b.n	3333c <smp_public_key_periph+0x64>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   33386:	2104      	movs	r1, #4
   33388:	e7e7      	b.n	3335a <smp_public_key_periph+0x82>
   3338a:	bf00      	nop
   3338c:	20004268 	.word	0x20004268
   33390:	20003ff4 	.word	0x20003ff4

00033394 <smp_public_key>:
{
   33394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   33396:	688d      	ldr	r5, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   33398:	f100 0657 	add.w	r6, r0, #87	; 0x57
{
   3339c:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   3339e:	2220      	movs	r2, #32
   333a0:	4629      	mov	r1, r5
   333a2:	4630      	mov	r0, r6
   333a4:	f018 ffa2 	bl	4c2ec <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   333a8:	2220      	movs	r2, #32
   333aa:	18a9      	adds	r1, r5, r2
   333ac:	f104 0077 	add.w	r0, r4, #119	; 0x77
   333b0:	f018 ff9c 	bl	4c2ec <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   333b4:	4630      	mov	r0, r6
   333b6:	f7fc f8df 	bl	2f578 <bt_pub_key_is_debug>
   333ba:	b990      	cbnz	r0, 333e2 <smp_public_key+0x4e>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   333bc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   333c0:	78db      	ldrb	r3, [r3, #3]
   333c2:	2b00      	cmp	r3, #0
   333c4:	d17e      	bne.n	334c4 <smp_public_key+0x130>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   333c6:	1d25      	adds	r5, r4, #4
   333c8:	210e      	movs	r1, #14
   333ca:	4628      	mov	r0, r5
   333cc:	f01b ff85 	bl	4f2da <atomic_test_bit>
   333d0:	b330      	cbz	r0, 33420 <smp_public_key+0x8c>
		switch (smp->method) {
   333d2:	7a23      	ldrb	r3, [r4, #8]
   333d4:	2b05      	cmp	r3, #5
   333d6:	d82b      	bhi.n	33430 <smp_public_key+0x9c>
   333d8:	e8df f003 	tbb	[pc, r3]
   333dc:	2c31452c 	.word	0x2c31452c
   333e0:	512a      	.short	0x512a
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   333e2:	210e      	movs	r1, #14
   333e4:	1d20      	adds	r0, r4, #4
   333e6:	f01b ff63 	bl	4f2b0 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   333ea:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   333ee:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   333f2:	b933      	cbnz	r3, 33402 <smp_public_key+0x6e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   333f4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   333f8:	7a28      	ldrb	r0, [r5, #8]
   333fa:	f000 fb9d 	bl	33b38 <bt_keys_get_addr>
   333fe:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   33402:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   33406:	2b00      	cmp	r3, #0
   33408:	d0d8      	beq.n	333bc <smp_public_key+0x28>
   3340a:	89da      	ldrh	r2, [r3, #14]
   3340c:	f002 0224 	and.w	r2, r2, #36	; 0x24
   33410:	2a00      	cmp	r2, #0
   33412:	d0d3      	beq.n	333bc <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   33414:	7b5b      	ldrb	r3, [r3, #13]
   33416:	079b      	lsls	r3, r3, #30
   33418:	d4d0      	bmi.n	333bc <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   3341a:	2003      	movs	r0, #3
}
   3341c:	b003      	add	sp, #12
   3341e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   33420:	4b30      	ldr	r3, [pc, #192]	; (334e4 <smp_public_key+0x150>)
   33422:	2220      	movs	r2, #32
   33424:	6819      	ldr	r1, [r3, #0]
   33426:	4630      	mov	r0, r6
   33428:	f018 ff50 	bl	4c2cc <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   3342c:	2800      	cmp	r0, #0
   3342e:	d1d0      	bne.n	333d2 <smp_public_key+0x3e>
			return BT_SMP_ERR_UNSPECIFIED;
   33430:	2008      	movs	r0, #8
   33432:	e7f3      	b.n	3341c <smp_public_key+0x88>
			atomic_set_bit(smp->allowed_cmds,
   33434:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   33436:	4620      	mov	r0, r4
   33438:	f01b ff3a 	bl	4f2b0 <atomic_set_bit>
			break;
   3343c:	e00f      	b.n	3345e <smp_public_key+0xca>
			err = display_passkey(smp);
   3343e:	4620      	mov	r0, r4
   33440:	f7ff fbc6 	bl	32bd0 <display_passkey>
			if (err) {
   33444:	2800      	cmp	r0, #0
   33446:	d1e9      	bne.n	3341c <smp_public_key+0x88>
			atomic_set_bit(smp->allowed_cmds,
   33448:	2103      	movs	r1, #3
   3344a:	4620      	mov	r0, r4
   3344c:	f01b ff30 	bl	4f2b0 <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   33450:	210e      	movs	r1, #14
   33452:	f01b ff2d 	bl	4f2b0 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   33456:	f7ff fe23 	bl	330a0 <smp_send_pairing_confirm>
			if (err) {
   3345a:	2800      	cmp	r0, #0
   3345c:	d1de      	bne.n	3341c <smp_public_key+0x88>
		return generate_dhkey(smp);
   3345e:	4620      	mov	r0, r4
   33460:	f01b ff92 	bl	4f388 <generate_dhkey>
   33464:	e7da      	b.n	3341c <smp_public_key+0x88>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   33466:	210a      	movs	r1, #10
   33468:	4628      	mov	r0, r5
   3346a:	f01b ff21 	bl	4f2b0 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
   3346e:	4b1e      	ldr	r3, [pc, #120]	; (334e8 <smp_public_key+0x154>)
   33470:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   33474:	681b      	ldr	r3, [r3, #0]
   33476:	689b      	ldr	r3, [r3, #8]
   33478:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   3347a:	210e      	movs	r1, #14
   3347c:	e7db      	b.n	33436 <smp_public_key+0xa2>
			if (bt_rand(smp->prnd, 16)) {
   3347e:	2110      	movs	r1, #16
   33480:	f104 0027 	add.w	r0, r4, #39	; 0x27
   33484:	f003 fe92 	bl	371ac <bt_rand>
   33488:	4606      	mov	r6, r0
   3348a:	2800      	cmp	r0, #0
   3348c:	d1d0      	bne.n	33430 <smp_public_key+0x9c>
			if (bt_auth && bt_auth->oob_data_request) {
   3348e:	4f16      	ldr	r7, [pc, #88]	; (334e8 <smp_public_key+0x154>)
   33490:	683b      	ldr	r3, [r7, #0]
   33492:	b323      	cbz	r3, 334de <smp_public_key+0x14a>
   33494:	691b      	ldr	r3, [r3, #16]
   33496:	b313      	cbz	r3, 334de <smp_public_key+0x14a>
				struct bt_conn_oob_info info = {
   33498:	4b14      	ldr	r3, [pc, #80]	; (334ec <smp_public_key+0x158>)
				le_sc_oob_config_set(smp, &info);
   3349a:	f10d 0105 	add.w	r1, sp, #5
				struct bt_conn_oob_info info = {
   3349e:	881b      	ldrh	r3, [r3, #0]
   334a0:	f8ad 3004 	strh.w	r3, [sp, #4]
				le_sc_oob_config_set(smp, &info);
   334a4:	4620      	mov	r0, r4
   334a6:	f01b ff9f 	bl	4f3e8 <le_sc_oob_config_set.isra.4>
				atomic_set_bit(smp->flags,
   334aa:	4628      	mov	r0, r5
				smp->oobd_remote = NULL;
   334ac:	e9c4 6638 	strd	r6, r6, [r4, #224]	; 0xe0
				atomic_set_bit(smp->flags,
   334b0:	210c      	movs	r1, #12
   334b2:	f01b fefd 	bl	4f2b0 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
   334b6:	683b      	ldr	r3, [r7, #0]
   334b8:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   334bc:	691b      	ldr	r3, [r3, #16]
   334be:	a901      	add	r1, sp, #4
   334c0:	4798      	blx	r3
			break;
   334c2:	e7cc      	b.n	3345e <smp_public_key+0xca>
	if (!sc_public_key) {
   334c4:	4b07      	ldr	r3, [pc, #28]	; (334e4 <smp_public_key+0x150>)
   334c6:	681d      	ldr	r5, [r3, #0]
   334c8:	b92d      	cbnz	r5, 334d6 <smp_public_key+0x142>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   334ca:	1d20      	adds	r0, r4, #4
   334cc:	2106      	movs	r1, #6
   334ce:	f01b feef 	bl	4f2b0 <atomic_set_bit>
		return 0;
   334d2:	4628      	mov	r0, r5
   334d4:	e7a2      	b.n	3341c <smp_public_key+0x88>
	err = smp_public_key_periph(smp);
   334d6:	4620      	mov	r0, r4
   334d8:	f7ff fefe 	bl	332d8 <smp_public_key_periph>
	if (err) {
   334dc:	e79e      	b.n	3341c <smp_public_key+0x88>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   334de:	2002      	movs	r0, #2
   334e0:	e79c      	b.n	3341c <smp_public_key+0x88>
   334e2:	bf00      	nop
   334e4:	20004268 	.word	0x20004268
   334e8:	20003ff4 	.word	0x20003ff4
   334ec:	00051e60 	.word	0x00051e60

000334f0 <bt_smp_connected>:
{
   334f0:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   334f2:	4905      	ldr	r1, [pc, #20]	; (33508 <bt_smp_connected+0x18>)
   334f4:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   334f8:	30e8      	adds	r0, #232	; 0xe8
   334fa:	f01d fe5e 	bl	511ba <k_work_init_delayable>
	smp_reset(smp);
   334fe:	4620      	mov	r0, r4
}
   33500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   33504:	f01c ba75 	b.w	4f9f2 <smp_reset>
   33508:	0004ff11 	.word	0x0004ff11

0003350c <smp_pairing_accept_query>:
	if (bt_auth && bt_auth->pairing_accept) {
   3350c:	4b13      	ldr	r3, [pc, #76]	; (3355c <smp_pairing_accept_query+0x50>)
   3350e:	681b      	ldr	r3, [r3, #0]
{
   33510:	b507      	push	{r0, r1, r2, lr}
	if (bt_auth && bt_auth->pairing_accept) {
   33512:	b1f3      	cbz	r3, 33552 <smp_pairing_accept_query+0x46>
   33514:	681b      	ldr	r3, [r3, #0]
   33516:	b1f3      	cbz	r3, 33556 <smp_pairing_accept_query+0x4a>
		const struct bt_conn_pairing_feat feat = {
   33518:	780a      	ldrb	r2, [r1, #0]
   3351a:	f88d 2000 	strb.w	r2, [sp]
   3351e:	784a      	ldrb	r2, [r1, #1]
   33520:	f88d 2001 	strb.w	r2, [sp, #1]
   33524:	788a      	ldrb	r2, [r1, #2]
   33526:	f88d 2002 	strb.w	r2, [sp, #2]
   3352a:	78ca      	ldrb	r2, [r1, #3]
   3352c:	f88d 2003 	strb.w	r2, [sp, #3]
   33530:	790a      	ldrb	r2, [r1, #4]
   33532:	f88d 2004 	strb.w	r2, [sp, #4]
   33536:	794a      	ldrb	r2, [r1, #5]
   33538:	f88d 2005 	strb.w	r2, [sp, #5]
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   3353c:	4669      	mov	r1, sp
   3353e:	4798      	blx	r3
	switch (auth_err) {
   33540:	3801      	subs	r0, #1
   33542:	b2c0      	uxtb	r0, r0
   33544:	2808      	cmp	r0, #8
   33546:	d804      	bhi.n	33552 <smp_pairing_accept_query+0x46>
   33548:	4b05      	ldr	r3, [pc, #20]	; (33560 <smp_pairing_accept_query+0x54>)
   3354a:	5c18      	ldrb	r0, [r3, r0]
}
   3354c:	b003      	add	sp, #12
   3354e:	f85d fb04 	ldr.w	pc, [sp], #4
		return smp_err_get(bt_auth->pairing_accept(conn, &feat));
   33552:	2000      	movs	r0, #0
   33554:	e7fa      	b.n	3354c <smp_pairing_accept_query+0x40>
	return 0;
   33556:	4618      	mov	r0, r3
   33558:	e7f8      	b.n	3354c <smp_pairing_accept_query+0x40>
   3355a:	bf00      	nop
   3355c:	20003ff4 	.word	0x20003ff4
   33560:	000544e5 	.word	0x000544e5

00033564 <smp_pairing_rsp>:
{
   33564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
   33568:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   3356a:	78eb      	ldrb	r3, [r5, #3]
   3356c:	3b07      	subs	r3, #7
   3356e:	2b09      	cmp	r3, #9
{
   33570:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   33572:	f200 8086 	bhi.w	33682 <smp_pairing_rsp+0x11e>
	smp->local_dist &= rsp->init_key_dist;
   33576:	792a      	ldrb	r2, [r5, #4]
   33578:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
	struct bt_conn *conn = smp->chan.chan.conn;
   3357c:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	smp->local_dist &= rsp->init_key_dist;
   33580:	4013      	ands	r3, r2
   33582:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   33586:	796a      	ldrb	r2, [r5, #5]
   33588:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   3358c:	4013      	ands	r3, r2
   3358e:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   33592:	2302      	movs	r3, #2
   33594:	7403      	strb	r3, [r0, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   33596:	2206      	movs	r2, #6
   33598:	4629      	mov	r1, r5
   3359a:	3011      	adds	r0, #17
   3359c:	f018 fea6 	bl	4c2ec <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   335a0:	78ab      	ldrb	r3, [r5, #2]
   335a2:	071f      	lsls	r7, r3, #28
   335a4:	d506      	bpl.n	335b4 <smp_pairing_rsp+0x50>
   335a6:	7b23      	ldrb	r3, [r4, #12]
   335a8:	071e      	lsls	r6, r3, #28
   335aa:	d503      	bpl.n	335b4 <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   335ac:	2105      	movs	r1, #5
   335ae:	1d20      	adds	r0, r4, #4
   335b0:	f01b fe7e 	bl	4f2b0 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   335b4:	78ab      	ldrb	r3, [r5, #2]
   335b6:	0698      	lsls	r0, r3, #26
   335b8:	d506      	bpl.n	335c8 <smp_pairing_rsp+0x64>
   335ba:	7b23      	ldrb	r3, [r4, #12]
   335bc:	0699      	lsls	r1, r3, #26
   335be:	d503      	bpl.n	335c8 <smp_pairing_rsp+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   335c0:	2114      	movs	r1, #20
   335c2:	1d20      	adds	r0, r4, #4
   335c4:	f01b fe74 	bl	4f2b0 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   335c8:	78ab      	ldrb	r3, [r5, #2]
   335ca:	07da      	lsls	r2, r3, #31
   335cc:	d506      	bpl.n	335dc <smp_pairing_rsp+0x78>
   335ce:	7b23      	ldrb	r3, [r4, #12]
   335d0:	07db      	lsls	r3, r3, #31
   335d2:	d503      	bpl.n	335dc <smp_pairing_rsp+0x78>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   335d4:	210d      	movs	r1, #13
   335d6:	1d20      	adds	r0, r4, #4
   335d8:	f01b fe6a 	bl	4f2b0 <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
   335dc:	7829      	ldrb	r1, [r5, #0]
   335de:	4620      	mov	r0, r4
   335e0:	f7ff fa8c 	bl	32afc <get_pair_method>
   335e4:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   335e6:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   335ea:	4620      	mov	r0, r4
   335ec:	f01b ff42 	bl	4f474 <update_keys_check>
   335f0:	b918      	cbnz	r0, 335fa <smp_pairing_rsp+0x96>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   335f2:	2603      	movs	r6, #3
}
   335f4:	4630      	mov	r0, r6
   335f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = remote_sec_level_reachable(smp);
   335fa:	4620      	mov	r0, r4
   335fc:	f01b fe76 	bl	4f2ec <remote_sec_level_reachable>
	if (err) {
   33600:	4606      	mov	r6, r0
   33602:	2800      	cmp	r0, #0
   33604:	d1f6      	bne.n	335f4 <smp_pairing_rsp+0x90>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   33606:	1d27      	adds	r7, r4, #4
   33608:	2105      	movs	r1, #5
   3360a:	4638      	mov	r0, r7
   3360c:	f01b fe65 	bl	4f2da <atomic_test_bit>
   33610:	2800      	cmp	r0, #0
   33612:	d0ee      	beq.n	335f2 <smp_pairing_rsp+0x8e>
	smp->remote_dist &= RECV_KEYS_SC;
   33614:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	smp->local_dist &= SEND_KEYS_SC;
   33618:	f884 60e8 	strb.w	r6, [r4, #232]	; 0xe8
	smp->remote_dist &= RECV_KEYS_SC;
   3361c:	f003 0302 	and.w	r3, r3, #2
   33620:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		err = smp_pairing_accept_query(conn, rsp);
   33624:	4629      	mov	r1, r5
   33626:	4640      	mov	r0, r8
   33628:	f7ff ff70 	bl	3350c <smp_pairing_accept_query>
		if (err) {
   3362c:	4606      	mov	r6, r0
   3362e:	2800      	cmp	r0, #0
   33630:	d1e0      	bne.n	335f4 <smp_pairing_rsp+0x90>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   33632:	7a23      	ldrb	r3, [r4, #8]
   33634:	b993      	cbnz	r3, 3365c <smp_pairing_rsp+0xf8>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   33636:	210f      	movs	r1, #15
   33638:	4638      	mov	r0, r7
   3363a:	f01b fe4e 	bl	4f2da <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   3363e:	b168      	cbz	r0, 3365c <smp_pairing_rsp+0xf8>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   33640:	4d11      	ldr	r5, [pc, #68]	; (33688 <smp_pairing_rsp+0x124>)
   33642:	682b      	ldr	r3, [r5, #0]
   33644:	b153      	cbz	r3, 3365c <smp_pairing_rsp+0xf8>
	    bt_auth && bt_auth->pairing_confirm) {
   33646:	699b      	ldr	r3, [r3, #24]
   33648:	b143      	cbz	r3, 3365c <smp_pairing_rsp+0xf8>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   3364a:	4638      	mov	r0, r7
   3364c:	210a      	movs	r1, #10
   3364e:	f01b fe2f 	bl	4f2b0 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   33652:	682b      	ldr	r3, [r5, #0]
   33654:	4640      	mov	r0, r8
   33656:	699b      	ldr	r3, [r3, #24]
   33658:	4798      	blx	r3
		return 0;
   3365a:	e7cb      	b.n	335f4 <smp_pairing_rsp+0x90>
	if (!sc_public_key) {
   3365c:	4b0b      	ldr	r3, [pc, #44]	; (3368c <smp_pairing_rsp+0x128>)
   3365e:	681b      	ldr	r3, [r3, #0]
   33660:	b923      	cbnz	r3, 3366c <smp_pairing_rsp+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   33662:	2106      	movs	r1, #6
   33664:	4638      	mov	r0, r7
   33666:	f01b fe23 	bl	4f2b0 <atomic_set_bit>
		return 0;
   3366a:	e7c3      	b.n	335f4 <smp_pairing_rsp+0x90>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   3366c:	4620      	mov	r0, r4
   3366e:	210c      	movs	r1, #12
   33670:	f01b fe1e 	bl	4f2b0 <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   33674:	210b      	movs	r1, #11
   33676:	f01b fe5b 	bl	4f330 <atomic_clear_bit>
}
   3367a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   3367e:	f7ff bced 	b.w	3305c <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   33682:	2606      	movs	r6, #6
   33684:	e7b6      	b.n	335f4 <smp_pairing_rsp+0x90>
   33686:	bf00      	nop
   33688:	20003ff4 	.word	0x20003ff4
   3368c:	20004268 	.word	0x20004268

00033690 <smp_pairing_req>:
{
   33690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   33694:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   33696:	78f3      	ldrb	r3, [r6, #3]
   33698:	3b07      	subs	r3, #7
   3369a:	2b09      	cmp	r3, #9
{
   3369c:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   3369e:	f200 80b9 	bhi.w	33814 <smp_pairing_req+0x184>
	struct bt_conn *conn = smp->chan.chan.conn;
   336a2:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   336a6:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
   336aa:	b15b      	cbz	r3, 336c4 <smp_pairing_req+0x34>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   336ac:	1d27      	adds	r7, r4, #4
   336ae:	210f      	movs	r1, #15
   336b0:	4638      	mov	r0, r7
   336b2:	f01b fe12 	bl	4f2da <atomic_test_bit>
   336b6:	b998      	cbnz	r0, 336e0 <smp_pairing_req+0x50>
		int ret = smp_init(smp);
   336b8:	4620      	mov	r0, r4
   336ba:	f7ff fb33 	bl	32d24 <smp_init>
		if (ret) {
   336be:	b178      	cbz	r0, 336e0 <smp_pairing_req+0x50>
			return ret;
   336c0:	b2c5      	uxtb	r5, r0
   336c2:	e00a      	b.n	336da <smp_pairing_req+0x4a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   336c4:	f108 0188 	add.w	r1, r8, #136	; 0x88
   336c8:	f898 0008 	ldrb.w	r0, [r8, #8]
   336cc:	f000 fa34 	bl	33b38 <bt_keys_get_addr>
   336d0:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
   336d4:	2800      	cmp	r0, #0
   336d6:	d1e9      	bne.n	336ac <smp_pairing_req+0x1c>
			return BT_SMP_ERR_UNSPECIFIED;
   336d8:	2508      	movs	r5, #8
}
   336da:	4628      	mov	r0, r5
   336dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   336e0:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   336e2:	2206      	movs	r2, #6
   336e4:	4631      	mov	r1, r6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   336e6:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   336e8:	f104 000a 	add.w	r0, r4, #10
   336ec:	f018 fdfe 	bl	4c2ec <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   336f0:	2302      	movs	r3, #2
   336f2:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   336f4:	78b0      	ldrb	r0, [r6, #2]
   336f6:	f7ff faad 	bl	32c54 <get_auth.isra.1>
   336fa:	74e0      	strb	r0, [r4, #19]
   336fc:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
   336fe:	f7ff f9d7 	bl	32ab0 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   33702:	4b45      	ldr	r3, [pc, #276]	; (33818 <smp_pairing_req+0x188>)
	rsp->io_capability = get_io_capa();
   33704:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   33706:	781b      	ldrb	r3, [r3, #0]
   33708:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   3370a:	2310      	movs	r3, #16
   3370c:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   3370e:	7933      	ldrb	r3, [r6, #4]
   33710:	f003 0303 	and.w	r3, r3, #3
   33714:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   33716:	7973      	ldrb	r3, [r6, #5]
   33718:	f003 0301 	and.w	r3, r3, #1
   3371c:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   3371e:	072b      	lsls	r3, r5, #28
   33720:	d50c      	bpl.n	3373c <smp_pairing_req+0xac>
   33722:	78b3      	ldrb	r3, [r6, #2]
   33724:	071d      	lsls	r5, r3, #28
   33726:	d509      	bpl.n	3373c <smp_pairing_req+0xac>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   33728:	2105      	movs	r1, #5
   3372a:	4638      	mov	r0, r7
   3372c:	f01b fdc0 	bl	4f2b0 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   33730:	7d63      	ldrb	r3, [r4, #21]
   33732:	f003 0302 	and.w	r3, r3, #2
   33736:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   33738:	2300      	movs	r3, #0
   3373a:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   3373c:	7ce3      	ldrb	r3, [r4, #19]
   3373e:	0698      	lsls	r0, r3, #26
   33740:	d506      	bpl.n	33750 <smp_pairing_req+0xc0>
   33742:	78b3      	ldrb	r3, [r6, #2]
   33744:	0699      	lsls	r1, r3, #26
   33746:	d503      	bpl.n	33750 <smp_pairing_req+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   33748:	2114      	movs	r1, #20
   3374a:	4638      	mov	r0, r7
   3374c:	f01b fdb0 	bl	4f2b0 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   33750:	7da3      	ldrb	r3, [r4, #22]
   33752:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   33756:	7d63      	ldrb	r3, [r4, #21]
   33758:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   3375c:	7ce3      	ldrb	r3, [r4, #19]
   3375e:	07da      	lsls	r2, r3, #31
   33760:	d506      	bpl.n	33770 <smp_pairing_req+0xe0>
   33762:	78b3      	ldrb	r3, [r6, #2]
   33764:	07db      	lsls	r3, r3, #31
   33766:	d503      	bpl.n	33770 <smp_pairing_req+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   33768:	210d      	movs	r1, #13
   3376a:	4638      	mov	r0, r7
   3376c:	f01b fda0 	bl	4f2b0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   33770:	2103      	movs	r1, #3
   33772:	4638      	mov	r0, r7
   33774:	f01b fd9c 	bl	4f2b0 <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
   33778:	7831      	ldrb	r1, [r6, #0]
   3377a:	4620      	mov	r0, r4
   3377c:	f7ff f9be 	bl	32afc <get_pair_method>
   33780:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   33782:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
   33786:	4620      	mov	r0, r4
   33788:	f01b fe74 	bl	4f474 <update_keys_check>
   3378c:	b908      	cbnz	r0, 33792 <smp_pairing_req+0x102>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   3378e:	2503      	movs	r5, #3
   33790:	e7a3      	b.n	336da <smp_pairing_req+0x4a>
	err = remote_sec_level_reachable(smp);
   33792:	4620      	mov	r0, r4
   33794:	f01b fdaa 	bl	4f2ec <remote_sec_level_reachable>
	if (err) {
   33798:	4605      	mov	r5, r0
   3379a:	2800      	cmp	r0, #0
   3379c:	d19d      	bne.n	336da <smp_pairing_req+0x4a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   3379e:	2105      	movs	r1, #5
   337a0:	4638      	mov	r0, r7
   337a2:	f01b fd9a 	bl	4f2da <atomic_test_bit>
   337a6:	2800      	cmp	r0, #0
   337a8:	d0f1      	beq.n	3378e <smp_pairing_req+0xfe>
		err = smp_pairing_accept_query(conn, req);
   337aa:	4631      	mov	r1, r6
   337ac:	4640      	mov	r0, r8
   337ae:	f7ff fead 	bl	3350c <smp_pairing_accept_query>
		if (err) {
   337b2:	4605      	mov	r5, r0
   337b4:	2800      	cmp	r0, #0
   337b6:	d190      	bne.n	336da <smp_pairing_req+0x4a>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   337b8:	7a23      	ldrb	r3, [r4, #8]
   337ba:	b993      	cbnz	r3, 337e2 <smp_pairing_req+0x152>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   337bc:	210f      	movs	r1, #15
   337be:	4638      	mov	r0, r7
   337c0:	f01b fd8b 	bl	4f2da <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   337c4:	b968      	cbnz	r0, 337e2 <smp_pairing_req+0x152>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   337c6:	4e15      	ldr	r6, [pc, #84]	; (3381c <smp_pairing_req+0x18c>)
   337c8:	6833      	ldr	r3, [r6, #0]
   337ca:	b153      	cbz	r3, 337e2 <smp_pairing_req+0x152>
	    bt_auth && bt_auth->pairing_confirm) {
   337cc:	699b      	ldr	r3, [r3, #24]
   337ce:	b143      	cbz	r3, 337e2 <smp_pairing_req+0x152>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   337d0:	4638      	mov	r0, r7
   337d2:	210a      	movs	r1, #10
   337d4:	f01b fd6c 	bl	4f2b0 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   337d8:	6833      	ldr	r3, [r6, #0]
   337da:	4640      	mov	r0, r8
   337dc:	699b      	ldr	r3, [r3, #24]
   337de:	4798      	blx	r3
		return 0;
   337e0:	e77b      	b.n	336da <smp_pairing_req+0x4a>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   337e2:	210c      	movs	r1, #12
   337e4:	4620      	mov	r0, r4
   337e6:	f01b fd63 	bl	4f2b0 <atomic_set_bit>
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   337ea:	2102      	movs	r1, #2
   337ec:	f01b fe63 	bl	4f4b6 <smp_create_pdu.isra.8>
	if (!rsp_buf) {
   337f0:	4606      	mov	r6, r0
   337f2:	2800      	cmp	r0, #0
   337f4:	f43f af70 	beq.w	336d8 <smp_pairing_req+0x48>
   337f8:	2106      	movs	r1, #6
   337fa:	3008      	adds	r0, #8
   337fc:	f01c fccb 	bl	50196 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   33800:	f104 0111 	add.w	r1, r4, #17
   33804:	2206      	movs	r2, #6
   33806:	f018 fd71 	bl	4c2ec <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   3380a:	4631      	mov	r1, r6
   3380c:	4620      	mov	r0, r4
   3380e:	f01b fef0 	bl	4f5f2 <smp_send.isra.9.constprop.21>
	return 0;
   33812:	e762      	b.n	336da <smp_pairing_req+0x4a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   33814:	2506      	movs	r5, #6
   33816:	e760      	b.n	336da <smp_pairing_req+0x4a>
   33818:	20006d93 	.word	0x20006d93
   3381c:	20003ff4 	.word	0x20003ff4

00033820 <smp_pairing_complete>:
{
   33820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33822:	4607      	mov	r7, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   33824:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (!status) {
   33828:	1d06      	adds	r6, r0, #4
   3382a:	b9e9      	cbnz	r1, 33868 <smp_pairing_complete+0x48>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   3382c:	210d      	movs	r1, #13
   3382e:	4630      	mov	r0, r6
   33830:	f01b fd53 	bl	4f2da <atomic_test_bit>
		if (bond_flag) {
   33834:	4605      	mov	r5, r0
   33836:	b118      	cbz	r0, 33840 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   33838:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   3383c:	f000 fab6 	bl	33dac <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
   33840:	4b24      	ldr	r3, [pc, #144]	; (338d4 <smp_pairing_complete+0xb4>)
   33842:	681b      	ldr	r3, [r3, #0]
   33844:	b123      	cbz	r3, 33850 <smp_pairing_complete+0x30>
   33846:	69db      	ldr	r3, [r3, #28]
		    bt_auth && bt_auth->pairing_failed) {
   33848:	b113      	cbz	r3, 33850 <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(conn, security_err);
   3384a:	4629      	mov	r1, r5
   3384c:	4620      	mov	r0, r4
   3384e:	4798      	blx	r3
	smp_reset(smp);
   33850:	4638      	mov	r0, r7
   33852:	f01c f8ce 	bl	4f9f2 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   33856:	7a62      	ldrb	r2, [r4, #9]
   33858:	7aa3      	ldrb	r3, [r4, #10]
   3385a:	429a      	cmp	r2, r3
   3385c:	d039      	beq.n	338d2 <smp_pairing_complete+0xb2>
		bt_smp_start_security(conn);
   3385e:	4620      	mov	r0, r4
}
   33860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   33864:	f01c b971 	b.w	4fb4a <bt_smp_start_security>
	switch (smp_err) {
   33868:	3901      	subs	r1, #1
   3386a:	b2c9      	uxtb	r1, r1
   3386c:	290e      	cmp	r1, #14
   3386e:	bf9c      	itt	ls
   33870:	4b19      	ldrls	r3, [pc, #100]	; (338d8 <smp_pairing_complete+0xb8>)
   33872:	5c5d      	ldrbls	r5, [r3, r1]
		if (conn->le.keys &&
   33874:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   33878:	bf88      	it	hi
   3387a:	2509      	movhi	r5, #9
		if (conn->le.keys &&
   3387c:	b143      	cbz	r3, 33890 <smp_pairing_complete+0x70>
   3387e:	7b1b      	ldrb	r3, [r3, #12]
   33880:	bb03      	cbnz	r3, 338c4 <smp_pairing_complete+0xa4>
			bt_keys_clear(conn->le.keys);
   33882:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   33886:	f000 fa6b 	bl	33d60 <bt_keys_clear>
			conn->le.keys = NULL;
   3388a:	2300      	movs	r3, #0
   3388c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   33890:	2102      	movs	r1, #2
   33892:	4630      	mov	r0, r6
   33894:	f01b fd21 	bl	4f2da <atomic_test_bit>
   33898:	b940      	cbnz	r0, 338ac <smp_pairing_complete+0x8c>
	switch (err) {
   3389a:	2d07      	cmp	r5, #7
   3389c:	bf96      	itet	ls
   3389e:	4b0f      	ldrls	r3, [pc, #60]	; (338dc <smp_pairing_complete+0xbc>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   338a0:	211f      	movhi	r1, #31
   338a2:	5d59      	ldrbls	r1, [r3, r5]
			bt_conn_security_changed(conn,
   338a4:	462a      	mov	r2, r5
   338a6:	4620      	mov	r0, r4
   338a8:	f7fc fad0 	bl	2fe4c <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   338ac:	2103      	movs	r1, #3
   338ae:	4630      	mov	r0, r6
   338b0:	f01b fd13 	bl	4f2da <atomic_test_bit>
   338b4:	2800      	cmp	r0, #0
   338b6:	d0cb      	beq.n	33850 <smp_pairing_complete+0x30>
   338b8:	4b06      	ldr	r3, [pc, #24]	; (338d4 <smp_pairing_complete+0xb4>)
   338ba:	681b      	ldr	r3, [r3, #0]
   338bc:	2b00      	cmp	r3, #0
   338be:	d0c7      	beq.n	33850 <smp_pairing_complete+0x30>
		    bt_auth && bt_auth->pairing_failed) {
   338c0:	6a1b      	ldr	r3, [r3, #32]
   338c2:	e7c1      	b.n	33848 <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   338c4:	2102      	movs	r1, #2
   338c6:	4630      	mov	r0, r6
   338c8:	f01b fd07 	bl	4f2da <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   338cc:	2800      	cmp	r0, #0
   338ce:	d1d8      	bne.n	33882 <smp_pairing_complete+0x62>
   338d0:	e7de      	b.n	33890 <smp_pairing_complete+0x70>
}
   338d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   338d4:	20003ff4 	.word	0x20003ff4
   338d8:	000544d6 	.word	0x000544d6
   338dc:	000544ee 	.word	0x000544ee

000338e0 <bt_smp_recv>:
{
   338e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   338e2:	898b      	ldrh	r3, [r1, #12]
{
   338e4:	4606      	mov	r6, r0
   338e6:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   338e8:	b393      	cbz	r3, 33950 <bt_smp_recv+0x70>
	return net_buf_simple_pull_mem(&buf->b, len);
   338ea:	2101      	movs	r1, #1
   338ec:	f105 0008 	add.w	r0, r5, #8
   338f0:	f01c fc82 	bl	501f8 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   338f4:	2104      	movs	r1, #4
   338f6:	4607      	mov	r7, r0
   338f8:	f1a6 00ec 	sub.w	r0, r6, #236	; 0xec
   338fc:	f1a6 04f0 	sub.w	r4, r6, #240	; 0xf0
   33900:	f01b fceb 	bl	4f2da <atomic_test_bit>
   33904:	bb20      	cbnz	r0, 33950 <bt_smp_recv+0x70>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   33906:	7839      	ldrb	r1, [r7, #0]
   33908:	290e      	cmp	r1, #14
   3390a:	d821      	bhi.n	33950 <bt_smp_recv+0x70>
	if (!handlers[hdr->code].func) {
   3390c:	4e11      	ldr	r6, [pc, #68]	; (33954 <bt_smp_recv+0x74>)
   3390e:	f856 3031 	ldr.w	r3, [r6, r1, lsl #3]
   33912:	b923      	cbnz	r3, 3391e <bt_smp_recv+0x3e>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   33914:	2107      	movs	r1, #7
		smp_error(smp, err);
   33916:	4620      	mov	r0, r4
   33918:	f01c f9c4 	bl	4fca4 <smp_error>
   3391c:	e018      	b.n	33950 <bt_smp_recv+0x70>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   3391e:	4620      	mov	r0, r4
   33920:	f01c f84f 	bl	4f9c2 <atomic_test_and_clear_bit>
   33924:	783b      	ldrb	r3, [r7, #0]
   33926:	b918      	cbnz	r0, 33930 <bt_smp_recv+0x50>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   33928:	2b05      	cmp	r3, #5
   3392a:	d011      	beq.n	33950 <bt_smp_recv+0x70>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   3392c:	2108      	movs	r1, #8
   3392e:	e7f2      	b.n	33916 <bt_smp_recv+0x36>
	if (buf->len != handlers[hdr->code].expect_len) {
   33930:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
   33934:	89a9      	ldrh	r1, [r5, #12]
   33936:	7912      	ldrb	r2, [r2, #4]
   33938:	4291      	cmp	r1, r2
   3393a:	d001      	beq.n	33940 <bt_smp_recv+0x60>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   3393c:	210a      	movs	r1, #10
   3393e:	e7ea      	b.n	33916 <bt_smp_recv+0x36>
	err = handlers[hdr->code].func(smp, buf);
   33940:	4629      	mov	r1, r5
   33942:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
   33946:	4620      	mov	r0, r4
   33948:	4798      	blx	r3
	if (err) {
   3394a:	4601      	mov	r1, r0
   3394c:	2800      	cmp	r0, #0
   3394e:	d1e2      	bne.n	33916 <bt_smp_recv+0x36>
}
   33950:	2000      	movs	r0, #0
   33952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33954:	00052c74 	.word	0x00052c74

00033958 <bt_smp_pkey_ready>:
{
   33958:	b538      	push	{r3, r4, r5, lr}
	sc_public_key = pkey;
   3395a:	4b16      	ldr	r3, [pc, #88]	; (339b4 <bt_smp_pkey_ready+0x5c>)
   3395c:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   3395e:	b1f0      	cbz	r0, 3399e <bt_smp_pkey_ready+0x46>
	z_impl_k_sem_give(sem);
   33960:	4815      	ldr	r0, [pc, #84]	; (339b8 <bt_smp_pkey_ready+0x60>)
   33962:	4c16      	ldr	r4, [pc, #88]	; (339bc <bt_smp_pkey_ready+0x64>)
   33964:	f014 ffa8 	bl	488b8 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   33968:	2500      	movs	r5, #0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   3396a:	2106      	movs	r1, #6
   3396c:	1d20      	adds	r0, r4, #4
   3396e:	f01b fcb4 	bl	4f2da <atomic_test_bit>
   33972:	b178      	cbz	r0, 33994 <bt_smp_pkey_ready+0x3c>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   33974:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   33978:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
   3397a:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   3397c:	b983      	cbnz	r3, 339a0 <bt_smp_pkey_ready+0x48>
			err = sc_send_public_key(smp);
   3397e:	f7ff fb6d 	bl	3305c <sc_send_public_key>
			if (err) {
   33982:	4601      	mov	r1, r0
   33984:	b110      	cbz	r0, 3398c <bt_smp_pkey_ready+0x34>
				smp_error(smp, err);
   33986:	4620      	mov	r0, r4
   33988:	f01c f98c 	bl	4fca4 <smp_error>
			atomic_set_bit(smp->allowed_cmds,
   3398c:	210c      	movs	r1, #12
   3398e:	4620      	mov	r0, r4
   33990:	f01b fc8e 	bl	4f2b0 <atomic_set_bit>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   33994:	3501      	adds	r5, #1
   33996:	2d06      	cmp	r5, #6
   33998:	f504 7402 	add.w	r4, r4, #520	; 0x208
   3399c:	d1e5      	bne.n	3396a <bt_smp_pkey_ready+0x12>
}
   3399e:	bd38      	pop	{r3, r4, r5, pc}
		err = smp_public_key_periph(smp);
   339a0:	f7ff fc9a 	bl	332d8 <smp_public_key_periph>
		if (err) {
   339a4:	4601      	mov	r1, r0
   339a6:	2800      	cmp	r0, #0
   339a8:	d0f4      	beq.n	33994 <bt_smp_pkey_ready+0x3c>
			smp_error(smp, err);
   339aa:	4620      	mov	r0, r4
   339ac:	f01c f97a 	bl	4fca4 <smp_error>
   339b0:	e7f0      	b.n	33994 <bt_smp_pkey_ready+0x3c>
   339b2:	bf00      	nop
   339b4:	20004268 	.word	0x20004268
   339b8:	2000102c 	.word	0x2000102c
   339bc:	20002038 	.word	0x20002038

000339c0 <smp_pairing_failed>:
{
   339c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   339c2:	1d05      	adds	r5, r0, #4
{
   339c4:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   339c6:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   339ca:	688e      	ldr	r6, [r1, #8]
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   339cc:	4628      	mov	r0, r5
   339ce:	210a      	movs	r1, #10
   339d0:	f01b fff7 	bl	4f9c2 <atomic_test_and_clear_bit>
   339d4:	b140      	cbz	r0, 339e8 <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
   339d6:	4b0b      	ldr	r3, [pc, #44]	; (33a04 <smp_pairing_failed+0x44>)
   339d8:	681b      	ldr	r3, [r3, #0]
   339da:	b963      	cbnz	r3, 339f6 <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
   339dc:	4620      	mov	r0, r4
   339de:	7831      	ldrb	r1, [r6, #0]
   339e0:	f7ff ff1e 	bl	33820 <smp_pairing_complete>
}
   339e4:	2000      	movs	r0, #0
   339e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   339e8:	210b      	movs	r1, #11
   339ea:	4628      	mov	r0, r5
   339ec:	f01b ffe9 	bl	4f9c2 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   339f0:	2800      	cmp	r0, #0
   339f2:	d1f0      	bne.n	339d6 <smp_pairing_failed+0x16>
   339f4:	e7f2      	b.n	339dc <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
   339f6:	695b      	ldr	r3, [r3, #20]
   339f8:	2b00      	cmp	r3, #0
   339fa:	d0ef      	beq.n	339dc <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
   339fc:	4638      	mov	r0, r7
   339fe:	4798      	blx	r3
   33a00:	e7ec      	b.n	339dc <smp_pairing_failed+0x1c>
   33a02:	bf00      	nop
   33a04:	20003ff4 	.word	0x20003ff4

00033a08 <bt_smp_encrypt_change>:
{
   33a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   33a0c:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   33a0e:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   33a12:	4604      	mov	r4, r0
   33a14:	4688      	mov	r8, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   33a16:	4630      	mov	r0, r6
   33a18:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   33a1a:	f855 79f0 	ldr.w	r7, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   33a1e:	f01b ffd0 	bl	4f9c2 <atomic_test_and_clear_bit>
   33a22:	2800      	cmp	r0, #0
   33a24:	d05f      	beq.n	33ae6 <bt_smp_encrypt_change+0xde>
	if (hci_status) {
   33a26:	f1b8 0f00 	cmp.w	r8, #0
   33a2a:	d019      	beq.n	33a60 <bt_smp_encrypt_change+0x58>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   33a2c:	2103      	movs	r1, #3
   33a2e:	4630      	mov	r0, r6
   33a30:	f01b fc53 	bl	4f2da <atomic_test_bit>
   33a34:	2800      	cmp	r0, #0
   33a36:	d056      	beq.n	33ae6 <bt_smp_encrypt_change+0xde>
			uint8_t smp_err = smp_err_get(
   33a38:	4640      	mov	r0, r8
   33a3a:	f7fa fbd9 	bl	2e1f0 <bt_security_err_get>
	switch (auth_err) {
   33a3e:	3801      	subs	r0, #1
   33a40:	b2c0      	uxtb	r0, r0
   33a42:	2808      	cmp	r0, #8
   33a44:	bf9a      	itte	ls
   33a46:	4b2d      	ldrls	r3, [pc, #180]	; (33afc <bt_smp_encrypt_change+0xf4>)
   33a48:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   33a4a:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   33a4c:	2102      	movs	r1, #2
   33a4e:	4630      	mov	r0, r6
   33a50:	f01b fc2e 	bl	4f2b0 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   33a54:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   33a56:	4628      	mov	r0, r5
}
   33a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   33a5c:	f7ff bee0 	b.w	33820 <smp_pairing_complete>
	if (!conn->encrypt) {
   33a60:	7afb      	ldrb	r3, [r7, #11]
   33a62:	2b00      	cmp	r3, #0
   33a64:	d03f      	beq.n	33ae6 <bt_smp_encrypt_change+0xde>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   33a66:	2103      	movs	r1, #3
   33a68:	4630      	mov	r0, r6
   33a6a:	f01b fc36 	bl	4f2da <atomic_test_bit>
   33a6e:	b920      	cbnz	r0, 33a7a <bt_smp_encrypt_change+0x72>
		smp_reset(smp);
   33a70:	4628      	mov	r0, r5
}
   33a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   33a76:	f01b bfbc 	b.w	4f9f2 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   33a7a:	2105      	movs	r1, #5
   33a7c:	4630      	mov	r0, r6
   33a7e:	f01b fc2c 	bl	4f2da <atomic_test_bit>
   33a82:	b1b8      	cbz	r0, 33ab4 <bt_smp_encrypt_change+0xac>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   33a84:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   33a88:	071b      	lsls	r3, r3, #28
   33a8a:	d507      	bpl.n	33a9c <bt_smp_encrypt_change+0x94>
   33a8c:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33a90:	0718      	lsls	r0, r3, #28
   33a92:	d503      	bpl.n	33a9c <bt_smp_encrypt_change+0x94>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   33a94:	2111      	movs	r1, #17
   33a96:	4630      	mov	r0, r6
   33a98:	f01b fc0a 	bl	4f2b0 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   33a9c:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   33aa0:	f023 0308 	bic.w	r3, r3, #8
   33aa4:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   33aa8:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33aac:	f023 0308 	bic.w	r3, r3, #8
   33ab0:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   33ab4:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33ab8:	07d9      	lsls	r1, r3, #31
   33aba:	d516      	bpl.n	33aea <bt_smp_encrypt_change+0xe2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   33abc:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   33abe:	4628      	mov	r0, r5
   33ac0:	f01b fbf6 	bl	4f2b0 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   33ac4:	2102      	movs	r1, #2
   33ac6:	4630      	mov	r0, r6
   33ac8:	f01b fbf2 	bl	4f2b0 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   33acc:	78fb      	ldrb	r3, [r7, #3]
   33ace:	b913      	cbnz	r3, 33ad6 <bt_smp_encrypt_change+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   33ad0:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   33ad4:	b93b      	cbnz	r3, 33ae6 <bt_smp_encrypt_change+0xde>
	struct bt_keys *keys = conn->le.keys;
   33ad6:	6823      	ldr	r3, [r4, #0]
	if (!keys) {
   33ad8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   33adc:	b11b      	cbz	r3, 33ae6 <bt_smp_encrypt_change+0xde>
	if (!smp->local_dist && !smp->remote_dist) {
   33ade:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   33ae2:	2900      	cmp	r1, #0
   33ae4:	d0b7      	beq.n	33a56 <bt_smp_encrypt_change+0x4e>
}
   33ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   33aea:	079a      	lsls	r2, r3, #30
   33aec:	d501      	bpl.n	33af2 <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   33aee:	2108      	movs	r1, #8
   33af0:	e7e5      	b.n	33abe <bt_smp_encrypt_change+0xb6>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   33af2:	075b      	lsls	r3, r3, #29
   33af4:	d5e6      	bpl.n	33ac4 <bt_smp_encrypt_change+0xbc>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   33af6:	210a      	movs	r1, #10
   33af8:	e7e1      	b.n	33abe <bt_smp_encrypt_change+0xb6>
   33afa:	bf00      	nop
   33afc:	000544e5 	.word	0x000544e5

00033b00 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   33b00:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   33b02:	4b0a      	ldr	r3, [pc, #40]	; (33b2c <bt_smp_init+0x2c>)
   33b04:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   33b08:	f003 0306 	and.w	r3, r3, #6
   33b0c:	2b06      	cmp	r3, #6
   33b0e:	4b08      	ldr	r3, [pc, #32]	; (33b30 <bt_smp_init+0x30>)
   33b10:	bf0c      	ite	eq
   33b12:	2201      	moveq	r2, #1
   33b14:	2200      	movne	r2, #0
   33b16:	701a      	strb	r2, [r3, #0]
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
	if (IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) && !sc_supported) {
   33b18:	d104      	bne.n	33b24 <bt_smp_init+0x24>
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   33b1a:	4806      	ldr	r0, [pc, #24]	; (33b34 <bt_smp_init+0x34>)
   33b1c:	f7fb fd38 	bl	2f590 <bt_pub_key_gen>
	}

	return smp_self_test();
   33b20:	2000      	movs	r0, #0
}
   33b22:	bd08      	pop	{r3, pc}
		return -ENOENT;
   33b24:	f06f 0001 	mvn.w	r0, #1
   33b28:	e7fb      	b.n	33b22 <bt_smp_init+0x22>
   33b2a:	bf00      	nop
   33b2c:	20000000 	.word	0x20000000
   33b30:	20006d94 	.word	0x20006d94
   33b34:	2000067c 	.word	0x2000067c

00033b38 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   33b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33b3c:	4e1d      	ldr	r6, [pc, #116]	; (33bb4 <bt_keys_get_addr+0x7c>)
	int i;
	size_t first_free_slot = ARRAY_SIZE(key_pool);

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33b3e:	2500      	movs	r5, #0
{
   33b40:	4681      	mov	r9, r0
   33b42:	4688      	mov	r8, r1
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   33b44:	2406      	movs	r4, #6
   33b46:	4637      	mov	r7, r6

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   33b48:	46ab      	mov	fp, r5
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   33b4a:	7833      	ldrb	r3, [r6, #0]
   33b4c:	454b      	cmp	r3, r9
   33b4e:	ea4f 1a85 	mov.w	sl, r5, lsl #6
   33b52:	d020      	beq.n	33b96 <bt_keys_get_addr+0x5e>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   33b54:	2c06      	cmp	r4, #6
   33b56:	d10b      	bne.n	33b70 <bt_keys_get_addr+0x38>
	return memcmp(a, b, sizeof(*a));
   33b58:	2207      	movs	r2, #7
   33b5a:	4669      	mov	r1, sp
   33b5c:	1c70      	adds	r0, r6, #1
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   33b5e:	f8cd b000 	str.w	fp, [sp]
   33b62:	f8cd b003 	str.w	fp, [sp, #3]
   33b66:	f018 fbb1 	bl	4c2cc <memcmp>
			first_free_slot = i;
   33b6a:	2800      	cmp	r0, #0
   33b6c:	bf08      	it	eq
   33b6e:	462c      	moveq	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33b70:	3501      	adds	r5, #1
   33b72:	2d06      	cmp	r5, #6
   33b74:	f106 0640 	add.w	r6, r6, #64	; 0x40
   33b78:	d1e7      	bne.n	33b4a <bt_keys_get_addr+0x12>
			first_free_slot = oldest - &key_pool[0];
		}
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   33b7a:	2c06      	cmp	r4, #6
   33b7c:	d017      	beq.n	33bae <bt_keys_get_addr+0x76>
		keys = &key_pool[first_free_slot];
   33b7e:	01a4      	lsls	r4, r4, #6
   33b80:	eb07 0a04 	add.w	sl, r7, r4
		keys->id = id;
   33b84:	f807 9004 	strb.w	r9, [r7, r4]
		bt_addr_le_copy(&keys->addr, addr);
   33b88:	3401      	adds	r4, #1
	memcpy(dst, src, sizeof(*dst));
   33b8a:	2207      	movs	r2, #7
   33b8c:	4641      	mov	r1, r8
   33b8e:	1938      	adds	r0, r7, r4
   33b90:	f018 fbac 	bl	4c2ec <memcpy>
   33b94:	e007      	b.n	33ba6 <bt_keys_get_addr+0x6e>
	return memcmp(a, b, sizeof(*a));
   33b96:	2207      	movs	r2, #7
   33b98:	4641      	mov	r1, r8
   33b9a:	1c70      	adds	r0, r6, #1
   33b9c:	f018 fb96 	bl	4c2cc <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   33ba0:	2800      	cmp	r0, #0
   33ba2:	d1d7      	bne.n	33b54 <bt_keys_get_addr+0x1c>
		keys = &key_pool[i];
   33ba4:	44ba      	add	sl, r7
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   33ba6:	4650      	mov	r0, sl
   33ba8:	b003      	add	sp, #12
   33baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return NULL;
   33bae:	f04f 0a00 	mov.w	sl, #0
   33bb2:	e7f8      	b.n	33ba6 <bt_keys_get_addr+0x6e>
   33bb4:	2000426c 	.word	0x2000426c

00033bb8 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   33bb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   33bbc:	4c0c      	ldr	r4, [pc, #48]	; (33bf0 <bt_foreach_bond+0x38>)
   33bbe:	4606      	mov	r6, r0
   33bc0:	460f      	mov	r7, r1
   33bc2:	4690      	mov	r8, r2
   33bc4:	f504 75c0 	add.w	r5, r4, #384	; 0x180
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   33bc8:	89e3      	ldrh	r3, [r4, #14]
   33bca:	b153      	cbz	r3, 33be2 <bt_foreach_bond+0x2a>
   33bcc:	7823      	ldrb	r3, [r4, #0]
   33bce:	42b3      	cmp	r3, r6
   33bd0:	d107      	bne.n	33be2 <bt_foreach_bond+0x2a>
	memcpy(dst, src, sizeof(*dst));
   33bd2:	1c61      	adds	r1, r4, #1
   33bd4:	2207      	movs	r2, #7
   33bd6:	4668      	mov	r0, sp
   33bd8:	f018 fb88 	bl	4c2ec <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   33bdc:	4641      	mov	r1, r8
   33bde:	4668      	mov	r0, sp
   33be0:	47b8      	blx	r7
   33be2:	3440      	adds	r4, #64	; 0x40
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33be4:	42ac      	cmp	r4, r5
   33be6:	d1ef      	bne.n	33bc8 <bt_foreach_bond+0x10>
		}
	}
}
   33be8:	b002      	add	sp, #8
   33bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33bee:	bf00      	nop
   33bf0:	2000426c 	.word	0x2000426c

00033bf4 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   33bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33bf8:	4c08      	ldr	r4, [pc, #32]	; (33c1c <bt_keys_foreach+0x28>)
   33bfa:	4606      	mov	r6, r0
   33bfc:	460f      	mov	r7, r1
   33bfe:	4690      	mov	r8, r2
   33c00:	f504 75c0 	add.w	r5, r4, #384	; 0x180
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   33c04:	89e3      	ldrh	r3, [r4, #14]
   33c06:	4233      	tst	r3, r6
   33c08:	d002      	beq.n	33c10 <bt_keys_foreach+0x1c>
			func(&key_pool[i], data);
   33c0a:	4641      	mov	r1, r8
   33c0c:	4620      	mov	r0, r4
   33c0e:	47b8      	blx	r7
   33c10:	3440      	adds	r4, #64	; 0x40
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33c12:	42ac      	cmp	r4, r5
   33c14:	d1f6      	bne.n	33c04 <bt_keys_foreach+0x10>
		}
	}
}
   33c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33c1a:	bf00      	nop
   33c1c:	2000426c 	.word	0x2000426c

00033c20 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   33c20:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   33c22:	2200      	movs	r2, #0
   33c24:	4902      	ldr	r1, [pc, #8]	; (33c30 <keys_commit+0x10>)
   33c26:	2002      	movs	r0, #2
   33c28:	f7ff ffe4 	bl	33bf4 <bt_keys_foreach>
	}

	return 0;
}
   33c2c:	2000      	movs	r0, #0
   33c2e:	bd08      	pop	{r3, pc}
   33c30:	00050015 	.word	0x00050015

00033c34 <bt_keys_find>:
{
   33c34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33c38:	4e0f      	ldr	r6, [pc, #60]	; (33c78 <bt_keys_find+0x44>)
   33c3a:	4680      	mov	r8, r0
   33c3c:	4689      	mov	r9, r1
   33c3e:	4692      	mov	sl, r2
   33c40:	f506 77c0 	add.w	r7, r6, #384	; 0x180
   33c44:	4634      	mov	r4, r6
   33c46:	4635      	mov	r5, r6
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   33c48:	89e3      	ldrh	r3, [r4, #14]
   33c4a:	ea13 0f08 	tst.w	r3, r8
   33c4e:	d00e      	beq.n	33c6e <bt_keys_find+0x3a>
   33c50:	7823      	ldrb	r3, [r4, #0]
   33c52:	454b      	cmp	r3, r9
   33c54:	d10b      	bne.n	33c6e <bt_keys_find+0x3a>
	return memcmp(a, b, sizeof(*a));
   33c56:	2207      	movs	r2, #7
   33c58:	4651      	mov	r1, sl
   33c5a:	1c60      	adds	r0, r4, #1
   33c5c:	eba4 0b06 	sub.w	fp, r4, r6
   33c60:	f018 fb34 	bl	4c2cc <memcmp>
   33c64:	b918      	cbnz	r0, 33c6e <bt_keys_find+0x3a>
			return &key_pool[i];
   33c66:	eb05 000b 	add.w	r0, r5, fp
}
   33c6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c6e:	3440      	adds	r4, #64	; 0x40
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33c70:	42a7      	cmp	r7, r4
   33c72:	d1e9      	bne.n	33c48 <bt_keys_find+0x14>
	return NULL;
   33c74:	2000      	movs	r0, #0
   33c76:	e7f8      	b.n	33c6a <bt_keys_find+0x36>
   33c78:	2000426c 	.word	0x2000426c

00033c7c <bt_keys_find_irk>:
{
   33c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   33c80:	780b      	ldrb	r3, [r1, #0]
   33c82:	2b01      	cmp	r3, #1
   33c84:	4681      	mov	r9, r0
   33c86:	460e      	mov	r6, r1
   33c88:	d002      	beq.n	33c90 <bt_keys_find_irk+0x14>
		return NULL;
   33c8a:	2000      	movs	r0, #0
}
   33c8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   33c90:	798b      	ldrb	r3, [r1, #6]
   33c92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   33c96:	2b40      	cmp	r3, #64	; 0x40
   33c98:	d1f7      	bne.n	33c8a <bt_keys_find_irk+0xe>
   33c9a:	4d20      	ldr	r5, [pc, #128]	; (33d1c <bt_keys_find_irk+0xa0>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33c9c:	f04f 0800 	mov.w	r8, #0
	if (!bt_addr_le_is_rpa(addr)) {
   33ca0:	462f      	mov	r7, r5
   33ca2:	462c      	mov	r4, r5
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   33ca4:	f101 0a01 	add.w	sl, r1, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   33ca8:	89fb      	ldrh	r3, [r7, #14]
   33caa:	079a      	lsls	r2, r3, #30
   33cac:	d50e      	bpl.n	33ccc <bt_keys_find_irk+0x50>
		if (key_pool[i].id == id &&
   33cae:	783b      	ldrb	r3, [r7, #0]
   33cb0:	454b      	cmp	r3, r9
   33cb2:	d10b      	bne.n	33ccc <bt_keys_find_irk+0x50>
	return memcmp(a, b, sizeof(*a));
   33cb4:	2206      	movs	r2, #6
   33cb6:	f107 013a 	add.w	r1, r7, #58	; 0x3a
   33cba:	4650      	mov	r0, sl
   33cbc:	ea4f 1b88 	mov.w	fp, r8, lsl #6
   33cc0:	f018 fb04 	bl	4c2cc <memcmp>
   33cc4:	b910      	cbnz	r0, 33ccc <bt_keys_find_irk+0x50>
			return &key_pool[i];
   33cc6:	eb04 000b 	add.w	r0, r4, fp
   33cca:	e7df      	b.n	33c8c <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33ccc:	f108 0801 	add.w	r8, r8, #1
   33cd0:	f1b8 0f06 	cmp.w	r8, #6
   33cd4:	f107 0740 	add.w	r7, r7, #64	; 0x40
   33cd8:	d1e6      	bne.n	33ca8 <bt_keys_find_irk+0x2c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33cda:	2700      	movs	r7, #0
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   33cdc:	3601      	adds	r6, #1
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   33cde:	89eb      	ldrh	r3, [r5, #14]
   33ce0:	079b      	lsls	r3, r3, #30
   33ce2:	d514      	bpl.n	33d0e <bt_keys_find_irk+0x92>
		if (key_pool[i].id != id) {
   33ce4:	782b      	ldrb	r3, [r5, #0]
   33ce6:	454b      	cmp	r3, r9
   33ce8:	d111      	bne.n	33d0e <bt_keys_find_irk+0x92>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   33cea:	4631      	mov	r1, r6
   33cec:	f105 002a 	add.w	r0, r5, #42	; 0x2a
   33cf0:	ea4f 1887 	mov.w	r8, r7, lsl #6
   33cf4:	f018 fb56 	bl	4c3a4 <bt_rpa_irk_matches>
   33cf8:	b148      	cbz	r0, 33d0e <bt_keys_find_irk+0x92>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   33cfa:	f108 003a 	add.w	r0, r8, #58	; 0x3a
	memcpy(dst, src, sizeof(*dst));
   33cfe:	2206      	movs	r2, #6
   33d00:	4631      	mov	r1, r6
   33d02:	4420      	add	r0, r4
   33d04:	f018 faf2 	bl	4c2ec <memcpy>
			return &key_pool[i];
   33d08:	eb04 0008 	add.w	r0, r4, r8
   33d0c:	e7be      	b.n	33c8c <bt_keys_find_irk+0x10>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33d0e:	3701      	adds	r7, #1
   33d10:	2f06      	cmp	r7, #6
   33d12:	f105 0540 	add.w	r5, r5, #64	; 0x40
   33d16:	d1e2      	bne.n	33cde <bt_keys_find_irk+0x62>
   33d18:	e7b7      	b.n	33c8a <bt_keys_find_irk+0xe>
   33d1a:	bf00      	nop
   33d1c:	2000426c 	.word	0x2000426c

00033d20 <bt_keys_find_addr>:
{
   33d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   33d24:	4c0d      	ldr	r4, [pc, #52]	; (33d5c <bt_keys_find_addr+0x3c>)
   33d26:	4607      	mov	r7, r0
   33d28:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33d2a:	2600      	movs	r6, #0
   33d2c:	4625      	mov	r5, r4
		if (key_pool[i].id == id &&
   33d2e:	7823      	ldrb	r3, [r4, #0]
   33d30:	42bb      	cmp	r3, r7
   33d32:	d10b      	bne.n	33d4c <bt_keys_find_addr+0x2c>
	return memcmp(a, b, sizeof(*a));
   33d34:	2207      	movs	r2, #7
   33d36:	4641      	mov	r1, r8
   33d38:	1c60      	adds	r0, r4, #1
   33d3a:	ea4f 1986 	mov.w	r9, r6, lsl #6
   33d3e:	f018 fac5 	bl	4c2cc <memcmp>
   33d42:	b918      	cbnz	r0, 33d4c <bt_keys_find_addr+0x2c>
			return &key_pool[i];
   33d44:	eb05 0009 	add.w	r0, r5, r9
}
   33d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   33d4c:	3601      	adds	r6, #1
   33d4e:	2e06      	cmp	r6, #6
   33d50:	f104 0440 	add.w	r4, r4, #64	; 0x40
   33d54:	d1eb      	bne.n	33d2e <bt_keys_find_addr+0xe>
	return NULL;
   33d56:	2000      	movs	r0, #0
   33d58:	e7f6      	b.n	33d48 <bt_keys_find_addr+0x28>
   33d5a:	bf00      	nop
   33d5c:	2000426c 	.word	0x2000426c

00033d60 <bt_keys_clear>:
{
   33d60:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   33d62:	7a03      	ldrb	r3, [r0, #8]
   33d64:	075b      	lsls	r3, r3, #29
{
   33d66:	b08c      	sub	sp, #48	; 0x30
   33d68:	4605      	mov	r5, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   33d6a:	d501      	bpl.n	33d70 <bt_keys_clear+0x10>
		bt_id_del(keys);
   33d6c:	f7fa fd0a 	bl	2e784 <bt_id_del>
		if (keys->id) {
   33d70:	462c      	mov	r4, r5
   33d72:	f814 2b01 	ldrb.w	r2, [r4], #1
   33d76:	b1aa      	cbz	r2, 33da4 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
   33d78:	ae02      	add	r6, sp, #8
   33d7a:	2104      	movs	r1, #4
   33d7c:	4630      	mov	r0, r6
   33d7e:	f016 f8f9 	bl	49f74 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   33d82:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   33d84:	4623      	mov	r3, r4
   33d86:	4a08      	ldr	r2, [pc, #32]	; (33da8 <bt_keys_clear+0x48>)
   33d88:	2124      	movs	r1, #36	; 0x24
   33d8a:	a803      	add	r0, sp, #12
   33d8c:	f7f9 fbac 	bl	2d4e8 <bt_settings_encode_key>
		settings_delete(key);
   33d90:	a803      	add	r0, sp, #12
   33d92:	f016 ffa9 	bl	4ace8 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   33d96:	2240      	movs	r2, #64	; 0x40
   33d98:	2100      	movs	r1, #0
   33d9a:	4628      	mov	r0, r5
   33d9c:	f018 fab1 	bl	4c302 <memset>
}
   33da0:	b00c      	add	sp, #48	; 0x30
   33da2:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
   33da4:	9200      	str	r2, [sp, #0]
   33da6:	e7ed      	b.n	33d84 <bt_keys_clear+0x24>
   33da8:	00054522 	.word	0x00054522

00033dac <bt_keys_store>:
{
   33dac:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   33dae:	4604      	mov	r4, r0
{
   33db0:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   33db2:	f814 2b01 	ldrb.w	r2, [r4], #1
{
   33db6:	4605      	mov	r5, r0
	if (keys->id) {
   33db8:	b19a      	cbz	r2, 33de2 <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
   33dba:	ae02      	add	r6, sp, #8
   33dbc:	2104      	movs	r1, #4
   33dbe:	4630      	mov	r0, r6
   33dc0:	f016 f8d8 	bl	49f74 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   33dc4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   33dc6:	4623      	mov	r3, r4
   33dc8:	a803      	add	r0, sp, #12
   33dca:	4a07      	ldr	r2, [pc, #28]	; (33de8 <bt_keys_store+0x3c>)
   33dcc:	2124      	movs	r1, #36	; 0x24
   33dce:	f7f9 fb8b 	bl	2d4e8 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   33dd2:	2234      	movs	r2, #52	; 0x34
   33dd4:	f105 010c 	add.w	r1, r5, #12
   33dd8:	a803      	add	r0, sp, #12
   33dda:	f7f8 f8b3 	bl	2bf44 <settings_save_one>
}
   33dde:	b00c      	add	sp, #48	; 0x30
   33de0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   33de2:	9200      	str	r2, [sp, #0]
   33de4:	e7ef      	b.n	33dc6 <bt_keys_store+0x1a>
   33de6:	bf00      	nop
   33de8:	00054522 	.word	0x00054522

00033dec <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   33dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33df0:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   33df2:	1dc2      	adds	r2, r0, #7
   33df4:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   33df8:	1e67      	subs	r7, r4, #1
   33dfa:	b2bf      	uxth	r7, r7
	*mem_head = mem_pool;
   33dfc:	6018      	str	r0, [r3, #0]
{
   33dfe:	b082      	sub	sp, #8
   33e00:	4605      	mov	r5, r0
   33e02:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   33e04:	fb01 0007 	mla	r0, r1, r7, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   33e08:	8014      	strh	r4, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   33e0a:	2100      	movs	r1, #0
   33e0c:	2204      	movs	r2, #4
   33e0e:	f018 fa78 	bl	4c302 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   33e12:	b1b7      	cbz	r7, 33e42 <mem_init+0x56>
   33e14:	3c02      	subs	r4, #2
   33e16:	b2a4      	uxth	r4, r4
   33e18:	fb04 6306 	mla	r3, r4, r6, r6
   33e1c:	fb04 f706 	mul.w	r7, r4, r6
   33e20:	441d      	add	r5, r3
   33e22:	1aff      	subs	r7, r7, r3
   33e24:	f64f 78ff 	movw	r8, #65535	; 0xffff
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   33e28:	2204      	movs	r2, #4
	while (mem_count--) {
   33e2a:	3c01      	subs	r4, #1
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   33e2c:	19e8      	adds	r0, r5, r7
   33e2e:	eb0d 0102 	add.w	r1, sp, r2
	while (mem_count--) {
   33e32:	b2a4      	uxth	r4, r4
		next = (uint32_t)((uint8_t *) mem_pool +
   33e34:	9501      	str	r5, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   33e36:	f018 fa59 	bl	4c2ec <memcpy>
	while (mem_count--) {
   33e3a:	4544      	cmp	r4, r8
   33e3c:	eba5 0506 	sub.w	r5, r5, r6
   33e40:	d1f2      	bne.n	33e28 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   33e42:	b002      	add	sp, #8
   33e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00033e48 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   33e48:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   33e4a:	6804      	ldr	r4, [r0, #0]
{
   33e4c:	b082      	sub	sp, #8
	if (*mem_head) {
   33e4e:	b194      	cbz	r4, 33e76 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   33e50:	1de3      	adds	r3, r4, #7
   33e52:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   33e56:	2204      	movs	r2, #4
   33e58:	4605      	mov	r5, r0
   33e5a:	4621      	mov	r1, r4
   33e5c:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   33e60:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   33e62:	f018 fa43 	bl	4c2ec <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   33e66:	9b01      	ldr	r3, [sp, #4]
   33e68:	b123      	cbz	r3, 33e74 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   33e6a:	1dda      	adds	r2, r3, #7
   33e6c:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   33e70:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   33e72:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   33e74:	602b      	str	r3, [r5, #0]
		return mem;
	}

	return NULL;
}
   33e76:	4620      	mov	r0, r4
   33e78:	b002      	add	sp, #8
   33e7a:	bd70      	pop	{r4, r5, r6, pc}

00033e7c <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   33e7c:	680b      	ldr	r3, [r1, #0]
{
   33e7e:	b570      	push	{r4, r5, r6, lr}
   33e80:	460d      	mov	r5, r1
   33e82:	4606      	mov	r6, r0
	if (*mem_head) {
   33e84:	b183      	cbz	r3, 33ea8 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   33e86:	3307      	adds	r3, #7
   33e88:	f023 0303 	bic.w	r3, r3, #3
   33e8c:	881c      	ldrh	r4, [r3, #0]
   33e8e:	3401      	adds	r4, #1
   33e90:	b2a4      	uxth	r4, r4
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   33e92:	2204      	movs	r2, #4
   33e94:	4629      	mov	r1, r5
   33e96:	4630      	mov	r0, r6
   33e98:	f018 fa28 	bl	4c2ec <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   33e9c:	1df3      	adds	r3, r6, #7
   33e9e:	f023 0303 	bic.w	r3, r3, #3
   33ea2:	801c      	strh	r4, [r3, #0]

	*mem_head = mem;
   33ea4:	602e      	str	r6, [r5, #0]
}
   33ea6:	bd70      	pop	{r4, r5, r6, pc}
   33ea8:	2401      	movs	r4, #1
   33eaa:	e7f2      	b.n	33e92 <mem_release+0x16>

00033eac <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   33eac:	fb02 0001 	mla	r0, r2, r1, r0
   33eb0:	4770      	bx	lr
   33eb2:	bf00      	nop

00033eb4 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   33eb4:	1a40      	subs	r0, r0, r1
   33eb6:	b280      	uxth	r0, r0
}
   33eb8:	fbb0 f0f2 	udiv	r0, r0, r2
   33ebc:	4770      	bx	lr
   33ebe:	bf00      	nop

00033ec0 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   33ec0:	1e53      	subs	r3, r2, #1
	src += len;
   33ec2:	4411      	add	r1, r2
	while (len--) {
   33ec4:	b29b      	uxth	r3, r3
   33ec6:	b142      	cbz	r2, 33eda <mem_rcopy+0x1a>
   33ec8:	43db      	mvns	r3, r3
   33eca:	18ca      	adds	r2, r1, r3
   33ecc:	3801      	subs	r0, #1
		*dst++ = *--src;
   33ece:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   33ed2:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   33ed6:	4291      	cmp	r1, r2
   33ed8:	d1f9      	bne.n	33ece <mem_rcopy+0xe>
	}
}
   33eda:	4770      	bx	lr

00033edc <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   33edc:	4401      	add	r1, r0
   33ede:	e002      	b.n	33ee6 <mem_nz+0xa>
		if (*src++) {
   33ee0:	f810 3b01 	ldrb.w	r3, [r0], #1
   33ee4:	b91b      	cbnz	r3, 33eee <mem_nz+0x12>
	while (len--) {
   33ee6:	4288      	cmp	r0, r1
   33ee8:	d1fa      	bne.n	33ee0 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   33eea:	2000      	movs	r0, #0
   33eec:	4770      	bx	lr
			return 1;
   33eee:	2001      	movs	r0, #1
}
   33ef0:	4770      	bx	lr
   33ef2:	bf00      	nop

00033ef4 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   33ef4:	6010      	str	r0, [r2, #0]
   33ef6:	6008      	str	r0, [r1, #0]

	return link;
}
   33ef8:	4770      	bx	lr
   33efa:	bf00      	nop

00033efc <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   33efc:	6803      	ldr	r3, [r0, #0]
   33efe:	680a      	ldr	r2, [r1, #0]
   33f00:	4293      	cmp	r3, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   33f02:	bf09      	itett	eq
   33f04:	2200      	moveq	r2, #0
		return NULL;
   33f06:	2300      	movne	r3, #0
	*head = *tail = NULL;
   33f08:	600a      	streq	r2, [r1, #0]
   33f0a:	6002      	streq	r2, [r0, #0]

	return old_head;
}
   33f0c:	4618      	mov	r0, r3
   33f0e:	4770      	bx	lr

00033f10 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   33f10:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   33f12:	6814      	ldr	r4, [r2, #0]
   33f14:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   33f16:	6814      	ldr	r4, [r2, #0]
   33f18:	6061      	str	r1, [r4, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   33f1a:	6010      	str	r0, [r2, #0]

	return link;
}
   33f1c:	bc10      	pop	{r4}
   33f1e:	4770      	bx	lr

00033f20 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   33f20:	4288      	cmp	r0, r1
   33f22:	d003      	beq.n	33f2c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   33f24:	b11a      	cbz	r2, 33f2e <memq_peek+0xe>
		*mem = head->mem;
   33f26:	6843      	ldr	r3, [r0, #4]
   33f28:	6013      	str	r3, [r2, #0]
   33f2a:	4770      	bx	lr
		return NULL;
   33f2c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   33f2e:	4770      	bx	lr

00033f30 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   33f30:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   33f32:	4283      	cmp	r3, r0
   33f34:	d009      	beq.n	33f4a <memq_dequeue+0x1a>
	if (mem) {
   33f36:	b12a      	cbz	r2, 33f44 <memq_dequeue+0x14>
		*mem = head->mem;
   33f38:	6858      	ldr	r0, [r3, #4]
   33f3a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   33f3c:	681a      	ldr	r2, [r3, #0]
   33f3e:	600a      	str	r2, [r1, #0]

	return old_head;
}
   33f40:	4618      	mov	r0, r3
   33f42:	4770      	bx	lr
	if (old_head == NULL) {
   33f44:	2b00      	cmp	r3, #0
   33f46:	d1f9      	bne.n	33f3c <memq_dequeue+0xc>
   33f48:	e7fa      	b.n	33f40 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   33f4a:	2300      	movs	r3, #0
   33f4c:	e7f8      	b.n	33f40 <memq_dequeue+0x10>
   33f4e:	bf00      	nop

00033f50 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   33f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33f54:	4e0c      	ldr	r6, [pc, #48]	; (33f88 <mayfly_init+0x38>)
   33f56:	4f0d      	ldr	r7, [pc, #52]	; (33f8c <mayfly_init+0x3c>)
   33f58:	f1a6 08c0 	sub.w	r8, r6, #192	; 0xc0
   33f5c:	f106 0430 	add.w	r4, r6, #48	; 0x30
   33f60:	463d      	mov	r5, r7
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(&mfl[callee_id][caller_id],
   33f62:	1d22      	adds	r2, r4, #4
   33f64:	4621      	mov	r1, r4
   33f66:	4628      	mov	r0, r5
   33f68:	3c0c      	subs	r4, #12
   33f6a:	f7ff ffc3 	bl	33ef4 <memq_init>
		while (caller_id--) {
   33f6e:	42b4      	cmp	r4, r6
   33f70:	f1a5 0508 	sub.w	r5, r5, #8
   33f74:	d1f5      	bne.n	33f62 <mayfly_init+0x12>
   33f76:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (callee_id--) {
   33f7a:	4546      	cmp	r6, r8
   33f7c:	f1a7 0720 	sub.w	r7, r7, #32
   33f80:	d1ec      	bne.n	33f5c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   33f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33f86:	bf00      	nop
   33f88:	200044f4 	.word	0x200044f4
   33f8c:	20004464 	.word	0x20004464

00033f90 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   33f90:	b430      	push	{r4, r5}
   33f92:	4603      	mov	r3, r0
   33f94:	460c      	mov	r4, r1
	if (enable) {
   33f96:	b19a      	cbz	r2, 33fc0 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   33f98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   33f9c:	0108      	lsls	r0, r1, #4
   33f9e:	4d14      	ldr	r5, [pc, #80]	; (33ff0 <mayfly_enable+0x60>)
   33fa0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   33fa4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   33fa8:	4429      	add	r1, r5
   33faa:	7a48      	ldrb	r0, [r1, #9]
   33fac:	7a0d      	ldrb	r5, [r1, #8]
   33fae:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   33fb0:	bf04      	itt	eq
   33fb2:	3001      	addeq	r0, #1
   33fb4:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   33fb6:	4621      	mov	r1, r4
   33fb8:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   33fba:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
   33fbc:	f00f bdb6 	b.w	43b2c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   33fc0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   33fc4:	0112      	lsls	r2, r2, #4
   33fc6:	4d0a      	ldr	r5, [pc, #40]	; (33ff0 <mayfly_enable+0x60>)
   33fc8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   33fcc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   33fd0:	442b      	add	r3, r5
   33fd2:	7a9d      	ldrb	r5, [r3, #10]
   33fd4:	7ada      	ldrb	r2, [r3, #11]
   33fd6:	42aa      	cmp	r2, r5
   33fd8:	d001      	beq.n	33fde <mayfly_enable+0x4e>
}
   33fda:	bc30      	pop	{r4, r5}
   33fdc:	4770      	bx	lr
			mfp[callee_id] = 1U;
   33fde:	4d05      	ldr	r5, [pc, #20]	; (33ff4 <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
   33fe0:	3201      	adds	r2, #1
   33fe2:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   33fe4:	2301      	movs	r3, #1
   33fe6:	546b      	strb	r3, [r5, r1]
}
   33fe8:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
   33fea:	f00f bdf5 	b.w	43bd8 <mayfly_pend>
   33fee:	bf00      	nop
   33ff0:	20004470 	.word	0x20004470
   33ff4:	2000446c 	.word	0x2000446c

00033ff8 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   33ff8:	b570      	push	{r4, r5, r6, lr}
   33ffa:	461c      	mov	r4, r3
   33ffc:	4606      	mov	r6, r0
   33ffe:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   34000:	b15a      	cbz	r2, 3401a <mayfly_enqueue+0x22>
   34002:	7861      	ldrb	r1, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   34004:	7820      	ldrb	r0, [r4, #0]
   34006:	1a40      	subs	r0, r0, r1
	if (state != 0U) {
   34008:	f010 0003 	ands.w	r0, r0, #3
   3400c:	d029      	beq.n	34062 <mayfly_enqueue+0x6a>
		if (chain) {
			if (state != 1U) {
   3400e:	2801      	cmp	r0, #1
   34010:	d026      	beq.n	34060 <mayfly_enqueue+0x68>
				/* mark as ready in queue */
				m->_req = ack + 1;
   34012:	3101      	adds	r1, #1
   34014:	b2c9      	uxtb	r1, r1
   34016:	7021      	strb	r1, [r4, #0]

				goto mayfly_enqueue_pend;
   34018:	e033      	b.n	34082 <mayfly_enqueue+0x8a>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   3401a:	f00f fdc7 	bl	43bac <mayfly_prio_is_equal>
   3401e:	2800      	cmp	r0, #0
   34020:	d0ef      	beq.n	34002 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   34022:	4629      	mov	r1, r5
   34024:	4630      	mov	r0, r6
   34026:	f00f fda1 	bl	43b6c <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   3402a:	2800      	cmp	r0, #0
   3402c:	d0e9      	beq.n	34002 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   3402e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   34032:	011a      	lsls	r2, r3, #4
   34034:	4817      	ldr	r0, [pc, #92]	; (34094 <mayfly_enqueue+0x9c>)
   34036:	7861      	ldrb	r1, [r4, #1]
   34038:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   3403c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   34040:	4403      	add	r3, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
   34042:	7a9a      	ldrb	r2, [r3, #10]
   34044:	7adb      	ldrb	r3, [r3, #11]
   34046:	429a      	cmp	r2, r3
   34048:	d1dc      	bne.n	34004 <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
   3404a:	7823      	ldrb	r3, [r4, #0]
   3404c:	1a5b      	subs	r3, r3, r1
	if (state != 0U) {
   3404e:	079b      	lsls	r3, r3, #30
   34050:	d002      	beq.n	34058 <mayfly_enqueue+0x60>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
   34052:	3102      	adds	r1, #2
   34054:	b2c9      	uxtb	r1, r1
   34056:	7021      	strb	r1, [r4, #0]
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
		/* call fp */
		m->fp(m->param);
   34058:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   3405c:	4798      	blx	r3

		return 0;
   3405e:	2000      	movs	r0, #0

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);

	return 0;
}
   34060:	bd70      	pop	{r4, r5, r6, pc}
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   34062:	2304      	movs	r3, #4
   34064:	2230      	movs	r2, #48	; 0x30
   34066:	fb12 3205 	smlabb	r2, r2, r5, r3
   3406a:	230c      	movs	r3, #12
   3406c:	fb13 2306 	smlabb	r3, r3, r6, r2
	m->_req = ack + 1;
   34070:	3101      	adds	r1, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   34072:	4a08      	ldr	r2, [pc, #32]	; (34094 <mayfly_enqueue+0x9c>)
   34074:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
   34076:	b2c9      	uxtb	r1, r1
   34078:	7021      	strb	r1, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   3407a:	441a      	add	r2, r3
   3407c:	4621      	mov	r1, r4
   3407e:	f7ff ff47 	bl	33f10 <memq_enqueue>
	mfp[callee_id] = 1U;
   34082:	4b05      	ldr	r3, [pc, #20]	; (34098 <mayfly_enqueue+0xa0>)
	mayfly_pend(caller_id, callee_id);
   34084:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   34086:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
   34088:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
   3408a:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   3408c:	f00f fda4 	bl	43bd8 <mayfly_pend>
	return 0;
   34090:	2000      	movs	r0, #0
}
   34092:	bd70      	pop	{r4, r5, r6, pc}
   34094:	20004470 	.word	0x20004470
   34098:	2000446c 	.word	0x2000446c

0003409c <mayfly_run>:
		}
	}
}

void mayfly_run(uint8_t callee_id)
{
   3409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   340a0:	4c4b      	ldr	r4, [pc, #300]	; (341d0 <mayfly_run+0x134>)
   340a2:	5c23      	ldrb	r3, [r4, r0]
{
   340a4:	b087      	sub	sp, #28
	if (!mfp[callee_id]) {
   340a6:	2b00      	cmp	r3, #0
   340a8:	d071      	beq.n	3418e <mayfly_run+0xf2>
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   340aa:	4f4a      	ldr	r7, [pc, #296]	; (341d4 <mayfly_run+0x138>)
   340ac:	233c      	movs	r3, #60	; 0x3c
		return;
	}
	mfp[callee_id] = 0U;
   340ae:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   340b0:	fb03 7300 	mla	r3, r3, r0, r7
   340b4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   340b8:	3304      	adds	r3, #4
	mfp[callee_id] = 0U;
   340ba:	5422      	strb	r2, [r4, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   340bc:	4682      	mov	sl, r0
	uint8_t enable = 0U;
   340be:	9203      	str	r2, [sp, #12]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   340c0:	9301      	str	r3, [sp, #4]
   340c2:	eb07 1701 	add.w	r7, r7, r1, lsl #4
	uint8_t disable = 0U;
   340c6:	9202      	str	r2, [sp, #8]
	while (caller_id--) {
   340c8:	f04f 0903 	mov.w	r9, #3
		memq_link_t *link;
		struct mayfly *m = 0;
   340cc:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   340ce:	aa05      	add	r2, sp, #20
   340d0:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
		struct mayfly *m = 0;
   340d4:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   340d6:	f7ff ff23 	bl	33f20 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   340da:	f107 0824 	add.w	r8, r7, #36	; 0x24
   340de:	4683      	mov	fp, r0
   340e0:	2800      	cmp	r0, #0
   340e2:	d033      	beq.n	3414c <mayfly_run+0xb0>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   340e4:	9c05      	ldr	r4, [sp, #20]
   340e6:	7825      	ldrb	r5, [r4, #0]
   340e8:	7863      	ldrb	r3, [r4, #1]
   340ea:	1aed      	subs	r5, r5, r3
   340ec:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   340f0:	2d01      	cmp	r5, #1
   340f2:	d106      	bne.n	34102 <mayfly_run+0x66>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   340f4:	3b01      	subs	r3, #1
   340f6:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   340f8:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   340fc:	4798      	blx	r3
   340fe:	9c05      	ldr	r4, [sp, #20]
   34100:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   34102:	7826      	ldrb	r6, [r4, #0]
   34104:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
   34108:	b2f6      	uxtb	r6, r6
	if (((req - m->_ack) & 0x03) != 1U) {
   3410a:	1af3      	subs	r3, r6, r3
   3410c:	f003 0303 	and.w	r3, r3, #3
   34110:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   34112:	f04f 0200 	mov.w	r2, #0
   34116:	4641      	mov	r1, r8
   34118:	4660      	mov	r0, ip
	if (((req - m->_ack) & 0x03) != 1U) {
   3411a:	d00d      	beq.n	34138 <mayfly_run+0x9c>
		memq_dequeue(mft[callee_id][caller_id].tail,
   3411c:	f7ff ff08 	bl	33f30 <memq_dequeue>
		ack = m->_ack;
   34120:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   34122:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   34124:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   34128:	1a9b      	subs	r3, r3, r2
   3412a:	f003 0303 	and.w	r3, r3, #3
   3412e:	2b01      	cmp	r3, #1
		m->_ack = req;
   34130:	7066      	strb	r6, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   34132:	d03f      	beq.n	341b4 <mayfly_run+0x118>
   34134:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   34138:	6a78      	ldr	r0, [r7, #36]	; 0x24
   3413a:	4661      	mov	r1, ip
   3413c:	aa05      	add	r2, sp, #20
   3413e:	f7ff feef 	bl	33f20 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   34142:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   34144:	4683      	mov	fp, r0
			if (state == 1U) {
   34146:	d025      	beq.n	34194 <mayfly_run+0xf8>
		while (link) {
   34148:	2800      	cmp	r0, #0
   3414a:	d1cb      	bne.n	340e4 <mayfly_run+0x48>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   3414c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   34150:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   34154:	429a      	cmp	r2, r3
   34156:	d003      	beq.n	34160 <mayfly_run+0xc4>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   34158:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   3415c:	2301      	movs	r3, #1
   3415e:	9302      	str	r3, [sp, #8]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   34160:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   34164:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   34168:	429a      	cmp	r2, r3
   3416a:	d003      	beq.n	34174 <mayfly_run+0xd8>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   3416c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   34170:	2301      	movs	r3, #1
   34172:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   34174:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   34178:	fa5f f989 	uxtb.w	r9, r9
   3417c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   34180:	f1a7 070c 	sub.w	r7, r7, #12
   34184:	d1a2      	bne.n	340cc <mayfly_run+0x30>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   34186:	9b02      	ldr	r3, [sp, #8]
   34188:	b10b      	cbz	r3, 3418e <mayfly_run+0xf2>
   3418a:	9b03      	ldr	r3, [sp, #12]
   3418c:	b1cb      	cbz	r3, 341c2 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
   3418e:	b007      	add	sp, #28
   34190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (caller_id || link) {
   34194:	f1b9 0f00 	cmp.w	r9, #0
   34198:	d101      	bne.n	3419e <mayfly_run+0x102>
   3419a:	2800      	cmp	r0, #0
   3419c:	d0d6      	beq.n	3414c <mayfly_run+0xb0>
					mfp[callee_id] = 1U;
   3419e:	4a0c      	ldr	r2, [pc, #48]	; (341d0 <mayfly_run+0x134>)
   341a0:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
   341a2:	4651      	mov	r1, sl
   341a4:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
   341a6:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   341aa:	f00f fd15 	bl	43bd8 <mayfly_pend>
}
   341ae:	b007      	add	sp, #28
   341b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
   341b4:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   341b6:	4621      	mov	r1, r4
   341b8:	4658      	mov	r0, fp
   341ba:	9a01      	ldr	r2, [sp, #4]
   341bc:	f7ff fea8 	bl	33f10 <memq_enqueue>
   341c0:	e7b8      	b.n	34134 <mayfly_run+0x98>
		mayfly_enable_cb(callee_id, callee_id, 0);
   341c2:	461a      	mov	r2, r3
   341c4:	4651      	mov	r1, sl
   341c6:	4650      	mov	r0, sl
   341c8:	f00f fcb0 	bl	43b2c <mayfly_enable_cb>
   341cc:	e7df      	b.n	3418e <mayfly_run+0xf2>
   341ce:	bf00      	nop
   341d0:	2000446c 	.word	0x2000446c
   341d4:	20004470 	.word	0x20004470

000341d8 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   341d8:	b189      	cbz	r1, 341fe <util_ones_count_get+0x26>
   341da:	1e4b      	subs	r3, r1, #1
   341dc:	b2db      	uxtb	r3, r3
{
   341de:	b410      	push	{r4}
   341e0:	1e41      	subs	r1, r0, #1
   341e2:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
   341e4:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   341e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   341ea:	b123      	cbz	r3, 341f6 <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   341ec:	1e5a      	subs	r2, r3, #1
			one_count++;
   341ee:	3001      	adds	r0, #1
		while (bite) {
   341f0:	4013      	ands	r3, r2
			one_count++;
   341f2:	b2c0      	uxtb	r0, r0
		while (bite) {
   341f4:	d1fa      	bne.n	341ec <util_ones_count_get+0x14>
	while (octets_len--) {
   341f6:	42a1      	cmp	r1, r4
   341f8:	d1f5      	bne.n	341e6 <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
   341fa:	bc10      	pop	{r4}
   341fc:	4770      	bx	lr
	uint8_t one_count = 0U;
   341fe:	4608      	mov	r0, r1
}
   34200:	4770      	bx	lr
   34202:	bf00      	nop

00034204 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   34204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   34208:	4d4d      	ldr	r5, [pc, #308]	; (34340 <util_aa_le32+0x13c>)
{
   3420a:	b083      	sub	sp, #12
   3420c:	4606      	mov	r6, r0
   3420e:	2703      	movs	r7, #3
	consecutive_cnt = 1U;
   34210:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   34212:	2104      	movs	r1, #4
   34214:	4630      	mov	r0, r6
   34216:	f00c fc25 	bl	40a64 <lll_csrand_get>
   3421a:	78f1      	ldrb	r1, [r6, #3]
   3421c:	78b3      	ldrb	r3, [r6, #2]
   3421e:	7872      	ldrb	r2, [r6, #1]
   34220:	7830      	ldrb	r0, [r6, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   34222:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   34226:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   3422a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
	consecutive_bit = (aa >> bit_idx) & 0x01;
   3422e:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
   34232:	231e      	movs	r3, #30
	transitions = 0U;
   34234:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
   34238:	f04f 0901 	mov.w	r9, #1
   3423c:	e00d      	b.n	3425a <util_aa_le32+0x56>
			transitions++;
   3423e:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
   34242:	2b1b      	cmp	r3, #27
			transitions++;
   34244:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
   34246:	d967      	bls.n	34318 <util_aa_le32+0x114>
				consecutive_cnt = 1U;
   34248:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
   3424c:	2919      	cmp	r1, #25
   3424e:	d04e      	beq.n	342ee <util_aa_le32+0xea>
   34250:	468e      	mov	lr, r1
   34252:	4694      	mov	ip, r2
	while (bit_idx--) {
   34254:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   34258:	d31f      	bcc.n	3429a <util_aa_le32+0x96>
		bit = (aa >> bit_idx) & 0x01;
   3425a:	fa20 f203 	lsr.w	r2, r0, r3
   3425e:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   34262:	4562      	cmp	r2, ip
   34264:	d1eb      	bne.n	3423e <util_aa_le32+0x3a>
			consecutive_cnt++;
   34266:	f109 0801 	add.w	r8, r9, #1
   3426a:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
   3426e:	f1b8 0f06 	cmp.w	r8, #6
   34272:	d90d      	bls.n	34290 <util_aa_le32+0x8c>
   34274:	4671      	mov	r1, lr
			if (consecutive_bit) {
   34276:	fa04 fc03 	lsl.w	ip, r4, r3
   3427a:	b39a      	cbz	r2, 342e4 <util_aa_le32+0xe0>
				aa &= ~BIT(bit_idx);
   3427c:	ea20 000c 	bic.w	r0, r0, ip
				consecutive_bit = 0U;
   34280:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
   34284:	458e      	cmp	lr, r1
   34286:	d1e5      	bne.n	34254 <util_aa_le32+0x50>
				transitions++;
   34288:	3101      	adds	r1, #1
   3428a:	b2c9      	uxtb	r1, r1
   3428c:	4662      	mov	r2, ip
   3428e:	e7db      	b.n	34248 <util_aa_le32+0x44>
		if ((consecutive_cnt > 6) ||
   34290:	d148      	bne.n	34324 <util_aa_le32+0x120>
		     (((bit_idx < 29) && (transitions < 1)) ||
   34292:	46c1      	mov	r9, r8
	while (bit_idx--) {
   34294:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   34298:	d2df      	bcs.n	3425a <util_aa_le32+0x56>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   3429a:	ea80 0305 	eor.w	r3, r0, r5
   3429e:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   342a0:	f10d 0c04 	add.w	ip, sp, #4
   342a4:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   342a8:	2200      	movs	r2, #0
		bite = *octets;
   342aa:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   342ae:	b123      	cbz	r3, 342ba <util_aa_le32+0xb6>
			bite &= (bite - 1);
   342b0:	1e59      	subs	r1, r3, #1
			one_count++;
   342b2:	3201      	adds	r2, #1
		while (bite) {
   342b4:	400b      	ands	r3, r1
			one_count++;
   342b6:	b2d2      	uxtb	r2, r2
		while (bite) {
   342b8:	d1fa      	bne.n	342b0 <util_aa_le32+0xac>
	while (octets_len--) {
   342ba:	45e6      	cmp	lr, ip
   342bc:	d1f5      	bne.n	342aa <util_aa_le32+0xa6>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   342be:	2a01      	cmp	r2, #1
   342c0:	d907      	bls.n	342d2 <util_aa_le32+0xce>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   342c2:	0c03      	lsrs	r3, r0, #16
   342c4:	b282      	uxth	r2, r0
   342c6:	429a      	cmp	r2, r3
   342c8:	d11b      	bne.n	34302 <util_aa_le32+0xfe>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   342ca:	b2c2      	uxtb	r2, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   342cc:	ebb2 6f10 	cmp.w	r2, r0, lsr #24
   342d0:	d117      	bne.n	34302 <util_aa_le32+0xfe>
	if (!retry) {
   342d2:	3f01      	subs	r7, #1
   342d4:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   342d8:	d19b      	bne.n	34212 <util_aa_le32+0xe>
		return -EFAULT;
   342da:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   342de:	b003      	add	sp, #12
   342e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
   342e4:	ea40 000c 	orr.w	r0, r0, ip
				consecutive_bit = 1U;
   342e8:	f04f 0c01 	mov.w	ip, #1
   342ec:	e7ca      	b.n	34284 <util_aa_le32+0x80>
			if (consecutive_bit) {
   342ee:	3301      	adds	r3, #1
   342f0:	fa04 f303 	lsl.w	r3, r4, r3
   342f4:	b112      	cbz	r2, 342fc <util_aa_le32+0xf8>
				aa &= ~(BIT(bit_idx + 1) - 1);
   342f6:	425b      	negs	r3, r3
   342f8:	4018      	ands	r0, r3
   342fa:	e7ce      	b.n	3429a <util_aa_le32+0x96>
				aa |= (BIT(bit_idx + 1) - 1);
   342fc:	3b01      	subs	r3, #1
   342fe:	4318      	orrs	r0, r3
   34300:	e7cb      	b.n	3429a <util_aa_le32+0x96>
	dst[1] = val >> 8;
   34302:	f3c0 2107 	ubfx	r1, r0, #8, #8
   34306:	0a1a      	lsrs	r2, r3, #8
	dst[0] = val;
   34308:	7030      	strb	r0, [r6, #0]
	return 0;
   3430a:	2000      	movs	r0, #0
	dst[1] = val >> 8;
   3430c:	7071      	strb	r1, [r6, #1]
	dst[0] = val;
   3430e:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
   34310:	70f2      	strb	r2, [r6, #3]
}
   34312:	b003      	add	sp, #12
   34314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
   34318:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
   3431c:	2901      	cmp	r1, #1
   3431e:	d9aa      	bls.n	34276 <util_aa_le32+0x72>
   34320:	46c1      	mov	r9, r8
   34322:	e793      	b.n	3424c <util_aa_le32+0x48>
		    ((consecutive_cnt < 6) &&
   34324:	2b1c      	cmp	r3, #28
   34326:	d904      	bls.n	34332 <util_aa_le32+0x12e>
		     (((bit_idx < 29) && (transitions < 1)) ||
   34328:	2b1b      	cmp	r3, #27
   3432a:	d906      	bls.n	3433a <util_aa_le32+0x136>
   3432c:	4694      	mov	ip, r2
   3432e:	46c1      	mov	r9, r8
   34330:	e7b0      	b.n	34294 <util_aa_le32+0x90>
   34332:	f1be 0f00 	cmp.w	lr, #0
   34336:	d09d      	beq.n	34274 <util_aa_le32+0x70>
   34338:	e7f6      	b.n	34328 <util_aa_le32+0x124>
   3433a:	4671      	mov	r1, lr
   3433c:	e7ee      	b.n	3431c <util_aa_le32+0x118>
   3433e:	bf00      	nop
   34340:	8e89bed6 	.word	0x8e89bed6

00034344 <ticker_dequeue.isra.2>:
 *
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
   34344:	b4f0      	push	{r4, r5, r6, r7}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   34346:	780f      	ldrb	r7, [r1, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   34348:	2fff      	cmp	r7, #255	; 0xff
   3434a:	d015      	beq.n	34378 <ticker_dequeue.isra.2+0x34>
		ticker_current = &node[current];
   3434c:	b23b      	sxth	r3, r7
   3434e:	eb03 0443 	add.w	r4, r3, r3, lsl #1

		if (current == id) {
   34352:	4297      	cmp	r7, r2
		ticker_current = &node[current];
   34354:	eb00 1404 	add.w	r4, r0, r4, lsl #4
	total = 0U;
   34358:	f04f 0500 	mov.w	r5, #0
		if (current == id) {
   3435c:	d103      	bne.n	34366 <ticker_dequeue.isra.2+0x22>
   3435e:	e024      	b.n	343aa <ticker_dequeue.isra.2+0x66>
   34360:	429a      	cmp	r2, r3
   34362:	d00c      	beq.n	3437e <ticker_dequeue.isra.2+0x3a>
   34364:	461f      	mov	r7, r3
			break;
		}

		total += ticker_current->ticks_to_expire;
		previous = current;
		current = ticker_current->next;
   34366:	7823      	ldrb	r3, [r4, #0]
		total += ticker_current->ticks_to_expire;
   34368:	68a6      	ldr	r6, [r4, #8]
	while (current != TICKER_NULL) {
   3436a:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   3436c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   34370:	4435      	add	r5, r6
		ticker_current = &node[current];
   34372:	eb00 1404 	add.w	r4, r0, r4, lsl #4
	while (current != TICKER_NULL) {
   34376:	d1f3      	bne.n	34360 <ticker_dequeue.isra.2+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   34378:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   3437a:	bcf0      	pop	{r4, r5, r6, r7}
   3437c:	4770      	bx	lr
	if (previous == current) {
   3437e:	42ba      	cmp	r2, r7
   34380:	d012      	beq.n	343a8 <ticker_dequeue.isra.2+0x64>
   34382:	b23b      	sxth	r3, r7
	node[previous].next = ticker_current->next;
   34384:	7822      	ldrb	r2, [r4, #0]
	timeout = ticker_current->ticks_to_expire;
   34386:	68a1      	ldr	r1, [r4, #8]
	node[previous].next = ticker_current->next;
   34388:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   3438c:	011b      	lsls	r3, r3, #4
	if (ticker_current->next != TICKER_NULL) {
   3438e:	2aff      	cmp	r2, #255	; 0xff
	node[previous].next = ticker_current->next;
   34390:	54c2      	strb	r2, [r0, r3]
	if (ticker_current->next != TICKER_NULL) {
   34392:	d006      	beq.n	343a2 <ticker_dequeue.isra.2+0x5e>
		node[ticker_current->next].ticks_to_expire += timeout;
   34394:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   34398:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   3439c:	6883      	ldr	r3, [r0, #8]
   3439e:	440b      	add	r3, r1
   343a0:	6083      	str	r3, [r0, #8]
	return (total + timeout);
   343a2:	1948      	adds	r0, r1, r5
}
   343a4:	bcf0      	pop	{r4, r5, r6, r7}
   343a6:	4770      	bx	lr
   343a8:	b213      	sxth	r3, r2
		instance->ticker_id_head = ticker_current->next;
   343aa:	7822      	ldrb	r2, [r4, #0]
   343ac:	700a      	strb	r2, [r1, #0]
   343ae:	e7e9      	b.n	34384 <ticker_dequeue.isra.2+0x40>

000343b0 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
   343b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   343b4:	b08f      	sub	sp, #60	; 0x3c
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
   343b6:	7f82      	ldrb	r2, [r0, #30]
   343b8:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   343ba:	2301      	movs	r3, #1
   343bc:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   343be:	2a00      	cmp	r2, #0
   343c0:	d15f      	bne.n	34482 <ticker_worker+0xd2>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
   343c2:	7f43      	ldrb	r3, [r0, #29]
   343c4:	2bff      	cmp	r3, #255	; 0xff
   343c6:	d05b      	beq.n	34480 <ticker_worker+0xd0>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   343c8:	4604      	mov	r4, r0
   343ca:	9002      	str	r0, [sp, #8]
   343cc:	f00e fe72 	bl	430b4 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   343d0:	6963      	ldr	r3, [r4, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   343d2:	7f22      	ldrb	r2, [r4, #28]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   343d4:	1ac0      	subs	r0, r0, r3
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   343d6:	2aff      	cmp	r2, #255	; 0xff
   343d8:	4621      	mov	r1, r4
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   343da:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
	ticker_id_head = instance->ticker_id_head;
   343de:	7f64      	ldrb	r4, [r4, #29]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   343e0:	f000 8154 	beq.w	3468c <ticker_worker+0x2dc>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   343e4:	698b      	ldr	r3, [r1, #24]
	uint8_t slot_reserved = 0;
   343e6:	454b      	cmp	r3, r9
   343e8:	bf94      	ite	ls
   343ea:	2300      	movls	r3, #0
   343ec:	2301      	movhi	r3, #1
   343ee:	9304      	str	r3, [sp, #16]
	node = &instance->nodes[0];
   343f0:	9b02      	ldr	r3, [sp, #8]
	while (ticker_id_head != TICKER_NULL) {
   343f2:	2cff      	cmp	r4, #255	; 0xff
	node = &instance->nodes[0];
   343f4:	681f      	ldr	r7, [r3, #0]
	while (ticker_id_head != TICKER_NULL) {
   343f6:	f000 8164 	beq.w	346c2 <ticker_worker+0x312>
		ticker = &node[ticker_id_head];
   343fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   343fe:	eb07 1b04 	add.w	fp, r7, r4, lsl #4
	ticks_expired = 0U;
   34402:	f04f 0800 	mov.w	r8, #0
		ticks_to_expire = ticker->ticks_to_expire;
   34406:	f8db 2008 	ldr.w	r2, [fp, #8]
		if (ticks_elapsed < ticks_to_expire) {
   3440a:	4591      	cmp	r9, r2
   3440c:	d349      	bcc.n	344a2 <ticker_worker+0xf2>
   3440e:	46ba      	mov	sl, r7
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   34410:	f89b 0002 	ldrb.w	r0, [fp, #2]
   34414:	f89b 3001 	ldrb.w	r3, [fp, #1]
		ticker_id_head = ticker->next;
   34418:	f89b 4000 	ldrb.w	r4, [fp]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   3441c:	1a1b      	subs	r3, r3, r0
   3441e:	b2db      	uxtb	r3, r3
   34420:	2b01      	cmp	r3, #1
		ticks_elapsed -= ticks_to_expire;
   34422:	eba9 0902 	sub.w	r9, r9, r2
		ticks_expired += ticks_to_expire;
   34426:	4490      	add	r8, r2
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   34428:	d131      	bne.n	3448e <ticker_worker+0xde>
		if (ticker->ticks_slot != 0U &&
   3442a:	f8db c018 	ldr.w	ip, [fp, #24]
   3442e:	f1bc 0f00 	cmp.w	ip, #0
   34432:	d05d      	beq.n	344f0 <ticker_worker+0x140>
   34434:	9b04      	ldr	r3, [sp, #16]
   34436:	2b00      	cmp	r3, #0
   34438:	f000 80a6 	beq.w	34588 <ticker_worker+0x1d8>
   3443c:	f8bb 301e 	ldrh.w	r3, [fp, #30]
   34440:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   34442:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
			if (ext_data &&
   34446:	b13b      	cbz	r3, 34458 <ticker_worker+0xa8>
   34448:	681a      	ldr	r2, [r3, #0]
   3444a:	b11a      	cbz	r2, 34454 <ticker_worker+0xa4>
			    ext_data->ticks_slot_window != 0U &&
   3444c:	7a1a      	ldrb	r2, [r3, #8]
   3444e:	2a00      	cmp	r2, #0
   34450:	f000 810a 	beq.w	34668 <ticker_worker+0x2b8>
				ext_data->reschedule_state =
   34454:	2200      	movs	r2, #0
   34456:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   34458:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   3445a:	f89b 102c 	ldrb.w	r1, [fp, #44]	; 0x2c
			ticker->lazy_current++;
   3445e:	3201      	adds	r2, #1
   34460:	b292      	uxth	r2, r2
   34462:	f8ab 201e 	strh.w	r2, [fp, #30]
			if ((ticker->must_expire == 0U) ||
   34466:	b179      	cbz	r1, 34488 <ticker_worker+0xd8>
   34468:	f8bb 101c 	ldrh.w	r1, [fp, #28]
   3446c:	4291      	cmp	r1, r2
   3446e:	d20b      	bcs.n	34488 <ticker_worker+0xd8>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   34470:	2b00      	cmp	r3, #0
   34472:	f000 810e 	beq.w	34692 <ticker_worker+0x2e2>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   34476:	7a1a      	ldrb	r2, [r3, #8]
   34478:	2a01      	cmp	r2, #1
   3447a:	d005      	beq.n	34488 <ticker_worker+0xd8>
			must_expire_skip = 1U;
   3447c:	2701      	movs	r7, #1
   3447e:	e03b      	b.n	344f8 <ticker_worker+0x148>
		instance->worker_trigger = 0U;
   34480:	77c2      	strb	r2, [r0, #31]
}
   34482:	b00f      	add	sp, #60	; 0x3c
   34484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   34488:	3801      	subs	r0, #1
   3448a:	f88b 0002 	strb.w	r0, [fp, #2]
	while (ticker_id_head != TICKER_NULL) {
   3448e:	2cff      	cmp	r4, #255	; 0xff
   34490:	d007      	beq.n	344a2 <ticker_worker+0xf2>
		ticker = &node[ticker_id_head];
   34492:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   34496:	eb0a 1b04 	add.w	fp, sl, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   3449a:	f8db 2008 	ldr.w	r2, [fp, #8]
		if (ticks_elapsed < ticks_to_expire) {
   3449e:	454a      	cmp	r2, r9
   344a0:	d9b6      	bls.n	34410 <ticker_worker+0x60>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   344a2:	9a02      	ldr	r2, [sp, #8]
   344a4:	7ad3      	ldrb	r3, [r2, #11]
   344a6:	7a92      	ldrb	r2, [r2, #10]
   344a8:	429a      	cmp	r2, r3
   344aa:	d10c      	bne.n	344c6 <ticker_worker+0x116>
	uint8_t idx = *ticks_elapsed_index + 1;
   344ac:	3201      	adds	r2, #1
   344ae:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   344b0:	2a02      	cmp	r2, #2
   344b2:	bf18      	it	ne
   344b4:	4613      	movne	r3, r2
	*ticks_elapsed_index = idx;
   344b6:	9a02      	ldr	r2, [sp, #8]
   344b8:	bf18      	it	ne
   344ba:	9306      	strne	r3, [sp, #24]
   344bc:	4611      	mov	r1, r2
   344be:	9a06      	ldr	r2, [sp, #24]
   344c0:	72ca      	strb	r2, [r1, #11]
	if (idx == DOUBLE_BUFFER_SIZE) {
   344c2:	bf08      	it	eq
   344c4:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   344c6:	9902      	ldr	r1, [sp, #8]
   344c8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   344cc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   344ce:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
   344d2:	2200      	movs	r2, #0
   344d4:	77ca      	strb	r2, [r1, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   344d6:	460b      	mov	r3, r1
   344d8:	2201      	movs	r2, #1
   344da:	2104      	movs	r1, #4
   344dc:	2003      	movs	r0, #3
   344de:	46a4      	mov	ip, r4
}
   344e0:	b00f      	add	sp, #60	; 0x3c
   344e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   344e6:	4760      	bx	ip
   344e8:	e9dd 090a 	ldrd	r0, r9, [sp, #40]	; 0x28
   344ec:	e9dd 840c 	ldrd	r8, r4, [sp, #48]	; 0x30
		if (ticker->ext_data) {
   344f0:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
   344f4:	b303      	cbz	r3, 34538 <ticker_worker+0x188>
   344f6:	2700      	movs	r7, #0
			ticker->ext_data->ticks_drift = 0U;
   344f8:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
   344fa:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
   344fc:	f8db 500c 	ldr.w	r5, [fp, #12]
			ticks_drift = ticker->ext_data->ticks_drift;
   34500:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   34502:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   34504:	3801      	subs	r0, #1
   34506:	f88b 0002 	strb.w	r0, [fp, #2]
		if (ticker->timeout_func) {
   3450a:	2d00      	cmp	r5, #0
   3450c:	d0bf      	beq.n	3448e <ticker_worker+0xde>
			ticks_at_expire = (instance->ticks_current +
   3450e:	9b02      	ldr	r3, [sp, #8]
					   ticks_expired -
   34510:	f8db 0014 	ldr.w	r0, [fp, #20]
			ticks_at_expire = (instance->ticks_current +
   34514:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   34516:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
   3451a:	f89b c003 	ldrb.w	ip, [fp, #3]
   3451e:	f8db 6010 	ldr.w	r6, [fp, #16]
			ticks_at_expire = (instance->ticks_current +
   34522:	4443      	add	r3, r8
					   ticks_expired -
   34524:	1a18      	subs	r0, r3, r0
			ticks_at_expire = (instance->ticks_current +
   34526:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   3452a:	b1df      	cbz	r7, 34564 <ticker_worker+0x1b4>
   3452c:	e9cd c600 	strd	ip, r6, [sp]
   34530:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34534:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34536:	e7aa      	b.n	3448e <ticker_worker+0xde>
		if (ticker->timeout_func) {
   34538:	f8db 500c 	ldr.w	r5, [fp, #12]
		ticker->ack--;
   3453c:	3801      	subs	r0, #1
   3453e:	f88b 0002 	strb.w	r0, [fp, #2]
		if (ticker->timeout_func) {
   34542:	2d00      	cmp	r5, #0
   34544:	d0a3      	beq.n	3448e <ticker_worker+0xde>
			ticks_at_expire = (instance->ticks_current +
   34546:	9a02      	ldr	r2, [sp, #8]
					   ticks_expired -
   34548:	f8db 0014 	ldr.w	r0, [fp, #20]
			ticks_at_expire = (instance->ticks_current +
   3454c:	6951      	ldr	r1, [r2, #20]
   3454e:	f89b c003 	ldrb.w	ip, [fp, #3]
			ticker->timeout_func(ticks_at_expire,
   34552:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
   34556:	f8db 6010 	ldr.w	r6, [fp, #16]
			ticks_at_expire = (instance->ticks_current +
   3455a:	4441      	add	r1, r8
					   ticks_expired -
   3455c:	1a08      	subs	r0, r1, r0
			ticks_at_expire = (instance->ticks_current +
   3455e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_drift = 0U;
   34562:	4619      	mov	r1, r3
			ticker->timeout_func(ticks_at_expire,
   34564:	f8bb 301e 	ldrh.w	r3, [fp, #30]
   34568:	e9cd c600 	strd	ip, r6, [sp]
   3456c:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   3456e:	f8db 2018 	ldr.w	r2, [fp, #24]
				ticker->lazy_current = 0U;
   34572:	2300      	movs	r3, #0
					slot_reserved = 1U;
   34574:	429a      	cmp	r2, r3
   34576:	9a04      	ldr	r2, [sp, #16]
				ticker->lazy_current = 0U;
   34578:	f8ab 301e 	strh.w	r3, [fp, #30]
					slot_reserved = 1U;
   3457c:	bf18      	it	ne
   3457e:	2201      	movne	r2, #1
   34580:	9204      	str	r2, [sp, #16]
				ticker->force = 0U;
   34582:	f88b 3003 	strb.w	r3, [fp, #3]
				if (ticker->ticks_slot != 0U) {
   34586:	e782      	b.n	3448e <ticker_worker+0xde>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   34588:	f99b 302d 	ldrsb.w	r3, [fp, #45]	; 0x2d
   3458c:	9307      	str	r3, [sp, #28]
   3458e:	3380      	adds	r3, #128	; 0x80
   34590:	d0ae      	beq.n	344f0 <ticker_worker+0x140>
   34592:	2cff      	cmp	r4, #255	; 0xff
   34594:	d0ac      	beq.n	344f0 <ticker_worker+0x140>
		int32_t lazy_current = ticker->lazy_current;
   34596:	f8bb 301e 	ldrh.w	r3, [fp, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   3459a:	f8bb 201c 	ldrh.w	r2, [fp, #28]
		int32_t lazy_current = ticker->lazy_current;
   3459e:	9305      	str	r3, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   345a0:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
   345a2:	bf28      	it	cs
   345a4:	1a9b      	subcs	r3, r3, r2
		uint32_t current_age = ticker->ticks_periodic +
   345a6:	f8db 7004 	ldr.w	r7, [fp, #4]
				(lazy_current - ticker->priority);
   345aa:	9a07      	ldr	r2, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   345ac:	9703      	str	r7, [sp, #12]
				(lazy_current - ticker->priority);
   345ae:	1a9a      	subs	r2, r3, r2
		uint32_t current_age = ticker->ticks_periodic +
   345b0:	fb03 7307 	mla	r3, r3, r7, r7
   345b4:	9308      	str	r3, [sp, #32]
				(lazy_current - ticker->priority);
   345b6:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t current_age = ticker->ticks_periodic +
   345b8:	4623      	mov	r3, r4
		uint32_t acc_ticks_to_expire = 0U;
   345ba:	2100      	movs	r1, #0
   345bc:	e9cd 090a 	strd	r0, r9, [sp, #40]	; 0x28
   345c0:	e9cd 840c 	strd	r8, r4, [sp, #48]	; 0x30
   345c4:	e02c      	b.n	34620 <ticker_worker+0x270>
				(ticker->ticks_periodic == 0U) ||
   345c6:	9f03      	ldr	r7, [sp, #12]
					  0U :
   345c8:	eba8 0e0e 	sub.w	lr, r8, lr
				(ticker->ticks_periodic == 0U) ||
   345cc:	2f00      	cmp	r7, #0
   345ce:	d046      	beq.n	3465e <ticker_worker+0x2ae>
   345d0:	9f08      	ldr	r7, [sp, #32]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   345d2:	fb08 ee05 	mla	lr, r8, r5, lr
				(ticker->ticks_periodic == 0U) ||
   345d6:	4577      	cmp	r7, lr
   345d8:	bf8c      	ite	hi
   345da:	f04f 0e01 	movhi.w	lr, #1
   345de:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   345e2:	bf34      	ite	cc
   345e4:	f04f 0801 	movcc.w	r8, #1
   345e8:	f04f 0800 	movcs.w	r8, #0
			if (!lazy_next_periodic_skip &&
   345ec:	42a0      	cmp	r0, r4
			uint8_t next_force = (ticker_next->force > ticker->force);
   345ee:	f892 9003 	ldrb.w	r9, [r2, #3]
   345f2:	f89b 2003 	ldrb.w	r2, [fp, #3]
			if (!lazy_next_periodic_skip &&
   345f6:	d30e      	bcc.n	34616 <ticker_worker+0x266>
   345f8:	4591      	cmp	r9, r2
   345fa:	d842      	bhi.n	34682 <ticker_worker+0x2d2>
			    (next_force ||
   345fc:	f116 0f80 	cmn.w	r6, #128	; 0x80
   34600:	d03f      	beq.n	34682 <ticker_worker+0x2d2>
			     next_is_critical ||
   34602:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   34604:	1bad      	subs	r5, r5, r6
			     next_is_critical ||
   34606:	4295      	cmp	r5, r2
   34608:	dd02      	ble.n	34610 <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
   3460a:	f1be 0f00 	cmp.w	lr, #0
   3460e:	d038      	beq.n	34682 <ticker_worker+0x2d2>
   34610:	9a07      	ldr	r2, [sp, #28]
   34612:	42b2      	cmp	r2, r6
   34614:	d032      	beq.n	3467c <ticker_worker+0x2cc>
			id_head = ticker_next->next;
   34616:	f81a 3003 	ldrb.w	r3, [sl, r3]
		while (id_head != TICKER_NULL) {
   3461a:	2bff      	cmp	r3, #255	; 0xff
   3461c:	f43f af64 	beq.w	344e8 <ticker_worker+0x138>
			struct ticker_node *ticker_next = &nodes[id_head];
   34620:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34624:	011b      	lsls	r3, r3, #4
   34626:	eb0a 0203 	add.w	r2, sl, r3
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   3462a:	f8d2 e008 	ldr.w	lr, [r2, #8]
   3462e:	4471      	add	r1, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   34630:	458c      	cmp	ip, r1
   34632:	f4ff af59 	bcc.w	344e8 <ticker_worker+0x138>
			if (ticker_next->ticks_slot == 0U) {
   34636:	6990      	ldr	r0, [r2, #24]
   34638:	2800      	cmp	r0, #0
   3463a:	d0ec      	beq.n	34616 <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
   3463c:	8bd0      	ldrh	r0, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   3463e:	8b94      	ldrh	r4, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   34640:	f8d2 8004 	ldr.w	r8, [r2, #4]
				ticker_next->priority;
   34644:	f992 602d 	ldrsb.w	r6, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   34648:	42a0      	cmp	r0, r4
			int32_t lazy_next = ticker_next->lazy_current;
   3464a:	4605      	mov	r5, r0
				lazy_next -= ticker_next->lazy_periodic;
   3464c:	bf28      	it	cs
   3464e:	1b05      	subcs	r5, r0, r4
					  0U :
   34650:	f1b8 0f00 	cmp.w	r8, #0
   34654:	d1b7      	bne.n	345c6 <ticker_worker+0x216>
				(ticker->ticks_periodic == 0U) ||
   34656:	9f03      	ldr	r7, [sp, #12]
					  0U :
   34658:	46c6      	mov	lr, r8
				(ticker->ticks_periodic == 0U) ||
   3465a:	2f00      	cmp	r7, #0
   3465c:	d1b8      	bne.n	345d0 <ticker_worker+0x220>
   3465e:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   34662:	f8dd 800c 	ldr.w	r8, [sp, #12]
   34666:	e7c1      	b.n	345ec <ticker_worker+0x23c>
			    TICKER_RESCHEDULE_STATE_NONE &&
   34668:	f8bb 201c 	ldrh.w	r2, [fp, #28]
   3466c:	9905      	ldr	r1, [sp, #20]
   3466e:	428a      	cmp	r2, r1
   34670:	f63f aef0 	bhi.w	34454 <ticker_worker+0xa4>
				ext_data->reschedule_state =
   34674:	f04f 0201 	mov.w	r2, #1
   34678:	721a      	strb	r2, [r3, #8]
   3467a:	e6ed      	b.n	34458 <ticker_worker+0xa8>
			     (equal_priority && next_is_older))) {
   3467c:	f1b8 0f00 	cmp.w	r8, #0
   34680:	d0c9      	beq.n	34616 <ticker_worker+0x266>
   34682:	e9dd 090a 	ldrd	r0, r9, [sp, #40]	; 0x28
   34686:	e9dd 840c 	ldrd	r8, r4, [sp, #48]	; 0x30
   3468a:	e6da      	b.n	34442 <ticker_worker+0x92>
	uint8_t slot_reserved = 0;
   3468c:	9b06      	ldr	r3, [sp, #24]
   3468e:	9304      	str	r3, [sp, #16]
   34690:	e6ae      	b.n	343f0 <ticker_worker+0x40>
		if (ticker->timeout_func) {
   34692:	f8db 500c 	ldr.w	r5, [fp, #12]
		ticker->ack--;
   34696:	3801      	subs	r0, #1
   34698:	f88b 0002 	strb.w	r0, [fp, #2]
		if (ticker->timeout_func) {
   3469c:	2d00      	cmp	r5, #0
   3469e:	f43f aef6 	beq.w	3448e <ticker_worker+0xde>
			ticks_at_expire = (instance->ticks_current +
   346a2:	9a02      	ldr	r2, [sp, #8]
					   ticks_expired -
   346a4:	f8db 0014 	ldr.w	r0, [fp, #20]
			ticks_at_expire = (instance->ticks_current +
   346a8:	6951      	ldr	r1, [r2, #20]
   346aa:	f89b c003 	ldrb.w	ip, [fp, #3]
			ticker->timeout_func(ticks_at_expire,
   346ae:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
   346b2:	f8db 6010 	ldr.w	r6, [fp, #16]
			ticks_at_expire = (instance->ticks_current +
   346b6:	4441      	add	r1, r8
					   ticks_expired -
   346b8:	1a08      	subs	r0, r1, r0
			ticks_at_expire = (instance->ticks_current +
   346ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_drift = 0U;
   346be:	4619      	mov	r1, r3
   346c0:	e734      	b.n	3452c <ticker_worker+0x17c>
	ticks_expired = 0U;
   346c2:	f04f 0800 	mov.w	r8, #0
   346c6:	e6ec      	b.n	344a2 <ticker_worker+0xf2>

000346c8 <ticker_job>:
	if (instance->worker_trigger) {
   346c8:	7fc2      	ldrb	r2, [r0, #31]
   346ca:	2a00      	cmp	r2, #0
   346cc:	f040 86a0 	bne.w	35410 <ticker_job+0xd48>
{
   346d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   346d4:	7f81      	ldrb	r1, [r0, #30]
{
   346d6:	b08f      	sub	sp, #60	; 0x3c
   346d8:	4603      	mov	r3, r0
	if (instance->job_guard) {
   346da:	2900      	cmp	r1, #0
   346dc:	f040 808a 	bne.w	347f4 <ticker_job+0x12c>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   346e0:	7a82      	ldrb	r2, [r0, #10]
   346e2:	7ac0      	ldrb	r0, [r0, #11]
	ticks_previous = instance->ticks_current;
   346e4:	695c      	ldr	r4, [r3, #20]
   346e6:	9408      	str	r4, [sp, #32]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   346e8:	4290      	cmp	r0, r2
	instance->job_guard = 1U;
   346ea:	f04f 0401 	mov.w	r4, #1
   346ee:	779c      	strb	r4, [r3, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   346f0:	f000 86b3 	beq.w	3545a <ticker_job+0xd92>
	uint8_t idx = *ticks_elapsed_index + 1;
   346f4:	4422      	add	r2, r4
   346f6:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   346f8:	2a02      	cmp	r2, #2
		idx = 0U;
   346fa:	bf08      	it	eq
   346fc:	460a      	moveq	r2, r1
		ticks_elapsed =
   346fe:	eb03 0182 	add.w	r1, r3, r2, lsl #2
	*ticks_elapsed_index = idx;
   34702:	729a      	strb	r2, [r3, #10]
		ticks_elapsed =
   34704:	68ca      	ldr	r2, [r1, #12]
		instance->ticks_current += ticks_elapsed;
   34706:	9908      	ldr	r1, [sp, #32]
		ticks_elapsed =
   34708:	9201      	str	r2, [sp, #4]
		instance->ticks_current += ticks_elapsed;
   3470a:	188a      	adds	r2, r1, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   3470c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   34710:	615a      	str	r2, [r3, #20]
		flag_elapsed = 1U;
   34712:	2201      	movs	r2, #1
   34714:	920c      	str	r2, [sp, #48]	; 0x30
   34716:	469b      	mov	fp, r3
	ticker_id_old_head = instance->ticker_id_head;
   34718:	7f5b      	ldrb	r3, [r3, #29]
   3471a:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   3471c:	f8db 3000 	ldr.w	r3, [fp]
   34720:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   34722:	f8db 3004 	ldr.w	r3, [fp, #4]
   34726:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   34728:	f89b 3009 	ldrb.w	r3, [fp, #9]
   3472c:	9302      	str	r3, [sp, #8]
	pending = 0U;
   3472e:	2300      	movs	r3, #0
   34730:	930a      	str	r3, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   34732:	23ff      	movs	r3, #255	; 0xff
   34734:	9300      	str	r3, [sp, #0]
   34736:	46da      	mov	sl, fp
	while (count_user--) {
   34738:	9b02      	ldr	r3, [sp, #8]
   3473a:	3b01      	subs	r3, #1
   3473c:	b2db      	uxtb	r3, r3
   3473e:	2bff      	cmp	r3, #255	; 0xff
   34740:	9302      	str	r3, [sp, #8]
   34742:	f000 8174 	beq.w	34a2e <ticker_job+0x366>
		user = &users[count_user];
   34746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   34748:	9a02      	ldr	r2, [sp, #8]
   3474a:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   3474e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   34752:	9304      	str	r3, [sp, #16]
		while (user->middle != user->last) {
   34754:	f898 7003 	ldrb.w	r7, [r8, #3]
   34758:	f898 3002 	ldrb.w	r3, [r8, #2]
   3475c:	9904      	ldr	r1, [sp, #16]
					ticks_used = 0;
   3475e:	461e      	mov	r6, r3
			user_op = &user_ops[user->middle];
   34760:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   34764:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
   34768:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
   3476a:	429f      	cmp	r7, r3
			user_op = &user_ops[user->middle];
   3476c:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
   34770:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
   34772:	d0e1      	beq.n	34738 <ticker_job+0x70>
			if (middle == user->count_user_op) {
   34774:	f898 0000 	ldrb.w	r0, [r8]
				middle = 0U;
   34778:	4298      	cmp	r0, r3
   3477a:	bf08      	it	eq
   3477c:	2300      	moveq	r3, #0
			user->middle = middle;
   3477e:	f888 3002 	strb.w	r3, [r8, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   34782:	f811 0022 	ldrb.w	r0, [r1, r2, lsl #2]
   34786:	2804      	cmp	r0, #4
   34788:	d93d      	bls.n	34806 <ticker_job+0x13e>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   3478a:	2808      	cmp	r0, #8
   3478c:	f200 810c 	bhi.w	349a8 <ticker_job+0x2e0>
			ticker = &node[user_op->id];
   34790:	786a      	ldrb	r2, [r5, #1]
   34792:	9c03      	ldr	r4, [sp, #12]
   34794:	eb02 0142 	add.w	r1, r2, r2, lsl #1
   34798:	0109      	lsls	r1, r1, #4
   3479a:	440c      	add	r4, r1
   3479c:	9107      	str	r1, [sp, #28]
			state = (ticker->req - ticker->ack) & 0xff;
   3479e:	f894 c002 	ldrb.w	ip, [r4, #2]
   347a2:	7861      	ldrb	r1, [r4, #1]
   347a4:	eba1 010c 	sub.w	r1, r1, ip
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   347a8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   347ac:	f000 80fc 	beq.w	349a8 <ticker_job+0x2e0>
			    (state == 0U) ||
   347b0:	2805      	cmp	r0, #5
   347b2:	d047      	beq.n	34844 <ticker_job+0x17c>
			if (state == 1U) {
   347b4:	2901      	cmp	r1, #1
   347b6:	f040 8106 	bne.w	349c6 <ticker_job+0x2fe>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   347ba:	2806      	cmp	r0, #6
   347bc:	d008      	beq.n	347d0 <ticker_job+0x108>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   347be:	4651      	mov	r1, sl
   347c0:	f851 0b1d 	ldr.w	r0, [r1], #29
   347c4:	f7ff fdbe 	bl	34344 <ticker_dequeue.isra.2>
			ticker->req = ticker->ack;
   347c8:	78a3      	ldrb	r3, [r4, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   347ca:	60a0      	str	r0, [r4, #8]
			ticker->req = ticker->ack;
   347cc:	7063      	strb	r3, [r4, #1]
   347ce:	786a      	ldrb	r2, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   347d0:	f89a 301c 	ldrb.w	r3, [sl, #28]
   347d4:	4293      	cmp	r3, r2
   347d6:	d018      	beq.n	3480a <ticker_job+0x142>
	if (user_op->fp_op_func) {
   347d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   347da:	2000      	movs	r0, #0
   347dc:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
   347de:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   347e0:	b10b      	cbz	r3, 347e6 <ticker_job+0x11e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   347e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   347e4:	4798      	blx	r3
   347e6:	f898 3002 	ldrb.w	r3, [r8, #2]
   347ea:	f898 7003 	ldrb.w	r7, [r8, #3]
   347ee:	9904      	ldr	r1, [sp, #16]
					ticks_used = 0;
   347f0:	461e      	mov	r6, r3
   347f2:	e7b5      	b.n	34760 <ticker_job+0x98>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   347f4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   347f6:	2104      	movs	r1, #4
   347f8:	4608      	mov	r0, r1
   347fa:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   347fc:	46a4      	mov	ip, r4
}
   347fe:	b00f      	add	sp, #60	; 0x3c
   34800:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   34804:	4760      	bx	ip
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   34806:	461e      	mov	r6, r3
   34808:	e7aa      	b.n	34760 <ticker_job+0x98>
			instance->ticker_id_slot_previous = TICKER_NULL;
   3480a:	23ff      	movs	r3, #255	; 0xff
   3480c:	f88a 301c 	strb.w	r3, [sl, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   34810:	782b      	ldrb	r3, [r5, #0]
   34812:	2b06      	cmp	r3, #6
   34814:	f000 80c6 	beq.w	349a4 <ticker_job+0x2dc>
   34818:	2b08      	cmp	r3, #8
   3481a:	f000 80c3 	beq.w	349a4 <ticker_job+0x2dc>
				ticks_at_yield = cntr_cnt_get();
   3481e:	f00e fc49 	bl	430b4 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   34822:	f8da 2014 	ldr.w	r2, [sl, #20]
			if (!((ticks_at_yield - ticks_current) &
   34826:	1a83      	subs	r3, r0, r2
   34828:	021e      	lsls	r6, r3, #8
   3482a:	f100 80b2 	bmi.w	34992 <ticker_job+0x2ca>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3482e:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   34832:	9b01      	ldr	r3, [sp, #4]
   34834:	4418      	add	r0, r3
			if (instance->ticks_slot_previous > ticks_used) {
   34836:	f8da 3018 	ldr.w	r3, [sl, #24]
   3483a:	4283      	cmp	r3, r0
				instance->ticks_slot_previous = ticks_used;
   3483c:	bf88      	it	hi
   3483e:	f8ca 0018 	strhi.w	r0, [sl, #24]
   34842:	e7c9      	b.n	347d8 <ticker_job+0x110>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   34844:	6868      	ldr	r0, [r5, #4]
   34846:	b950      	cbnz	r0, 3485e <ticker_job+0x196>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   34848:	68a8      	ldr	r0, [r5, #8]
   3484a:	b940      	cbnz	r0, 3485e <ticker_job+0x196>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   3484c:	68e8      	ldr	r0, [r5, #12]
   3484e:	b930      	cbnz	r0, 3485e <ticker_job+0x196>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   34850:	6928      	ldr	r0, [r5, #16]
   34852:	b920      	cbnz	r0, 3485e <ticker_job+0x196>
			     (user_op->params.update.lazy == 0U) &&
   34854:	6968      	ldr	r0, [r5, #20]
   34856:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   3485a:	f000 80a5 	beq.w	349a8 <ticker_job+0x2e0>
			if (state == 1U) {
   3485e:	2901      	cmp	r1, #1
   34860:	f040 80b1 	bne.w	349c6 <ticker_job+0x2fe>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   34864:	4651      	mov	r1, sl
   34866:	f851 0b1d 	ldr.w	r0, [r1], #29
   3486a:	f7ff fd6b 	bl	34344 <ticker_dequeue.isra.2>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   3486e:	f8da 3014 	ldr.w	r3, [sl, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   34872:	60a0      	str	r0, [r4, #8]
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   34874:	461f      	mov	r7, r3
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   34876:	4606      	mov	r6, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   34878:	9305      	str	r3, [sp, #20]
	ticks_now = cntr_cnt_get();
   3487a:	f00e fc1b 	bl	430b4 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   3487e:	9a01      	ldr	r2, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34880:	eba0 0c07 	sub.w	ip, r0, r7
   34884:	f02c 437f 	bic.w	r3, ip, #4278190080	; 0xff000000
   34888:	9306      	str	r3, [sp, #24]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   3488a:	18d3      	adds	r3, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   3488c:	429e      	cmp	r6, r3
   3488e:	d97a      	bls.n	34986 <ticker_job+0x2be>
		ticks_to_expire -= ticks_elapsed;
   34890:	6962      	ldr	r2, [r4, #20]
   34892:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
   34894:	6867      	ldr	r7, [r4, #4]
   34896:	b397      	cbz	r7, 348fe <ticker_job+0x236>
	    (user_op->params.update.lazy != 0U)) {
   34898:	8aae      	ldrh	r6, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   3489a:	b386      	cbz	r6, 348fe <ticker_job+0x236>
		user_op->params.update.lazy--;
   3489c:	3e01      	subs	r6, #1
   3489e:	b2b6      	uxth	r6, r6
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   348a0:	429f      	cmp	r7, r3
		user_op->params.update.lazy--;
   348a2:	82ae      	strh	r6, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   348a4:	8be1      	ldrh	r1, [r4, #30]
   348a6:	f080 809d 	bcs.w	349e4 <ticker_job+0x31c>
   348aa:	428e      	cmp	r6, r1
   348ac:	f080 809a 	bcs.w	349e4 <ticker_job+0x31c>
   348b0:	e9d4 be08 	ldrd	fp, lr, [r4, #32]
   348b4:	f107 0901 	add.w	r9, r7, #1
   348b8:	4676      	mov	r6, lr
   348ba:	920d      	str	r2, [sp, #52]	; 0x34
   348bc:	e014      	b.n	348e8 <ticker_job+0x220>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   348be:	f106 76e8 	add.w	r6, r6, #30408704	; 0x1d00000
   348c2:	f506 36d4 	add.w	r6, r6, #108544	; 0x1a800
   348c6:	f506 76a5 	add.w	r6, r6, #330	; 0x14a
   348ca:	46ce      	mov	lr, r9
			ticks_to_expire -= ticker->ticks_periodic +
   348cc:	eba3 030e 	sub.w	r3, r3, lr
	ticker->remainder_current -= ticker->remainder_periodic;
   348d0:	eba6 060b 	sub.w	r6, r6, fp
			ticker->lazy_current--;
   348d4:	3901      	subs	r1, #1
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   348d6:	429f      	cmp	r7, r3
	ticker->remainder_current -= ticker->remainder_periodic;
   348d8:	6266      	str	r6, [r4, #36]	; 0x24
			ticker->lazy_current--;
   348da:	b289      	uxth	r1, r1
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   348dc:	d27f      	bcs.n	349de <ticker_job+0x316>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   348de:	f8b5 e014 	ldrh.w	lr, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   348e2:	4571      	cmp	r1, lr
   348e4:	f240 8247 	bls.w	34d76 <ticker_job+0x6ae>
	if ((ticker->remainder_current >= BIT(31)) ||
   348e8:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 34b90 <ticker_job+0x4c8>
   348ec:	4aa7      	ldr	r2, [pc, #668]	; (34b8c <ticker_job+0x4c4>)
   348ee:	44b6      	add	lr, r6
   348f0:	4596      	cmp	lr, r2
   348f2:	d8e4      	bhi.n	348be <ticker_job+0x1f6>
   348f4:	46be      	mov	lr, r7
   348f6:	e7e9      	b.n	348cc <ticker_job+0x204>
   348f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   348fa:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   348fc:	83a6      	strh	r6, [r4, #28]
				user_op->params.update.ticks_drift_minus;
   348fe:	e9d5 6e01 	ldrd	r6, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
   34902:	6aa7      	ldr	r7, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   34904:	4433      	add	r3, r6
	ticker->ticks_to_expire_minus +=
   34906:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
   34908:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
   3490a:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   3490c:	b137      	cbz	r7, 3491c <ticker_job+0x254>
   3490e:	6839      	ldr	r1, [r7, #0]
   34910:	b121      	cbz	r1, 3491c <ticker_job+0x254>
			user_op->params.update.ticks_drift_plus -
   34912:	eba6 060e 	sub.w	r6, r6, lr
		ext_data->ticks_drift =
   34916:	607e      	str	r6, [r7, #4]
   34918:	68a3      	ldr	r3, [r4, #8]
   3491a:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   3491c:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
   34920:	d125      	bne.n	3496e <ticker_job+0x2a6>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   34922:	9906      	ldr	r1, [sp, #24]
   34924:	4419      	add	r1, r3
   34926:	460b      	mov	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   34928:	4293      	cmp	r3, r2
   3492a:	d929      	bls.n	34980 <ticker_job+0x2b8>
		ticks_to_expire -= ticks_to_expire_minus;
   3492c:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
   3492e:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
   34930:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   34932:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   34934:	68e9      	ldr	r1, [r5, #12]
   34936:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   34938:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   3493a:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   3493c:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   3493e:	bf88      	it	hi
   34940:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
   34942:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
   34944:	bf98      	it	ls
   34946:	2300      	movls	r3, #0
   34948:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   3494a:	b102      	cbz	r2, 3494e <ticker_job+0x286>
		ticker->force = user_op->params.update.force;
   3494c:	70e2      	strb	r2, [r4, #3]
	if (user_op->params.update.must_expire) {
   3494e:	7deb      	ldrb	r3, [r5, #23]
   34950:	b113      	cbz	r3, 34958 <ticker_job+0x290>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   34952:	3b01      	subs	r3, #1
   34954:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
   34958:	9b03      	ldr	r3, [sp, #12]
   3495a:	9a07      	ldr	r2, [sp, #28]
   3495c:	4619      	mov	r1, r3
   3495e:	9b00      	ldr	r3, [sp, #0]
   34960:	548b      	strb	r3, [r1, r2]
		ticker->req++;
   34962:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   34964:	786a      	ldrb	r2, [r5, #1]
   34966:	9200      	str	r2, [sp, #0]
		ticker->req++;
   34968:	3301      	adds	r3, #1
   3496a:	7063      	strb	r3, [r4, #1]
   3496c:	e734      	b.n	347d8 <ticker_job+0x110>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   3496e:	9905      	ldr	r1, [sp, #20]
   34970:	1a08      	subs	r0, r1, r0
   34972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   34976:	4298      	cmp	r0, r3
   34978:	d256      	bcs.n	34a28 <ticker_job+0x360>
			ticks_to_expire -= delta_current_start;
   3497a:	1a1b      	subs	r3, r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
   3497c:	4293      	cmp	r3, r2
   3497e:	d8d5      	bhi.n	3492c <ticker_job+0x264>
   34980:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
   34982:	2300      	movs	r3, #0
   34984:	e7d4      	b.n	34930 <ticker_job+0x268>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   34986:	6961      	ldr	r1, [r4, #20]
   34988:	1b8a      	subs	r2, r1, r6
   3498a:	441a      	add	r2, r3
   3498c:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
   3498e:	2300      	movs	r3, #0
   34990:	e780      	b.n	34894 <ticker_job+0x1cc>
				if (ticks_elapsed > ticks_used) {
   34992:	9b01      	ldr	r3, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34994:	1a10      	subs	r0, r2, r0
   34996:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   3499a:	4283      	cmp	r3, r0
					ticks_used = ticks_elapsed -
   3499c:	bf8c      	ite	hi
   3499e:	1a18      	subhi	r0, r3, r0
					ticks_used = 0;
   349a0:	2000      	movls	r0, #0
   349a2:	e748      	b.n	34836 <ticker_job+0x16e>
				ticks_at_yield =
   349a4:	6868      	ldr	r0, [r5, #4]
   349a6:	e73c      	b.n	34822 <ticker_job+0x15a>
	if (user_op->fp_op_func) {
   349a8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   349aa:	2100      	movs	r1, #0
	user_op->status = status;
   349ac:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   349ae:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
   349b0:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   349b2:	2a00      	cmp	r2, #0
   349b4:	f43f aed2 	beq.w	3475c <ticker_job+0x94>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   349b8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   349ba:	4790      	blx	r2
   349bc:	f898 7003 	ldrb.w	r7, [r8, #3]
   349c0:	f898 3002 	ldrb.w	r3, [r8, #2]
   349c4:	e6ca      	b.n	3475c <ticker_job+0x94>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   349c6:	2104      	movs	r1, #4
   349c8:	4653      	mov	r3, sl
   349ca:	4608      	mov	r0, r1
   349cc:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
   349d0:	2201      	movs	r2, #1
   349d2:	47a0      	blx	r4
				pending = 1U;
   349d4:	2301      	movs	r3, #1
   349d6:	930a      	str	r3, [sp, #40]	; 0x28
				user->middle = prev;
   349d8:	f888 6002 	strb.w	r6, [r8, #2]
				break;
   349dc:	e6ac      	b.n	34738 <ticker_job+0x70>
   349de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   349e0:	8aae      	ldrh	r6, [r5, #20]
   349e2:	83e1      	strh	r1, [r4, #30]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   349e4:	42b1      	cmp	r1, r6
   349e6:	d289      	bcs.n	348fc <ticker_job+0x234>
					   ticker_remainder_inc(ticker);
   349e8:	f8d4 9020 	ldr.w	r9, [r4, #32]
   349ec:	920d      	str	r2, [sp, #52]	; 0x34
   349ee:	f107 0e01 	add.w	lr, r7, #1
   349f2:	e008      	b.n	34a06 <ticker_job+0x33e>
	ticker->remainder_current += ticker->remainder_periodic;
   349f4:	6266      	str	r6, [r4, #36]	; 0x24
   349f6:	46bb      	mov	fp, r7
			ticker->lazy_current++;
   349f8:	3101      	adds	r1, #1
		while (ticker->lazy_current < user_op->params.update.lazy) {
   349fa:	8aae      	ldrh	r6, [r5, #20]
			ticker->lazy_current++;
   349fc:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
   349fe:	42b1      	cmp	r1, r6
			ticks_to_expire += ticker->ticks_periodic +
   34a00:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
   34a02:	f4bf af79 	bcs.w	348f8 <ticker_job+0x230>
	ticker->remainder_current += ticker->remainder_periodic;
   34a06:	6a66      	ldr	r6, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
   34a08:	f8df b184 	ldr.w	fp, [pc, #388]	; 34b90 <ticker_job+0x4c8>
   34a0c:	4a5f      	ldr	r2, [pc, #380]	; (34b8c <ticker_job+0x4c4>)
	ticker->remainder_current += ticker->remainder_periodic;
   34a0e:	444e      	add	r6, r9
	if ((ticker->remainder_current < BIT(31)) &&
   34a10:	44b3      	add	fp, r6
   34a12:	4593      	cmp	fp, r2
   34a14:	d8ee      	bhi.n	349f4 <ticker_job+0x32c>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34a16:	f1a6 76e8 	sub.w	r6, r6, #30408704	; 0x1d00000
   34a1a:	f5a6 36d4 	sub.w	r6, r6, #108544	; 0x1a800
   34a1e:	f5a6 76a5 	sub.w	r6, r6, #330	; 0x14a
   34a22:	6266      	str	r6, [r4, #36]	; 0x24
		return 1;
   34a24:	46f3      	mov	fp, lr
   34a26:	e7e7      	b.n	349f8 <ticker_job+0x330>
			ticks_to_expire_minus +=
   34a28:	4402      	add	r2, r0
   34a2a:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   34a2c:	e7a9      	b.n	34982 <ticker_job+0x2ba>
	if (instance->ticker_id_head != ticker_id_old_head) {
   34a2e:	f89a 301d 	ldrb.w	r3, [sl, #29]
		flag_compare_update = 1U;
   34a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34a34:	1a9b      	subs	r3, r3, r2
   34a36:	bf18      	it	ne
   34a38:	2301      	movne	r3, #1
   34a3a:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
   34a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   34a3e:	46d3      	mov	fp, sl
   34a40:	2b00      	cmp	r3, #0
   34a42:	f000 831e 	beq.w	35082 <ticker_job+0x9ba>
	ticks_now = cntr_cnt_get();
   34a46:	f00e fb35 	bl	430b4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34a4a:	9b08      	ldr	r3, [sp, #32]
	node = &instance->nodes[0];
   34a4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34a50:	1ac0      	subs	r0, r0, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   34a52:	9b02      	ldr	r3, [sp, #8]
   34a54:	9305      	str	r3, [sp, #20]
	node = &instance->nodes[0];
   34a56:	f8db 3000 	ldr.w	r3, [fp]
   34a5a:	9302      	str	r3, [sp, #8]
	ticks_expired = 0U;
   34a5c:	f04f 0900 	mov.w	r9, #0
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34a60:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   34a64:	f89b 601d 	ldrb.w	r6, [fp, #29]
   34a68:	2eff      	cmp	r6, #255	; 0xff
   34a6a:	d048      	beq.n	34afe <ticker_job+0x436>
		ticker = &node[id_expired];
   34a6c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   34a70:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   34a74:	9b02      	ldr	r3, [sp, #8]
   34a76:	eb03 040c 	add.w	r4, r3, ip
		ticks_to_expire = ticker->ticks_to_expire;
   34a7a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   34a7c:	4543      	cmp	r3, r8
   34a7e:	f200 84f0 	bhi.w	35462 <ticker_job+0xd9a>
		if (instance->ticks_slot_previous > ticks_to_expire) {
   34a82:	f8db 2018 	ldr.w	r2, [fp, #24]
		skip_collision = (ticker->lazy_current != 0U);
   34a86:	8be1      	ldrh	r1, [r4, #30]
   34a88:	9103      	str	r1, [sp, #12]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   34a8a:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   34a8c:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
   34a90:	4499      	add	r9, r3
		ticks_latency -= ticks_to_expire;
   34a92:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   34a96:	bf25      	ittet	cs
   34a98:	9b05      	ldrcs	r3, [sp, #20]
   34a9a:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   34a9e:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   34aa0:	2300      	movcs	r3, #0
   34aa2:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   34aa6:	f894 e002 	ldrb.w	lr, [r4, #2]
   34aaa:	7863      	ldrb	r3, [r4, #1]
   34aac:	9d02      	ldr	r5, [sp, #8]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   34aae:	69a1      	ldr	r1, [r4, #24]
   34ab0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   34ab2:	6860      	ldr	r0, [r4, #4]
   34ab4:	f815 500c 	ldrb.w	r5, [r5, ip]
		state = (ticker->req - ticker->ack) & 0xff;
   34ab8:	eba3 030e 	sub.w	r3, r3, lr
   34abc:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   34abe:	b111      	cbz	r1, 34ac6 <ticker_job+0x3fe>
   34ac0:	2b02      	cmp	r3, #2
   34ac2:	f000 814b 	beq.w	34d5c <ticker_job+0x694>
		ticker->ticks_to_expire = 0U;
   34ac6:	2100      	movs	r1, #0
   34ac8:	60a1      	str	r1, [r4, #8]
		instance->ticker_id_head = ticker->next;
   34aca:	f88b 501d 	strb.w	r5, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   34ace:	2800      	cmp	r0, #0
   34ad0:	f040 8102 	bne.w	34cd8 <ticker_job+0x610>
   34ad4:	b11a      	cbz	r2, 34ade <ticker_job+0x416>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   34ad6:	7a12      	ldrb	r2, [r2, #8]
   34ad8:	2a01      	cmp	r2, #1
   34ada:	f000 80e0 	beq.w	34c9e <ticker_job+0x5d6>
			if (state && ((state == 1U) || skip_collision) &&
   34ade:	b143      	cbz	r3, 34af2 <ticker_job+0x42a>
   34ae0:	2b01      	cmp	r3, #1
   34ae2:	d001      	beq.n	34ae8 <ticker_job+0x420>
   34ae4:	9b03      	ldr	r3, [sp, #12]
   34ae6:	b123      	cbz	r3, 34af2 <ticker_job+0x42a>
			    ticker->fp_op_func) {
   34ae8:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   34aea:	b113      	cbz	r3, 34af2 <ticker_job+0x42a>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   34aec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   34aee:	2001      	movs	r0, #1
   34af0:	4798      	blx	r3
			ticker->req = ticker->ack;
   34af2:	78a3      	ldrb	r3, [r4, #2]
   34af4:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   34af6:	f89b 601d 	ldrb.w	r6, [fp, #29]
   34afa:	2eff      	cmp	r6, #255	; 0xff
   34afc:	d1b6      	bne.n	34a6c <ticker_job+0x3a4>
			flag_compare_update = 1U;
   34afe:	9b07      	ldr	r3, [sp, #28]
   34b00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   34b02:	9909      	ldr	r1, [sp, #36]	; 0x24
   34b04:	42b1      	cmp	r1, r6
   34b06:	bf18      	it	ne
   34b08:	4613      	movne	r3, r2
   34b0a:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
   34b0c:	f8db 3000 	ldr.w	r3, [fp]
   34b10:	9305      	str	r3, [sp, #20]
	users = &instance->users[0];
   34b12:	f8db 3004 	ldr.w	r3, [fp, #4]
   34b16:	9306      	str	r3, [sp, #24]
	count_user = instance->count_user;
   34b18:	f89b 3009 	ldrb.w	r3, [fp, #9]
   34b1c:	9303      	str	r3, [sp, #12]
	while (count_user--) {
   34b1e:	9b03      	ldr	r3, [sp, #12]
   34b20:	3b01      	subs	r3, #1
   34b22:	b2db      	uxtb	r3, r3
   34b24:	2bff      	cmp	r3, #255	; 0xff
   34b26:	9303      	str	r3, [sp, #12]
   34b28:	f000 8194 	beq.w	34e54 <ticker_job+0x78c>
		user = &users[count_user];
   34b2c:	9b06      	ldr	r3, [sp, #24]
   34b2e:	9a03      	ldr	r2, [sp, #12]
   34b30:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
		user_ops = (void *)&user->user_op[0];
   34b34:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   34b38:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   34b3c:	9302      	str	r3, [sp, #8]
		while ((insert_head != TICKER_NULL) ||
   34b3e:	9b00      	ldr	r3, [sp, #0]
   34b40:	2bff      	cmp	r3, #255	; 0xff
   34b42:	d06f      	beq.n	34c24 <ticker_job+0x55c>
				ticker = &node[id_insert];
   34b44:	f8dd a000 	ldr.w	sl, [sp]
   34b48:	9b05      	ldr	r3, [sp, #20]
   34b4a:	fa0f f18a 	sxth.w	r1, sl
   34b4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   34b52:	0109      	lsls	r1, r1, #4
   34b54:	185c      	adds	r4, r3, r1
				insert_head = ticker->next;
   34b56:	5c5b      	ldrb	r3, [r3, r1]
   34b58:	9300      	str	r3, [sp, #0]
				user_op = NULL;
   34b5a:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   34b5c:	22ff      	movs	r2, #255	; 0xff
   34b5e:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   34b60:	f8db e000 	ldr.w	lr, [fp]
	current = instance->ticker_id_head;
   34b64:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   34b68:	eb0e 0c01 	add.w	ip, lr, r1
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34b6c:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   34b6e:	f8dc 7008 	ldr.w	r7, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34b72:	f000 8111 	beq.w	34d98 <ticker_job+0x6d0>
		(ticker_current = &node[current])->ticks_to_expire))) {
   34b76:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   34b7a:	eb0e 1000 	add.w	r0, lr, r0, lsl #4
		(ticks_to_expire_current =
   34b7e:	6881      	ldr	r1, [r0, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34b80:	42b9      	cmp	r1, r7
   34b82:	f200 8103 	bhi.w	34d8c <ticker_job+0x6c4>
   34b86:	9204      	str	r2, [sp, #16]
   34b88:	e008      	b.n	34b9c <ticker_job+0x4d4>
   34b8a:	bf00      	nop
   34b8c:	7f172b59 	.word	0x7f172b59
   34b90:	ff172b5a 	.word	0xff172b5a
		(ticks_to_expire_current =
   34b94:	6881      	ldr	r1, [r0, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34b96:	42b9      	cmp	r1, r7
   34b98:	d812      	bhi.n	34bc0 <ticker_job+0x4f8>
   34b9a:	464b      	mov	r3, r9
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   34b9c:	1a7f      	subs	r7, r7, r1
   34b9e:	d105      	bne.n	34bac <ticker_job+0x4e4>
   34ba0:	f8bc 901e 	ldrh.w	r9, [ip, #30]
   34ba4:	8bc2      	ldrh	r2, [r0, #30]
   34ba6:	4591      	cmp	r9, r2
   34ba8:	f200 80fb 	bhi.w	34da2 <ticker_job+0x6da>
		current = ticker_current->next;
   34bac:	f890 9000 	ldrb.w	r9, [r0]
   34bb0:	9304      	str	r3, [sp, #16]
		(ticker_current = &node[current])->ticks_to_expire))) {
   34bb2:	eb09 0049 	add.w	r0, r9, r9, lsl #1
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34bb6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		(ticker_current = &node[current])->ticks_to_expire))) {
   34bba:	eb0e 1000 	add.w	r0, lr, r0, lsl #4
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   34bbe:	d1e9      	bne.n	34b94 <ticker_job+0x4cc>
	ticker_new->next = current;
   34bc0:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   34bc2:	f8cc 7008 	str.w	r7, [ip, #8]
	ticker_new->next = current;
   34bc6:	f88c 9000 	strb.w	r9, [ip]
   34bca:	4639      	mov	r1, r7
   34bcc:	464b      	mov	r3, r9
		node[previous].next = id;
   34bce:	b212      	sxth	r2, r2
   34bd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   34bd4:	0112      	lsls	r2, r2, #4
   34bd6:	f80e a002 	strb.w	sl, [lr, r2]
	if (current != TICKER_NULL) {
   34bda:	2bff      	cmp	r3, #255	; 0xff
   34bdc:	d009      	beq.n	34bf2 <ticker_job+0x52a>
		node[current].ticks_to_expire -= ticks_to_expire;
   34bde:	b21b      	sxth	r3, r3
   34be0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   34be4:	eb0e 1e03 	add.w	lr, lr, r3, lsl #4
   34be8:	f8de 3008 	ldr.w	r3, [lr, #8]
   34bec:	1a59      	subs	r1, r3, r1
   34bee:	f8ce 1008 	str.w	r1, [lr, #8]
	ticker->req = ticker->ack + 1;
   34bf2:	78a3      	ldrb	r3, [r4, #2]
   34bf4:	3301      	adds	r3, #1
   34bf6:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   34bf8:	2d00      	cmp	r5, #0
   34bfa:	d0a0      	beq.n	34b3e <ticker_job+0x476>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34bfc:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   34c00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34c02:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   34c04:	2200      	movs	r2, #0
   34c06:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   34c08:	b113      	cbz	r3, 34c10 <ticker_job+0x548>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   34c0a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   34c0c:	4610      	mov	r0, r2
   34c0e:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   34c10:	6863      	ldr	r3, [r4, #4]
   34c12:	2b00      	cmp	r3, #0
   34c14:	d193      	bne.n	34b3e <ticker_job+0x476>
					ticker->op_context =
   34c16:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   34c1a:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   34c1e:	9b00      	ldr	r3, [sp, #0]
   34c20:	2bff      	cmp	r3, #255	; 0xff
   34c22:	d18f      	bne.n	34b44 <ticker_job+0x47c>
   34c24:	f898 7002 	ldrb.w	r7, [r8, #2]
				user_op = &user_ops[user_ops_first];
   34c28:	eb06 0346 	add.w	r3, r6, r6, lsl #1
				first = user_ops_first + 1;
   34c2c:	1c72      	adds	r2, r6, #1
				user_op = &user_ops[user_ops_first];
   34c2e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
		while ((insert_head != TICKER_NULL) ||
   34c32:	42be      	cmp	r6, r7
				first = user_ops_first + 1;
   34c34:	b2d6      	uxtb	r6, r2
				user_op = &user_ops[user_ops_first];
   34c36:	9a02      	ldr	r2, [sp, #8]
   34c38:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		while ((insert_head != TICKER_NULL) ||
   34c3c:	f43f af6f 	beq.w	34b1e <ticker_job+0x456>
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   34c40:	9a02      	ldr	r2, [sp, #8]
				if (first == user->count_user_op) {
   34c42:	f898 1000 	ldrb.w	r1, [r8]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   34c46:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
					first = 0U;
   34c4a:	42b1      	cmp	r1, r6
   34c4c:	bf08      	it	eq
   34c4e:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   34c50:	2a04      	cmp	r2, #4
   34c52:	d1e9      	bne.n	34c28 <ticker_job+0x560>
				id_insert = user_op->id;
   34c54:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   34c58:	9805      	ldr	r0, [sp, #20]
   34c5a:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
   34c5e:	0109      	lsls	r1, r1, #4
   34c60:	1844      	adds	r4, r0, r1
				if (((ticker->req -
   34c62:	7860      	ldrb	r0, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   34c64:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   34c66:	1a80      	subs	r0, r0, r2
   34c68:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   34c6c:	f000 80a1 	beq.w	34db2 <ticker_job+0x6ea>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   34c70:	9a02      	ldr	r2, [sp, #8]
   34c72:	f04f 0100 	mov.w	r1, #0
   34c76:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	if (user_op->fp_op_func) {
   34c7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   34c7c:	2201      	movs	r2, #1
   34c7e:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   34c80:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   34c82:	2b00      	cmp	r3, #0
   34c84:	d0d0      	beq.n	34c28 <ticker_job+0x560>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   34c86:	6b29      	ldr	r1, [r5, #48]	; 0x30
   34c88:	4798      	blx	r3
   34c8a:	f898 7002 	ldrb.w	r7, [r8, #2]
   34c8e:	e7cb      	b.n	34c28 <ticker_job+0x560>
		ticker->ticks_to_expire = 0U;
   34c90:	9903      	ldr	r1, [sp, #12]
   34c92:	60a1      	str	r1, [r4, #8]
		instance->ticker_id_head = ticker->next;
   34c94:	f88b 501d 	strb.w	r5, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   34c98:	2800      	cmp	r0, #0
   34c9a:	f43f af1c 	beq.w	34ad6 <ticker_job+0x40e>
				lazy = 0U;
   34c9e:	4643      	mov	r3, r8
			ticks_to_expire_prep(ticker, instance->ticks_current,
   34ca0:	9808      	ldr	r0, [sp, #32]
   34ca2:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   34ca6:	6961      	ldr	r1, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   34ca8:	eb00 0509 	add.w	r5, r0, r9
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   34cac:	1aa8      	subs	r0, r5, r2
   34cae:	0207      	lsls	r7, r0, #8
   34cb0:	d449      	bmi.n	34d46 <ticker_job+0x67e>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34cb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   34cb6:	4403      	add	r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
   34cb8:	4299      	cmp	r1, r3
   34cba:	d24c      	bcs.n	34d56 <ticker_job+0x68e>
		ticks_to_expire -= ticks_to_expire_minus;
   34cbc:	1a5b      	subs	r3, r3, r1
		ticks_to_expire_minus = 0U;
   34cbe:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
   34cc0:	60a3      	str	r3, [r4, #8]
			ticker->next = *insert_head;
   34cc2:	9b02      	ldr	r3, [sp, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   34cc4:	6162      	str	r2, [r4, #20]
			ticker->next = *insert_head;
   34cc6:	461a      	mov	r2, r3
			ticker->req++;
   34cc8:	f10e 0101 	add.w	r1, lr, #1
			ticker->next = *insert_head;
   34ccc:	9b00      	ldr	r3, [sp, #0]
   34cce:	f802 300c 	strb.w	r3, [r2, ip]
			ticker->req++;
   34cd2:	9600      	str	r6, [sp, #0]
   34cd4:	7061      	strb	r1, [r4, #1]
   34cd6:	e6c5      	b.n	34a64 <ticker_job+0x39c>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   34cd8:	b112      	cbz	r2, 34ce0 <ticker_job+0x618>
   34cda:	7a13      	ldrb	r3, [r2, #8]
   34cdc:	2b01      	cmp	r3, #1
   34cde:	d0de      	beq.n	34c9e <ticker_job+0x5d6>
				if (!ticker->lazy_current) {
   34ce0:	8be3      	ldrh	r3, [r4, #30]
   34ce2:	9304      	str	r3, [sp, #16]
   34ce4:	2b00      	cmp	r3, #0
   34ce6:	d14d      	bne.n	34d84 <ticker_job+0x6bc>
					lazy_periodic = ticker->lazy_periodic;
   34ce8:	8ba3      	ldrh	r3, [r4, #28]
   34cea:	f894 e001 	ldrb.w	lr, [r4, #1]
   34cee:	9304      	str	r3, [sp, #16]
   34cf0:	461d      	mov	r5, r3
						ticker_remainder_inc(ticker);
   34cf2:	6a23      	ldr	r3, [r4, #32]
   34cf4:	9303      	str	r3, [sp, #12]
   34cf6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   34cf8:	9406      	str	r4, [sp, #24]
				ticks_to_expire = 0U;
   34cfa:	2300      	movs	r3, #0
   34cfc:	1c41      	adds	r1, r0, #1
   34cfe:	e004      	b.n	34d0a <ticker_job+0x642>
				while (count--) {
   34d00:	3d01      	subs	r5, #1
	if ((ticker->remainder_current < BIT(31)) &&
   34d02:	4607      	mov	r7, r0
				while (count--) {
   34d04:	1c6c      	adds	r4, r5, #1
					ticks_to_expire +=
   34d06:	443b      	add	r3, r7
				while (count--) {
   34d08:	d011      	beq.n	34d2e <ticker_job+0x666>
	ticker->remainder_current += ticker->remainder_periodic;
   34d0a:	9f03      	ldr	r7, [sp, #12]
	if ((ticker->remainder_current < BIT(31)) &&
   34d0c:	4cb9      	ldr	r4, [pc, #740]	; (34ff4 <ticker_job+0x92c>)
	ticker->remainder_current += ticker->remainder_periodic;
   34d0e:	443a      	add	r2, r7
	if ((ticker->remainder_current < BIT(31)) &&
   34d10:	4fb9      	ldr	r7, [pc, #740]	; (34ff8 <ticker_job+0x930>)
   34d12:	19d7      	adds	r7, r2, r7
   34d14:	42a7      	cmp	r7, r4
   34d16:	d8f3      	bhi.n	34d00 <ticker_job+0x638>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34d18:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
   34d1c:	3d01      	subs	r5, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34d1e:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
   34d22:	460f      	mov	r7, r1
				while (count--) {
   34d24:	1c6c      	adds	r4, r5, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   34d26:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
					ticks_to_expire +=
   34d2a:	443b      	add	r3, r7
				while (count--) {
   34d2c:	d1ed      	bne.n	34d0a <ticker_job+0x642>
   34d2e:	9c06      	ldr	r4, [sp, #24]
				} else if (!ticker->must_expire) {
   34d30:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   34d34:	6262      	str	r2, [r4, #36]	; 0x24
   34d36:	2900      	cmp	r1, #0
   34d38:	f000 836b 	beq.w	35412 <ticker_job+0xd4a>
				lazy = 0U;
   34d3c:	2100      	movs	r1, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   34d3e:	9a04      	ldr	r2, [sp, #16]
   34d40:	4411      	add	r1, r2
   34d42:	83e1      	strh	r1, [r4, #30]
   34d44:	e7ac      	b.n	34ca0 <ticker_job+0x5d8>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34d46:	1b52      	subs	r2, r2, r5
   34d48:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   34d4c:	429a      	cmp	r2, r3
   34d4e:	d216      	bcs.n	34d7e <ticker_job+0x6b6>
			ticks_to_expire -= delta_current_start;
   34d50:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   34d52:	4299      	cmp	r1, r3
   34d54:	d3b2      	bcc.n	34cbc <ticker_job+0x5f4>
   34d56:	1aca      	subs	r2, r1, r3
		ticks_to_expire = 0U;
   34d58:	2300      	movs	r3, #0
   34d5a:	e7b1      	b.n	34cc0 <ticker_job+0x5f8>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   34d5c:	9f03      	ldr	r7, [sp, #12]
   34d5e:	2f00      	cmp	r7, #0
   34d60:	f47f aeb1 	bne.w	34ac6 <ticker_job+0x3fe>
   34d64:	b112      	cbz	r2, 34d6c <ticker_job+0x6a4>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   34d66:	7a17      	ldrb	r7, [r2, #8]
   34d68:	2f01      	cmp	r7, #1
   34d6a:	d091      	beq.n	34c90 <ticker_job+0x5c8>
			instance->ticker_id_slot_previous = id_expired;
   34d6c:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   34d70:	f8cb 1018 	str.w	r1, [fp, #24]
   34d74:	e6a7      	b.n	34ac6 <ticker_job+0x3fe>
   34d76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   34d78:	83e1      	strh	r1, [r4, #30]
   34d7a:	4676      	mov	r6, lr
   34d7c:	e632      	b.n	349e4 <ticker_job+0x31c>
			ticks_to_expire_minus +=
   34d7e:	440a      	add	r2, r1
   34d80:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   34d82:	e7e9      	b.n	34d58 <ticker_job+0x690>
					ticker->req = ticker->ack;
   34d84:	f884 e001 	strb.w	lr, [r4, #1]
   34d88:	2500      	movs	r5, #0
   34d8a:	e7b2      	b.n	34cf2 <ticker_job+0x62a>
	ticker_new->next = current;
   34d8c:	f88c 3000 	strb.w	r3, [ip]
   34d90:	4639      	mov	r1, r7
		instance->ticker_id_head = id;
   34d92:	f88b a01d 	strb.w	sl, [fp, #29]
   34d96:	e720      	b.n	34bda <ticker_job+0x512>
	ticker_new->next = current;
   34d98:	f80e 3001 	strb.w	r3, [lr, r1]
		instance->ticker_id_head = id;
   34d9c:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   34da0:	e727      	b.n	34bf2 <ticker_job+0x52a>
   34da2:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
   34da4:	f8cc 1008 	str.w	r1, [ip, #8]
	if (previous == TICKER_NULL) {
   34da8:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   34daa:	f88c 3000 	strb.w	r3, [ip]
	if (previous == TICKER_NULL) {
   34dae:	d0f0      	beq.n	34d92 <ticker_job+0x6ca>
   34db0:	e70d      	b.n	34bce <ticker_job+0x506>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   34db2:	f8b5 c014 	ldrh.w	ip, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   34db6:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   34dba:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
   34dbe:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   34dc2:	459c      	cmp	ip, r3
   34dc4:	e9d5 7203 	ldrd	r7, r2, [r5, #12]
   34dc8:	d03a      	beq.n	34e40 <ticker_job+0x778>
		ticker->must_expire =
   34dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34dce:	ebac 0303 	sub.w	r3, ip, r3
   34dd2:	fab3 f383 	clz	r3, r3
   34dd6:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
   34dd8:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
   34ddc:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
   34de0:	6067      	str	r7, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   34de2:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
   34de4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   34de8:	45cc      	cmp	ip, r9
   34dea:	bf88      	it	hi
   34dec:	f04f 0c00 	movhi.w	ip, #0
	ticker->timeout_func = start->fp_timeout_func;
   34df0:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   34df4:	686f      	ldr	r7, [r5, #4]
	ticker->lazy_periodic =
   34df6:	f8a4 c01c 	strh.w	ip, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   34dfa:	61a3      	str	r3, [r4, #24]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   34dfc:	eba7 0c0e 	sub.w	ip, r7, lr
	ticker->context = start->context;
   34e00:	6a2b      	ldr	r3, [r5, #32]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   34e02:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
	ticker->context = start->context;
   34e06:	e9c4 2303 	strd	r2, r3, [r4, #12]
	ticker->ticks_to_expire = start->ticks_first;
   34e0a:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   34e0c:	d10c      	bne.n	34e28 <ticker_job+0x760>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34e0e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   34e12:	4463      	add	r3, ip
	if (ticks_to_expire > ticks_to_expire_minus) {
   34e14:	b18b      	cbz	r3, 34e3a <ticker_job+0x772>
	ticker->ticks_to_expire = ticks_to_expire;
   34e16:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   34e18:	2300      	movs	r3, #0
   34e1a:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   34e1c:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   34e1e:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   34e22:	6160      	str	r0, [r4, #20]
	ticker->force = 1U;
   34e24:	70e3      	strb	r3, [r4, #3]
   34e26:	e699      	b.n	34b5c <ticker_job+0x494>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34e28:	ebae 0707 	sub.w	r7, lr, r7
   34e2c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   34e30:	42bb      	cmp	r3, r7
   34e32:	d90b      	bls.n	34e4c <ticker_job+0x784>
			ticks_to_expire -= delta_current_start;
   34e34:	1bdb      	subs	r3, r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   34e36:	2b00      	cmp	r3, #0
   34e38:	d1ed      	bne.n	34e16 <ticker_job+0x74e>
		ticks_to_expire_minus -= ticks_to_expire;
   34e3a:	4618      	mov	r0, r3
		ticks_to_expire = 0U;
   34e3c:	2300      	movs	r3, #0
   34e3e:	e7ea      	b.n	34e16 <ticker_job+0x74e>
	ticker->ext_data = start->ext_data;
   34e40:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   34e44:	6067      	str	r7, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   34e46:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   34e48:	4684      	mov	ip, r0
   34e4a:	e7d1      	b.n	34df0 <ticker_job+0x728>
			    (delta_current_start - ticks_to_expire);
   34e4c:	1afb      	subs	r3, r7, r3
		ticks_to_expire_minus -= ticks_to_expire;
   34e4e:	4618      	mov	r0, r3
		ticks_to_expire = 0U;
   34e50:	2300      	movs	r3, #0
   34e52:	e7e0      	b.n	34e16 <ticker_job+0x74e>
	nodes = &instance->nodes[0];
   34e54:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   34e58:	f89b 301d 	ldrb.w	r3, [fp, #29]
	uint8_t  rescheduled = 0U;
   34e5c:	2400      	movs	r4, #0
		while (ticker_id_head != TICKER_NULL) {
   34e5e:	2bff      	cmp	r3, #255	; 0xff
   34e60:	d011      	beq.n	34e86 <ticker_job+0x7be>
   34e62:	4699      	mov	r9, r3
			ticker = &nodes[ticker_id_head];
   34e64:	fa0f f289 	sxth.w	r2, r9
   34e68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   34e6c:	0112      	lsls	r2, r2, #4
   34e6e:	eb0a 0102 	add.w	r1, sl, r2
			ext_data = ticker->ext_data;
   34e72:	6a8d      	ldr	r5, [r1, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   34e74:	b115      	cbz	r5, 34e7c <ticker_job+0x7b4>
   34e76:	7a28      	ldrb	r0, [r5, #8]
   34e78:	2801      	cmp	r0, #1
   34e7a:	d058      	beq.n	34f2e <ticker_job+0x866>
			ticker_id_head = ticker->next;
   34e7c:	f81a 9002 	ldrb.w	r9, [sl, r2]
		while (ticker_id_head != TICKER_NULL) {
   34e80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   34e84:	d1ee      	bne.n	34e64 <ticker_job+0x79c>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   34e86:	2c00      	cmp	r4, #0
   34e88:	f040 8237 	bne.w	352fa <ticker_job+0xc32>
	if (instance->ticker_id_head != ticker_id_old_head) {
   34e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34e8e:	429a      	cmp	r2, r3
   34e90:	f000 821a 	beq.w	352c8 <ticker_job+0xc00>
	if (!pending) {
   34e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   34e96:	2b00      	cmp	r3, #0
   34e98:	f000 8237 	beq.w	3530a <ticker_job+0xc42>
   34e9c:	f89b 301d 	ldrb.w	r3, [fp, #29]
	if (instance->ticker_id_head == TICKER_NULL) {
   34ea0:	2bff      	cmp	r3, #255	; 0xff
   34ea2:	f000 82f0 	beq.w	35486 <ticker_job+0xdbe>
	if (ticker_id_old_head == TICKER_NULL) {
   34ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   34ea8:	2aff      	cmp	r2, #255	; 0xff
   34eaa:	f000 82df 	beq.w	3546c <ticker_job+0xda4>
	ticks_to_expire = ticker->ticks_to_expire;
   34eae:	f8db 2000 	ldr.w	r2, [fp]
		LL_ASSERT(i);
   34eb2:	f8df 8150 	ldr.w	r8, [pc, #336]	; 35004 <ticker_job+0x93c>
   34eb6:	4f51      	ldr	r7, [pc, #324]	; (34ffc <ticker_job+0x934>)
   34eb8:	4e51      	ldr	r6, [pc, #324]	; (35000 <ticker_job+0x938>)
	ticker = &instance->nodes[instance->ticker_id_head];
   34eba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   34ebe:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	i = 10U;
   34ec2:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   34ec4:	f8d2 9008 	ldr.w	r9, [r2, #8]
		ctr = cntr_cnt_get();
   34ec8:	f00e f8f4 	bl	430b4 <cntr_cnt_get>
		cc = instance->ticks_current;
   34ecc:	f8db 4014 	ldr.w	r4, [fp, #20]
		instance->trigger_set_cb(cc);
   34ed0:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34ed4:	1b02      	subs	r2, r0, r4
   34ed6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   34eda:	3203      	adds	r2, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   34edc:	454a      	cmp	r2, r9
   34ede:	bf2c      	ite	cs
   34ee0:	18a4      	addcs	r4, r4, r2
   34ee2:	444c      	addcc	r4, r9
		cc &= HAL_TICKER_CNTR_MASK;
   34ee4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   34ee8:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   34eea:	4620      	mov	r0, r4
   34eec:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   34eee:	f00e f8e1 	bl	430b4 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   34ef2:	eba0 000a 	sub.w	r0, r0, sl
   34ef6:	eba4 040a 	sub.w	r4, r4, sl
   34efa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   34efe:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   34f02:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
   34f04:	42a0      	cmp	r0, r4
		i--;
   34f06:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   34f0a:	f240 81e3 	bls.w	352d4 <ticker_job+0xc0c>
		LL_ASSERT(i);
   34f0e:	2d00      	cmp	r5, #0
   34f10:	d1da      	bne.n	34ec8 <ticker_job+0x800>
   34f12:	f640 133e 	movw	r3, #2366	; 0x93e
   34f16:	4642      	mov	r2, r8
   34f18:	4639      	mov	r1, r7
   34f1a:	4630      	mov	r0, r6
   34f1c:	f015 f8de 	bl	4a0dc <printk>
   34f20:	4040      	eors	r0, r0
   34f22:	f380 8811 	msr	BASEPRI, r0
   34f26:	f04f 0003 	mov.w	r0, #3
   34f2a:	df02      	svc	2
   34f2c:	e7cc      	b.n	34ec8 <ticker_job+0x800>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   34f2e:	f89b 201c 	ldrb.w	r2, [fp, #28]
   34f32:	2aff      	cmp	r2, #255	; 0xff
   34f34:	d04c      	beq.n	34fd0 <ticker_job+0x908>
			instance->ticks_slot_previous > ticks_elapsed) {
   34f36:	f8db 4018 	ldr.w	r4, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   34f3a:	9a01      	ldr	r2, [sp, #4]
   34f3c:	42a2      	cmp	r2, r4
   34f3e:	d247      	bcs.n	34fd0 <ticker_job+0x908>
			window_start_ticks = instance->ticks_slot_previous -
   34f40:	1aa2      	subs	r2, r4, r2
   34f42:	9200      	str	r2, [sp, #0]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   34f44:	686e      	ldr	r6, [r5, #4]
   34f46:	688a      	ldr	r2, [r1, #8]
   34f48:	682f      	ldr	r7, [r5, #0]
		ticker_id_iter = nodes[ticker_id_head].next;
   34f4a:	7808      	ldrb	r0, [r1, #0]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   34f4c:	1ab2      	subs	r2, r6, r2
   34f4e:	42be      	cmp	r6, r7
   34f50:	9202      	str	r2, [sp, #8]
   34f52:	d27f      	bcs.n	35054 <ticker_job+0x98c>
		while (ticker_id_iter != TICKER_NULL &&
   34f54:	28ff      	cmp	r0, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   34f56:	eba7 0606 	sub.w	r6, r7, r6
		while (ticker_id_iter != TICKER_NULL &&
   34f5a:	f000 82a0 	beq.w	3549e <ticker_job+0xdd6>
		       ticks_start_offset + ticker->ticks_slot <=
   34f5e:	698f      	ldr	r7, [r1, #24]
		while (ticker_id_iter != TICKER_NULL &&
   34f60:	42b7      	cmp	r7, r6
   34f62:	f200 82a1 	bhi.w	354a8 <ticker_job+0xde0>
			ticks_to_expire     = ticks_slot_window -
   34f66:	1bf2      	subs	r2, r6, r7
		while (ticker_id_iter != TICKER_NULL &&
   34f68:	2300      	movs	r3, #0
			ticks_to_expire     = ticks_slot_window -
   34f6a:	9203      	str	r2, [sp, #12]
		while (ticker_id_iter != TICKER_NULL &&
   34f6c:	469e      	mov	lr, r3
			ticks_to_expire     = ticks_slot_window -
   34f6e:	46b8      	mov	r8, r7
   34f70:	9104      	str	r1, [sp, #16]
   34f72:	4602      	mov	r2, r0
   34f74:	e01d      	b.n	34fb2 <ticker_job+0x8ea>
			if (node->ticks_to_expire >
   34f76:	f8dc 4008 	ldr.w	r4, [ip, #8]
					MIN(ticks_slot_window,
   34f7a:	1f23      	subs	r3, r4, #4
			if (node->ticks_to_expire >
   34f7c:	2c04      	cmp	r4, #4
					MIN(ticks_slot_window,
   34f7e:	4473      	add	r3, lr
			if (node->ticks_to_expire >
   34f80:	d909      	bls.n	34f96 <ticker_job+0x8ce>
				window_end_ticks =
   34f82:	42b3      	cmp	r3, r6
   34f84:	bf28      	it	cs
   34f86:	4633      	movcs	r3, r6
			if (window_end_ticks > ticks_start_offset +
   34f88:	4598      	cmp	r8, r3
   34f8a:	d204      	bcs.n	34f96 <ticker_job+0x8ce>
			if (ticks_to_expire != 0U &&
   34f8c:	1bdb      	subs	r3, r3, r7
   34f8e:	d002      	beq.n	34f96 <ticker_job+0x8ce>
   34f90:	9900      	ldr	r1, [sp, #0]
   34f92:	428b      	cmp	r3, r1
   34f94:	d21f      	bcs.n	34fd6 <ticker_job+0x90e>
			window_start_ticks  = node->ticks_to_expire +
   34f96:	f8dc 3018 	ldr.w	r3, [ip, #24]
			ticker_id_iter = node->next;
   34f9a:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   34f9e:	18e3      	adds	r3, r4, r3
   34fa0:	9300      	str	r3, [sp, #0]
			ticks_to_expire     = ticks_slot_window -
   34fa2:	9b03      	ldr	r3, [sp, #12]
			ticks_start_offset += node->ticks_to_expire;
   34fa4:	44a6      	add	lr, r4
		while (ticker_id_iter != TICKER_NULL &&
   34fa6:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   34fa8:	eb0e 0807 	add.w	r8, lr, r7
		while (ticker_id_iter != TICKER_NULL &&
   34fac:	d013      	beq.n	34fd6 <ticker_job+0x90e>
   34fae:	4546      	cmp	r6, r8
   34fb0:	d311      	bcc.n	34fd6 <ticker_job+0x90e>
			node = &nodes[ticker_id_iter];
   34fb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   34fb6:	0112      	lsls	r2, r2, #4
   34fb8:	eb0a 0c02 	add.w	ip, sl, r2
			if (node->ext_data &&
   34fbc:	f8dc 4028 	ldr.w	r4, [ip, #40]	; 0x28
   34fc0:	2c00      	cmp	r4, #0
   34fc2:	d0d8      	beq.n	34f76 <ticker_job+0x8ae>
   34fc4:	7a24      	ldrb	r4, [r4, #8]
   34fc6:	2c01      	cmp	r4, #1
   34fc8:	d1d5      	bne.n	34f76 <ticker_job+0x8ae>
				ticker_id_iter = node->next;
   34fca:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   34fce:	e7ea      	b.n	34fa6 <ticker_job+0x8de>
		window_start_ticks = 0U;
   34fd0:	2200      	movs	r2, #0
   34fd2:	9200      	str	r2, [sp, #0]
   34fd4:	e7b6      	b.n	34f44 <ticker_job+0x87c>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   34fd6:	9c02      	ldr	r4, [sp, #8]
   34fd8:	9904      	ldr	r1, [sp, #16]
			node = &nodes[ticker_id_iter];
   34fda:	eb00 0240 	add.w	r2, r0, r0, lsl #1
		ticker->ext_data->ticks_drift += ticks_to_expire -
   34fde:	441c      	add	r4, r3
			node = &nodes[ticker_id_iter];
   34fe0:	eb0a 1202 	add.w	r2, sl, r2, lsl #4
		ticker->ext_data->ticks_drift += ticks_to_expire -
   34fe4:	606c      	str	r4, [r5, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   34fe6:	608b      	str	r3, [r1, #8]
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   34fe8:	6897      	ldr	r7, [r2, #8]
   34fea:	429f      	cmp	r7, r3
   34fec:	bf38      	it	cc
   34fee:	4604      	movcc	r4, r0
   34ff0:	d311      	bcc.n	35016 <ticker_job+0x94e>
   34ff2:	e03c      	b.n	3506e <ticker_job+0x9a6>
   34ff4:	7f172b59 	.word	0x7f172b59
   34ff8:	ff172b5a 	.word	0xff172b5a
   34ffc:	00052d8c 	.word	0x00052d8c
   35000:	00052d50 	.word	0x00052d50
   35004:	00052d10 	.word	0x00052d10
   35008:	f8d2 e008 	ldr.w	lr, [r2, #8]
   3500c:	45b6      	cmp	lr, r6
   3500e:	d233      	bcs.n	35078 <ticker_job+0x9b0>
   35010:	4677      	mov	r7, lr
   35012:	4633      	mov	r3, r6
   35014:	4664      	mov	r4, ip
				ticker->ticks_to_expire -=
   35016:	1bde      	subs	r6, r3, r7
   35018:	608e      	str	r6, [r1, #8]
			ticker_id_iter = node->next;
   3501a:	f892 c000 	ldrb.w	ip, [r2]
			node = &nodes[ticker_id_iter];
   3501e:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
		while (ticker_id_iter != TICKER_NULL) {
   35022:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
			node = &nodes[ticker_id_iter];
   35026:	eb0a 1202 	add.w	r2, sl, r2, lsl #4
		while (ticker_id_iter != TICKER_NULL) {
   3502a:	d1ed      	bne.n	35008 <ticker_job+0x940>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   3502c:	b222      	sxth	r2, r4
   3502e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   35032:	0112      	lsls	r2, r2, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   35034:	f88b 001d 	strb.w	r0, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   35038:	f81a 3002 	ldrb.w	r3, [sl, r2]
   3503c:	700b      	strb	r3, [r1, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   3503e:	f80a 9002 	strb.w	r9, [sl, r2]
   35042:	4603      	mov	r3, r0
		ticker->lazy_current--;
   35044:	8bca      	ldrh	r2, [r1, #30]
   35046:	3a01      	subs	r2, #1
   35048:	83ca      	strh	r2, [r1, #30]
		ext_data->reschedule_state =
   3504a:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
   3504e:	2401      	movs	r4, #1
		ext_data->reschedule_state =
   35050:	722a      	strb	r2, [r5, #8]
		rescheduled  = 1U;
   35052:	e704      	b.n	34e5e <ticker_job+0x796>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   35054:	9a02      	ldr	r2, [sp, #8]
   35056:	606a      	str	r2, [r5, #4]
		while (ticker_id_iter != TICKER_NULL) {
   35058:	28ff      	cmp	r0, #255	; 0xff
		ticker->ticks_to_expire = ticks_to_expire;
   3505a:	f04f 0200 	mov.w	r2, #0
   3505e:	608a      	str	r2, [r1, #8]
		while (ticker_id_iter != TICKER_NULL) {
   35060:	d0f0      	beq.n	35044 <ticker_job+0x97c>
			node = &nodes[ticker_id_iter];
   35062:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   35066:	eb0a 1200 	add.w	r2, sl, r0, lsl #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   3506a:	2300      	movs	r3, #0
   3506c:	6897      	ldr	r7, [r2, #8]
				node->ticks_to_expire -=
   3506e:	1afb      	subs	r3, r7, r3
   35070:	6093      	str	r3, [r2, #8]
		if (ticker_id_prev != TICKER_NULL) {
   35072:	f89b 301d 	ldrb.w	r3, [fp, #29]
   35076:	e7e5      	b.n	35044 <ticker_job+0x97c>
   35078:	4676      	mov	r6, lr
				node->ticks_to_expire -=
   3507a:	443e      	add	r6, r7
   3507c:	1af3      	subs	r3, r6, r3
   3507e:	6093      	str	r3, [r2, #8]
				break;
   35080:	e7d4      	b.n	3502c <ticker_job+0x964>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   35082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   35084:	9303      	str	r3, [sp, #12]
	node = &instance->nodes[0];
   35086:	f8da 3000 	ldr.w	r3, [sl]
   3508a:	9305      	str	r3, [sp, #20]
	users = &instance->users[0];
   3508c:	f8da 3004 	ldr.w	r3, [sl, #4]
   35090:	9306      	str	r3, [sp, #24]
	count_user = instance->count_user;
   35092:	f89a 3009 	ldrb.w	r3, [sl, #9]
   35096:	9302      	str	r3, [sp, #8]
	while (count_user--) {
   35098:	9b02      	ldr	r3, [sp, #8]
   3509a:	3b01      	subs	r3, #1
   3509c:	b2db      	uxtb	r3, r3
   3509e:	2bff      	cmp	r3, #255	; 0xff
   350a0:	9302      	str	r3, [sp, #8]
   350a2:	f000 810b 	beq.w	352bc <ticker_job+0xbf4>
		user = &users[count_user];
   350a6:	9b06      	ldr	r3, [sp, #24]
   350a8:	9a02      	ldr	r2, [sp, #8]
   350aa:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
		user_ops = (void *)&user->user_op[0];
   350ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   350b2:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   350b6:	9301      	str	r3, [sp, #4]
		while ((insert_head != TICKER_NULL) ||
   350b8:	9b00      	ldr	r3, [sp, #0]
   350ba:	2bff      	cmp	r3, #255	; 0xff
   350bc:	d066      	beq.n	3518c <ticker_job+0xac4>
				ticker = &node[id_insert];
   350be:	f8dd a000 	ldr.w	sl, [sp]
   350c2:	9b05      	ldr	r3, [sp, #20]
   350c4:	fa0f f18a 	sxth.w	r1, sl
   350c8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   350cc:	0109      	lsls	r1, r1, #4
   350ce:	185c      	adds	r4, r3, r1
				insert_head = ticker->next;
   350d0:	5c5b      	ldrb	r3, [r3, r1]
   350d2:	9300      	str	r3, [sp, #0]
				user_op = NULL;
   350d4:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   350d6:	22ff      	movs	r2, #255	; 0xff
   350d8:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   350da:	f8db e000 	ldr.w	lr, [fp]
	current = instance->ticker_id_head;
   350de:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   350e2:	eb0e 0c01 	add.w	ip, lr, r1
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   350e6:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   350e8:	f8dc 7008 	ldr.w	r7, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   350ec:	f000 8088 	beq.w	35200 <ticker_job+0xb38>
		(ticker_current = &node[current])->ticks_to_expire))) {
   350f0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   350f4:	eb0e 1000 	add.w	r0, lr, r0, lsl #4
		(ticks_to_expire_current =
   350f8:	6881      	ldr	r1, [r0, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   350fa:	428f      	cmp	r7, r1
   350fc:	d37a      	bcc.n	351f4 <ticker_job+0xb2c>
   350fe:	9204      	str	r2, [sp, #16]
   35100:	e003      	b.n	3510a <ticker_job+0xa42>
		(ticks_to_expire_current =
   35102:	6881      	ldr	r1, [r0, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   35104:	42b9      	cmp	r1, r7
   35106:	d811      	bhi.n	3512c <ticker_job+0xa64>
   35108:	464b      	mov	r3, r9
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   3510a:	1a7f      	subs	r7, r7, r1
   3510c:	d104      	bne.n	35118 <ticker_job+0xa50>
   3510e:	f8bc 901e 	ldrh.w	r9, [ip, #30]
   35112:	8bc2      	ldrh	r2, [r0, #30]
   35114:	4591      	cmp	r9, r2
   35116:	d878      	bhi.n	3520a <ticker_job+0xb42>
		current = ticker_current->next;
   35118:	f890 9000 	ldrb.w	r9, [r0]
   3511c:	9304      	str	r3, [sp, #16]
		(ticker_current = &node[current])->ticks_to_expire))) {
   3511e:	eb09 0049 	add.w	r0, r9, r9, lsl #1
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   35122:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		(ticker_current = &node[current])->ticks_to_expire))) {
   35126:	eb0e 1000 	add.w	r0, lr, r0, lsl #4
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   3512a:	d1ea      	bne.n	35102 <ticker_job+0xa3a>
	ticker_new->next = current;
   3512c:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   3512e:	f8cc 7008 	str.w	r7, [ip, #8]
	ticker_new->next = current;
   35132:	f88c 9000 	strb.w	r9, [ip]
   35136:	4639      	mov	r1, r7
   35138:	464b      	mov	r3, r9
		node[previous].next = id;
   3513a:	b212      	sxth	r2, r2
   3513c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   35140:	0112      	lsls	r2, r2, #4
   35142:	f80e a002 	strb.w	sl, [lr, r2]
	if (current != TICKER_NULL) {
   35146:	2bff      	cmp	r3, #255	; 0xff
   35148:	d009      	beq.n	3515e <ticker_job+0xa96>
		node[current].ticks_to_expire -= ticks_to_expire;
   3514a:	b21b      	sxth	r3, r3
   3514c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   35150:	eb0e 1e03 	add.w	lr, lr, r3, lsl #4
   35154:	f8de 3008 	ldr.w	r3, [lr, #8]
   35158:	1a59      	subs	r1, r3, r1
   3515a:	f8ce 1008 	str.w	r1, [lr, #8]
	ticker->req = ticker->ack + 1;
   3515e:	78a3      	ldrb	r3, [r4, #2]
   35160:	3301      	adds	r3, #1
   35162:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   35164:	2d00      	cmp	r5, #0
   35166:	d0a7      	beq.n	350b8 <ticker_job+0x9f0>
	if (user_op->fp_op_func) {
   35168:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   3516a:	9a03      	ldr	r2, [sp, #12]
   3516c:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   3516e:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   35170:	b113      	cbz	r3, 35178 <ticker_job+0xab0>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   35172:	6b29      	ldr	r1, [r5, #48]	; 0x30
   35174:	2000      	movs	r0, #0
   35176:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   35178:	6863      	ldr	r3, [r4, #4]
   3517a:	2b00      	cmp	r3, #0
   3517c:	d19c      	bne.n	350b8 <ticker_job+0x9f0>
					ticker->op_context =
   3517e:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   35182:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   35186:	9b00      	ldr	r3, [sp, #0]
   35188:	2bff      	cmp	r3, #255	; 0xff
   3518a:	d198      	bne.n	350be <ticker_job+0x9f6>
   3518c:	f898 7002 	ldrb.w	r7, [r8, #2]
				user_op = &user_ops[user_ops_first];
   35190:	eb06 0346 	add.w	r3, r6, r6, lsl #1
				first = user_ops_first + 1;
   35194:	1c72      	adds	r2, r6, #1
				user_op = &user_ops[user_ops_first];
   35196:	eb06 0383 	add.w	r3, r6, r3, lsl #2
		while ((insert_head != TICKER_NULL) ||
   3519a:	42be      	cmp	r6, r7
				first = user_ops_first + 1;
   3519c:	b2d6      	uxtb	r6, r2
				user_op = &user_ops[user_ops_first];
   3519e:	9a01      	ldr	r2, [sp, #4]
   351a0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		while ((insert_head != TICKER_NULL) ||
   351a4:	f43f af78 	beq.w	35098 <ticker_job+0x9d0>
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   351a8:	9a01      	ldr	r2, [sp, #4]
				if (first == user->count_user_op) {
   351aa:	f898 1000 	ldrb.w	r1, [r8]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   351ae:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
					first = 0U;
   351b2:	42b1      	cmp	r1, r6
   351b4:	bf08      	it	eq
   351b6:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   351b8:	2a04      	cmp	r2, #4
   351ba:	d1e9      	bne.n	35190 <ticker_job+0xac8>
				id_insert = user_op->id;
   351bc:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   351c0:	9805      	ldr	r0, [sp, #20]
   351c2:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
   351c6:	0109      	lsls	r1, r1, #4
   351c8:	1844      	adds	r4, r0, r1
				if (((ticker->req -
   351ca:	7860      	ldrb	r0, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   351cc:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   351ce:	1a80      	subs	r0, r0, r2
   351d0:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   351d4:	d021      	beq.n	3521a <ticker_job+0xb52>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   351d6:	9a01      	ldr	r2, [sp, #4]
   351d8:	9903      	ldr	r1, [sp, #12]
   351da:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	if (user_op->fp_op_func) {
   351de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   351e0:	2201      	movs	r2, #1
   351e2:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   351e4:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   351e6:	2b00      	cmp	r3, #0
   351e8:	d0d2      	beq.n	35190 <ticker_job+0xac8>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   351ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
   351ec:	4798      	blx	r3
   351ee:	f898 7002 	ldrb.w	r7, [r8, #2]
   351f2:	e7cd      	b.n	35190 <ticker_job+0xac8>
	ticker_new->next = current;
   351f4:	f88c 3000 	strb.w	r3, [ip]
   351f8:	4639      	mov	r1, r7
		instance->ticker_id_head = id;
   351fa:	f88b a01d 	strb.w	sl, [fp, #29]
   351fe:	e7a2      	b.n	35146 <ticker_job+0xa7e>
	ticker_new->next = current;
   35200:	f80e 3001 	strb.w	r3, [lr, r1]
		instance->ticker_id_head = id;
   35204:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   35208:	e7a9      	b.n	3515e <ticker_job+0xa96>
   3520a:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
   3520c:	f8cc 1008 	str.w	r1, [ip, #8]
	if (previous == TICKER_NULL) {
   35210:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   35212:	f88c 3000 	strb.w	r3, [ip]
	if (previous == TICKER_NULL) {
   35216:	d0f0      	beq.n	351fa <ticker_job+0xb32>
   35218:	e78f      	b.n	3513a <ticker_job+0xa72>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   3521a:	f8b5 c014 	ldrh.w	ip, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   3521e:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   35222:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
   35226:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   3522a:	459c      	cmp	ip, r3
   3522c:	e9d5 7203 	ldrd	r7, r2, [r5, #12]
   35230:	d03a      	beq.n	352a8 <ticker_job+0xbe0>
		ticker->must_expire =
   35232:	f64f 73ff 	movw	r3, #65535	; 0xffff
   35236:	ebac 0303 	sub.w	r3, ip, r3
   3523a:	fab3 f383 	clz	r3, r3
   3523e:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
   35240:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
   35244:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
   35248:	6067      	str	r7, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   3524a:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
   3524c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   35250:	45cc      	cmp	ip, r9
   35252:	bf88      	it	hi
   35254:	f04f 0c00 	movhi.w	ip, #0
	ticker->timeout_func = start->fp_timeout_func;
   35258:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   3525c:	686f      	ldr	r7, [r5, #4]
	ticker->lazy_periodic =
   3525e:	f8a4 c01c 	strh.w	ip, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   35262:	61a3      	str	r3, [r4, #24]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   35264:	eba7 0c0e 	sub.w	ip, r7, lr
	ticker->context = start->context;
   35268:	6a2b      	ldr	r3, [r5, #32]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   3526a:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
	ticker->context = start->context;
   3526e:	e9c4 2303 	strd	r2, r3, [r4, #12]
	ticker->ticks_to_expire = start->ticks_first;
   35272:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   35274:	d10c      	bne.n	35290 <ticker_job+0xbc8>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   35276:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   3527a:	4463      	add	r3, ip
	if (ticks_to_expire > ticks_to_expire_minus) {
   3527c:	b18b      	cbz	r3, 352a2 <ticker_job+0xbda>
	ticker->ticks_to_expire = ticks_to_expire;
   3527e:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   35280:	9b03      	ldr	r3, [sp, #12]
   35282:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   35284:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   35286:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   3528a:	6160      	str	r0, [r4, #20]
	ticker->force = 1U;
   3528c:	70e3      	strb	r3, [r4, #3]
   3528e:	e722      	b.n	350d6 <ticker_job+0xa0e>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   35290:	ebae 0707 	sub.w	r7, lr, r7
   35294:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   35298:	42bb      	cmp	r3, r7
   3529a:	d90b      	bls.n	352b4 <ticker_job+0xbec>
			ticks_to_expire -= delta_current_start;
   3529c:	1bdb      	subs	r3, r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   3529e:	2b00      	cmp	r3, #0
   352a0:	d1ed      	bne.n	3527e <ticker_job+0xbb6>
		ticks_to_expire_minus -= ticks_to_expire;
   352a2:	4618      	mov	r0, r3
		ticks_to_expire = 0U;
   352a4:	2300      	movs	r3, #0
   352a6:	e7ea      	b.n	3527e <ticker_job+0xbb6>
	ticker->ext_data = start->ext_data;
   352a8:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   352ac:	6067      	str	r7, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   352ae:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   352b0:	4684      	mov	ip, r0
   352b2:	e7d1      	b.n	35258 <ticker_job+0xb90>
			    (delta_current_start - ticks_to_expire);
   352b4:	1afb      	subs	r3, r7, r3
		ticks_to_expire_minus -= ticks_to_expire;
   352b6:	4618      	mov	r0, r3
		ticks_to_expire = 0U;
   352b8:	2300      	movs	r3, #0
   352ba:	e7e0      	b.n	3527e <ticker_job+0xbb6>
   352bc:	f89b 301d 	ldrb.w	r3, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
   352c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   352c2:	429a      	cmp	r2, r3
   352c4:	f47f ade6 	bne.w	34e94 <ticker_job+0x7cc>
	if (!pending) {
   352c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   352ca:	b303      	cbz	r3, 3530e <ticker_job+0xc46>
	if (flag_compare_update) {
   352cc:	9b07      	ldr	r3, [sp, #28]
   352ce:	2b00      	cmp	r3, #0
   352d0:	f47f ade4 	bne.w	34e9c <ticker_job+0x7d4>
	if (instance->worker_trigger) {
   352d4:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   352d8:	2200      	movs	r2, #0
   352da:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   352de:	2b00      	cmp	r3, #0
   352e0:	f000 8093 	beq.w	3540a <ticker_job+0xd42>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   352e4:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   352e8:	465b      	mov	r3, fp
   352ea:	2201      	movs	r2, #1
   352ec:	2103      	movs	r1, #3
   352ee:	2004      	movs	r0, #4
   352f0:	46a4      	mov	ip, r4
}
   352f2:	b00f      	add	sp, #60	; 0x3c
   352f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   352f8:	4760      	bx	ip
	if (instance->ticker_id_head != ticker_id_old_head) {
   352fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   352fc:	429a      	cmp	r2, r3
   352fe:	f47f adc9 	bne.w	34e94 <ticker_job+0x7cc>
	if (!pending) {
   35302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   35304:	2a00      	cmp	r2, #0
   35306:	f47f adcb 	bne.w	34ea0 <ticker_job+0x7d8>
			flag_compare_update = 1U;
   3530a:	2301      	movs	r3, #1
   3530c:	9307      	str	r3, [sp, #28]
	users = &instance->users[0];
   3530e:	f8db a004 	ldr.w	sl, [fp, #4]
	count_user = instance->count_user;
   35312:	f89b 5009 	ldrb.w	r5, [fp, #9]
	while (count_user--) {
   35316:	3d01      	subs	r5, #1
   35318:	b2ed      	uxtb	r5, r5
   3531a:	2dff      	cmp	r5, #255	; 0xff
   3531c:	d0d6      	beq.n	352cc <ticker_job+0xc04>
		user = &users[count_user];
   3531e:	eb0a 04c5 	add.w	r4, sl, r5, lsl #3
		while (user->first != user->last) {
   35322:	7863      	ldrb	r3, [r4, #1]
   35324:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
   35326:	f8d4 9004 	ldr.w	r9, [r4, #4]
		while (user->first != user->last) {
   3532a:	4299      	cmp	r1, r3
   3532c:	d10c      	bne.n	35348 <ticker_job+0xc80>
   3532e:	e7f2      	b.n	35316 <ticker_job+0xc4e>
	switch (uop->op) {
   35330:	2b01      	cmp	r3, #1
   35332:	d059      	beq.n	353e8 <ticker_job+0xd20>
			first = user->first + 1;
   35334:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   35336:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
   35338:	3301      	adds	r3, #1
   3533a:	b2db      	uxtb	r3, r3
				first = 0U;
   3533c:	429a      	cmp	r2, r3
   3533e:	bf08      	it	eq
   35340:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   35342:	4299      	cmp	r1, r3
			user->first = first;
   35344:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   35346:	d0e6      	beq.n	35316 <ticker_job+0xc4e>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   35348:	b21b      	sxth	r3, r3
   3534a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   3534e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   35352:	eb09 0283 	add.w	r2, r9, r3, lsl #2
	switch (uop->op) {
   35356:	f819 3023 	ldrb.w	r3, [r9, r3, lsl #2]
   3535a:	2b02      	cmp	r3, #2
   3535c:	d018      	beq.n	35390 <ticker_job+0xcc8>
   3535e:	2b03      	cmp	r3, #3
   35360:	d1e6      	bne.n	35330 <ticker_job+0xc68>
		if (uop->id < instance->count_node) {
   35362:	7851      	ldrb	r1, [r2, #1]
   35364:	f89b 3008 	ldrb.w	r3, [fp, #8]
   35368:	428b      	cmp	r3, r1
   3536a:	d944      	bls.n	353f6 <ticker_job+0xd2e>
			node[uop->id].priority =
   3536c:	f8db 3000 	ldr.w	r3, [fp]
   35370:	7910      	ldrb	r0, [r2, #4]
   35372:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   35376:	eb03 1101 	add.w	r1, r3, r1, lsl #4
			uop->status = TICKER_STATUS_SUCCESS;
   3537a:	2300      	movs	r3, #0
			node[uop->id].priority =
   3537c:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   35380:	6293      	str	r3, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   35382:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
   35384:	b113      	cbz	r3, 3538c <ticker_job+0xcc4>
		fp_op_func(uop->status, uop->op_context);
   35386:	6b11      	ldr	r1, [r2, #48]	; 0x30
   35388:	6a90      	ldr	r0, [r2, #40]	; 0x28
   3538a:	4798      	blx	r3
   3538c:	78e1      	ldrb	r1, [r4, #3]
   3538e:	e7d1      	b.n	35334 <ticker_job+0xc6c>
		ticker_by_next_slot_get(instance,
   35390:	e9d2 c101 	ldrd	ip, r1, [r2, #4]
	_ticker_id_head = *ticker_id_head;
   35394:	f89c 0000 	ldrb.w	r0, [ip]
		ticker_by_next_slot_get(instance,
   35398:	f8d2 800c 	ldr.w	r8, [r2, #12]
	node = instance->nodes;
   3539c:	f8db 6000 	ldr.w	r6, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
   353a0:	f8db 3014 	ldr.w	r3, [fp, #20]
   353a4:	28ff      	cmp	r0, #255	; 0xff
   353a6:	d002      	beq.n	353ae <ticker_job+0xce6>
   353a8:	680f      	ldr	r7, [r1, #0]
   353aa:	429f      	cmp	r7, r3
   353ac:	d026      	beq.n	353fc <ticker_job+0xd34>
		_ticker_id_head = instance->ticker_id_head;
   353ae:	f89b 001d 	ldrb.w	r0, [fp, #29]
		*ticks_current = instance->ticks_current;
   353b2:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
   353b4:	f04f 0e00 	mov.w	lr, #0
	while (_ticker_id_head != TICKER_NULL) {
   353b8:	28ff      	cmp	r0, #255	; 0xff
   353ba:	d011      	beq.n	353e0 <ticker_job+0xd18>
		ticker = &node[_ticker_id_head];
   353bc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   353c0:	eb06 1303 	add.w	r3, r6, r3, lsl #4
			if (ticker->ticks_slot) {
   353c4:	6999      	ldr	r1, [r3, #24]
   353c6:	b111      	cbz	r1, 353ce <ticker_job+0xd06>
   353c8:	e012      	b.n	353f0 <ticker_job+0xd28>
   353ca:	6999      	ldr	r1, [r3, #24]
   353cc:	b981      	cbnz	r1, 353f0 <ticker_job+0xd28>
		_ticker_id_head = ticker->next;
   353ce:	7818      	ldrb	r0, [r3, #0]
		_ticks_to_expire += ticker->ticks_to_expire;
   353d0:	6899      	ldr	r1, [r3, #8]
	while (_ticker_id_head != TICKER_NULL) {
   353d2:	28ff      	cmp	r0, #255	; 0xff
		ticker = &node[_ticker_id_head];
   353d4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   353d8:	eb06 1303 	add.w	r3, r6, r3, lsl #4
		_ticks_to_expire += ticker->ticks_to_expire;
   353dc:	448e      	add	lr, r1
	while (_ticker_id_head != TICKER_NULL) {
   353de:	d1f4      	bne.n	353ca <ticker_job+0xd02>
	*ticker_id_head = _ticker_id_head;
   353e0:	f88c 0000 	strb.w	r0, [ip]
	*ticks_to_expire = _ticks_to_expire;
   353e4:	f8c8 e000 	str.w	lr, [r8]
		uop->status = TICKER_STATUS_SUCCESS;
   353e8:	2300      	movs	r3, #0
   353ea:	6293      	str	r3, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   353ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		break;
   353ee:	e7c9      	b.n	35384 <ticker_job+0xcbc>
		_ticks_to_expire += ticker->ticks_to_expire;
   353f0:	689b      	ldr	r3, [r3, #8]
   353f2:	449e      	add	lr, r3
   353f4:	e7f4      	b.n	353e0 <ticker_job+0xd18>
			uop->status = TICKER_STATUS_FAILURE;
   353f6:	2301      	movs	r3, #1
   353f8:	6293      	str	r3, [r2, #40]	; 0x28
   353fa:	e7c2      	b.n	35382 <ticker_job+0xcba>
		ticker = &node[_ticker_id_head];
   353fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   35400:	0100      	lsls	r0, r0, #4
	_ticks_to_expire = *ticks_to_expire;
   35402:	f8d8 e000 	ldr.w	lr, [r8]
		_ticker_id_head = ticker->next;
   35406:	5c30      	ldrb	r0, [r6, r0]
   35408:	e7d6      	b.n	353b8 <ticker_job+0xcf0>
}
   3540a:	b00f      	add	sp, #60	; 0x3c
   3540c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35410:	4770      	bx	lr
					while (ticks_to_expire <
   35412:	459a      	cmp	sl, r3
   35414:	f67f ac93 	bls.w	34d3e <ticker_job+0x676>
   35418:	9606      	str	r6, [sp, #24]
   3541a:	1c47      	adds	r7, r0, #1
   3541c:	940b      	str	r4, [sp, #44]	; 0x2c
   3541e:	9e03      	ldr	r6, [sp, #12]
   35420:	e005      	b.n	3542e <ticker_job+0xd66>
	if ((ticker->remainder_current < BIT(31)) &&
   35422:	4605      	mov	r5, r0
						ticks_to_expire +=
   35424:	442b      	add	r3, r5
						lazy++;
   35426:	3101      	adds	r1, #1
					while (ticks_to_expire <
   35428:	459a      	cmp	sl, r3
						lazy++;
   3542a:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   3542c:	d911      	bls.n	35452 <ticker_job+0xd8a>
	if ((ticker->remainder_current < BIT(31)) &&
   3542e:	4d23      	ldr	r5, [pc, #140]	; (354bc <ticker_job+0xdf4>)
   35430:	4c23      	ldr	r4, [pc, #140]	; (354c0 <ticker_job+0xdf8>)
	ticker->remainder_current += ticker->remainder_periodic;
   35432:	4432      	add	r2, r6
	if ((ticker->remainder_current < BIT(31)) &&
   35434:	1955      	adds	r5, r2, r5
   35436:	42a5      	cmp	r5, r4
   35438:	d8f3      	bhi.n	35422 <ticker_job+0xd5a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   3543a:	463d      	mov	r5, r7
   3543c:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
   35440:	442b      	add	r3, r5
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   35442:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
   35446:	3101      	adds	r1, #1
					while (ticks_to_expire <
   35448:	459a      	cmp	sl, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   3544a:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
   3544e:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   35450:	d8ed      	bhi.n	3542e <ticker_job+0xd66>
   35452:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   35454:	9e06      	ldr	r6, [sp, #24]
   35456:	6262      	str	r2, [r4, #36]	; 0x24
   35458:	e471      	b.n	34d3e <ticker_job+0x676>
		flag_elapsed = 0U;
   3545a:	910c      	str	r1, [sp, #48]	; 0x30
		ticks_elapsed = 0U;
   3545c:	9101      	str	r1, [sp, #4]
   3545e:	f7ff b95a 	b.w	34716 <ticker_job+0x4e>
			ticker->ticks_to_expire -= ticks_elapsed;
   35462:	eba3 0308 	sub.w	r3, r3, r8
   35466:	60a3      	str	r3, [r4, #8]
			break;
   35468:	f7ff bb49 	b.w	34afe <ticker_job+0x436>
		ticks_current = cntr_cnt_get();
   3546c:	f00d fe22 	bl	430b4 <cntr_cnt_get>
   35470:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   35472:	f00d fde9 	bl	43048 <cntr_start>
   35476:	f89b 301d 	ldrb.w	r3, [fp, #29]
   3547a:	2800      	cmp	r0, #0
   3547c:	f47f ad17 	bne.w	34eae <ticker_job+0x7e6>
			instance->ticks_current = ticks_current;
   35480:	f8cb 4014 	str.w	r4, [fp, #20]
   35484:	e513      	b.n	34eae <ticker_job+0x7e6>
		if (cntr_stop() == 0) {
   35486:	f00d fdef 	bl	43068 <cntr_stop>
   3548a:	2800      	cmp	r0, #0
   3548c:	f47f af22 	bne.w	352d4 <ticker_job+0xc0c>
			instance->ticks_slot_previous = 0U;
   35490:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   35494:	f00d fe0e 	bl	430b4 <cntr_cnt_get>
   35498:	f8cb 0014 	str.w	r0, [fp, #20]
   3549c:	e71a      	b.n	352d4 <ticker_job+0xc0c>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   3549e:	9a02      	ldr	r2, [sp, #8]
   354a0:	606a      	str	r2, [r5, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   354a2:	2200      	movs	r2, #0
   354a4:	608a      	str	r2, [r1, #8]
		while (ticker_id_iter != TICKER_NULL) {
   354a6:	e5cd      	b.n	35044 <ticker_job+0x97c>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   354a8:	9b02      	ldr	r3, [sp, #8]
   354aa:	606b      	str	r3, [r5, #4]
			node = &nodes[ticker_id_iter];
   354ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   354b0:	eb0a 1200 	add.w	r2, sl, r0, lsl #4
		ticker->ticks_to_expire = ticks_to_expire;
   354b4:	2300      	movs	r3, #0
   354b6:	608b      	str	r3, [r1, #8]
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   354b8:	6897      	ldr	r7, [r2, #8]
   354ba:	e5d8      	b.n	3506e <ticker_job+0x9a6>
   354bc:	ff172b5a 	.word	0xff172b5a
   354c0:	7f172b59 	.word	0x7f172b59

000354c4 <ticker_init>:
{
   354c4:	b4f0      	push	{r4, r5, r6, r7}
   354c6:	9f04      	ldr	r7, [sp, #16]
   354c8:	f89d 4014 	ldrb.w	r4, [sp, #20]
   354cc:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   354ce:	2800      	cmp	r0, #0
   354d0:	d142      	bne.n	35558 <ticker_init+0x94>
	instance->count_node = count_node;
   354d2:	f8df c08c 	ldr.w	ip, [pc, #140]	; 35560 <ticker_init+0x9c>
	while (count_node--) {
   354d6:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
   354d8:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
   354dc:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
   354e0:	b2ed      	uxtb	r5, r5
   354e2:	b159      	cbz	r1, 354fc <ticker_init+0x38>
   354e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   354e8:	eb02 1105 	add.w	r1, r2, r5, lsl #4
   354ec:	e000      	b.n	354f0 <ticker_init+0x2c>
   354ee:	4629      	mov	r1, r5
   354f0:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   354f2:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
   354f6:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
	while (count_node--) {
   354fa:	d1f8      	bne.n	354ee <ticker_init+0x2a>
	while (count_user--) {
   354fc:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   354fe:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
   35502:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
   35506:	b2d2      	uxtb	r2, r2
   35508:	b18b      	cbz	r3, 3552e <ticker_init+0x6a>
   3550a:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   3550e:	e000      	b.n	35512 <ticker_init+0x4e>
   35510:	460a      	mov	r2, r1
		user_op_ += users[count_user].count_user_op;
   35512:	4611      	mov	r1, r2
		users[count_user].user_op = user_op_;
   35514:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   35516:	f811 3908 	ldrb.w	r3, [r1], #-8
   3551a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
   3551e:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
   35520:	4297      	cmp	r7, r2
		user_op_ += users[count_user].count_user_op;
   35522:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
   35526:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
   35528:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
   3552c:	d1f0      	bne.n	35510 <ticker_init+0x4c>
	if (count_op) {
   3552e:	b99c      	cbnz	r4, 35558 <ticker_init+0x94>
	instance->caller_id_get_cb = caller_id_get_cb;
   35530:	9a07      	ldr	r2, [sp, #28]
   35532:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
   35536:	9a08      	ldr	r2, [sp, #32]
   35538:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   3553c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   35540:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
   35542:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
   35546:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
   35548:	e9cc 4405 	strd	r4, r4, [ip, #20]
	instance->trigger_set_cb = trigger_set_cb;
   3554c:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   35550:	f8ac 301c 	strh.w	r3, [ip, #28]
}
   35554:	bcf0      	pop	{r4, r5, r6, r7}
   35556:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   35558:	2001      	movs	r0, #1
}
   3555a:	bcf0      	pop	{r4, r5, r6, r7}
   3555c:	4770      	bx	lr
   3555e:	bf00      	nop
   35560:	20004530 	.word	0x20004530

00035564 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   35564:	4a04      	ldr	r2, [pc, #16]	; (35578 <ticker_is_initialized+0x14>)
   35566:	232c      	movs	r3, #44	; 0x2c
   35568:	fb03 2000 	mla	r0, r3, r0, r2
   3556c:	7a00      	ldrb	r0, [r0, #8]
}
   3556e:	3000      	adds	r0, #0
   35570:	bf18      	it	ne
   35572:	2001      	movne	r0, #1
   35574:	4770      	bx	lr
   35576:	bf00      	nop
   35578:	20004530 	.word	0x20004530

0003557c <ticker_trigger>:
	if (instance->sched_cb) {
   3557c:	4b0a      	ldr	r3, [pc, #40]	; (355a8 <ticker_trigger+0x2c>)
   3557e:	222c      	movs	r2, #44	; 0x2c
   35580:	fb02 3200 	mla	r2, r2, r0, r3
{
   35584:	b410      	push	{r4}
	if (instance->sched_cb) {
   35586:	6a54      	ldr	r4, [r2, #36]	; 0x24
   35588:	b15c      	cbz	r4, 355a2 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   3558a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   3558e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   35592:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   35596:	46a4      	mov	ip, r4
   35598:	2201      	movs	r2, #1
   3559a:	2103      	movs	r1, #3
   3559c:	2002      	movs	r0, #2
}
   3559e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   355a0:	4760      	bx	ip
}
   355a2:	bc10      	pop	{r4}
   355a4:	4770      	bx	lr
   355a6:	bf00      	nop
   355a8:	20004530 	.word	0x20004530

000355ac <ticker_start_ext>:
{
   355ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   355b0:	4f2a      	ldr	r7, [pc, #168]	; (3565c <ticker_start_ext+0xb0>)
{
   355b2:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
   355b6:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   355ba:	fb0c 7c00 	mla	ip, ip, r0, r7
   355be:	b20d      	sxth	r5, r1
   355c0:	f8dc 4004 	ldr.w	r4, [ip, #4]
   355c4:	eb04 08c5 	add.w	r8, r4, r5, lsl #3
	if (last >= user->count_user_op) {
   355c8:	f814 a035 	ldrb.w	sl, [r4, r5, lsl #3]
	last = user->last + 1;
   355cc:	f898 4003 	ldrb.w	r4, [r8, #3]
	if (last == user->first) {
   355d0:	f898 9001 	ldrb.w	r9, [r8, #1]
	last = user->last + 1;
   355d4:	1c66      	adds	r6, r4, #1
   355d6:	b2f6      	uxtb	r6, r6
	struct ticker_instance *instance = &_instance[instance_index];
   355d8:	eb00 0580 	add.w	r5, r0, r0, lsl #2
		last = 0U;
   355dc:	45b2      	cmp	sl, r6
   355de:	bf98      	it	ls
   355e0:	2600      	movls	r6, #0
	struct ticker_instance *instance = &_instance[instance_index];
   355e2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
	if (last == user->first) {
   355e6:	45b1      	cmp	r9, r6
	struct ticker_instance *instance = &_instance[instance_index];
   355e8:	eb07 0785 	add.w	r7, r7, r5, lsl #2
	if (last == user->first) {
   355ec:	d032      	beq.n	35654 <ticker_start_ext+0xa8>
	user_op = &user->user_op[user->last];
   355ee:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   355f2:	4699      	mov	r9, r3
   355f4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   355f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   355fc:	00a5      	lsls	r5, r4, #2
   355fe:	195c      	adds	r4, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_START;
   35600:	f04f 0a04 	mov.w	sl, #4
   35604:	f803 a005 	strb.w	sl, [r3, r5]
	user_op->id = ticker_id;
   35608:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_first = ticks_first;
   3560a:	9a08      	ldr	r2, [sp, #32]
   3560c:	60a2      	str	r2, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   3560e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35610:	60e2      	str	r2, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   35612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   35614:	6122      	str	r2, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   35616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   35618:	61a2      	str	r2, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   3561a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   3561c:	6262      	str	r2, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   3561e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   35620:	61e2      	str	r2, [r4, #28]
	user_op->params.start.context = context;
   35622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   35624:	6222      	str	r2, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   35626:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   35628:	62e2      	str	r2, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   3562a:	2302      	movs	r3, #2
	user_op->op_context = op_context;
   3562c:	9a10      	ldr	r2, [sp, #64]	; 0x40
	user_op->params.start.lazy = lazy;
   3562e:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
   35632:	6322      	str	r2, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   35634:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.ticks_at_start = ticks_anchor;
   35636:	f8c4 9004 	str.w	r9, [r4, #4]
	user->last = last;
   3563a:	f888 6003 	strb.w	r6, [r8, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   3563e:	e9dc 3508 	ldrd	r3, r5, [ip, #32]
   35642:	4608      	mov	r0, r1
   35644:	4798      	blx	r3
   35646:	463b      	mov	r3, r7
   35648:	4651      	mov	r1, sl
   3564a:	2200      	movs	r2, #0
   3564c:	47a8      	blx	r5
	return user_op->status;
   3564e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   35650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
   35654:	2001      	movs	r0, #1
}
   35656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3565a:	bf00      	nop
   3565c:	20004530 	.word	0x20004530

00035660 <ticker_start>:
{
   35660:	b530      	push	{r4, r5, lr}
   35662:	b08b      	sub	sp, #44	; 0x2c
   35664:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35668:	9500      	str	r5, [sp, #0]
{
   3566a:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   3566c:	9401      	str	r4, [sp, #4]
   3566e:	9502      	str	r5, [sp, #8]
{
   35670:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
   35674:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35676:	9403      	str	r4, [sp, #12]
   35678:	9504      	str	r5, [sp, #16]
{
   3567a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   3567c:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   3567e:	9405      	str	r4, [sp, #20]
   35680:	9506      	str	r5, [sp, #24]
{
   35682:	9c15      	ldr	r4, [sp, #84]	; 0x54
   35684:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
   35686:	9407      	str	r4, [sp, #28]
   35688:	2400      	movs	r4, #0
   3568a:	e9cd 5408 	strd	r5, r4, [sp, #32]
   3568e:	f7ff ff8d 	bl	355ac <ticker_start_ext>
}
   35692:	b00b      	add	sp, #44	; 0x2c
   35694:	bd30      	pop	{r4, r5, pc}
   35696:	bf00      	nop

00035698 <ticker_update_ext>:
{
   35698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   3569c:	4d28      	ldr	r5, [pc, #160]	; (35740 <ticker_update_ext+0xa8>)
{
   3569e:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
   356a2:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
   356a6:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
	user = &instance->users[user_id];
   356aa:	272c      	movs	r7, #44	; 0x2c
   356ac:	fb07 5700 	mla	r7, r7, r0, r5
   356b0:	b20e      	sxth	r6, r1
   356b2:	687c      	ldr	r4, [r7, #4]
   356b4:	eb04 0ac6 	add.w	sl, r4, r6, lsl #3
	if (last >= user->count_user_op) {
   356b8:	f814 9036 	ldrb.w	r9, [r4, r6, lsl #3]
	last = user->last + 1;
   356bc:	f89a 4003 	ldrb.w	r4, [sl, #3]
	if (last == user->first) {
   356c0:	f89a b001 	ldrb.w	fp, [sl, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   356c4:	eb00 0680 	add.w	r6, r0, r0, lsl #2
   356c8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
	last = user->last + 1;
   356cc:	1c66      	adds	r6, r4, #1
   356ce:	b2f6      	uxtb	r6, r6
		last = 0U;
   356d0:	45b1      	cmp	r9, r6
   356d2:	bf98      	it	ls
   356d4:	2600      	movls	r6, #0
	if (last == user->first) {
   356d6:	45b3      	cmp	fp, r6
	struct ticker_instance *instance = &_instance[instance_index];
   356d8:	eb05 0980 	add.w	r9, r5, r0, lsl #2
	if (last == user->first) {
   356dc:	d02c      	beq.n	35738 <ticker_update_ext+0xa0>
	user_op = &user->user_op[user->last];
   356de:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   356e2:	4608      	mov	r0, r1
   356e4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   356e8:	f8da 1004 	ldr.w	r1, [sl, #4]
   356ec:	00a5      	lsls	r5, r4, #2
   356ee:	194c      	adds	r4, r1, r5
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   356f0:	f04f 0b05 	mov.w	fp, #5
   356f4:	f801 b005 	strb.w	fp, [r1, r5]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   356f8:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   356fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   356fc:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   356fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   35700:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   35702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   35704:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   35706:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   35708:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   3570a:	2102      	movs	r1, #2
	user_op->op_context = op_context;
   3570c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   3570e:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
   35710:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   35714:	f884 c017 	strb.w	ip, [r4, #23]
	user_op->op_context = op_context;
   35718:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   3571a:	62a1      	str	r1, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   3571c:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   35720:	f88a 6003 	strb.w	r6, [sl, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35724:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   35728:	4798      	blx	r3
   3572a:	464b      	mov	r3, r9
   3572c:	2200      	movs	r2, #0
   3572e:	2104      	movs	r1, #4
   35730:	47a8      	blx	r5
	return user_op->status;
   35732:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   35734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   35738:	2001      	movs	r0, #1
}
   3573a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3573e:	bf00      	nop
   35740:	20004530 	.word	0x20004530

00035744 <ticker_update>:
{
   35744:	b530      	push	{r4, r5, lr}
   35746:	b089      	sub	sp, #36	; 0x24
   35748:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   3574c:	9500      	str	r5, [sp, #0]
{
   3574e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35750:	9401      	str	r4, [sp, #4]
   35752:	9502      	str	r5, [sp, #8]
{
   35754:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   35758:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   3575c:	9403      	str	r4, [sp, #12]
   3575e:	9504      	str	r5, [sp, #16]
{
   35760:	9c11      	ldr	r4, [sp, #68]	; 0x44
   35762:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_update_ext(instance_index, user_id, ticker_id,
   35764:	9405      	str	r4, [sp, #20]
   35766:	2400      	movs	r4, #0
   35768:	e9cd 5406 	strd	r5, r4, [sp, #24]
   3576c:	f7ff ff94 	bl	35698 <ticker_update_ext>
}
   35770:	b009      	add	sp, #36	; 0x24
   35772:	bd30      	pop	{r4, r5, pc}

00035774 <ticker_stop>:
{
   35774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   35778:	f8df e084 	ldr.w	lr, [pc, #132]	; 35800 <ticker_stop+0x8c>
	user = &instance->users[user_id];
   3577c:	272c      	movs	r7, #44	; 0x2c
   3577e:	fb07 e700 	mla	r7, r7, r0, lr
   35782:	b20d      	sxth	r5, r1
   35784:	687c      	ldr	r4, [r7, #4]
   35786:	eb04 0cc5 	add.w	ip, r4, r5, lsl #3
	if (last >= user->count_user_op) {
   3578a:	f814 9035 	ldrb.w	r9, [r4, r5, lsl #3]
	last = user->last + 1;
   3578e:	f89c 4003 	ldrb.w	r4, [ip, #3]
	if (last == user->first) {
   35792:	f89c 8001 	ldrb.w	r8, [ip, #1]
	last = user->last + 1;
   35796:	1c66      	adds	r6, r4, #1
   35798:	b2f6      	uxtb	r6, r6
	struct ticker_instance *instance = &_instance[instance_index];
   3579a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
		last = 0U;
   3579e:	45b1      	cmp	r9, r6
   357a0:	bf98      	it	ls
   357a2:	2600      	movls	r6, #0
	struct ticker_instance *instance = &_instance[instance_index];
   357a4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
	if (last == user->first) {
   357a8:	45b0      	cmp	r8, r6
	struct ticker_instance *instance = &_instance[instance_index];
   357aa:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
	if (last == user->first) {
   357ae:	d023      	beq.n	357f8 <ticker_stop+0x84>
	user_op = &user->user_op[user->last];
   357b0:	469e      	mov	lr, r3
   357b2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   357b6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   357ba:	f8dc 3004 	ldr.w	r3, [ip, #4]
   357be:	00a4      	lsls	r4, r4, #2
   357c0:	eb03 0804 	add.w	r8, r3, r4
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   357c4:	4608      	mov	r0, r1
   357c6:	2107      	movs	r1, #7
   357c8:	5519      	strb	r1, [r3, r4]
	user_op->id = ticker_id;
   357ca:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->status = TICKER_STATUS_BUSY;
   357ce:	2302      	movs	r3, #2
	user_op->op_context = op_context;
   357d0:	9a08      	ldr	r2, [sp, #32]
	user_op->fp_op_func = fp_op_func;
   357d2:	f8c8 e02c 	str.w	lr, [r8, #44]	; 0x2c
	user_op->op_context = op_context;
   357d6:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   357da:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
	user->last = last;
   357de:	f88c 6003 	strb.w	r6, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   357e2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
   357e6:	4798      	blx	r3
   357e8:	462b      	mov	r3, r5
   357ea:	2200      	movs	r2, #0
   357ec:	2104      	movs	r1, #4
   357ee:	47a0      	blx	r4
	return user_op->status;
   357f0:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
   357f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   357f8:	2001      	movs	r0, #1
}
   357fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   357fe:	bf00      	nop
   35800:	20004530 	.word	0x20004530

00035804 <ticker_next_slot_get>:
{
   35804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   35808:	4f21      	ldr	r7, [pc, #132]	; (35890 <ticker_next_slot_get+0x8c>)
	user = &instance->users[user_id];
   3580a:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   3580e:	fb0c 7c00 	mla	ip, ip, r0, r7
   35812:	b20d      	sxth	r5, r1
   35814:	f8dc 4004 	ldr.w	r4, [ip, #4]
   35818:	eb04 0ec5 	add.w	lr, r4, r5, lsl #3
	if (last >= user->count_user_op) {
   3581c:	f814 9035 	ldrb.w	r9, [r4, r5, lsl #3]
	last = user->last + 1;
   35820:	f89e 4003 	ldrb.w	r4, [lr, #3]
	if (last == user->first) {
   35824:	f89e 8001 	ldrb.w	r8, [lr, #1]
	last = user->last + 1;
   35828:	1c66      	adds	r6, r4, #1
   3582a:	b2f6      	uxtb	r6, r6
	struct ticker_instance *instance = &_instance[instance_index];
   3582c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
		last = 0U;
   35830:	45b1      	cmp	r9, r6
   35832:	bf98      	it	ls
   35834:	2600      	movls	r6, #0
	struct ticker_instance *instance = &_instance[instance_index];
   35836:	eb00 0545 	add.w	r5, r0, r5, lsl #1
	if (last == user->first) {
   3583a:	45b0      	cmp	r8, r6
	struct ticker_instance *instance = &_instance[instance_index];
   3583c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
	if (last == user->first) {
   35840:	d022      	beq.n	35888 <ticker_next_slot_get+0x84>
	user_op = &user->user_op[user->last];
   35842:	4698      	mov	r8, r3
   35844:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   35848:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   3584c:	f8de 3004 	ldr.w	r3, [lr, #4]
   35850:	00a4      	lsls	r4, r4, #2
   35852:	191f      	adds	r7, r3, r4
	user_op->id = TICKER_NULL;
   35854:	4608      	mov	r0, r1
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   35856:	f64f 7102 	movw	r1, #65282	; 0xff02
   3585a:	5319      	strh	r1, [r3, r4]
	user_op->params.slot_get.ticks_current = ticks_current;
   3585c:	e9c7 2801 	strd	r2, r8, [r7, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   35860:	9a08      	ldr	r2, [sp, #32]
   35862:	60fa      	str	r2, [r7, #12]
	user_op->fp_op_func = fp_op_func;
   35864:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35866:	62fa      	str	r2, [r7, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   35868:	2302      	movs	r3, #2
	user_op->op_context = op_context;
   3586a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3586c:	633a      	str	r2, [r7, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   3586e:	62bb      	str	r3, [r7, #40]	; 0x28
	user->last = last;
   35870:	f88e 6003 	strb.w	r6, [lr, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35874:	e9dc 3408 	ldrd	r3, r4, [ip, #32]
   35878:	4798      	blx	r3
   3587a:	462b      	mov	r3, r5
   3587c:	2200      	movs	r2, #0
   3587e:	2104      	movs	r1, #4
   35880:	47a0      	blx	r4
	return user_op->status;
   35882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
}
   35884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   35888:	2001      	movs	r0, #1
}
   3588a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3588e:	bf00      	nop
   35890:	20004530 	.word	0x20004530

00035894 <ticker_job_sched>:
{
   35894:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   35896:	4d0a      	ldr	r5, [pc, #40]	; (358c0 <ticker_job_sched+0x2c>)
   35898:	222c      	movs	r2, #44	; 0x2c
   3589a:	fb02 5200 	mla	r2, r2, r0, r5
   3589e:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   358a2:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   358a4:	4608      	mov	r0, r1
   358a6:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   358a8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   358ac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   358b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   358b4:	46b4      	mov	ip, r6
   358b6:	2200      	movs	r2, #0
   358b8:	2104      	movs	r1, #4
}
   358ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   358be:	4760      	bx	ip
   358c0:	20004530 	.word	0x20004530

000358c4 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   358c4:	f00d bbf6 	b.w	430b4 <cntr_cnt_get>

000358c8 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   358c8:	1a40      	subs	r0, r0, r1
}
   358ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   358ce:	4770      	bx	lr

000358d0 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   358d0:	b570      	push	{r4, r5, r6, lr}
   358d2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   358d4:	2000      	movs	r0, #0
{
   358d6:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   358d8:	f003 fc14 	bl	39104 <ull_adv_is_enabled>
   358dc:	b988      	cbnz	r0, 35902 <ll_addr_set+0x32>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   358de:	f003 fe39 	bl	39554 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   358e2:	f010 0606 	ands.w	r6, r0, #6
   358e6:	d10c      	bne.n	35902 <ll_addr_set+0x32>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   358e8:	4629      	mov	r1, r5
   358ea:	2206      	movs	r2, #6
	if (addr_type) {
   358ec:	b124      	cbz	r4, 358f8 <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   358ee:	4806      	ldr	r0, [pc, #24]	; (35908 <ll_addr_set+0x38>)
   358f0:	f016 fcfc 	bl	4c2ec <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   358f4:	4630      	mov	r0, r6
}
   358f6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   358f8:	4804      	ldr	r0, [pc, #16]	; (3590c <ll_addr_set+0x3c>)
   358fa:	f016 fcf7 	bl	4c2ec <memcpy>
	return 0;
   358fe:	4620      	mov	r0, r4
}
   35900:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   35902:	200c      	movs	r0, #12
}
   35904:	bd70      	pop	{r4, r5, r6, pc}
   35906:	bf00      	nop
   35908:	20004564 	.word	0x20004564
   3590c:	2000455c 	.word	0x2000455c

00035910 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   35910:	2801      	cmp	r0, #1
   35912:	d806      	bhi.n	35922 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   35914:	4b04      	ldr	r3, [pc, #16]	; (35928 <ll_addr_get+0x18>)
   35916:	4a05      	ldr	r2, [pc, #20]	; (3592c <ll_addr_get+0x1c>)
   35918:	2800      	cmp	r0, #0
   3591a:	bf0c      	ite	eq
   3591c:	4618      	moveq	r0, r3
   3591e:	4610      	movne	r0, r2
   35920:	4770      	bx	lr
		return NULL;
   35922:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   35924:	4770      	bx	lr
   35926:	bf00      	nop
   35928:	2000455c 	.word	0x2000455c
   3592c:	20004564 	.word	0x20004564

00035930 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   35930:	2801      	cmp	r0, #1

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   35932:	b510      	push	{r4, lr}
	if (addr_type > BT_ADDR_LE_RANDOM) {
   35934:	d80c      	bhi.n	35950 <ll_addr_read+0x20>
	if (addr_type) {
   35936:	4603      	mov	r3, r0
		return rnd_addr;
   35938:	4c07      	ldr	r4, [pc, #28]	; (35958 <ll_addr_read+0x28>)
   3593a:	4808      	ldr	r0, [pc, #32]	; (3595c <ll_addr_read+0x2c>)
   3593c:	2b00      	cmp	r3, #0
   3593e:	bf18      	it	ne
   35940:	4604      	movne	r4, r0
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
   35942:	2206      	movs	r2, #6
   35944:	4608      	mov	r0, r1
   35946:	4621      	mov	r1, r4
   35948:	f016 fcd0 	bl	4c2ec <memcpy>
	}

	return addr;
}
   3594c:	4620      	mov	r0, r4
   3594e:	bd10      	pop	{r4, pc}
		return NULL;
   35950:	2400      	movs	r4, #0
}
   35952:	4620      	mov	r0, r4
   35954:	bd10      	pop	{r4, pc}
   35956:	bf00      	nop
   35958:	2000455c 	.word	0x2000455c
   3595c:	20004564 	.word	0x20004564

00035960 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   35960:	2802      	cmp	r0, #2
   35962:	d001      	beq.n	35968 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   35964:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   35966:	4770      	bx	lr
{
   35968:	b538      	push	{r3, r4, r5, lr}
   3596a:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   3596c:	4608      	mov	r0, r1
   3596e:	461d      	mov	r5, r3
   35970:	f004 fa6a 	bl	39e48 <ll_connected_get>
			if (!conn) {
   35974:	b110      	cbz	r0, 3597c <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   35976:	2000      	movs	r0, #0
   35978:	7028      	strb	r0, [r5, #0]
}
   3597a:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3597c:	4620      	mov	r0, r4
}
   3597e:	bd38      	pop	{r3, r4, r5, pc}

00035980 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   35980:	2300      	movs	r3, #0
   35982:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   35984:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   35986:	4770      	bx	lr

00035988 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   35988:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   3598a:	4802      	ldr	r0, [pc, #8]	; (35994 <hci_driver_init+0xc>)
   3598c:	f7f8 fd2a 	bl	2e3e4 <bt_hci_driver_register>

	return 0;
}
   35990:	2000      	movs	r0, #0
   35992:	bd08      	pop	{r3, pc}
   35994:	00052d70 	.word	0x00052d70

00035998 <hci_driver_send>:
{
   35998:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   3599a:	8982      	ldrh	r2, [r0, #12]
{
   3599c:	b083      	sub	sp, #12
	if (!buf->len) {
   3599e:	b122      	cbz	r2, 359aa <hci_driver_send+0x12>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   359a0:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   359a2:	4604      	mov	r4, r0
   359a4:	b1bb      	cbz	r3, 359d6 <hci_driver_send+0x3e>
   359a6:	2b02      	cmp	r3, #2
   359a8:	d004      	beq.n	359b4 <hci_driver_send+0x1c>
		return -EINVAL;
   359aa:	f06f 0515 	mvn.w	r5, #21
}
   359ae:	4628      	mov	r0, r5
   359b0:	b003      	add	sp, #12
   359b2:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   359b4:	a901      	add	r1, sp, #4
   359b6:	f000 ff87 	bl	368c8 <hci_acl_handle>
   359ba:	4605      	mov	r5, r0
	if (evt) {
   359bc:	9801      	ldr	r0, [sp, #4]
   359be:	b108      	cbz	r0, 359c4 <hci_driver_send+0x2c>
		bt_recv_prio(evt);
   359c0:	f7f8 fcf2 	bl	2e3a8 <bt_recv_prio>
	if (!err) {
   359c4:	2d00      	cmp	r5, #0
   359c6:	d1f2      	bne.n	359ae <hci_driver_send+0x16>
		net_buf_unref(buf);
   359c8:	4620      	mov	r0, r4
   359ca:	f00e fb4d 	bl	44068 <net_buf_unref>
   359ce:	2500      	movs	r5, #0
}
   359d0:	4628      	mov	r0, r5
   359d2:	b003      	add	sp, #12
   359d4:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   359d6:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   359d8:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   359da:	f000 facd 	bl	35f78 <hci_cmd_handle>
	if (evt) {
   359de:	2800      	cmp	r0, #0
   359e0:	d0f2      	beq.n	359c8 <hci_driver_send+0x30>
		bt_recv_prio(evt);
   359e2:	f7f8 fce1 	bl	2e3a8 <bt_recv_prio>
		if (node_rx) {
   359e6:	9d01      	ldr	r5, [sp, #4]
   359e8:	2d00      	cmp	r5, #0
   359ea:	d0ed      	beq.n	359c8 <hci_driver_send+0x30>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   359ec:	4628      	mov	r0, r5
   359ee:	f001 fb93 	bl	37118 <hci_get_class>
   359f2:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   359f4:	9901      	ldr	r1, [sp, #4]
   359f6:	4802      	ldr	r0, [pc, #8]	; (35a00 <hci_driver_send+0x68>)
   359f8:	f01b fae8 	bl	50fcc <k_queue_append>
	if (!err) {
   359fc:	e7e4      	b.n	359c8 <hci_driver_send+0x30>
   359fe:	bf00      	nop
   35a00:	20001074 	.word	0x20001074

00035a04 <recv_thread>:
{
   35a04:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   35a06:	4e3b      	ldr	r6, [pc, #236]	; (35af4 <recv_thread+0xf0>)
		LL_ASSERT(0);
   35a08:	4f3b      	ldr	r7, [pc, #236]	; (35af8 <recv_thread+0xf4>)
{
   35a0a:	b083      	sub	sp, #12
   35a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35a14:	4630      	mov	r0, r6
   35a16:	f012 ff1d 	bl	48854 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   35a1a:	2800      	cmp	r0, #0
   35a1c:	d0f6      	beq.n	35a0c <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   35a1e:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   35a20:	9001      	str	r0, [sp, #4]
	switch (class) {
   35a22:	2b00      	cmp	r3, #0
   35a24:	d043      	beq.n	35aae <recv_thread+0xaa>
   35a26:	2b04      	cmp	r3, #4
   35a28:	d92b      	bls.n	35a82 <recv_thread+0x7e>
   35a2a:	2b05      	cmp	r3, #5
   35a2c:	d13f      	bne.n	35aae <recv_thread+0xaa>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   35a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35a36:	2003      	movs	r0, #3
   35a38:	f7f7 fe54 	bl	2d6e4 <bt_buf_get_rx>
   35a3c:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   35a3e:	4601      	mov	r1, r0
   35a40:	9801      	ldr	r0, [sp, #4]
   35a42:	f000 ffc3 	bl	369cc <hci_acl_encode>
	node_rx->hdr.next = NULL;
   35a46:	9b01      	ldr	r3, [sp, #4]
   35a48:	2200      	movs	r2, #0
   35a4a:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   35a4c:	a801      	add	r0, sp, #4
   35a4e:	f001 ffa9 	bl	379a4 <ll_rx_mem_release>
		while (buf) {
   35a52:	2c00      	cmp	r4, #0
   35a54:	d0da      	beq.n	35a0c <recv_thread+0x8>
			frag = net_buf_ref(buf);
   35a56:	4620      	mov	r0, r4
   35a58:	f01a fb6d 	bl	50136 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   35a5c:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   35a5e:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   35a60:	2000      	movs	r0, #0
   35a62:	f01a fb8c 	bl	5017e <net_buf_frag_del>
			if (frag->len) {
   35a66:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   35a68:	4604      	mov	r4, r0
				bt_recv(frag);
   35a6a:	4628      	mov	r0, r5
			if (frag->len) {
   35a6c:	b133      	cbz	r3, 35a7c <recv_thread+0x78>
				bt_recv(frag);
   35a6e:	f7f8 fc17 	bl	2e2a0 <bt_recv>
	z_impl_k_yield();
   35a72:	f013 fb7b 	bl	4916c <z_impl_k_yield>
		while (buf) {
   35a76:	2c00      	cmp	r4, #0
   35a78:	d1ed      	bne.n	35a56 <recv_thread+0x52>
   35a7a:	e7c7      	b.n	35a0c <recv_thread+0x8>
				net_buf_unref(frag);
   35a7c:	f00e faf4 	bl	44068 <net_buf_unref>
   35a80:	e7f7      	b.n	35a72 <recv_thread+0x6e>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   35a82:	2b02      	cmp	r3, #2
   35a84:	d027      	beq.n	35ad6 <recv_thread+0xd2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   35a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35a8e:	2001      	movs	r0, #1
   35a90:	f7f7 fe28 	bl	2d6e4 <bt_buf_get_rx>
   35a94:	4604      	mov	r4, r0
		if (buf) {
   35a96:	9801      	ldr	r0, [sp, #4]
   35a98:	b33c      	cbz	r4, 35aea <recv_thread+0xe6>
			hci_evt_encode(node_rx, buf);
   35a9a:	4621      	mov	r1, r4
   35a9c:	f000 ffd0 	bl	36a40 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   35aa0:	9b01      	ldr	r3, [sp, #4]
   35aa2:	2200      	movs	r2, #0
   35aa4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   35aa6:	a801      	add	r0, sp, #4
   35aa8:	f001 ff7c 	bl	379a4 <ll_rx_mem_release>
	return buf;
   35aac:	e7d3      	b.n	35a56 <recv_thread+0x52>
		LL_ASSERT(0);
   35aae:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   35ab2:	463a      	mov	r2, r7
   35ab4:	4911      	ldr	r1, [pc, #68]	; (35afc <recv_thread+0xf8>)
   35ab6:	4812      	ldr	r0, [pc, #72]	; (35b00 <recv_thread+0xfc>)
   35ab8:	f014 fb10 	bl	4a0dc <printk>
   35abc:	4040      	eors	r0, r0
   35abe:	f380 8811 	msr	BASEPRI, r0
   35ac2:	f04f 0003 	mov.w	r0, #3
   35ac6:	df02      	svc	2
	node_rx->hdr.next = NULL;
   35ac8:	9b01      	ldr	r3, [sp, #4]
   35aca:	2200      	movs	r2, #0
   35acc:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   35ace:	a801      	add	r0, sp, #4
   35ad0:	f001 ff68 	bl	379a4 <ll_rx_mem_release>
	return buf;
   35ad4:	e79a      	b.n	35a0c <recv_thread+0x8>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   35ad6:	2200      	movs	r2, #0
   35ad8:	2300      	movs	r3, #0
   35ada:	2101      	movs	r1, #1
   35adc:	2000      	movs	r0, #0
   35ade:	f7f7 fe2d 	bl	2d73c <bt_buf_get_evt>
   35ae2:	4604      	mov	r4, r0
		if (buf) {
   35ae4:	9801      	ldr	r0, [sp, #4]
   35ae6:	2c00      	cmp	r4, #0
   35ae8:	d1d7      	bne.n	35a9a <recv_thread+0x96>
	node_rx->hdr.next = NULL;
   35aea:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   35aec:	a801      	add	r0, sp, #4
   35aee:	f001 ff59 	bl	379a4 <ll_rx_mem_release>
	return buf;
   35af2:	e78b      	b.n	35a0c <recv_thread+0x8>
   35af4:	20001074 	.word	0x20001074
   35af8:	00052d98 	.word	0x00052d98
   35afc:	00052dd8 	.word	0x00052dd8
   35b00:	00052d50 	.word	0x00052d50

00035b04 <prio_recv_thread>:
{
   35b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   35b08:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 35bc4 <prio_recv_thread+0xc0>
				k_fifo_put(&recv_fifo, node_rx);
   35b0c:	4f2c      	ldr	r7, [pc, #176]	; (35bc0 <prio_recv_thread+0xbc>)
{
   35b0e:	b082      	sub	sp, #8
   35b10:	e00d      	b.n	35b2e <prio_recv_thread+0x2a>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   35b12:	2013      	movs	r0, #19
   35b14:	f7f7 fe12 	bl	2d73c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   35b18:	4622      	mov	r2, r4
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   35b1a:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   35b1c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35b20:	f001 fae2 	bl	370e8 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   35b24:	4628      	mov	r0, r5
   35b26:	f7f8 fc3f 	bl	2e3a8 <bt_recv_prio>
	z_impl_k_yield();
   35b2a:	f013 fb1f 	bl	4916c <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   35b2e:	f10d 0102 	add.w	r1, sp, #2
   35b32:	a801      	add	r0, sp, #4
   35b34:	f001 fd90 	bl	37658 <ll_rx_get>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   35b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   35b3c:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   35b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35b42:	2100      	movs	r1, #0
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   35b44:	2800      	cmp	r0, #0
   35b46:	d1e4      	bne.n	35b12 <prio_recv_thread+0xe>
		if (node_rx) {
   35b48:	9b01      	ldr	r3, [sp, #4]
   35b4a:	b1a3      	cbz	r3, 35b76 <prio_recv_thread+0x72>
			ll_rx_dequeue();
   35b4c:	f001 fe64 	bl	37818 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   35b50:	9e01      	ldr	r6, [sp, #4]
   35b52:	4630      	mov	r0, r6
   35b54:	f001 fae0 	bl	37118 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   35b58:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   35b5a:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   35b5c:	796b      	ldrb	r3, [r5, #5]
   35b5e:	2b03      	cmp	r3, #3
   35b60:	d102      	bne.n	35b68 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   35b62:	792b      	ldrb	r3, [r5, #4]
   35b64:	2b17      	cmp	r3, #23
   35b66:	d00e      	beq.n	35b86 <prio_recv_thread+0x82>
				k_fifo_put(&recv_fifo, node_rx);
   35b68:	4629      	mov	r1, r5
   35b6a:	4638      	mov	r0, r7
   35b6c:	f01b fa2e 	bl	50fcc <k_queue_append>
		if (iso_received || node_rx) {
   35b70:	9b01      	ldr	r3, [sp, #4]
   35b72:	2b00      	cmp	r3, #0
   35b74:	d1db      	bne.n	35b2e <prio_recv_thread+0x2a>
	return z_impl_k_sem_take(sem, timeout);
   35b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35b7e:	4640      	mov	r0, r8
   35b80:	f012 fec0 	bl	48904 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   35b84:	e7d3      	b.n	35b2e <prio_recv_thread+0x2a>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   35b86:	4621      	mov	r1, r4
   35b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   35b90:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   35b92:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   35b94:	f7f7 fdd2 	bl	2d73c <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   35b98:	4631      	mov	r1, r6
   35b9a:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   35b9c:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   35b9e:	f105 001c 	add.w	r0, r5, #28
   35ba2:	f000 fefb 	bl	3699c <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   35ba6:	4630      	mov	r0, r6
   35ba8:	f000 ff08 	bl	369bc <hci_disconn_complete_process>
				bt_recv_prio(buf);
   35bac:	4620      	mov	r0, r4
			if (buf) {
   35bae:	b124      	cbz	r4, 35bba <prio_recv_thread+0xb6>
				bt_recv_prio(buf);
   35bb0:	f7f8 fbfa 	bl	2e3a8 <bt_recv_prio>
					net_buf_unref(buf);
   35bb4:	4620      	mov	r0, r4
   35bb6:	f00e fa57 	bl	44068 <net_buf_unref>
   35bba:	9d01      	ldr	r5, [sp, #4]
   35bbc:	e7d4      	b.n	35b68 <prio_recv_thread+0x64>
   35bbe:	bf00      	nop
   35bc0:	20001074 	.word	0x20001074
   35bc4:	20001044 	.word	0x20001044

00035bc8 <hci_driver_open>:
{
   35bc8:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   35bca:	481a      	ldr	r0, [pc, #104]	; (35c34 <hci_driver_open+0x6c>)
{
   35bcc:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   35bce:	f002 fb41 	bl	38254 <ll_init>
	if (err) {
   35bd2:	4604      	mov	r4, r0
   35bd4:	bb58      	cbnz	r0, 35c2e <hci_driver_open+0x66>
	hci_init(NULL);
   35bd6:	f001 fac3 	bl	37160 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   35bda:	2600      	movs	r6, #0
   35bdc:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   35bde:	f06f 0309 	mvn.w	r3, #9
   35be2:	9303      	str	r3, [sp, #12]
   35be4:	e9cd 6706 	strd	r6, r7, [sp, #24]
   35be8:	9404      	str	r4, [sp, #16]
   35bea:	e9cd 4401 	strd	r4, r4, [sp, #4]
   35bee:	9400      	str	r4, [sp, #0]
   35bf0:	4b11      	ldr	r3, [pc, #68]	; (35c38 <hci_driver_open+0x70>)
   35bf2:	4912      	ldr	r1, [pc, #72]	; (35c3c <hci_driver_open+0x74>)
   35bf4:	4812      	ldr	r0, [pc, #72]	; (35c40 <hci_driver_open+0x78>)
   35bf6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   35bfa:	f012 fc11 	bl	48420 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   35bfe:	4911      	ldr	r1, [pc, #68]	; (35c44 <hci_driver_open+0x7c>)
   35c00:	480f      	ldr	r0, [pc, #60]	; (35c40 <hci_driver_open+0x78>)
   35c02:	f01b f954 	bl	50eae <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   35c06:	f06f 0307 	mvn.w	r3, #7
   35c0a:	9303      	str	r3, [sp, #12]
   35c0c:	e9cd 6706 	strd	r6, r7, [sp, #24]
   35c10:	9404      	str	r4, [sp, #16]
   35c12:	e9cd 4401 	strd	r4, r4, [sp, #4]
   35c16:	9400      	str	r4, [sp, #0]
   35c18:	4b0b      	ldr	r3, [pc, #44]	; (35c48 <hci_driver_open+0x80>)
   35c1a:	490c      	ldr	r1, [pc, #48]	; (35c4c <hci_driver_open+0x84>)
   35c1c:	480c      	ldr	r0, [pc, #48]	; (35c50 <hci_driver_open+0x88>)
   35c1e:	f640 0298 	movw	r2, #2200	; 0x898
   35c22:	f012 fbfd 	bl	48420 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   35c26:	490b      	ldr	r1, [pc, #44]	; (35c54 <hci_driver_open+0x8c>)
   35c28:	4809      	ldr	r0, [pc, #36]	; (35c50 <hci_driver_open+0x88>)
   35c2a:	f01b f940 	bl	50eae <z_impl_k_thread_name_set>
}
   35c2e:	4620      	mov	r0, r4
   35c30:	b008      	add	sp, #32
   35c32:	bdd0      	pop	{r4, r6, r7, pc}
   35c34:	20001044 	.word	0x20001044
   35c38:	00035b05 	.word	0x00035b05
   35c3c:	200081d8 	.word	0x200081d8
   35c40:	20002c68 	.word	0x20002c68
   35c44:	00052d84 	.word	0x00052d84
   35c48:	00035a05 	.word	0x00035a05
   35c4c:	20008398 	.word	0x20008398
   35c50:	20002ce8 	.word	0x20002ce8
   35c54:	00052d90 	.word	0x00052d90

00035c58 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
   35c58:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   35c5a:	4b07      	ldr	r3, [pc, #28]	; (35c78 <cmd_complete_status+0x20>)
{
   35c5c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   35c5e:	2101      	movs	r1, #1
   35c60:	8818      	ldrh	r0, [r3, #0]
   35c62:	f016 ffb4 	bl	4cbce <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   35c66:	2101      	movs	r1, #1
   35c68:	4604      	mov	r4, r0
   35c6a:	3008      	adds	r0, #8
   35c6c:	f01a fa93 	bl	50196 <net_buf_simple_add>
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;
   35c70:	7005      	strb	r5, [r0, #0]

	return buf;
}
   35c72:	4620      	mov	r0, r4
   35c74:	bd38      	pop	{r3, r4, r5, pc}
   35c76:	bf00      	nop
   35c78:	20006c12 	.word	0x20006c12

00035c7c <meta_evt>:

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
   35c7c:	b570      	push	{r4, r5, r6, lr}
   35c7e:	f100 0408 	add.w	r4, r0, #8
   35c82:	460e      	mov	r6, r1
   35c84:	4620      	mov	r0, r4
   35c86:	2102      	movs	r1, #2
   35c88:	4615      	mov	r5, r2
   35c8a:	f01a fa84 	bl	50196 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   35c8e:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
   35c90:	223e      	movs	r2, #62	; 0x3e
   35c92:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   35c94:	7043      	strb	r3, [r0, #1]
   35c96:	2101      	movs	r1, #1
   35c98:	4620      	mov	r0, r4
   35c9a:	f01a fa7c 	bl	50196 <net_buf_simple_add>
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
   35c9e:	7006      	strb	r6, [r0, #0]
   35ca0:	4629      	mov	r1, r5
   35ca2:	4620      	mov	r0, r4

	return net_buf_add(buf, melen);
}
   35ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   35ca8:	f01a ba75 	b.w	50196 <net_buf_simple_add>

00035cac <encrypt_change.part.6>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
   35cac:	b570      	push	{r4, r5, r6, lr}
   35cae:	f102 0508 	add.w	r5, r2, #8
   35cb2:	4604      	mov	r4, r0
   35cb4:	460e      	mov	r6, r1
   35cb6:	4628      	mov	r0, r5
   35cb8:	2102      	movs	r1, #2
   35cba:	f01a fa6c 	bl	50196 <net_buf_simple_add>
   35cbe:	4603      	mov	r3, r0
	hdr->evt = evt;
   35cc0:	2208      	movs	r2, #8
	hdr->len = len;
   35cc2:	2104      	movs	r1, #4
	hdr->evt = evt;
   35cc4:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   35cc6:	7059      	strb	r1, [r3, #1]
   35cc8:	4628      	mov	r0, r5
   35cca:	f01a fa64 	bl	50196 <net_buf_simple_add>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
   35cce:	fab4 f384 	clz	r3, r4
   35cd2:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   35cd4:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
   35cd6:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
   35cd8:	f8a0 6001 	strh.w	r6, [r0, #1]
}
   35cdc:	bd70      	pop	{r4, r5, r6, pc}
   35cde:	bf00      	nop

00035ce0 <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   35ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   35ce2:	4c15      	ldr	r4, [pc, #84]	; (35d38 <le_remote_feat_complete+0x58>)
   35ce4:	6867      	ldr	r7, [r4, #4]
   35ce6:	2600      	movs	r6, #0
   35ce8:	4634      	mov	r4, r6
   35cea:	f007 5500 	and.w	r5, r7, #536870912	; 0x20000000
   35cee:	432c      	orrs	r4, r5
   35cf0:	d006      	beq.n	35d00 <le_remote_feat_complete+0x20>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   35cf2:	4c12      	ldr	r4, [pc, #72]	; (35d3c <le_remote_feat_complete+0x5c>)
   35cf4:	6827      	ldr	r7, [r4, #0]
   35cf6:	4635      	mov	r5, r6
   35cf8:	f007 0408 	and.w	r4, r7, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   35cfc:	432c      	orrs	r4, r5
   35cfe:	d100      	bne.n	35d02 <le_remote_feat_complete+0x22>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   35d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35d02:	4615      	mov	r5, r2
   35d04:	4604      	mov	r4, r0
   35d06:	460f      	mov	r7, r1
	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   35d08:	4618      	mov	r0, r3
   35d0a:	220b      	movs	r2, #11
   35d0c:	2104      	movs	r1, #4
   35d0e:	f7ff ffb5 	bl	35c7c <meta_evt>
	sep->status = status;
   35d12:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   35d14:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   35d18:	b934      	cbnz	r4, 35d28 <le_remote_feat_complete+0x48>
		memcpy(&sep->features[0],
   35d1a:	1d39      	adds	r1, r7, #4
   35d1c:	3003      	adds	r0, #3
   35d1e:	2208      	movs	r2, #8
}
   35d20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   35d24:	f016 bae2 	b.w	4c2ec <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   35d28:	4631      	mov	r1, r6
   35d2a:	3003      	adds	r0, #3
   35d2c:	2208      	movs	r2, #8
}
   35d2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   35d32:	f016 bae6 	b.w	4c302 <memset>
   35d36:	bf00      	nop
   35d38:	20000158 	.word	0x20000158
   35d3c:	20000160 	.word	0x20000160

00035d40 <dup_found.isra.13>:
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   35d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dup_count >= 0) {
   35d44:	4f2b      	ldr	r7, [pc, #172]	; (35df4 <dup_found.isra.13+0xb4>)
   35d46:	683b      	ldr	r3, [r7, #0]
   35d48:	2b00      	cmp	r3, #0
   35d4a:	db35      	blt.n	35db8 <dup_found.isra.13+0x78>
   35d4c:	4616      	mov	r6, r2
   35d4e:	4688      	mov	r8, r1
   35d50:	4681      	mov	r9, r0
		for (int32_t i = 0; i < dup_count; i++) {
   35d52:	d013      	beq.n	35d7c <dup_found.isra.13+0x3c>
   35d54:	4d28      	ldr	r5, [pc, #160]	; (35df8 <dup_found.isra.13+0xb8>)
   35d56:	2400      	movs	r4, #0
			if (memcmp(addr, &dup->addr.a.val[0],
   35d58:	2206      	movs	r2, #6
   35d5a:	4629      	mov	r1, r5
   35d5c:	4630      	mov	r0, r6
   35d5e:	f016 fab5 	bl	4c2cc <memcmp>
   35d62:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
		for (int32_t i = 0; i < dup_count; i++) {
   35d66:	3401      	adds	r4, #1
			if (memcmp(addr, &dup->addr.a.val[0],
   35d68:	b918      	cbnz	r0, 35d72 <dup_found.isra.13+0x32>
				   sizeof(bt_addr_t)) ||
   35d6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   35d6e:	4543      	cmp	r3, r8
   35d70:	d025      	beq.n	35dbe <dup_found.isra.13+0x7e>
		for (int32_t i = 0; i < dup_count; i++) {
   35d72:	683b      	ldr	r3, [r7, #0]
   35d74:	429c      	cmp	r4, r3
   35d76:	f105 0508 	add.w	r5, r5, #8
   35d7a:	dbed      	blt.n	35d58 <dup_found.isra.13+0x18>
		dup = &dup_filter[dup_curr];
   35d7c:	4d1f      	ldr	r5, [pc, #124]	; (35dfc <dup_found.isra.13+0xbc>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   35d7e:	f8df a080 	ldr.w	sl, [pc, #128]	; 35e00 <dup_found.isra.13+0xc0>
		dup = &dup_filter[dup_curr];
   35d82:	f8d5 b000 	ldr.w	fp, [r5]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   35d86:	ea4f 04cb 	mov.w	r4, fp, lsl #3
   35d8a:	1c60      	adds	r0, r4, #1
   35d8c:	2206      	movs	r2, #6
   35d8e:	4631      	mov	r1, r6
   35d90:	4450      	add	r0, sl
   35d92:	f016 faab 	bl	4c2ec <memcpy>
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   35d96:	683a      	ldr	r2, [r7, #0]
		dup->addr.type = addr_type;
   35d98:	f80a 803b 	strb.w	r8, [sl, fp, lsl #3]
		dup->mask = BIT(adv_type);
   35d9c:	4454      	add	r4, sl
   35d9e:	2301      	movs	r3, #1
   35da0:	fa03 f909 	lsl.w	r9, r3, r9
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   35da4:	2a0f      	cmp	r2, #15
		dup->mask = BIT(adv_type);
   35da6:	f884 9007 	strb.w	r9, [r4, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   35daa:	dc1b      	bgt.n	35de4 <dup_found.isra.13+0xa4>
			dup_count++;
   35dac:	3201      	adds	r2, #1
			dup_curr = dup_count;
   35dae:	4613      	mov	r3, r2
			dup_count++;
   35db0:	603a      	str	r2, [r7, #0]
			dup_curr = dup_count;
   35db2:	602a      	str	r2, [r5, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   35db4:	2b10      	cmp	r3, #16
   35db6:	d019      	beq.n	35dec <dup_found.isra.13+0xac>
	return false;
   35db8:	2000      	movs	r0, #0
}
   35dba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dup = &dup_filter[i];
   35dbe:	4b10      	ldr	r3, [pc, #64]	; (35e00 <dup_found.isra.13+0xc0>)
   35dc0:	449a      	add	sl, r3
		dup->mask |= BIT(adv_type);
   35dc2:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
   35dc4:	f89a 2007 	ldrb.w	r2, [sl, #7]
   35dc8:	fa22 f309 	lsr.w	r3, r2, r9
   35dcc:	f013 0301 	ands.w	r3, r3, #1
   35dd0:	d1f3      	bne.n	35dba <dup_found.isra.13+0x7a>
		dup->mask |= BIT(adv_type);
   35dd2:	fa00 f909 	lsl.w	r9, r0, r9
   35dd6:	ea42 0209 	orr.w	r2, r2, r9
   35dda:	f88a 2007 	strb.w	r2, [sl, #7]
		return false;
   35dde:	4618      	mov	r0, r3
}
   35de0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			dup_curr++;
   35de4:	682b      	ldr	r3, [r5, #0]
   35de6:	3301      	adds	r3, #1
   35de8:	602b      	str	r3, [r5, #0]
   35dea:	e7e3      	b.n	35db4 <dup_found.isra.13+0x74>
			dup_curr = 0U;
   35dec:	2000      	movs	r0, #0
   35dee:	6028      	str	r0, [r5, #0]
   35df0:	e7e3      	b.n	35dba <dup_found.isra.13+0x7a>
   35df2:	bf00      	nop
   35df4:	20004570 	.word	0x20004570
   35df8:	20004579 	.word	0x20004579
   35dfc:	20004574 	.word	0x20004574
   35e00:	20004578 	.word	0x20004578

00035e04 <hci_disconn_complete_encode.part.37>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
   35e04:	b570      	push	{r4, r5, r6, lr}
   35e06:	f102 0408 	add.w	r4, r2, #8
   35e0a:	4605      	mov	r5, r0
   35e0c:	460e      	mov	r6, r1
   35e0e:	4620      	mov	r0, r4
   35e10:	2102      	movs	r1, #2
   35e12:	f01a f9c0 	bl	50196 <net_buf_simple_add>
   35e16:	4603      	mov	r3, r0
	hdr->evt = evt;
   35e18:	2205      	movs	r2, #5
	hdr->len = len;
   35e1a:	2104      	movs	r1, #4
	hdr->evt = evt;
   35e1c:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   35e1e:	7059      	strb	r1, [r3, #1]
   35e20:	4620      	mov	r0, r4
   35e22:	f01a f9b8 	bl	50196 <net_buf_simple_add>
	ep->status = 0x00;
   35e26:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
   35e28:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
   35e2c:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
   35e2e:	782b      	ldrb	r3, [r5, #0]
   35e30:	70c3      	strb	r3, [r0, #3]
}
   35e32:	bd70      	pop	{r4, r5, r6, pc}

00035e34 <hci_cmd_complete>:
{
   35e34:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35e36:	4b06      	ldr	r3, [pc, #24]	; (35e50 <hci_cmd_complete+0x1c>)
{
   35e38:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35e3a:	8818      	ldrh	r0, [r3, #0]
{
   35e3c:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   35e3e:	f016 fec6 	bl	4cbce <bt_hci_cmd_complete_create>
   35e42:	4621      	mov	r1, r4
   35e44:	6028      	str	r0, [r5, #0]
   35e46:	3008      	adds	r0, #8
}
   35e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   35e4c:	f01a b9a3 	b.w	50196 <net_buf_simple_add>
   35e50:	20006c12 	.word	0x20006c12

00035e54 <hci_vendor_cmd_handle_common>:
{
   35e54:	b570      	push	{r4, r5, r6, lr}
	switch (ocf) {
   35e56:	3801      	subs	r0, #1
{
   35e58:	b086      	sub	sp, #24
   35e5a:	4614      	mov	r4, r2
	switch (ocf) {
   35e5c:	2809      	cmp	r0, #9
   35e5e:	f200 8085 	bhi.w	35f6c <hci_vendor_cmd_handle_common+0x118>
   35e62:	e8df f000 	tbb	[pc, r0]
   35e66:	2b14      	.short	0x2b14
   35e68:	52838343 	.word	0x52838343
   35e6c:	05735e83 	.word	0x05735e83
	rp = hci_cmd_complete(evt, sizeof(*rp));
   35e70:	4610      	mov	r0, r2
   35e72:	2121      	movs	r1, #33	; 0x21
   35e74:	f7ff ffde 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   35e78:	4601      	mov	r1, r0
   35e7a:	2400      	movs	r4, #0
   35e7c:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   35e80:	3001      	adds	r0, #1
   35e82:	f00d ffe9 	bl	43e58 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   35e86:	4621      	mov	r1, r4
}
   35e88:	4608      	mov	r0, r1
   35e8a:	b006      	add	sp, #24
   35e8c:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   35e8e:	4610      	mov	r0, r2
   35e90:	210d      	movs	r1, #13
   35e92:	f7ff ffcf 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   35e96:	2100      	movs	r1, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   35e98:	2302      	movs	r3, #2
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   35e9a:	2203      	movs	r2, #3
   35e9c:	7182      	strb	r2, [r0, #6]
	rp->status = 0x00;
   35e9e:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   35ea0:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   35ea2:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
   35ea4:	7141      	strb	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   35ea6:	71c1      	strb	r1, [r0, #7]
   35ea8:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   35eaa:	7241      	strb	r1, [r0, #9]
   35eac:	7281      	strb	r1, [r0, #10]
   35eae:	72c1      	strb	r1, [r0, #11]
   35eb0:	7301      	strb	r1, [r0, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   35eb2:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   35eb4:	70c3      	strb	r3, [r0, #3]
}
   35eb6:	4608      	mov	r0, r1
   35eb8:	b006      	add	sp, #24
   35eba:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   35ebc:	4610      	mov	r0, r2
   35ebe:	2141      	movs	r1, #65	; 0x41
   35ec0:	f7ff ffb8 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   35ec4:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   35ec6:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   35ec8:	4621      	mov	r1, r4
	rp->status = 0x00;
   35eca:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   35ece:	2240      	movs	r2, #64	; 0x40
   35ed0:	f016 fa17 	bl	4c302 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   35ed4:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   35ed6:	78ab      	ldrb	r3, [r5, #2]
	return 0;
   35ed8:	4621      	mov	r1, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   35eda:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   35ede:	f043 0303 	orr.w	r3, r3, #3
}
   35ee2:	4608      	mov	r0, r1
	rp->commands[0] |= BIT(5) | BIT(7);
   35ee4:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   35ee6:	70ab      	strb	r3, [r5, #2]
}
   35ee8:	b006      	add	sp, #24
   35eea:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   35eec:	4610      	mov	r0, r2
   35eee:	2109      	movs	r1, #9
   35ef0:	f7ff ffa0 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   35ef4:	2400      	movs	r4, #0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   35ef6:	4621      	mov	r1, r4
	rp->status = 0x00;
   35ef8:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   35efc:	2208      	movs	r2, #8
   35efe:	f016 fa00 	bl	4c302 <memset>
	return 0;
   35f02:	4621      	mov	r1, r4
}
   35f04:	4608      	mov	r0, r1
   35f06:	b006      	add	sp, #24
   35f08:	bd70      	pop	{r4, r5, r6, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   35f0a:	6889      	ldr	r1, [r1, #8]
   35f0c:	2000      	movs	r0, #0
   35f0e:	f7ff fcdf 	bl	358d0 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
   35f12:	2000      	movs	r0, #0
   35f14:	f7ff fea0 	bl	35c58 <cmd_complete_status>
   35f18:	2100      	movs	r1, #0
   35f1a:	6020      	str	r0, [r4, #0]
}
   35f1c:	4608      	mov	r0, r1
   35f1e:	b006      	add	sp, #24
   35f20:	bd70      	pop	{r4, r5, r6, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   35f22:	4e14      	ldr	r6, [pc, #80]	; (35f74 <hci_vendor_cmd_handle_common+0x120>)
   35f24:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   35f26:	ad01      	add	r5, sp, #4
   35f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   35f2a:	6833      	ldr	r3, [r6, #0]
   35f2c:	702b      	strb	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   35f2e:	4620      	mov	r0, r4
   35f30:	2112      	movs	r1, #18
   35f32:	f7ff ff7f 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   35f36:	2400      	movs	r4, #0
	memcpy(rp->info, build_info, sizeof(build_info));
   35f38:	a901      	add	r1, sp, #4
	rp->status = 0x00;
   35f3a:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   35f3e:	2211      	movs	r2, #17
   35f40:	f016 f9d4 	bl	4c2ec <memcpy>
	return 0;
   35f44:	4621      	mov	r1, r4
}
   35f46:	4608      	mov	r0, r1
   35f48:	b006      	add	sp, #24
   35f4a:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   35f4c:	4610      	mov	r0, r2
   35f4e:	2118      	movs	r1, #24
   35f50:	f7ff ff70 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   35f54:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   35f56:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   35f58:	2101      	movs	r1, #1
	rp->status = 0x00;
   35f5a:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   35f5e:	f00d ff09 	bl	43d74 <hci_vendor_read_static_addr>
	return 0;
   35f62:	4621      	mov	r1, r4
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   35f64:	7068      	strb	r0, [r5, #1]
}
   35f66:	4608      	mov	r0, r1
   35f68:	b006      	add	sp, #24
   35f6a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   35f6c:	f06f 0115 	mvn.w	r1, #21
   35f70:	e78a      	b.n	35e88 <hci_vendor_cmd_handle_common+0x34>
   35f72:	bf00      	nop
   35f74:	00052ec4 	.word	0x00052ec4

00035f78 <hci_cmd_handle>:
{
   35f78:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   35f7a:	8983      	ldrh	r3, [r0, #12]
{
   35f7c:	b08f      	sub	sp, #60	; 0x3c
	struct net_buf *evt = NULL;
   35f7e:	2600      	movs	r6, #0
	if (cmd->len < sizeof(*chdr)) {
   35f80:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   35f82:	9609      	str	r6, [sp, #36]	; 0x24
	if (cmd->len < sizeof(*chdr)) {
   35f84:	d941      	bls.n	3600a <hci_cmd_handle+0x92>
	return net_buf_simple_pull_mem(&buf->b, len);
   35f86:	4604      	mov	r4, r0
   35f88:	460d      	mov	r5, r1
   35f8a:	3008      	adds	r0, #8
   35f8c:	2103      	movs	r1, #3
   35f8e:	f01a f933 	bl	501f8 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   35f92:	89a2      	ldrh	r2, [r4, #12]
   35f94:	7883      	ldrb	r3, [r0, #2]
   35f96:	429a      	cmp	r2, r3
   35f98:	d337      	bcc.n	3600a <hci_cmd_handle+0x92>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   35f9a:	8802      	ldrh	r2, [r0, #0]
   35f9c:	4fda      	ldr	r7, [pc, #872]	; (36308 <hci_cmd_handle+0x390>)
   35f9e:	b290      	uxth	r0, r2
	switch (BT_OGF(_opcode)) {
   35fa0:	0a83      	lsrs	r3, r0, #10
   35fa2:	2b04      	cmp	r3, #4
	_opcode = sys_le16_to_cpu(chdr->opcode);
   35fa4:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
   35fa6:	f3c0 0209 	ubfx	r2, r0, #0, #10
	switch (BT_OGF(_opcode)) {
   35faa:	f000 80e1 	beq.w	36170 <hci_cmd_handle+0x1f8>
   35fae:	d911      	bls.n	35fd4 <hci_cmd_handle+0x5c>
   35fb0:	2b08      	cmp	r3, #8
   35fb2:	d03b      	beq.n	3602c <hci_cmd_handle+0xb4>
   35fb4:	2b3f      	cmp	r3, #63	; 0x3f
   35fb6:	d108      	bne.n	35fca <hci_cmd_handle+0x52>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   35fb8:	4610      	mov	r0, r2
   35fba:	4621      	mov	r1, r4
   35fbc:	aa09      	add	r2, sp, #36	; 0x24
   35fbe:	f7ff ff49 	bl	35e54 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   35fc2:	3016      	adds	r0, #22
   35fc4:	f040 82c0 	bne.w	36548 <hci_cmd_handle+0x5d0>
   35fc8:	8838      	ldrh	r0, [r7, #0]
	return bt_hci_cmd_status_create(_opcode, status);
   35fca:	2101      	movs	r1, #1
   35fcc:	f016 fe11 	bl	4cbf2 <bt_hci_cmd_status_create>
}
   35fd0:	b00f      	add	sp, #60	; 0x3c
   35fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (BT_OGF(_opcode)) {
   35fd4:	2b01      	cmp	r3, #1
   35fd6:	d01b      	beq.n	36010 <hci_cmd_handle+0x98>
   35fd8:	2b03      	cmp	r3, #3
   35fda:	d1f6      	bne.n	35fca <hci_cmd_handle+0x52>
	switch (ocf) {
   35fdc:	2a2d      	cmp	r2, #45	; 0x2d
   35fde:	f000 8442 	beq.w	36866 <hci_cmd_handle+0x8ee>
   35fe2:	f240 80df 	bls.w	361a4 <hci_cmd_handle+0x22c>
   35fe6:	2a7b      	cmp	r2, #123	; 0x7b
   35fe8:	f000 8428 	beq.w	3683c <hci_cmd_handle+0x8c4>
   35fec:	2a7c      	cmp	r2, #124	; 0x7c
   35fee:	f000 841e 	beq.w	3682e <hci_cmd_handle+0x8b6>
   35ff2:	2a63      	cmp	r2, #99	; 0x63
   35ff4:	d1e9      	bne.n	35fca <hci_cmd_handle+0x52>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   35ff6:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   35ff8:	4bc4      	ldr	r3, [pc, #784]	; (3630c <hci_cmd_handle+0x394>)
   35ffa:	6811      	ldr	r1, [r2, #0]
   35ffc:	6852      	ldr	r2, [r2, #4]
   35ffe:	605a      	str	r2, [r3, #4]
   36000:	6019      	str	r1, [r3, #0]
	*evt = cmd_complete_status(0x00);
   36002:	2000      	movs	r0, #0
   36004:	f7ff fe28 	bl	35c58 <cmd_complete_status>
   36008:	e7e2      	b.n	35fd0 <hci_cmd_handle+0x58>
		return NULL;
   3600a:	2000      	movs	r0, #0
}
   3600c:	b00f      	add	sp, #60	; 0x3c
   3600e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   36010:	2a06      	cmp	r2, #6
   36012:	f000 8401 	beq.w	36818 <hci_cmd_handle+0x8a0>
   36016:	2a1d      	cmp	r2, #29
   36018:	d1d7      	bne.n	35fca <hci_cmd_handle+0x52>
	handle = sys_le16_to_cpu(cmd->handle);
   3601a:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   3601c:	8818      	ldrh	r0, [r3, #0]
   3601e:	f004 f8b1 	bl	3a184 <ll_version_ind_send>
	return bt_hci_cmd_status_create(_opcode, status);
   36022:	4601      	mov	r1, r0
   36024:	8838      	ldrh	r0, [r7, #0]
   36026:	f016 fde4 	bl	4cbf2 <bt_hci_cmd_status_create>
   3602a:	e7d1      	b.n	35fd0 <hci_cmd_handle+0x58>
	switch (ocf) {
   3602c:	3a01      	subs	r2, #1
   3602e:	2a4d      	cmp	r2, #77	; 0x4d
   36030:	d8cb      	bhi.n	35fca <hci_cmd_handle+0x52>
   36032:	a301      	add	r3, pc, #4	; (adr r3, 36038 <hci_cmd_handle+0xc0>)
   36034:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   36038:	00036801 	.word	0x00036801
   3603c:	000367e5 	.word	0x000367e5
   36040:	000367a5 	.word	0x000367a5
   36044:	00035fcb 	.word	0x00035fcb
   36048:	00036797 	.word	0x00036797
   3604c:	00036777 	.word	0x00036777
   36050:	00036765 	.word	0x00036765
   36054:	00036755 	.word	0x00036755
   36058:	00036745 	.word	0x00036745
   3605c:	00036809 	.word	0x00036809
   36060:	00036729 	.word	0x00036729
   36064:	000366fd 	.word	0x000366fd
   36068:	000366cb 	.word	0x000366cb
   3606c:	000366bf 	.word	0x000366bf
   36070:	000366a7 	.word	0x000366a7
   36074:	0003669d 	.word	0x0003669d
   36078:	00036691 	.word	0x00036691
   3607c:	00036685 	.word	0x00036685
   36080:	00036661 	.word	0x00036661
   36084:	00036655 	.word	0x00036655
   36088:	00036633 	.word	0x00036633
   3608c:	00036621 	.word	0x00036621
   36090:	000365f9 	.word	0x000365f9
   36094:	000365e1 	.word	0x000365e1
   36098:	000365c5 	.word	0x000365c5
   3609c:	000365a1 	.word	0x000365a1
   360a0:	00036591 	.word	0x00036591
   360a4:	0003656b 	.word	0x0003656b
   360a8:	00035fcb 	.word	0x00035fcb
   360ac:	00035fcb 	.word	0x00035fcb
   360b0:	00035fcb 	.word	0x00035fcb
   360b4:	0003654d 	.word	0x0003654d
   360b8:	000365ad 	.word	0x000365ad
   360bc:	0003652b 	.word	0x0003652b
   360c0:	000364ff 	.word	0x000364ff
   360c4:	000364ed 	.word	0x000364ed
   360c8:	00035fcb 	.word	0x00035fcb
   360cc:	00035fcb 	.word	0x00035fcb
   360d0:	000364db 	.word	0x000364db
   360d4:	000364cf 	.word	0x000364cf
   360d8:	000364c5 	.word	0x000364c5
   360dc:	000364ad 	.word	0x000364ad
   360e0:	0003648b 	.word	0x0003648b
   360e4:	00036469 	.word	0x00036469
   360e8:	0003645b 	.word	0x0003645b
   360ec:	0003644b 	.word	0x0003644b
   360f0:	00036409 	.word	0x00036409
   360f4:	000363b7 	.word	0x000363b7
   360f8:	00036395 	.word	0x00036395
   360fc:	0003633b 	.word	0x0003633b
   36100:	00035fcb 	.word	0x00035fcb
   36104:	00035fcb 	.word	0x00035fcb
   36108:	00035fcb 	.word	0x00035fcb
   3610c:	00035fcb 	.word	0x00035fcb
   36110:	00035fcb 	.word	0x00035fcb
   36114:	00035fcb 	.word	0x00035fcb
   36118:	00035fcb 	.word	0x00035fcb
   3611c:	00035fcb 	.word	0x00035fcb
   36120:	00035fcb 	.word	0x00035fcb
   36124:	00035fcb 	.word	0x00035fcb
   36128:	00035fcb 	.word	0x00035fcb
   3612c:	00035fcb 	.word	0x00035fcb
   36130:	00035fcb 	.word	0x00035fcb
   36134:	00035fcb 	.word	0x00035fcb
   36138:	00035fcb 	.word	0x00035fcb
   3613c:	00035fcb 	.word	0x00035fcb
   36140:	00035fcb 	.word	0x00035fcb
   36144:	00035fcb 	.word	0x00035fcb
   36148:	00035fcb 	.word	0x00035fcb
   3614c:	00035fcb 	.word	0x00035fcb
   36150:	00035fcb 	.word	0x00035fcb
   36154:	00035fcb 	.word	0x00035fcb
   36158:	00035fcb 	.word	0x00035fcb
   3615c:	00035fcb 	.word	0x00035fcb
   36160:	00036321 	.word	0x00036321
   36164:	00035fcb 	.word	0x00035fcb
   36168:	00035fcb 	.word	0x00035fcb
   3616c:	000362f9 	.word	0x000362f9
	switch (ocf) {
   36170:	3a01      	subs	r2, #1
   36172:	2a08      	cmp	r2, #8
   36174:	f63f af29 	bhi.w	35fca <hci_cmd_handle+0x52>
   36178:	a301      	add	r3, pc, #4	; (adr r3, 36180 <hci_cmd_handle+0x208>)
   3617a:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   3617e:	bf00      	nop
   36180:	000362cb 	.word	0x000362cb
   36184:	00036223 	.word	0x00036223
   36188:	00036205 	.word	0x00036205
   3618c:	00035fcb 	.word	0x00035fcb
   36190:	00035fcb 	.word	0x00035fcb
   36194:	00035fcb 	.word	0x00035fcb
   36198:	00035fcb 	.word	0x00035fcb
   3619c:	00035fcb 	.word	0x00035fcb
   361a0:	000361ed 	.word	0x000361ed
	switch (ocf) {
   361a4:	2a01      	cmp	r2, #1
   361a6:	f000 8373 	beq.w	36890 <hci_cmd_handle+0x918>
   361aa:	2a03      	cmp	r2, #3
   361ac:	f47f af0d 	bne.w	35fca <hci_cmd_handle+0x52>
	dup_count = DUP_FILTER_DISABLED;
   361b0:	4857      	ldr	r0, [pc, #348]	; (36310 <hci_cmd_handle+0x398>)
	event_mask = DEFAULT_EVENT_MASK;
   361b2:	4958      	ldr	r1, [pc, #352]	; (36314 <hci_cmd_handle+0x39c>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   361b4:	4a55      	ldr	r2, [pc, #340]	; (3630c <hci_cmd_handle+0x394>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   361b6:	4b58      	ldr	r3, [pc, #352]	; (36318 <hci_cmd_handle+0x3a0>)
	dup_count = DUP_FILTER_DISABLED;
   361b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   361bc:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   361be:	f641 75ff 	movw	r5, #8191	; 0x1fff
   361c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   361c6:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   361ca:	201f      	movs	r0, #31
   361cc:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   361ce:	2400      	movs	r4, #0
   361d0:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   361d2:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   361d6:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
   361da:	f002 f9ab 	bl	38534 <ll_reset>
		*evt = cmd_complete_status(0x00);
   361de:	2000      	movs	r0, #0
   361e0:	f7ff fd3a 	bl	35c58 <cmd_complete_status>
	conn_count = 0U;
   361e4:	4b4d      	ldr	r3, [pc, #308]	; (3631c <hci_cmd_handle+0x3a4>)
   361e6:	2200      	movs	r2, #0
   361e8:	601a      	str	r2, [r3, #0]
   361ea:	e6f1      	b.n	35fd0 <hci_cmd_handle+0x58>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   361ec:	2107      	movs	r1, #7
   361ee:	a809      	add	r0, sp, #36	; 0x24
   361f0:	f7ff fe20 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   361f4:	4601      	mov	r1, r0
   361f6:	2000      	movs	r0, #0
   361f8:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   361fc:	f7ff fb98 	bl	35930 <ll_addr_read>
   36200:	9809      	ldr	r0, [sp, #36]	; 0x24
   36202:	e6e5      	b.n	35fd0 <hci_cmd_handle+0x58>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36204:	2109      	movs	r1, #9
   36206:	a809      	add	r0, sp, #36	; 0x24
   36208:	f7ff fe14 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   3620c:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   3620e:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   36210:	2208      	movs	r2, #8
	rp->status = 0x00;
   36212:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   36216:	f016 f874 	bl	4c302 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   3621a:	2360      	movs	r3, #96	; 0x60
   3621c:	7163      	strb	r3, [r4, #5]
   3621e:	9809      	ldr	r0, [sp, #36]	; 0x24
   36220:	e6d6      	b.n	35fd0 <hci_cmd_handle+0x58>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36222:	2141      	movs	r1, #65	; 0x41
   36224:	a809      	add	r0, sp, #36	; 0x24
   36226:	f7ff fe05 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   3622a:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   3622c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   3622e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   36230:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   36234:	f016 f865 	bl	4c302 <memset>
	rp->commands[10] |= BIT(2);
   36238:	7ae5      	ldrb	r5, [r4, #11]
	rp->commands[0] |= BIT(5);
   3623a:	7867      	ldrb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   3623c:	79a6      	ldrb	r6, [r4, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   3623e:	7be0      	ldrb	r0, [r4, #15]
	rp->commands[15] |= BIT(1);
   36240:	7c21      	ldrb	r1, [r4, #16]
	rp->commands[22] |= BIT(2);
   36242:	7de2      	ldrb	r2, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   36244:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[10] |= BIT(2);
   36246:	f045 0504 	orr.w	r5, r5, #4
	rp->commands[0] |= BIT(5);
   3624a:	f047 0720 	orr.w	r7, r7, #32
	rp->commands[5] |= BIT(6) | BIT(7);
   3624e:	f066 063f 	orn	r6, r6, #63	; 0x3f
	rp->commands[14] |= BIT(3) | BIT(5);
   36252:	f040 0028 	orr.w	r0, r0, #40	; 0x28
	rp->commands[15] |= BIT(1);
   36256:	f041 0102 	orr.w	r1, r1, #2
	rp->commands[22] |= BIT(2);
   3625a:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   3625e:	f063 0308 	orn	r3, r3, #8
	rp->commands[10] |= BIT(2);
   36262:	72e5      	strb	r5, [r4, #11]
	rp->commands[33] |= BIT(4) | BIT(5);
   36264:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   36268:	7067      	strb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   3626a:	71a6      	strb	r6, [r4, #6]
	rp->commands[28] |= BIT(3);
   3626c:	7f67      	ldrb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   3626e:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	rp->commands[14] |= BIT(3) | BIT(5);
   36272:	73e0      	strb	r0, [r4, #15]
	rp->commands[15] |= BIT(1);
   36274:	7421      	strb	r1, [r4, #16]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   36276:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
   3627a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[22] |= BIT(2);
   3627e:	75e2      	strb	r2, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   36280:	76a3      	strb	r3, [r4, #26]
	rp->commands[39] |= BIT(2);
   36282:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   36286:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[33] |= BIT(6) | BIT(7);
   3628a:	f065 050f 	orn	r5, r5, #15
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   3628e:	f060 0006 	orn	r0, r0, #6
	rp->commands[28] |= BIT(1) | BIT(2);
   36292:	f047 070f 	orr.w	r7, r7, #15
	rp->commands[32] |= BIT(4) | BIT(5);
   36296:	f046 0630 	orr.w	r6, r6, #48	; 0x30
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   3629a:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
   3629e:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   362a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[33] |= BIT(6) | BIT(7);
   362a6:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	rp->commands[26] |= BIT(4) | BIT(5);
   362aa:	25ff      	movs	r5, #255	; 0xff
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   362ac:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   362b0:	7767      	strb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   362b2:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   362b6:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   362ba:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   362be:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   362c2:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->commands[26] |= BIT(4) | BIT(5);
   362c4:	76e5      	strb	r5, [r4, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   362c6:	7725      	strb	r5, [r4, #28]
	rp->commands[38] |= BIT(7);
   362c8:	e682      	b.n	35fd0 <hci_cmd_handle+0x58>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   362ca:	2109      	movs	r1, #9
   362cc:	a809      	add	r0, sp, #36	; 0x24
   362ce:	f7ff fdb1 	bl	35e34 <hci_cmd_complete>
   362d2:	4603      	mov	r3, r0
	rp->status = 0x00;
   362d4:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
   362d6:	200c      	movs	r0, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   362d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   362dc:	f06f 050e 	mvn.w	r5, #14
   362e0:	2405      	movs	r4, #5
	rp->status = 0x00;
   362e2:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   362e4:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   362e6:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   362e8:	715d      	strb	r5, [r3, #5]
   362ea:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
   362ec:	709a      	strb	r2, [r3, #2]
   362ee:	70da      	strb	r2, [r3, #3]
{
	return CONFIG_BT_CTLR_COMPANY_ID;
}
static inline uint16_t ll_settings_subversion_number(void)
{
	return CONFIG_BT_CTLR_SUBVERSION_NUMBER;
   362f0:	9809      	ldr	r0, [sp, #36]	; 0x24
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   362f2:	71d9      	strb	r1, [r3, #7]
   362f4:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
   362f6:	e66b      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   362f8:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   362fa:	79c1      	ldrb	r1, [r0, #7]
   362fc:	f009 ff64 	bl	401c8 <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
   36300:	f7ff fcaa 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   36304:	e664      	b.n	35fd0 <hci_cmd_handle+0x58>
   36306:	bf00      	nop
   36308:	20006c12 	.word	0x20006c12
   3630c:	20002d68 	.word	0x20002d68
   36310:	20004570 	.word	0x20004570
   36314:	20000158 	.word	0x20000158
   36318:	20000160 	.word	0x20000160
   3631c:	2000456c 	.word	0x2000456c
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36320:	2103      	movs	r1, #3
   36322:	a809      	add	r0, sp, #36	; 0x24
   36324:	f7ff fd86 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   36328:	4601      	mov	r1, r0
   3632a:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   3632c:	3001      	adds	r0, #1
	rp->status = 0x00;
   3632e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   36332:	f7ff fb25 	bl	35980 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   36336:	9809      	ldr	r0, [sp, #36]	; 0x24
   36338:	e64a      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   3633a:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   3633c:	7895      	ldrb	r5, [r2, #2]
   3633e:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   36340:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   36342:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   36346:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
   36348:	bf48      	it	mi
   3634a:	f041 0103 	orrmi.w	r1, r1, #3
   3634e:	7913      	ldrb	r3, [r2, #4]
   36350:	bf48      	it	mi
   36352:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   36354:	07ad      	lsls	r5, r5, #30
		cmd->rx_phys |= mask_phys;
   36356:	bf44      	itt	mi
   36358:	f043 0303 	orrmi.w	r3, r3, #3
   3635c:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   3635e:	ea41 0203 	orr.w	r2, r1, r3
   36362:	f032 0203 	bics.w	r2, r2, #3
   36366:	f040 82a1 	bne.w	368ac <hci_cmd_handle+0x934>
	if (!(cmd->tx_phys & 0x07) ||
   3636a:	074d      	lsls	r5, r1, #29
   3636c:	f000 8299 	beq.w	368a2 <hci_cmd_handle+0x92a>
   36370:	075a      	lsls	r2, r3, #29
   36372:	f000 8296 	beq.w	368a2 <hci_cmd_handle+0x92a>
	if (phy_opts & 0x03) {
   36376:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   3637a:	bf1c      	itt	ne
   3637c:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   36380:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   36384:	4630      	mov	r0, r6
   36386:	f003 ffd1 	bl	3a32c <ll_phy_req_send>
	return bt_hci_cmd_status_create(_opcode, status);
   3638a:	4601      	mov	r1, r0
   3638c:	8838      	ldrh	r0, [r7, #0]
   3638e:	f016 fc30 	bl	4cbf2 <bt_hci_cmd_status_create>
   36392:	e61d      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   36394:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   36396:	781a      	ldrb	r2, [r3, #0]
   36398:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   3639a:	bf4a      	itet	mi
   3639c:	2007      	movmi	r0, #7
   3639e:	7858      	ldrbpl	r0, [r3, #1]
   363a0:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   363a2:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   363a4:	bf4a      	itet	mi
   363a6:	2107      	movmi	r1, #7
   363a8:	7899      	ldrbpl	r1, [r3, #2]
   363aa:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   363ac:	f003 ffb4 	bl	3a318 <ll_phy_default_set>
	*evt = cmd_complete_status(status);
   363b0:	f7ff fc52 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   363b4:	e60c      	b.n	35fd0 <hci_cmd_handle+0x58>
	handle = sys_le16_to_cpu(cmd->handle);
   363b6:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   363b8:	2105      	movs	r1, #5
   363ba:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   363bc:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   363be:	f7ff fd39 	bl	35e34 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   363c2:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   363c4:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   363c6:	1d02      	adds	r2, r0, #4
   363c8:	1ce1      	adds	r1, r4, #3
   363ca:	4630      	mov	r0, r6
   363cc:	f003 ff82 	bl	3a2d4 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   363d0:	78e2      	ldrb	r2, [r4, #3]
   363d2:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
   363d4:	7020      	strb	r0, [r4, #0]
   363d6:	2a00      	cmp	r2, #0
   363d8:	fa92 f2a2 	rbit	r2, r2
   363dc:	fab2 f282 	clz	r2, r2
   363e0:	bf08      	it	eq
   363e2:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   363e6:	2b00      	cmp	r3, #0
   363e8:	fa93 f3a3 	rbit	r3, r3
   363ec:	fab3 f383 	clz	r3, r3
   363f0:	f102 0201 	add.w	r2, r2, #1
   363f4:	bf08      	it	eq
   363f6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   363fa:	70e2      	strb	r2, [r4, #3]
   363fc:	3301      	adds	r3, #1
	rp->handle = sys_cpu_to_le16(handle);
   363fe:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   36402:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
   36404:	9809      	ldr	r0, [sp, #36]	; 0x24
   36406:	e5e3      	b.n	35fd0 <hci_cmd_handle+0x58>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36408:	2109      	movs	r1, #9
   3640a:	a809      	add	r0, sp, #36	; 0x24
   3640c:	f7ff fd12 	bl	35e34 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   36410:	ab0a      	add	r3, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36412:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   36414:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   36418:	f10d 001e 	add.w	r0, sp, #30
   3641c:	a908      	add	r1, sp, #32
   3641e:	f003 ff4f 	bl	3a2c0 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   36422:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   36426:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   3642a:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   3642e:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   36432:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   36436:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   3643a:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   3643c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   36440:	7022      	strb	r2, [r4, #0]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   36442:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   36446:	9809      	ldr	r0, [sp, #36]	; 0x24
   36448:	e5c2      	b.n	35fd0 <hci_cmd_handle+0x58>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   3644a:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   3644c:	8818      	ldrh	r0, [r3, #0]
   3644e:	f009 fa1f 	bl	3f890 <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
   36452:	2000      	movs	r0, #0
   36454:	f7ff fc00 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   36458:	e5ba      	b.n	35fd0 <hci_cmd_handle+0x58>
	status = ll_rl_enable(cmd->enable);
   3645a:	68a3      	ldr	r3, [r4, #8]
   3645c:	7818      	ldrb	r0, [r3, #0]
   3645e:	f009 f9fb 	bl	3f858 <ll_rl_enable>
	*evt = cmd_complete_status(status);
   36462:	f7ff fbf9 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   36466:	e5b3      	b.n	35fd0 <hci_cmd_handle+0x58>
	memcpy(dst, src, sizeof(*dst));
   36468:	68a1      	ldr	r1, [r4, #8]
   3646a:	2207      	movs	r2, #7
   3646c:	a80a      	add	r0, sp, #40	; 0x28
   3646e:	f015 ff3d 	bl	4c2ec <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36472:	2107      	movs	r1, #7
   36474:	a809      	add	r0, sp, #36	; 0x24
   36476:	f7ff fcdd 	bl	35e34 <hci_cmd_complete>
   3647a:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   3647c:	1c41      	adds	r1, r0, #1
   3647e:	a80a      	add	r0, sp, #40	; 0x28
   36480:	f009 fe86 	bl	40190 <ll_rl_lrpa_get>
   36484:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   36486:	9809      	ldr	r0, [sp, #36]	; 0x24
   36488:	e5a2      	b.n	35fd0 <hci_cmd_handle+0x58>
   3648a:	68a1      	ldr	r1, [r4, #8]
   3648c:	2207      	movs	r2, #7
   3648e:	a80a      	add	r0, sp, #40	; 0x28
   36490:	f015 ff2c 	bl	4c2ec <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36494:	2107      	movs	r1, #7
   36496:	a809      	add	r0, sp, #36	; 0x24
   36498:	f7ff fccc 	bl	35e34 <hci_cmd_complete>
   3649c:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   3649e:	1c41      	adds	r1, r0, #1
   364a0:	a80a      	add	r0, sp, #40	; 0x28
   364a2:	f009 fe53 	bl	4014c <ll_rl_crpa_get>
   364a6:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   364a8:	9809      	ldr	r0, [sp, #36]	; 0x24
   364aa:	e591      	b.n	35fd0 <hci_cmd_handle+0x58>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   364ac:	2102      	movs	r1, #2
   364ae:	a809      	add	r0, sp, #36	; 0x24
   364b0:	f7ff fcc0 	bl	35e34 <hci_cmd_complete>
   364b4:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   364b6:	f009 f987 	bl	3f7c8 <ll_rl_size_get>
	rp->status = 0x00;
   364ba:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   364bc:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   364be:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   364c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   364c2:	e585      	b.n	35fd0 <hci_cmd_handle+0x58>
	status = ll_rl_clear();
   364c4:	f009 f982 	bl	3f7cc <ll_rl_clear>
	*evt = cmd_complete_status(status);
   364c8:	f7ff fbc6 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   364cc:	e580      	b.n	35fd0 <hci_cmd_handle+0x58>
	status = ll_rl_remove(&cmd->peer_id_addr);
   364ce:	68a0      	ldr	r0, [r4, #8]
   364d0:	f009 fd70 	bl	3ffb4 <ll_rl_remove>
	*evt = cmd_complete_status(status);
   364d4:	f7ff fbc0 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   364d8:	e57a      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   364da:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   364dc:	f100 0217 	add.w	r2, r0, #23
   364e0:	1dc1      	adds	r1, r0, #7
   364e2:	f009 fcad 	bl	3fe40 <ll_rl_add>
	*evt = cmd_complete_status(status);
   364e6:	f7ff fbb7 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   364ea:	e571      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   364ec:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   364ee:	8859      	ldrh	r1, [r3, #2]
   364f0:	8818      	ldrh	r0, [r3, #0]
   364f2:	f003 fedb 	bl	3a2ac <ll_length_default_set>
	*evt = cmd_complete_status(status);
   364f6:	b2c0      	uxtb	r0, r0
   364f8:	f7ff fbae 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   364fc:	e568      	b.n	35fd0 <hci_cmd_handle+0x58>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   364fe:	2105      	movs	r1, #5
   36500:	a809      	add	r0, sp, #36	; 0x24
   36502:	f7ff fc97 	bl	35e34 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   36506:	a90a      	add	r1, sp, #40	; 0x28
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36508:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   3650a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   3650e:	f003 fec1 	bl	3a294 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   36512:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   36516:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   3651a:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   3651c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   36520:	7022      	strb	r2, [r4, #0]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   36522:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   36526:	9809      	ldr	r0, [sp, #36]	; 0x24
   36528:	e552      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   3652a:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   3652c:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   3652e:	889a      	ldrh	r2, [r3, #4]
   36530:	8859      	ldrh	r1, [r3, #2]
   36532:	4620      	mov	r0, r4
   36534:	f003 fe4e 	bl	3a1d4 <ll_length_req_send>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   36538:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   3653a:	2103      	movs	r1, #3
   3653c:	a809      	add	r0, sp, #36	; 0x24
   3653e:	f7ff fc79 	bl	35e34 <hci_cmd_complete>
	rp->status = status;
   36542:	7005      	strb	r5, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   36544:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   36548:	9809      	ldr	r0, [sp, #36]	; 0x24
   3654a:	e541      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   3654c:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   3654e:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   36550:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   36552:	8853      	ldrh	r3, [r2, #2]
   36554:	9102      	str	r1, [sp, #8]
   36556:	88d1      	ldrh	r1, [r2, #6]
   36558:	9101      	str	r1, [sp, #4]
   3655a:	8892      	ldrh	r2, [r2, #4]
   3655c:	9200      	str	r2, [sp, #0]
   3655e:	4620      	mov	r0, r4
   36560:	2200      	movs	r2, #0
   36562:	2102      	movs	r1, #2
   36564:	f003 fcda 	bl	39f1c <ll_conn_update>
   36568:	e7e6      	b.n	36538 <hci_cmd_handle+0x5c0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   3656a:	2109      	movs	r1, #9
   3656c:	a809      	add	r0, sp, #36	; 0x24
   3656e:	f7ff fc61 	bl	35e34 <hci_cmd_complete>
	dst[0] = val;
   36572:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
   36574:	2200      	movs	r2, #0
   36576:	213f      	movs	r1, #63	; 0x3f
   36578:	70c1      	strb	r1, [r0, #3]
   3657a:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   3657c:	2103      	movs	r1, #3
	dst[0] = val;
   3657e:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
   36580:	7083      	strb	r3, [r0, #2]
   36582:	7181      	strb	r1, [r0, #6]
	dst[0] = val;
   36584:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
   36586:	7202      	strb	r2, [r0, #8]
   36588:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
   3658a:	7143      	strb	r3, [r0, #5]
	if (err == -EINVAL) {
   3658c:	9809      	ldr	r0, [sp, #36]	; 0x24
   3658e:	e51f      	b.n	35fd0 <hci_cmd_handle+0x58>
	handle = sys_le16_to_cpu(cmd->handle);
   36590:	68a3      	ldr	r3, [r4, #8]
   36592:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   36594:	2200      	movs	r2, #0
   36596:	4620      	mov	r0, r4
   36598:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   3659a:	f008 faff 	bl	3eb9c <ll_start_enc_req_send>
   3659e:	e7cb      	b.n	36538 <hci_cmd_handle+0x5c0>
	handle = sys_le16_to_cpu(cmd->handle);
   365a0:	68a2      	ldr	r2, [r4, #8]
   365a2:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   365a6:	2100      	movs	r1, #0
   365a8:	4620      	mov	r0, r4
   365aa:	e7f6      	b.n	3659a <hci_cmd_handle+0x622>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   365ac:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   365ae:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   365b0:	789a      	ldrb	r2, [r3, #2]
   365b2:	2300      	movs	r3, #0
   365b4:	4620      	mov	r0, r4
   365b6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   365ba:	9300      	str	r3, [sp, #0]
   365bc:	2102      	movs	r1, #2
   365be:	f003 fcad 	bl	39f1c <ll_conn_update>
   365c2:	e7b9      	b.n	36538 <hci_cmd_handle+0x5c0>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
   365c4:	68a2      	ldr	r2, [r4, #8]
				 (uint8_t *)&cmd->rand,
   365c6:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   365c8:	f102 030c 	add.w	r3, r2, #12
   365cc:	f831 0b02 	ldrh.w	r0, [r1], #2
   365d0:	320a      	adds	r2, #10
   365d2:	f008 fbfb 	bl	3edcc <ll_enc_req_send>
	return bt_hci_cmd_status_create(_opcode, status);
   365d6:	4601      	mov	r1, r0
   365d8:	8838      	ldrh	r0, [r7, #0]
   365da:	f016 fb0a 	bl	4cbf2 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   365de:	e4f7      	b.n	35fd0 <hci_cmd_handle+0x58>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   365e0:	2109      	movs	r1, #9
   365e2:	a809      	add	r0, sp, #36	; 0x24
   365e4:	f7ff fc26 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   365e8:	2300      	movs	r3, #0
   365ea:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   365ee:	2108      	movs	r1, #8
   365f0:	f00a fa38 	bl	40a64 <lll_csrand_get>
	if (err == -EINVAL) {
   365f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   365f6:	e4eb      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   365f8:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   365fa:	aa0a      	add	r2, sp, #40	; 0x28
   365fc:	f100 0110 	add.w	r1, r0, #16
   36600:	2300      	movs	r3, #0
   36602:	f00c fd8f 	bl	43124 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36606:	2111      	movs	r1, #17
   36608:	a809      	add	r0, sp, #36	; 0x24
   3660a:	f7ff fc13 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   3660e:	2300      	movs	r3, #0
   36610:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   36614:	a90a      	add	r1, sp, #40	; 0x28
   36616:	2210      	movs	r2, #16
   36618:	f015 fe68 	bl	4c2ec <memcpy>
	if (err == -EINVAL) {
   3661c:	9809      	ldr	r0, [sp, #36]	; 0x24
   3661e:	e4d7      	b.n	35fd0 <hci_cmd_handle+0x58>
	handle = sys_le16_to_cpu(cmd->handle);
   36620:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   36622:	8818      	ldrh	r0, [r3, #0]
   36624:	f003 fd86 	bl	3a134 <ll_feature_req_send>
	return bt_hci_cmd_status_create(_opcode, status);
   36628:	4601      	mov	r1, r0
   3662a:	8838      	ldrh	r0, [r7, #0]
   3662c:	f016 fae1 	bl	4cbf2 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   36630:	e4ce      	b.n	35fd0 <hci_cmd_handle+0x58>
	handle = sys_le16_to_cpu(cmd->handle);
   36632:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36634:	2108      	movs	r1, #8
   36636:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   36638:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   3663a:	f7ff fbfb 	bl	35e34 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   3663e:	b2ae      	uxth	r6, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36640:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   36642:	1cc1      	adds	r1, r0, #3
   36644:	4630      	mov	r0, r6
   36646:	f003 fd01 	bl	3a04c <ll_chm_get>
	rp->status = status;
   3664a:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   3664c:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   36650:	9809      	ldr	r0, [sp, #36]	; 0x24
   36652:	e4bd      	b.n	35fd0 <hci_cmd_handle+0x58>
	status = ll_chm_update(&cmd->ch_map[0]);
   36654:	68a0      	ldr	r0, [r4, #8]
   36656:	f008 fe7d 	bl	3f354 <ll_chm_update>
	*evt = cmd_complete_status(status);
   3665a:	f7ff fafd 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   3665e:	e4b7      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   36660:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   36662:	8911      	ldrh	r1, [r2, #8]
   36664:	8853      	ldrh	r3, [r2, #2]
   36666:	8810      	ldrh	r0, [r2, #0]
   36668:	9102      	str	r1, [sp, #8]
   3666a:	88d1      	ldrh	r1, [r2, #6]
   3666c:	9101      	str	r1, [sp, #4]
   3666e:	8892      	ldrh	r2, [r2, #4]
   36670:	9200      	str	r2, [sp, #0]
   36672:	2200      	movs	r2, #0
   36674:	4611      	mov	r1, r2
   36676:	f003 fc51 	bl	39f1c <ll_conn_update>
	return bt_hci_cmd_status_create(_opcode, status);
   3667a:	4601      	mov	r1, r0
   3667c:	8838      	ldrh	r0, [r7, #0]
   3667e:	f016 fab8 	bl	4cbf2 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   36682:	e4a5      	b.n	35fd0 <hci_cmd_handle+0x58>
	status = ll_fal_remove(&cmd->addr);
   36684:	68a0      	ldr	r0, [r4, #8]
   36686:	f009 f827 	bl	3f6d8 <ll_fal_remove>
	*evt = cmd_complete_status(status);
   3668a:	f7ff fae5 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   3668e:	e49f      	b.n	35fd0 <hci_cmd_handle+0x58>
	status = ll_fal_add(&cmd->addr);
   36690:	68a0      	ldr	r0, [r4, #8]
   36692:	f009 fb79 	bl	3fd88 <ll_fal_add>
	*evt = cmd_complete_status(status);
   36696:	f7ff fadf 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   3669a:	e499      	b.n	35fd0 <hci_cmd_handle+0x58>
	status = ll_fal_clear();
   3669c:	f008 fff2 	bl	3f684 <ll_fal_clear>
	*evt = cmd_complete_status(status);
   366a0:	f7ff fada 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   366a4:	e494      	b.n	35fd0 <hci_cmd_handle+0x58>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   366a6:	2102      	movs	r1, #2
   366a8:	a809      	add	r0, sp, #36	; 0x24
   366aa:	f7ff fbc3 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   366ae:	2300      	movs	r3, #0
   366b0:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   366b2:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   366b4:	f008 ffe4 	bl	3f680 <ll_fal_size_get>
   366b8:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   366ba:	9809      	ldr	r0, [sp, #36]	; 0x24
   366bc:	e488      	b.n	35fd0 <hci_cmd_handle+0x58>
	status = ll_connect_disable(node_rx);
   366be:	4628      	mov	r0, r5
   366c0:	f008 fb36 	bl	3ed30 <ll_connect_disable>
	*evt = cmd_complete_status(status);
   366c4:	f7ff fac8 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   366c8:	e482      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
   366ca:	68a4      	ldr	r4, [r4, #8]
	status = ll_create_connection(scan_interval, scan_window,
   366cc:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   366d0:	8861      	ldrh	r1, [r4, #2]
   366d2:	7963      	ldrb	r3, [r4, #5]
   366d4:	7922      	ldrb	r2, [r4, #4]
   366d6:	8820      	ldrh	r0, [r4, #0]
   366d8:	9504      	str	r5, [sp, #16]
   366da:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   366de:	9503      	str	r5, [sp, #12]
   366e0:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   366e4:	9502      	str	r5, [sp, #8]
   366e6:	7b25      	ldrb	r5, [r4, #12]
   366e8:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   366ea:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   366ec:	9400      	str	r4, [sp, #0]
   366ee:	f7f1 fb47 	bl	27d80 <ll_create_connection>
	return bt_hci_cmd_status_create(_opcode, status);
   366f2:	4601      	mov	r1, r0
   366f4:	8838      	ldrh	r0, [r7, #0]
   366f6:	f016 fa7c 	bl	4cbf2 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   366fa:	e469      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
   366fc:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   366fe:	7818      	ldrb	r0, [r3, #0]
   36700:	2800      	cmp	r0, #0
   36702:	f000 80c9 	beq.w	36898 <hci_cmd_handle+0x920>
   36706:	785b      	ldrb	r3, [r3, #1]
   36708:	2b00      	cmp	r3, #0
   3670a:	f000 80c5 	beq.w	36898 <hci_cmd_handle+0x920>
			dup_count = 0;
   3670e:	496a      	ldr	r1, [pc, #424]	; (368b8 <hci_cmd_handle+0x940>)
			dup_curr = 0U;
   36710:	4a6a      	ldr	r2, [pc, #424]	; (368bc <hci_cmd_handle+0x944>)
			dup_count = 0;
   36712:	2300      	movs	r3, #0
   36714:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
   36716:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   36718:	f002 fe9e 	bl	39458 <ll_scan_enable>
	*evt = cmd_complete_status(status);
   3671c:	280c      	cmp	r0, #12
   3671e:	bf08      	it	eq
   36720:	2000      	moveq	r0, #0
   36722:	f7ff fa99 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   36726:	e453      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   36728:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   3672a:	7963      	ldrb	r3, [r4, #5]
   3672c:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   36730:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   36734:	7820      	ldrb	r0, [r4, #0]
   36736:	79a4      	ldrb	r4, [r4, #6]
   36738:	9400      	str	r4, [sp, #0]
   3673a:	f7f0 fc09 	bl	26f50 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
   3673e:	f7ff fa8b 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   36742:	e445      	b.n	35fd0 <hci_cmd_handle+0x58>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   36744:	68a1      	ldr	r1, [r4, #8]
   36746:	f811 0b01 	ldrb.w	r0, [r1], #1
   3674a:	f002 fdeb 	bl	39324 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
   3674e:	f7ff fa83 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   36752:	e43d      	b.n	35fd0 <hci_cmd_handle+0x58>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   36754:	68a1      	ldr	r1, [r4, #8]
   36756:	f811 0b01 	ldrb.w	r0, [r1], #1
   3675a:	f002 fd8f 	bl	3927c <ll_adv_data_set>
	*evt = cmd_complete_status(status);
   3675e:	f7ff fa7b 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   36762:	e435      	b.n	35fd0 <hci_cmd_handle+0x58>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36764:	2102      	movs	r1, #2
   36766:	a809      	add	r0, sp, #36	; 0x24
   36768:	f7ff fb64 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   3676c:	2300      	movs	r3, #0
   3676e:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   36770:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   36772:	9809      	ldr	r0, [sp, #36]	; 0x24
   36774:	e42c      	b.n	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   36776:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   36778:	7ba5      	ldrb	r5, [r4, #14]
   3677a:	79a3      	ldrb	r3, [r4, #6]
   3677c:	7962      	ldrb	r2, [r4, #5]
   3677e:	7921      	ldrb	r1, [r4, #4]
   36780:	8820      	ldrh	r0, [r4, #0]
   36782:	9502      	str	r5, [sp, #8]
   36784:	7b65      	ldrb	r5, [r4, #13]
   36786:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   36788:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   3678a:	9400      	str	r4, [sp, #0]
   3678c:	f002 faf6 	bl	38d7c <ll_adv_params_set>
	*evt = cmd_complete_status(status);
   36790:	f7ff fa62 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   36794:	e41c      	b.n	35fd0 <hci_cmd_handle+0x58>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   36796:	68a1      	ldr	r1, [r4, #8]
   36798:	2001      	movs	r0, #1
   3679a:	f7ff f899 	bl	358d0 <ll_addr_set>
	*evt = cmd_complete_status(status);
   3679e:	f7ff fa5b 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   367a2:	e415      	b.n	35fd0 <hci_cmd_handle+0x58>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   367a4:	2109      	movs	r1, #9
   367a6:	a809      	add	r0, sp, #36	; 0x24
   367a8:	f7ff fb44 	bl	35e34 <hci_cmd_complete>
	rp->status = 0x00;
   367ac:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   367ae:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   367b0:	2208      	movs	r2, #8
	rp->status = 0x00;
   367b2:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   367b6:	f015 fda4 	bl	4c302 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   367ba:	f000 fcff 	bl	371bc <ll_feat_get>
	dst[1] = val >> 8;
   367be:	f3c0 2507 	ubfx	r5, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   367c2:	0c03      	lsrs	r3, r0, #16
   367c4:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   367c6:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
   367c8:	70a5      	strb	r5, [r4, #2]
	dst[0] = val;
   367ca:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
   367cc:	0a10      	lsrs	r0, r2, #8
   367ce:	0a1b      	lsrs	r3, r3, #8
   367d0:	f3c1 2507 	ubfx	r5, r1, #8, #8
   367d4:	7220      	strb	r0, [r4, #8]
	dst[0] = val;
   367d6:	7161      	strb	r1, [r4, #5]
	dst[1] = val >> 8;
   367d8:	7123      	strb	r3, [r4, #4]
   367da:	71a5      	strb	r5, [r4, #6]
	dst[0] = val;
   367dc:	71e2      	strb	r2, [r4, #7]
	if (err == -EINVAL) {
   367de:	9809      	ldr	r0, [sp, #36]	; 0x24
   367e0:	f7ff bbf6 	b.w	35fd0 <hci_cmd_handle+0x58>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   367e4:	2104      	movs	r1, #4
   367e6:	a809      	add	r0, sp, #36	; 0x24
   367e8:	f7ff fb24 	bl	35e34 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   367ec:	2203      	movs	r2, #3
	rp->status = 0x00;
   367ee:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   367f0:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
   367f2:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   367f4:	221b      	movs	r2, #27
   367f6:	7042      	strb	r2, [r0, #1]
   367f8:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   367fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   367fc:	f7ff bbe8 	b.w	35fd0 <hci_cmd_handle+0x58>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   36800:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   36802:	4b2f      	ldr	r3, [pc, #188]	; (368c0 <hci_cmd_handle+0x948>)
   36804:	f7ff bbf9 	b.w	35ffa <hci_cmd_handle+0x82>
	status = ll_adv_enable(cmd->enable);
   36808:	68a3      	ldr	r3, [r4, #8]
   3680a:	7818      	ldrb	r0, [r3, #0]
   3680c:	f7f0 f848 	bl	268a0 <ll_adv_enable>
	*evt = cmd_complete_status(status);
   36810:	f7ff fa22 	bl	35c58 <cmd_complete_status>
	if (err == -EINVAL) {
   36814:	f7ff bbdc 	b.w	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   36818:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   3681a:	7899      	ldrb	r1, [r3, #2]
   3681c:	8818      	ldrh	r0, [r3, #0]
   3681e:	f003 fc39 	bl	3a094 <ll_terminate_ind_send>
	return bt_hci_cmd_status_create(_opcode, status);
   36822:	4601      	mov	r1, r0
   36824:	8838      	ldrh	r0, [r7, #0]
   36826:	f016 f9e4 	bl	4cbf2 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   3682a:	f7ff bbd1 	b.w	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   3682e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   36830:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   36832:	8859      	ldrh	r1, [r3, #2]
   36834:	4620      	mov	r0, r4
   36836:	f003 fdf5 	bl	3a424 <ll_apto_set>
   3683a:	e67d      	b.n	36538 <hci_cmd_handle+0x5c0>
	handle = sys_le16_to_cpu(cmd->handle);
   3683c:	68a3      	ldr	r3, [r4, #8]
   3683e:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   36840:	a90a      	add	r1, sp, #40	; 0x28
   36842:	4620      	mov	r0, r4
   36844:	f003 fdc8 	bl	3a3d8 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36848:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   3684a:	4605      	mov	r5, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   3684c:	a809      	add	r0, sp, #36	; 0x24
   3684e:	f7ff faf1 	bl	35e34 <hci_cmd_complete>
	rp->handle = sys_cpu_to_le16(handle);
   36852:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->status = status;
   36856:	7005      	strb	r5, [r0, #0]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   36858:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   3685c:	f8a0 3003 	strh.w	r3, [r0, #3]
   36860:	9809      	ldr	r0, [sp, #36]	; 0x24
   36862:	f7ff bbb5 	b.w	35fd0 <hci_cmd_handle+0x58>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   36866:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36868:	2104      	movs	r1, #4
   3686a:	a809      	add	r0, sp, #36	; 0x24
	handle = sys_le16_to_cpu(cmd->handle);
   3686c:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   3686e:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36870:	f7ff fae0 	bl	35e34 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   36874:	b2af      	uxth	r7, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   36876:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   36878:	1cc3      	adds	r3, r0, #3
   3687a:	4639      	mov	r1, r7
   3687c:	4632      	mov	r2, r6
   3687e:	2002      	movs	r0, #2
   36880:	f7ff f86e 	bl	35960 <ll_tx_pwr_lvl_get>
	rp->status = status;
   36884:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
   36886:	f8a4 5001 	strh.w	r5, [r4, #1]
   3688a:	9809      	ldr	r0, [sp, #36]	; 0x24
   3688c:	f7ff bba0 	b.w	35fd0 <hci_cmd_handle+0x58>
   36890:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   36892:	4b0c      	ldr	r3, [pc, #48]	; (368c4 <hci_cmd_handle+0x94c>)
   36894:	f7ff bbb1 	b.w	35ffa <hci_cmd_handle+0x82>
		dup_count = DUP_FILTER_DISABLED;
   36898:	4b07      	ldr	r3, [pc, #28]	; (368b8 <hci_cmd_handle+0x940>)
   3689a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3689e:	601a      	str	r2, [r3, #0]
   368a0:	e73a      	b.n	36718 <hci_cmd_handle+0x7a0>
	return bt_hci_cmd_status_create(_opcode, status);
   368a2:	2112      	movs	r1, #18
   368a4:	f016 f9a5 	bl	4cbf2 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   368a8:	f7ff bb92 	b.w	35fd0 <hci_cmd_handle+0x58>
	return bt_hci_cmd_status_create(_opcode, status);
   368ac:	2111      	movs	r1, #17
   368ae:	f016 f9a0 	bl	4cbf2 <bt_hci_cmd_status_create>
		return;
   368b2:	f7ff bb8d 	b.w	35fd0 <hci_cmd_handle+0x58>
   368b6:	bf00      	nop
   368b8:	20004570 	.word	0x20004570
   368bc:	20004574 	.word	0x20004574
   368c0:	20000160 	.word	0x20000160
   368c4:	20000158 	.word	0x20000158

000368c8 <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
   368c8:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   368ca:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   368cc:	2b03      	cmp	r3, #3
	*evt = NULL;
   368ce:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   368d0:	d95b      	bls.n	3698a <hci_acl_handle+0xc2>
{
   368d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   368d6:	4604      	mov	r4, r0
   368d8:	460f      	mov	r7, r1
   368da:	3008      	adds	r0, #8
   368dc:	2104      	movs	r1, #4
   368de:	f019 fc8b 	bl	501f8 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   368e2:	89a3      	ldrh	r3, [r4, #12]
	len = sys_le16_to_cpu(acl->len);
   368e4:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   368e6:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
   368ea:	42b3      	cmp	r3, r6
   368ec:	d30c      	bcc.n	36908 <hci_acl_handle+0x40>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   368ee:	2e1b      	cmp	r6, #27
   368f0:	d80a      	bhi.n	36908 <hci_acl_handle+0x40>
	node_tx = ll_tx_mem_acquire();
   368f2:	f003 fabd 	bl	39e70 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   368f6:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
   368fa:	4605      	mov	r5, r0
   368fc:	b328      	cbz	r0, 3694a <hci_acl_handle+0x82>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   368fe:	089a      	lsrs	r2, r3, #2
   36900:	d102      	bne.n	36908 <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
   36902:	b1e3      	cbz	r3, 3693e <hci_acl_handle+0x76>
   36904:	2b01      	cmp	r3, #1
   36906:	d004      	beq.n	36912 <hci_acl_handle+0x4a>
		return -EINVAL;
   36908:	f06f 0315 	mvn.w	r3, #21
}
   3690c:	4618      	mov	r0, r3
   3690e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   36912:	7902      	ldrb	r2, [r0, #4]
   36914:	f363 0201 	bfi	r2, r3, #0, #2
   36918:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
   3691a:	716e      	strb	r6, [r5, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   3691c:	68a1      	ldr	r1, [r4, #8]
   3691e:	4632      	mov	r2, r6
   36920:	1de8      	adds	r0, r5, #7
   36922:	f015 fce3 	bl	4c2ec <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   36926:	4629      	mov	r1, r5
   36928:	f3c8 000b 	ubfx	r0, r8, #0, #12
   3692c:	f003 faac 	bl	39e88 <ll_tx_mem_enqueue>
   36930:	4603      	mov	r3, r0
   36932:	2800      	cmp	r0, #0
   36934:	d0ea      	beq.n	3690c <hci_acl_handle+0x44>
		ll_tx_mem_release(node_tx);
   36936:	4628      	mov	r0, r5
   36938:	f003 faa0 	bl	39e7c <ll_tx_mem_release>
   3693c:	e7e4      	b.n	36908 <hci_acl_handle+0x40>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   3693e:	7903      	ldrb	r3, [r0, #4]
   36940:	2202      	movs	r2, #2
   36942:	f362 0301 	bfi	r3, r2, #0, #2
   36946:	7103      	strb	r3, [r0, #4]
		break;
   36948:	e7e7      	b.n	3691a <hci_acl_handle+0x52>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   3694a:	4b13      	ldr	r3, [pc, #76]	; (36998 <hci_acl_handle+0xd0>)
   3694c:	6819      	ldr	r1, [r3, #0]
   3694e:	4603      	mov	r3, r0
   36950:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   36954:	4313      	orrs	r3, r2
   36956:	d01c      	beq.n	36992 <hci_acl_handle+0xca>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   36958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3695c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   36960:	2001      	movs	r0, #1
   36962:	f7f6 febf 	bl	2d6e4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   36966:	2102      	movs	r1, #2
   36968:	6038      	str	r0, [r7, #0]
   3696a:	3008      	adds	r0, #8
   3696c:	f019 fc13 	bl	50196 <net_buf_simple_add>
	hdr->len = len;
   36970:	2401      	movs	r4, #1
	hdr->evt = evt;
   36972:	231a      	movs	r3, #26
   36974:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   36976:	7044      	strb	r4, [r0, #1]
   36978:	6838      	ldr	r0, [r7, #0]
   3697a:	4621      	mov	r1, r4
   3697c:	3008      	adds	r0, #8
   3697e:	f019 fc0a 	bl	50196 <net_buf_simple_add>
		return -ENOBUFS;
   36982:	f06f 0368 	mvn.w	r3, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   36986:	7004      	strb	r4, [r0, #0]
   36988:	e7c0      	b.n	3690c <hci_acl_handle+0x44>
		return -EINVAL;
   3698a:	f06f 0315 	mvn.w	r3, #21
}
   3698e:	4618      	mov	r0, r3
   36990:	4770      	bx	lr
		return -ENOBUFS;
   36992:	f06f 0368 	mvn.w	r3, #104	; 0x68
   36996:	e7b9      	b.n	3690c <hci_acl_handle+0x44>
   36998:	20000158 	.word	0x20000158

0003699c <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   3699c:	4b06      	ldr	r3, [pc, #24]	; (369b8 <hci_disconn_complete_encode+0x1c>)
   3699e:	681b      	ldr	r3, [r3, #0]
{
   369a0:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   369a2:	f003 0410 	and.w	r4, r3, #16
   369a6:	2500      	movs	r5, #0
   369a8:	ea54 0305 	orrs.w	r3, r4, r5
   369ac:	d101      	bne.n	369b2 <hci_disconn_complete_encode+0x16>
}
   369ae:	bc30      	pop	{r4, r5}
   369b0:	4770      	bx	lr
   369b2:	bc30      	pop	{r4, r5}
   369b4:	f7ff ba26 	b.w	35e04 <hci_disconn_complete_encode.part.37>
   369b8:	20000158 	.word	0x20000158

000369bc <hci_disconn_complete_process>:
	conn_count--;
   369bc:	4a02      	ldr	r2, [pc, #8]	; (369c8 <hci_disconn_complete_process+0xc>)
   369be:	6813      	ldr	r3, [r2, #0]
   369c0:	3b01      	subs	r3, #1
   369c2:	6013      	str	r3, [r2, #0]
}
   369c4:	4770      	bx	lr
   369c6:	bf00      	nop
   369c8:	2000456c 	.word	0x2000456c

000369cc <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   369cc:	7f03      	ldrb	r3, [r0, #28]
   369ce:	f003 0303 	and.w	r3, r3, #3
   369d2:	3b01      	subs	r3, #1
   369d4:	2b01      	cmp	r3, #1
{
   369d6:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   369d8:	d90d      	bls.n	369f6 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   369da:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   369de:	4a15      	ldr	r2, [pc, #84]	; (36a34 <hci_acl_encode+0x68>)
   369e0:	4915      	ldr	r1, [pc, #84]	; (36a38 <hci_acl_encode+0x6c>)
   369e2:	4816      	ldr	r0, [pc, #88]	; (36a3c <hci_acl_encode+0x70>)
   369e4:	f013 fb7a 	bl	4a0dc <printk>
   369e8:	4040      	eors	r0, r0
   369ea:	f380 8811 	msr	BASEPRI, r0
   369ee:	f04f 0003 	mov.w	r0, #3
   369f2:	df02      	svc	2
		break;
	}
}
   369f4:	bd70      	pop	{r4, r5, r6, pc}
   369f6:	4604      	mov	r4, r0
   369f8:	f101 0508 	add.w	r5, r1, #8
   369fc:	4628      	mov	r0, r5
   369fe:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   36a00:	88e6      	ldrh	r6, [r4, #6]
   36a02:	f019 fbc8 	bl	50196 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   36a06:	7f23      	ldrb	r3, [r4, #28]
   36a08:	f003 0303 	and.w	r3, r3, #3
   36a0c:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   36a0e:	bf0c      	ite	eq
   36a10:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   36a14:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   36a18:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   36a1a:	7f61      	ldrb	r1, [r4, #29]
   36a1c:	8041      	strh	r1, [r0, #2]
   36a1e:	4628      	mov	r0, r5
   36a20:	f019 fbb9 	bl	50196 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   36a24:	7f62      	ldrb	r2, [r4, #29]
   36a26:	f104 011f 	add.w	r1, r4, #31
}
   36a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   36a2e:	f015 bc5d 	b.w	4c2ec <memcpy>
   36a32:	bf00      	nop
   36a34:	00052de8 	.word	0x00052de8
   36a38:	00052dd8 	.word	0x00052dd8
   36a3c:	00052d50 	.word	0x00052d50

00036a40 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   36a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   36a44:	7903      	ldrb	r3, [r0, #4]
   36a46:	88c6      	ldrh	r6, [r0, #6]
   36a48:	2b03      	cmp	r3, #3
{
   36a4a:	b086      	sub	sp, #24
   36a4c:	4604      	mov	r4, r0
   36a4e:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   36a50:	f100 071c 	add.w	r7, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   36a54:	d01d      	beq.n	36a92 <hci_evt_encode+0x52>
	switch (node_rx->hdr.type) {
   36a56:	3b05      	subs	r3, #5
   36a58:	2b17      	cmp	r3, #23
   36a5a:	f200 8202 	bhi.w	36e62 <hci_evt_encode+0x422>
   36a5e:	e8df f013 	tbh	[pc, r3, lsl #1]
   36a62:	00ac      	.short	0x00ac
   36a64:	02000200 	.word	0x02000200
   36a68:	02000200 	.word	0x02000200
   36a6c:	02000200 	.word	0x02000200
   36a70:	02000200 	.word	0x02000200
   36a74:	02000200 	.word	0x02000200
   36a78:	02000200 	.word	0x02000200
   36a7c:	02000200 	.word	0x02000200
   36a80:	02000200 	.word	0x02000200
   36a84:	016f0116 	.word	0x016f0116
   36a88:	01a7017f 	.word	0x01a7017f
   36a8c:	01e601cf 	.word	0x01e601cf
   36a90:	007d      	.short	0x007d
	switch (pdu_data->llctrl.opcode) {
   36a92:	7fc3      	ldrb	r3, [r0, #31]
   36a94:	3b03      	subs	r3, #3
   36a96:	2b12      	cmp	r3, #18
   36a98:	f200 82a8 	bhi.w	36fec <hci_evt_encode+0x5ac>
   36a9c:	e8df f013 	tbh	[pc, r3, lsl #1]
   36aa0:	02a601f1 	.word	0x02a601f1
   36aa4:	027102a6 	.word	0x027102a6
   36aa8:	02a6027d 	.word	0x02a6027d
   36aac:	02a60219 	.word	0x02a60219
   36ab0:	02a602a6 	.word	0x02a602a6
   36ab4:	02a60222 	.word	0x02a60222
   36ab8:	02a60233 	.word	0x02a60233
   36abc:	02a6005b 	.word	0x02a6005b
   36ac0:	025102a6 	.word	0x025102a6
   36ac4:	0251      	.short	0x0251
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36ac6:	4313      	orrs	r3, r2
   36ac8:	d045      	beq.n	36b56 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   36aca:	4bc6      	ldr	r3, [pc, #792]	; (36de4 <hci_evt_encode+0x3a4>)
   36acc:	6818      	ldr	r0, [r3, #0]
   36ace:	460b      	mov	r3, r1
   36ad0:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36ad4:	4313      	orrs	r3, r2
   36ad6:	d03e      	beq.n	36b56 <hci_evt_encode+0x116>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   36ad8:	7f20      	ldrb	r0, [r4, #28]
   36ada:	f000 030f 	and.w	r3, r0, #15
   36ade:	2b01      	cmp	r3, #1
   36ae0:	d00d      	beq.n	36afe <hci_evt_encode+0xbe>
   36ae2:	f241 435a 	movw	r3, #5210	; 0x145a
   36ae6:	4ac0      	ldr	r2, [pc, #768]	; (36de8 <hci_evt_encode+0x3a8>)
   36ae8:	49c0      	ldr	r1, [pc, #768]	; (36dec <hci_evt_encode+0x3ac>)
   36aea:	48c1      	ldr	r0, [pc, #772]	; (36df0 <hci_evt_encode+0x3b0>)
   36aec:	f013 faf6 	bl	4a0dc <printk>
   36af0:	4040      	eors	r0, r0
   36af2:	f380 8811 	msr	BASEPRI, r0
   36af6:	f04f 0003 	mov.w	r0, #3
   36afa:	df02      	svc	2
   36afc:	7f20      	ldrb	r0, [r4, #28]
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   36afe:	f104 071e 	add.w	r7, r4, #30
   36b02:	f3c0 1180 	ubfx	r1, r0, #6, #1
   36b06:	463a      	mov	r2, r7
   36b08:	f000 000f 	and.w	r0, r0, #15
   36b0c:	f7ff f918 	bl	35d40 <dup_found.isra.13>
	if (dup_scan &&
   36b10:	bb08      	cbnz	r0, 36b56 <hci_evt_encode+0x116>
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   36b12:	4628      	mov	r0, r5
   36b14:	2211      	movs	r2, #17
   36b16:	210b      	movs	r1, #11
   36b18:	f7ff f8b0 	bl	35c7c <meta_evt>
	drp->num_reports = 1U;
   36b1c:	2301      	movs	r3, #1
   36b1e:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   36b20:	7043      	strb	r3, [r0, #1]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   36b22:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   36b24:	f008 fe50 	bl	3f7c8 <ll_rl_size_get>
   36b28:	4580      	cmp	r8, r0
   36b2a:	f080 82c2 	bcs.w	370b2 <hci_evt_encode+0x672>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   36b2e:	4640      	mov	r0, r8
   36b30:	1cea      	adds	r2, r5, #3
   36b32:	1ca9      	adds	r1, r5, #2
   36b34:	f008 fe04 	bl	3f740 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   36b38:	78ab      	ldrb	r3, [r5, #2]
   36b3a:	3302      	adds	r3, #2
   36b3c:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   36b3e:	7f23      	ldrb	r3, [r4, #28]
   36b40:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   36b44:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   36b46:	f104 0124 	add.w	r1, r4, #36	; 0x24
   36b4a:	2206      	movs	r2, #6
   36b4c:	f105 000a 	add.w	r0, r5, #10
   36b50:	f015 fbcc 	bl	4c2ec <memcpy>
	dir_info->rssi = rssi;
   36b54:	742e      	strb	r6, [r5, #16]
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   36b56:	b006      	add	sp, #24
   36b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36b5c:	4ba5      	ldr	r3, [pc, #660]	; (36df4 <hci_evt_encode+0x3b4>)
   36b5e:	6858      	ldr	r0, [r3, #4]
   36b60:	2100      	movs	r1, #0
   36b62:	460a      	mov	r2, r1
   36b64:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   36b68:	4313      	orrs	r3, r2
   36b6a:	d0f4      	beq.n	36b56 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   36b6c:	4b9d      	ldr	r3, [pc, #628]	; (36de4 <hci_evt_encode+0x3a4>)
   36b6e:	6818      	ldr	r0, [r3, #0]
   36b70:	460b      	mov	r3, r1
   36b72:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36b76:	4313      	orrs	r3, r2
   36b78:	d0ed      	beq.n	36b56 <hci_evt_encode+0x116>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   36b7a:	2205      	movs	r2, #5
   36b7c:	4628      	mov	r0, r5
   36b7e:	210c      	movs	r1, #12
   36b80:	f7ff f87c 	bl	35c7c <meta_evt>
	sep->status = pu->status;
   36b84:	7f23      	ldrb	r3, [r4, #28]
   36b86:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   36b88:	f8a0 6001 	strh.w	r6, [r0, #1]
   36b8c:	7f62      	ldrb	r2, [r4, #29]
   36b8e:	2a00      	cmp	r2, #0
   36b90:	fa92 f3a2 	rbit	r3, r2
   36b94:	fab3 f383 	clz	r3, r3
   36b98:	bf08      	it	eq
   36b9a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   36b9e:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   36ba0:	70c3      	strb	r3, [r0, #3]
   36ba2:	7fa2      	ldrb	r2, [r4, #30]
   36ba4:	fa92 f3a2 	rbit	r3, r2
   36ba8:	2a00      	cmp	r2, #0
   36baa:	fab3 f383 	clz	r3, r3
   36bae:	bf08      	it	eq
   36bb0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   36bb4:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   36bb6:	7103      	strb	r3, [r0, #4]
   36bb8:	e7cd      	b.n	36b56 <hci_evt_encode+0x116>
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   36bba:	7e03      	ldrb	r3, [r0, #24]
	if (adv->tx_addr) {
   36bbc:	7f02      	ldrb	r2, [r0, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   36bbe:	498e      	ldr	r1, [pc, #568]	; (36df8 <hci_evt_encode+0x3b8>)
	direct_report = node_rx->hdr.rx_ftr.direct;
   36bc0:	7e87      	ldrb	r7, [r0, #26]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   36bc2:	9104      	str	r1, [sp, #16]
   36bc4:	2102      	movs	r1, #2
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   36bc6:	425b      	negs	r3, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   36bc8:	f64f 7004 	movw	r0, #65284	; 0xff04
   36bcc:	f88d 1016 	strb.w	r1, [sp, #22]
	if (adv->tx_addr) {
   36bd0:	0651      	lsls	r1, r2, #25
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   36bd2:	b25e      	sxtb	r6, r3
	direct_report = node_rx->hdr.rx_ftr.direct;
   36bd4:	f3c7 0740 	ubfx	r7, r7, #1, #1
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   36bd8:	f8ad 0014 	strh.w	r0, [sp, #20]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   36bdc:	f894 8019 	ldrb.w	r8, [r4, #25]
	if (adv->tx_addr) {
   36be0:	f100 81e5 	bmi.w	36fae <hci_evt_encode+0x56e>
	if (direct_report) {
   36be4:	4b83      	ldr	r3, [pc, #524]	; (36df4 <hci_evt_encode+0x3b4>)
   36be6:	6858      	ldr	r0, [r3, #4]
   36be8:	2100      	movs	r1, #0
   36bea:	460a      	mov	r2, r1
   36bec:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   36bf0:	2f00      	cmp	r7, #0
   36bf2:	f47f af68 	bne.w	36ac6 <hci_evt_encode+0x86>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36bf6:	4313      	orrs	r3, r2
   36bf8:	d0ad      	beq.n	36b56 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   36bfa:	4b7a      	ldr	r3, [pc, #488]	; (36de4 <hci_evt_encode+0x3a4>)
   36bfc:	6819      	ldr	r1, [r3, #0]
   36bfe:	463b      	mov	r3, r7
   36c00:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36c04:	4313      	orrs	r3, r2
   36c06:	d0a6      	beq.n	36b56 <hci_evt_encode+0x116>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   36c08:	7f20      	ldrb	r0, [r4, #28]
   36c0a:	f104 0a1e 	add.w	sl, r4, #30
   36c0e:	f3c0 1180 	ubfx	r1, r0, #6, #1
   36c12:	4652      	mov	r2, sl
   36c14:	f000 000f 	and.w	r0, r0, #15
   36c18:	f7ff f892 	bl	35d40 <dup_found.isra.13>
	if (dup_scan &&
   36c1c:	2800      	cmp	r0, #0
   36c1e:	d19a      	bne.n	36b56 <hci_evt_encode+0x116>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   36c20:	7f23      	ldrb	r3, [r4, #28]
   36c22:	f003 030f 	and.w	r3, r3, #15
   36c26:	2b01      	cmp	r3, #1
   36c28:	f000 8240 	beq.w	370ac <hci_evt_encode+0x66c>
		data_len = (adv->len - BDADDR_SIZE);
   36c2c:	7f63      	ldrb	r3, [r4, #29]
   36c2e:	f1a3 0906 	sub.w	r9, r3, #6
   36c32:	fa5f f989 	uxtb.w	r9, r9
   36c36:	3305      	adds	r3, #5
   36c38:	b2da      	uxtb	r2, r3
   36c3a:	464f      	mov	r7, r9
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   36c3c:	4628      	mov	r0, r5
   36c3e:	2102      	movs	r1, #2
   36c40:	f7ff f81c 	bl	35c7c <meta_evt>
	sep->num_reports = 1U;
   36c44:	2301      	movs	r3, #1
   36c46:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   36c48:	7f23      	ldrb	r3, [r4, #28]
   36c4a:	aa06      	add	r2, sp, #24
   36c4c:	f003 030f 	and.w	r3, r3, #15
   36c50:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   36c52:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
   36c54:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   36c58:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   36c5a:	f008 fdb5 	bl	3f7c8 <ll_rl_size_get>
   36c5e:	4580      	cmp	r8, r0
   36c60:	f080 821a 	bcs.w	37098 <hci_evt_encode+0x658>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   36c64:	4640      	mov	r0, r8
   36c66:	1cea      	adds	r2, r5, #3
   36c68:	1ca9      	adds	r1, r5, #2
   36c6a:	f008 fd69 	bl	3f740 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   36c6e:	78ab      	ldrb	r3, [r5, #2]
   36c70:	3302      	adds	r3, #2
   36c72:	70ab      	strb	r3, [r5, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   36c74:	f105 080a 	add.w	r8, r5, #10
	adv_info->length = data_len;
   36c78:	f885 9009 	strb.w	r9, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   36c7c:	f104 0124 	add.w	r1, r4, #36	; 0x24
   36c80:	4640      	mov	r0, r8
   36c82:	463a      	mov	r2, r7
   36c84:	f015 fb32 	bl	4c2ec <memcpy>
	*prssi = rssi;
   36c88:	f808 6007 	strb.w	r6, [r8, r7]
   36c8c:	e763      	b.n	36b56 <hci_evt_encode+0x116>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   36c8e:	07fa      	lsls	r2, r7, #31
   36c90:	f100 8195 	bmi.w	36fbe <hci_evt_encode+0x57e>
	status = cc->status;
   36c94:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   36c96:	2f00      	cmp	r7, #0
   36c98:	f000 819f 	beq.w	36fda <hci_evt_encode+0x59a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36c9c:	4b55      	ldr	r3, [pc, #340]	; (36df4 <hci_evt_encode+0x3b4>)
   36c9e:	6859      	ldr	r1, [r3, #4]
   36ca0:	f04f 0800 	mov.w	r8, #0
   36ca4:	4642      	mov	r2, r8
   36ca6:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   36caa:	4313      	orrs	r3, r2
   36cac:	f43f af53 	beq.w	36b56 <hci_evt_encode+0x116>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   36cb0:	4b4c      	ldr	r3, [pc, #304]	; (36de4 <hci_evt_encode+0x3a4>)
   36cb2:	f8d3 c000 	ldr.w	ip, [r3]
   36cb6:	f240 2101 	movw	r1, #513	; 0x201
   36cba:	ea0c 0201 	and.w	r2, ip, r1
   36cbe:	4643      	mov	r3, r8
   36cc0:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   36cc2:	f40c 7000 	and.w	r0, ip, #512	; 0x200
   36cc6:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   36cc8:	f43f af45 	beq.w	36b56 <hci_evt_encode+0x116>
	if (!status) {
   36ccc:	2f00      	cmp	r7, #0
   36cce:	f040 819a 	bne.w	37006 <hci_evt_encode+0x5c6>
		conn_count++;
   36cd2:	4a4a      	ldr	r2, [pc, #296]	; (36dfc <hci_evt_encode+0x3bc>)
   36cd4:	6813      	ldr	r3, [r2, #0]
   36cd6:	3301      	adds	r3, #1
   36cd8:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   36cda:	ea50 0301 	orrs.w	r3, r0, r1
   36cde:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   36ce2:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   36ce4:	f000 819e 	beq.w	37024 <hci_evt_encode+0x5e4>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   36ce8:	221e      	movs	r2, #30
   36cea:	210a      	movs	r1, #10
   36cec:	f7fe ffc6 	bl	35c7c <meta_evt>
		leecc->status = 0x00;
   36cf0:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   36cf2:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   36cf6:	7f63      	ldrb	r3, [r4, #29]
   36cf8:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   36cfa:	7fa3      	ldrb	r3, [r4, #30]
   36cfc:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   36cfe:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   36d00:	4641      	mov	r1, r8
   36d02:	2206      	movs	r2, #6
   36d04:	3005      	adds	r0, #5
   36d06:	f015 faf1 	bl	4c2ec <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   36d0a:	2206      	movs	r2, #6
   36d0c:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   36d10:	f105 000b 	add.w	r0, r5, #11
   36d14:	f015 faea 	bl	4c2ec <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   36d18:	2206      	movs	r2, #6
   36d1a:	f104 0125 	add.w	r1, r4, #37	; 0x25
   36d1e:	f105 0011 	add.w	r0, r5, #17
   36d22:	f015 fae3 	bl	4c2ec <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   36d26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   36d28:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   36d2a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   36d2c:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   36d30:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   36d34:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   36d38:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   36d3c:	776b      	strb	r3, [r5, #29]
		return;
   36d3e:	e70a      	b.n	36b56 <hci_evt_encode+0x116>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   36d40:	4b2c      	ldr	r3, [pc, #176]	; (36df4 <hci_evt_encode+0x3b4>)
   36d42:	6819      	ldr	r1, [r3, #0]
   36d44:	2300      	movs	r3, #0
   36d46:	f001 0210 	and.w	r2, r1, #16
   36d4a:	4313      	orrs	r3, r2
   36d4c:	f43f af03 	beq.w	36b56 <hci_evt_encode+0x116>
   36d50:	462a      	mov	r2, r5
   36d52:	4631      	mov	r1, r6
   36d54:	4638      	mov	r0, r7
}
   36d56:	b006      	add	sp, #24
   36d58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36d5c:	f7ff b852 	b.w	35e04 <hci_disconn_complete_encode.part.37>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36d60:	4b24      	ldr	r3, [pc, #144]	; (36df4 <hci_evt_encode+0x3b4>)
   36d62:	6858      	ldr	r0, [r3, #4]
   36d64:	2100      	movs	r1, #0
   36d66:	460a      	mov	r2, r1
   36d68:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   36d6c:	4313      	orrs	r3, r2
   36d6e:	f43f aef2 	beq.w	36b56 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   36d72:	4b1c      	ldr	r3, [pc, #112]	; (36de4 <hci_evt_encode+0x3a4>)
   36d74:	6818      	ldr	r0, [r3, #0]
   36d76:	460b      	mov	r3, r1
   36d78:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36d7c:	4313      	orrs	r3, r2
   36d7e:	f43f aeea 	beq.w	36b56 <hci_evt_encode+0x116>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   36d82:	4628      	mov	r0, r5
   36d84:	2209      	movs	r2, #9
   36d86:	2103      	movs	r1, #3
   36d88:	f7fe ff78 	bl	35c7c <meta_evt>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36d8c:	07fb      	lsls	r3, r7, #31
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   36d8e:	4605      	mov	r5, r0
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   36d90:	f100 8174 	bmi.w	3707c <hci_evt_encode+0x63c>
	sep->status = cu->status;
   36d94:	7f23      	ldrb	r3, [r4, #28]
   36d96:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   36d98:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   36d9a:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   36d9c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   36d9e:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   36da2:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   36da6:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   36daa:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   36dae:	e6d2      	b.n	36b56 <hci_evt_encode+0x116>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   36db0:	4b10      	ldr	r3, [pc, #64]	; (36df4 <hci_evt_encode+0x3b4>)
   36db2:	6859      	ldr	r1, [r3, #4]
   36db4:	2400      	movs	r4, #0
   36db6:	4622      	mov	r2, r4
   36db8:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
   36dbc:	4313      	orrs	r3, r2
   36dbe:	f43f aeca 	beq.w	36b56 <hci_evt_encode+0x116>
   36dc2:	3508      	adds	r5, #8
   36dc4:	2102      	movs	r1, #2
   36dc6:	4628      	mov	r0, r5
   36dc8:	f019 f9e5 	bl	50196 <net_buf_simple_add>
   36dcc:	4603      	mov	r3, r0
	hdr->evt = evt;
   36dce:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
   36dd0:	2103      	movs	r1, #3
   36dd2:	4628      	mov	r0, r5
	hdr->evt = evt;
   36dd4:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   36dd6:	7059      	strb	r1, [r3, #1]
   36dd8:	f019 f9dd 	bl	50196 <net_buf_simple_add>
	ep->status = 0x00;
   36ddc:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   36dde:	f8a0 6001 	strh.w	r6, [r0, #1]
   36de2:	e6b8      	b.n	36b56 <hci_evt_encode+0x116>
   36de4:	20000160 	.word	0x20000160
   36de8:	00052de8 	.word	0x00052de8
   36dec:	00052e24 	.word	0x00052e24
   36df0:	00052d50 	.word	0x00052d50
   36df4:	20000158 	.word	0x20000158
   36df8:	ff030100 	.word	0xff030100
   36dfc:	2000456c 	.word	0x2000456c
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   36e00:	4bb1      	ldr	r3, [pc, #708]	; (370c8 <hci_evt_encode+0x688>)
   36e02:	6819      	ldr	r1, [r3, #0]
   36e04:	2300      	movs	r3, #0
   36e06:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
   36e0a:	4313      	orrs	r3, r2
   36e0c:	f43f aea3 	beq.w	36b56 <hci_evt_encode+0x116>
   36e10:	3508      	adds	r5, #8
   36e12:	2102      	movs	r1, #2
   36e14:	4628      	mov	r0, r5
   36e16:	f019 f9be 	bl	50196 <net_buf_simple_add>
   36e1a:	4603      	mov	r3, r0
	hdr->evt = evt;
   36e1c:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
   36e1e:	2102      	movs	r1, #2
   36e20:	4628      	mov	r0, r5
	hdr->evt = evt;
   36e22:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   36e24:	7059      	strb	r1, [r3, #1]
   36e26:	f019 f9b6 	bl	50196 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   36e2a:	8006      	strh	r6, [r0, #0]
   36e2c:	e693      	b.n	36b56 <hci_evt_encode+0x116>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36e2e:	4ba7      	ldr	r3, [pc, #668]	; (370cc <hci_evt_encode+0x68c>)
   36e30:	6858      	ldr	r0, [r3, #4]
   36e32:	2100      	movs	r1, #0
   36e34:	460a      	mov	r2, r1
   36e36:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   36e3a:	4313      	orrs	r3, r2
   36e3c:	f43f ae8b 	beq.w	36b56 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   36e40:	4ba3      	ldr	r3, [pc, #652]	; (370d0 <hci_evt_encode+0x690>)
   36e42:	6818      	ldr	r0, [r3, #0]
   36e44:	460b      	mov	r3, r1
   36e46:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36e4a:	4313      	orrs	r3, r2
   36e4c:	f43f ae83 	beq.w	36b56 <hci_evt_encode+0x116>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
   36e50:	4628      	mov	r0, r5
   36e52:	2203      	movs	r2, #3
   36e54:	2114      	movs	r1, #20
   36e56:	f7fe ff11 	bl	35c7c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   36e5a:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   36e5c:	7f23      	ldrb	r3, [r4, #28]
   36e5e:	7083      	strb	r3, [r0, #2]
   36e60:	e679      	b.n	36b56 <hci_evt_encode+0x116>
		LL_ASSERT(0);
   36e62:	f641 43af 	movw	r3, #7343	; 0x1caf
		LL_ASSERT(0);
   36e66:	4a9b      	ldr	r2, [pc, #620]	; (370d4 <hci_evt_encode+0x694>)
   36e68:	499b      	ldr	r1, [pc, #620]	; (370d8 <hci_evt_encode+0x698>)
   36e6a:	489c      	ldr	r0, [pc, #624]	; (370dc <hci_evt_encode+0x69c>)
   36e6c:	f013 f936 	bl	4a0dc <printk>
   36e70:	4040      	eors	r0, r0
   36e72:	f380 8811 	msr	BASEPRI, r0
   36e76:	f04f 0003 	mov.w	r0, #3
   36e7a:	df02      	svc	2
}
   36e7c:	b006      	add	sp, #24
   36e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36e82:	4b92      	ldr	r3, [pc, #584]	; (370cc <hci_evt_encode+0x68c>)
   36e84:	6858      	ldr	r0, [r3, #4]
   36e86:	2100      	movs	r1, #0
   36e88:	460a      	mov	r2, r1
   36e8a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   36e8e:	4313      	orrs	r3, r2
   36e90:	f43f ae61 	beq.w	36b56 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   36e94:	4b8e      	ldr	r3, [pc, #568]	; (370d0 <hci_evt_encode+0x690>)
   36e96:	6818      	ldr	r0, [r3, #0]
   36e98:	460b      	mov	r3, r1
   36e9a:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36e9e:	4313      	orrs	r3, r2
   36ea0:	f43f ae59 	beq.w	36b56 <hci_evt_encode+0x116>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   36ea4:	4628      	mov	r0, r5
   36ea6:	220c      	movs	r2, #12
   36ea8:	2105      	movs	r1, #5
   36eaa:	f7fe fee7 	bl	35c7c <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   36eae:	f104 0120 	add.w	r1, r4, #32
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   36eb2:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   36eb4:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   36eb6:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   36eba:	f015 fa17 	bl	4c2ec <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   36ebe:	f105 000a 	add.w	r0, r5, #10
   36ec2:	f104 0128 	add.w	r1, r4, #40	; 0x28
   36ec6:	2202      	movs	r2, #2
}
   36ec8:	b006      	add	sp, #24
   36eca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   36ece:	f015 ba0d 	b.w	4c2ec <memcpy>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   36ed2:	460b      	mov	r3, r1
   36ed4:	4632      	mov	r2, r6
   36ed6:	4639      	mov	r1, r7
   36ed8:	2000      	movs	r0, #0
}
   36eda:	b006      	add	sp, #24
   36edc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   36ee0:	f7fe befe 	b.w	35ce0 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   36ee4:	4b79      	ldr	r3, [pc, #484]	; (370cc <hci_evt_encode+0x68c>)
   36ee6:	6819      	ldr	r1, [r3, #0]
   36ee8:	2300      	movs	r3, #0
   36eea:	f001 0280 	and.w	r2, r1, #128	; 0x80
   36eee:	4313      	orrs	r3, r2
   36ef0:	f43f ae31 	beq.w	36b56 <hci_evt_encode+0x116>
   36ef4:	f890 0020 	ldrb.w	r0, [r0, #32]
   36ef8:	462a      	mov	r2, r5
   36efa:	4631      	mov	r1, r6
}
   36efc:	b006      	add	sp, #24
   36efe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36f02:	f7fe bed3 	b.w	35cac <encrypt_change.part.6>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36f06:	4b71      	ldr	r3, [pc, #452]	; (370cc <hci_evt_encode+0x68c>)
   36f08:	6858      	ldr	r0, [r3, #4]
   36f0a:	2100      	movs	r1, #0
   36f0c:	460a      	mov	r2, r1
   36f0e:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   36f12:	4313      	orrs	r3, r2
   36f14:	d06d      	beq.n	36ff2 <hci_evt_encode+0x5b2>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   36f16:	4b6e      	ldr	r3, [pc, #440]	; (370d0 <hci_evt_encode+0x690>)
   36f18:	6818      	ldr	r0, [r3, #0]
   36f1a:	460b      	mov	r3, r1
   36f1c:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36f20:	4313      	orrs	r3, r2
   36f22:	d066      	beq.n	36ff2 <hci_evt_encode+0x5b2>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   36f24:	4628      	mov	r0, r5
   36f26:	220a      	movs	r2, #10
   36f28:	2106      	movs	r1, #6
   36f2a:	f7fe fea7 	bl	35c7c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   36f2e:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   36f30:	8c23      	ldrh	r3, [r4, #32]
   36f32:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   36f34:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   36f36:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   36f38:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   36f3a:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   36f3c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   36f3e:	8103      	strh	r3, [r0, #8]
   36f40:	e609      	b.n	36b56 <hci_evt_encode+0x116>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36f42:	4b62      	ldr	r3, [pc, #392]	; (370cc <hci_evt_encode+0x68c>)
   36f44:	6858      	ldr	r0, [r3, #4]
   36f46:	2100      	movs	r1, #0
   36f48:	460a      	mov	r2, r1
   36f4a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   36f4e:	4313      	orrs	r3, r2
   36f50:	f43f ae01 	beq.w	36b56 <hci_evt_encode+0x116>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   36f54:	4b5e      	ldr	r3, [pc, #376]	; (370d0 <hci_evt_encode+0x690>)
   36f56:	6818      	ldr	r0, [r3, #0]
   36f58:	460b      	mov	r3, r1
   36f5a:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   36f5e:	4313      	orrs	r3, r2
   36f60:	f43f adf9 	beq.w	36b56 <hci_evt_encode+0x116>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   36f64:	4628      	mov	r0, r5
   36f66:	220a      	movs	r2, #10
   36f68:	2107      	movs	r1, #7
   36f6a:	f7fe fe87 	bl	35c7c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   36f6e:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   36f70:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   36f72:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   36f74:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   36f76:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   36f78:	8c23      	ldrh	r3, [r4, #32]
   36f7a:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   36f7c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   36f7e:	8103      	strh	r3, [r0, #8]
   36f80:	e5e9      	b.n	36b56 <hci_evt_encode+0x116>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   36f82:	4b52      	ldr	r3, [pc, #328]	; (370cc <hci_evt_encode+0x68c>)
   36f84:	6819      	ldr	r1, [r3, #0]
   36f86:	2000      	movs	r0, #0
   36f88:	f001 0280 	and.w	r2, r1, #128	; 0x80
   36f8c:	4603      	mov	r3, r0
   36f8e:	4313      	orrs	r3, r2
   36f90:	f43f ade1 	beq.w	36b56 <hci_evt_encode+0x116>
   36f94:	462a      	mov	r2, r5
   36f96:	4631      	mov	r1, r6
   36f98:	e7b0      	b.n	36efc <hci_evt_encode+0x4bc>
	switch (pdu_data->llctrl.unknown_rsp.type) {
   36f9a:	f890 3020 	ldrb.w	r3, [r0, #32]
   36f9e:	2b0e      	cmp	r3, #14
   36fa0:	f47f add9 	bne.w	36b56 <hci_evt_encode+0x116>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   36fa4:	460b      	mov	r3, r1
   36fa6:	4632      	mov	r2, r6
   36fa8:	2100      	movs	r1, #0
   36faa:	201a      	movs	r0, #26
   36fac:	e795      	b.n	36eda <hci_evt_encode+0x49a>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   36fae:	2100      	movs	r1, #0
   36fb0:	4608      	mov	r0, r1
   36fb2:	f104 031e 	add.w	r3, r4, #30
   36fb6:	4642      	mov	r2, r8
   36fb8:	f009 f882 	bl	400c0 <ll_rl_crpa_set>
   36fbc:	e612      	b.n	36be4 <hci_evt_encode+0x1a4>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   36fbe:	f641 23f5 	movw	r3, #6901	; 0x1af5
   36fc2:	4a44      	ldr	r2, [pc, #272]	; (370d4 <hci_evt_encode+0x694>)
   36fc4:	4946      	ldr	r1, [pc, #280]	; (370e0 <hci_evt_encode+0x6a0>)
   36fc6:	4845      	ldr	r0, [pc, #276]	; (370dc <hci_evt_encode+0x69c>)
   36fc8:	f013 f888 	bl	4a0dc <printk>
   36fcc:	4040      	eors	r0, r0
   36fce:	f380 8811 	msr	BASEPRI, r0
   36fd2:	f04f 0003 	mov.w	r0, #3
   36fd6:	df02      	svc	2
   36fd8:	e65c      	b.n	36c94 <hci_evt_encode+0x254>
		ll_rl_crpa_set(cc->peer_addr_type,
   36fda:	f104 0325 	add.w	r3, r4, #37	; 0x25
   36fde:	22ff      	movs	r2, #255	; 0xff
   36fe0:	f104 011f 	add.w	r1, r4, #31
   36fe4:	7fa0      	ldrb	r0, [r4, #30]
   36fe6:	f009 f86b 	bl	400c0 <ll_rl_crpa_set>
   36fea:	e657      	b.n	36c9c <hci_evt_encode+0x25c>
		LL_ASSERT(0);
   36fec:	f641 538f 	movw	r3, #7567	; 0x1d8f
   36ff0:	e739      	b.n	36e66 <hci_evt_encode+0x426>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   36ff2:	2300      	movs	r3, #0
   36ff4:	4630      	mov	r0, r6
   36ff6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   36ffa:	9300      	str	r3, [sp, #0]
   36ffc:	221a      	movs	r2, #26
   36ffe:	2102      	movs	r1, #2
   37000:	f002 ff8c 	bl	39f1c <ll_conn_update>
		return;
   37004:	e5a7      	b.n	36b56 <hci_evt_encode+0x116>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   37006:	ea50 0301 	orrs.w	r3, r0, r1
   3700a:	d02b      	beq.n	37064 <hci_evt_encode+0x624>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   3700c:	221e      	movs	r2, #30
   3700e:	210a      	movs	r1, #10
   37010:	4628      	mov	r0, r5
   37012:	f7fe fe33 	bl	35c7c <meta_evt>
   37016:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   37018:	4641      	mov	r1, r8
   3701a:	221e      	movs	r2, #30
   3701c:	f015 f971 	bl	4c302 <memset>
			leecc->status = status;
   37020:	7027      	strb	r7, [r4, #0]
			return;
   37022:	e598      	b.n	36b56 <hci_evt_encode+0x116>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   37024:	2212      	movs	r2, #18
   37026:	2101      	movs	r1, #1
   37028:	f7fe fe28 	bl	35c7c <meta_evt>
	lecc->status = 0x00;
   3702c:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   3702e:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   37032:	7f63      	ldrb	r3, [r4, #29]
   37034:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   37036:	7fa3      	ldrb	r3, [r4, #30]
   37038:	f003 0301 	and.w	r3, r3, #1
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   3703c:	4605      	mov	r5, r0
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   3703e:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   37040:	4641      	mov	r1, r8
   37042:	2206      	movs	r2, #6
   37044:	3005      	adds	r0, #5
   37046:	f015 f951 	bl	4c2ec <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   3704a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   3704c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   3704e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   37050:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   37054:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   37058:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   3705c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   37060:	746b      	strb	r3, [r5, #17]
   37062:	e578      	b.n	36b56 <hci_evt_encode+0x116>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   37064:	2212      	movs	r2, #18
   37066:	2101      	movs	r1, #1
   37068:	4628      	mov	r0, r5
   3706a:	f7fe fe07 	bl	35c7c <meta_evt>
   3706e:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   37070:	4641      	mov	r1, r8
   37072:	2212      	movs	r2, #18
   37074:	f015 f945 	bl	4c302 <memset>
		lecc->status = status;
   37078:	7027      	strb	r7, [r4, #0]
		return;
   3707a:	e56c      	b.n	36b56 <hci_evt_encode+0x116>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3707c:	f641 337a 	movw	r3, #7034	; 0x1b7a
   37080:	4a14      	ldr	r2, [pc, #80]	; (370d4 <hci_evt_encode+0x694>)
   37082:	4918      	ldr	r1, [pc, #96]	; (370e4 <hci_evt_encode+0x6a4>)
   37084:	4815      	ldr	r0, [pc, #84]	; (370dc <hci_evt_encode+0x69c>)
   37086:	f013 f829 	bl	4a0dc <printk>
   3708a:	4040      	eors	r0, r0
   3708c:	f380 8811 	msr	BASEPRI, r0
   37090:	f04f 0003 	mov.w	r0, #3
   37094:	df02      	svc	2
   37096:	e67d      	b.n	36d94 <hci_evt_encode+0x354>
		adv_info->addr.type = adv->tx_addr;
   37098:	7f23      	ldrb	r3, [r4, #28]
   3709a:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   3709e:	4651      	mov	r1, sl
		adv_info->addr.type = adv->tx_addr;
   370a0:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   370a2:	2206      	movs	r2, #6
   370a4:	1ce8      	adds	r0, r5, #3
   370a6:	f015 f921 	bl	4c2ec <memcpy>
   370aa:	e5e3      	b.n	36c74 <hci_evt_encode+0x234>
		data_len = 0U;
   370ac:	46b9      	mov	r9, r7
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   370ae:	220b      	movs	r2, #11
   370b0:	e5c4      	b.n	36c3c <hci_evt_encode+0x1fc>
		dir_info->addr.type = adv->tx_addr;
   370b2:	7f23      	ldrb	r3, [r4, #28]
   370b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   370b8:	4639      	mov	r1, r7
		dir_info->addr.type = adv->tx_addr;
   370ba:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   370bc:	2206      	movs	r2, #6
   370be:	1ce8      	adds	r0, r5, #3
   370c0:	f015 f914 	bl	4c2ec <memcpy>
   370c4:	e53b      	b.n	36b3e <hci_evt_encode+0xfe>
   370c6:	bf00      	nop
   370c8:	20002d68 	.word	0x20002d68
   370cc:	20000158 	.word	0x20000158
   370d0:	20000160 	.word	0x20000160
   370d4:	00052de8 	.word	0x00052de8
   370d8:	00052dd8 	.word	0x00052dd8
   370dc:	00052d50 	.word	0x00052d50
   370e0:	00052e4c 	.word	0x00052e4c
   370e4:	00052e88 	.word	0x00052e88

000370e8 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   370e8:	b570      	push	{r4, r5, r6, lr}
   370ea:	f100 0408 	add.w	r4, r0, #8
   370ee:	460e      	mov	r6, r1
   370f0:	4620      	mov	r0, r4
   370f2:	2102      	movs	r1, #2
   370f4:	4615      	mov	r5, r2
   370f6:	f019 f84e 	bl	50196 <net_buf_simple_add>
   370fa:	4603      	mov	r3, r0
	hdr->evt = evt;
   370fc:	2213      	movs	r2, #19
	hdr->len = len;
   370fe:	2105      	movs	r1, #5
	hdr->evt = evt;
   37100:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   37102:	7059      	strb	r1, [r3, #1]
   37104:	4620      	mov	r0, r4
   37106:	f019 f846 	bl	50196 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   3710a:	2301      	movs	r3, #1
   3710c:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   3710e:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   37112:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   37116:	bd70      	pop	{r4, r5, r6, pc}

00037118 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   37118:	7903      	ldrb	r3, [r0, #4]
   3711a:	2b03      	cmp	r3, #3
   3711c:	d010      	beq.n	37140 <hci_get_class+0x28>

		switch (node_rx->hdr.type) {
   3711e:	3b05      	subs	r3, #5
   37120:	2b17      	cmp	r3, #23
   37122:	d81b      	bhi.n	3715c <hci_get_class+0x44>
   37124:	e8df f003 	tbb	[pc, r3]
   37128:	1a1a1a14 	.word	0x1a1a1a14
   3712c:	1a1a1a1a 	.word	0x1a1a1a1a
   37130:	1a1a1a1a 	.word	0x1a1a1a1a
   37134:	1a1a1a1a 	.word	0x1a1a1a1a
   37138:	1818161a 	.word	0x1818161a
   3713c:	18181818 	.word	0x18181818
		default:
			return HCI_CLASS_NONE;
		}

#if defined(CONFIG_BT_CONN)
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   37140:	7f03      	ldrb	r3, [r0, #28]
   37142:	f003 0303 	and.w	r3, r3, #3
   37146:	2b03      	cmp	r3, #3
		return HCI_CLASS_EVT_LLCP;
	} else {
		return HCI_CLASS_ACL_DATA;
   37148:	bf0c      	ite	eq
   3714a:	2004      	moveq	r0, #4
   3714c:	2005      	movne	r0, #5
   3714e:	4770      	bx	lr
			return HCI_CLASS_EVT_DISCARDABLE;
   37150:	2002      	movs	r0, #2
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   37152:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   37154:	2001      	movs	r0, #1
   37156:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
   37158:	2003      	movs	r0, #3
   3715a:	4770      	bx	lr
			return HCI_CLASS_NONE;
   3715c:	2000      	movs	r0, #0
   3715e:	4770      	bx	lr

00037160 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   37160:	480d      	ldr	r0, [pc, #52]	; (37198 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   37162:	4a0e      	ldr	r2, [pc, #56]	; (3719c <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   37164:	4b0e      	ldr	r3, [pc, #56]	; (371a0 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
   37166:	490f      	ldr	r1, [pc, #60]	; (371a4 <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   37168:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   3716a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   3716e:	f641 75ff 	movw	r5, #8191	; 0x1fff
   37172:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   37176:	2400      	movs	r4, #0
   37178:	2500      	movs	r5, #0
   3717a:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   3717e:	241f      	movs	r4, #31
   37180:	2500      	movs	r5, #0
   37182:	e9c3 4500 	strd	r4, r5, [r3]
	conn_count = 0U;
   37186:	4b08      	ldr	r3, [pc, #32]	; (371a8 <hci_init+0x48>)
	dup_count = DUP_FILTER_DISABLED;
   37188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	conn_count = 0U;
   3718c:	2200      	movs	r2, #0
	dup_count = DUP_FILTER_DISABLED;
   3718e:	6008      	str	r0, [r1, #0]
	conn_count = 0U;
   37190:	601a      	str	r2, [r3, #0]
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   37192:	bc30      	pop	{r4, r5}
   37194:	4770      	bx	lr
   37196:	bf00      	nop
   37198:	20000158 	.word	0x20000158
   3719c:	20002d68 	.word	0x20002d68
   371a0:	20000160 	.word	0x20000160
   371a4:	20004570 	.word	0x20004570
   371a8:	2000456c 	.word	0x2000456c

000371ac <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   371ac:	f009 bc5a 	b.w	40a64 <lll_csrand_get>

000371b0 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   371b0:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   371b2:	2300      	movs	r3, #0
   371b4:	f00b ffb6 	bl	43124 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   371b8:	2000      	movs	r0, #0
   371ba:	bd08      	pop	{r3, pc}

000371bc <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   371bc:	4801      	ldr	r0, [pc, #4]	; (371c4 <ll_feat_get+0x8>)
   371be:	2100      	movs	r1, #0
   371c0:	4770      	bx	lr
   371c2:	bf00      	nop
   371c4:	000141ff 	.word	0x000141ff

000371c8 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   371c8:	b510      	push	{r4, lr}
   371ca:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   371cc:	f009 fc6e 	bl	40aac <lll_reset>
	LL_ASSERT(!err);
   371d0:	b970      	cbnz	r0, 371f0 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   371d2:	f00a f86b 	bl	412ac <lll_adv_reset>
	LL_ASSERT(!err);
   371d6:	b9e0      	cbnz	r0, 37212 <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   371d8:	f00a fff6 	bl	421c8 <lll_scan_reset>
	LL_ASSERT(!err);
   371dc:	bb50      	cbnz	r0, 37234 <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   371de:	f00b f953 	bl	42488 <lll_conn_reset>
	LL_ASSERT(!err);
   371e2:	2800      	cmp	r0, #0
   371e4:	d137      	bne.n	37256 <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
   371e6:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   371e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   371ec:	f011 bb64 	b.w	488b8 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   371f0:	f640 0324 	movw	r3, #2084	; 0x824
   371f4:	4a21      	ldr	r2, [pc, #132]	; (3727c <perform_lll_reset+0xb4>)
   371f6:	4922      	ldr	r1, [pc, #136]	; (37280 <perform_lll_reset+0xb8>)
   371f8:	4822      	ldr	r0, [pc, #136]	; (37284 <perform_lll_reset+0xbc>)
   371fa:	f012 ff6f 	bl	4a0dc <printk>
   371fe:	4040      	eors	r0, r0
   37200:	f380 8811 	msr	BASEPRI, r0
   37204:	f04f 0003 	mov.w	r0, #3
   37208:	df02      	svc	2
	err = lll_adv_reset();
   3720a:	f00a f84f 	bl	412ac <lll_adv_reset>
	LL_ASSERT(!err);
   3720e:	2800      	cmp	r0, #0
   37210:	d0e2      	beq.n	371d8 <perform_lll_reset+0x10>
   37212:	f640 0329 	movw	r3, #2089	; 0x829
   37216:	4a19      	ldr	r2, [pc, #100]	; (3727c <perform_lll_reset+0xb4>)
   37218:	4919      	ldr	r1, [pc, #100]	; (37280 <perform_lll_reset+0xb8>)
   3721a:	481a      	ldr	r0, [pc, #104]	; (37284 <perform_lll_reset+0xbc>)
   3721c:	f012 ff5e 	bl	4a0dc <printk>
   37220:	4040      	eors	r0, r0
   37222:	f380 8811 	msr	BASEPRI, r0
   37226:	f04f 0003 	mov.w	r0, #3
   3722a:	df02      	svc	2
	err = lll_scan_reset();
   3722c:	f00a ffcc 	bl	421c8 <lll_scan_reset>
	LL_ASSERT(!err);
   37230:	2800      	cmp	r0, #0
   37232:	d0d4      	beq.n	371de <perform_lll_reset+0x16>
   37234:	f640 032f 	movw	r3, #2095	; 0x82f
   37238:	4a10      	ldr	r2, [pc, #64]	; (3727c <perform_lll_reset+0xb4>)
   3723a:	4911      	ldr	r1, [pc, #68]	; (37280 <perform_lll_reset+0xb8>)
   3723c:	4811      	ldr	r0, [pc, #68]	; (37284 <perform_lll_reset+0xbc>)
   3723e:	f012 ff4d 	bl	4a0dc <printk>
   37242:	4040      	eors	r0, r0
   37244:	f380 8811 	msr	BASEPRI, r0
   37248:	f04f 0003 	mov.w	r0, #3
   3724c:	df02      	svc	2
	err = lll_conn_reset();
   3724e:	f00b f91b 	bl	42488 <lll_conn_reset>
	LL_ASSERT(!err);
   37252:	2800      	cmp	r0, #0
   37254:	d0c7      	beq.n	371e6 <perform_lll_reset+0x1e>
   37256:	f640 0335 	movw	r3, #2101	; 0x835
   3725a:	4a08      	ldr	r2, [pc, #32]	; (3727c <perform_lll_reset+0xb4>)
   3725c:	4908      	ldr	r1, [pc, #32]	; (37280 <perform_lll_reset+0xb8>)
   3725e:	4809      	ldr	r0, [pc, #36]	; (37284 <perform_lll_reset+0xbc>)
   37260:	f012 ff3c 	bl	4a0dc <printk>
   37264:	4040      	eors	r0, r0
   37266:	f380 8811 	msr	BASEPRI, r0
   3726a:	f04f 0003 	mov.w	r0, #3
   3726e:	df02      	svc	2
   37270:	4620      	mov	r0, r4
}
   37272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37276:	f011 bb1f 	b.w	488b8 <z_impl_k_sem_give>
   3727a:	bf00      	nop
   3727c:	00052fb4 	.word	0x00052fb4
   37280:	00052ff0 	.word	0x00052ff0
   37284:	00052d50 	.word	0x00052d50

00037288 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   37288:	6008      	str	r0, [r1, #0]
   3728a:	4801      	ldr	r0, [pc, #4]	; (37290 <ull_ticker_status_give+0x8>)
   3728c:	f011 bb14 	b.w	488b8 <z_impl_k_sem_give>
   37290:	20004c58 	.word	0x20004c58

00037294 <disabled_cb>:
   37294:	f011 bb10 	b.w	488b8 <z_impl_k_sem_give>

00037298 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   37298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   3729c:	4f2f      	ldr	r7, [pc, #188]	; (3735c <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   3729e:	780b      	ldrb	r3, [r1, #0]
   372a0:	787d      	ldrb	r5, [r7, #1]
   372a2:	783e      	ldrb	r6, [r7, #0]
   372a4:	429d      	cmp	r5, r3
   372a6:	bf9c      	itt	ls
   372a8:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   372aa:	700b      	strbls	r3, [r1, #0]
	}

	if (*idx == last) {
   372ac:	429a      	cmp	r2, r3
   372ae:	d048      	beq.n	37342 <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
   372b0:	1c5c      	adds	r4, r3, #1
   372b2:	b2e4      	uxtb	r4, r4
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   372b4:	fb13 f306 	smulbb	r3, r3, r6
   372b8:	4e29      	ldr	r6, [pc, #164]	; (37360 <tx_cmplt_get+0xc8>)
		i = 0U;
   372ba:	42a5      	cmp	r5, r4
   372bc:	bf08      	it	eq
   372be:	2400      	moveq	r4, #0

	*idx = i;
   372c0:	700c      	strb	r4, [r1, #0]
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   372c2:	18f4      	adds	r4, r6, r3
   372c4:	d03d      	beq.n	37342 <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
   372c6:	5af3      	ldrh	r3, [r6, r3]
   372c8:	8003      	strh	r3, [r0, #0]
   372ca:	4692      	mov	sl, r2
   372cc:	4683      	mov	fp, r0
   372ce:	460d      	mov	r5, r1
	cmplt = 0U;
   372d0:	f04f 0800 	mov.w	r8, #0
   372d4:	f04f 0901 	mov.w	r9, #1
   372d8:	e022      	b.n	37320 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   372da:	b37b      	cbz	r3, 3733c <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   372dc:	7903      	ldrb	r3, [r0, #4]
   372de:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   372e2:	3b01      	subs	r3, #1
   372e4:	2b01      	cmp	r3, #1
   372e6:	d931      	bls.n	3734c <tx_cmplt_get+0xb4>
   372e8:	2302      	movs	r3, #2
   372ea:	6063      	str	r3, [r4, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   372ec:	f002 fdc6 	bl	39e7c <ll_tx_mem_release>
	if (*idx >= count) {
   372f0:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   372f2:	7879      	ldrb	r1, [r7, #1]
   372f4:	7838      	ldrb	r0, [r7, #0]
   372f6:	4299      	cmp	r1, r3
   372f8:	bf9c      	itt	ls
   372fa:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   372fc:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
   372fe:	459a      	cmp	sl, r3
   37300:	d021      	beq.n	37346 <tx_cmplt_get+0xae>
	i = *idx + 1;
   37302:	1c5c      	adds	r4, r3, #1
   37304:	b2e4      	uxtb	r4, r4
		i = 0U;
   37306:	42a1      	cmp	r1, r4
   37308:	bf08      	it	eq
   3730a:	2400      	moveq	r4, #0
	p = (void *)(fifo + (*idx) * size);
   3730c:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   37310:	702c      	strb	r4, [r5, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   37312:	18f4      	adds	r4, r6, r3
   37314:	d017      	beq.n	37346 <tx_cmplt_get+0xae>
   37316:	5af3      	ldrh	r3, [r6, r3]
   37318:	f8bb 1000 	ldrh.w	r1, [fp]
   3731c:	4299      	cmp	r1, r3
   3731e:	d112      	bne.n	37346 <tx_cmplt_get+0xae>
		node_tx = tx->node;
   37320:	6860      	ldr	r0, [r4, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   37322:	2801      	cmp	r0, #1
   37324:	f020 0303 	bic.w	r3, r0, #3
   37328:	d8d7      	bhi.n	372da <tx_cmplt_get+0x42>
			cmplt++;
   3732a:	f108 0801 	add.w	r8, r8, #1
   3732e:	fa5f f888 	uxtb.w	r8, r8
   37332:	f8c4 9004 	str.w	r9, [r4, #4]
		if (((uint32_t)node_tx & ~3)) {
   37336:	2b00      	cmp	r3, #0
   37338:	d0da      	beq.n	372f0 <tx_cmplt_get+0x58>
   3733a:	e7d7      	b.n	372ec <tx_cmplt_get+0x54>
   3733c:	2302      	movs	r3, #2
   3733e:	6063      	str	r3, [r4, #4]
   37340:	e7d6      	b.n	372f0 <tx_cmplt_get+0x58>
		return 0;
   37342:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
   37346:	4640      	mov	r0, r8
   37348:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   3734c:	f108 0801 	add.w	r8, r8, #1
   37350:	fa5f f888 	uxtb.w	r8, r8
   37354:	f8c4 9004 	str.w	r9, [r4, #4]
		if (((uint32_t)node_tx & ~3)) {
   37358:	e7c8      	b.n	372ec <tx_cmplt_get+0x54>
   3735a:	bf00      	nop
   3735c:	200008c8 	.word	0x200008c8
   37360:	200008cc 	.word	0x200008cc

00037364 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   37364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37368:	4e3d      	ldr	r6, [pc, #244]	; (37460 <ull_done+0xfc>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   3736a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 37474 <ull_done+0x110>
   3736e:	f8df a108 	ldr.w	sl, [pc, #264]	; 37478 <ull_done+0x114>
{
   37372:	b082      	sub	sp, #8
			(void)memq_dequeue(memq_ull_done.tail,
   37374:	46b1      	mov	r9, r6
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   37376:	aa01      	add	r2, sp, #4
   37378:	e9d6 0100 	ldrd	r0, r1, [r6]
   3737c:	f7fc fdd0 	bl	33f20 <memq_peek>
		if (link) {
   37380:	4607      	mov	r7, r0
   37382:	2800      	cmp	r0, #0
   37384:	d03e      	beq.n	37404 <ull_done+0xa0>
			(void)memq_dequeue(memq_ull_done.tail,
   37386:	2200      	movs	r2, #0
   37388:	4649      	mov	r1, r9
   3738a:	6870      	ldr	r0, [r6, #4]
   3738c:	f7fc fdd0 	bl	33f30 <memq_dequeue>
			rx_demux_event_done(link, done);
   37390:	9d01      	ldr	r5, [sp, #4]
	ull_hdr = done->param;
   37392:	69ec      	ldr	r4, [r5, #28]
	if (ull_hdr) {
   37394:	b134      	cbz	r4, 373a4 <ull_done+0x40>
	return hdr->ref;
   37396:	7823      	ldrb	r3, [r4, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   37398:	2b00      	cmp	r3, #0
   3739a:	d052      	beq.n	37442 <ull_done+0xde>
	return hdr->ref--;
   3739c:	7823      	ldrb	r3, [r4, #0]
   3739e:	3b01      	subs	r3, #1
   373a0:	b2db      	uxtb	r3, r3
   373a2:	7023      	strb	r3, [r4, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   373a4:	f895 3020 	ldrb.w	r3, [r5, #32]
   373a8:	b123      	cbz	r3, 373b4 <ull_done+0x50>
   373aa:	2b01      	cmp	r3, #1
   373ac:	d13b      	bne.n	37426 <ull_done+0xc2>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   373ae:	4628      	mov	r0, r5
   373b0:	f006 fd88 	bl	3dec4 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   373b4:	4a2b      	ldr	r2, [pc, #172]	; (37464 <ull_done+0x100>)
void *ull_rxfifo_release(uint8_t s, uint8_t n, uint8_t f, uint8_t *l, uint8_t *m,
			 memq_link_t *link, struct node_rx_hdr *rx)
{
	uint8_t idx;

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   373b6:	78d0      	ldrb	r0, [r2, #3]
	if (last == count) {
   373b8:	f892 c001 	ldrb.w	ip, [r2, #1]
	release = RXFIFO_RELEASE(done, link, done);
   373bc:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   373be:	1c43      	adds	r3, r0, #1
   373c0:	b2db      	uxtb	r3, r3
		last = 0U;
   373c2:	459c      	cmp	ip, r3
   373c4:	bf08      	it	eq
   373c6:	2300      	moveq	r3, #0
	if (last == first) {
   373c8:	4299      	cmp	r1, r3
	done->extra.type = 0U;
   373ca:	f04f 0c00 	mov.w	ip, #0
   373ce:	f885 c020 	strb.w	ip, [r5, #32]
   373d2:	d01a      	beq.n	3740a <ull_done+0xa6>
	release = RXFIFO_RELEASE(done, link, done);
   373d4:	7811      	ldrb	r1, [r2, #0]
		return NULL;
	}

	rx->link = link;
   373d6:	602f      	str	r7, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   373d8:	fb00 2101 	mla	r1, r0, r1, r2
   373dc:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   373de:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   373e0:	2c00      	cmp	r4, #0
   373e2:	d0c8      	beq.n	37376 <ull_done+0x12>
	return hdr->ref;
   373e4:	7823      	ldrb	r3, [r4, #0]
   373e6:	2b00      	cmp	r3, #0
   373e8:	d1c5      	bne.n	37376 <ull_done+0x12>
   373ea:	6963      	ldr	r3, [r4, #20]
   373ec:	2b00      	cmp	r3, #0
   373ee:	d0c2      	beq.n	37376 <ull_done+0x12>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   373f0:	69a0      	ldr	r0, [r4, #24]
   373f2:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   373f4:	aa01      	add	r2, sp, #4
   373f6:	e9d6 0100 	ldrd	r0, r1, [r6]
   373fa:	f7fc fd91 	bl	33f20 <memq_peek>
		if (link) {
   373fe:	4607      	mov	r7, r0
   37400:	2800      	cmp	r0, #0
   37402:	d1c0      	bne.n	37386 <ull_done+0x22>
}
   37404:	b002      	add	sp, #8
   37406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LL_ASSERT(release == done);
   3740a:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   3740e:	4642      	mov	r2, r8
   37410:	4915      	ldr	r1, [pc, #84]	; (37468 <ull_done+0x104>)
   37412:	4816      	ldr	r0, [pc, #88]	; (3746c <ull_done+0x108>)
   37414:	f012 fe62 	bl	4a0dc <printk>
   37418:	4040      	eors	r0, r0
   3741a:	f380 8811 	msr	BASEPRI, r0
   3741e:	f04f 0003 	mov.w	r0, #3
   37422:	df02      	svc	2
   37424:	e7dc      	b.n	373e0 <ull_done+0x7c>
		LL_ASSERT(0);
   37426:	f640 2369 	movw	r3, #2665	; 0xa69
   3742a:	4642      	mov	r2, r8
   3742c:	4910      	ldr	r1, [pc, #64]	; (37470 <ull_done+0x10c>)
   3742e:	480f      	ldr	r0, [pc, #60]	; (3746c <ull_done+0x108>)
   37430:	f012 fe54 	bl	4a0dc <printk>
   37434:	4040      	eors	r0, r0
   37436:	f380 8811 	msr	BASEPRI, r0
   3743a:	f04f 0003 	mov.w	r0, #3
   3743e:	df02      	svc	2
		break;
   37440:	e7b8      	b.n	373b4 <ull_done+0x50>
		LL_ASSERT(ull_ref_get(ull_hdr));
   37442:	f640 2312 	movw	r3, #2578	; 0xa12
   37446:	4642      	mov	r2, r8
   37448:	4651      	mov	r1, sl
   3744a:	4808      	ldr	r0, [pc, #32]	; (3746c <ull_done+0x108>)
   3744c:	f012 fe46 	bl	4a0dc <printk>
   37450:	4040      	eors	r0, r0
   37452:	f380 8811 	msr	BASEPRI, r0
   37456:	f04f 0003 	mov.w	r0, #3
   3745a:	df02      	svc	2
   3745c:	e79e      	b.n	3739c <ull_done+0x38>
   3745e:	bf00      	nop
   37460:	20004c44 	.word	0x20004c44
   37464:	2000075c 	.word	0x2000075c
   37468:	00053014 	.word	0x00053014
   3746c:	00052d50 	.word	0x00052d50
   37470:	00052dd8 	.word	0x00052dd8
   37474:	00052fb4 	.word	0x00052fb4
   37478:	00052ffc 	.word	0x00052ffc

0003747c <rx_demux>:
{
   3747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37480:	4e6d      	ldr	r6, [pc, #436]	; (37638 <rx_demux+0x1bc>)
	k_sem_give(sem_recv);
   37482:	4f6e      	ldr	r7, [pc, #440]	; (3763c <rx_demux+0x1c0>)
		LL_ASSERT(0);
   37484:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 37650 <rx_demux+0x1d4>
   37488:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 37654 <rx_demux+0x1d8>
{
   3748c:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   3748e:	aa03      	add	r2, sp, #12
   37490:	e9d6 0100 	ldrd	r0, r1, [r6]
   37494:	f7fc fd44 	bl	33f20 <memq_peek>
		if (link) {
   37498:	4605      	mov	r5, r0
   3749a:	2800      	cmp	r0, #0
   3749c:	d036      	beq.n	3750c <rx_demux+0x90>
			LL_ASSERT(rx);
   3749e:	9b03      	ldr	r3, [sp, #12]
   374a0:	2b00      	cmp	r3, #0
   374a2:	f000 80a5 	beq.w	375f0 <rx_demux+0x174>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   374a6:	7818      	ldrb	r0, [r3, #0]
   374a8:	aa04      	add	r2, sp, #16
   374aa:	a902      	add	r1, sp, #8
   374ac:	f006 ffee 	bl	3e48c <ull_conn_ack_by_last_peek>
			if (link_tx) {
   374b0:	4604      	mov	r4, r0
   374b2:	2800      	cmp	r0, #0
   374b4:	d056      	beq.n	37564 <rx_demux+0xe8>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   374b6:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   374ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   374be:	f891 b000 	ldrb.w	fp, [r1]
   374c2:	9205      	str	r2, [sp, #20]
   374c4:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   374c8:	f10d 0a14 	add.w	sl, sp, #20
   374cc:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   374d0:	f006 fff2 	bl	3e4b8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   374d4:	4621      	mov	r1, r4
   374d6:	9a05      	ldr	r2, [sp, #20]
   374d8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   374dc:	f007 f834 	bl	3e548 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   374e0:	4620      	mov	r0, r4
   374e2:	f006 ffad 	bl	3e440 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   374e6:	4652      	mov	r2, sl
   374e8:	4629      	mov	r1, r5
   374ea:	4658      	mov	r0, fp
   374ec:	f006 ffce 	bl	3e48c <ull_conn_ack_by_last_peek>
	} while (link);
   374f0:	4604      	mov	r4, r0
   374f2:	2800      	cmp	r0, #0
   374f4:	d1ec      	bne.n	374d0 <rx_demux+0x54>
	k_sem_give(sem_recv);
   374f6:	6838      	ldr	r0, [r7, #0]
   374f8:	f011 f9de 	bl	488b8 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   374fc:	aa03      	add	r2, sp, #12
   374fe:	e9d6 0100 	ldrd	r0, r1, [r6]
   37502:	f7fc fd0d 	bl	33f20 <memq_peek>
		if (link) {
   37506:	4605      	mov	r5, r0
   37508:	2800      	cmp	r0, #0
   3750a:	d1c8      	bne.n	3749e <rx_demux+0x22>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   3750c:	aa04      	add	r2, sp, #16
   3750e:	a902      	add	r1, sp, #8
   37510:	f10d 0007 	add.w	r0, sp, #7
   37514:	f006 ffa0 	bl	3e458 <ull_conn_ack_peek>
			if (link) {
   37518:	4604      	mov	r4, r0
   3751a:	2800      	cmp	r0, #0
   3751c:	d046      	beq.n	375ac <rx_demux+0x130>
				rx_demux_conn_tx_ack(ack_last, handle,
   3751e:	9a04      	ldr	r2, [sp, #16]
   37520:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   37524:	f89d b007 	ldrb.w	fp, [sp, #7]
   37528:	9205      	str	r2, [sp, #20]
   3752a:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   3752e:	f10d 0a14 	add.w	sl, sp, #20
   37532:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   37536:	f006 ffbf 	bl	3e4b8 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   3753a:	4621      	mov	r1, r4
   3753c:	9a05      	ldr	r2, [sp, #20]
   3753e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   37542:	f007 f801 	bl	3e548 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   37546:	4620      	mov	r0, r4
   37548:	f006 ff7a 	bl	3e440 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   3754c:	4652      	mov	r2, sl
   3754e:	4629      	mov	r1, r5
   37550:	4658      	mov	r0, fp
   37552:	f006 ff9b 	bl	3e48c <ull_conn_ack_by_last_peek>
	} while (link);
   37556:	4604      	mov	r4, r0
   37558:	2800      	cmp	r0, #0
   3755a:	d1ec      	bne.n	37536 <rx_demux+0xba>
	k_sem_give(sem_recv);
   3755c:	6838      	ldr	r0, [r7, #0]
   3755e:	f011 f9ab 	bl	488b8 <z_impl_k_sem_give>
			if (nack) {
   37562:	e7cb      	b.n	374fc <rx_demux+0x80>
				nack = rx_demux_rx(link, rx);
   37564:	9b03      	ldr	r3, [sp, #12]
   37566:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   37568:	791b      	ldrb	r3, [r3, #4]
   3756a:	3b01      	subs	r3, #1
   3756c:	2b16      	cmp	r3, #22
   3756e:	d831      	bhi.n	375d4 <rx_demux+0x158>
   37570:	e8df f003 	tbb	[pc, r3]
   37574:	3016301f 	.word	0x3016301f
   37578:	3030301f 	.word	0x3030301f
   3757c:	30303030 	.word	0x30303030
   37580:	30303030 	.word	0x30303030
   37584:	30303030 	.word	0x30303030
   37588:	0c30      	.short	0x0c30
   3758a:	1f          	.byte	0x1f
   3758b:	00          	.byte	0x00
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   3758c:	2200      	movs	r2, #0
   3758e:	492a      	ldr	r1, [pc, #168]	; (37638 <rx_demux+0x1bc>)
   37590:	6870      	ldr	r0, [r6, #4]
   37592:	f7fc fccd 	bl	33f30 <memq_dequeue>
		ull_conn_setup(link, rx);
   37596:	4628      	mov	r0, r5
   37598:	9905      	ldr	r1, [sp, #20]
   3759a:	f003 f805 	bl	3a5a8 <ull_conn_setup>
			if (nack) {
   3759e:	e776      	b.n	3748e <rx_demux+0x12>
		nack = ull_conn_rx(link, (void *)&rx);
   375a0:	a905      	add	r1, sp, #20
   375a2:	4628      	mov	r0, r5
   375a4:	f003 f828 	bl	3a5f8 <ull_conn_rx>
		if (nack) {
   375a8:	2800      	cmp	r0, #0
   375aa:	d030      	beq.n	3760e <rx_demux+0x192>
}
   375ac:	b007      	add	sp, #28
   375ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   375b2:	2200      	movs	r2, #0
   375b4:	4920      	ldr	r1, [pc, #128]	; (37638 <rx_demux+0x1bc>)
   375b6:	6870      	ldr	r0, [r6, #4]
   375b8:	f7fc fcba 	bl	33f30 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   375bc:	4b20      	ldr	r3, [pc, #128]	; (37640 <rx_demux+0x1c4>)
		ll_rx_put(link, rx);
   375be:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   375c0:	78db      	ldrb	r3, [r3, #3]
   375c2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   375c4:	4628      	mov	r0, r5
   375c6:	4a1f      	ldr	r2, [pc, #124]	; (37644 <rx_demux+0x1c8>)
   375c8:	f7fc fca2 	bl	33f10 <memq_enqueue>
	k_sem_give(sem_recv);
   375cc:	6838      	ldr	r0, [r7, #0]
   375ce:	f011 f973 	bl	488b8 <z_impl_k_sem_give>
			if (nack) {
   375d2:	e793      	b.n	374fc <rx_demux+0x80>
		LL_ASSERT(0);
   375d4:	f640 13ff 	movw	r3, #2559	; 0x9ff
   375d8:	4642      	mov	r2, r8
   375da:	4649      	mov	r1, r9
   375dc:	481a      	ldr	r0, [pc, #104]	; (37648 <rx_demux+0x1cc>)
   375de:	f012 fd7d 	bl	4a0dc <printk>
   375e2:	4040      	eors	r0, r0
   375e4:	f380 8811 	msr	BASEPRI, r0
   375e8:	f04f 0003 	mov.w	r0, #3
   375ec:	df02      	svc	2
			if (nack) {
   375ee:	e74e      	b.n	3748e <rx_demux+0x12>
			LL_ASSERT(rx);
   375f0:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   375f4:	4642      	mov	r2, r8
   375f6:	4915      	ldr	r1, [pc, #84]	; (3764c <rx_demux+0x1d0>)
   375f8:	4813      	ldr	r0, [pc, #76]	; (37648 <rx_demux+0x1cc>)
   375fa:	f012 fd6f 	bl	4a0dc <printk>
   375fe:	4040      	eors	r0, r0
   37600:	f380 8811 	msr	BASEPRI, r0
   37604:	f04f 0003 	mov.w	r0, #3
   37608:	df02      	svc	2
   3760a:	9b03      	ldr	r3, [sp, #12]
   3760c:	e74b      	b.n	374a6 <rx_demux+0x2a>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   3760e:	4602      	mov	r2, r0
   37610:	4909      	ldr	r1, [pc, #36]	; (37638 <rx_demux+0x1bc>)
   37612:	6870      	ldr	r0, [r6, #4]
   37614:	f7fc fc8c 	bl	33f30 <memq_dequeue>
		if (rx) {
   37618:	9905      	ldr	r1, [sp, #20]
   3761a:	2900      	cmp	r1, #0
   3761c:	f43f af37 	beq.w	3748e <rx_demux+0x12>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37620:	4b07      	ldr	r3, [pc, #28]	; (37640 <rx_demux+0x1c4>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37622:	4a08      	ldr	r2, [pc, #32]	; (37644 <rx_demux+0x1c8>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37624:	78db      	ldrb	r3, [r3, #3]
   37626:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37628:	4628      	mov	r0, r5
   3762a:	f7fc fc71 	bl	33f10 <memq_enqueue>
	k_sem_give(sem_recv);
   3762e:	6838      	ldr	r0, [r7, #0]
   37630:	f011 f942 	bl	488b8 <z_impl_k_sem_give>
			if (nack) {
   37634:	e72b      	b.n	3748e <rx_demux+0x12>
   37636:	bf00      	nop
   37638:	20004c4c 	.word	0x20004c4c
   3763c:	20004c54 	.word	0x20004c54
   37640:	200008c8 	.word	0x200008c8
   37644:	20004c40 	.word	0x20004c40
   37648:	00052d50 	.word	0x00052d50
   3764c:	00052ff8 	.word	0x00052ff8
   37650:	00052fb4 	.word	0x00052fb4
   37654:	00052dd8 	.word	0x00052dd8

00037658 <ll_rx_get>:
{
   37658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3765c:	b085      	sub	sp, #20
   3765e:	e9cd 0100 	strd	r0, r1, [sp]
   37662:	4c62      	ldr	r4, [pc, #392]	; (377ec <ll_rx_get+0x194>)
				mem_release(link, &mem_link_rx.free);
   37664:	4d62      	ldr	r5, [pc, #392]	; (377f0 <ll_rx_get+0x198>)
   37666:	4e63      	ldr	r6, [pc, #396]	; (377f4 <ll_rx_get+0x19c>)
	*node_rx = NULL;
   37668:	9a00      	ldr	r2, [sp, #0]
   3766a:	2300      	movs	r3, #0
   3766c:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   3766e:	e9d6 0100 	ldrd	r0, r1, [r6]
   37672:	aa03      	add	r2, sp, #12
   37674:	f7fc fc54 	bl	33f20 <memq_peek>
	if (link) {
   37678:	4680      	mov	r8, r0
   3767a:	2800      	cmp	r0, #0
   3767c:	f000 80a7 	beq.w	377ce <ll_rx_get+0x176>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   37680:	9b03      	ldr	r3, [sp, #12]
   37682:	495d      	ldr	r1, [pc, #372]	; (377f8 <ll_rx_get+0x1a0>)
   37684:	781a      	ldrb	r2, [r3, #0]
   37686:	9801      	ldr	r0, [sp, #4]
   37688:	f7ff fe06 	bl	37298 <tx_cmplt_get>
		if (!cmplt) {
   3768c:	4607      	mov	r7, r0
   3768e:	2800      	cmp	r0, #0
   37690:	f040 8094 	bne.w	377bc <ll_rx_get+0x164>
			f = mfifo_tx_ack.f;
   37694:	78a3      	ldrb	r3, [r4, #2]
   37696:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   3769a:	78e2      	ldrb	r2, [r4, #3]
   3769c:	f10d 0109 	add.w	r1, sp, #9
   376a0:	f10d 000a 	add.w	r0, sp, #10
   376a4:	f7ff fdf8 	bl	37298 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   376a8:	b907      	cbnz	r7, 376ac <ll_rx_get+0x54>
			} while ((cmplt_prev != 0U) ||
   376aa:	b108      	cbz	r0, 376b0 <ll_rx_get+0x58>
{
   376ac:	4607      	mov	r7, r0
   376ae:	e7f4      	b.n	3769a <ll_rx_get+0x42>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   376b0:	9b03      	ldr	r3, [sp, #12]
   376b2:	791a      	ldrb	r2, [r3, #4]
   376b4:	2a01      	cmp	r2, #1
   376b6:	d17f      	bne.n	377b8 <ll_rx_get+0x160>
				(void)memq_dequeue(memq_ll_rx.tail,
   376b8:	463a      	mov	r2, r7
   376ba:	494e      	ldr	r1, [pc, #312]	; (377f4 <ll_rx_get+0x19c>)
   376bc:	6870      	ldr	r0, [r6, #4]
   376be:	f7fc fc37 	bl	33f30 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   376c2:	494e      	ldr	r1, [pc, #312]	; (377fc <ll_rx_get+0x1a4>)
   376c4:	4640      	mov	r0, r8
   376c6:	f7fc fbd9 	bl	33e7c <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   376ca:	782b      	ldrb	r3, [r5, #0]
   376cc:	2b0f      	cmp	r3, #15
   376ce:	d864      	bhi.n	3779a <ll_rx_get+0x142>
	mem_link_rx.quota_pdu += delta;
   376d0:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   376d2:	494b      	ldr	r1, [pc, #300]	; (37800 <ll_rx_get+0x1a8>)
   376d4:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   376d6:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   376d8:	f7fc fbd0 	bl	33e7c <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   376dc:	782b      	ldrb	r3, [r5, #0]
   376de:	2b00      	cmp	r3, #0
   376e0:	d0c2      	beq.n	37668 <ll_rx_get+0x10>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   376e2:	f8df 812c 	ldr.w	r8, [pc, #300]	; 37810 <ll_rx_get+0x1b8>
	last = last + 1;
   376e6:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   376ea:	f898 2001 	ldrb.w	r2, [r8, #1]
   376ee:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   376f2:	3701      	adds	r7, #1
   376f4:	b2ff      	uxtb	r7, r7
		last = 0U;
   376f6:	42ba      	cmp	r2, r7
   376f8:	bf08      	it	eq
   376fa:	2700      	moveq	r7, #0
	if (last == first) {
   376fc:	429f      	cmp	r7, r3
   376fe:	d019      	beq.n	37734 <ll_rx_get+0xdc>
		link = mem_acquire(&mem_link_rx.free);
   37700:	483e      	ldr	r0, [pc, #248]	; (377fc <ll_rx_get+0x1a4>)
   37702:	f7fc fba1 	bl	33e48 <mem_acquire>
		if (!link) {
   37706:	4681      	mov	r9, r0
   37708:	2800      	cmp	r0, #0
   3770a:	d0ad      	beq.n	37668 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   3770c:	483c      	ldr	r0, [pc, #240]	; (37800 <ll_rx_get+0x1a8>)
   3770e:	f7fc fb9b 	bl	33e48 <mem_acquire>
		if (!rx) {
   37712:	2800      	cmp	r0, #0
   37714:	d056      	beq.n	377c4 <ll_rx_get+0x16c>
		rx->link = link;
   37716:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3771a:	f898 2003 	ldrb.w	r2, [r8, #3]
   3771e:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37722:	fb02 8303 	mla	r3, r2, r3, r8
   37726:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   37728:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   3772a:	f888 7003 	strb.w	r7, [r8, #3]
   3772e:	3b01      	subs	r3, #1
   37730:	702b      	strb	r3, [r5, #0]
		max--;
   37732:	e799      	b.n	37668 <ll_rx_get+0x10>
   37734:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 37814 <ll_rx_get+0x1bc>
		link = mem_acquire(&mem_link_rx.free);
   37738:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 377fc <ll_rx_get+0x1a4>
   3773c:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   37740:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 37800 <ll_rx_get+0x1a8>
	if (last == count) {
   37744:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37748:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   3774c:	3701      	adds	r7, #1
   3774e:	b2ff      	uxtb	r7, r7
		last = 0U;
   37750:	42ba      	cmp	r2, r7
   37752:	bf08      	it	eq
   37754:	2700      	moveq	r7, #0
	if (last == first) {
   37756:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   37758:	4648      	mov	r0, r9
   3775a:	d085      	beq.n	37668 <ll_rx_get+0x10>
   3775c:	f7fc fb74 	bl	33e48 <mem_acquire>
		if (!link) {
   37760:	4683      	mov	fp, r0
   37762:	2800      	cmp	r0, #0
   37764:	d080      	beq.n	37668 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   37766:	4650      	mov	r0, sl
   37768:	f7fc fb6e 	bl	33e48 <mem_acquire>
		if (!rx) {
   3776c:	2800      	cmp	r0, #0
   3776e:	d038      	beq.n	377e2 <ll_rx_get+0x18a>
		link->mem = NULL;
   37770:	2300      	movs	r3, #0
   37772:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   37776:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3777a:	f898 2003 	ldrb.w	r2, [r8, #3]
   3777e:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37782:	fb02 8303 	mla	r3, r2, r3, r8
   37786:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   37788:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   3778a:	f888 7003 	strb.w	r7, [r8, #3]
   3778e:	3b01      	subs	r3, #1
   37790:	b2db      	uxtb	r3, r3
   37792:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   37794:	2b00      	cmp	r3, #0
   37796:	d1d5      	bne.n	37744 <ll_rx_get+0xec>
   37798:	e766      	b.n	37668 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   3779a:	f240 6306 	movw	r3, #1542	; 0x606
   3779e:	4a19      	ldr	r2, [pc, #100]	; (37804 <ll_rx_get+0x1ac>)
   377a0:	4919      	ldr	r1, [pc, #100]	; (37808 <ll_rx_get+0x1b0>)
   377a2:	481a      	ldr	r0, [pc, #104]	; (3780c <ll_rx_get+0x1b4>)
   377a4:	f012 fc9a 	bl	4a0dc <printk>
   377a8:	4040      	eors	r0, r0
   377aa:	f380 8811 	msr	BASEPRI, r0
   377ae:	f04f 0003 	mov.w	r0, #3
   377b2:	df02      	svc	2
   377b4:	782b      	ldrb	r3, [r5, #0]
   377b6:	e78b      	b.n	376d0 <ll_rx_get+0x78>
			*node_rx = rx;
   377b8:	9a00      	ldr	r2, [sp, #0]
   377ba:	6013      	str	r3, [r2, #0]
}
   377bc:	4638      	mov	r0, r7
   377be:	b005      	add	sp, #20
   377c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   377c4:	4648      	mov	r0, r9
   377c6:	490d      	ldr	r1, [pc, #52]	; (377fc <ll_rx_get+0x1a4>)
   377c8:	f7fc fb58 	bl	33e7c <mem_release>
			return;
   377cc:	e74c      	b.n	37668 <ll_rx_get+0x10>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   377ce:	78e2      	ldrb	r2, [r4, #3]
   377d0:	4909      	ldr	r1, [pc, #36]	; (377f8 <ll_rx_get+0x1a0>)
   377d2:	9801      	ldr	r0, [sp, #4]
   377d4:	f7ff fd60 	bl	37298 <tx_cmplt_get>
   377d8:	4607      	mov	r7, r0
}
   377da:	4638      	mov	r0, r7
   377dc:	b005      	add	sp, #20
   377de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   377e2:	4658      	mov	r0, fp
   377e4:	4905      	ldr	r1, [pc, #20]	; (377fc <ll_rx_get+0x1a4>)
   377e6:	f7fc fb49 	bl	33e7c <mem_release>
			return;
   377ea:	e73d      	b.n	37668 <ll_rx_get+0x10>
   377ec:	200008c8 	.word	0x200008c8
   377f0:	2000465c 	.word	0x2000465c
   377f4:	20004c3c 	.word	0x20004c3c
   377f8:	200008ca 	.word	0x200008ca
   377fc:	20004660 	.word	0x20004660
   37800:	2000472c 	.word	0x2000472c
   37804:	00052fb4 	.word	0x00052fb4
   37808:	00052f2c 	.word	0x00052f2c
   3780c:	00052d50 	.word	0x00052d50
   37810:	200007ac 	.word	0x200007ac
   37814:	20000774 	.word	0x20000774

00037818 <ll_rx_dequeue>:
{
   37818:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   3781a:	4957      	ldr	r1, [pc, #348]	; (37978 <ll_rx_dequeue+0x160>)
{
   3781c:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   3781e:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   37820:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   37822:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   37824:	aa01      	add	r2, sp, #4
   37826:	f7fc fb83 	bl	33f30 <memq_dequeue>
	LL_ASSERT(link);
   3782a:	4604      	mov	r4, r0
   3782c:	2800      	cmp	r0, #0
   3782e:	d03d      	beq.n	378ac <ll_rx_dequeue+0x94>
	mem_release(link, &mem_link_rx.free);
   37830:	4620      	mov	r0, r4
   37832:	4952      	ldr	r1, [pc, #328]	; (3797c <ll_rx_dequeue+0x164>)
   37834:	f7fc fb22 	bl	33e7c <mem_release>
	switch (rx->type) {
   37838:	9801      	ldr	r0, [sp, #4]
   3783a:	7902      	ldrb	r2, [r0, #4]
   3783c:	2a1c      	cmp	r2, #28
   3783e:	d826      	bhi.n	3788e <ll_rx_dequeue+0x76>
   37840:	2301      	movs	r3, #1
   37842:	494f      	ldr	r1, [pc, #316]	; (37980 <ll_rx_dequeue+0x168>)
   37844:	4093      	lsls	r3, r2
   37846:	4019      	ands	r1, r3
   37848:	d003      	beq.n	37852 <ll_rx_dequeue+0x3a>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   3784a:	2a00      	cmp	r2, #0
   3784c:	d03c      	beq.n	378c8 <ll_rx_dequeue+0xb0>
}
   3784e:	b002      	add	sp, #8
   37850:	bd70      	pop	{r4, r5, r6, pc}
   37852:	025b      	lsls	r3, r3, #9
   37854:	d51b      	bpl.n	3788e <ll_rx_dequeue+0x76>
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   37856:	7f03      	ldrb	r3, [r0, #28]
   37858:	6885      	ldr	r5, [r0, #8]
   3785a:	2b3c      	cmp	r3, #60	; 0x3c
   3785c:	682c      	ldr	r4, [r5, #0]
   3785e:	d04f      	beq.n	37900 <ll_rx_dequeue+0xe8>
   37860:	7f43      	ldrb	r3, [r0, #29]
   37862:	2b00      	cmp	r3, #0
   37864:	d13f      	bne.n	378e6 <ll_rx_dequeue+0xce>
			scan->is_enabled = 0U;
   37866:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
			scan->lll.conn = NULL;
   3786a:	6223      	str	r3, [r4, #32]
			scan->is_enabled = 0U;
   3786c:	f363 0200 	bfi	r2, r3, #0, #1
   37870:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
			      (ull_scan_is_enabled(0) << 1)) |
   37874:	2000      	movs	r0, #0
   37876:	f001 fe6d 	bl	39554 <ull_scan_is_enabled>
   3787a:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
   3787c:	2000      	movs	r0, #0
   3787e:	f001 fc41 	bl	39104 <ull_adv_is_enabled>
			if (!bm) {
   37882:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
   37886:	d1e2      	bne.n	3784e <ll_rx_dequeue+0x36>
				ull_filter_adv_scan_state_cb(0);
   37888:	f008 f88c 	bl	3f9a4 <ull_filter_adv_scan_state_cb>
   3788c:	e7df      	b.n	3784e <ll_rx_dequeue+0x36>
		LL_ASSERT(0);
   3788e:	f240 43c7 	movw	r3, #1223	; 0x4c7
   37892:	4a3c      	ldr	r2, [pc, #240]	; (37984 <ll_rx_dequeue+0x16c>)
   37894:	493c      	ldr	r1, [pc, #240]	; (37988 <ll_rx_dequeue+0x170>)
   37896:	483d      	ldr	r0, [pc, #244]	; (3798c <ll_rx_dequeue+0x174>)
   37898:	f012 fc20 	bl	4a0dc <printk>
   3789c:	4040      	eors	r0, r0
   3789e:	f380 8811 	msr	BASEPRI, r0
   378a2:	f04f 0003 	mov.w	r0, #3
   378a6:	df02      	svc	2
}
   378a8:	b002      	add	sp, #8
   378aa:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   378ac:	f240 33a1 	movw	r3, #929	; 0x3a1
   378b0:	4a34      	ldr	r2, [pc, #208]	; (37984 <ll_rx_dequeue+0x16c>)
   378b2:	4937      	ldr	r1, [pc, #220]	; (37990 <ll_rx_dequeue+0x178>)
   378b4:	4835      	ldr	r0, [pc, #212]	; (3798c <ll_rx_dequeue+0x174>)
   378b6:	f012 fc11 	bl	4a0dc <printk>
   378ba:	4040      	eors	r0, r0
   378bc:	f380 8811 	msr	BASEPRI, r0
   378c0:	f04f 0003 	mov.w	r0, #3
   378c4:	df02      	svc	2
   378c6:	e7b3      	b.n	37830 <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   378c8:	f240 43c3 	movw	r3, #1219	; 0x4c3
   378cc:	4a2d      	ldr	r2, [pc, #180]	; (37984 <ll_rx_dequeue+0x16c>)
   378ce:	4931      	ldr	r1, [pc, #196]	; (37994 <ll_rx_dequeue+0x17c>)
   378d0:	482e      	ldr	r0, [pc, #184]	; (3798c <ll_rx_dequeue+0x174>)
   378d2:	f012 fc03 	bl	4a0dc <printk>
   378d6:	4040      	eors	r0, r0
   378d8:	f380 8811 	msr	BASEPRI, r0
   378dc:	f04f 0003 	mov.w	r0, #3
   378e0:	df02      	svc	2
}
   378e2:	b002      	add	sp, #8
   378e4:	bd70      	pop	{r4, r5, r6, pc}
				if (adv->node_rx_cc_free) {
   378e6:	6e60      	ldr	r0, [r4, #100]	; 0x64
   378e8:	b118      	cbz	r0, 378f2 <ll_rx_dequeue+0xda>
					adv->node_rx_cc_free = NULL;
   378ea:	6661      	str	r1, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   378ec:	492a      	ldr	r1, [pc, #168]	; (37998 <ll_rx_dequeue+0x180>)
   378ee:	f7fc fac5 	bl	33e7c <mem_release>
			adv->is_enabled = 0U;
   378f2:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   378f6:	f36f 0300 	bfc	r3, #0, #1
   378fa:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   378fe:	e7b9      	b.n	37874 <ll_rx_dequeue+0x5c>
				conn_lll = lll->conn;
   37900:	686e      	ldr	r6, [r5, #4]
				LL_ASSERT(conn_lll);
   37902:	b1ee      	cbz	r6, 37940 <ll_rx_dequeue+0x128>
				LL_ASSERT(!conn_lll->link_tx_free);
   37904:	6db3      	ldr	r3, [r6, #88]	; 0x58
				lll->conn = NULL;
   37906:	2200      	movs	r2, #0
   37908:	606a      	str	r2, [r5, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   3790a:	b163      	cbz	r3, 37926 <ll_rx_dequeue+0x10e>
   3790c:	f240 431a 	movw	r3, #1050	; 0x41a
   37910:	4a1c      	ldr	r2, [pc, #112]	; (37984 <ll_rx_dequeue+0x16c>)
   37912:	4922      	ldr	r1, [pc, #136]	; (3799c <ll_rx_dequeue+0x184>)
   37914:	481d      	ldr	r0, [pc, #116]	; (3798c <ll_rx_dequeue+0x174>)
   37916:	f012 fbe1 	bl	4a0dc <printk>
   3791a:	4040      	eors	r0, r0
   3791c:	f380 8811 	msr	BASEPRI, r0
   37920:	f04f 0003 	mov.w	r0, #3
   37924:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   37926:	f106 014c 	add.w	r1, r6, #76	; 0x4c
   3792a:	f106 0048 	add.w	r0, r6, #72	; 0x48
   3792e:	f7fc fae5 	bl	33efc <memq_deinit>
				LL_ASSERT(link);
   37932:	4605      	mov	r5, r0
   37934:	b190      	cbz	r0, 3795c <ll_rx_dequeue+0x144>
				conn_lll->link_tx_free = link;
   37936:	65b5      	str	r5, [r6, #88]	; 0x58
				ll_conn_release(conn);
   37938:	6830      	ldr	r0, [r6, #0]
   3793a:	f002 fa6f 	bl	39e1c <ll_conn_release>
   3793e:	e7d8      	b.n	378f2 <ll_rx_dequeue+0xda>
				LL_ASSERT(conn_lll);
   37940:	f240 4317 	movw	r3, #1047	; 0x417
   37944:	4a0f      	ldr	r2, [pc, #60]	; (37984 <ll_rx_dequeue+0x16c>)
   37946:	4916      	ldr	r1, [pc, #88]	; (379a0 <ll_rx_dequeue+0x188>)
   37948:	4810      	ldr	r0, [pc, #64]	; (3798c <ll_rx_dequeue+0x174>)
   3794a:	f012 fbc7 	bl	4a0dc <printk>
   3794e:	4040      	eors	r0, r0
   37950:	f380 8811 	msr	BASEPRI, r0
   37954:	f04f 0003 	mov.w	r0, #3
   37958:	df02      	svc	2
   3795a:	e7d3      	b.n	37904 <ll_rx_dequeue+0xec>
				LL_ASSERT(link);
   3795c:	f240 431d 	movw	r3, #1053	; 0x41d
   37960:	4a08      	ldr	r2, [pc, #32]	; (37984 <ll_rx_dequeue+0x16c>)
   37962:	490b      	ldr	r1, [pc, #44]	; (37990 <ll_rx_dequeue+0x178>)
   37964:	4809      	ldr	r0, [pc, #36]	; (3798c <ll_rx_dequeue+0x174>)
   37966:	f012 fbb9 	bl	4a0dc <printk>
   3796a:	4040      	eors	r0, r0
   3796c:	f380 8811 	msr	BASEPRI, r0
   37970:	f04f 0003 	mov.w	r0, #3
   37974:	df02      	svc	2
   37976:	e7de      	b.n	37936 <ll_rx_dequeue+0x11e>
   37978:	20004c3c 	.word	0x20004c3c
   3797c:	20004660 	.word	0x20004660
   37980:	1f800029 	.word	0x1f800029
   37984:	00052fb4 	.word	0x00052fb4
   37988:	00052dd8 	.word	0x00052dd8
   3798c:	00052d50 	.word	0x00052d50
   37990:	00053350 	.word	0x00053350
   37994:	00052f0c 	.word	0x00052f0c
   37998:	2000472c 	.word	0x2000472c
   3799c:	00052ef4 	.word	0x00052ef4
   379a0:	00052ee8 	.word	0x00052ee8

000379a4 <ll_rx_mem_release>:
{
   379a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   379a8:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   379aa:	4d89      	ldr	r5, [pc, #548]	; (37bd0 <ll_rx_mem_release+0x22c>)
{
   379ac:	4682      	mov	sl, r0
	while (rx) {
   379ae:	b354      	cbz	r4, 37a06 <ll_rx_mem_release+0x62>
			LL_ASSERT(0);
   379b0:	f8df 824c 	ldr.w	r8, [pc, #588]	; 37c00 <ll_rx_mem_release+0x25c>
   379b4:	f8df 924c 	ldr.w	r9, [pc, #588]	; 37c04 <ll_rx_mem_release+0x260>
   379b8:	4f86      	ldr	r7, [pc, #536]	; (37bd4 <ll_rx_mem_release+0x230>)
		switch (rx_free->type) {
   379ba:	7922      	ldrb	r2, [r4, #4]
		rx = rx->next;
   379bc:	6826      	ldr	r6, [r4, #0]
		switch (rx_free->type) {
   379be:	2a1c      	cmp	r2, #28
   379c0:	d851      	bhi.n	37a66 <ll_rx_mem_release+0xc2>
   379c2:	2301      	movs	r3, #1
   379c4:	4984      	ldr	r1, [pc, #528]	; (37bd8 <ll_rx_mem_release+0x234>)
   379c6:	4093      	lsls	r3, r2
   379c8:	420b      	tst	r3, r1
   379ca:	d10e      	bne.n	379ea <ll_rx_mem_release+0x46>
   379cc:	f413 0b00 	ands.w	fp, r3, #8388608	; 0x800000
   379d0:	d15a      	bne.n	37a88 <ll_rx_mem_release+0xe4>
   379d2:	025b      	lsls	r3, r3, #9
   379d4:	d547      	bpl.n	37a66 <ll_rx_mem_release+0xc2>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   379d6:	7f23      	ldrb	r3, [r4, #28]
   379d8:	2b3c      	cmp	r3, #60	; 0x3c
   379da:	f000 80df 	beq.w	37b9c <ll_rx_mem_release+0x1f8>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   379de:	2b02      	cmp	r3, #2
   379e0:	f000 80d0 	beq.w	37b84 <ll_rx_mem_release+0x1e0>
				LL_ASSERT(!cc->status);
   379e4:	2b00      	cmp	r3, #0
   379e6:	f040 80be 	bne.w	37b66 <ll_rx_mem_release+0x1c2>
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   379ea:	2a00      	cmp	r2, #0
   379ec:	d07f      	beq.n	37aee <ll_rx_mem_release+0x14a>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   379ee:	782b      	ldrb	r3, [r5, #0]
   379f0:	2b0f      	cmp	r3, #15
   379f2:	d86d      	bhi.n	37ad0 <ll_rx_mem_release+0x12c>
	mem_link_rx.quota_pdu += delta;
   379f4:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   379f6:	4620      	mov	r0, r4
   379f8:	4978      	ldr	r1, [pc, #480]	; (37bdc <ll_rx_mem_release+0x238>)
	mem_link_rx.quota_pdu += delta;
   379fa:	702b      	strb	r3, [r5, #0]
	while (rx) {
   379fc:	4634      	mov	r4, r6
			mem_release(rx_free, &mem_pdu_rx.free);
   379fe:	f7fc fa3d 	bl	33e7c <mem_release>
	while (rx) {
   37a02:	2e00      	cmp	r6, #0
   37a04:	d1d9      	bne.n	379ba <ll_rx_mem_release+0x16>
	*node_rx = rx;
   37a06:	2300      	movs	r3, #0
   37a08:	f8ca 3000 	str.w	r3, [sl]
	if (max > mem_link_rx.quota_pdu) {
   37a0c:	782f      	ldrb	r7, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37a0e:	b347      	cbz	r7, 37a62 <ll_rx_mem_release+0xbe>
   37a10:	4e73      	ldr	r6, [pc, #460]	; (37be0 <ll_rx_mem_release+0x23c>)
		link = mem_acquire(&mem_link_rx.free);
   37a12:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 37bf4 <ll_rx_mem_release+0x250>
   37a16:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   37a18:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 37bdc <ll_rx_mem_release+0x238>
	if (last == count) {
   37a1c:	7872      	ldrb	r2, [r6, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37a1e:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   37a20:	3401      	adds	r4, #1
   37a22:	b2e4      	uxtb	r4, r4
		last = 0U;
   37a24:	42a2      	cmp	r2, r4
   37a26:	bf08      	it	eq
   37a28:	2400      	moveq	r4, #0
	if (last == first) {
   37a2a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   37a2c:	4640      	mov	r0, r8
   37a2e:	d06c      	beq.n	37b0a <ll_rx_mem_release+0x166>
   37a30:	f7fc fa0a 	bl	33e48 <mem_acquire>
		if (!link) {
   37a34:	4682      	mov	sl, r0
   37a36:	b1a0      	cbz	r0, 37a62 <ll_rx_mem_release+0xbe>
		rx = mem_acquire(&mem_pdu_rx.free);
   37a38:	4648      	mov	r0, r9
   37a3a:	f7fc fa05 	bl	33e48 <mem_acquire>
		if (!rx) {
   37a3e:	2800      	cmp	r0, #0
   37a40:	f000 80b1 	beq.w	37ba6 <ll_rx_mem_release+0x202>
		rx->link = link;
   37a44:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37a48:	78f2      	ldrb	r2, [r6, #3]
   37a4a:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37a4c:	fb02 6303 	mla	r3, r2, r3, r6
   37a50:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   37a52:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   37a54:	70f4      	strb	r4, [r6, #3]
		max--;
   37a56:	3f01      	subs	r7, #1
	mem_link_rx.quota_pdu += delta;
   37a58:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37a5a:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   37a5e:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   37a60:	d1dc      	bne.n	37a1c <ll_rx_mem_release+0x78>
}
   37a62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(0);
   37a66:	f240 53fa 	movw	r3, #1530	; 0x5fa
   37a6a:	4642      	mov	r2, r8
   37a6c:	4649      	mov	r1, r9
   37a6e:	4638      	mov	r0, r7
   37a70:	f012 fb34 	bl	4a0dc <printk>
   37a74:	4040      	eors	r0, r0
   37a76:	f380 8811 	msr	BASEPRI, r0
   37a7a:	f04f 0003 	mov.w	r0, #3
   37a7e:	df02      	svc	2
	while (rx) {
   37a80:	4634      	mov	r4, r6
   37a82:	2e00      	cmp	r6, #0
   37a84:	d199      	bne.n	379ba <ll_rx_mem_release+0x16>
   37a86:	e7be      	b.n	37a06 <ll_rx_mem_release+0x62>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   37a88:	88e0      	ldrh	r0, [r4, #6]
   37a8a:	2805      	cmp	r0, #5
   37a8c:	d8f8      	bhi.n	37a80 <ll_rx_mem_release+0xdc>
				conn = ll_conn_get(rx_free->handle);
   37a8e:	f002 f9d3 	bl	39e38 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   37a92:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   37a94:	4604      	mov	r4, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   37a96:	b163      	cbz	r3, 37ab2 <ll_rx_mem_release+0x10e>
   37a98:	f240 53ec 	movw	r3, #1516	; 0x5ec
   37a9c:	4642      	mov	r2, r8
   37a9e:	4951      	ldr	r1, [pc, #324]	; (37be4 <ll_rx_mem_release+0x240>)
   37aa0:	4638      	mov	r0, r7
   37aa2:	f012 fb1b 	bl	4a0dc <printk>
   37aa6:	4040      	eors	r0, r0
   37aa8:	f380 8811 	msr	BASEPRI, r0
   37aac:	f04f 0003 	mov.w	r0, #3
   37ab0:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   37ab2:	f104 0168 	add.w	r1, r4, #104	; 0x68
   37ab6:	f104 0064 	add.w	r0, r4, #100	; 0x64
   37aba:	f7fc fa1f 	bl	33efc <memq_deinit>
				LL_ASSERT(link);
   37abe:	4683      	mov	fp, r0
   37ac0:	2800      	cmp	r0, #0
   37ac2:	d076      	beq.n	37bb2 <ll_rx_mem_release+0x20e>
				conn->lll.link_tx_free = link;
   37ac4:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
				ll_conn_release(conn);
   37ac8:	4620      	mov	r0, r4
   37aca:	f002 f9a7 	bl	39e1c <ll_conn_release>
   37ace:	e7d7      	b.n	37a80 <ll_rx_mem_release+0xdc>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   37ad0:	f240 6306 	movw	r3, #1542	; 0x606
   37ad4:	4642      	mov	r2, r8
   37ad6:	4944      	ldr	r1, [pc, #272]	; (37be8 <ll_rx_mem_release+0x244>)
   37ad8:	4638      	mov	r0, r7
   37ada:	f012 faff 	bl	4a0dc <printk>
   37ade:	4040      	eors	r0, r0
   37ae0:	f380 8811 	msr	BASEPRI, r0
   37ae4:	f04f 0003 	mov.w	r0, #3
   37ae8:	df02      	svc	2
   37aea:	782b      	ldrb	r3, [r5, #0]
   37aec:	e782      	b.n	379f4 <ll_rx_mem_release+0x50>
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   37aee:	f240 537d 	movw	r3, #1405	; 0x57d
   37af2:	4642      	mov	r2, r8
   37af4:	493d      	ldr	r1, [pc, #244]	; (37bec <ll_rx_mem_release+0x248>)
   37af6:	4638      	mov	r0, r7
   37af8:	f012 faf0 	bl	4a0dc <printk>
   37afc:	4040      	eors	r0, r0
   37afe:	f380 8811 	msr	BASEPRI, r0
   37b02:	f04f 0003 	mov.w	r0, #3
   37b06:	df02      	svc	2
   37b08:	e771      	b.n	379ee <ll_rx_mem_release+0x4a>
	while (mem_link_rx.quota_pdu &&
   37b0a:	782b      	ldrb	r3, [r5, #0]
   37b0c:	2b00      	cmp	r3, #0
   37b0e:	d0a8      	beq.n	37a62 <ll_rx_mem_release+0xbe>
   37b10:	4e37      	ldr	r6, [pc, #220]	; (37bf0 <ll_rx_mem_release+0x24c>)
		link = mem_acquire(&mem_link_rx.free);
   37b12:	4f38      	ldr	r7, [pc, #224]	; (37bf4 <ll_rx_mem_release+0x250>)
   37b14:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   37b16:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 37bdc <ll_rx_mem_release+0x238>
		link->mem = NULL;
   37b1a:	f04f 0900 	mov.w	r9, #0
	last = last + 1;
   37b1e:	3401      	adds	r4, #1
	if (last == count) {
   37b20:	7872      	ldrb	r2, [r6, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   37b22:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   37b24:	b2e4      	uxtb	r4, r4
		last = 0U;
   37b26:	42a2      	cmp	r2, r4
   37b28:	bf08      	it	eq
   37b2a:	2400      	moveq	r4, #0
	if (last == first) {
   37b2c:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   37b2e:	4638      	mov	r0, r7
   37b30:	d097      	beq.n	37a62 <ll_rx_mem_release+0xbe>
   37b32:	f7fc f989 	bl	33e48 <mem_acquire>
		if (!link) {
   37b36:	4682      	mov	sl, r0
   37b38:	2800      	cmp	r0, #0
   37b3a:	d092      	beq.n	37a62 <ll_rx_mem_release+0xbe>
		rx = mem_acquire(&mem_pdu_rx.free);
   37b3c:	4640      	mov	r0, r8
   37b3e:	f7fc f983 	bl	33e48 <mem_acquire>
		if (!rx) {
   37b42:	b380      	cbz	r0, 37ba6 <ll_rx_mem_release+0x202>
		link->mem = NULL;
   37b44:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   37b48:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   37b4c:	78f2      	ldrb	r2, [r6, #3]
   37b4e:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   37b50:	fb02 6303 	mla	r3, r2, r3, r6
   37b54:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   37b56:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   37b58:	70f4      	strb	r4, [r6, #3]
   37b5a:	3b01      	subs	r3, #1
   37b5c:	b2db      	uxtb	r3, r3
   37b5e:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   37b60:	2b00      	cmp	r3, #0
   37b62:	d1dc      	bne.n	37b1e <ll_rx_mem_release+0x17a>
   37b64:	e77d      	b.n	37a62 <ll_rx_mem_release+0xbe>
				LL_ASSERT(!cc->status);
   37b66:	f240 532b 	movw	r3, #1323	; 0x52b
   37b6a:	4642      	mov	r2, r8
   37b6c:	4922      	ldr	r1, [pc, #136]	; (37bf8 <ll_rx_mem_release+0x254>)
   37b6e:	4638      	mov	r0, r7
   37b70:	f012 fab4 	bl	4a0dc <printk>
   37b74:	4040      	eors	r0, r0
   37b76:	f380 8811 	msr	BASEPRI, r0
   37b7a:	f04f 0003 	mov.w	r0, #3
   37b7e:	df02      	svc	2
   37b80:	7922      	ldrb	r2, [r4, #4]
   37b82:	e732      	b.n	379ea <ll_rx_mem_release+0x46>
				ull_central_cleanup(rx_free);
   37b84:	4620      	mov	r0, r4
   37b86:	f007 f9c3 	bl	3ef10 <ull_central_cleanup>
				if (!ull_adv_is_enabled_get(0))
   37b8a:	4658      	mov	r0, fp
   37b8c:	f001 faac 	bl	390e8 <ull_adv_is_enabled_get>
   37b90:	2800      	cmp	r0, #0
   37b92:	f47f af75 	bne.w	37a80 <ll_rx_mem_release+0xdc>
					ull_filter_adv_scan_state_cb(0);
   37b96:	f007 ff05 	bl	3f9a4 <ull_filter_adv_scan_state_cb>
   37b9a:	e771      	b.n	37a80 <ll_rx_mem_release+0xdc>
				mem_release(rx_free, &mem_pdu_rx.free);
   37b9c:	4620      	mov	r0, r4
   37b9e:	490f      	ldr	r1, [pc, #60]	; (37bdc <ll_rx_mem_release+0x238>)
   37ba0:	f7fc f96c 	bl	33e7c <mem_release>
				break;
   37ba4:	e76c      	b.n	37a80 <ll_rx_mem_release+0xdc>
			mem_release(link, &mem_link_rx.free);
   37ba6:	4650      	mov	r0, sl
   37ba8:	4912      	ldr	r1, [pc, #72]	; (37bf4 <ll_rx_mem_release+0x250>)
}
   37baa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   37bae:	f7fc b965 	b.w	33e7c <mem_release>
				LL_ASSERT(link);
   37bb2:	f240 53ef 	movw	r3, #1519	; 0x5ef
   37bb6:	4642      	mov	r2, r8
   37bb8:	4910      	ldr	r1, [pc, #64]	; (37bfc <ll_rx_mem_release+0x258>)
   37bba:	4638      	mov	r0, r7
   37bbc:	f012 fa8e 	bl	4a0dc <printk>
   37bc0:	4040      	eors	r0, r0
   37bc2:	f380 8811 	msr	BASEPRI, r0
   37bc6:	f04f 0003 	mov.w	r0, #3
   37bca:	df02      	svc	2
   37bcc:	e77a      	b.n	37ac4 <ll_rx_mem_release+0x120>
   37bce:	bf00      	nop
   37bd0:	2000465c 	.word	0x2000465c
   37bd4:	00052d50 	.word	0x00052d50
   37bd8:	1f000029 	.word	0x1f000029
   37bdc:	2000472c 	.word	0x2000472c
   37be0:	200007ac 	.word	0x200007ac
   37be4:	00052f9c 	.word	0x00052f9c
   37be8:	00052f2c 	.word	0x00052f2c
   37bec:	00052f78 	.word	0x00052f78
   37bf0:	20000774 	.word	0x20000774
   37bf4:	20004660 	.word	0x20004660
   37bf8:	00052f6c 	.word	0x00052f6c
   37bfc:	00053350 	.word	0x00053350
   37c00:	00052fb4 	.word	0x00052fb4
   37c04:	00052dd8 	.word	0x00052dd8

00037c08 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   37c08:	4801      	ldr	r0, [pc, #4]	; (37c10 <ll_rx_link_alloc+0x8>)
   37c0a:	f7fc b91d 	b.w	33e48 <mem_acquire>
   37c0e:	bf00      	nop
   37c10:	20004660 	.word	0x20004660

00037c14 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   37c14:	4901      	ldr	r1, [pc, #4]	; (37c1c <ll_rx_link_release+0x8>)
   37c16:	f7fc b931 	b.w	33e7c <mem_release>
   37c1a:	bf00      	nop
   37c1c:	20004660 	.word	0x20004660

00037c20 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   37c20:	4801      	ldr	r0, [pc, #4]	; (37c28 <ll_rx_alloc+0x8>)
   37c22:	f7fc b911 	b.w	33e48 <mem_acquire>
   37c26:	bf00      	nop
   37c28:	2000472c 	.word	0x2000472c

00037c2c <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   37c2c:	4901      	ldr	r1, [pc, #4]	; (37c34 <ll_rx_release+0x8>)
   37c2e:	f7fc b925 	b.w	33e7c <mem_release>
   37c32:	bf00      	nop
   37c34:	2000472c 	.word	0x2000472c

00037c38 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37c38:	4b02      	ldr	r3, [pc, #8]	; (37c44 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37c3a:	4a03      	ldr	r2, [pc, #12]	; (37c48 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   37c3c:	78db      	ldrb	r3, [r3, #3]
   37c3e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   37c40:	f7fc b966 	b.w	33f10 <memq_enqueue>
   37c44:	200008c8 	.word	0x200008c8
   37c48:	20004c40 	.word	0x20004c40

00037c4c <ll_rx_sched>:
	k_sem_give(sem_recv);
   37c4c:	4b01      	ldr	r3, [pc, #4]	; (37c54 <ll_rx_sched+0x8>)
   37c4e:	6818      	ldr	r0, [r3, #0]
   37c50:	f010 be32 	b.w	488b8 <z_impl_k_sem_give>
   37c54:	20004c54 	.word	0x20004c54

00037c58 <ll_pdu_rx_alloc_peek>:
{
   37c58:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   37c5a:	4a0e      	ldr	r2, [pc, #56]	; (37c94 <ll_pdu_rx_alloc_peek+0x3c>)
   37c5c:	7891      	ldrb	r1, [r2, #2]
   37c5e:	78d3      	ldrb	r3, [r2, #3]
	if (last >= first) {
   37c60:	4299      	cmp	r1, r3
   37c62:	d80e      	bhi.n	37c82 <ll_pdu_rx_alloc_peek+0x2a>
		return last - first;
   37c64:	1a5c      	subs	r4, r3, r1
   37c66:	b2e4      	uxtb	r4, r4
   37c68:	42a0      	cmp	r0, r4
   37c6a:	d807      	bhi.n	37c7c <ll_pdu_rx_alloc_peek+0x24>
	if (first == last) {
   37c6c:	4299      	cmp	r1, r3
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   37c6e:	7810      	ldrb	r0, [r2, #0]
   37c70:	d004      	beq.n	37c7c <ll_pdu_rx_alloc_peek+0x24>
	return *((void **)(fifo + first * size));
   37c72:	fb01 2200 	mla	r2, r1, r0, r2
}
   37c76:	bc10      	pop	{r4}
   37c78:	6850      	ldr	r0, [r2, #4]
   37c7a:	4770      	bx	lr
		return NULL;
   37c7c:	2000      	movs	r0, #0
}
   37c7e:	bc10      	pop	{r4}
   37c80:	4770      	bx	lr
		return count - first + last;
   37c82:	7854      	ldrb	r4, [r2, #1]
   37c84:	4423      	add	r3, r4
   37c86:	1a5b      	subs	r3, r3, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   37c88:	b2db      	uxtb	r3, r3
   37c8a:	4298      	cmp	r0, r3
   37c8c:	d8f6      	bhi.n	37c7c <ll_pdu_rx_alloc_peek+0x24>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   37c8e:	7810      	ldrb	r0, [r2, #0]
	if (first == last) {
   37c90:	e7ef      	b.n	37c72 <ll_pdu_rx_alloc_peek+0x1a>
   37c92:	bf00      	nop
   37c94:	20000774 	.word	0x20000774

00037c98 <ll_pdu_rx_alloc>:
{
   37c98:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   37c9a:	4b0a      	ldr	r3, [pc, #40]	; (37cc4 <ll_pdu_rx_alloc+0x2c>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   37c9c:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   37c9e:	78da      	ldrb	r2, [r3, #3]
   37ca0:	7818      	ldrb	r0, [r3, #0]
   37ca2:	785c      	ldrb	r4, [r3, #1]
   37ca4:	428a      	cmp	r2, r1
   37ca6:	d00a      	beq.n	37cbe <ll_pdu_rx_alloc+0x26>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   37ca8:	1c4a      	adds	r2, r1, #1
   37caa:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   37cac:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   37cb0:	4294      	cmp	r4, r2
   37cb2:	bf08      	it	eq
   37cb4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   37cb6:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   37cb8:	709a      	strb	r2, [r3, #2]
}
   37cba:	bc10      	pop	{r4}
   37cbc:	4770      	bx	lr
		return NULL;
   37cbe:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   37cc0:	e7fb      	b.n	37cba <ll_pdu_rx_alloc+0x22>
   37cc2:	bf00      	nop
   37cc4:	20000774 	.word	0x20000774

00037cc8 <ll_tx_ack_put>:
{
   37cc8:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   37cca:	4a13      	ldr	r2, [pc, #76]	; (37d18 <ll_tx_ack_put+0x50>)
   37ccc:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   37cce:	7855      	ldrb	r5, [r2, #1]
   37cd0:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   37cd2:	1c73      	adds	r3, r6, #1
   37cd4:	b2db      	uxtb	r3, r3
		last = 0U;
   37cd6:	429d      	cmp	r5, r3
   37cd8:	bf08      	it	eq
   37cda:	2300      	moveq	r3, #0
	if (last == first) {
   37cdc:	429c      	cmp	r4, r3
   37cde:	d00a      	beq.n	37cf6 <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   37ce0:	4615      	mov	r5, r2
   37ce2:	f815 4b04 	ldrb.w	r4, [r5], #4
   37ce6:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   37cea:	192e      	adds	r6, r5, r4
   37cec:	d003      	beq.n	37cf6 <ll_tx_ack_put+0x2e>
	tx->handle = handle;
   37cee:	5328      	strh	r0, [r5, r4]
	tx->node = node_tx;
   37cf0:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   37cf2:	70d3      	strb	r3, [r2, #3]
}
   37cf4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
   37cf6:	f240 634e 	movw	r3, #1614	; 0x64e
   37cfa:	4a08      	ldr	r2, [pc, #32]	; (37d1c <ll_tx_ack_put+0x54>)
   37cfc:	4908      	ldr	r1, [pc, #32]	; (37d20 <ll_tx_ack_put+0x58>)
   37cfe:	4809      	ldr	r0, [pc, #36]	; (37d24 <ll_tx_ack_put+0x5c>)
   37d00:	f012 f9ec 	bl	4a0dc <printk>
   37d04:	4040      	eors	r0, r0
   37d06:	f380 8811 	msr	BASEPRI, r0
   37d0a:	f04f 0003 	mov.w	r0, #3
   37d0e:	df02      	svc	2
	tx->handle = handle;
   37d10:	2300      	movs	r3, #0
   37d12:	801b      	strh	r3, [r3, #0]
   37d14:	deff      	udf	#255	; 0xff
   37d16:	bf00      	nop
   37d18:	200008c8 	.word	0x200008c8
   37d1c:	00052fb4 	.word	0x00052fb4
   37d20:	00053344 	.word	0x00053344
   37d24:	00052d50 	.word	0x00052d50

00037d28 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   37d28:	2200      	movs	r2, #0
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   37d2a:	230b      	movs	r3, #11
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   37d2c:	7002      	strb	r2, [r0, #0]
	*ticker_id = (TICKER_NODES - FLASH_TICKER_NODES);
   37d2e:	700b      	strb	r3, [r1, #0]
}
   37d30:	4770      	bx	lr
   37d32:	bf00      	nop

00037d34 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   37d34:	2200      	movs	r2, #0
{
   37d36:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   37d38:	4611      	mov	r1, r2
   37d3a:	4b0a      	ldr	r3, [pc, #40]	; (37d64 <ll_radio_state_abort+0x30>)
   37d3c:	2001      	movs	r0, #1
   37d3e:	f7fc f95b 	bl	33ff8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   37d42:	b900      	cbnz	r0, 37d46 <ll_radio_state_abort+0x12>
}
   37d44:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   37d46:	f240 6366 	movw	r3, #1638	; 0x666
   37d4a:	4a07      	ldr	r2, [pc, #28]	; (37d68 <ll_radio_state_abort+0x34>)
   37d4c:	4907      	ldr	r1, [pc, #28]	; (37d6c <ll_radio_state_abort+0x38>)
   37d4e:	4808      	ldr	r0, [pc, #32]	; (37d70 <ll_radio_state_abort+0x3c>)
   37d50:	f012 f9c4 	bl	4a0dc <printk>
   37d54:	4040      	eors	r0, r0
   37d56:	f380 8811 	msr	BASEPRI, r0
   37d5a:	f04f 0003 	mov.w	r0, #3
   37d5e:	df02      	svc	2
}
   37d60:	bd08      	pop	{r3, pc}
   37d62:	bf00      	nop
   37d64:	200008fc 	.word	0x200008fc
   37d68:	00052fb4 	.word	0x00052fb4
   37d6c:	00052ed8 	.word	0x00052ed8
   37d70:	00052d50 	.word	0x00052d50

00037d74 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   37d74:	f030 0302 	bics.w	r3, r0, #2
{
   37d78:	b510      	push	{r4, lr}
   37d7a:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   37d7c:	d002      	beq.n	37d84 <ull_ticker_status_take+0x10>
   37d7e:	680b      	ldr	r3, [r1, #0]
   37d80:	2b02      	cmp	r3, #2
   37d82:	d008      	beq.n	37d96 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   37d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37d8c:	4809      	ldr	r0, [pc, #36]	; (37db4 <ull_ticker_status_take+0x40>)
   37d8e:	f010 fdb9 	bl	48904 <z_impl_k_sem_take>
	return *ret_cb;
   37d92:	6820      	ldr	r0, [r4, #0]
}
   37d94:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   37d96:	f240 6383 	movw	r3, #1667	; 0x683
   37d9a:	4a07      	ldr	r2, [pc, #28]	; (37db8 <ull_ticker_status_take+0x44>)
   37d9c:	4907      	ldr	r1, [pc, #28]	; (37dbc <ull_ticker_status_take+0x48>)
   37d9e:	4808      	ldr	r0, [pc, #32]	; (37dc0 <ull_ticker_status_take+0x4c>)
   37da0:	f012 f99c 	bl	4a0dc <printk>
   37da4:	4040      	eors	r0, r0
   37da6:	f380 8811 	msr	BASEPRI, r0
   37daa:	f04f 0003 	mov.w	r0, #3
   37dae:	df02      	svc	2
   37db0:	e7e8      	b.n	37d84 <ull_ticker_status_take+0x10>
   37db2:	bf00      	nop
   37db4:	20004c58 	.word	0x20004c58
   37db8:	00052fb4 	.word	0x00052fb4
   37dbc:	00053024 	.word	0x00053024
   37dc0:	00052d50 	.word	0x00052d50

00037dc4 <ull_disable_mark>:
	if (!*m) {
   37dc4:	4a04      	ldr	r2, [pc, #16]	; (37dd8 <ull_disable_mark+0x14>)
   37dc6:	6813      	ldr	r3, [r2, #0]
   37dc8:	b10b      	cbz	r3, 37dce <ull_disable_mark+0xa>
}
   37dca:	4618      	mov	r0, r3
   37dcc:	4770      	bx	lr
		*m = param;
   37dce:	4603      	mov	r3, r0
   37dd0:	6010      	str	r0, [r2, #0]
}
   37dd2:	4618      	mov	r0, r3
   37dd4:	4770      	bx	lr
   37dd6:	bf00      	nop
   37dd8:	20004628 	.word	0x20004628

00037ddc <ull_disable_unmark>:
	if (*m && *m == param) {
   37ddc:	4a04      	ldr	r2, [pc, #16]	; (37df0 <ull_disable_unmark+0x14>)
   37dde:	6813      	ldr	r3, [r2, #0]
   37de0:	b123      	cbz	r3, 37dec <ull_disable_unmark+0x10>
   37de2:	4298      	cmp	r0, r3
		*m = NULL;
   37de4:	bf06      	itte	eq
   37de6:	2100      	moveq	r1, #0
   37de8:	6011      	streq	r1, [r2, #0]
	return NULL;
   37dea:	2300      	movne	r3, #0
}
   37dec:	4618      	mov	r0, r3
   37dee:	4770      	bx	lr
   37df0:	20004628 	.word	0x20004628

00037df4 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   37df4:	4b01      	ldr	r3, [pc, #4]	; (37dfc <ull_disable_mark_get+0x8>)
}
   37df6:	6818      	ldr	r0, [r3, #0]
   37df8:	4770      	bx	lr
   37dfa:	bf00      	nop
   37dfc:	20004628 	.word	0x20004628

00037e00 <ull_update_mark>:
	if (!*m) {
   37e00:	4a04      	ldr	r2, [pc, #16]	; (37e14 <ull_update_mark+0x14>)
   37e02:	6813      	ldr	r3, [r2, #0]
   37e04:	b10b      	cbz	r3, 37e0a <ull_update_mark+0xa>
}
   37e06:	4618      	mov	r0, r3
   37e08:	4770      	bx	lr
		*m = param;
   37e0a:	4603      	mov	r3, r0
   37e0c:	6010      	str	r0, [r2, #0]
}
   37e0e:	4618      	mov	r0, r3
   37e10:	4770      	bx	lr
   37e12:	bf00      	nop
   37e14:	2000462c 	.word	0x2000462c

00037e18 <ull_update_unmark>:
	if (*m && *m == param) {
   37e18:	4a04      	ldr	r2, [pc, #16]	; (37e2c <ull_update_unmark+0x14>)
   37e1a:	6813      	ldr	r3, [r2, #0]
   37e1c:	b123      	cbz	r3, 37e28 <ull_update_unmark+0x10>
   37e1e:	4298      	cmp	r0, r3
		*m = NULL;
   37e20:	bf06      	itte	eq
   37e22:	2100      	moveq	r1, #0
   37e24:	6011      	streq	r1, [r2, #0]
	return NULL;
   37e26:	2300      	movne	r3, #0
}
   37e28:	4618      	mov	r0, r3
   37e2a:	4770      	bx	lr
   37e2c:	2000462c 	.word	0x2000462c

00037e30 <ull_update_mark_get>:
	return mark_get(mark_update);
   37e30:	4b01      	ldr	r3, [pc, #4]	; (37e38 <ull_update_mark_get+0x8>)
}
   37e32:	6818      	ldr	r0, [r3, #0]
   37e34:	4770      	bx	lr
   37e36:	bf00      	nop
   37e38:	2000462c 	.word	0x2000462c

00037e3c <ull_disable>:
{
   37e3c:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   37e3e:	6804      	ldr	r4, [r0, #0]
   37e40:	7823      	ldrb	r3, [r4, #0]
{
   37e42:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   37e44:	b35b      	cbz	r3, 37e9e <ull_disable+0x62>
	compiler_barrier();
   37e46:	4605      	mov	r5, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   37e48:	2201      	movs	r2, #1
   37e4a:	4668      	mov	r0, sp
   37e4c:	2100      	movs	r1, #0
   37e4e:	f019 f90e 	bl	5106e <z_impl_k_sem_init>
   37e52:	7823      	ldrb	r3, [r4, #0]
	hdr->disabled_cb = disabled_cb;
   37e54:	4a13      	ldr	r2, [pc, #76]	; (37ea4 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   37e56:	f8c4 d018 	str.w	sp, [r4, #24]
	hdr->disabled_cb = disabled_cb;
   37e5a:	6162      	str	r2, [r4, #20]
	if (!ull_ref_get(hdr)) {
   37e5c:	b1fb      	cbz	r3, 37e9e <ull_disable+0x62>
	mfy.param = lll;
   37e5e:	4812      	ldr	r0, [pc, #72]	; (37ea8 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   37e60:	2200      	movs	r2, #0
   37e62:	4603      	mov	r3, r0
	mfy.param = lll;
   37e64:	6085      	str	r5, [r0, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   37e66:	4611      	mov	r1, r2
   37e68:	2003      	movs	r0, #3
   37e6a:	f7fc f8c5 	bl	33ff8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   37e6e:	b940      	cbnz	r0, 37e82 <ull_disable+0x46>
	return z_impl_k_sem_take(sem, timeout);
   37e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37e78:	4668      	mov	r0, sp
   37e7a:	f010 fd43 	bl	48904 <z_impl_k_sem_take>
}
   37e7e:	b007      	add	sp, #28
   37e80:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   37e82:	f240 63ff 	movw	r3, #1791	; 0x6ff
   37e86:	4a09      	ldr	r2, [pc, #36]	; (37eac <ull_disable+0x70>)
   37e88:	4909      	ldr	r1, [pc, #36]	; (37eb0 <ull_disable+0x74>)
   37e8a:	480a      	ldr	r0, [pc, #40]	; (37eb4 <ull_disable+0x78>)
   37e8c:	f012 f926 	bl	4a0dc <printk>
   37e90:	4040      	eors	r0, r0
   37e92:	f380 8811 	msr	BASEPRI, r0
   37e96:	f04f 0003 	mov.w	r0, #3
   37e9a:	df02      	svc	2
   37e9c:	e7e8      	b.n	37e70 <ull_disable+0x34>
		return -EALREADY;
   37e9e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   37ea2:	e7ec      	b.n	37e7e <ull_disable+0x42>
   37ea4:	00037295 	.word	0x00037295
   37ea8:	2000090c 	.word	0x2000090c
   37eac:	00052fb4 	.word	0x00052fb4
   37eb0:	00052ed8 	.word	0x00052ed8
   37eb4:	00052d50 	.word	0x00052d50

00037eb8 <ull_ticker_stop_with_mark>:
{
   37eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   37eba:	4d20      	ldr	r5, [pc, #128]	; (37f3c <ull_ticker_stop_with_mark+0x84>)
   37ebc:	682b      	ldr	r3, [r5, #0]
{
   37ebe:	b085      	sub	sp, #20
	if (!*m) {
   37ec0:	b363      	cbz	r3, 37f1c <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   37ec2:	4299      	cmp	r1, r3
   37ec4:	d115      	bne.n	37ef2 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   37ec6:	ae03      	add	r6, sp, #12
   37ec8:	460c      	mov	r4, r1
	ret_cb = TICKER_STATUS_BUSY;
   37eca:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   37ecc:	9600      	str	r6, [sp, #0]
   37ece:	4b1c      	ldr	r3, [pc, #112]	; (37f40 <ull_ticker_stop_with_mark+0x88>)
	ret_cb = TICKER_STATUS_BUSY;
   37ed0:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   37ed2:	4617      	mov	r7, r2
   37ed4:	2103      	movs	r1, #3
   37ed6:	4602      	mov	r2, r0
   37ed8:	2000      	movs	r0, #0
   37eda:	f7fd fc4b 	bl	35774 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   37ede:	4631      	mov	r1, r6
   37ee0:	f7ff ff48 	bl	37d74 <ull_ticker_status_take>
	if (ret) {
   37ee4:	4606      	mov	r6, r0
   37ee6:	b140      	cbz	r0, 37efa <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   37ee8:	682b      	ldr	r3, [r5, #0]
   37eea:	b10b      	cbz	r3, 37ef0 <ull_ticker_stop_with_mark+0x38>
   37eec:	429c      	cmp	r4, r3
   37eee:	d017      	beq.n	37f20 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   37ef0:	b304      	cbz	r4, 37f34 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   37ef2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   37ef6:	b005      	add	sp, #20
   37ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   37efa:	4638      	mov	r0, r7
   37efc:	f7ff ff9e 	bl	37e3c <ull_disable>
	if (*m && *m == param) {
   37f00:	682b      	ldr	r3, [r5, #0]
   37f02:	b10b      	cbz	r3, 37f08 <ull_ticker_stop_with_mark+0x50>
   37f04:	429c      	cmp	r4, r3
   37f06:	d011      	beq.n	37f2c <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   37f08:	2c00      	cmp	r4, #0
   37f0a:	d1f2      	bne.n	37ef2 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   37f0c:	2800      	cmp	r0, #0
   37f0e:	d0f2      	beq.n	37ef6 <ull_ticker_stop_with_mark+0x3e>
	return 0;
   37f10:	f110 0f78 	cmn.w	r0, #120	; 0x78
   37f14:	bf08      	it	eq
   37f16:	2000      	moveq	r0, #0
}
   37f18:	b005      	add	sp, #20
   37f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   37f1c:	6029      	str	r1, [r5, #0]
	if (mark != param) {
   37f1e:	e7d2      	b.n	37ec6 <ull_ticker_stop_with_mark+0xe>
		*m = NULL;
   37f20:	2300      	movs	r3, #0
		return -EALREADY;
   37f22:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   37f26:	602b      	str	r3, [r5, #0]
}
   37f28:	b005      	add	sp, #20
   37f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   37f2c:	602e      	str	r6, [r5, #0]
	if (err && (err != -EALREADY)) {
   37f2e:	2800      	cmp	r0, #0
   37f30:	d0e1      	beq.n	37ef6 <ull_ticker_stop_with_mark+0x3e>
   37f32:	e7ed      	b.n	37f10 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   37f34:	f06f 0077 	mvn.w	r0, #119	; 0x77
   37f38:	e7dd      	b.n	37ef6 <ull_ticker_stop_with_mark+0x3e>
   37f3a:	bf00      	nop
   37f3c:	20004628 	.word	0x20004628
   37f40:	00037289 	.word	0x00037289

00037f44 <ull_pdu_rx_alloc_peek>:
{
   37f44:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   37f46:	4a0e      	ldr	r2, [pc, #56]	; (37f80 <ull_pdu_rx_alloc_peek+0x3c>)
   37f48:	7891      	ldrb	r1, [r2, #2]
   37f4a:	78d3      	ldrb	r3, [r2, #3]
	if (last >= first) {
   37f4c:	4299      	cmp	r1, r3
   37f4e:	d80e      	bhi.n	37f6e <ull_pdu_rx_alloc_peek+0x2a>
		return last - first;
   37f50:	1a5c      	subs	r4, r3, r1
   37f52:	b2e4      	uxtb	r4, r4
   37f54:	42a0      	cmp	r0, r4
   37f56:	d807      	bhi.n	37f68 <ull_pdu_rx_alloc_peek+0x24>
	if (first == last) {
   37f58:	4299      	cmp	r1, r3
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   37f5a:	7810      	ldrb	r0, [r2, #0]
   37f5c:	d004      	beq.n	37f68 <ull_pdu_rx_alloc_peek+0x24>
	return *((void **)(fifo + first * size));
   37f5e:	fb01 2200 	mla	r2, r1, r0, r2
}
   37f62:	bc10      	pop	{r4}
   37f64:	6850      	ldr	r0, [r2, #4]
   37f66:	4770      	bx	lr
		return NULL;
   37f68:	2000      	movs	r0, #0
}
   37f6a:	bc10      	pop	{r4}
   37f6c:	4770      	bx	lr
		return count - first + last;
   37f6e:	7854      	ldrb	r4, [r2, #1]
   37f70:	4423      	add	r3, r4
   37f72:	1a5b      	subs	r3, r3, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   37f74:	b2db      	uxtb	r3, r3
   37f76:	4298      	cmp	r0, r3
   37f78:	d8f6      	bhi.n	37f68 <ull_pdu_rx_alloc_peek+0x24>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   37f7a:	7810      	ldrb	r0, [r2, #0]
	if (first == last) {
   37f7c:	e7ef      	b.n	37f5e <ull_pdu_rx_alloc_peek+0x1a>
   37f7e:	bf00      	nop
   37f80:	200007ac 	.word	0x200007ac

00037f84 <ull_pdu_rx_alloc>:
{
   37f84:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
   37f86:	4b0a      	ldr	r3, [pc, #40]	; (37fb0 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   37f88:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   37f8a:	78da      	ldrb	r2, [r3, #3]
   37f8c:	7818      	ldrb	r0, [r3, #0]
   37f8e:	785c      	ldrb	r4, [r3, #1]
   37f90:	428a      	cmp	r2, r1
   37f92:	d00a      	beq.n	37faa <ull_pdu_rx_alloc+0x26>
	_first += 1U;
   37f94:	1c4a      	adds	r2, r1, #1
   37f96:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   37f98:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   37f9c:	4294      	cmp	r4, r2
   37f9e:	bf08      	it	eq
   37fa0:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   37fa2:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   37fa4:	709a      	strb	r2, [r3, #2]
}
   37fa6:	bc10      	pop	{r4}
   37fa8:	4770      	bx	lr
		return NULL;
   37faa:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   37fac:	e7fb      	b.n	37fa6 <ull_pdu_rx_alloc+0x22>
   37fae:	bf00      	nop
   37fb0:	200007ac 	.word	0x200007ac

00037fb4 <ull_rx_put>:
{
   37fb4:	b538      	push	{r3, r4, r5, lr}
   37fb6:	460c      	mov	r4, r1
   37fb8:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   37fba:	f006 fa47 	bl	3e44c <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   37fbe:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   37fc0:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   37fc2:	4a03      	ldr	r2, [pc, #12]	; (37fd0 <ull_rx_put+0x1c>)
   37fc4:	4628      	mov	r0, r5
}
   37fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   37fca:	f7fb bfa1 	b.w	33f10 <memq_enqueue>
   37fce:	bf00      	nop
   37fd0:	20004c50 	.word	0x20004c50

00037fd4 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   37fd4:	2201      	movs	r2, #1
   37fd6:	4611      	mov	r1, r2
   37fd8:	4b01      	ldr	r3, [pc, #4]	; (37fe0 <ull_rx_sched+0xc>)
   37fda:	2000      	movs	r0, #0
   37fdc:	f7fc b80c 	b.w	33ff8 <mayfly_enqueue>
   37fe0:	2000091c 	.word	0x2000091c

00037fe4 <ull_prepare_enqueue>:
{
   37fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   37fe8:	4e16      	ldr	r6, [pc, #88]	; (38044 <ull_prepare_enqueue+0x60>)
{
   37fea:	f89d a020 	ldrb.w	sl, [sp, #32]
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   37fee:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   37ff0:	7877      	ldrb	r7, [r6, #1]
   37ff2:	f896 c002 	ldrb.w	ip, [r6, #2]
	last = last + 1;
   37ff6:	1c65      	adds	r5, r4, #1
   37ff8:	b2ed      	uxtb	r5, r5
		last = 0U;
   37ffa:	42af      	cmp	r7, r5
   37ffc:	bf08      	it	eq
   37ffe:	2500      	moveq	r5, #0
	if (last == first) {
   38000:	45ac      	cmp	ip, r5
   38002:	d01b      	beq.n	3803c <ull_prepare_enqueue+0x58>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   38004:	46b4      	mov	ip, r6
   38006:	f81c 7b04 	ldrb.w	r7, [ip], #4
   3800a:	fb07 c404 	mla	r4, r7, r4, ip
	if (!e) {
   3800e:	b194      	cbz	r4, 38036 <ull_prepare_enqueue+0x52>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   38010:	460f      	mov	r7, r1
   38012:	4680      	mov	r8, r0
   38014:	4611      	mov	r1, r2
   38016:	4620      	mov	r0, r4
   38018:	2210      	movs	r2, #16
   3801a:	4699      	mov	r9, r3
   3801c:	f014 f966 	bl	4c2ec <memcpy>
	e->is_resume = is_resume;
   38020:	7f23      	ldrb	r3, [r4, #28]
	e->prepare_cb = prepare_cb;
   38022:	f8c4 9010 	str.w	r9, [r4, #16]
	e->is_resume = is_resume;
   38026:	f36a 0300 	bfi	r3, sl, #0, #1
	e->is_aborted = 0U;
   3802a:	f36f 0341 	bfc	r3, #1, #1
	e->abort_cb = abort_cb;
   3802e:	e9c4 8705 	strd	r8, r7, [r4, #20]
	e->is_aborted = 0U;
   38032:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   38034:	70f5      	strb	r5, [r6, #3]
}
   38036:	4620      	mov	r0, r4
   38038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   3803c:	2400      	movs	r4, #0
}
   3803e:	4620      	mov	r0, r4
   38040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   38044:	200007c4 	.word	0x200007c4

00038048 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   38048:	4b05      	ldr	r3, [pc, #20]	; (38060 <ull_prepare_dequeue_get+0x18>)
   3804a:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   3804c:	78d9      	ldrb	r1, [r3, #3]
   3804e:	7818      	ldrb	r0, [r3, #0]
   38050:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   38052:	bf1a      	itte	ne
   38054:	3304      	addne	r3, #4
   38056:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   3805a:	2000      	moveq	r0, #0
}
   3805c:	4770      	bx	lr
   3805e:	bf00      	nop
   38060:	200007c4 	.word	0x200007c4

00038064 <ull_prepare_dequeue_iter>:
{
   38064:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   38066:	4b0c      	ldr	r3, [pc, #48]	; (38098 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   38068:	7802      	ldrb	r2, [r0, #0]
   3806a:	785c      	ldrb	r4, [r3, #1]
   3806c:	78dd      	ldrb	r5, [r3, #3]
   3806e:	7819      	ldrb	r1, [r3, #0]
   38070:	4294      	cmp	r4, r2
   38072:	bf9c      	itt	ls
   38074:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   38076:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   38078:	4295      	cmp	r5, r2
   3807a:	d00a      	beq.n	38092 <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
   3807c:	1c53      	adds	r3, r2, #1
   3807e:	b2db      	uxtb	r3, r3
	p = (void *)(fifo + (*idx) * size);
   38080:	4d06      	ldr	r5, [pc, #24]	; (3809c <ull_prepare_dequeue_iter+0x38>)
		i = 0U;
   38082:	429c      	cmp	r4, r3
   38084:	bf08      	it	eq
   38086:	2300      	moveq	r3, #0
	*idx = i;
   38088:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   3808a:	fb02 5001 	mla	r0, r2, r1, r5
}
   3808e:	bc30      	pop	{r4, r5}
   38090:	4770      	bx	lr
		return NULL;
   38092:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   38094:	e7fb      	b.n	3808e <ull_prepare_dequeue_iter+0x2a>
   38096:	bf00      	nop
   38098:	200007c4 	.word	0x200007c4
   3809c:	200007c8 	.word	0x200007c8

000380a0 <ull_prepare_dequeue>:
{
   380a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   380a4:	4c26      	ldr	r4, [pc, #152]	; (38140 <ull_prepare_dequeue+0xa0>)
   380a6:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   380a8:	78e1      	ldrb	r1, [r4, #3]
   380aa:	7823      	ldrb	r3, [r4, #0]
   380ac:	4291      	cmp	r1, r2
   380ae:	d026      	beq.n	380fe <ull_prepare_dequeue+0x5e>
	return (void *)(fifo + first * size);
   380b0:	1d27      	adds	r7, r4, #4
   380b2:	fb02 7203 	mla	r2, r2, r3, r7
	while (next) {
   380b6:	b312      	cbz	r2, 380fe <ull_prepare_dequeue+0x5e>
			mfy.param = next;
   380b8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 38144 <ull_prepare_dequeue+0xa4>
			LL_ASSERT(!ret);
   380bc:	f8df b090 	ldr.w	fp, [pc, #144]	; 38150 <ull_prepare_dequeue+0xb0>
   380c0:	f8df a090 	ldr.w	sl, [pc, #144]	; 38154 <ull_prepare_dequeue+0xb4>
   380c4:	4680      	mov	r8, r0
		uint8_t is_aborted = next->is_aborted;
   380c6:	7f15      	ldrb	r5, [r2, #28]
   380c8:	f3c5 0640 	ubfx	r6, r5, #1, #1
		uint8_t is_resume = next->is_resume;
   380cc:	f005 0501 	and.w	r5, r5, #1
		if (!is_aborted) {
   380d0:	b1be      	cbz	r6, 38102 <ull_prepare_dequeue+0x62>
		MFIFO_DEQUEUE(prep);
   380d2:	78e1      	ldrb	r1, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   380d4:	78a3      	ldrb	r3, [r4, #2]
   380d6:	7822      	ldrb	r2, [r4, #0]
   380d8:	7860      	ldrb	r0, [r4, #1]
	if (_first == last) {
   380da:	4299      	cmp	r1, r3
   380dc:	d00f      	beq.n	380fe <ull_prepare_dequeue+0x5e>
	_first += 1U;
   380de:	3301      	adds	r3, #1
   380e0:	b2db      	uxtb	r3, r3
	if (_first == count) {
   380e2:	4298      	cmp	r0, r3
   380e4:	d025      	beq.n	38132 <ull_prepare_dequeue+0x92>
	if (first == last) {
   380e6:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   380e8:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   380ea:	d008      	beq.n	380fe <ull_prepare_dequeue+0x5e>
	return (void *)(fifo + first * size);
   380ec:	fb03 7202 	mla	r2, r3, r2, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   380f0:	b12a      	cbz	r2, 380fe <ull_prepare_dequeue+0x5e>
   380f2:	2e00      	cmp	r6, #0
   380f4:	d1e7      	bne.n	380c6 <ull_prepare_dequeue+0x26>
   380f6:	b115      	cbz	r5, 380fe <ull_prepare_dequeue+0x5e>
   380f8:	7f13      	ldrb	r3, [r2, #28]
   380fa:	07db      	lsls	r3, r3, #31
   380fc:	d5e3      	bpl.n	380c6 <ull_prepare_dequeue+0x26>
}
   380fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   38102:	f8c9 2008 	str.w	r2, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   38106:	4b0f      	ldr	r3, [pc, #60]	; (38144 <ull_prepare_dequeue+0xa4>)
   38108:	4632      	mov	r2, r6
   3810a:	4631      	mov	r1, r6
   3810c:	4640      	mov	r0, r8
   3810e:	f7fb ff73 	bl	33ff8 <mayfly_enqueue>
			LL_ASSERT(!ret);
   38112:	2800      	cmp	r0, #0
   38114:	d0dd      	beq.n	380d2 <ull_prepare_dequeue+0x32>
   38116:	f240 7376 	movw	r3, #1910	; 0x776
   3811a:	465a      	mov	r2, fp
   3811c:	4651      	mov	r1, sl
   3811e:	480a      	ldr	r0, [pc, #40]	; (38148 <ull_prepare_dequeue+0xa8>)
   38120:	f011 ffdc 	bl	4a0dc <printk>
   38124:	4040      	eors	r0, r0
   38126:	f380 8811 	msr	BASEPRI, r0
   3812a:	f04f 0003 	mov.w	r0, #3
   3812e:	df02      	svc	2
   38130:	e7cf      	b.n	380d2 <ull_prepare_dequeue+0x32>
	*first = _first; /* Write back read-index */
   38132:	2300      	movs	r3, #0
   38134:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   38136:	2900      	cmp	r1, #0
   38138:	d0e1      	beq.n	380fe <ull_prepare_dequeue+0x5e>
	return (void *)(fifo + first * size);
   3813a:	4a04      	ldr	r2, [pc, #16]	; (3814c <ull_prepare_dequeue+0xac>)
   3813c:	e7d9      	b.n	380f2 <ull_prepare_dequeue+0x52>
   3813e:	bf00      	nop
   38140:	200007c4 	.word	0x200007c4
   38144:	2000093c 	.word	0x2000093c
   38148:	00052d50 	.word	0x00052d50
   3814c:	200007c8 	.word	0x200007c8
   38150:	00052fb4 	.word	0x00052fb4
   38154:	00052ed8 	.word	0x00052ed8

00038158 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   38158:	4b06      	ldr	r3, [pc, #24]	; (38174 <ull_event_done_extra_get+0x1c>)
   3815a:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   3815c:	78d8      	ldrb	r0, [r3, #3]
   3815e:	781a      	ldrb	r2, [r3, #0]
   38160:	4288      	cmp	r0, r1
   38162:	d005      	beq.n	38170 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   38164:	fb01 3302 	mla	r3, r1, r2, r3
   38168:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   3816a:	b110      	cbz	r0, 38172 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   3816c:	3020      	adds	r0, #32
   3816e:	4770      	bx	lr
		return NULL;
   38170:	2000      	movs	r0, #0
}
   38172:	4770      	bx	lr
   38174:	2000075c 	.word	0x2000075c

00038178 <ull_event_done>:
{
   38178:	b538      	push	{r3, r4, r5, lr}
	evdone = MFIFO_DEQUEUE(done);
   3817a:	4a13      	ldr	r2, [pc, #76]	; (381c8 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   3817c:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   3817e:	78d4      	ldrb	r4, [r2, #3]
   38180:	7811      	ldrb	r1, [r2, #0]
   38182:	7855      	ldrb	r5, [r2, #1]
   38184:	429c      	cmp	r4, r3
   38186:	d01c      	beq.n	381c2 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   38188:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   3818c:	3301      	adds	r3, #1
   3818e:	b2db      	uxtb	r3, r3
	mem = *((void **)(fifo + _first * size));
   38190:	684c      	ldr	r4, [r1, #4]
		_first = 0U;
   38192:	429d      	cmp	r5, r3
   38194:	bf08      	it	eq
   38196:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   38198:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   3819a:	b184      	cbz	r4, 381be <ull_event_done+0x46>
   3819c:	4603      	mov	r3, r0
	evdone->param = param;
   3819e:	61e3      	str	r3, [r4, #28]
	evdone->hdr.link = NULL;
   381a0:	2500      	movs	r5, #0
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   381a2:	2302      	movs	r3, #2
	link = evdone->hdr.link;
   381a4:	6820      	ldr	r0, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   381a6:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   381a8:	4a08      	ldr	r2, [pc, #32]	; (381cc <ull_event_done+0x54>)
	evdone->hdr.link = NULL;
   381aa:	6025      	str	r5, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   381ac:	4621      	mov	r1, r4
   381ae:	f7fb feaf 	bl	33f10 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   381b2:	2201      	movs	r2, #1
   381b4:	4628      	mov	r0, r5
   381b6:	4611      	mov	r1, r2
   381b8:	4b05      	ldr	r3, [pc, #20]	; (381d0 <ull_event_done+0x58>)
   381ba:	f7fb ff1d 	bl	33ff8 <mayfly_enqueue>
}
   381be:	4620      	mov	r0, r4
   381c0:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   381c2:	2400      	movs	r4, #0
   381c4:	e7fb      	b.n	381be <ull_event_done+0x46>
   381c6:	bf00      	nop
   381c8:	2000075c 	.word	0x2000075c
   381cc:	20004c48 	.word	0x20004c48
   381d0:	2000092c 	.word	0x2000092c

000381d4 <ull_rxfifo_alloc>:
{
   381d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   381d8:	b083      	sub	sp, #12
   381da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   381dc:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
   381e0:	9401      	str	r4, [sp, #4]
   381e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   381e4:	9400      	str	r4, [sp, #0]
   381e6:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   381ea:	b345      	cbz	r5, 3823e <ull_rxfifo_alloc+0x6a>
   381ec:	1e6c      	subs	r4, r5, #1
   381ee:	f893 b000 	ldrb.w	fp, [r3]
   381f2:	b2e4      	uxtb	r4, r4
   381f4:	461d      	mov	r5, r3
   381f6:	4617      	mov	r7, r2
   381f8:	468a      	mov	sl, r1
   381fa:	4680      	mov	r8, r0
	last = last + 1;
   381fc:	f10b 0301 	add.w	r3, fp, #1
   38200:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   38204:	45da      	cmp	sl, fp
   38206:	bf08      	it	eq
   38208:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   3820c:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   3820e:	4648      	mov	r0, r9
   38210:	d015      	beq.n	3823e <ull_rxfifo_alloc+0x6a>
   38212:	f7fb fe19 	bl	33e48 <mem_acquire>
		if (!link) {
   38216:	4606      	mov	r6, r0
   38218:	b188      	cbz	r0, 3823e <ull_rxfifo_alloc+0x6a>
		rx = mem_acquire(mem_free);
   3821a:	9800      	ldr	r0, [sp, #0]
   3821c:	f7fb fe14 	bl	33e48 <mem_acquire>
		if (!rx) {
   38220:	b180      	cbz	r0, 38244 <ull_rxfifo_alloc+0x70>
		link->mem = NULL;
   38222:	2300      	movs	r3, #0
   38224:	6073      	str	r3, [r6, #4]
		rx->link = link;
   38226:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   38228:	782a      	ldrb	r2, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3822a:	9b01      	ldr	r3, [sp, #4]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   3822c:	fb12 f208 	smulbb	r2, r2, r8
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   38230:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   38232:	3c01      	subs	r4, #1
   38234:	b2e4      	uxtb	r4, r4
   38236:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   38238:	f885 b000 	strb.w	fp, [r5]
   3823c:	d1de      	bne.n	381fc <ull_rxfifo_alloc+0x28>
}
   3823e:	b003      	add	sp, #12
   38240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   38244:	4649      	mov	r1, r9
   38246:	4630      	mov	r0, r6
}
   38248:	b003      	add	sp, #12
   3824a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   3824e:	f7fb be15 	b.w	33e7c <mem_release>
   38252:	bf00      	nop

00038254 <ll_init>:
{
   38254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
   38258:	4b9f      	ldr	r3, [pc, #636]	; (384d8 <ll_init+0x284>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   3825a:	4da0      	ldr	r5, [pc, #640]	; (384dc <ll_init+0x288>)
	sem_recv = sem_rx;
   3825c:	6018      	str	r0, [r3, #0]
{
   3825e:	b086      	sub	sp, #24
	cntr_init();
   38260:	f00a fee4 	bl	4302c <cntr_init>
	mayfly_init();
   38264:	f7fb fe74 	bl	33f50 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   38268:	4b9d      	ldr	r3, [pc, #628]	; (384e0 <ll_init+0x28c>)
   3826a:	9305      	str	r3, [sp, #20]
   3826c:	4b9d      	ldr	r3, [pc, #628]	; (384e4 <ll_init+0x290>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   3826e:	4c9e      	ldr	r4, [pc, #632]	; (384e8 <ll_init+0x294>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   38270:	499e      	ldr	r1, [pc, #632]	; (384ec <ll_init+0x298>)
   38272:	9104      	str	r1, [sp, #16]
   38274:	e9cd 3502 	strd	r3, r5, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   38278:	2004      	movs	r0, #4
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   3827a:	2205      	movs	r2, #5
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   3827c:	2502      	movs	r5, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   3827e:	210d      	movs	r1, #13
   38280:	9400      	str	r4, [sp, #0]
   38282:	9101      	str	r1, [sp, #4]
   38284:	4603      	mov	r3, r0
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   38286:	7222      	strb	r2, [r4, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   38288:	7020      	strb	r0, [r4, #0]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   3828a:	4a99      	ldr	r2, [pc, #612]	; (384f0 <ll_init+0x29c>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   3828c:	7425      	strb	r5, [r4, #16]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   3828e:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   38290:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   38292:	f7fd f917 	bl	354c4 <ticker_init>
	LL_ASSERT(!err);
   38296:	2800      	cmp	r0, #0
   38298:	f040 80e0 	bne.w	3845c <ll_init+0x208>
	return z_impl_k_sem_init(sem, initial_count, limit);
   3829c:	2201      	movs	r2, #1
   3829e:	2100      	movs	r1, #0
   382a0:	4894      	ldr	r0, [pc, #592]	; (384f4 <ll_init+0x2a0>)
   382a2:	f018 fee4 	bl	5106e <z_impl_k_sem_init>
	err = lll_init();
   382a6:	f008 fba9 	bl	409fc <lll_init>
	if (err) {
   382aa:	4604      	mov	r4, r0
   382ac:	b118      	cbz	r0, 382b6 <ll_init+0x62>
}
   382ae:	4620      	mov	r0, r4
   382b0:	b006      	add	sp, #24
   382b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	RXFIFO_INIT_ALLOC(done);
   382b6:	4d90      	ldr	r5, [pc, #576]	; (384f8 <ll_init+0x2a4>)
   382b8:	4e90      	ldr	r6, [pc, #576]	; (384fc <ll_init+0x2a8>)
   382ba:	79aa      	ldrb	r2, [r5, #6]
   382bc:	88a9      	ldrh	r1, [r5, #4]
   382be:	8070      	strh	r0, [r6, #2]
   382c0:	462b      	mov	r3, r5
   382c2:	f105 0008 	add.w	r0, r5, #8
   382c6:	f7fb fd91 	bl	33dec <mem_init>
   382ca:	4c8d      	ldr	r4, [pc, #564]	; (38500 <ll_init+0x2ac>)
   382cc:	79a9      	ldrb	r1, [r5, #6]
   382ce:	79ea      	ldrb	r2, [r5, #7]
   382d0:	4623      	mov	r3, r4
   382d2:	440a      	add	r2, r1
   382d4:	1d20      	adds	r0, r4, #4
   382d6:	2108      	movs	r1, #8
   382d8:	f7fb fd88 	bl	33dec <mem_init>
   382dc:	4633      	mov	r3, r6
   382de:	79aa      	ldrb	r2, [r5, #6]
   382e0:	f813 0b04 	ldrb.w	r0, [r3], #4
   382e4:	9300      	str	r3, [sp, #0]
   382e6:	e9cd 5401 	strd	r5, r4, [sp, #4]
   382ea:	9203      	str	r2, [sp, #12]
   382ec:	1cf3      	adds	r3, r6, #3
   382ee:	78b2      	ldrb	r2, [r6, #2]
   382f0:	7871      	ldrb	r1, [r6, #1]
   382f2:	f7ff ff6f 	bl	381d4 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   382f6:	4b83      	ldr	r3, [pc, #524]	; (38504 <ll_init+0x2b0>)
   382f8:	2213      	movs	r2, #19
   382fa:	1d18      	adds	r0, r3, #4
   382fc:	2144      	movs	r1, #68	; 0x44
   382fe:	f7fb fd75 	bl	33dec <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   38302:	4b81      	ldr	r3, [pc, #516]	; (38508 <ll_init+0x2b4>)
   38304:	2219      	movs	r2, #25
   38306:	1d18      	adds	r0, r3, #4
   38308:	2108      	movs	r1, #8
   3830a:	f7fb fd6f 	bl	33dec <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   3830e:	487e      	ldr	r0, [pc, #504]	; (38508 <ll_init+0x2b4>)
   38310:	f7fb fd9a 	bl	33e48 <mem_acquire>
	LL_ASSERT(link);
   38314:	4604      	mov	r4, r0
   38316:	2800      	cmp	r0, #0
   38318:	f000 80ca 	beq.w	384b0 <ll_init+0x25c>
	MEMQ_INIT(ull_rx, link);
   3831c:	4a7b      	ldr	r2, [pc, #492]	; (3850c <ll_init+0x2b8>)
   3831e:	4620      	mov	r0, r4
   38320:	1f11      	subs	r1, r2, #4
   38322:	f7fb fde7 	bl	33ef4 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   38326:	4876      	ldr	r0, [pc, #472]	; (38500 <ll_init+0x2ac>)
   38328:	f7fb fd8e 	bl	33e48 <mem_acquire>
	LL_ASSERT(link);
   3832c:	4604      	mov	r4, r0
   3832e:	2800      	cmp	r0, #0
   38330:	f000 80b0 	beq.w	38494 <ll_init+0x240>
	MEMQ_INIT(ull_done, link);
   38334:	4a76      	ldr	r2, [pc, #472]	; (38510 <ll_init+0x2bc>)
   38336:	4620      	mov	r0, r4
   38338:	1f11      	subs	r1, r2, #4
   3833a:	f7fb fddb 	bl	33ef4 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   3833e:	4872      	ldr	r0, [pc, #456]	; (38508 <ll_init+0x2b4>)
   38340:	f7fb fd82 	bl	33e48 <mem_acquire>
	LL_ASSERT(link);
   38344:	4604      	mov	r4, r0
   38346:	2800      	cmp	r0, #0
   38348:	f000 8096 	beq.w	38478 <ll_init+0x224>
	mem_link_rx.quota_pdu = RX_CNT;
   3834c:	4f71      	ldr	r7, [pc, #452]	; (38514 <ll_init+0x2c0>)
	MEMQ_INIT(ll_rx, link);
   3834e:	4a72      	ldr	r2, [pc, #456]	; (38518 <ll_init+0x2c4>)
   38350:	4d72      	ldr	r5, [pc, #456]	; (3851c <ll_init+0x2c8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   38352:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 38504 <ll_init+0x2b0>
	mem_link_rx.quota_pdu = RX_CNT;
   38356:	46b8      	mov	r8, r7
	MEMQ_INIT(ll_rx, link);
   38358:	4620      	mov	r0, r4
   3835a:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   3835c:	2610      	movs	r6, #16
	MEMQ_INIT(ll_rx, link);
   3835e:	f7fb fdc9 	bl	33ef4 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   38362:	f808 6b04 	strb.w	r6, [r8], #4
		max = mem_link_rx.quota_pdu;
   38366:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   38368:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   3836a:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   3836c:	3401      	adds	r4, #1
   3836e:	b2e4      	uxtb	r4, r4
		last = 0U;
   38370:	42a2      	cmp	r2, r4
   38372:	bf08      	it	eq
   38374:	2400      	moveq	r4, #0
	if (last == first) {
   38376:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   38378:	4640      	mov	r0, r8
   3837a:	d040      	beq.n	383fe <ll_init+0x1aa>
   3837c:	f7fb fd64 	bl	33e48 <mem_acquire>
		if (!link) {
   38380:	4682      	mov	sl, r0
   38382:	b1a0      	cbz	r0, 383ae <ll_init+0x15a>
		rx = mem_acquire(&mem_pdu_rx.free);
   38384:	4648      	mov	r0, r9
   38386:	f7fb fd5f 	bl	33e48 <mem_acquire>
		if (!rx) {
   3838a:	2800      	cmp	r0, #0
   3838c:	f000 809e 	beq.w	384cc <ll_init+0x278>
		rx->link = link;
   38390:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   38394:	78ea      	ldrb	r2, [r5, #3]
   38396:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   38398:	fb02 5303 	mla	r3, r2, r3, r5
   3839c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   3839e:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   383a0:	70ec      	strb	r4, [r5, #3]
   383a2:	3e01      	subs	r6, #1
   383a4:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   383a6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   383aa:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   383ac:	d1dc      	bne.n	38368 <ll_init+0x114>
	err = lll_adv_init();
   383ae:	f008 ff65 	bl	4127c <lll_adv_init>
	if (err) {
   383b2:	4604      	mov	r4, r0
   383b4:	2800      	cmp	r0, #0
   383b6:	f47f af7a 	bne.w	382ae <ll_init+0x5a>
	err = ull_adv_init();
   383ba:	f000 fdb7 	bl	38f2c <ull_adv_init>
	if (err) {
   383be:	4604      	mov	r4, r0
   383c0:	2800      	cmp	r0, #0
   383c2:	f47f af74 	bne.w	382ae <ll_init+0x5a>
	err = lll_scan_init();
   383c6:	f009 fefd 	bl	421c4 <lll_scan_init>
	if (err) {
   383ca:	4604      	mov	r4, r0
   383cc:	2800      	cmp	r0, #0
   383ce:	f47f af6e 	bne.w	382ae <ll_init+0x5a>
	err = ull_scan_init();
   383d2:	f000 fffd 	bl	393d0 <ull_scan_init>
	if (err) {
   383d6:	4604      	mov	r4, r0
   383d8:	2800      	cmp	r0, #0
   383da:	f47f af68 	bne.w	382ae <ll_init+0x5a>
	err = lll_conn_init();
   383de:	f00a f849 	bl	42474 <lll_conn_init>
	if (err) {
   383e2:	4604      	mov	r4, r0
   383e4:	2800      	cmp	r0, #0
   383e6:	f47f af62 	bne.w	382ae <ll_init+0x5a>
	err = ull_conn_init();
   383ea:	f002 f841 	bl	3a470 <ull_conn_init>
	if (err) {
   383ee:	4604      	mov	r4, r0
   383f0:	2800      	cmp	r0, #0
   383f2:	f47f af5c 	bne.w	382ae <ll_init+0x5a>
		ull_filter_reset(true);
   383f6:	2001      	movs	r0, #1
   383f8:	f007 fa54 	bl	3f8a4 <ull_filter_reset>
	return  0;
   383fc:	e757      	b.n	382ae <ll_init+0x5a>
	while (mem_link_rx.quota_pdu &&
   383fe:	783b      	ldrb	r3, [r7, #0]
   38400:	2b00      	cmp	r3, #0
   38402:	d0d4      	beq.n	383ae <ll_init+0x15a>
   38404:	4d46      	ldr	r5, [pc, #280]	; (38520 <ll_init+0x2cc>)
		link = mem_acquire(&mem_link_rx.free);
   38406:	4e40      	ldr	r6, [pc, #256]	; (38508 <ll_init+0x2b4>)
   38408:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   3840a:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 38504 <ll_init+0x2b0>
		link->mem = NULL;
   3840e:	f04f 0900 	mov.w	r9, #0
	last = last + 1;
   38412:	3401      	adds	r4, #1
	if (last == count) {
   38414:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   38416:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   38418:	b2e4      	uxtb	r4, r4
		last = 0U;
   3841a:	42a2      	cmp	r2, r4
   3841c:	bf08      	it	eq
   3841e:	2400      	moveq	r4, #0
	if (last == first) {
   38420:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   38422:	4630      	mov	r0, r6
   38424:	d0c3      	beq.n	383ae <ll_init+0x15a>
   38426:	f7fb fd0f 	bl	33e48 <mem_acquire>
		if (!link) {
   3842a:	4682      	mov	sl, r0
   3842c:	2800      	cmp	r0, #0
   3842e:	d0be      	beq.n	383ae <ll_init+0x15a>
		rx = mem_acquire(&mem_pdu_rx.free);
   38430:	4640      	mov	r0, r8
   38432:	f7fb fd09 	bl	33e48 <mem_acquire>
		if (!rx) {
   38436:	2800      	cmp	r0, #0
   38438:	d048      	beq.n	384cc <ll_init+0x278>
		link->mem = NULL;
   3843a:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   3843e:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   38442:	78ea      	ldrb	r2, [r5, #3]
   38444:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   38446:	fb02 5303 	mla	r3, r2, r3, r5
   3844a:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   3844c:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   3844e:	70ec      	strb	r4, [r5, #3]
   38450:	3b01      	subs	r3, #1
   38452:	b2db      	uxtb	r3, r3
   38454:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   38456:	2b00      	cmp	r3, #0
   38458:	d1db      	bne.n	38412 <ll_init+0x1be>
   3845a:	e7a8      	b.n	383ae <ll_init+0x15a>
	LL_ASSERT(!err);
   3845c:	f240 230d 	movw	r3, #525	; 0x20d
   38460:	4a30      	ldr	r2, [pc, #192]	; (38524 <ll_init+0x2d0>)
   38462:	4931      	ldr	r1, [pc, #196]	; (38528 <ll_init+0x2d4>)
   38464:	4831      	ldr	r0, [pc, #196]	; (3852c <ll_init+0x2d8>)
   38466:	f011 fe39 	bl	4a0dc <printk>
   3846a:	4040      	eors	r0, r0
   3846c:	f380 8811 	msr	BASEPRI, r0
   38470:	f04f 0003 	mov.w	r0, #3
   38474:	df02      	svc	2
   38476:	e711      	b.n	3829c <ll_init+0x48>
	LL_ASSERT(link);
   38478:	f640 0312 	movw	r3, #2066	; 0x812
   3847c:	4a29      	ldr	r2, [pc, #164]	; (38524 <ll_init+0x2d0>)
   3847e:	492c      	ldr	r1, [pc, #176]	; (38530 <ll_init+0x2dc>)
   38480:	482a      	ldr	r0, [pc, #168]	; (3852c <ll_init+0x2d8>)
   38482:	f011 fe2b 	bl	4a0dc <printk>
   38486:	4040      	eors	r0, r0
   38488:	f380 8811 	msr	BASEPRI, r0
   3848c:	f04f 0003 	mov.w	r0, #3
   38490:	df02      	svc	2
   38492:	e75b      	b.n	3834c <ll_init+0xf8>
	LL_ASSERT(link);
   38494:	f640 030a 	movw	r3, #2058	; 0x80a
   38498:	4a22      	ldr	r2, [pc, #136]	; (38524 <ll_init+0x2d0>)
   3849a:	4925      	ldr	r1, [pc, #148]	; (38530 <ll_init+0x2dc>)
   3849c:	4823      	ldr	r0, [pc, #140]	; (3852c <ll_init+0x2d8>)
   3849e:	f011 fe1d 	bl	4a0dc <printk>
   384a2:	4040      	eors	r0, r0
   384a4:	f380 8811 	msr	BASEPRI, r0
   384a8:	f04f 0003 	mov.w	r0, #3
   384ac:	df02      	svc	2
   384ae:	e741      	b.n	38334 <ll_init+0xe0>
	LL_ASSERT(link);
   384b0:	f640 0302 	movw	r3, #2050	; 0x802
   384b4:	4a1b      	ldr	r2, [pc, #108]	; (38524 <ll_init+0x2d0>)
   384b6:	491e      	ldr	r1, [pc, #120]	; (38530 <ll_init+0x2dc>)
   384b8:	481c      	ldr	r0, [pc, #112]	; (3852c <ll_init+0x2d8>)
   384ba:	f011 fe0f 	bl	4a0dc <printk>
   384be:	4040      	eors	r0, r0
   384c0:	f380 8811 	msr	BASEPRI, r0
   384c4:	f04f 0003 	mov.w	r0, #3
   384c8:	df02      	svc	2
   384ca:	e727      	b.n	3831c <ll_init+0xc8>
			mem_release(link, &mem_link_rx.free);
   384cc:	4650      	mov	r0, sl
   384ce:	490e      	ldr	r1, [pc, #56]	; (38508 <ll_init+0x2b4>)
   384d0:	f7fb fcd4 	bl	33e7c <mem_release>
			return;
   384d4:	e76b      	b.n	383ae <ll_init+0x15a>
   384d6:	bf00      	nop
   384d8:	20004c54 	.word	0x20004c54
   384dc:	00043c29 	.word	0x00043c29
   384e0:	00043d6d 	.word	0x00043d6d
   384e4:	20004ee0 	.word	0x20004ee0
   384e8:	20005184 	.word	0x20005184
   384ec:	00043c8d 	.word	0x00043c8d
   384f0:	20004c70 	.word	0x20004c70
   384f4:	20004c58 	.word	0x20004c58
   384f8:	20000684 	.word	0x20000684
   384fc:	2000075c 	.word	0x2000075c
   38500:	20004630 	.word	0x20004630
   38504:	2000472c 	.word	0x2000472c
   38508:	20004660 	.word	0x20004660
   3850c:	20004c50 	.word	0x20004c50
   38510:	20004c48 	.word	0x20004c48
   38514:	2000465c 	.word	0x2000465c
   38518:	20004c40 	.word	0x20004c40
   3851c:	200007ac 	.word	0x200007ac
   38520:	20000774 	.word	0x20000774
   38524:	00052fb4 	.word	0x00052fb4
   38528:	00052ff0 	.word	0x00052ff0
   3852c:	00052d50 	.word	0x00052d50
   38530:	00053350 	.word	0x00053350

00038534 <ll_reset>:
{
   38534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38538:	b08b      	sub	sp, #44	; 0x2c
	err = ull_adv_reset();
   3853a:	f000 fcf9 	bl	38f30 <ull_adv_reset>
	LL_ASSERT(!err);
   3853e:	2800      	cmp	r0, #0
   38540:	f040 80ec 	bne.w	3871c <ll_reset+0x1e8>
	err = ull_scan_reset();
   38544:	f000 ffcc 	bl	394e0 <ull_scan_reset>
	LL_ASSERT(!err);
   38548:	2800      	cmp	r0, #0
   3854a:	f040 80f9 	bne.w	38740 <ll_reset+0x20c>
	err = ull_conn_reset();
   3854e:	f001 ff91 	bl	3a474 <ull_conn_reset>
	LL_ASSERT(!err);
   38552:	2800      	cmp	r0, #0
   38554:	f040 8106 	bne.w	38764 <ll_reset+0x230>
	MFIFO_INIT(tx_ack);
   38558:	4bb1      	ldr	r3, [pc, #708]	; (38820 <ll_reset+0x2ec>)
	MFIFO_INIT(pdu_rx_free);
   3855a:	4db2      	ldr	r5, [pc, #712]	; (38824 <ll_reset+0x2f0>)
	MFIFO_INIT(ll_pdu_rx_free);
   3855c:	4fb2      	ldr	r7, [pc, #712]	; (38828 <ll_reset+0x2f4>)
	MFIFO_INIT(tx_ack);
   3855e:	2400      	movs	r4, #0
   38560:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   38562:	4620      	mov	r0, r4
   38564:	f007 f99e 	bl	3f8a4 <ull_filter_reset>
	MFIFO_INIT(prep);
   38568:	4bb0      	ldr	r3, [pc, #704]	; (3882c <ll_reset+0x2f8>)
	MFIFO_INIT(pdu_rx_free);
   3856a:	806c      	strh	r4, [r5, #2]
	MFIFO_INIT(prep);
   3856c:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   3856e:	807c      	strh	r4, [r7, #2]
   38570:	ae04      	add	r6, sp, #16
   38572:	4621      	mov	r1, r4
   38574:	2201      	movs	r2, #1
   38576:	4630      	mov	r0, r6
   38578:	f018 fd79 	bl	5106e <z_impl_k_sem_init>
		mfy.param = &sem;
   3857c:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 38864 <ll_reset+0x330>
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   38580:	4622      	mov	r2, r4
   38582:	4663      	mov	r3, ip
   38584:	4621      	mov	r1, r4
   38586:	2003      	movs	r0, #3
		mfy.param = &sem;
   38588:	f8cc 6008 	str.w	r6, [ip, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   3858c:	f7fb fd34 	bl	33ff8 <mayfly_enqueue>
		LL_ASSERT(!retval);
   38590:	2800      	cmp	r0, #0
   38592:	f040 8103 	bne.w	3879c <ll_reset+0x268>
	return z_impl_k_sem_take(sem, timeout);
   38596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3859a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3859e:	4630      	mov	r0, r6
   385a0:	f010 f9b0 	bl	48904 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   385a4:	f000 fd76 	bl	39094 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   385a8:	2800      	cmp	r0, #0
   385aa:	f040 80e9 	bne.w	38780 <ll_reset+0x24c>
	RXFIFO_INIT_ALLOC(done);
   385ae:	4ca0      	ldr	r4, [pc, #640]	; (38830 <ll_reset+0x2fc>)
   385b0:	4ea0      	ldr	r6, [pc, #640]	; (38834 <ll_reset+0x300>)
   385b2:	79a2      	ldrb	r2, [r4, #6]
   385b4:	88a1      	ldrh	r1, [r4, #4]
   385b6:	f8df 828c 	ldr.w	r8, [pc, #652]	; 38844 <ll_reset+0x310>
   385ba:	f04f 0c00 	mov.w	ip, #0
   385be:	f8a6 c002 	strh.w	ip, [r6, #2]
   385c2:	4623      	mov	r3, r4
   385c4:	f104 0008 	add.w	r0, r4, #8
   385c8:	f7fb fc10 	bl	33dec <mem_init>
   385cc:	79a1      	ldrb	r1, [r4, #6]
   385ce:	79e2      	ldrb	r2, [r4, #7]
   385d0:	4643      	mov	r3, r8
   385d2:	440a      	add	r2, r1
   385d4:	f108 0004 	add.w	r0, r8, #4
   385d8:	2108      	movs	r1, #8
   385da:	f7fb fc07 	bl	33dec <mem_init>
   385de:	4633      	mov	r3, r6
   385e0:	79a2      	ldrb	r2, [r4, #6]
   385e2:	f813 0b04 	ldrb.w	r0, [r3], #4
   385e6:	9300      	str	r3, [sp, #0]
   385e8:	e9cd 4801 	strd	r4, r8, [sp, #4]
   385ec:	9203      	str	r2, [sp, #12]
   385ee:	1cf3      	adds	r3, r6, #3
   385f0:	78b2      	ldrb	r2, [r6, #2]
   385f2:	7871      	ldrb	r1, [r6, #1]
   385f4:	f7ff fdee 	bl	381d4 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   385f8:	4b8f      	ldr	r3, [pc, #572]	; (38838 <ll_reset+0x304>)
   385fa:	2213      	movs	r2, #19
   385fc:	1d18      	adds	r0, r3, #4
   385fe:	2144      	movs	r1, #68	; 0x44
   38600:	f7fb fbf4 	bl	33dec <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   38604:	4b8d      	ldr	r3, [pc, #564]	; (3883c <ll_reset+0x308>)
   38606:	2219      	movs	r2, #25
   38608:	1d18      	adds	r0, r3, #4
   3860a:	2108      	movs	r1, #8
   3860c:	f7fb fbee 	bl	33dec <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   38610:	488a      	ldr	r0, [pc, #552]	; (3883c <ll_reset+0x308>)
   38612:	f7fb fc19 	bl	33e48 <mem_acquire>
	LL_ASSERT(link);
   38616:	4604      	mov	r4, r0
   38618:	2800      	cmp	r0, #0
   3861a:	f000 80db 	beq.w	387d4 <ll_reset+0x2a0>
	MEMQ_INIT(ull_rx, link);
   3861e:	4a88      	ldr	r2, [pc, #544]	; (38840 <ll_reset+0x30c>)
   38620:	4620      	mov	r0, r4
   38622:	1f11      	subs	r1, r2, #4
   38624:	f7fb fc66 	bl	33ef4 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   38628:	4886      	ldr	r0, [pc, #536]	; (38844 <ll_reset+0x310>)
   3862a:	f7fb fc0d 	bl	33e48 <mem_acquire>
	LL_ASSERT(link);
   3862e:	4604      	mov	r4, r0
   38630:	2800      	cmp	r0, #0
   38632:	f000 80dd 	beq.w	387f0 <ll_reset+0x2bc>
	MEMQ_INIT(ull_done, link);
   38636:	4a84      	ldr	r2, [pc, #528]	; (38848 <ll_reset+0x314>)
   38638:	4620      	mov	r0, r4
   3863a:	1f11      	subs	r1, r2, #4
   3863c:	f7fb fc5a 	bl	33ef4 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   38640:	487e      	ldr	r0, [pc, #504]	; (3883c <ll_reset+0x308>)
   38642:	f7fb fc01 	bl	33e48 <mem_acquire>
	LL_ASSERT(link);
   38646:	4604      	mov	r4, r0
   38648:	2800      	cmp	r0, #0
   3864a:	f000 80b5 	beq.w	387b8 <ll_reset+0x284>
	mem_link_rx.quota_pdu = RX_CNT;
   3864e:	f8df 8218 	ldr.w	r8, [pc, #536]	; 38868 <ll_reset+0x334>
	MEMQ_INIT(ll_rx, link);
   38652:	4a7e      	ldr	r2, [pc, #504]	; (3884c <ll_reset+0x318>)
		rx = mem_acquire(&mem_pdu_rx.free);
   38654:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 38838 <ll_reset+0x304>
	mem_link_rx.quota_pdu = RX_CNT;
   38658:	46c1      	mov	r9, r8
	MEMQ_INIT(ll_rx, link);
   3865a:	4620      	mov	r0, r4
   3865c:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   3865e:	2610      	movs	r6, #16
	MEMQ_INIT(ll_rx, link);
   38660:	f7fb fc48 	bl	33ef4 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   38664:	f809 6b04 	strb.w	r6, [r9], #4
		max = mem_link_rx.quota_pdu;
   38668:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   3866a:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   3866c:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   3866e:	3401      	adds	r4, #1
   38670:	b2e4      	uxtb	r4, r4
		last = 0U;
   38672:	42a2      	cmp	r2, r4
   38674:	bf08      	it	eq
   38676:	2400      	moveq	r4, #0
	if (last == first) {
   38678:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   3867a:	4648      	mov	r0, r9
   3867c:	d01d      	beq.n	386ba <ll_reset+0x186>
   3867e:	f7fb fbe3 	bl	33e48 <mem_acquire>
		if (!link) {
   38682:	4683      	mov	fp, r0
   38684:	b1b0      	cbz	r0, 386b4 <ll_reset+0x180>
		rx = mem_acquire(&mem_pdu_rx.free);
   38686:	4650      	mov	r0, sl
   38688:	f7fb fbde 	bl	33e48 <mem_acquire>
		if (!rx) {
   3868c:	2800      	cmp	r0, #0
   3868e:	f000 80bd 	beq.w	3880c <ll_reset+0x2d8>
		rx->link = link;
   38692:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   38696:	78ea      	ldrb	r2, [r5, #3]
   38698:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   3869a:	fb02 5303 	mla	r3, r2, r3, r5
   3869e:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   386a0:	f898 3000 	ldrb.w	r3, [r8]
	*last = idx; /* Commit: Update write index */
   386a4:	70ec      	strb	r4, [r5, #3]
   386a6:	3e01      	subs	r6, #1
   386a8:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   386aa:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   386ae:	f888 3000 	strb.w	r3, [r8]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   386b2:	d1da      	bne.n	3866a <ll_reset+0x136>
}
   386b4:	b00b      	add	sp, #44	; 0x2c
   386b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (mem_link_rx.quota_pdu &&
   386ba:	f898 3000 	ldrb.w	r3, [r8]
   386be:	2b00      	cmp	r3, #0
   386c0:	d0f8      	beq.n	386b4 <ll_reset+0x180>
   386c2:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
   386c4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 3883c <ll_reset+0x308>
		rx = mem_acquire(&mem_pdu_rx.free);
   386c8:	4e5b      	ldr	r6, [pc, #364]	; (38838 <ll_reset+0x304>)
		link->mem = NULL;
   386ca:	2500      	movs	r5, #0
	last = last + 1;
   386cc:	3401      	adds	r4, #1
	if (last == count) {
   386ce:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   386d0:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   386d2:	b2e4      	uxtb	r4, r4
		last = 0U;
   386d4:	42a2      	cmp	r2, r4
   386d6:	bf08      	it	eq
   386d8:	2400      	moveq	r4, #0
	if (last == first) {
   386da:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   386dc:	4648      	mov	r0, r9
   386de:	d0e9      	beq.n	386b4 <ll_reset+0x180>
   386e0:	f7fb fbb2 	bl	33e48 <mem_acquire>
		if (!link) {
   386e4:	4682      	mov	sl, r0
   386e6:	2800      	cmp	r0, #0
   386e8:	d0e4      	beq.n	386b4 <ll_reset+0x180>
		rx = mem_acquire(&mem_pdu_rx.free);
   386ea:	4630      	mov	r0, r6
   386ec:	f7fb fbac 	bl	33e48 <mem_acquire>
		if (!rx) {
   386f0:	2800      	cmp	r0, #0
   386f2:	f000 8090 	beq.w	38816 <ll_reset+0x2e2>
		link->mem = NULL;
   386f6:	f8ca 5004 	str.w	r5, [sl, #4]
		rx->link = link;
   386fa:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   386fe:	78fa      	ldrb	r2, [r7, #3]
   38700:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   38702:	fb02 7303 	mla	r3, r2, r3, r7
   38706:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   38708:	f898 3000 	ldrb.w	r3, [r8]
	*last = idx; /* Commit: Update write index */
   3870c:	70fc      	strb	r4, [r7, #3]
   3870e:	3b01      	subs	r3, #1
   38710:	b2db      	uxtb	r3, r3
   38712:	f888 3000 	strb.w	r3, [r8]
	while (mem_link_rx.quota_pdu &&
   38716:	2b00      	cmp	r3, #0
   38718:	d1d8      	bne.n	386cc <ll_reset+0x198>
   3871a:	e7cb      	b.n	386b4 <ll_reset+0x180>
	LL_ASSERT(!err);
   3871c:	f240 23ad 	movw	r3, #685	; 0x2ad
   38720:	4a4b      	ldr	r2, [pc, #300]	; (38850 <ll_reset+0x31c>)
   38722:	494c      	ldr	r1, [pc, #304]	; (38854 <ll_reset+0x320>)
   38724:	484c      	ldr	r0, [pc, #304]	; (38858 <ll_reset+0x324>)
   38726:	f011 fcd9 	bl	4a0dc <printk>
   3872a:	4040      	eors	r0, r0
   3872c:	f380 8811 	msr	BASEPRI, r0
   38730:	f04f 0003 	mov.w	r0, #3
   38734:	df02      	svc	2
	err = ull_scan_reset();
   38736:	f000 fed3 	bl	394e0 <ull_scan_reset>
	LL_ASSERT(!err);
   3873a:	2800      	cmp	r0, #0
   3873c:	f43f af07 	beq.w	3854e <ll_reset+0x1a>
   38740:	f240 23b3 	movw	r3, #691	; 0x2b3
   38744:	4a42      	ldr	r2, [pc, #264]	; (38850 <ll_reset+0x31c>)
   38746:	4943      	ldr	r1, [pc, #268]	; (38854 <ll_reset+0x320>)
   38748:	4843      	ldr	r0, [pc, #268]	; (38858 <ll_reset+0x324>)
   3874a:	f011 fcc7 	bl	4a0dc <printk>
   3874e:	4040      	eors	r0, r0
   38750:	f380 8811 	msr	BASEPRI, r0
   38754:	f04f 0003 	mov.w	r0, #3
   38758:	df02      	svc	2
	err = ull_conn_reset();
   3875a:	f001 fe8b 	bl	3a474 <ull_conn_reset>
	LL_ASSERT(!err);
   3875e:	2800      	cmp	r0, #0
   38760:	f43f aefa 	beq.w	38558 <ll_reset+0x24>
   38764:	f240 23de 	movw	r3, #734	; 0x2de
   38768:	4a39      	ldr	r2, [pc, #228]	; (38850 <ll_reset+0x31c>)
   3876a:	493a      	ldr	r1, [pc, #232]	; (38854 <ll_reset+0x320>)
   3876c:	483a      	ldr	r0, [pc, #232]	; (38858 <ll_reset+0x324>)
   3876e:	f011 fcb5 	bl	4a0dc <printk>
   38772:	4040      	eors	r0, r0
   38774:	f380 8811 	msr	BASEPRI, r0
   38778:	f04f 0003 	mov.w	r0, #3
   3877c:	df02      	svc	2
   3877e:	e6eb      	b.n	38558 <ll_reset+0x24>
	LL_ASSERT(!err);
   38780:	f240 331a 	movw	r3, #794	; 0x31a
   38784:	4a32      	ldr	r2, [pc, #200]	; (38850 <ll_reset+0x31c>)
   38786:	4933      	ldr	r1, [pc, #204]	; (38854 <ll_reset+0x320>)
   38788:	4833      	ldr	r0, [pc, #204]	; (38858 <ll_reset+0x324>)
   3878a:	f011 fca7 	bl	4a0dc <printk>
   3878e:	4040      	eors	r0, r0
   38790:	f380 8811 	msr	BASEPRI, r0
   38794:	f04f 0003 	mov.w	r0, #3
   38798:	df02      	svc	2
   3879a:	e708      	b.n	385ae <ll_reset+0x7a>
		LL_ASSERT(!retval);
   3879c:	f240 330d 	movw	r3, #781	; 0x30d
   387a0:	4a2b      	ldr	r2, [pc, #172]	; (38850 <ll_reset+0x31c>)
   387a2:	492e      	ldr	r1, [pc, #184]	; (3885c <ll_reset+0x328>)
   387a4:	482c      	ldr	r0, [pc, #176]	; (38858 <ll_reset+0x324>)
   387a6:	f011 fc99 	bl	4a0dc <printk>
   387aa:	4040      	eors	r0, r0
   387ac:	f380 8811 	msr	BASEPRI, r0
   387b0:	f04f 0003 	mov.w	r0, #3
   387b4:	df02      	svc	2
   387b6:	e6ee      	b.n	38596 <ll_reset+0x62>
	LL_ASSERT(link);
   387b8:	f640 0312 	movw	r3, #2066	; 0x812
   387bc:	4a24      	ldr	r2, [pc, #144]	; (38850 <ll_reset+0x31c>)
   387be:	4928      	ldr	r1, [pc, #160]	; (38860 <ll_reset+0x32c>)
   387c0:	4825      	ldr	r0, [pc, #148]	; (38858 <ll_reset+0x324>)
   387c2:	f011 fc8b 	bl	4a0dc <printk>
   387c6:	4040      	eors	r0, r0
   387c8:	f380 8811 	msr	BASEPRI, r0
   387cc:	f04f 0003 	mov.w	r0, #3
   387d0:	df02      	svc	2
   387d2:	e73c      	b.n	3864e <ll_reset+0x11a>
	LL_ASSERT(link);
   387d4:	f640 0302 	movw	r3, #2050	; 0x802
   387d8:	4a1d      	ldr	r2, [pc, #116]	; (38850 <ll_reset+0x31c>)
   387da:	4921      	ldr	r1, [pc, #132]	; (38860 <ll_reset+0x32c>)
   387dc:	481e      	ldr	r0, [pc, #120]	; (38858 <ll_reset+0x324>)
   387de:	f011 fc7d 	bl	4a0dc <printk>
   387e2:	4040      	eors	r0, r0
   387e4:	f380 8811 	msr	BASEPRI, r0
   387e8:	f04f 0003 	mov.w	r0, #3
   387ec:	df02      	svc	2
   387ee:	e716      	b.n	3861e <ll_reset+0xea>
	LL_ASSERT(link);
   387f0:	f640 030a 	movw	r3, #2058	; 0x80a
   387f4:	4a16      	ldr	r2, [pc, #88]	; (38850 <ll_reset+0x31c>)
   387f6:	491a      	ldr	r1, [pc, #104]	; (38860 <ll_reset+0x32c>)
   387f8:	4817      	ldr	r0, [pc, #92]	; (38858 <ll_reset+0x324>)
   387fa:	f011 fc6f 	bl	4a0dc <printk>
   387fe:	4040      	eors	r0, r0
   38800:	f380 8811 	msr	BASEPRI, r0
   38804:	f04f 0003 	mov.w	r0, #3
   38808:	df02      	svc	2
   3880a:	e714      	b.n	38636 <ll_reset+0x102>
			mem_release(link, &mem_link_rx.free);
   3880c:	4658      	mov	r0, fp
   3880e:	490b      	ldr	r1, [pc, #44]	; (3883c <ll_reset+0x308>)
   38810:	f7fb fb34 	bl	33e7c <mem_release>
			return;
   38814:	e74e      	b.n	386b4 <ll_reset+0x180>
			mem_release(link, &mem_link_rx.free);
   38816:	4650      	mov	r0, sl
   38818:	4908      	ldr	r1, [pc, #32]	; (3883c <ll_reset+0x308>)
   3881a:	f7fb fb2f 	bl	33e7c <mem_release>
			return;
   3881e:	e749      	b.n	386b4 <ll_reset+0x180>
   38820:	200008c8 	.word	0x200008c8
   38824:	200007ac 	.word	0x200007ac
   38828:	20000774 	.word	0x20000774
   3882c:	200007c4 	.word	0x200007c4
   38830:	20000684 	.word	0x20000684
   38834:	2000075c 	.word	0x2000075c
   38838:	2000472c 	.word	0x2000472c
   3883c:	20004660 	.word	0x20004660
   38840:	20004c50 	.word	0x20004c50
   38844:	20004630 	.word	0x20004630
   38848:	20004c48 	.word	0x20004c48
   3884c:	20004c40 	.word	0x20004c40
   38850:	00052fb4 	.word	0x00052fb4
   38854:	00052ff0 	.word	0x00052ff0
   38858:	00052d50 	.word	0x00052d50
   3885c:	00052ee0 	.word	0x00052ee0
   38860:	00053350 	.word	0x00053350
   38864:	200008ec 	.word	0x200008ec
   38868:	2000465c 	.word	0x2000465c

0003886c <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   3886c:	b500      	push	{lr}
   3886e:	b083      	sub	sp, #12
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   38870:	2300      	movs	r3, #0
   38872:	e9cd 3300 	strd	r3, r3, [sp]
   38876:	9b04      	ldr	r3, [sp, #16]
   38878:	f008 faca 	bl	40e10 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   3887c:	b003      	add	sp, #12
   3887e:	f85d fb04 	ldr.w	pc, [sp], #4
   38882:	bf00      	nop

00038884 <lll_resume>:

void lll_resume(void *param)
{
   38884:	b510      	push	{r4, lr}
   38886:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   38888:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   3888a:	691a      	ldr	r2, [r3, #16]
   3888c:	6999      	ldr	r1, [r3, #24]
{
   3888e:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   38890:	2401      	movs	r4, #1
   38892:	4020      	ands	r0, r4
   38894:	9401      	str	r4, [sp, #4]
   38896:	9000      	str	r0, [sp, #0]
   38898:	6958      	ldr	r0, [r3, #20]
   3889a:	f008 fab9 	bl	40e10 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   3889e:	b108      	cbz	r0, 388a4 <lll_resume+0x20>
   388a0:	3077      	adds	r0, #119	; 0x77
   388a2:	d101      	bne.n	388a8 <lll_resume+0x24>
}
   388a4:	b002      	add	sp, #8
   388a6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   388a8:	234f      	movs	r3, #79	; 0x4f
   388aa:	4a06      	ldr	r2, [pc, #24]	; (388c4 <lll_resume+0x40>)
   388ac:	4906      	ldr	r1, [pc, #24]	; (388c8 <lll_resume+0x44>)
   388ae:	4807      	ldr	r0, [pc, #28]	; (388cc <lll_resume+0x48>)
   388b0:	f011 fc14 	bl	4a0dc <printk>
   388b4:	4040      	eors	r0, r0
   388b6:	f380 8811 	msr	BASEPRI, r0
   388ba:	f04f 0003 	mov.w	r0, #3
   388be:	df02      	svc	2
}
   388c0:	b002      	add	sp, #8
   388c2:	bd10      	pop	{r4, pc}
   388c4:	00053044 	.word	0x00053044
   388c8:	00053088 	.word	0x00053088
   388cc:	00052d50 	.word	0x00052d50

000388d0 <disabled_cb>:
{
   388d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   388d2:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   388d4:	6e2e      	ldr	r6, [r5, #96]	; 0x60
{
   388d6:	4607      	mov	r7, r0
	LL_ASSERT(adv->link_cc_free);
   388d8:	b1d6      	cbz	r6, 38910 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   388da:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   388dc:	2300      	movs	r3, #0
   388de:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   388e0:	b34c      	cbz	r4, 38936 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   388e2:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
   388e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   388e8:	2216      	movs	r2, #22
	adv->node_rx_cc_free = NULL;
   388ea:	6669      	str	r1, [r5, #100]	; 0x64
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   388ec:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   388f0:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
   388f2:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   388f4:	221e      	movs	r2, #30
   388f6:	f013 fd04 	bl	4c302 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   388fa:	233c      	movs	r3, #60	; 0x3c
	rx->hdr.rx_ftr.param = param;
   388fc:	60a7      	str	r7, [r4, #8]
	ll_rx_put(link, rx);
   388fe:	4630      	mov	r0, r6
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   38900:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
   38902:	4621      	mov	r1, r4
   38904:	f7ff f998 	bl	37c38 <ll_rx_put>
}
   38908:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   3890c:	f7ff b99e 	b.w	37c4c <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   38910:	f640 131a 	movw	r3, #2330	; 0x91a
   38914:	4a0f      	ldr	r2, [pc, #60]	; (38954 <disabled_cb+0x84>)
   38916:	4910      	ldr	r1, [pc, #64]	; (38958 <disabled_cb+0x88>)
   38918:	4810      	ldr	r0, [pc, #64]	; (3895c <disabled_cb+0x8c>)
   3891a:	f011 fbdf 	bl	4a0dc <printk>
   3891e:	4040      	eors	r0, r0
   38920:	f380 8811 	msr	BASEPRI, r0
   38924:	f04f 0003 	mov.w	r0, #3
   38928:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   3892a:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   3892c:	6e2e      	ldr	r6, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   3892e:	2300      	movs	r3, #0
   38930:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   38932:	2c00      	cmp	r4, #0
   38934:	d1d5      	bne.n	388e2 <disabled_cb+0x12>
   38936:	f640 131e 	movw	r3, #2334	; 0x91e
   3893a:	4a06      	ldr	r2, [pc, #24]	; (38954 <disabled_cb+0x84>)
   3893c:	4908      	ldr	r1, [pc, #32]	; (38960 <disabled_cb+0x90>)
   3893e:	4807      	ldr	r0, [pc, #28]	; (3895c <disabled_cb+0x8c>)
   38940:	f011 fbcc 	bl	4a0dc <printk>
   38944:	4040      	eors	r0, r0
   38946:	f380 8811 	msr	BASEPRI, r0
   3894a:	f04f 0003 	mov.w	r0, #3
   3894e:	df02      	svc	2
   38950:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   38952:	e7c6      	b.n	388e2 <disabled_cb+0x12>
   38954:	000530c4 	.word	0x000530c4
   38958:	00053104 	.word	0x00053104
   3895c:	00052d50 	.word	0x00052d50
   38960:	00053118 	.word	0x00053118

00038964 <adv_time_get.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   38964:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   38966:	7804      	ldrb	r4, [r0, #0]
   38968:	f004 040f 	and.w	r4, r4, #15
   3896c:	1e53      	subs	r3, r2, #1
   3896e:	2c02      	cmp	r4, #2
   38970:	b29b      	uxth	r3, r3
   38972:	d01f      	beq.n	389b4 <adv_time_get.isra.0+0x50>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   38974:	2c01      	cmp	r4, #1
   38976:	d009      	beq.n	3898c <adv_time_get.isra.0+0x28>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   38978:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   3897a:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   3897c:	b18c      	cbz	r4, 389a2 <adv_time_get.isra.0+0x3e>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   3897e:	2c06      	cmp	r4, #6
   38980:	d00f      	beq.n	389a2 <adv_time_get.isra.0+0x3e>
   38982:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   38986:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
   3898a:	e003      	b.n	38994 <adv_time_get.isra.0+0x30>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   3898c:	f44f 6287 	mov.w	r2, #1080	; 0x438
   38990:	f240 2116 	movw	r1, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
   38994:	fb03 2301 	mla	r3, r3, r1, r2
   38998:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   3899c:	4018      	ands	r0, r3
}
   3899e:	bc10      	pop	{r4}
   389a0:	4770      	bx	lr
				adv_size += pdu->len;
   389a2:	7840      	ldrb	r0, [r0, #1]
   389a4:	3010      	adds	r0, #16
				time_us += scan_req_us + EVENT_IFS_MAX_US +
   389a6:	00c0      	lsls	r0, r0, #3
   389a8:	f501 715c 	add.w	r1, r1, #880	; 0x370
   389ac:	180a      	adds	r2, r1, r0
   389ae:	f500 71b3 	add.w	r1, r0, #358	; 0x166
   389b2:	e7ef      	b.n	38994 <adv_time_get.isra.0+0x30>
			adv_size += pdu->len;
   389b4:	7841      	ldrb	r1, [r0, #1]
}
   389b6:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   389b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   389bc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   389c0:	0058      	lsls	r0, r3, #1
   389c2:	f101 0310 	add.w	r3, r1, #16
   389c6:	f500 70c8 	add.w	r0, r0, #400	; 0x190
   389ca:	00db      	lsls	r3, r3, #3
   389cc:	fb03 0002 	mla	r0, r3, r2, r0
   389d0:	b280      	uxth	r0, r0
}
   389d2:	4770      	bx	lr

000389d4 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   389d4:	b100      	cbz	r0, 389d8 <ticker_stop_op_cb+0x4>
   389d6:	4770      	bx	lr
{
   389d8:	b538      	push	{r3, r4, r5, lr}
	mfy.param = param;
   389da:	4d0c      	ldr	r5, [pc, #48]	; (38a0c <ticker_stop_op_cb+0x38>)
   389dc:	460c      	mov	r4, r1
   389de:	4602      	mov	r2, r0
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   389e0:	462b      	mov	r3, r5
   389e2:	2101      	movs	r1, #1
   389e4:	2002      	movs	r0, #2
	mfy.param = param;
   389e6:	60ac      	str	r4, [r5, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   389e8:	f7fb fb06 	bl	33ff8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   389ec:	b900      	cbnz	r0, 389f0 <ticker_stop_op_cb+0x1c>
}
   389ee:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!ret);
   389f0:	f640 03ee 	movw	r3, #2286	; 0x8ee
   389f4:	4a06      	ldr	r2, [pc, #24]	; (38a10 <ticker_stop_op_cb+0x3c>)
   389f6:	4907      	ldr	r1, [pc, #28]	; (38a14 <ticker_stop_op_cb+0x40>)
   389f8:	4807      	ldr	r0, [pc, #28]	; (38a18 <ticker_stop_op_cb+0x44>)
   389fa:	f011 fb6f 	bl	4a0dc <printk>
   389fe:	4040      	eors	r0, r0
   38a00:	f380 8811 	msr	BASEPRI, r0
   38a04:	f04f 0003 	mov.w	r0, #3
   38a08:	df02      	svc	2
}
   38a0a:	bd38      	pop	{r3, r4, r5, pc}
   38a0c:	2000095c 	.word	0x2000095c
   38a10:	000530c4 	.word	0x000530c4
   38a14:	00052ed8 	.word	0x00052ed8
   38a18:	00052d50 	.word	0x00052d50

00038a1c <adv_disable>:
{
   38a1c:	b538      	push	{r3, r4, r5, lr}
   38a1e:	4603      	mov	r3, r0
   38a20:	f813 2b1c 	ldrb.w	r2, [r3], #28
	if (ull_ref_get(hdr)) {
   38a24:	2a00      	cmp	r2, #0
   38a26:	d02b      	beq.n	38a80 <adv_disable+0x64>
		mfy.param = &adv->lll;
   38a28:	4d18      	ldr	r5, [pc, #96]	; (38a8c <adv_disable+0x70>)
		LL_ASSERT(!hdr->disabled_cb);
   38a2a:	6942      	ldr	r2, [r0, #20]
		mfy.param = &adv->lll;
   38a2c:	60ab      	str	r3, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   38a2e:	4604      	mov	r4, r0
   38a30:	b16a      	cbz	r2, 38a4e <adv_disable+0x32>
   38a32:	f640 1303 	movw	r3, #2307	; 0x903
   38a36:	4a16      	ldr	r2, [pc, #88]	; (38a90 <adv_disable+0x74>)
   38a38:	4916      	ldr	r1, [pc, #88]	; (38a94 <adv_disable+0x78>)
   38a3a:	4817      	ldr	r0, [pc, #92]	; (38a98 <adv_disable+0x7c>)
   38a3c:	f011 fb4e 	bl	4a0dc <printk>
   38a40:	4040      	eors	r0, r0
   38a42:	f380 8811 	msr	BASEPRI, r0
   38a46:	f04f 0003 	mov.w	r0, #3
   38a4a:	df02      	svc	2
   38a4c:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   38a4e:	4913      	ldr	r1, [pc, #76]	; (38a9c <adv_disable+0x80>)
		hdr->disabled_param = mfy.param;
   38a50:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38a52:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   38a54:	6161      	str	r1, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38a56:	4b0d      	ldr	r3, [pc, #52]	; (38a8c <adv_disable+0x70>)
   38a58:	4611      	mov	r1, r2
   38a5a:	2001      	movs	r0, #1
   38a5c:	f7fb facc 	bl	33ff8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   38a60:	b900      	cbnz	r0, 38a64 <adv_disable+0x48>
}
   38a62:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   38a64:	f640 130a 	movw	r3, #2314	; 0x90a
   38a68:	4a09      	ldr	r2, [pc, #36]	; (38a90 <adv_disable+0x74>)
   38a6a:	490d      	ldr	r1, [pc, #52]	; (38aa0 <adv_disable+0x84>)
   38a6c:	480a      	ldr	r0, [pc, #40]	; (38a98 <adv_disable+0x7c>)
   38a6e:	f011 fb35 	bl	4a0dc <printk>
   38a72:	4040      	eors	r0, r0
   38a74:	f380 8811 	msr	BASEPRI, r0
   38a78:	f04f 0003 	mov.w	r0, #3
   38a7c:	df02      	svc	2
}
   38a7e:	bd38      	pop	{r3, r4, r5, pc}
		disabled_cb(&adv->lll);
   38a80:	4618      	mov	r0, r3
}
   38a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   38a86:	f7ff bf23 	b.w	388d0 <disabled_cb>
   38a8a:	bf00      	nop
   38a8c:	2000096c 	.word	0x2000096c
   38a90:	000530c4 	.word	0x000530c4
   38a94:	0005309c 	.word	0x0005309c
   38a98:	00052d50 	.word	0x00052d50
   38a9c:	000388d1 	.word	0x000388d1
   38aa0:	00052ed8 	.word	0x00052ed8

00038aa4 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   38aa4:	b900      	cbnz	r0, 38aa8 <ticker_update_op_cb+0x4>
   38aa6:	4770      	bx	lr
{
   38aa8:	b510      	push	{r4, lr}
   38aaa:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   38aac:	f7ff f9a2 	bl	37df4 <ull_disable_mark_get>
   38ab0:	4284      	cmp	r4, r0
   38ab2:	d00c      	beq.n	38ace <ticker_update_op_cb+0x2a>
   38ab4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
   38ab8:	4a05      	ldr	r2, [pc, #20]	; (38ad0 <ticker_update_op_cb+0x2c>)
   38aba:	4906      	ldr	r1, [pc, #24]	; (38ad4 <ticker_update_op_cb+0x30>)
   38abc:	4806      	ldr	r0, [pc, #24]	; (38ad8 <ticker_update_op_cb+0x34>)
   38abe:	f011 fb0d 	bl	4a0dc <printk>
   38ac2:	4040      	eors	r0, r0
   38ac4:	f380 8811 	msr	BASEPRI, r0
   38ac8:	f04f 0003 	mov.w	r0, #3
   38acc:	df02      	svc	2
}
   38ace:	bd10      	pop	{r4, pc}
   38ad0:	000530c4 	.word	0x000530c4
   38ad4:	0005319c 	.word	0x0005319c
   38ad8:	00052d50 	.word	0x00052d50

00038adc <ticker_stop_cb>:
{
   38adc:	b530      	push	{r4, r5, lr}
   38ade:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38ae0:	4c18      	ldr	r4, [pc, #96]	; (38b44 <ticker_stop_cb+0x68>)
{
   38ae2:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38ae4:	4a18      	ldr	r2, [pc, #96]	; (38b48 <ticker_stop_cb+0x6c>)
   38ae6:	1b2c      	subs	r4, r5, r4
   38ae8:	fba2 3404 	umull	r3, r4, r2, r4
	handle = ull_adv_handle_get(adv);
   38aec:	f3c4 1487 	ubfx	r4, r4, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   38af0:	b9cc      	cbnz	r4, 38b26 <ticker_stop_cb+0x4a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   38af2:	1ca2      	adds	r2, r4, #2
   38af4:	4b15      	ldr	r3, [pc, #84]	; (38b4c <ticker_stop_cb+0x70>)
   38af6:	9500      	str	r5, [sp, #0]
   38af8:	b2d2      	uxtb	r2, r2
   38afa:	2101      	movs	r1, #1
   38afc:	2000      	movs	r0, #0
   38afe:	f7fc fe39 	bl	35774 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   38b02:	f030 0302 	bics.w	r3, r0, #2
   38b06:	d00c      	beq.n	38b22 <ticker_stop_cb+0x46>
   38b08:	f640 03d3 	movw	r3, #2259	; 0x8d3
   38b0c:	4a10      	ldr	r2, [pc, #64]	; (38b50 <ticker_stop_cb+0x74>)
   38b0e:	4911      	ldr	r1, [pc, #68]	; (38b54 <ticker_stop_cb+0x78>)
   38b10:	4811      	ldr	r0, [pc, #68]	; (38b58 <ticker_stop_cb+0x7c>)
   38b12:	f011 fae3 	bl	4a0dc <printk>
   38b16:	4040      	eors	r0, r0
   38b18:	f380 8811 	msr	BASEPRI, r0
   38b1c:	f04f 0003 	mov.w	r0, #3
   38b20:	df02      	svc	2
}
   38b22:	b003      	add	sp, #12
   38b24:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   38b26:	f640 03cd 	movw	r3, #2253	; 0x8cd
   38b2a:	4a09      	ldr	r2, [pc, #36]	; (38b50 <ticker_stop_cb+0x74>)
   38b2c:	490b      	ldr	r1, [pc, #44]	; (38b5c <ticker_stop_cb+0x80>)
   38b2e:	480a      	ldr	r0, [pc, #40]	; (38b58 <ticker_stop_cb+0x7c>)
   38b30:	f011 fad4 	bl	4a0dc <printk>
   38b34:	4040      	eors	r0, r0
   38b36:	f380 8811 	msr	BASEPRI, r0
   38b3a:	f04f 0003 	mov.w	r0, #3
   38b3e:	df02      	svc	2
   38b40:	e7d7      	b.n	38af2 <ticker_stop_cb+0x16>
   38b42:	bf00      	nop
   38b44:	200051bc 	.word	0x200051bc
   38b48:	88888889 	.word	0x88888889
   38b4c:	000389d5 	.word	0x000389d5
   38b50:	000530c4 	.word	0x000530c4
   38b54:	00053180 	.word	0x00053180
   38b58:	00052d50 	.word	0x00052d50
   38b5c:	00053174 	.word	0x00053174

00038b60 <ticker_cb>:
{
   38b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   38b64:	461e      	mov	r6, r3
   38b66:	b08b      	sub	sp, #44	; 0x2c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   38b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
   38b6c:	429e      	cmp	r6, r3
{
   38b6e:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   38b72:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   38b74:	d01a      	beq.n	38bac <ticker_cb+0x4c>
	return ++hdr->ref;
   38b76:	7823      	ldrb	r3, [r4, #0]
   38b78:	3301      	adds	r3, #1
   38b7a:	b2db      	uxtb	r3, r3
   38b7c:	4681      	mov	r9, r0
   38b7e:	4690      	mov	r8, r2
   38b80:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   38b82:	2b00      	cmp	r3, #0
   38b84:	d064      	beq.n	38c50 <ticker_cb+0xf0>
		p.ticks_at_expire = ticks_at_expire;
   38b86:	4d39      	ldr	r5, [pc, #228]	; (38c6c <ticker_cb+0x10c>)
		mfy.param = &p;
   38b88:	4b39      	ldr	r3, [pc, #228]	; (38c70 <ticker_cb+0x110>)
		p.ticks_at_expire = ticks_at_expire;
   38b8a:	f8c5 9000 	str.w	r9, [r5]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38b8e:	2200      	movs	r2, #0
	lll = &adv->lll;
   38b90:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38b94:	4611      	mov	r1, r2
   38b96:	2001      	movs	r0, #1
		mfy.param = &p;
   38b98:	609d      	str	r5, [r3, #8]
		p.remainder = remainder;
   38b9a:	f8c5 8004 	str.w	r8, [r5, #4]
		p.lazy = lazy;
   38b9e:	812e      	strh	r6, [r5, #8]
		p.force = force;
   38ba0:	72af      	strb	r7, [r5, #10]
		p.param = lll;
   38ba2:	f8c5 c00c 	str.w	ip, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   38ba6:	f7fb fa27 	bl	33ff8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   38baa:	b938      	cbnz	r0, 38bbc <ticker_cb+0x5c>
	if (!lll->is_hdcd)
   38bac:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
   38bb0:	f015 0501 	ands.w	r5, r5, #1
   38bb4:	d014      	beq.n	38be0 <ticker_cb+0x80>
}
   38bb6:	b00b      	add	sp, #44	; 0x2c
   38bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(!ret);
   38bbc:	f640 0392 	movw	r3, #2194	; 0x892
   38bc0:	4a2c      	ldr	r2, [pc, #176]	; (38c74 <ticker_cb+0x114>)
   38bc2:	492d      	ldr	r1, [pc, #180]	; (38c78 <ticker_cb+0x118>)
   38bc4:	482d      	ldr	r0, [pc, #180]	; (38c7c <ticker_cb+0x11c>)
   38bc6:	f011 fa89 	bl	4a0dc <printk>
   38bca:	4040      	eors	r0, r0
   38bcc:	f380 8811 	msr	BASEPRI, r0
   38bd0:	f04f 0003 	mov.w	r0, #3
   38bd4:	df02      	svc	2
	if (!lll->is_hdcd)
   38bd6:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
   38bda:	f015 0501 	ands.w	r5, r5, #1
   38bde:	d1ea      	bne.n	38bb6 <ticker_cb+0x56>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   38be0:	2104      	movs	r1, #4
   38be2:	a809      	add	r0, sp, #36	; 0x24
   38be4:	f007 ff60 	bl	40aa8 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   38be8:	9909      	ldr	r1, [sp, #36]	; 0x24
   38bea:	4b25      	ldr	r3, [pc, #148]	; (38c80 <ticker_cb+0x120>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38bec:	4a25      	ldr	r2, [pc, #148]	; (38c84 <ticker_cb+0x124>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38bee:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   38bf0:	fba3 0301 	umull	r0, r3, r3, r1
   38bf4:	1ac8      	subs	r0, r1, r3
   38bf6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38bfa:	4823      	ldr	r0, [pc, #140]	; (38c88 <ticker_cb+0x128>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38bfc:	9504      	str	r5, [sp, #16]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38bfe:	1aa2      	subs	r2, r4, r2
   38c00:	fba0 0202 	umull	r0, r2, r0, r2
	random_delay %= ticks_delay_window;
   38c04:	0a1c      	lsrs	r4, r3, #8
   38c06:	f240 1347 	movw	r3, #327	; 0x147
   38c0a:	fb03 1414 	mls	r4, r3, r4, r1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   38c0e:	0992      	lsrs	r2, r2, #6
	random_delay += (ticks_delay_window_offset + 1);
   38c10:	3401      	adds	r4, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38c12:	491e      	ldr	r1, [pc, #120]	; (38c8c <ticker_cb+0x12c>)
   38c14:	9105      	str	r1, [sp, #20]
   38c16:	3202      	adds	r2, #2
   38c18:	4623      	mov	r3, r4
   38c1a:	e9cd 5502 	strd	r5, r5, [sp, #8]
   38c1e:	e9cd 5500 	strd	r5, r5, [sp]
   38c22:	4628      	mov	r0, r5
   38c24:	b2d2      	uxtb	r2, r2
   38c26:	2101      	movs	r1, #1
	random_delay += (ticks_delay_window_offset + 1);
   38c28:	9409      	str	r4, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   38c2a:	f7fc fd8b 	bl	35744 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   38c2e:	f030 0302 	bics.w	r3, r0, #2
   38c32:	d0c0      	beq.n	38bb6 <ticker_cb+0x56>
   38c34:	f240 732d 	movw	r3, #1837	; 0x72d
   38c38:	4a0e      	ldr	r2, [pc, #56]	; (38c74 <ticker_cb+0x114>)
   38c3a:	4915      	ldr	r1, [pc, #84]	; (38c90 <ticker_cb+0x130>)
   38c3c:	480f      	ldr	r0, [pc, #60]	; (38c7c <ticker_cb+0x11c>)
   38c3e:	f011 fa4d 	bl	4a0dc <printk>
   38c42:	4040      	eors	r0, r0
   38c44:	f380 8811 	msr	BASEPRI, r0
   38c48:	f04f 0003 	mov.w	r0, #3
   38c4c:	df02      	svc	2
}
   38c4e:	e7b2      	b.n	38bb6 <ticker_cb+0x56>
		LL_ASSERT(ref);
   38c50:	f640 0385 	movw	r3, #2181	; 0x885
   38c54:	4a07      	ldr	r2, [pc, #28]	; (38c74 <ticker_cb+0x114>)
   38c56:	490f      	ldr	r1, [pc, #60]	; (38c94 <ticker_cb+0x134>)
   38c58:	4808      	ldr	r0, [pc, #32]	; (38c7c <ticker_cb+0x11c>)
   38c5a:	f011 fa3f 	bl	4a0dc <printk>
   38c5e:	4040      	eors	r0, r0
   38c60:	f380 8811 	msr	BASEPRI, r0
   38c64:	f04f 0003 	mov.w	r0, #3
   38c68:	df02      	svc	2
   38c6a:	e78c      	b.n	38b86 <ticker_cb+0x26>
   38c6c:	20005240 	.word	0x20005240
   38c70:	2000094c 	.word	0x2000094c
   38c74:	000530c4 	.word	0x000530c4
   38c78:	00052ed8 	.word	0x00052ed8
   38c7c:	00052d50 	.word	0x00052d50
   38c80:	90d4f121 	.word	0x90d4f121
   38c84:	200051bc 	.word	0x200051bc
   38c88:	88888889 	.word	0x88888889
   38c8c:	00038aa5 	.word	0x00038aa5
   38c90:	00053180 	.word	0x00053180
   38c94:	00053170 	.word	0x00053170

00038c98 <init_reset>:
{
   38c98:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   38c9a:	4c15      	ldr	r4, [pc, #84]	; (38cf0 <init_reset+0x58>)
   38c9c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   38ca0:	f008 fb06 	bl	412b0 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   38ca4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   38ca8:	f008 fb02 	bl	412b0 <lll_adv_data_init>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   38cac:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   38cb0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   38cb2:	4910      	ldr	r1, [pc, #64]	; (38cf4 <init_reset+0x5c>)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   38cb4:	f894 506a 	ldrb.w	r5, [r4, #106]	; 0x6a
   38cb8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   38cbc:	400b      	ands	r3, r1
   38cbe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   38cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   38cc4:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   38cc8:	f36f 0542 	bfc	r5, #1, #2
	pdu->len = BDADDR_SIZE;
   38ccc:	2206      	movs	r2, #6
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   38cce:	f043 030e 	orr.w	r3, r3, #14
	pdu->type = pdu_type;
   38cd2:	2000      	movs	r0, #0
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   38cd4:	84a3      	strh	r3, [r4, #36]	; 0x24
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   38cd6:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
   38cda:	704a      	strb	r2, [r1, #1]
	pdu->type = pdu_type;
   38cdc:	7008      	strb	r0, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   38cde:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   38ce2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   38ce6:	2104      	movs	r1, #4
   38ce8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   38cea:	705a      	strb	r2, [r3, #1]
	pdu->type = pdu_type;
   38cec:	7019      	strb	r1, [r3, #0]
}
   38cee:	bd38      	pop	{r3, r4, r5, pc}
   38cf0:	200051bc 	.word	0x200051bc
   38cf4:	fffffcf1 	.word	0xfffffcf1

00038cf8 <conn_release.constprop.12>:
static void conn_release(struct ll_adv_set *adv)
   38cf8:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   38cfa:	4c1b      	ldr	r4, [pc, #108]	; (38d68 <conn_release.constprop.12+0x70>)
   38cfc:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   38cfe:	6dab      	ldr	r3, [r5, #88]	; 0x58
   38d00:	b163      	cbz	r3, 38d1c <conn_release.constprop.12+0x24>
   38d02:	f640 1348 	movw	r3, #2376	; 0x948
   38d06:	4a19      	ldr	r2, [pc, #100]	; (38d6c <conn_release.constprop.12+0x74>)
   38d08:	4919      	ldr	r1, [pc, #100]	; (38d70 <conn_release.constprop.12+0x78>)
   38d0a:	481a      	ldr	r0, [pc, #104]	; (38d74 <conn_release.constprop.12+0x7c>)
   38d0c:	f011 f9e6 	bl	4a0dc <printk>
   38d10:	4040      	eors	r0, r0
   38d12:	f380 8811 	msr	BASEPRI, r0
   38d16:	f04f 0003 	mov.w	r0, #3
   38d1a:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   38d1c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   38d20:	f105 0048 	add.w	r0, r5, #72	; 0x48
   38d24:	f7fb f8ea 	bl	33efc <memq_deinit>
	LL_ASSERT(link);
   38d28:	4606      	mov	r6, r0
   38d2a:	b170      	cbz	r0, 38d4a <conn_release.constprop.12+0x52>
	ll_conn_release(lll->hdr.parent);
   38d2c:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   38d2e:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   38d30:	f001 f874 	bl	39e1c <ll_conn_release>
	adv->lll.conn = NULL;
   38d34:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   38d36:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   38d38:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   38d3a:	f7fe ff77 	bl	37c2c <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   38d3e:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   38d40:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   38d42:	f7fe ff67 	bl	37c14 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   38d46:	6625      	str	r5, [r4, #96]	; 0x60
}
   38d48:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   38d4a:	f640 134a 	movw	r3, #2378	; 0x94a
   38d4e:	4a07      	ldr	r2, [pc, #28]	; (38d6c <conn_release.constprop.12+0x74>)
   38d50:	4909      	ldr	r1, [pc, #36]	; (38d78 <conn_release.constprop.12+0x80>)
   38d52:	4808      	ldr	r0, [pc, #32]	; (38d74 <conn_release.constprop.12+0x7c>)
   38d54:	f011 f9c2 	bl	4a0dc <printk>
   38d58:	4040      	eors	r0, r0
   38d5a:	f380 8811 	msr	BASEPRI, r0
   38d5e:	f04f 0003 	mov.w	r0, #3
   38d62:	df02      	svc	2
   38d64:	e7e2      	b.n	38d2c <conn_release.constprop.12+0x34>
   38d66:	bf00      	nop
   38d68:	200051bc 	.word	0x200051bc
   38d6c:	000530c4 	.word	0x000530c4
   38d70:	000530b0 	.word	0x000530b0
   38d74:	00052d50 	.word	0x00052d50
   38d78:	00053350 	.word	0x00053350

00038d7c <ll_adv_params_set>:
{
   38d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
   38d80:	4c63      	ldr	r4, [pc, #396]	; (38f10 <ll_adv_params_set+0x194>)
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   38d82:	4e64      	ldr	r6, [pc, #400]	; (38f14 <ll_adv_params_set+0x198>)
	if (!adv || adv->is_enabled) {
   38d84:	f894 506a 	ldrb.w	r5, [r4, #106]	; 0x6a
{
   38d88:	b083      	sub	sp, #12
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   38d8a:	9600      	str	r6, [sp, #0]
   38d8c:	2601      	movs	r6, #1
	if (!adv || adv->is_enabled) {
   38d8e:	4035      	ands	r5, r6
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   38d90:	f88d 6004 	strb.w	r6, [sp, #4]
{
   38d94:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
   38d98:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
	if (!adv || adv->is_enabled) {
   38d9c:	d17d      	bne.n	38e9a <ll_adv_params_set+0x11e>
	adv->lll.filter_policy = filter_policy;
   38d9e:	f894 6025 	ldrb.w	r6, [r4, #37]	; 0x25
   38da2:	4698      	mov	r8, r3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   38da4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   38da8:	f36e 0601 	bfi	r6, lr, #0, #2
   38dac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   38db0:	f884 6025 	strb.w	r6, [r4, #37]	; 0x25
   38db4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	pdu->type = pdu_adv_type[adv_type];
   38db6:	ab02      	add	r3, sp, #8
   38db8:	440b      	add	r3, r1
	pdu_type_prev = pdu->type;
   38dba:	f896 9000 	ldrb.w	r9, [r6]
	pdu->type = pdu_adv_type[adv_type];
   38dbe:	f813 ec08 	ldrb.w	lr, [r3, #-8]
   38dc2:	464b      	mov	r3, r9
   38dc4:	f36e 0303 	bfi	r3, lr, #0, #4
	pdu->rfu = 0;
   38dc8:	f365 1304 	bfi	r3, r5, #4, #1
		adv->interval = 0;
   38dcc:	2901      	cmp	r1, #1
	    ((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   38dce:	b2db      	uxtb	r3, r3
		adv->interval = 0;
   38dd0:	bf08      	it	eq
   38dd2:	2000      	moveq	r0, #0
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   38dd4:	f013 0f0e 	tst.w	r3, #14
   38dd8:	bf0c      	ite	eq
   38dda:	2101      	moveq	r1, #1
   38ddc:	2100      	movne	r1, #0
   38dde:	f361 1345 	bfi	r3, r1, #5, #1
   38de2:	4617      	mov	r7, r2
	adv->lll.chan_map = chan_map;
   38de4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   38de8:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   38dec:	f003 010f 	and.w	r1, r3, #15
	adv->lll.chan_map = chan_map;
   38df0:	f36c 0243 	bfi	r2, ip, #1, #3
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   38df4:	2901      	cmp	r1, #1
	adv->lll.chan_map = chan_map;
   38df6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   38dfa:	f009 090f 	and.w	r9, r9, #15
   38dfe:	7033      	strb	r3, [r6, #0]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   38e00:	d043      	beq.n	38e8a <ll_adv_params_set+0x10e>
	adv->own_addr_type = own_addr_type;
   38e02:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   38e06:	f367 0342 	bfi	r3, r7, #1, #2
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   38e0a:	b2da      	uxtb	r2, r3
	adv->own_addr_type = own_addr_type;
   38e0c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   38e10:	0753      	lsls	r3, r2, #29
   38e12:	d509      	bpl.n	38e28 <ll_adv_params_set+0xac>
		adv->peer_addr_type = direct_addr_type;
   38e14:	4613      	mov	r3, r2
   38e16:	f368 03c3 	bfi	r3, r8, #3, #1
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   38e1a:	2206      	movs	r2, #6
   38e1c:	990a      	ldr	r1, [sp, #40]	; 0x28
   38e1e:	483e      	ldr	r0, [pc, #248]	; (38f18 <ll_adv_params_set+0x19c>)
		adv->peer_addr_type = direct_addr_type;
   38e20:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   38e24:	f013 fa62 	bl	4c2ec <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   38e28:	7833      	ldrb	r3, [r6, #0]
   38e2a:	f003 020f 	and.w	r2, r3, #15
   38e2e:	2a01      	cmp	r2, #1
   38e30:	f007 0701 	and.w	r7, r7, #1
   38e34:	d036      	beq.n	38ea4 <ll_adv_params_set+0x128>
	} else if (pdu->len == 0) {
   38e36:	7872      	ldrb	r2, [r6, #1]
   38e38:	b1fa      	cbz	r2, 38e7a <ll_adv_params_set+0xfe>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   38e3a:	f1b9 0f01 	cmp.w	r9, #1
   38e3e:	d04c      	beq.n	38eda <ll_adv_params_set+0x15e>
		pdu->tx_addr = own_addr_type & 0x1;
   38e40:	7833      	ldrb	r3, [r6, #0]
   38e42:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->rx_addr = 0;
   38e46:	f36f 13c7 	bfc	r3, #7, #1
   38e4a:	7033      	strb	r3, [r6, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   38e4c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   38e50:	61e4      	str	r4, [r4, #28]
   38e52:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   38e56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		pdu->tx_addr = own_addr_type & 0x1;
   38e58:	7813      	ldrb	r3, [r2, #0]
		if (pdu->len == 0) {
   38e5a:	7851      	ldrb	r1, [r2, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   38e5c:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   38e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
   38e64:	f043 0304 	orr.w	r3, r3, #4
   38e68:	7013      	strb	r3, [r2, #0]
		if (pdu->len == 0) {
   38e6a:	b911      	cbnz	r1, 38e72 <ll_adv_params_set+0xf6>
			pdu->len = BDADDR_SIZE;
   38e6c:	2306      	movs	r3, #6
	return 0;
   38e6e:	460d      	mov	r5, r1
			pdu->len = BDADDR_SIZE;
   38e70:	7053      	strb	r3, [r2, #1]
}
   38e72:	4628      	mov	r0, r5
   38e74:	b003      	add	sp, #12
   38e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   38e7a:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->rx_addr = 0;
   38e7e:	f362 13c7 	bfi	r3, r2, #7, #1
		pdu->len = BDADDR_SIZE;
   38e82:	2206      	movs	r2, #6
		pdu->rx_addr = 0;
   38e84:	7033      	strb	r3, [r6, #0]
		pdu->len = BDADDR_SIZE;
   38e86:	7072      	strb	r2, [r6, #1]
   38e88:	e7e0      	b.n	38e4c <ll_adv_params_set+0xd0>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   38e8a:	f1b9 0f01 	cmp.w	r9, #1
   38e8e:	d0b8      	beq.n	38e02 <ll_adv_params_set+0x86>
		if (pdu->len == 0U) {
   38e90:	7873      	ldrb	r3, [r6, #1]
   38e92:	b9ab      	cbnz	r3, 38ec0 <ll_adv_params_set+0x144>
			adv->ad_data_backup.len = 0U;
   38e94:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
   38e98:	e7b3      	b.n	38e02 <ll_adv_params_set+0x86>
		return BT_HCI_ERR_CMD_DISALLOWED;
   38e9a:	250c      	movs	r5, #12
}
   38e9c:	4628      	mov	r0, r5
   38e9e:	b003      	add	sp, #12
   38ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->rx_addr = direct_addr_type;
   38ea4:	4630      	mov	r0, r6
		pdu->tx_addr = own_addr_type & 0x1;
   38ea6:	f367 1386 	bfi	r3, r7, #6, #1
		pdu->rx_addr = direct_addr_type;
   38eaa:	f368 13c7 	bfi	r3, r8, #7, #1
   38eae:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   38eb2:	2206      	movs	r2, #6
   38eb4:	990a      	ldr	r1, [sp, #40]	; 0x28
   38eb6:	f013 fa19 	bl	4c2ec <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   38eba:	230c      	movs	r3, #12
   38ebc:	7073      	strb	r3, [r6, #1]
   38ebe:	e7c5      	b.n	38e4c <ll_adv_params_set+0xd0>
			LL_ASSERT(pdu->len >=
   38ec0:	2b05      	cmp	r3, #5
   38ec2:	d916      	bls.n	38ef2 <ll_adv_params_set+0x176>
			adv->ad_data_backup.len = pdu->len -
   38ec4:	3b06      	subs	r3, #6
   38ec6:	b2db      	uxtb	r3, r3
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   38ec8:	461a      	mov	r2, r3
   38eca:	f106 0108 	add.w	r1, r6, #8
			adv->ad_data_backup.len = pdu->len -
   38ece:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   38ed2:	4812      	ldr	r0, [pc, #72]	; (38f1c <ll_adv_params_set+0x1a0>)
   38ed4:	f013 fa0a 	bl	4c2ec <memcpy>
   38ed8:	e793      	b.n	38e02 <ll_adv_params_set+0x86>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
   38eda:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   38ede:	490f      	ldr	r1, [pc, #60]	; (38f1c <ll_adv_params_set+0x1a0>)
   38ee0:	f106 0008 	add.w	r0, r6, #8
   38ee4:	f013 fa02 	bl	4c2ec <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   38ee8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   38eec:	3306      	adds	r3, #6
   38eee:	7073      	strb	r3, [r6, #1]
   38ef0:	e7a6      	b.n	38e40 <ll_adv_params_set+0xc4>
			LL_ASSERT(pdu->len >=
   38ef2:	f240 139d 	movw	r3, #413	; 0x19d
   38ef6:	4a0a      	ldr	r2, [pc, #40]	; (38f20 <ll_adv_params_set+0x1a4>)
   38ef8:	490a      	ldr	r1, [pc, #40]	; (38f24 <ll_adv_params_set+0x1a8>)
   38efa:	480b      	ldr	r0, [pc, #44]	; (38f28 <ll_adv_params_set+0x1ac>)
   38efc:	f011 f8ee 	bl	4a0dc <printk>
   38f00:	4040      	eors	r0, r0
   38f02:	f380 8811 	msr	BASEPRI, r0
   38f06:	f04f 0003 	mov.w	r0, #3
   38f0a:	df02      	svc	2
   38f0c:	7873      	ldrb	r3, [r6, #1]
   38f0e:	e7d9      	b.n	38ec4 <ll_adv_params_set+0x148>
   38f10:	200051bc 	.word	0x200051bc
   38f14:	02060100 	.word	0x02060100
   38f18:	20005227 	.word	0x20005227
   38f1c:	200051fd 	.word	0x200051fd
   38f20:	000530c4 	.word	0x000530c4
   38f24:	00053130 	.word	0x00053130
   38f28:	00052d50 	.word	0x00052d50

00038f2c <ull_adv_init>:
	err = init_reset();
   38f2c:	f7ff beb4 	b.w	38c98 <init_reset>

00038f30 <ull_adv_reset>:
{
   38f30:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   38f32:	4c51      	ldr	r4, [pc, #324]	; (39078 <ull_adv_reset+0x148>)
   38f34:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   38f38:	07d9      	lsls	r1, r3, #31
{
   38f3a:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   38f3c:	d557      	bpl.n	38fee <ull_adv_reset+0xbe>
	if (adv->lll.conn) {
   38f3e:	6a23      	ldr	r3, [r4, #32]
   38f40:	b153      	cbz	r3, 38f58 <ull_adv_reset+0x28>
		adv->lll.conn->periph.cancelled = 1U;
   38f42:	f893 2020 	ldrb.w	r2, [r3, #32]
   38f46:	f042 0202 	orr.w	r2, r2, #2
   38f4a:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   38f4e:	6a23      	ldr	r3, [r4, #32]
   38f50:	f893 3020 	ldrb.w	r3, [r3, #32]
   38f54:	07da      	lsls	r2, r3, #31
   38f56:	d44a      	bmi.n	38fee <ull_adv_reset+0xbe>
	mark = ull_disable_mark(adv);
   38f58:	4847      	ldr	r0, [pc, #284]	; (39078 <ull_adv_reset+0x148>)
   38f5a:	f7fe ff33 	bl	37dc4 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   38f5e:	4284      	cmp	r4, r0
   38f60:	d00c      	beq.n	38f7c <ull_adv_reset+0x4c>
   38f62:	f640 13ff 	movw	r3, #2559	; 0x9ff
   38f66:	4a45      	ldr	r2, [pc, #276]	; (3907c <ull_adv_reset+0x14c>)
   38f68:	4945      	ldr	r1, [pc, #276]	; (39080 <ull_adv_reset+0x150>)
   38f6a:	4846      	ldr	r0, [pc, #280]	; (39084 <ull_adv_reset+0x154>)
   38f6c:	f011 f8b6 	bl	4a0dc <printk>
   38f70:	4040      	eors	r0, r0
   38f72:	f380 8811 	msr	BASEPRI, r0
   38f76:	f04f 0003 	mov.w	r0, #3
   38f7a:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   38f7c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   38f80:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   38f82:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   38f84:	d436      	bmi.n	38ff4 <ull_adv_reset+0xc4>
	ret_cb = TICKER_STATUS_BUSY;
   38f86:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   38f88:	460a      	mov	r2, r1
	ret_cb = TICKER_STATUS_BUSY;
   38f8a:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   38f8c:	9500      	str	r5, [sp, #0]
   38f8e:	2103      	movs	r1, #3
   38f90:	4b3d      	ldr	r3, [pc, #244]	; (39088 <ull_adv_reset+0x158>)
   38f92:	2000      	movs	r0, #0
   38f94:	f7fc fbee 	bl	35774 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   38f98:	4629      	mov	r1, r5
   38f9a:	f7fe feeb 	bl	37d74 <ull_ticker_status_take>
	if (ret) {
   38f9e:	2800      	cmp	r0, #0
   38fa0:	d154      	bne.n	3904c <ull_adv_reset+0x11c>
	err = ull_disable(&adv->lll);
   38fa2:	483a      	ldr	r0, [pc, #232]	; (3908c <ull_adv_reset+0x15c>)
   38fa4:	f7fe ff4a 	bl	37e3c <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   38fa8:	b108      	cbz	r0, 38fae <ull_adv_reset+0x7e>
   38faa:	3078      	adds	r0, #120	; 0x78
   38fac:	d138      	bne.n	39020 <ull_adv_reset+0xf0>
	mark = ull_disable_unmark(adv);
   38fae:	4832      	ldr	r0, [pc, #200]	; (39078 <ull_adv_reset+0x148>)
   38fb0:	f7fe ff14 	bl	37ddc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   38fb4:	4284      	cmp	r4, r0
   38fb6:	d00c      	beq.n	38fd2 <ull_adv_reset+0xa2>
   38fb8:	f640 2321 	movw	r3, #2593	; 0xa21
   38fbc:	4a2f      	ldr	r2, [pc, #188]	; (3907c <ull_adv_reset+0x14c>)
   38fbe:	4930      	ldr	r1, [pc, #192]	; (39080 <ull_adv_reset+0x150>)
   38fc0:	4830      	ldr	r0, [pc, #192]	; (39084 <ull_adv_reset+0x154>)
   38fc2:	f011 f88b 	bl	4a0dc <printk>
   38fc6:	4040      	eors	r0, r0
   38fc8:	f380 8811 	msr	BASEPRI, r0
   38fcc:	f04f 0003 	mov.w	r0, #3
   38fd0:	df02      	svc	2
	if (adv->lll.conn) {
   38fd2:	6a23      	ldr	r3, [r4, #32]
   38fd4:	b10b      	cbz	r3, 38fda <ull_adv_reset+0xaa>
		conn_release(adv);
   38fd6:	f7ff fe8f 	bl	38cf8 <conn_release.constprop.12>
	adv->is_enabled = 0U;
   38fda:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   38fde:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   38fe0:	f36f 0300 	bfc	r3, #0, #1
   38fe4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   38fe8:	f000 fa9a 	bl	39520 <ull_scan_is_enabled_get>
   38fec:	b358      	cbz	r0, 39046 <ull_adv_reset+0x116>
}
   38fee:	2000      	movs	r0, #0
   38ff0:	b005      	add	sp, #20
   38ff2:	bd30      	pop	{r4, r5, pc}
		ret_cb = TICKER_STATUS_BUSY;
   38ff4:	2202      	movs	r2, #2
   38ff6:	9203      	str	r2, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   38ff8:	2103      	movs	r1, #3
   38ffa:	9500      	str	r5, [sp, #0]
   38ffc:	4b22      	ldr	r3, [pc, #136]	; (39088 <ull_adv_reset+0x158>)
   38ffe:	2201      	movs	r2, #1
   39000:	2000      	movs	r0, #0
   39002:	f7fc fbb7 	bl	35774 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   39006:	4629      	mov	r1, r5
   39008:	f7fe feb4 	bl	37d74 <ull_ticker_status_take>
		if (ret) {
   3900c:	2800      	cmp	r0, #0
   3900e:	d0ba      	beq.n	38f86 <ull_adv_reset+0x56>
			mark = ull_disable_unmark(adv);
   39010:	4819      	ldr	r0, [pc, #100]	; (39078 <ull_adv_reset+0x148>)
   39012:	f7fe fee3 	bl	37ddc <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   39016:	4284      	cmp	r4, r0
   39018:	d0e9      	beq.n	38fee <ull_adv_reset+0xbe>
   3901a:	f640 230a 	movw	r3, #2570	; 0xa0a
   3901e:	e01c      	b.n	3905a <ull_adv_reset+0x12a>
	LL_ASSERT(!err || (err == -EALREADY));
   39020:	f640 231e 	movw	r3, #2590	; 0xa1e
   39024:	4a15      	ldr	r2, [pc, #84]	; (3907c <ull_adv_reset+0x14c>)
   39026:	491a      	ldr	r1, [pc, #104]	; (39090 <ull_adv_reset+0x160>)
   39028:	4816      	ldr	r0, [pc, #88]	; (39084 <ull_adv_reset+0x154>)
   3902a:	f011 f857 	bl	4a0dc <printk>
   3902e:	4040      	eors	r0, r0
   39030:	f380 8811 	msr	BASEPRI, r0
   39034:	f04f 0003 	mov.w	r0, #3
   39038:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   3903a:	480f      	ldr	r0, [pc, #60]	; (39078 <ull_adv_reset+0x148>)
   3903c:	f7fe fece 	bl	37ddc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   39040:	4284      	cmp	r4, r0
   39042:	d1b9      	bne.n	38fb8 <ull_adv_reset+0x88>
   39044:	e7c5      	b.n	38fd2 <ull_adv_reset+0xa2>
		ull_filter_adv_scan_state_cb(0);
   39046:	f006 fcad 	bl	3f9a4 <ull_filter_adv_scan_state_cb>
   3904a:	e7d0      	b.n	38fee <ull_adv_reset+0xbe>
		mark = ull_disable_unmark(adv);
   3904c:	480a      	ldr	r0, [pc, #40]	; (39078 <ull_adv_reset+0x148>)
   3904e:	f7fe fec5 	bl	37ddc <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   39052:	4284      	cmp	r4, r0
   39054:	d0cb      	beq.n	38fee <ull_adv_reset+0xbe>
   39056:	f640 2318 	movw	r3, #2584	; 0xa18
   3905a:	4a08      	ldr	r2, [pc, #32]	; (3907c <ull_adv_reset+0x14c>)
   3905c:	4908      	ldr	r1, [pc, #32]	; (39080 <ull_adv_reset+0x150>)
   3905e:	4809      	ldr	r0, [pc, #36]	; (39084 <ull_adv_reset+0x154>)
   39060:	f011 f83c 	bl	4a0dc <printk>
   39064:	4040      	eors	r0, r0
   39066:	f380 8811 	msr	BASEPRI, r0
   3906a:	f04f 0003 	mov.w	r0, #3
   3906e:	df02      	svc	2
}
   39070:	2000      	movs	r0, #0
   39072:	b005      	add	sp, #20
   39074:	bd30      	pop	{r4, r5, pc}
   39076:	bf00      	nop
   39078:	200051bc 	.word	0x200051bc
   3907c:	000530c4 	.word	0x000530c4
   39080:	000531cc 	.word	0x000531cc
   39084:	00052d50 	.word	0x00052d50
   39088:	00037289 	.word	0x00037289
   3908c:	200051d8 	.word	0x200051d8
   39090:	000531d8 	.word	0x000531d8

00039094 <ull_adv_reset_finalize>:
{
   39094:	b510      	push	{r4, lr}
		lll_adv_data_reset(&lll->adv_data);
   39096:	4c06      	ldr	r4, [pc, #24]	; (390b0 <ull_adv_reset_finalize+0x1c>)
   39098:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3909c:	f008 f918 	bl	412d0 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   390a0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   390a4:	f008 f914 	bl	412d0 <lll_adv_data_reset>
}
   390a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = init_reset();
   390ac:	f7ff bdf4 	b.w	38c98 <init_reset>
   390b0:	200051bc 	.word	0x200051bc

000390b4 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   390b4:	4b03      	ldr	r3, [pc, #12]	; (390c4 <ull_adv_handle_get+0x10>)
   390b6:	4a04      	ldr	r2, [pc, #16]	; (390c8 <ull_adv_handle_get+0x14>)
   390b8:	1ac0      	subs	r0, r0, r3
   390ba:	fba2 3000 	umull	r3, r0, r2, r0
}
   390be:	f3c0 108f 	ubfx	r0, r0, #6, #16
   390c2:	4770      	bx	lr
   390c4:	200051bc 	.word	0x200051bc
   390c8:	88888889 	.word	0x88888889

000390cc <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   390cc:	6800      	ldr	r0, [r0, #0]
   390ce:	4a04      	ldr	r2, [pc, #16]	; (390e0 <ull_adv_lll_handle_get+0x14>)
   390d0:	4b04      	ldr	r3, [pc, #16]	; (390e4 <ull_adv_lll_handle_get+0x18>)
   390d2:	1a80      	subs	r0, r0, r2
   390d4:	fba3 3000 	umull	r3, r0, r3, r0
}
   390d8:	f3c0 108f 	ubfx	r0, r0, #6, #16
   390dc:	4770      	bx	lr
   390de:	bf00      	nop
   390e0:	200051bc 	.word	0x200051bc
   390e4:	88888889 	.word	0x88888889

000390e8 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   390e8:	b938      	cbnz	r0, 390fa <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   390ea:	4805      	ldr	r0, [pc, #20]	; (39100 <ull_adv_is_enabled_get+0x18>)
   390ec:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   390f0:	f013 0f01 	tst.w	r3, #1
   390f4:	bf08      	it	eq
   390f6:	2000      	moveq	r0, #0
   390f8:	4770      	bx	lr
		return NULL;
   390fa:	2000      	movs	r0, #0
}
   390fc:	4770      	bx	lr
   390fe:	bf00      	nop
   39100:	200051bc 	.word	0x200051bc

00039104 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   39104:	b928      	cbnz	r0, 39112 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   39106:	4b04      	ldr	r3, [pc, #16]	; (39118 <ull_adv_is_enabled+0x14>)
   39108:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   3910c:	f000 0001 	and.w	r0, r0, #1
   39110:	4770      	bx	lr
	if (handle >= BT_CTLR_ADV_SET) {
   39112:	2000      	movs	r0, #0
}
   39114:	4770      	bx	lr
   39116:	bf00      	nop
   39118:	200051bc 	.word	0x200051bc

0003911c <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   3911c:	b950      	cbnz	r0, 39134 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   3911e:	4b06      	ldr	r3, [pc, #24]	; (39138 <ull_adv_filter_pol_get+0x1c>)
   39120:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   39124:	f010 0001 	ands.w	r0, r0, #1
   39128:	d005      	beq.n	39136 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   3912a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   3912e:	f000 0003 	and.w	r0, r0, #3
   39132:	4770      	bx	lr
		return 0;
   39134:	2000      	movs	r0, #0
}
   39136:	4770      	bx	lr
   39138:	200051bc 	.word	0x200051bc

0003913c <ull_adv_pdu_update_addrs>:
{
   3913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3913e:	4606      	mov	r6, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   39140:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
   39144:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   39146:	f006 fda1 	bl	3fc8c <ull_filter_adva_get>
   3914a:	4605      	mov	r5, r0
			own_id_addr = ll_addr_get(pdu->tx_addr);
   3914c:	7820      	ldrb	r0, [r4, #0]
   3914e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   39152:	f7fc fbdd 	bl	35910 <ll_addr_get>
	(void)memcpy(adv->own_id_addr, own_id_addr, BDADDR_SIZE);
   39156:	2206      	movs	r2, #6
			own_id_addr = ll_addr_get(pdu->tx_addr);
   39158:	4607      	mov	r7, r0
	(void)memcpy(adv->own_id_addr, own_id_addr, BDADDR_SIZE);
   3915a:	4601      	mov	r1, r0
   3915c:	f106 0071 	add.w	r0, r6, #113	; 0x71
   39160:	f013 f8c4 	bl	4c2ec <memcpy>
	if (rpa) {
   39164:	b185      	cbz	r5, 39188 <ull_adv_pdu_update_addrs+0x4c>
		pdu->tx_addr = 1;
   39166:	7823      	ldrb	r3, [r4, #0]
   39168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3916c:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   3916e:	1ca7      	adds	r7, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   39170:	4629      	mov	r1, r5
   39172:	4638      	mov	r0, r7
   39174:	2206      	movs	r2, #6
   39176:	f013 f8b9 	bl	4c2ec <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   3917a:	7823      	ldrb	r3, [r4, #0]
   3917c:	f003 030f 	and.w	r3, r3, #15
   39180:	2b01      	cmp	r3, #1
   39182:	d003      	beq.n	3918c <ull_adv_pdu_update_addrs+0x50>
}
   39184:	4638      	mov	r0, r7
   39186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_addr = own_id_addr;
   39188:	463d      	mov	r5, r7
   3918a:	e7f0      	b.n	3916e <ull_adv_pdu_update_addrs+0x32>
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   3918c:	f896 0026 	ldrb.w	r0, [r6, #38]	; 0x26
   39190:	f006 fdaa 	bl	3fce8 <ull_filter_tgta_get>
	if (rx_addr) {
   39194:	2800      	cmp	r0, #0
   39196:	d0f5      	beq.n	39184 <ull_adv_pdu_update_addrs+0x48>
		pdu->rx_addr = 1;
   39198:	7823      	ldrb	r3, [r4, #0]
   3919a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3919e:	f804 3b08 	strb.w	r3, [r4], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   391a2:	4601      	mov	r1, r0
   391a4:	2206      	movs	r2, #6
   391a6:	4620      	mov	r0, r4
   391a8:	f013 f8a0 	bl	4c2ec <memcpy>
}
   391ac:	4638      	mov	r0, r7
   391ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000391b0 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   391b0:	291f      	cmp	r1, #31
   391b2:	d856      	bhi.n	39262 <ull_adv_data_set+0xb2>
{
   391b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   391b8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   391bc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   391c0:	b082      	sub	sp, #8
   391c2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   391c4:	7833      	ldrb	r3, [r6, #0]
   391c6:	f003 030f 	and.w	r3, r3, #15
   391ca:	2b01      	cmp	r3, #1
   391cc:	4690      	mov	r8, r2
   391ce:	4605      	mov	r5, r0
   391d0:	460f      	mov	r7, r1
   391d2:	d048      	beq.n	39266 <ull_adv_data_set+0xb6>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   391d4:	f10d 0107 	add.w	r1, sp, #7
   391d8:	3028      	adds	r0, #40	; 0x28
   391da:	f008 f8f9 	bl	413d0 <lll_adv_pdu_alloc>
	pdu->type = prev->type;
   391de:	7832      	ldrb	r2, [r6, #0]
   391e0:	7803      	ldrb	r3, [r0, #0]
   391e2:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0U;
   391e6:	f36f 1304 	bfc	r3, #4, #1
   391ea:	7003      	strb	r3, [r0, #0]
		pdu->chan_sel = prev->chan_sel;
   391ec:	7833      	ldrb	r3, [r6, #0]
   391ee:	7802      	ldrb	r2, [r0, #0]
   391f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
   391f4:	f363 1245 	bfi	r2, r3, #5, #1
   391f8:	7002      	strb	r2, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
   391fa:	7833      	ldrb	r3, [r6, #0]
   391fc:	b2d2      	uxtb	r2, r2
   391fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->rx_addr = prev->rx_addr;
   39202:	4631      	mov	r1, r6
	pdu->tx_addr = prev->tx_addr;
   39204:	f363 1286 	bfi	r2, r3, #6, #1
   39208:	7002      	strb	r2, [r0, #0]
	pdu->rx_addr = prev->rx_addr;
   3920a:	f811 3b02 	ldrb.w	r3, [r1], #2
   3920e:	b2d2      	uxtb	r2, r2
   39210:	09db      	lsrs	r3, r3, #7
   39212:	f363 12c7 	bfi	r2, r3, #7, #1
   39216:	4604      	mov	r4, r0
   39218:	f800 2b02 	strb.w	r2, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   3921c:	2206      	movs	r2, #6
   3921e:	f013 f865 	bl	4c2ec <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   39222:	463a      	mov	r2, r7
   39224:	4641      	mov	r1, r8
   39226:	f104 0008 	add.w	r0, r4, #8
	pdu->len = BDADDR_SIZE + len;
   3922a:	3706      	adds	r7, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   3922c:	f013 f85e 	bl	4c2ec <memcpy>
	pdu->len = BDADDR_SIZE + len;
   39230:	7067      	strb	r7, [r4, #1]
	if (adv->is_enabled) {
   39232:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   39236:	07db      	lsls	r3, r3, #31
   39238:	d407      	bmi.n	3924a <ull_adv_data_set+0x9a>
	pdu->last = idx;
   3923a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3923e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	return 0;
   39242:	2000      	movs	r0, #0
}
   39244:	b002      	add	sp, #8
   39246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   3924a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   3924e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   39252:	4621      	mov	r1, r4
   39254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   39256:	4628      	mov	r0, r5
   39258:	f7ed fe1e 	bl	26e98 <ull_adv_time_update>
		if (err) {
   3925c:	2800      	cmp	r0, #0
   3925e:	d0ec      	beq.n	3923a <ull_adv_data_set+0x8a>
   39260:	e7f0      	b.n	39244 <ull_adv_data_set+0x94>
		return BT_HCI_ERR_INVALID_PARAM;
   39262:	2012      	movs	r0, #18
}
   39264:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   39266:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   3926a:	460a      	mov	r2, r1
   3926c:	3041      	adds	r0, #65	; 0x41
   3926e:	4641      	mov	r1, r8
   39270:	f013 f83c 	bl	4c2ec <memcpy>
		return 0;
   39274:	2000      	movs	r0, #0
}
   39276:	b002      	add	sp, #8
   39278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003927c <ll_adv_data_set>:
	return ull_adv_data_set(adv, len, data);
   3927c:	460a      	mov	r2, r1
   3927e:	4601      	mov	r1, r0
   39280:	4801      	ldr	r0, [pc, #4]	; (39288 <ll_adv_data_set+0xc>)
   39282:	f7ff bf95 	b.w	391b0 <ull_adv_data_set>
   39286:	bf00      	nop
   39288:	200051bc 	.word	0x200051bc

0003928c <ull_scan_rsp_set.part.7>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   3928c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39290:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   39294:	b082      	sub	sp, #8
   39296:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   3929a:	460f      	mov	r7, r1
   3929c:	4605      	mov	r5, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   3929e:	f10d 0107 	add.w	r1, sp, #7
   392a2:	3034      	adds	r0, #52	; 0x34
   392a4:	4690      	mov	r8, r2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   392a6:	6b9e      	ldr	r6, [r3, #56]	; 0x38
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   392a8:	f008 f892 	bl	413d0 <lll_adv_pdu_alloc>
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   392ac:	7803      	ldrb	r3, [r0, #0]
   392ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	pdu->tx_addr = prev->tx_addr;
   392b2:	4631      	mov	r1, r6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   392b4:	f043 0304 	orr.w	r3, r3, #4
   392b8:	7003      	strb	r3, [r0, #0]
	pdu->tx_addr = prev->tx_addr;
   392ba:	f811 2b02 	ldrb.w	r2, [r1], #2
   392be:	b2db      	uxtb	r3, r3
   392c0:	f3c2 1280 	ubfx	r2, r2, #6, #1
   392c4:	f362 1386 	bfi	r3, r2, #6, #1
	pdu->rx_addr = 0;
   392c8:	f36f 13c7 	bfc	r3, #7, #1
	pdu->len = BDADDR_SIZE + len;
   392cc:	1dba      	adds	r2, r7, #6
	pdu->rx_addr = 0;
   392ce:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   392d0:	7042      	strb	r2, [r0, #1]
   392d2:	4604      	mov	r4, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   392d4:	2206      	movs	r2, #6
   392d6:	3002      	adds	r0, #2
   392d8:	f013 f808 	bl	4c2ec <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   392dc:	463a      	mov	r2, r7
   392de:	4641      	mov	r1, r8
   392e0:	f104 0008 	add.w	r0, r4, #8
   392e4:	f013 f802 	bl	4c2ec <memcpy>
	if (adv->is_enabled) {
   392e8:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
   392ec:	07db      	lsls	r3, r3, #31
   392ee:	d50a      	bpl.n	39306 <ull_scan_rsp_set.part.7+0x7a>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   392f0:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   392f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   392f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   392fa:	780b      	ldrb	r3, [r1, #0]
   392fc:	f013 030f 	ands.w	r3, r3, #15
   39300:	d009      	beq.n	39316 <ull_scan_rsp_set.part.7+0x8a>
   39302:	2b06      	cmp	r3, #6
   39304:	d007      	beq.n	39316 <ull_scan_rsp_set.part.7+0x8a>
	pdu->last = idx;
   39306:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3930a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
	return 0;
   3930e:	2000      	movs	r0, #0
}
   39310:	b002      	add	sp, #8
   39312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   39316:	4622      	mov	r2, r4
   39318:	4628      	mov	r0, r5
   3931a:	f7ed fdbd 	bl	26e98 <ull_adv_time_update>
			if (err) {
   3931e:	2800      	cmp	r0, #0
   39320:	d0f1      	beq.n	39306 <ull_scan_rsp_set.part.7+0x7a>
   39322:	e7f5      	b.n	39310 <ull_scan_rsp_set.part.7+0x84>

00039324 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   39324:	281f      	cmp	r0, #31
   39326:	d804      	bhi.n	39332 <ll_adv_scan_rsp_set+0xe>
   39328:	460a      	mov	r2, r1
   3932a:	4601      	mov	r1, r0
   3932c:	4802      	ldr	r0, [pc, #8]	; (39338 <ll_adv_scan_rsp_set+0x14>)
   3932e:	f7ff bfad 	b.w	3928c <ull_scan_rsp_set.part.7>
}
   39332:	2012      	movs	r0, #18
   39334:	4770      	bx	lr
   39336:	bf00      	nop
   39338:	200051bc 	.word	0x200051bc

0003933c <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   3933c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39340:	9c09      	ldr	r4, [sp, #36]	; 0x24
   39342:	f89d 6020 	ldrb.w	r6, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   39346:	4625      	mov	r5, r4
{
   39348:	4607      	mov	r7, r0
   3934a:	f815 1b1c 	ldrb.w	r1, [r5], #28
   3934e:	3101      	adds	r1, #1
   39350:	b2c9      	uxtb	r1, r1
   39352:	4691      	mov	r9, r2
   39354:	4698      	mov	r8, r3
   39356:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   39358:	b189      	cbz	r1, 3937e <ticker_cb+0x42>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   3935a:	4c17      	ldr	r4, [pc, #92]	; (393b8 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
   3935c:	4b17      	ldr	r3, [pc, #92]	; (393bc <ticker_cb+0x80>)
	p.ticks_at_expire = ticks_at_expire;
   3935e:	6027      	str	r7, [r4, #0]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   39360:	2200      	movs	r2, #0
   39362:	4611      	mov	r1, r2
   39364:	2001      	movs	r0, #1
	mfy.param = &p;
   39366:	609c      	str	r4, [r3, #8]
	p.remainder = remainder;
   39368:	f8c4 9004 	str.w	r9, [r4, #4]
	p.lazy = lazy;
   3936c:	f8a4 8008 	strh.w	r8, [r4, #8]
	p.param = lll;
   39370:	60e5      	str	r5, [r4, #12]
	p.force = force;
   39372:	72a6      	strb	r6, [r4, #10]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   39374:	f7fa fe40 	bl	33ff8 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   39378:	b978      	cbnz	r0, 3939a <ticker_cb+0x5e>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   3937a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
   3937e:	f240 23db 	movw	r3, #731	; 0x2db
   39382:	4a0f      	ldr	r2, [pc, #60]	; (393c0 <ticker_cb+0x84>)
   39384:	490f      	ldr	r1, [pc, #60]	; (393c4 <ticker_cb+0x88>)
   39386:	4810      	ldr	r0, [pc, #64]	; (393c8 <ticker_cb+0x8c>)
   39388:	f010 fea8 	bl	4a0dc <printk>
   3938c:	4040      	eors	r0, r0
   3938e:	f380 8811 	msr	BASEPRI, r0
   39392:	f04f 0003 	mov.w	r0, #3
   39396:	df02      	svc	2
   39398:	e7df      	b.n	3935a <ticker_cb+0x1e>
	LL_ASSERT(!ret);
   3939a:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   3939e:	4a08      	ldr	r2, [pc, #32]	; (393c0 <ticker_cb+0x84>)
   393a0:	490a      	ldr	r1, [pc, #40]	; (393cc <ticker_cb+0x90>)
   393a2:	4809      	ldr	r0, [pc, #36]	; (393c8 <ticker_cb+0x8c>)
   393a4:	f010 fe9a 	bl	4a0dc <printk>
   393a8:	4040      	eors	r0, r0
   393aa:	f380 8811 	msr	BASEPRI, r0
   393ae:	f04f 0003 	mov.w	r0, #3
   393b2:	df02      	svc	2
}
   393b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   393b8:	200052a0 	.word	0x200052a0
   393bc:	2000097c 	.word	0x2000097c
   393c0:	000531f0 	.word	0x000531f0
   393c4:	00053170 	.word	0x00053170
   393c8:	00052d50 	.word	0x00052d50
   393cc:	00052ed8 	.word	0x00052ed8

000393d0 <ull_scan_init>:
}
   393d0:	2000      	movs	r0, #0
   393d2:	4770      	bx	lr

000393d4 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   393d4:	3004      	adds	r0, #4
{
   393d6:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   393d8:	b2c0      	uxtb	r0, r0
   393da:	f101 021c 	add.w	r2, r1, #28
   393de:	f7fe fd6b 	bl	37eb8 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   393e2:	b110      	cbz	r0, 393ea <ull_scan_disable+0x16>
   393e4:	3078      	adds	r0, #120	; 0x78
   393e6:	d101      	bne.n	393ec <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   393e8:	200c      	movs	r0, #12
}
   393ea:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   393ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   393f0:	4a06      	ldr	r2, [pc, #24]	; (3940c <ull_scan_disable+0x38>)
   393f2:	4907      	ldr	r1, [pc, #28]	; (39410 <ull_scan_disable+0x3c>)
   393f4:	4807      	ldr	r0, [pc, #28]	; (39414 <ull_scan_disable+0x40>)
   393f6:	f010 fe71 	bl	4a0dc <printk>
   393fa:	4040      	eors	r0, r0
   393fc:	f380 8811 	msr	BASEPRI, r0
   39400:	f04f 0003 	mov.w	r0, #3
   39404:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   39406:	200c      	movs	r0, #12
}
   39408:	bd08      	pop	{r3, pc}
   3940a:	bf00      	nop
   3940c:	000531f0 	.word	0x000531f0
   39410:	00053230 	.word	0x00053230
   39414:	00052d50 	.word	0x00052d50

00039418 <disable.constprop.2>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
   39418:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   3941a:	4c0e      	ldr	r4, [pc, #56]	; (39454 <disable.constprop.2+0x3c>)
   3941c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   39420:	07db      	lsls	r3, r3, #31
   39422:	d501      	bpl.n	39428 <disable.constprop.2+0x10>
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   39424:	6a20      	ldr	r0, [r4, #32]
   39426:	b110      	cbz	r0, 3942e <disable.constprop.2+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   39428:	250c      	movs	r5, #12
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   3942a:	4628      	mov	r0, r5
   3942c:	bd38      	pop	{r3, r4, r5, pc}
	ret = ull_scan_disable(handle, scan);
   3942e:	4621      	mov	r1, r4
   39430:	f7ff ffd0 	bl	393d4 <ull_scan_disable>
	if (ret) {
   39434:	4605      	mov	r5, r0
   39436:	2800      	cmp	r0, #0
   39438:	d1f7      	bne.n	3942a <disable.constprop.2+0x12>
	scan->is_enabled = 0U;
   3943a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   3943e:	f360 0300 	bfi	r3, r0, #0, #1
   39442:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   39446:	f7ff fe4f 	bl	390e8 <ull_adv_is_enabled_get>
   3944a:	2800      	cmp	r0, #0
   3944c:	d1ed      	bne.n	3942a <disable.constprop.2+0x12>
		ull_filter_adv_scan_state_cb(0);
   3944e:	f006 faa9 	bl	3f9a4 <ull_filter_adv_scan_state_cb>
   39452:	e7ea      	b.n	3942a <disable.constprop.2+0x12>
   39454:	20005258 	.word	0x20005258

00039458 <ll_scan_enable>:
	if (!enable) {
   39458:	b378      	cbz	r0, 394ba <ll_scan_enable+0x62>
{
   3945a:	b538      	push	{r3, r4, r5, lr}
	if (!scan || scan->is_enabled) {
   3945c:	4d1f      	ldr	r5, [pc, #124]	; (394dc <ll_scan_enable+0x84>)
   3945e:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   39462:	07d9      	lsls	r1, r3, #31
   39464:	d435      	bmi.n	394d2 <ll_scan_enable+0x7a>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   39466:	f3c3 0441 	ubfx	r4, r3, #1, #2
   3946a:	07e2      	lsls	r2, r4, #31
   3946c:	d50a      	bpl.n	39484 <ll_scan_enable+0x2c>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   3946e:	2001      	movs	r0, #1
   39470:	f7fc fa4e 	bl	35910 <ll_addr_get>
   39474:	2106      	movs	r1, #6
   39476:	f7fa fd31 	bl	33edc <mem_nz>
   3947a:	b360      	cbz	r0, 394d6 <ll_scan_enable+0x7e>
   3947c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   39480:	f3c3 0441 	ubfx	r4, r3, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   39484:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
   39488:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   3948c:	f006 faca 	bl	3fa24 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   39490:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	if ((lll->type & 0x1) &&
   39494:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
	lll->rpa_gen = 0;
   39498:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
   3949c:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   3949e:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	if ((lll->type & 0x1) &&
   394a2:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
   394a4:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
	if ((lll->type & 0x1) &&
   394a8:	d502      	bpl.n	394b0 <ll_scan_enable+0x58>
   394aa:	1ea3      	subs	r3, r4, #2
   394ac:	2b01      	cmp	r3, #1
   394ae:	d906      	bls.n	394be <ll_scan_enable+0x66>
		err = ull_scan_enable(scan);
   394b0:	480a      	ldr	r0, [pc, #40]	; (394dc <ll_scan_enable+0x84>)
}
   394b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   394b6:	f7ed bda7 	b.w	27008 <ull_scan_enable>
		err = disable(SCAN_HANDLE_1M);
   394ba:	f7ff bfad 	b.w	39418 <disable.constprop.2>
		ull_filter_rpa_update(false);
   394be:	2000      	movs	r0, #0
   394c0:	f006 fad4 	bl	3fa6c <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   394c4:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   394c8:	f043 0302 	orr.w	r3, r3, #2
   394cc:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
   394d0:	e7ee      	b.n	394b0 <ll_scan_enable+0x58>
			return BT_HCI_ERR_CMD_DISALLOWED;
   394d2:	200c      	movs	r0, #12
}
   394d4:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_INVALID_PARAM;
   394d6:	2012      	movs	r0, #18
}
   394d8:	bd38      	pop	{r3, r4, r5, pc}
   394da:	bf00      	nop
   394dc:	20005258 	.word	0x20005258

000394e0 <ull_scan_reset>:
{
   394e0:	b508      	push	{r3, lr}
		(void)disable(handle);
   394e2:	f7ff ff99 	bl	39418 <disable.constprop.2>
}
   394e6:	2000      	movs	r0, #0
   394e8:	bd08      	pop	{r3, pc}
   394ea:	bf00      	nop

000394ec <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   394ec:	4b03      	ldr	r3, [pc, #12]	; (394fc <ull_scan_handle_get+0x10>)
   394ee:	4a04      	ldr	r2, [pc, #16]	; (39500 <ull_scan_handle_get+0x14>)
   394f0:	1ac0      	subs	r0, r0, r3
   394f2:	fba2 3000 	umull	r3, r0, r2, r0
}
   394f6:	f3c0 1007 	ubfx	r0, r0, #4, #8
   394fa:	4770      	bx	lr
   394fc:	20005258 	.word	0x20005258
   39500:	38e38e39 	.word	0x38e38e39

00039504 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   39504:	6800      	ldr	r0, [r0, #0]
   39506:	4a04      	ldr	r2, [pc, #16]	; (39518 <ull_scan_lll_handle_get+0x14>)
   39508:	4b04      	ldr	r3, [pc, #16]	; (3951c <ull_scan_lll_handle_get+0x18>)
   3950a:	1a80      	subs	r0, r0, r2
   3950c:	fba3 3000 	umull	r3, r0, r3, r0
}
   39510:	f3c0 1007 	ubfx	r0, r0, #4, #8
   39514:	4770      	bx	lr
   39516:	bf00      	nop
   39518:	20005258 	.word	0x20005258
   3951c:	38e38e39 	.word	0x38e38e39

00039520 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   39520:	b938      	cbnz	r0, 39532 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   39522:	4805      	ldr	r0, [pc, #20]	; (39538 <ull_scan_is_enabled_get+0x18>)
   39524:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
   39528:	f013 0f01 	tst.w	r3, #1
   3952c:	bf08      	it	eq
   3952e:	2000      	moveq	r0, #0
   39530:	4770      	bx	lr
		return NULL;
   39532:	2000      	movs	r0, #0
}
   39534:	4770      	bx	lr
   39536:	bf00      	nop
   39538:	20005258 	.word	0x20005258

0003953c <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   3953c:	4a04      	ldr	r2, [pc, #16]	; (39550 <ull_scan_is_disabled_get+0x14>)
   3953e:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   39542:	f003 0301 	and.w	r3, r3, #1
   39546:	4303      	orrs	r3, r0
}
   39548:	bf0c      	ite	eq
   3954a:	4610      	moveq	r0, r2
   3954c:	2000      	movne	r0, #0
   3954e:	4770      	bx	lr
   39550:	20005258 	.word	0x20005258

00039554 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   39554:	b990      	cbnz	r0, 3957c <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
   39556:	4a0a      	ldr	r2, [pc, #40]	; (39580 <ull_scan_is_enabled+0x2c>)
   39558:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   3955c:	f013 0001 	ands.w	r0, r3, #1
   39560:	d00d      	beq.n	3957e <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   39562:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   39566:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   39568:	f003 0301 	and.w	r3, r3, #1
   3956c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   39570:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   39574:	b11a      	cbz	r2, 3957e <ull_scan_is_enabled+0x2a>
   39576:	f040 0004 	orr.w	r0, r0, #4
   3957a:	4770      	bx	lr
		return 0U;
   3957c:	2000      	movs	r0, #0
}
   3957e:	4770      	bx	lr
   39580:	20005258 	.word	0x20005258

00039584 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   39584:	b950      	cbnz	r0, 3959c <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   39586:	4b06      	ldr	r3, [pc, #24]	; (395a0 <ull_scan_filter_pol_get+0x1c>)
   39588:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
   3958c:	f010 0001 	ands.w	r0, r0, #1
   39590:	d005      	beq.n	3959e <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   39592:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   39596:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   3959a:	4770      	bx	lr
		return 0;
   3959c:	2000      	movs	r0, #0
}
   3959e:	4770      	bx	lr
   395a0:	20005258 	.word	0x20005258

000395a4 <tx_ull_dequeue>:
{
   395a4:	4603      	mov	r3, r0
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   395a6:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
   395aa:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
{
   395ae:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   395b0:	b168      	cbz	r0, 395ce <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
   395b2:	4290      	cmp	r0, r2
   395b4:	d029      	beq.n	3960a <tx_ull_dequeue+0x66>
		if (conn->tx_head == conn->tx_data) {
   395b6:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
   395ba:	4290      	cmp	r0, r2
   395bc:	d01a      	beq.n	395f4 <tx_ull_dequeue+0x50>
		conn->tx_head = conn->tx_head->next;
   395be:	6812      	ldr	r2, [r2, #0]
   395c0:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		tx->next = NULL;
   395c4:	2300      	movs	r3, #0
}
   395c6:	4608      	mov	r0, r1
		tx->next = NULL;
   395c8:	600b      	str	r3, [r1, #0]
}
   395ca:	bc10      	pop	{r4}
   395cc:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   395ce:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
   395d2:	4290      	cmp	r0, r2
   395d4:	d024      	beq.n	39620 <tx_ull_dequeue+0x7c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   395d6:	7910      	ldrb	r0, [r2, #4]
   395d8:	f000 0003 	and.w	r0, r0, #3
   395dc:	2803      	cmp	r0, #3
   395de:	d00e      	beq.n	395fe <tx_ull_dequeue+0x5a>
		conn->tx_head = conn->tx_head->next;
   395e0:	6812      	ldr	r2, [r2, #0]
   395e2:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
			conn->tx_ctrl = NULL;
   395e6:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   395e8:	e9c3 2276 	strd	r2, r2, [r3, #472]	; 0x1d8
}
   395ec:	4608      	mov	r0, r1
		tx->next = tx;
   395ee:	6009      	str	r1, [r1, #0]
}
   395f0:	bc10      	pop	{r4}
   395f2:	4770      	bx	lr
   395f4:	4610      	mov	r0, r2
			conn->tx_data = conn->tx_data->next;
   395f6:	6800      	ldr	r0, [r0, #0]
   395f8:	f8c3 01e0 	str.w	r0, [r3, #480]	; 0x1e0
   395fc:	e7df      	b.n	395be <tx_ull_dequeue+0x1a>
	    ((pdu_data_tx->llctrl.opcode !=
   395fe:	79d0      	ldrb	r0, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39600:	2803      	cmp	r0, #3
   39602:	d0dc      	beq.n	395be <tx_ull_dequeue+0x1a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39604:	280a      	cmp	r0, #10
   39606:	d1eb      	bne.n	395e0 <tx_ull_dequeue+0x3c>
   39608:	e7d9      	b.n	395be <tx_ull_dequeue+0x1a>
   3960a:	f8d3 41dc 	ldr.w	r4, [r3, #476]	; 0x1dc
		conn->tx_head = conn->tx_head->next;
   3960e:	6812      	ldr	r2, [r2, #0]
   39610:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   39614:	4284      	cmp	r4, r0
			conn->tx_ctrl = conn->tx_head;
   39616:	bf18      	it	ne
   39618:	f8c3 21d8 	strne.w	r2, [r3, #472]	; 0x1d8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   3961c:	d1e6      	bne.n	395ec <tx_ull_dequeue+0x48>
   3961e:	e7e2      	b.n	395e6 <tx_ull_dequeue+0x42>
	if (conn->tx_head == conn->tx_ctrl) {
   39620:	2a00      	cmp	r2, #0
   39622:	d1e8      	bne.n	395f6 <tx_ull_dequeue+0x52>
   39624:	f8d3 41dc 	ldr.w	r4, [r3, #476]	; 0x1dc
   39628:	4610      	mov	r0, r2
   3962a:	e7f0      	b.n	3960e <tx_ull_dequeue+0x6a>

0003962c <init_reset>:
{
   3962c:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   3962e:	4813      	ldr	r0, [pc, #76]	; (3967c <init_reset+0x50>)
   39630:	4b13      	ldr	r3, [pc, #76]	; (39680 <init_reset+0x54>)
   39632:	2206      	movs	r2, #6
   39634:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39638:	f7fa fbd8 	bl	33dec <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   3963c:	4b11      	ldr	r3, [pc, #68]	; (39684 <init_reset+0x58>)
   3963e:	2203      	movs	r2, #3
   39640:	1d18      	adds	r0, r3, #4
   39642:	2124      	movs	r1, #36	; 0x24
   39644:	f7fa fbd2 	bl	33dec <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   39648:	4b0f      	ldr	r3, [pc, #60]	; (39688 <init_reset+0x5c>)
   3964a:	2218      	movs	r2, #24
   3964c:	1d18      	adds	r0, r3, #4
   3964e:	212c      	movs	r1, #44	; 0x2c
   39650:	f7fa fbcc 	bl	33dec <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   39654:	4b0d      	ldr	r3, [pc, #52]	; (3968c <init_reset+0x60>)
   39656:	221b      	movs	r2, #27
   39658:	1d18      	adds	r0, r3, #4
   3965a:	2108      	movs	r1, #8
   3965c:	f7fa fbc6 	bl	33dec <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   39660:	4b0b      	ldr	r3, [pc, #44]	; (39690 <init_reset+0x64>)
	default_phy_tx |= PHY_2M;
   39662:	490c      	ldr	r1, [pc, #48]	; (39694 <init_reset+0x68>)
	default_phy_rx |= PHY_2M;
   39664:	4a0c      	ldr	r2, [pc, #48]	; (39698 <init_reset+0x6c>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   39666:	480d      	ldr	r0, [pc, #52]	; (3969c <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   39668:	251b      	movs	r5, #27
   3966a:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= PHY_2M;
   3966c:	2303      	movs	r3, #3
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   3966e:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= PHY_2M;
   39672:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
   39674:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   39676:	8004      	strh	r4, [r0, #0]
}
   39678:	2000      	movs	r0, #0
   3967a:	bd38      	pop	{r3, r4, r5, pc}
   3967c:	20002d70 	.word	0x20002d70
   39680:	200052b0 	.word	0x200052b0
   39684:	200052d8 	.word	0x200052d8
   39688:	20005348 	.word	0x20005348
   3968c:	2000576c 	.word	0x2000576c
   39690:	20006c14 	.word	0x20006c14
   39694:	20006d96 	.word	0x20006d96
   39698:	20006d95 	.word	0x20006d95
   3969c:	20006c16 	.word	0x20006c16

000396a0 <ctrl_tx_pause_enqueue>:
{
   396a0:	b538      	push	{r3, r4, r5, lr}
   396a2:	460d      	mov	r5, r1
   396a4:	e9d0 3175 	ldrd	r3, r1, [r0, #468]	; 0x1d4
   396a8:	4604      	mov	r4, r0
	if (
   396aa:	b11b      	cbz	r3, 396b4 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   396ac:	f890 0176 	ldrb.w	r0, [r0, #374]	; 0x176
	    conn->tx_head &&
   396b0:	0780      	lsls	r0, r0, #30
   396b2:	d50b      	bpl.n	396cc <ctrl_tx_pause_enqueue+0x2c>
		if (!conn->tx_ctrl) {
   396b4:	b1e1      	cbz	r1, 396f0 <ctrl_tx_pause_enqueue+0x50>
			LL_ASSERT(!pause);
   396b6:	bb2a      	cbnz	r2, 39704 <ctrl_tx_pause_enqueue+0x64>
	tx->next = conn->tx_ctrl_last->next;
   396b8:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   396bc:	681a      	ldr	r2, [r3, #0]
   396be:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   396c0:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   396c2:	682b      	ldr	r3, [r5, #0]
   396c4:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
	if (!tx->next) {
   396c8:	b17b      	cbz	r3, 396ea <ctrl_tx_pause_enqueue+0x4a>
}
   396ca:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   396cc:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
   396d0:	07c0      	lsls	r0, r0, #31
   396d2:	d4ef      	bmi.n	396b4 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   396d4:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   396d8:	4283      	cmp	r3, r0
   396da:	d021      	beq.n	39720 <ctrl_tx_pause_enqueue+0x80>
		} else if (!conn->tx_ctrl) {
   396dc:	2900      	cmp	r1, #0
   396de:	d02e      	beq.n	3973e <ctrl_tx_pause_enqueue+0x9e>
			LL_ASSERT(!pause);
   396e0:	2a00      	cmp	r2, #0
   396e2:	d0e9      	beq.n	396b8 <ctrl_tx_pause_enqueue+0x18>
   396e4:	f640 236e 	movw	r3, #2670	; 0xa6e
   396e8:	e00e      	b.n	39708 <ctrl_tx_pause_enqueue+0x68>
		conn->tx_data_last = tx;
   396ea:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
}
   396ee:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   396f0:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   396f2:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
			if (!pause) {
   396f6:	2a00      	cmp	r2, #0
   396f8:	d1e6      	bne.n	396c8 <ctrl_tx_pause_enqueue+0x28>
				conn->tx_ctrl_last = tx;
   396fa:	e9c4 5576 	strd	r5, r5, [r4, #472]	; 0x1d8
	if (!tx->next) {
   396fe:	2b00      	cmp	r3, #0
   39700:	d1e3      	bne.n	396ca <ctrl_tx_pause_enqueue+0x2a>
   39702:	e7f2      	b.n	396ea <ctrl_tx_pause_enqueue+0x4a>
			LL_ASSERT(!pause);
   39704:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   39708:	4a15      	ldr	r2, [pc, #84]	; (39760 <ctrl_tx_pause_enqueue+0xc0>)
   3970a:	4916      	ldr	r1, [pc, #88]	; (39764 <ctrl_tx_pause_enqueue+0xc4>)
   3970c:	4816      	ldr	r0, [pc, #88]	; (39768 <ctrl_tx_pause_enqueue+0xc8>)
   3970e:	f010 fce5 	bl	4a0dc <printk>
   39712:	4040      	eors	r0, r0
   39714:	f380 8811 	msr	BASEPRI, r0
   39718:	f04f 0003 	mov.w	r0, #3
   3971c:	df02      	svc	2
   3971e:	e7cb      	b.n	396b8 <ctrl_tx_pause_enqueue+0x18>
			conn->tx_data = conn->tx_data->next;
   39720:	6818      	ldr	r0, [r3, #0]
   39722:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   39726:	2900      	cmp	r1, #0
   39728:	d1da      	bne.n	396e0 <ctrl_tx_pause_enqueue+0x40>
			tx->next = conn->tx_head->next;
   3972a:	6819      	ldr	r1, [r3, #0]
   3972c:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   3972e:	601d      	str	r5, [r3, #0]
			if (!pause) {
   39730:	b90a      	cbnz	r2, 39736 <ctrl_tx_pause_enqueue+0x96>
				conn->tx_ctrl_last = tx;
   39732:	e9c4 5576 	strd	r5, r5, [r4, #472]	; 0x1d8
   39736:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   39738:	2b00      	cmp	r3, #0
   3973a:	d1c6      	bne.n	396ca <ctrl_tx_pause_enqueue+0x2a>
   3973c:	e7d5      	b.n	396ea <ctrl_tx_pause_enqueue+0x4a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3973e:	7919      	ldrb	r1, [r3, #4]
   39740:	f001 0103 	and.w	r1, r1, #3
   39744:	2903      	cmp	r1, #3
   39746:	d004      	beq.n	39752 <ctrl_tx_pause_enqueue+0xb2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   39748:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
			LL_ASSERT(!pause);
   3974c:	2a00      	cmp	r2, #0
   3974e:	d0b3      	beq.n	396b8 <ctrl_tx_pause_enqueue+0x18>
   39750:	e7c8      	b.n	396e4 <ctrl_tx_pause_enqueue+0x44>
	    ((pdu_data_tx->llctrl.opcode !=
   39752:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39754:	2903      	cmp	r1, #3
   39756:	d0e8      	beq.n	3972a <ctrl_tx_pause_enqueue+0x8a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39758:	290a      	cmp	r1, #10
   3975a:	d1f5      	bne.n	39748 <ctrl_tx_pause_enqueue+0xa8>
   3975c:	e7e5      	b.n	3972a <ctrl_tx_pause_enqueue+0x8a>
   3975e:	bf00      	nop
   39760:	00053248 	.word	0x00053248
   39764:	00053288 	.word	0x00053288
   39768:	00052d50 	.word	0x00052d50

0003976c <tx_lll_flush>:
{
   3976c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   39770:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   39774:	4934      	ldr	r1, [pc, #208]	; (39848 <tx_lll_flush+0xdc>)
{
   39776:	b083      	sub	sp, #12
   39778:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   3977a:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   3977e:	4640      	mov	r0, r8
   39780:	f7fa fb98 	bl	33eb4 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   39784:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   39788:	4629      	mov	r1, r5
   3978a:	f008 fe7f 	bl	4248c <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   3978e:	4631      	mov	r1, r6
   39790:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   39792:	aa01      	add	r2, sp, #4
   39794:	f7fa fbcc 	bl	33f30 <memq_dequeue>
	while (link) {
   39798:	b328      	cbz	r0, 397e6 <tx_lll_flush+0x7a>
   3979a:	4c2c      	ldr	r4, [pc, #176]	; (3984c <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   3979c:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   397a0:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   397a4:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   397a6:	f894 c001 	ldrb.w	ip, [r4, #1]
   397aa:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   397ac:	1c4b      	adds	r3, r1, #1
   397ae:	b2db      	uxtb	r3, r3
		last = 0U;
   397b0:	459c      	cmp	ip, r3
   397b2:	bf08      	it	eq
   397b4:	2300      	moveq	r3, #0
	if (last == first) {
   397b6:	429a      	cmp	r2, r3
   397b8:	d035      	beq.n	39826 <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   397ba:	7822      	ldrb	r2, [r4, #0]
   397bc:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   397c0:	eb19 0c02 	adds.w	ip, r9, r2
   397c4:	d02f      	beq.n	39826 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   397c6:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = LLL_HANDLE_INVALID;
   397c8:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   397cc:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   397ce:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   397d2:	6002      	str	r2, [r0, #0]
		tx->next = link;
   397d4:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   397d6:	aa01      	add	r2, sp, #4
   397d8:	4631      	mov	r1, r6
   397da:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   397dc:	70e3      	strb	r3, [r4, #3]
   397de:	f7fa fba7 	bl	33f30 <memq_dequeue>
	while (link) {
   397e2:	2800      	cmp	r0, #0
   397e4:	d1de      	bne.n	397a4 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   397e6:	f8d8 0154 	ldr.w	r0, [r8, #340]	; 0x154
	rx = (void *)&conn->llcp_terminate.node_rx;
   397ea:	f508 74aa 	add.w	r4, r8, #340	; 0x154
	LL_ASSERT(rx->hdr.link);
   397ee:	b150      	cbz	r0, 39806 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   397f0:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   397f2:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   397f4:	f8c8 3154 	str.w	r3, [r8, #340]	; 0x154
	ull_rx_put(link, rx);
   397f8:	f7fe fbdc 	bl	37fb4 <ull_rx_put>
	ull_rx_sched();
   397fc:	f7fe fbea 	bl	37fd4 <ull_rx_sched>
}
   39800:	b003      	add	sp, #12
   39802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   39806:	f640 13da 	movw	r3, #2522	; 0x9da
   3980a:	4a11      	ldr	r2, [pc, #68]	; (39850 <tx_lll_flush+0xe4>)
   3980c:	4911      	ldr	r1, [pc, #68]	; (39854 <tx_lll_flush+0xe8>)
   3980e:	4812      	ldr	r0, [pc, #72]	; (39858 <tx_lll_flush+0xec>)
   39810:	f010 fc64 	bl	4a0dc <printk>
   39814:	4040      	eors	r0, r0
   39816:	f380 8811 	msr	BASEPRI, r0
   3981a:	f04f 0003 	mov.w	r0, #3
   3981e:	df02      	svc	2
   39820:	f8d8 0154 	ldr.w	r0, [r8, #340]	; 0x154
   39824:	e7e4      	b.n	397f0 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   39826:	f640 13c6 	movw	r3, #2502	; 0x9c6
   3982a:	4a09      	ldr	r2, [pc, #36]	; (39850 <tx_lll_flush+0xe4>)
   3982c:	490b      	ldr	r1, [pc, #44]	; (3985c <tx_lll_flush+0xf0>)
   3982e:	480a      	ldr	r0, [pc, #40]	; (39858 <tx_lll_flush+0xec>)
   39830:	f010 fc54 	bl	4a0dc <printk>
   39834:	4040      	eors	r0, r0
   39836:	f380 8811 	msr	BASEPRI, r0
   3983a:	f04f 0003 	mov.w	r0, #3
   3983e:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   39840:	2300      	movs	r3, #0
   39842:	801b      	strh	r3, [r3, #0]
   39844:	deff      	udf	#255	; 0xff
   39846:	bf00      	nop
   39848:	20002d70 	.word	0x20002d70
   3984c:	2000098c 	.word	0x2000098c
   39850:	00053248 	.word	0x00053248
   39854:	00053348 	.word	0x00053348
   39858:	00052d50 	.word	0x00052d50
   3985c:	00053340 	.word	0x00053340

00039860 <ticker_stop_op_cb>:
{
   39860:	b538      	push	{r3, r4, r5, lr}
   39862:	460d      	mov	r5, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39864:	b9b8      	cbnz	r0, 39896 <ticker_stop_op_cb+0x36>
	mfy.param = param;
   39866:	4c13      	ldr	r4, [pc, #76]	; (398b4 <ticker_stop_op_cb+0x54>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   39868:	2200      	movs	r2, #0
   3986a:	4623      	mov	r3, r4
   3986c:	2101      	movs	r1, #1
   3986e:	2002      	movs	r0, #2
	mfy.param = param;
   39870:	60a5      	str	r5, [r4, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   39872:	f7fa fbc1 	bl	33ff8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   39876:	b900      	cbnz	r0, 3987a <ticker_stop_op_cb+0x1a>
}
   39878:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!ret);
   3987a:	f44f 6318 	mov.w	r3, #2432	; 0x980
   3987e:	4a0e      	ldr	r2, [pc, #56]	; (398b8 <ticker_stop_op_cb+0x58>)
   39880:	490e      	ldr	r1, [pc, #56]	; (398bc <ticker_stop_op_cb+0x5c>)
   39882:	480f      	ldr	r0, [pc, #60]	; (398c0 <ticker_stop_op_cb+0x60>)
   39884:	f010 fc2a 	bl	4a0dc <printk>
   39888:	4040      	eors	r0, r0
   3988a:	f380 8811 	msr	BASEPRI, r0
   3988e:	f04f 0003 	mov.w	r0, #3
   39892:	df02      	svc	2
}
   39894:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39896:	f640 137a 	movw	r3, #2426	; 0x97a
   3989a:	4a07      	ldr	r2, [pc, #28]	; (398b8 <ticker_stop_op_cb+0x58>)
   3989c:	4909      	ldr	r1, [pc, #36]	; (398c4 <ticker_stop_op_cb+0x64>)
   3989e:	4808      	ldr	r0, [pc, #32]	; (398c0 <ticker_stop_op_cb+0x60>)
   398a0:	f010 fc1c 	bl	4a0dc <printk>
   398a4:	4040      	eors	r0, r0
   398a6:	f380 8811 	msr	BASEPRI, r0
   398aa:	f04f 0003 	mov.w	r0, #3
   398ae:	df02      	svc	2
   398b0:	e7d9      	b.n	39866 <ticker_stop_op_cb+0x6>
   398b2:	bf00      	nop
   398b4:	20000aa4 	.word	0x20000aa4
   398b8:	00053248 	.word	0x00053248
   398bc:	00052ed8 	.word	0x00052ed8
   398c0:	00052d50 	.word	0x00052d50
   398c4:	000532e0 	.word	0x000532e0

000398c8 <disabled_cb>:
{
   398c8:	b508      	push	{r3, lr}
	mfy.param = param;
   398ca:	4b0b      	ldr	r3, [pc, #44]	; (398f8 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   398cc:	2200      	movs	r2, #0
	mfy.param = param;
   398ce:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   398d0:	4611      	mov	r1, r2
   398d2:	2001      	movs	r0, #1
   398d4:	f7fa fb90 	bl	33ff8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   398d8:	b900      	cbnz	r0, 398dc <disabled_cb+0x14>
}
   398da:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   398dc:	f640 13ac 	movw	r3, #2476	; 0x9ac
   398e0:	4a06      	ldr	r2, [pc, #24]	; (398fc <disabled_cb+0x34>)
   398e2:	4907      	ldr	r1, [pc, #28]	; (39900 <disabled_cb+0x38>)
   398e4:	4807      	ldr	r0, [pc, #28]	; (39904 <disabled_cb+0x3c>)
   398e6:	f010 fbf9 	bl	4a0dc <printk>
   398ea:	4040      	eors	r0, r0
   398ec:	f380 8811 	msr	BASEPRI, r0
   398f0:	f04f 0003 	mov.w	r0, #3
   398f4:	df02      	svc	2
}
   398f6:	bd08      	pop	{r3, pc}
   398f8:	20000ac4 	.word	0x20000ac4
   398fc:	00053248 	.word	0x00053248
   39900:	00052ed8 	.word	0x00052ed8
   39904:	00052d50 	.word	0x00052d50

00039908 <conn_disable>:
{
   39908:	b538      	push	{r3, r4, r5, lr}
	return hdr->ref;
   3990a:	4603      	mov	r3, r0
   3990c:	f813 2b1c 	ldrb.w	r2, [r3], #28
	if (ull_ref_get(hdr)) {
   39910:	2a00      	cmp	r2, #0
   39912:	d02b      	beq.n	3996c <conn_disable+0x64>
		mfy.param = &conn->lll;
   39914:	4d18      	ldr	r5, [pc, #96]	; (39978 <conn_disable+0x70>)
		LL_ASSERT(!hdr->disabled_cb);
   39916:	6942      	ldr	r2, [r0, #20]
		mfy.param = &conn->lll;
   39918:	60ab      	str	r3, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   3991a:	4604      	mov	r4, r0
   3991c:	b16a      	cbz	r2, 3993a <conn_disable+0x32>
   3991e:	f640 1395 	movw	r3, #2453	; 0x995
   39922:	4a16      	ldr	r2, [pc, #88]	; (3997c <conn_disable+0x74>)
   39924:	4916      	ldr	r1, [pc, #88]	; (39980 <conn_disable+0x78>)
   39926:	4817      	ldr	r0, [pc, #92]	; (39984 <conn_disable+0x7c>)
   39928:	f010 fbd8 	bl	4a0dc <printk>
   3992c:	4040      	eors	r0, r0
   3992e:	f380 8811 	msr	BASEPRI, r0
   39932:	f04f 0003 	mov.w	r0, #3
   39936:	df02      	svc	2
   39938:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   3993a:	4913      	ldr	r1, [pc, #76]	; (39988 <conn_disable+0x80>)
		hdr->disabled_param = mfy.param;
   3993c:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3993e:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   39940:	6161      	str	r1, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   39942:	4b0d      	ldr	r3, [pc, #52]	; (39978 <conn_disable+0x70>)
   39944:	4611      	mov	r1, r2
   39946:	2001      	movs	r0, #1
   39948:	f7fa fb56 	bl	33ff8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   3994c:	b900      	cbnz	r0, 39950 <conn_disable+0x48>
}
   3994e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   39950:	f640 139c 	movw	r3, #2460	; 0x99c
   39954:	4a09      	ldr	r2, [pc, #36]	; (3997c <conn_disable+0x74>)
   39956:	490d      	ldr	r1, [pc, #52]	; (3998c <conn_disable+0x84>)
   39958:	480a      	ldr	r0, [pc, #40]	; (39984 <conn_disable+0x7c>)
   3995a:	f010 fbbf 	bl	4a0dc <printk>
   3995e:	4040      	eors	r0, r0
   39960:	f380 8811 	msr	BASEPRI, r0
   39964:	f04f 0003 	mov.w	r0, #3
   39968:	df02      	svc	2
}
   3996a:	bd38      	pop	{r3, r4, r5, pc}
		disabled_cb(&conn->lll);
   3996c:	4618      	mov	r0, r3
}
   3996e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   39972:	f7ff bfa9 	b.w	398c8 <disabled_cb>
   39976:	bf00      	nop
   39978:	20000ab4 	.word	0x20000ab4
   3997c:	00053248 	.word	0x00053248
   39980:	0005309c 	.word	0x0005309c
   39984:	00052d50 	.word	0x00052d50
   39988:	000398c9 	.word	0x000398c9
   3998c:	00052ed8 	.word	0x00052ed8

00039990 <conn_setup_adv_scan_disabled_cb>:
{
   39990:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   39992:	6883      	ldr	r3, [r0, #8]
   39994:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   39996:	7f53      	ldrb	r3, [r2, #29]
   39998:	09db      	lsrs	r3, r3, #7
	ftr = &(rx->rx_ftr);
   3999a:	f100 0108 	add.w	r1, r0, #8
	switch (lll->role) {
   3999e:	d00e      	beq.n	399be <conn_setup_adv_scan_disabled_cb+0x2e>
   399a0:	b98b      	cbnz	r3, 399c6 <conn_setup_adv_scan_disabled_cb+0x36>
		LL_ASSERT(0);
   399a2:	f640 03d5 	movw	r3, #2261	; 0x8d5
   399a6:	4a0a      	ldr	r2, [pc, #40]	; (399d0 <conn_setup_adv_scan_disabled_cb+0x40>)
   399a8:	490a      	ldr	r1, [pc, #40]	; (399d4 <conn_setup_adv_scan_disabled_cb+0x44>)
   399aa:	480b      	ldr	r0, [pc, #44]	; (399d8 <conn_setup_adv_scan_disabled_cb+0x48>)
   399ac:	f010 fb96 	bl	4a0dc <printk>
   399b0:	4040      	eors	r0, r0
   399b2:	f380 8811 	msr	BASEPRI, r0
   399b6:	f04f 0003 	mov.w	r0, #3
   399ba:	df02      	svc	2
}
   399bc:	bd08      	pop	{r3, pc}
   399be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_central_setup(rx, ftr, lll);
   399c2:	f7ee bc4d 	b.w	28260 <ull_central_setup>
}
   399c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_periph_setup(rx, ftr, lll);
   399ca:	f7ed bf7d 	b.w	278c8 <ull_periph_setup>
   399ce:	bf00      	nop
   399d0:	00053248 	.word	0x00053248
   399d4:	00052dd8 	.word	0x00052dd8
   399d8:	00052d50 	.word	0x00052d50

000399dc <ticker_start_conn_op_cb>:
{
   399dc:	b510      	push	{r4, lr}
   399de:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   399e0:	b990      	cbnz	r0, 39a08 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   399e2:	4620      	mov	r0, r4
   399e4:	f7fe fa18 	bl	37e18 <ull_update_unmark>
	LL_ASSERT(p == param);
   399e8:	4284      	cmp	r4, r0
   399ea:	d00c      	beq.n	39a06 <ticker_start_conn_op_cb+0x2a>
   399ec:	f640 03b7 	movw	r3, #2231	; 0x8b7
   399f0:	4a0c      	ldr	r2, [pc, #48]	; (39a24 <ticker_start_conn_op_cb+0x48>)
   399f2:	490d      	ldr	r1, [pc, #52]	; (39a28 <ticker_start_conn_op_cb+0x4c>)
   399f4:	480d      	ldr	r0, [pc, #52]	; (39a2c <ticker_start_conn_op_cb+0x50>)
   399f6:	f010 fb71 	bl	4a0dc <printk>
   399fa:	4040      	eors	r0, r0
   399fc:	f380 8811 	msr	BASEPRI, r0
   39a00:	f04f 0003 	mov.w	r0, #3
   39a04:	df02      	svc	2
}
   39a06:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39a08:	f640 03b4 	movw	r3, #2228	; 0x8b4
   39a0c:	4a05      	ldr	r2, [pc, #20]	; (39a24 <ticker_start_conn_op_cb+0x48>)
   39a0e:	4908      	ldr	r1, [pc, #32]	; (39a30 <ticker_start_conn_op_cb+0x54>)
   39a10:	4806      	ldr	r0, [pc, #24]	; (39a2c <ticker_start_conn_op_cb+0x50>)
   39a12:	f010 fb63 	bl	4a0dc <printk>
   39a16:	4040      	eors	r0, r0
   39a18:	f380 8811 	msr	BASEPRI, r0
   39a1c:	f04f 0003 	mov.w	r0, #3
   39a20:	df02      	svc	2
   39a22:	e7de      	b.n	399e2 <ticker_start_conn_op_cb+0x6>
   39a24:	00053248 	.word	0x00053248
   39a28:	000532d4 	.word	0x000532d4
   39a2c:	00052d50 	.word	0x00052d50
   39a30:	000532e0 	.word	0x000532e0

00039a34 <ticker_stop_conn_op_cb>:
{
   39a34:	b510      	push	{r4, lr}
   39a36:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39a38:	b990      	cbnz	r0, 39a60 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   39a3a:	4620      	mov	r0, r4
   39a3c:	f7fe f9e0 	bl	37e00 <ull_update_mark>
	LL_ASSERT(p == param);
   39a40:	4284      	cmp	r4, r0
   39a42:	d00c      	beq.n	39a5e <ticker_stop_conn_op_cb+0x2a>
   39a44:	f640 03ad 	movw	r3, #2221	; 0x8ad
   39a48:	4a0c      	ldr	r2, [pc, #48]	; (39a7c <ticker_stop_conn_op_cb+0x48>)
   39a4a:	490d      	ldr	r1, [pc, #52]	; (39a80 <ticker_stop_conn_op_cb+0x4c>)
   39a4c:	480d      	ldr	r0, [pc, #52]	; (39a84 <ticker_stop_conn_op_cb+0x50>)
   39a4e:	f010 fb45 	bl	4a0dc <printk>
   39a52:	4040      	eors	r0, r0
   39a54:	f380 8811 	msr	BASEPRI, r0
   39a58:	f04f 0003 	mov.w	r0, #3
   39a5c:	df02      	svc	2
}
   39a5e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   39a60:	f640 03aa 	movw	r3, #2218	; 0x8aa
   39a64:	4a05      	ldr	r2, [pc, #20]	; (39a7c <ticker_stop_conn_op_cb+0x48>)
   39a66:	4908      	ldr	r1, [pc, #32]	; (39a88 <ticker_stop_conn_op_cb+0x54>)
   39a68:	4806      	ldr	r0, [pc, #24]	; (39a84 <ticker_stop_conn_op_cb+0x50>)
   39a6a:	f010 fb37 	bl	4a0dc <printk>
   39a6e:	4040      	eors	r0, r0
   39a70:	f380 8811 	msr	BASEPRI, r0
   39a74:	f04f 0003 	mov.w	r0, #3
   39a78:	df02      	svc	2
   39a7a:	e7de      	b.n	39a3a <ticker_stop_conn_op_cb+0x6>
   39a7c:	00053248 	.word	0x00053248
   39a80:	000532d4 	.word	0x000532d4
   39a84:	00052d50 	.word	0x00052d50
   39a88:	000532e0 	.word	0x000532e0

00039a8c <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   39a8c:	b900      	cbnz	r0, 39a90 <ticker_update_conn_op_cb+0x4>
   39a8e:	4770      	bx	lr
{
   39a90:	b510      	push	{r4, lr}
   39a92:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   39a94:	f7fe f9cc 	bl	37e30 <ull_update_mark_get>
   39a98:	4284      	cmp	r4, r0
   39a9a:	d010      	beq.n	39abe <ticker_update_conn_op_cb+0x32>
   39a9c:	f7fe f9aa 	bl	37df4 <ull_disable_mark_get>
   39aa0:	4284      	cmp	r4, r0
   39aa2:	d00c      	beq.n	39abe <ticker_update_conn_op_cb+0x32>
   39aa4:	f640 03a3 	movw	r3, #2211	; 0x8a3
   39aa8:	4a05      	ldr	r2, [pc, #20]	; (39ac0 <ticker_update_conn_op_cb+0x34>)
   39aaa:	4906      	ldr	r1, [pc, #24]	; (39ac4 <ticker_update_conn_op_cb+0x38>)
   39aac:	4806      	ldr	r0, [pc, #24]	; (39ac8 <ticker_update_conn_op_cb+0x3c>)
   39aae:	f010 fb15 	bl	4a0dc <printk>
   39ab2:	4040      	eors	r0, r0
   39ab4:	f380 8811 	msr	BASEPRI, r0
   39ab8:	f04f 0003 	mov.w	r0, #3
   39abc:	df02      	svc	2
}
   39abe:	bd10      	pop	{r4, pc}
   39ac0:	00053248 	.word	0x00053248
   39ac4:	000532ec 	.word	0x000532ec
   39ac8:	00052d50 	.word	0x00052d50

00039acc <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   39acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->common.txn_lock) {
   39ad0:	f890 40e4 	ldrb.w	r4, [r0, #228]	; 0xe4
   39ad4:	07a4      	lsls	r4, r4, #30
   39ad6:	d447      	bmi.n	39b68 <reject_ext_ind_send+0x9c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   39ad8:	4604      	mov	r4, r0
   39ada:	4837      	ldr	r0, [pc, #220]	; (39bb8 <reject_ext_ind_send+0xec>)
   39adc:	461f      	mov	r7, r3
   39ade:	4690      	mov	r8, r2
   39ae0:	460e      	mov	r6, r1
   39ae2:	f7fa f9b1 	bl	33e48 <mem_acquire>
	if (!tx) {
   39ae6:	2800      	cmp	r0, #0
   39ae8:	d049      	beq.n	39b7e <reject_ext_ind_send+0xb2>
	conn->common.txn_lock = 1U;
   39aea:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4

	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39aee:	7903      	ldrb	r3, [r0, #4]
	conn->common.txn_lock = 1U;
   39af0:	f042 0202 	orr.w	r2, r2, #2
   39af4:	f884 20e4 	strb.w	r2, [r4, #228]	; 0xe4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   39af8:	2203      	movs	r2, #3
   39afa:	7142      	strb	r2, [r0, #5]
	    conn->tx_head &&
   39afc:	f8d4 51d4 	ldr.w	r5, [r4, #468]	; 0x1d4
   39b00:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   39b04:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39b08:	4313      	orrs	r3, r2
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   39b0a:	2211      	movs	r2, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   39b0c:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39b0e:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   39b10:	71c2      	strb	r2, [r0, #7]
	if (
   39b12:	b1dd      	cbz	r5, 39b4c <reject_ext_ind_send+0x80>
	    !conn->llcp_enc.pause_tx &&
   39b14:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	    conn->tx_head &&
   39b18:	079a      	lsls	r2, r3, #30
   39b1a:	d417      	bmi.n	39b4c <reject_ext_ind_send+0x80>
	    !conn->llcp_phy.pause_tx &&
   39b1c:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   39b20:	07db      	lsls	r3, r3, #31
   39b22:	d413      	bmi.n	39b4c <reject_ext_ind_send+0x80>
		if (conn->tx_head == conn->tx_data) {
   39b24:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
   39b28:	429d      	cmp	r5, r3
   39b2a:	d02b      	beq.n	39b84 <reject_ext_ind_send+0xb8>
		} else if (!conn->tx_ctrl) {
   39b2c:	2900      	cmp	r1, #0
   39b2e:	d035      	beq.n	39b9c <reject_ext_ind_send+0xd0>
   39b30:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
	tx->next = conn->tx_ctrl_last->next;
   39b34:	682b      	ldr	r3, [r5, #0]
   39b36:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   39b38:	6028      	str	r0, [r5, #0]
	conn->tx_ctrl_last = tx;
   39b3a:	6805      	ldr	r5, [r0, #0]
   39b3c:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39b40:	b17d      	cbz	r5, 39b62 <reject_ext_ind_send+0x96>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39b42:	2301      	movs	r3, #1
   39b44:	7133      	strb	r3, [r6, #4]

	return 0;
   39b46:	2000      	movs	r0, #0
}
   39b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!conn->tx_ctrl) {
   39b4c:	b189      	cbz	r1, 39b72 <reject_ext_ind_send+0xa6>
	tx->next = conn->tx_ctrl_last->next;
   39b4e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   39b52:	681a      	ldr	r2, [r3, #0]
   39b54:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   39b56:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   39b58:	6805      	ldr	r5, [r0, #0]
   39b5a:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   39b5e:	2d00      	cmp	r5, #0
   39b60:	d1ef      	bne.n	39b42 <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   39b62:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   39b66:	e7ec      	b.n	39b42 <reject_ext_ind_send+0x76>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39b68:	2301      	movs	r3, #1
   39b6a:	710b      	strb	r3, [r1, #4]
		*err = 0U;
   39b6c:	2000      	movs	r0, #0
}
   39b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			tx->next = conn->tx_head;
   39b72:	6005      	str	r5, [r0, #0]
				conn->tx_ctrl = tx;
   39b74:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   39b78:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   39b7c:	e7e0      	b.n	39b40 <reject_ext_ind_send+0x74>
		*err = -ENOBUFS;
   39b7e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   39b82:	e7e1      	b.n	39b48 <reject_ext_ind_send+0x7c>
			conn->tx_data = conn->tx_data->next;
   39b84:	682b      	ldr	r3, [r5, #0]
   39b86:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   39b8a:	2900      	cmp	r1, #0
   39b8c:	d1d0      	bne.n	39b30 <reject_ext_ind_send+0x64>
			tx->next = conn->tx_head->next;
   39b8e:	682b      	ldr	r3, [r5, #0]
   39b90:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   39b92:	6028      	str	r0, [r5, #0]
				conn->tx_ctrl = tx;
   39b94:	6805      	ldr	r5, [r0, #0]
				conn->tx_ctrl_last = tx;
   39b96:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   39b9a:	e7d1      	b.n	39b40 <reject_ext_ind_send+0x74>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39b9c:	792b      	ldrb	r3, [r5, #4]
   39b9e:	f003 0303 	and.w	r3, r3, #3
   39ba2:	2b03      	cmp	r3, #3
   39ba4:	d002      	beq.n	39bac <reject_ext_ind_send+0xe0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   39ba6:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
   39baa:	e7c3      	b.n	39b34 <reject_ext_ind_send+0x68>
	    ((pdu_data_tx->llctrl.opcode !=
   39bac:	79eb      	ldrb	r3, [r5, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39bae:	2b03      	cmp	r3, #3
   39bb0:	d0ed      	beq.n	39b8e <reject_ext_ind_send+0xc2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39bb2:	2b0a      	cmp	r3, #10
   39bb4:	d1f7      	bne.n	39ba6 <reject_ext_ind_send+0xda>
   39bb6:	e7ea      	b.n	39b8e <reject_ext_ind_send+0xc2>
   39bb8:	20005348 	.word	0x20005348

00039bbc <start_enc_rsp_send>:
{
   39bbc:	b430      	push	{r4, r5}
	conn->lll.enc_tx = 1;
   39bbe:	f890 207a 	ldrb.w	r2, [r0, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39bc2:	780b      	ldrb	r3, [r1, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   39bc4:	2501      	movs	r5, #1
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   39bc6:	2406      	movs	r4, #6
	conn->lll.enc_tx = 1;
   39bc8:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39bcc:	f043 0303 	orr.w	r3, r3, #3
	conn->lll.enc_tx = 1;
   39bd0:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
}
   39bd4:	2000      	movs	r0, #0
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   39bd6:	704d      	strb	r5, [r1, #1]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   39bd8:	70cc      	strb	r4, [r1, #3]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   39bda:	700b      	strb	r3, [r1, #0]
}
   39bdc:	bc30      	pop	{r4, r5}
   39bde:	4770      	bx	lr

00039be0 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   39be0:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
   39be4:	f8d0 21d8 	ldr.w	r2, [r0, #472]	; 0x1d8
   39be8:	079b      	lsls	r3, r3, #30
{
   39bea:	b570      	push	{r4, r5, r6, lr}
   39bec:	4604      	mov	r4, r0
   39bee:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   39bf0:	d512      	bpl.n	39c18 <ctrl_tx_sec_enqueue+0x38>
		if (!conn->tx_ctrl) {
   39bf2:	2a00      	cmp	r2, #0
   39bf4:	d045      	beq.n	39c82 <ctrl_tx_sec_enqueue+0xa2>
			tx->next = conn->tx_ctrl_last->next;
   39bf6:	f8d0 31dc 	ldr.w	r3, [r0, #476]	; 0x1dc
   39bfa:	681a      	ldr	r2, [r3, #0]
   39bfc:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   39bfe:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   39c00:	682b      	ldr	r3, [r5, #0]
   39c02:	b133      	cbz	r3, 39c12 <ctrl_tx_sec_enqueue+0x32>
}
   39c04:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   39c06:	bb8a      	cbnz	r2, 39c6c <ctrl_tx_sec_enqueue+0x8c>
			tx->next = conn->tx_head;
   39c08:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   39c0a:	e9c0 5575 	strd	r5, r5, [r0, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   39c0e:	f8c0 51dc 	str.w	r5, [r0, #476]	; 0x1dc
			conn->tx_data_last = tx;
   39c12:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
}
   39c16:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   39c18:	f8d0 11d4 	ldr.w	r1, [r0, #468]	; 0x1d4
   39c1c:	2900      	cmp	r1, #0
   39c1e:	d0f2      	beq.n	39c06 <ctrl_tx_sec_enqueue+0x26>
			if ((conn->llcp_req != conn->llcp_ack) &&
   39c20:	f890 31cf 	ldrb.w	r3, [r0, #463]	; 0x1cf
   39c24:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
   39c28:	f890 00f1 	ldrb.w	r0, [r0, #241]	; 0xf1
   39c2c:	4286      	cmp	r6, r0
   39c2e:	f003 0301 	and.w	r3, r3, #1
   39c32:	d003      	beq.n	39c3c <ctrl_tx_sec_enqueue+0x5c>
   39c34:	f894 00f2 	ldrb.w	r0, [r4, #242]	; 0xf2
   39c38:	2803      	cmp	r0, #3
   39c3a:	d02a      	beq.n	39c92 <ctrl_tx_sec_enqueue+0xb2>
	    !conn->llcp_phy.pause_tx &&
   39c3c:	b9a3      	cbnz	r3, 39c68 <ctrl_tx_sec_enqueue+0x88>
		if (conn->tx_head == conn->tx_data) {
   39c3e:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
   39c42:	4281      	cmp	r1, r0
   39c44:	d042      	beq.n	39ccc <ctrl_tx_sec_enqueue+0xec>
		} else if (!conn->tx_ctrl) {
   39c46:	2a00      	cmp	r2, #0
   39c48:	d032      	beq.n	39cb0 <ctrl_tx_sec_enqueue+0xd0>
			LL_ASSERT(!pause);
   39c4a:	b17b      	cbz	r3, 39c6c <ctrl_tx_sec_enqueue+0x8c>
   39c4c:	f640 236e 	movw	r3, #2670	; 0xa6e
			LL_ASSERT(!pause);
   39c50:	4a2d      	ldr	r2, [pc, #180]	; (39d08 <ctrl_tx_sec_enqueue+0x128>)
   39c52:	492e      	ldr	r1, [pc, #184]	; (39d0c <ctrl_tx_sec_enqueue+0x12c>)
   39c54:	482e      	ldr	r0, [pc, #184]	; (39d10 <ctrl_tx_sec_enqueue+0x130>)
   39c56:	f010 fa41 	bl	4a0dc <printk>
   39c5a:	4040      	eors	r0, r0
   39c5c:	f380 8811 	msr	BASEPRI, r0
   39c60:	f04f 0003 	mov.w	r0, #3
   39c64:	df02      	svc	2
   39c66:	e001      	b.n	39c6c <ctrl_tx_sec_enqueue+0x8c>
		if (!conn->tx_ctrl) {
   39c68:	2a00      	cmp	r2, #0
   39c6a:	d03f      	beq.n	39cec <ctrl_tx_sec_enqueue+0x10c>
	tx->next = conn->tx_ctrl_last->next;
   39c6c:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   39c70:	681a      	ldr	r2, [r3, #0]
   39c72:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   39c74:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   39c76:	682b      	ldr	r3, [r5, #0]
   39c78:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
		if (!tx->next) {
   39c7c:	2b00      	cmp	r3, #0
   39c7e:	d1c1      	bne.n	39c04 <ctrl_tx_sec_enqueue+0x24>
   39c80:	e7c7      	b.n	39c12 <ctrl_tx_sec_enqueue+0x32>
			tx->next = conn->tx_head;
   39c82:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   39c86:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   39c88:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
		if (!tx->next) {
   39c8c:	2b00      	cmp	r3, #0
   39c8e:	d1b9      	bne.n	39c04 <ctrl_tx_sec_enqueue+0x24>
   39c90:	e7bf      	b.n	39c12 <ctrl_tx_sec_enqueue+0x32>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   39c92:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   39c94:	f000 0003 	and.w	r0, r0, #3
   39c98:	2803      	cmp	r0, #3
   39c9a:	d1cf      	bne.n	39c3c <ctrl_tx_sec_enqueue+0x5c>
			    ((pdu_data_tx->llctrl.opcode ==
   39c9c:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   39c9e:	2803      	cmp	r0, #3
   39ca0:	d001      	beq.n	39ca6 <ctrl_tx_sec_enqueue+0xc6>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   39ca2:	280a      	cmp	r0, #10
   39ca4:	d1ca      	bne.n	39c3c <ctrl_tx_sec_enqueue+0x5c>
	    !conn->llcp_phy.pause_tx &&
   39ca6:	b33b      	cbz	r3, 39cf8 <ctrl_tx_sec_enqueue+0x118>
		if (!conn->tx_ctrl) {
   39ca8:	b162      	cbz	r2, 39cc4 <ctrl_tx_sec_enqueue+0xe4>
			LL_ASSERT(!pause);
   39caa:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   39cae:	e7cf      	b.n	39c50 <ctrl_tx_sec_enqueue+0x70>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39cb0:	790a      	ldrb	r2, [r1, #4]
   39cb2:	f002 0203 	and.w	r2, r2, #3
   39cb6:	2a03      	cmp	r2, #3
   39cb8:	d020      	beq.n	39cfc <ctrl_tx_sec_enqueue+0x11c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   39cba:	e9c4 1176 	strd	r1, r1, [r4, #472]	; 0x1d8
			LL_ASSERT(!pause);
   39cbe:	2b00      	cmp	r3, #0
   39cc0:	d0d4      	beq.n	39c6c <ctrl_tx_sec_enqueue+0x8c>
   39cc2:	e7c3      	b.n	39c4c <ctrl_tx_sec_enqueue+0x6c>
			tx->next = conn->tx_head;
   39cc4:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   39cc6:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   39cca:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   39ccc:	6808      	ldr	r0, [r1, #0]
   39cce:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   39cd2:	2a00      	cmp	r2, #0
   39cd4:	d1b9      	bne.n	39c4a <ctrl_tx_sec_enqueue+0x6a>
			tx->next = conn->tx_head->next;
   39cd6:	680a      	ldr	r2, [r1, #0]
   39cd8:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   39cda:	600d      	str	r5, [r1, #0]
			if (!pause) {
   39cdc:	2b00      	cmp	r3, #0
   39cde:	d18f      	bne.n	39c00 <ctrl_tx_sec_enqueue+0x20>
				conn->tx_ctrl = tx;
   39ce0:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   39ce2:	e9c4 5576 	strd	r5, r5, [r4, #472]	; 0x1d8
		if (!tx->next) {
   39ce6:	2b00      	cmp	r3, #0
   39ce8:	d18c      	bne.n	39c04 <ctrl_tx_sec_enqueue+0x24>
   39cea:	e792      	b.n	39c12 <ctrl_tx_sec_enqueue+0x32>
			tx->next = conn->tx_head;
   39cec:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   39cee:	e9c4 5575 	strd	r5, r5, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   39cf2:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
}
   39cf6:	bd70      	pop	{r4, r5, r6, pc}
				pause = true;
   39cf8:	2301      	movs	r3, #1
   39cfa:	e7a0      	b.n	39c3e <ctrl_tx_sec_enqueue+0x5e>
	    ((pdu_data_tx->llctrl.opcode !=
   39cfc:	79ca      	ldrb	r2, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   39cfe:	2a03      	cmp	r2, #3
   39d00:	d0e9      	beq.n	39cd6 <ctrl_tx_sec_enqueue+0xf6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   39d02:	2a0a      	cmp	r2, #10
   39d04:	d1d9      	bne.n	39cba <ctrl_tx_sec_enqueue+0xda>
   39d06:	e7e6      	b.n	39cd6 <ctrl_tx_sec_enqueue+0xf6>
   39d08:	00053248 	.word	0x00053248
   39d0c:	00053288 	.word	0x00053288
   39d10:	00052d50 	.word	0x00052d50

00039d14 <feature_rsp_send>:
{
   39d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->common.txn_lock) {
   39d18:	f890 70e4 	ldrb.w	r7, [r0, #228]	; 0xe4
   39d1c:	f017 0702 	ands.w	r7, r7, #2
   39d20:	d169      	bne.n	39df6 <feature_rsp_send+0xe2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   39d22:	4604      	mov	r4, r0
   39d24:	4838      	ldr	r0, [pc, #224]	; (39e08 <feature_rsp_send+0xf4>)
   39d26:	4691      	mov	r9, r2
   39d28:	4688      	mov	r8, r1
   39d2a:	f7fa f88d 	bl	33e48 <mem_acquire>
	if (!tx) {
   39d2e:	4605      	mov	r5, r0
   39d30:	2800      	cmp	r0, #0
   39d32:	d065      	beq.n	39e00 <feature_rsp_send+0xec>
	conn->common.txn_lock = 1U;
   39d34:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
	feat &= LL_FEAT_BIT_MASK;
   39d38:	4e34      	ldr	r6, [pc, #208]	; (39e0c <feature_rsp_send+0xf8>)
	conn->common.txn_lock = 1U;
   39d3a:	f041 0102 	orr.w	r1, r1, #2
   39d3e:	f884 10e4 	strb.w	r1, [r4, #228]	; 0xe4
   39d42:	f8d9 1008 	ldr.w	r1, [r9, #8]
   39d46:	f8d9 0004 	ldr.w	r0, [r9, #4]
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   39d4a:	e9d4 324e 	ldrd	r3, r2, [r4, #312]	; 0x138
	feat &= LL_FEAT_BIT_MASK;
   39d4e:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   39d52:	4330      	orrs	r0, r6
   39d54:	f041 0110 	orr.w	r1, r1, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   39d58:	400a      	ands	r2, r1
   39d5a:	4003      	ands	r3, r0
   39d5c:	e9c4 324e 	strd	r3, r2, [r4, #312]	; 0x138
   39d60:	f8d9 a004 	ldr.w	sl, [r9, #4]
   39d64:	f8d9 9008 	ldr.w	r9, [r9, #8]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   39d68:	f7fd fa28 	bl	371bc <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
   39d6c:	ea4a 0606 	orr.w	r6, sl, r6
	feat_result = feat_to_keep & feat_octet0;
   39d70:	4006      	ands	r6, r0
	feat_result &= 0xFF;
   39d72:	f006 03ff 	and.w	r3, r6, #255	; 0xff
   39d76:	f02a 0aff 	bic.w	sl, sl, #255	; 0xff
   39d7a:	ea43 030a 	orr.w	r3, r3, sl
	conn->common.fex_valid = 1U;
   39d7e:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   39d82:	7929      	ldrb	r1, [r5, #4]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   39d84:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
	feat &= LL_FEAT_BIT_MASK;
   39d88:	f009 09ff 	and.w	r9, r9, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   39d8c:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	feat &= LL_FEAT_BIT_MASK;
   39d90:	f049 0210 	orr.w	r2, r9, #16
	conn->llcp_feature.features_peer =
   39d94:	e9c4 3250 	strd	r3, r2, [r4, #320]	; 0x140
	conn->common.fex_valid = 1U;
   39d98:	f040 0001 	orr.w	r0, r0, #1
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   39d9c:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   39d9e:	f041 0103 	orr.w	r1, r1, #3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   39da2:	2609      	movs	r6, #9
	conn->common.fex_valid = 1U;
   39da4:	f884 00e4 	strb.w	r0, [r4, #228]	; 0xe4
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   39da8:	18a8      	adds	r0, r5, r2
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   39daa:	7129      	strb	r1, [r5, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   39dac:	716e      	strb	r6, [r5, #5]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   39dae:	4639      	mov	r1, r7
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   39db0:	71ee      	strb	r6, [r5, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   39db2:	f012 faa6 	bl	4c302 <memset>
	feat = feat_land_octet0(ll_feat_get(),
   39db6:	f7fd fa01 	bl	371bc <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   39dba:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
	dst[0] = val;
   39dbe:	7329      	strb	r1, [r5, #12]
   39dc0:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   39dc2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   39dc6:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   39dca:	4318      	orrs	r0, r3
	sys_put_le16(val >> 16, &dst[2]);
   39dcc:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
   39dce:	0a19      	lsrs	r1, r3, #8
   39dd0:	f3c0 2207 	ubfx	r2, r0, #8, #8
	dst[0] = val;
   39dd4:	7228      	strb	r0, [r5, #8]
   39dd6:	72ab      	strb	r3, [r5, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   39dd8:	4620      	mov	r0, r4
	dst[1] = val >> 8;
   39dda:	72e9      	strb	r1, [r5, #11]
   39ddc:	736f      	strb	r7, [r5, #13]
	dst[0] = val;
   39dde:	73af      	strb	r7, [r5, #14]
	dst[1] = val >> 8;
   39de0:	73ef      	strb	r7, [r5, #15]
   39de2:	726a      	strb	r2, [r5, #9]
   39de4:	4629      	mov	r1, r5
   39de6:	f7ff fefb 	bl	39be0 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39dea:	2301      	movs	r3, #1
	return 0;
   39dec:	4638      	mov	r0, r7
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39dee:	f888 3004 	strb.w	r3, [r8, #4]
}
   39df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   39df6:	2301      	movs	r3, #1
   39df8:	710b      	strb	r3, [r1, #4]
		*err = 0U;
   39dfa:	2000      	movs	r0, #0
}
   39dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*err = -ENOBUFS;
   39e00:	f06f 0068 	mvn.w	r0, #104	; 0x68
   39e04:	e7f5      	b.n	39df2 <feature_rsp_send+0xde>
   39e06:	bf00      	nop
   39e08:	20005348 	.word	0x20005348
   39e0c:	087830d0 	.word	0x087830d0

00039e10 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   39e10:	4801      	ldr	r0, [pc, #4]	; (39e18 <ll_conn_acquire+0x8>)
   39e12:	f7fa b819 	b.w	33e48 <mem_acquire>
   39e16:	bf00      	nop
   39e18:	200052b0 	.word	0x200052b0

00039e1c <ll_conn_release>:
	mem_release(conn, &conn_free);
   39e1c:	4901      	ldr	r1, [pc, #4]	; (39e24 <ll_conn_release+0x8>)
   39e1e:	f7fa b82d 	b.w	33e7c <mem_release>
   39e22:	bf00      	nop
   39e24:	200052b0 	.word	0x200052b0

00039e28 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   39e28:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   39e2c:	4901      	ldr	r1, [pc, #4]	; (39e34 <ll_conn_handle_get+0xc>)
   39e2e:	f7fa b841 	b.w	33eb4 <mem_index_get>
   39e32:	bf00      	nop
   39e34:	20002d70 	.word	0x20002d70

00039e38 <ll_conn_get>:
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39e38:	4602      	mov	r2, r0
   39e3a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39e3e:	4801      	ldr	r0, [pc, #4]	; (39e44 <ll_conn_get+0xc>)
   39e40:	f7fa b834 	b.w	33eac <mem_get>
   39e44:	20002d70 	.word	0x20002d70

00039e48 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39e48:	2805      	cmp	r0, #5
   39e4a:	d80c      	bhi.n	39e66 <ll_connected_get+0x1e>
{
   39e4c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39e4e:	4602      	mov	r2, r0
   39e50:	4604      	mov	r4, r0
   39e52:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39e56:	4805      	ldr	r0, [pc, #20]	; (39e6c <ll_connected_get+0x24>)
   39e58:	f7fa f828 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   39e5c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   39e5e:	42a3      	cmp	r3, r4
		return NULL;
   39e60:	bf18      	it	ne
   39e62:	2000      	movne	r0, #0
}
   39e64:	bd10      	pop	{r4, pc}
		return NULL;
   39e66:	2000      	movs	r0, #0
}
   39e68:	4770      	bx	lr
   39e6a:	bf00      	nop
   39e6c:	20002d70 	.word	0x20002d70

00039e70 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   39e70:	4801      	ldr	r0, [pc, #4]	; (39e78 <ll_tx_mem_acquire+0x8>)
   39e72:	f7f9 bfe9 	b.w	33e48 <mem_acquire>
   39e76:	bf00      	nop
   39e78:	200052d8 	.word	0x200052d8

00039e7c <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   39e7c:	4901      	ldr	r1, [pc, #4]	; (39e84 <ll_tx_mem_release+0x8>)
   39e7e:	f7f9 bffd 	b.w	33e7c <mem_release>
   39e82:	bf00      	nop
   39e84:	200052d8 	.word	0x200052d8

00039e88 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   39e88:	2805      	cmp	r0, #5
   39e8a:	d82c      	bhi.n	39ee6 <ll_tx_mem_enqueue+0x5e>
{
   39e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39e8e:	4602      	mov	r2, r0
   39e90:	4604      	mov	r4, r0
   39e92:	460d      	mov	r5, r1
   39e94:	481e      	ldr	r0, [pc, #120]	; (39f10 <ll_tx_mem_enqueue+0x88>)
   39e96:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39e9a:	f7fa f807 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   39e9e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   39ea0:	42a3      	cmp	r3, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39ea2:	4606      	mov	r6, r0
	if (conn->lll.handle != handle) {
   39ea4:	d11c      	bne.n	39ee0 <ll_tx_mem_enqueue+0x58>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   39ea6:	4a1b      	ldr	r2, [pc, #108]	; (39f14 <ll_tx_mem_enqueue+0x8c>)
   39ea8:	78d7      	ldrb	r7, [r2, #3]
	if (last == count) {
   39eaa:	7850      	ldrb	r0, [r2, #1]
   39eac:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   39eae:	1c7b      	adds	r3, r7, #1
   39eb0:	b2db      	uxtb	r3, r3
		last = 0U;
   39eb2:	4298      	cmp	r0, r3
   39eb4:	bf08      	it	eq
   39eb6:	2300      	moveq	r3, #0
	if (last == first) {
   39eb8:	4299      	cmp	r1, r3
   39eba:	d020      	beq.n	39efe <ll_tx_mem_enqueue+0x76>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   39ebc:	4610      	mov	r0, r2
   39ebe:	f810 1b04 	ldrb.w	r1, [r0], #4
   39ec2:	fb11 f107 	smulbb	r1, r1, r7
	if (!lll_tx) {
   39ec6:	1847      	adds	r7, r0, r1
   39ec8:	d019      	beq.n	39efe <ll_tx_mem_enqueue+0x76>
	lll_tx->handle = handle;
   39eca:	5244      	strh	r4, [r0, r1]
	lll_tx->node = tx;
   39ecc:	607d      	str	r5, [r7, #4]
	*last = idx; /* Commit: Update write index */
   39ece:	70d3      	strb	r3, [r2, #3]
   39ed0:	7833      	ldrb	r3, [r6, #0]
	if (ull_ref_get(&conn->ull)) {
   39ed2:	b95b      	cbnz	r3, 39eec <ll_tx_mem_enqueue+0x64>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   39ed4:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
   39ed8:	2b00      	cmp	r3, #0
   39eda:	db13      	blt.n	39f04 <ll_tx_mem_enqueue+0x7c>
	return 0;
   39edc:	2000      	movs	r0, #0
}
   39ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   39ee0:	f06f 0015 	mvn.w	r0, #21
}
   39ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   39ee6:	f06f 0015 	mvn.w	r0, #21
}
   39eea:	4770      	bx	lr
		mfy.param = conn;
   39eec:	4d0a      	ldr	r5, [pc, #40]	; (39f18 <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   39eee:	2200      	movs	r2, #0
   39ef0:	462b      	mov	r3, r5
   39ef2:	2101      	movs	r1, #1
   39ef4:	2003      	movs	r0, #3
		mfy.param = conn;
   39ef6:	60ae      	str	r6, [r5, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   39ef8:	f7fa f87e 	bl	33ff8 <mayfly_enqueue>
   39efc:	e7ea      	b.n	39ed4 <ll_tx_mem_enqueue+0x4c>
		return -ENOBUFS;
   39efe:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   39f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
   39f04:	4630      	mov	r0, r6
   39f06:	4621      	mov	r1, r4
   39f08:	f004 fe10 	bl	3eb2c <ull_periph_latency_cancel>
	return 0;
   39f0c:	2000      	movs	r0, #0
}
   39f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39f10:	20002d70 	.word	0x20002d70
   39f14:	20000a70 	.word	0x20000a70
   39f18:	20000a94 	.word	0x20000a94

00039f1c <ll_conn_update>:
{
   39f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   39f20:	2805      	cmp	r0, #5
{
   39f22:	f8bd 7020 	ldrh.w	r7, [sp, #32]
   39f26:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
   39f2a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   39f2e:	d838      	bhi.n	39fa2 <ll_conn_update+0x86>
   39f30:	4680      	mov	r8, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   39f32:	4692      	mov	sl, r2
   39f34:	4689      	mov	r9, r1
   39f36:	4602      	mov	r2, r0
   39f38:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   39f3c:	4842      	ldr	r0, [pc, #264]	; (3a048 <ll_conn_update+0x12c>)
   39f3e:	461c      	mov	r4, r3
   39f40:	f7f9 ffb4 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   39f44:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   39f46:	4543      	cmp	r3, r8
   39f48:	d12b      	bne.n	39fa2 <ll_conn_update+0x86>
	if (!cmd) {
   39f4a:	f1b9 0f00 	cmp.w	r9, #0
   39f4e:	d12b      	bne.n	39fa8 <ll_conn_update+0x8c>
		if (!conn->llcp_conn_param.disabled &&
   39f50:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
   39f54:	f013 0c20 	ands.w	ip, r3, #32
   39f58:	d041      	beq.n	39fde <ll_conn_update+0xc2>
		} else if (conn->lll.role) {
   39f5a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   39f5e:	2b00      	cmp	r3, #0
   39f60:	db6a      	blt.n	3a038 <ll_conn_update+0x11c>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   39f62:	f890 2118 	ldrb.w	r2, [r0, #280]	; 0x118
   39f66:	f890 3119 	ldrb.w	r3, [r0, #281]	; 0x119
   39f6a:	4293      	cmp	r3, r2
   39f6c:	d161      	bne.n	3a032 <ll_conn_update+0x116>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   39f6e:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
		conn->llcp_cu.interval = interval_max;
   39f72:	f8a0 711c 	strh.w	r7, [r0, #284]	; 0x11c
		conn->llcp_cu.req++;
   39f76:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   39f78:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   39f7a:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.req++;
   39f7e:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   39f82:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   39f86:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   39f88:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
		conn->llcp_cu.latency = latency;
   39f8c:	f8a0 611e 	strh.w	r6, [r0, #286]	; 0x11e
		conn->llcp_cu.timeout = timeout;
   39f90:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   39f94:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
		conn->llcp_cu.win_offset_us = 0U;
   39f98:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
	return 0;
   39f9c:	4618      	mov	r0, r3
}
   39f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   39fa2:	2002      	movs	r0, #2
}
   39fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cmd--;
   39fa8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		if (cmd) {
   39fac:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
   39fb0:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
   39fb4:	f890 2195 	ldrb.w	r2, [r0, #405]	; 0x195
   39fb8:	d020      	beq.n	39ffc <ll_conn_update+0xe0>
			if ((conn->llcp_conn_param.req ==
   39fba:	4293      	cmp	r3, r2
   39fbc:	d039      	beq.n	3a032 <ll_conn_update+0x116>
			    (conn->llcp_conn_param.state !=
   39fbe:	f890 3196 	ldrb.w	r3, [r0, #406]	; 0x196
			     conn->llcp_conn_param.ack) ||
   39fc2:	f003 020f 	and.w	r2, r3, #15
   39fc6:	2a03      	cmp	r2, #3
   39fc8:	d133      	bne.n	3a032 <ll_conn_update+0x116>
			conn->llcp_conn_param.state = cmd;
   39fca:	f369 0303 	bfi	r3, r9, #0, #4
			conn->llcp_conn_param.cmd = 1U;
   39fce:	f043 0310 	orr.w	r3, r3, #16
   39fd2:	f880 3196 	strb.w	r3, [r0, #406]	; 0x196
			conn->llcp_conn_param.status = status;
   39fd6:	f880 a197 	strb.w	sl, [r0, #407]	; 0x197
	return 0;
   39fda:	2000      	movs	r0, #0
   39fdc:	e7e2      	b.n	39fa4 <ll_conn_update+0x88>
		    (!conn->common.fex_valid ||
   39fde:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
		if (!conn->llcp_conn_param.disabled &&
   39fe2:	07db      	lsls	r3, r3, #31
   39fe4:	d506      	bpl.n	39ff4 <ll_conn_update+0xd8>
		     (conn->llcp_feature.features_conn &
   39fe6:	f8d0 1138 	ldr.w	r1, [r0, #312]	; 0x138
   39fea:	4663      	mov	r3, ip
   39fec:	f001 0202 	and.w	r2, r1, #2
		    (!conn->common.fex_valid ||
   39ff0:	4313      	orrs	r3, r2
   39ff2:	d0b2      	beq.n	39f5a <ll_conn_update+0x3e>
   39ff4:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
   39ff8:	f890 2195 	ldrb.w	r2, [r0, #405]	; 0x195
			if (conn->llcp_conn_param.req !=
   39ffc:	4293      	cmp	r3, r2
   39ffe:	d118      	bne.n	3a032 <ll_conn_update+0x116>
			conn->llcp_conn_param.state = cmd;
   3a000:	f8b0 2196 	ldrh.w	r2, [r0, #406]	; 0x196
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a004:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   3a008:	f8a0 4198 	strh.w	r4, [r0, #408]	; 0x198
			conn->llcp_conn_param.state = cmd;
   3a00c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
   3a010:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   3a012:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a016:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   3a018:	f8a0 719a 	strh.w	r7, [r0, #410]	; 0x19a
			conn->llcp_conn_param.req++;
   3a01c:	f880 3194 	strb.w	r3, [r0, #404]	; 0x194
			conn->llcp_conn_param.latency = latency;
   3a020:	f8a0 619c 	strh.w	r6, [r0, #412]	; 0x19c
			conn->llcp_conn_param.timeout = timeout;
   3a024:	f8a0 519e 	strh.w	r5, [r0, #414]	; 0x19e
			conn->llcp_conn_param.state = cmd;
   3a028:	f8a0 2196 	strh.w	r2, [r0, #406]	; 0x196
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a02c:	db06      	blt.n	3a03c <ll_conn_update+0x120>
	return 0;
   3a02e:	2000      	movs	r0, #0
   3a030:	e7b8      	b.n	39fa4 <ll_conn_update+0x88>
			return BT_HCI_ERR_CMD_DISALLOWED;
   3a032:	200c      	movs	r0, #12
}
   3a034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3a038:	201a      	movs	r0, #26
   3a03a:	e7b3      	b.n	39fa4 <ll_conn_update+0x88>
				ull_periph_latency_cancel(conn, handle);
   3a03c:	4641      	mov	r1, r8
   3a03e:	f004 fd75 	bl	3eb2c <ull_periph_latency_cancel>
	return 0;
   3a042:	2000      	movs	r0, #0
   3a044:	e7ae      	b.n	39fa4 <ll_conn_update+0x88>
   3a046:	bf00      	nop
   3a048:	20002d70 	.word	0x20002d70

0003a04c <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a04c:	2805      	cmp	r0, #5
   3a04e:	d81d      	bhi.n	3a08c <ll_chm_get+0x40>
{
   3a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a052:	4602      	mov	r2, r0
   3a054:	4606      	mov	r6, r0
   3a056:	460d      	mov	r5, r1
   3a058:	480d      	ldr	r0, [pc, #52]	; (3a090 <ll_chm_get+0x44>)
   3a05a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a05e:	f7f9 ff25 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   3a062:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a064:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a066:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   3a068:	d10e      	bne.n	3a088 <ll_chm_get+0x3c>
   3a06a:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   3a06e:	2600      	movs	r6, #0
   3a070:	f884 61e8 	strb.w	r6, [r4, #488]	; 0x1e8
		memcpy(chm, conn->lll.data_chan_map,
   3a074:	2205      	movs	r2, #5
   3a076:	4639      	mov	r1, r7
   3a078:	4628      	mov	r0, r5
   3a07a:	f012 f937 	bl	4c2ec <memcpy>
	} while (conn->chm_updated);
   3a07e:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
   3a082:	2800      	cmp	r0, #0
   3a084:	d1f4      	bne.n	3a070 <ll_chm_get+0x24>
}
   3a086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a088:	2002      	movs	r0, #2
}
   3a08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a08c:	2002      	movs	r0, #2
}
   3a08e:	4770      	bx	lr
   3a090:	20002d70 	.word	0x20002d70

0003a094 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a094:	2805      	cmp	r0, #5
   3a096:	d843      	bhi.n	3a120 <ll_terminate_ind_send+0x8c>
{
   3a098:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a09a:	4602      	mov	r2, r0
   3a09c:	4604      	mov	r4, r0
   3a09e:	460d      	mov	r5, r1
   3a0a0:	4823      	ldr	r0, [pc, #140]	; (3a130 <ll_terminate_ind_send+0x9c>)
   3a0a2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a0a6:	f7f9 ff01 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   3a0aa:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a0ac:	42a3      	cmp	r3, r4
   3a0ae:	d126      	bne.n	3a0fe <ll_terminate_ind_send+0x6a>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   3a0b0:	f890 3150 	ldrb.w	r3, [r0, #336]	; 0x150
   3a0b4:	f890 2151 	ldrb.w	r2, [r0, #337]	; 0x151
   3a0b8:	429a      	cmp	r2, r3
   3a0ba:	d12f      	bne.n	3a11c <ll_terminate_ind_send+0x88>
	switch (reason) {
   3a0bc:	1f6a      	subs	r2, r5, #5
   3a0be:	2a36      	cmp	r2, #54	; 0x36
   3a0c0:	d82a      	bhi.n	3a118 <ll_terminate_ind_send+0x84>
   3a0c2:	e8df f002 	tbb	[pc, r2]
   3a0c6:	291e      	.short	0x291e
   3a0c8:	29292929 	.word	0x29292929
   3a0cc:	29292929 	.word	0x29292929
   3a0d0:	29292929 	.word	0x29292929
   3a0d4:	291e1e1e 	.word	0x291e1e1e
   3a0d8:	1e292929 	.word	0x1e292929
   3a0dc:	29292929 	.word	0x29292929
   3a0e0:	29292929 	.word	0x29292929
   3a0e4:	29292929 	.word	0x29292929
   3a0e8:	291e2929 	.word	0x291e2929
   3a0ec:	29292929 	.word	0x29292929
   3a0f0:	29292929 	.word	0x29292929
   3a0f4:	29292929 	.word	0x29292929
   3a0f8:	29292929 	.word	0x29292929
   3a0fc:	1e          	.byte	0x1e
   3a0fd:	00          	.byte	0x00
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a0fe:	2002      	movs	r0, #2
}
   3a100:	bd38      	pop	{r3, r4, r5, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a102:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   3a106:	f880 5152 	strb.w	r5, [r0, #338]	; 0x152
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   3a10a:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a10c:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   3a10e:	f880 3150 	strb.w	r3, [r0, #336]	; 0x150
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a112:	db07      	blt.n	3a124 <ll_terminate_ind_send+0x90>
	return 0;
   3a114:	2000      	movs	r0, #0
}
   3a116:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   3a118:	2012      	movs	r0, #18
}
   3a11a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a11c:	200c      	movs	r0, #12
}
   3a11e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a120:	2002      	movs	r0, #2
}
   3a122:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   3a124:	4621      	mov	r1, r4
   3a126:	f004 fd01 	bl	3eb2c <ull_periph_latency_cancel>
	return 0;
   3a12a:	2000      	movs	r0, #0
}
   3a12c:	bd38      	pop	{r3, r4, r5, pc}
   3a12e:	bf00      	nop
   3a130:	20002d70 	.word	0x20002d70

0003a134 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a134:	2805      	cmp	r0, #5
   3a136:	d81d      	bhi.n	3a174 <ll_feature_req_send+0x40>
{
   3a138:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a13a:	4602      	mov	r2, r0
   3a13c:	4604      	mov	r4, r0
   3a13e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a142:	480f      	ldr	r0, [pc, #60]	; (3a180 <ll_feature_req_send+0x4c>)
   3a144:	f7f9 feb2 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   3a148:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   3a14a:	42a1      	cmp	r1, r4
   3a14c:	d10e      	bne.n	3a16c <ll_feature_req_send+0x38>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   3a14e:	f890 4130 	ldrb.w	r4, [r0, #304]	; 0x130
   3a152:	f890 2131 	ldrb.w	r2, [r0, #305]	; 0x131
   3a156:	42a2      	cmp	r2, r4
   3a158:	d10a      	bne.n	3a170 <ll_feature_req_send+0x3c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a15a:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   3a15e:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a160:	2c00      	cmp	r4, #0
	conn->llcp_feature.req++;
   3a162:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3a166:	db07      	blt.n	3a178 <ll_feature_req_send+0x44>
	return 0;
   3a168:	2000      	movs	r0, #0
}
   3a16a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a16c:	2002      	movs	r0, #2
}
   3a16e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a170:	200c      	movs	r0, #12
}
   3a172:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a174:	2002      	movs	r0, #2
}
   3a176:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   3a178:	f004 fcd8 	bl	3eb2c <ull_periph_latency_cancel>
	return 0;
   3a17c:	2000      	movs	r0, #0
}
   3a17e:	bd10      	pop	{r4, pc}
   3a180:	20002d70 	.word	0x20002d70

0003a184 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a184:	2805      	cmp	r0, #5
   3a186:	d81d      	bhi.n	3a1c4 <ll_version_ind_send+0x40>
{
   3a188:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a18a:	4602      	mov	r2, r0
   3a18c:	4604      	mov	r4, r0
   3a18e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a192:	480f      	ldr	r0, [pc, #60]	; (3a1d0 <ll_version_ind_send+0x4c>)
   3a194:	f7f9 fe8a 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   3a198:	8d01      	ldrh	r1, [r0, #40]	; 0x28
   3a19a:	42a1      	cmp	r1, r4
   3a19c:	d10e      	bne.n	3a1bc <ll_version_ind_send+0x38>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   3a19e:	f890 4148 	ldrb.w	r4, [r0, #328]	; 0x148
   3a1a2:	f890 2149 	ldrb.w	r2, [r0, #329]	; 0x149
   3a1a6:	42a2      	cmp	r2, r4
   3a1a8:	d10a      	bne.n	3a1c0 <ll_version_ind_send+0x3c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a1aa:	f990 4039 	ldrsb.w	r4, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   3a1ae:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a1b0:	2c00      	cmp	r4, #0
	conn->llcp_version.req++;
   3a1b2:	f880 2148 	strb.w	r2, [r0, #328]	; 0x148
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a1b6:	db07      	blt.n	3a1c8 <ll_version_ind_send+0x44>
	return 0;
   3a1b8:	2000      	movs	r0, #0
}
   3a1ba:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a1bc:	2002      	movs	r0, #2
}
   3a1be:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a1c0:	200c      	movs	r0, #12
}
   3a1c2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a1c4:	2002      	movs	r0, #2
}
   3a1c6:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   3a1c8:	f004 fcb0 	bl	3eb2c <ull_periph_latency_cancel>
	return 0;
   3a1cc:	2000      	movs	r0, #0
}
   3a1ce:	bd10      	pop	{r4, pc}
   3a1d0:	20002d70 	.word	0x20002d70

0003a1d4 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a1d4:	2805      	cmp	r0, #5
   3a1d6:	d840      	bhi.n	3a25a <ll_length_req_send+0x86>
{
   3a1d8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   3a1dc:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a1de:	4615      	mov	r5, r2
   3a1e0:	460e      	mov	r6, r1
   3a1e2:	4602      	mov	r2, r0
   3a1e4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a1e8:	4829      	ldr	r0, [pc, #164]	; (3a290 <ll_length_req_send+0xbc>)
   3a1ea:	f7f9 fe5f 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   3a1ee:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a1f0:	42a3      	cmp	r3, r4
   3a1f2:	d121      	bne.n	3a238 <ll_length_req_send+0x64>
	if (conn->llcp_length.disabled ||
   3a1f4:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   3a1f8:	f013 0108 	ands.w	r1, r3, #8
   3a1fc:	d127      	bne.n	3a24e <ll_length_req_send+0x7a>
	    (conn->common.fex_valid &&
   3a1fe:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
	if (conn->llcp_length.disabled ||
   3a202:	07d2      	lsls	r2, r2, #31
   3a204:	d41b      	bmi.n	3a23e <ll_length_req_send+0x6a>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   3a206:	f890 11bc 	ldrb.w	r1, [r0, #444]	; 0x1bc
   3a20a:	f890 21bd 	ldrb.w	r2, [r0, #445]	; 0x1bd
   3a20e:	428a      	cmp	r2, r1
   3a210:	d025      	beq.n	3a25e <ll_length_req_send+0x8a>
		switch (conn->llcp_length.state) {
   3a212:	f003 0307 	and.w	r3, r3, #7
   3a216:	2b07      	cmp	r3, #7
   3a218:	d01c      	beq.n	3a254 <ll_length_req_send+0x80>
   3a21a:	2201      	movs	r2, #1
   3a21c:	fa02 f303 	lsl.w	r3, r2, r3
   3a220:	f013 0f68 	tst.w	r3, #104	; 0x68
   3a224:	d016      	beq.n	3a254 <ll_length_req_send+0x80>
			if (!conn->llcp_length.cache.tx_octets) {
   3a226:	f8b0 31c8 	ldrh.w	r3, [r0, #456]	; 0x1c8
   3a22a:	b99b      	cbnz	r3, 3a254 <ll_length_req_send+0x80>
				conn->llcp_length.cache.tx_octets = tx_octets;
   3a22c:	f8a0 61c8 	strh.w	r6, [r0, #456]	; 0x1c8
				conn->llcp_length.cache.tx_time = tx_time;
   3a230:	f8a0 51ca 	strh.w	r5, [r0, #458]	; 0x1ca
				return 0;
   3a234:	4618      	mov	r0, r3
   3a236:	e000      	b.n	3a23a <ll_length_req_send+0x66>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a238:	2002      	movs	r0, #2
}
   3a23a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   3a23e:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
   3a242:	4689      	mov	r9, r1
   3a244:	f002 0820 	and.w	r8, r2, #32
	    (conn->common.fex_valid &&
   3a248:	ea58 0209 	orrs.w	r2, r8, r9
   3a24c:	d1db      	bne.n	3a206 <ll_length_req_send+0x32>
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3a24e:	201a      	movs	r0, #26
}
   3a250:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   3a254:	200c      	movs	r0, #12
}
   3a256:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a25a:	2002      	movs	r0, #2
}
   3a25c:	4770      	bx	lr
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a25e:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a262:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_length.tx_octets = tx_octets;
   3a266:	f8a0 61c2 	strh.w	r6, [r0, #450]	; 0x1c2
	conn->llcp_length.req++;
   3a26a:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a26c:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a270:	2900      	cmp	r1, #0
	conn->llcp_length.tx_time = tx_time;
   3a272:	f8a0 51c6 	strh.w	r5, [r0, #454]	; 0x1c6
	conn->llcp_length.req++;
   3a276:	f880 21bc 	strb.w	r2, [r0, #444]	; 0x1bc
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3a27a:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a27e:	db01      	blt.n	3a284 <ll_length_req_send+0xb0>
	return 0;
   3a280:	2000      	movs	r0, #0
   3a282:	e7da      	b.n	3a23a <ll_length_req_send+0x66>
		ull_periph_latency_cancel(conn, handle);
   3a284:	4621      	mov	r1, r4
   3a286:	f004 fc51 	bl	3eb2c <ull_periph_latency_cancel>
	return 0;
   3a28a:	2000      	movs	r0, #0
   3a28c:	e7d5      	b.n	3a23a <ll_length_req_send+0x66>
   3a28e:	bf00      	nop
   3a290:	20002d70 	.word	0x20002d70

0003a294 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   3a294:	4a03      	ldr	r2, [pc, #12]	; (3a2a4 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   3a296:	4b04      	ldr	r3, [pc, #16]	; (3a2a8 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   3a298:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   3a29a:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   3a29c:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   3a29e:	800b      	strh	r3, [r1, #0]
}
   3a2a0:	4770      	bx	lr
   3a2a2:	bf00      	nop
   3a2a4:	20006c14 	.word	0x20006c14
   3a2a8:	20006c16 	.word	0x20006c16

0003a2ac <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   3a2ac:	4a02      	ldr	r2, [pc, #8]	; (3a2b8 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   3a2ae:	4b03      	ldr	r3, [pc, #12]	; (3a2bc <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   3a2b0:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   3a2b2:	8019      	strh	r1, [r3, #0]
}
   3a2b4:	2000      	movs	r0, #0
   3a2b6:	4770      	bx	lr
   3a2b8:	20006c14 	.word	0x20006c14
   3a2bc:	20006c16 	.word	0x20006c16

0003a2c0 <ll_length_max_get>:
{
   3a2c0:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   3a2c2:	251b      	movs	r5, #27
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3a2c4:	f44f 74a4 	mov.w	r4, #328	; 0x148
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   3a2c8:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   3a2ca:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3a2cc:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   3a2ce:	801c      	strh	r4, [r3, #0]
}
   3a2d0:	bc30      	pop	{r4, r5}
   3a2d2:	4770      	bx	lr

0003a2d4 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a2d4:	2805      	cmp	r0, #5
   3a2d6:	d81a      	bhi.n	3a30e <ll_phy_get+0x3a>
{
   3a2d8:	b570      	push	{r4, r5, r6, lr}
   3a2da:	4604      	mov	r4, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a2dc:	4615      	mov	r5, r2
   3a2de:	460e      	mov	r6, r1
   3a2e0:	4602      	mov	r2, r0
   3a2e2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a2e6:	480b      	ldr	r0, [pc, #44]	; (3a314 <ll_phy_get+0x40>)
   3a2e8:	f7f9 fde0 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   3a2ec:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a2ee:	42a3      	cmp	r3, r4
   3a2f0:	d10b      	bne.n	3a30a <ll_phy_get+0x36>
	*tx = conn->lll.phy_tx;
   3a2f2:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
   3a2f6:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3a2fa:	7033      	strb	r3, [r6, #0]
	*rx = conn->lll.phy_rx;
   3a2fc:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
   3a300:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3a304:	702b      	strb	r3, [r5, #0]
	return 0;
   3a306:	2000      	movs	r0, #0
}
   3a308:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a30a:	2002      	movs	r0, #2
}
   3a30c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a30e:	2002      	movs	r0, #2
}
   3a310:	4770      	bx	lr
   3a312:	bf00      	nop
   3a314:	20002d70 	.word	0x20002d70

0003a318 <ll_phy_default_set>:
	default_phy_tx = tx;
   3a318:	4a02      	ldr	r2, [pc, #8]	; (3a324 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   3a31a:	4b03      	ldr	r3, [pc, #12]	; (3a328 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   3a31c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   3a31e:	7019      	strb	r1, [r3, #0]
}
   3a320:	2000      	movs	r0, #0
   3a322:	4770      	bx	lr
   3a324:	20006d96 	.word	0x20006d96
   3a328:	20006d95 	.word	0x20006d95

0003a32c <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a32c:	2805      	cmp	r0, #5
{
   3a32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a332:	d839      	bhi.n	3a3a8 <ll_phy_req_send+0x7c>
   3a334:	4680      	mov	r8, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a336:	4615      	mov	r5, r2
   3a338:	460f      	mov	r7, r1
   3a33a:	4602      	mov	r2, r0
   3a33c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a340:	4823      	ldr	r0, [pc, #140]	; (3a3d0 <ll_phy_req_send+0xa4>)
   3a342:	461e      	mov	r6, r3
   3a344:	f7f9 fdb2 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   3a348:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a34a:	4543      	cmp	r3, r8
   3a34c:	d12c      	bne.n	3a3a8 <ll_phy_req_send+0x7c>
	if (conn->llcp_phy.disabled ||
   3a34e:	f890 41cf 	ldrb.w	r4, [r0, #463]	; 0x1cf
   3a352:	f014 0408 	ands.w	r4, r4, #8
   3a356:	d132      	bne.n	3a3be <ll_phy_req_send+0x92>
	    (conn->common.fex_valid &&
   3a358:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
	if (conn->llcp_phy.disabled ||
   3a35c:	07db      	lsls	r3, r3, #31
   3a35e:	d427      	bmi.n	3a3b0 <ll_phy_req_send+0x84>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   3a360:	f890 31cc 	ldrb.w	r3, [r0, #460]	; 0x1cc
   3a364:	f890 21cd 	ldrb.w	r2, [r0, #461]	; 0x1cd
   3a368:	429a      	cmp	r2, r3
   3a36a:	d12c      	bne.n	3a3c6 <ll_phy_req_send+0x9a>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   3a36c:	f8b0 31ce 	ldrh.w	r3, [r0, #462]	; 0x1ce
   3a370:	4918      	ldr	r1, [pc, #96]	; (3a3d4 <ll_phy_req_send+0xa8>)
   3a372:	400b      	ands	r3, r1
   3a374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
	conn->llcp_phy.tx = tx;
   3a378:	4619      	mov	r1, r3
   3a37a:	f367 0184 	bfi	r1, r7, #2, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a37e:	f990 7039 	ldrsb.w	r7, [r0, #57]	; 0x39
	conn->llcp_phy.flags = flags;
   3a382:	f3c3 2307 	ubfx	r3, r3, #8, #8
	conn->llcp_phy.req++;
   3a386:	3201      	adds	r2, #1
	conn->llcp_phy.rx = rx;
   3a388:	f366 1147 	bfi	r1, r6, #5, #3
	conn->llcp_phy.flags = flags;
   3a38c:	f365 0341 	bfi	r3, r5, #1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a390:	2f00      	cmp	r7, #0
	conn->llcp_phy.req++;
   3a392:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
	conn->llcp_phy.rx = rx;
   3a396:	f880 11ce 	strb.w	r1, [r0, #462]	; 0x1ce
	conn->llcp_phy.flags = flags;
   3a39a:	f880 31cf 	strb.w	r3, [r0, #463]	; 0x1cf
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   3a39e:	da04      	bge.n	3a3aa <ll_phy_req_send+0x7e>
		ull_periph_latency_cancel(conn, handle);
   3a3a0:	4641      	mov	r1, r8
   3a3a2:	f004 fbc3 	bl	3eb2c <ull_periph_latency_cancel>
   3a3a6:	e000      	b.n	3a3aa <ll_phy_req_send+0x7e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a3a8:	2402      	movs	r4, #2
}
   3a3aa:	4620      	mov	r0, r4
   3a3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   3a3b0:	f8d0 1138 	ldr.w	r1, [r0, #312]	; 0x138
   3a3b4:	4623      	mov	r3, r4
   3a3b6:	f401 6210 	and.w	r2, r1, #2304	; 0x900
   3a3ba:	4313      	orrs	r3, r2
   3a3bc:	d1d0      	bne.n	3a360 <ll_phy_req_send+0x34>
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3a3be:	241a      	movs	r4, #26
}
   3a3c0:	4620      	mov	r0, r4
   3a3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3a3c6:	240c      	movs	r4, #12
}
   3a3c8:	4620      	mov	r0, r4
   3a3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a3ce:	bf00      	nop
   3a3d0:	20002d70 	.word	0x20002d70
   3a3d4:	fffffbfc 	.word	0xfffffbfc

0003a3d8 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a3d8:	2805      	cmp	r0, #5
   3a3da:	d81d      	bhi.n	3a418 <ll_apto_get+0x40>
{
   3a3dc:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a3de:	4602      	mov	r2, r0
   3a3e0:	4604      	mov	r4, r0
   3a3e2:	460d      	mov	r5, r1
   3a3e4:	480d      	ldr	r0, [pc, #52]	; (3a41c <ll_apto_get+0x44>)
   3a3e6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a3ea:	f7f9 fd5f 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   3a3ee:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a3f0:	42a3      	cmp	r3, r4
   3a3f2:	d10f      	bne.n	3a414 <ll_apto_get+0x3c>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   3a3f4:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
   3a3f8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   3a3fa:	4a09      	ldr	r2, [pc, #36]	; (3a420 <ll_apto_get+0x48>)
   3a3fc:	fb03 f301 	mul.w	r3, r3, r1
   3a400:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   3a404:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   3a408:	fba2 2303 	umull	r2, r3, r2, r3
   3a40c:	099b      	lsrs	r3, r3, #6
   3a40e:	802b      	strh	r3, [r5, #0]
	return 0;
   3a410:	2000      	movs	r0, #0
}
   3a412:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a414:	2002      	movs	r0, #2
}
   3a416:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a418:	2002      	movs	r0, #2
}
   3a41a:	4770      	bx	lr
   3a41c:	20002d70 	.word	0x20002d70
   3a420:	10624dd3 	.word	0x10624dd3

0003a424 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a424:	2805      	cmp	r0, #5
   3a426:	d81e      	bhi.n	3a466 <ll_apto_set+0x42>
{
   3a428:	b570      	push	{r4, r5, r6, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a42a:	4602      	mov	r2, r0
   3a42c:	4604      	mov	r4, r0
   3a42e:	460e      	mov	r6, r1
   3a430:	480e      	ldr	r0, [pc, #56]	; (3a46c <ll_apto_set+0x48>)
   3a432:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a436:	f7f9 fd39 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   3a43a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a43c:	42a3      	cmp	r3, r4
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a43e:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   3a440:	d10f      	bne.n	3a462 <ll_apto_set+0x3e>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   3a442:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   3a444:	f240 42e2 	movw	r2, #1250	; 0x4e2
   3a448:	fb02 f203 	mul.w	r2, r2, r3
   3a44c:	f242 7310 	movw	r3, #10000	; 0x2710
   3a450:	fb03 2306 	mla	r3, r3, r6, r2
   3a454:	3b01      	subs	r3, #1
	return 0;
   3a456:	2000      	movs	r0, #0
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   3a458:	fbb3 f3f2 	udiv	r3, r3, r2
   3a45c:	f8a5 30ce 	strh.w	r3, [r5, #206]	; 0xce
}
   3a460:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a462:	2002      	movs	r0, #2
}
   3a464:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3a466:	2002      	movs	r0, #2
}
   3a468:	4770      	bx	lr
   3a46a:	bf00      	nop
   3a46c:	20002d70 	.word	0x20002d70

0003a470 <ull_conn_init>:
	err = init_reset();
   3a470:	f7ff b8dc 	b.w	3962c <init_reset>

0003a474 <ull_conn_reset>:
{
   3a474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)ull_central_reset();
   3a478:	f004 fd1c 	bl	3eeb4 <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a47c:	4e1a      	ldr	r6, [pc, #104]	; (3a4e8 <ull_conn_reset+0x74>)
	LL_ASSERT(err == 0 || err == -EALREADY);
   3a47e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 3a500 <ull_conn_reset+0x8c>
   3a482:	4f1a      	ldr	r7, [pc, #104]	; (3a4ec <ull_conn_reset+0x78>)
	(void)ull_central_reset();
   3a484:	2400      	movs	r4, #0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a486:	b2a2      	uxth	r2, r4
   3a488:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a48c:	4630      	mov	r0, r6
   3a48e:	f7f9 fd0d 	bl	33eac <mem_get>
   3a492:	4605      	mov	r5, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   3a494:	1d60      	adds	r0, r4, #5
   3a496:	f105 021c 	add.w	r2, r5, #28
   3a49a:	4629      	mov	r1, r5
   3a49c:	b2c0      	uxtb	r0, r0
   3a49e:	f7fd fd0b 	bl	37eb8 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   3a4a2:	b170      	cbz	r0, 3a4c2 <ull_conn_reset+0x4e>
   3a4a4:	3078      	adds	r0, #120	; 0x78
   3a4a6:	d00c      	beq.n	3a4c2 <ull_conn_reset+0x4e>
   3a4a8:	f640 03e3 	movw	r3, #2275	; 0x8e3
   3a4ac:	4642      	mov	r2, r8
   3a4ae:	4639      	mov	r1, r7
   3a4b0:	480f      	ldr	r0, [pc, #60]	; (3a4f0 <ull_conn_reset+0x7c>)
   3a4b2:	f00f fe13 	bl	4a0dc <printk>
   3a4b6:	4040      	eors	r0, r0
   3a4b8:	f380 8811 	msr	BASEPRI, r0
   3a4bc:	f04f 0003 	mov.w	r0, #3
   3a4c0:	df02      	svc	2
	conn->lll.handle = LLL_HANDLE_INVALID;
   3a4c2:	3401      	adds	r4, #1
   3a4c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
	conn->lll.link_tx_free = NULL;
   3a4c8:	2300      	movs	r3, #0
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a4ca:	2c06      	cmp	r4, #6
	conn->lll.handle = LLL_HANDLE_INVALID;
   3a4cc:	852a      	strh	r2, [r5, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   3a4ce:	676b      	str	r3, [r5, #116]	; 0x74
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a4d0:	d1d9      	bne.n	3a486 <ull_conn_reset+0x12>
	MFIFO_INIT(conn_tx);
   3a4d2:	4808      	ldr	r0, [pc, #32]	; (3a4f4 <ull_conn_reset+0x80>)
	MFIFO_INIT(conn_ack);
   3a4d4:	4908      	ldr	r1, [pc, #32]	; (3a4f8 <ull_conn_reset+0x84>)
	conn_upd_curr = NULL;
   3a4d6:	4a09      	ldr	r2, [pc, #36]	; (3a4fc <ull_conn_reset+0x88>)
	MFIFO_INIT(conn_tx);
   3a4d8:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   3a4da:	804b      	strh	r3, [r1, #2]
}
   3a4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_upd_curr = NULL;
   3a4e0:	6013      	str	r3, [r2, #0]
	err = init_reset();
   3a4e2:	f7ff b8a3 	b.w	3962c <init_reset>
   3a4e6:	bf00      	nop
   3a4e8:	20002d70 	.word	0x20002d70
   3a4ec:	00053230 	.word	0x00053230
   3a4f0:	00052d50 	.word	0x00052d50
   3a4f4:	20000a70 	.word	0x20000a70
   3a4f8:	2000098c 	.word	0x2000098c
   3a4fc:	200052b4 	.word	0x200052b4
   3a500:	00053248 	.word	0x00053248

0003a504 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   3a504:	4b01      	ldr	r3, [pc, #4]	; (3a50c <ull_conn_default_tx_octets_get+0x8>)
}
   3a506:	8818      	ldrh	r0, [r3, #0]
   3a508:	4770      	bx	lr
   3a50a:	bf00      	nop
   3a50c:	20006c14 	.word	0x20006c14

0003a510 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   3a510:	4b01      	ldr	r3, [pc, #4]	; (3a518 <ull_conn_default_tx_time_get+0x8>)
}
   3a512:	8818      	ldrh	r0, [r3, #0]
   3a514:	4770      	bx	lr
   3a516:	bf00      	nop
   3a518:	20006c16 	.word	0x20006c16

0003a51c <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   3a51c:	4b01      	ldr	r3, [pc, #4]	; (3a524 <ull_conn_default_phy_tx_get+0x8>)
}
   3a51e:	7818      	ldrb	r0, [r3, #0]
   3a520:	4770      	bx	lr
   3a522:	bf00      	nop
   3a524:	20006d96 	.word	0x20006d96

0003a528 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   3a528:	4b01      	ldr	r3, [pc, #4]	; (3a530 <ull_conn_default_phy_rx_get+0x8>)
}
   3a52a:	7818      	ldrb	r0, [r3, #0]
   3a52c:	4770      	bx	lr
   3a52e:	bf00      	nop
   3a530:	20006d95 	.word	0x20006d95

0003a534 <ull_conn_peer_connected>:
{
   3a534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a538:	4f1a      	ldr	r7, [pc, #104]	; (3a5a4 <ull_conn_peer_connected+0x70>)
{
   3a53a:	4682      	mov	sl, r0
   3a53c:	468b      	mov	fp, r1
   3a53e:	4690      	mov	r8, r2
   3a540:	4699      	mov	r9, r3
   3a542:	2400      	movs	r4, #0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a544:	b2a5      	uxth	r5, r4
   3a546:	462a      	mov	r2, r5
   3a548:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a54c:	4638      	mov	r0, r7
   3a54e:	f7f9 fcad 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   3a552:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a554:	42ab      	cmp	r3, r5
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a556:	4606      	mov	r6, r0
		if (conn &&
   3a558:	f104 0401 	add.w	r4, r4, #1
	if (conn->lll.handle != handle) {
   3a55c:	d105      	bne.n	3a56a <ull_conn_peer_connected+0x36>
		    conn->peer_id_addr_type == peer_id_addr_type &&
   3a55e:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
   3a562:	f3c3 0340 	ubfx	r3, r3, #1, #1
		if (conn &&
   3a566:	4543      	cmp	r3, r8
   3a568:	d004      	beq.n	3a574 <ull_conn_peer_connected+0x40>
	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   3a56a:	2c06      	cmp	r4, #6
   3a56c:	d1ea      	bne.n	3a544 <ull_conn_peer_connected+0x10>
	return false;
   3a56e:	2000      	movs	r0, #0
}
   3a570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !memcmp(conn->peer_id_addr, peer_id_addr, BDADDR_SIZE) &&
   3a574:	2206      	movs	r2, #6
   3a576:	4649      	mov	r1, r9
   3a578:	30dd      	adds	r0, #221	; 0xdd
   3a57a:	f011 fea7 	bl	4c2cc <memcmp>
		    conn->peer_id_addr_type == peer_id_addr_type &&
   3a57e:	2800      	cmp	r0, #0
   3a580:	d1f3      	bne.n	3a56a <ull_conn_peer_connected+0x36>
		    conn->own_id_addr_type == own_id_addr_type &&
   3a582:	f896 30d6 	ldrb.w	r3, [r6, #214]	; 0xd6
   3a586:	f003 0301 	and.w	r3, r3, #1
		    !memcmp(conn->peer_id_addr, peer_id_addr, BDADDR_SIZE) &&
   3a58a:	4553      	cmp	r3, sl
   3a58c:	d1ed      	bne.n	3a56a <ull_conn_peer_connected+0x36>
		    !memcmp(conn->own_id_addr, own_id_addr, BDADDR_SIZE)) {
   3a58e:	f106 00d7 	add.w	r0, r6, #215	; 0xd7
   3a592:	2206      	movs	r2, #6
   3a594:	4659      	mov	r1, fp
   3a596:	f011 fe99 	bl	4c2cc <memcmp>
		    conn->own_id_addr_type == own_id_addr_type &&
   3a59a:	2800      	cmp	r0, #0
   3a59c:	d1e5      	bne.n	3a56a <ull_conn_peer_connected+0x36>
			return true;
   3a59e:	2001      	movs	r0, #1
   3a5a0:	e7e6      	b.n	3a570 <ull_conn_peer_connected+0x3c>
   3a5a2:	bf00      	nop
   3a5a4:	20002d70 	.word	0x20002d70

0003a5a8 <ull_conn_setup>:
{
   3a5a8:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   3a5aa:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   3a5ac:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   3a5ae:	681d      	ldr	r5, [r3, #0]
   3a5b0:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(hdr)) {
   3a5b2:	b19b      	cbz	r3, 3a5dc <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   3a5b4:	696b      	ldr	r3, [r5, #20]
   3a5b6:	460c      	mov	r4, r1
   3a5b8:	b163      	cbz	r3, 3a5d4 <ull_conn_setup+0x2c>
   3a5ba:	f240 33ed 	movw	r3, #1005	; 0x3ed
   3a5be:	4a0a      	ldr	r2, [pc, #40]	; (3a5e8 <ull_conn_setup+0x40>)
   3a5c0:	490a      	ldr	r1, [pc, #40]	; (3a5ec <ull_conn_setup+0x44>)
   3a5c2:	480b      	ldr	r0, [pc, #44]	; (3a5f0 <ull_conn_setup+0x48>)
   3a5c4:	f00f fd8a 	bl	4a0dc <printk>
   3a5c8:	4040      	eors	r0, r0
   3a5ca:	f380 8811 	msr	BASEPRI, r0
   3a5ce:	f04f 0003 	mov.w	r0, #3
   3a5d2:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   3a5d4:	4b07      	ldr	r3, [pc, #28]	; (3a5f4 <ull_conn_setup+0x4c>)
   3a5d6:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   3a5da:	bd38      	pop	{r3, r4, r5, pc}
		conn_setup_adv_scan_disabled_cb(rx);
   3a5dc:	4608      	mov	r0, r1
}
   3a5de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   3a5e2:	f7ff b9d5 	b.w	39990 <conn_setup_adv_scan_disabled_cb>
   3a5e6:	bf00      	nop
   3a5e8:	00053248 	.word	0x00053248
   3a5ec:	0005309c 	.word	0x0005309c
   3a5f0:	00052d50 	.word	0x00052d50
   3a5f4:	00039991 	.word	0x00039991

0003a5f8 <ull_conn_rx>:
{
   3a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	conn = ll_connected_get((*rx)->hdr.handle);
   3a5fc:	680b      	ldr	r3, [r1, #0]
   3a5fe:	88de      	ldrh	r6, [r3, #6]
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a600:	2e05      	cmp	r6, #5
{
   3a602:	b085      	sub	sp, #20
	if (handle >= CONFIG_BT_MAX_CONN) {
   3a604:	f200 80b1 	bhi.w	3a76a <ull_conn_rx+0x172>
   3a608:	4607      	mov	r7, r0
   3a60a:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a60c:	4632      	mov	r2, r6
   3a60e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3a612:	48ab      	ldr	r0, [pc, #684]	; (3a8c0 <ull_conn_rx+0x2c8>)
   3a614:	f7f9 fc4a 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   3a618:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3a61a:	42b3      	cmp	r3, r6
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3a61c:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   3a61e:	f040 80a3 	bne.w	3a768 <ull_conn_rx+0x170>
	pdu_rx = (void *)(*rx)->pdu;
   3a622:	6826      	ldr	r6, [r4, #0]
   3a624:	f890 1176 	ldrb.w	r1, [r0, #374]	; 0x176
	switch (pdu_rx->ll_id) {
   3a628:	7f33      	ldrb	r3, [r6, #28]
   3a62a:	f3c3 0301 	ubfx	r3, r3, #0, #2
   3a62e:	b25a      	sxtb	r2, r3
	pdu_rx = (void *)(*rx)->pdu;
   3a630:	46b4      	mov	ip, r6
	switch (pdu_rx->ll_id) {
   3a632:	b2db      	uxtb	r3, r3
   3a634:	f001 0001 	and.w	r0, r1, #1
   3a638:	2a00      	cmp	r2, #0
   3a63a:	f000 80e2 	beq.w	3a802 <ull_conn_rx+0x20a>
   3a63e:	2b02      	cmp	r3, #2
   3a640:	f240 80d4 	bls.w	3a7ec <ull_conn_rx+0x1f4>
	pdu_rx = (void *)(*rx)->pdu;
   3a644:	f106 0c1c 	add.w	ip, r6, #28
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   3a648:	f896 801f 	ldrb.w	r8, [r6, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   3a64c:	2800      	cmp	r0, #0
   3a64e:	f000 8092 	beq.w	3a776 <ull_conn_rx+0x17e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   3a652:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3a656:	2b00      	cmp	r3, #0
   3a658:	f001 0004 	and.w	r0, r1, #4
   3a65c:	f2c0 8134 	blt.w	3a8c8 <ull_conn_rx+0x2d0>
	return (!conn->lll.role &&
   3a660:	2800      	cmp	r0, #0
   3a662:	f000 85d3 	beq.w	3b20c <ull_conn_rx+0xc14>
		 (conn->llcp_enc.refresh &&
   3a666:	f1b8 0f02 	cmp.w	r8, #2
   3a66a:	f000 85d3 	beq.w	3b214 <ull_conn_rx+0xc1c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   3a66e:	f1b8 0f0b 	cmp.w	r8, #11
   3a672:	f000 8691 	beq.w	3b398 <ull_conn_rx+0xda0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   3a676:	f1b8 0f04 	cmp.w	r8, #4
   3a67a:	f000 84fa 	beq.w	3b072 <ull_conn_rx+0xa7a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   3a67e:	f1b8 0f05 	cmp.w	r8, #5
   3a682:	f000 8651 	beq.w	3b328 <ull_conn_rx+0xd30>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   3a686:	f1b8 0f06 	cmp.w	r8, #6
   3a68a:	f000 85dc 	beq.w	3b246 <ull_conn_rx+0xc4e>
   3a68e:	f1b8 0f0d 	cmp.w	r8, #13
   3a692:	f000 862b 	beq.w	3b2ec <ull_conn_rx+0xcf4>
   3a696:	f1b8 0f11 	cmp.w	r8, #17
   3a69a:	f040 80a8 	bne.w	3a7ee <ull_conn_rx+0x1f6>
		break;
#endif /* CONFIG_BT_CENTRAL */
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

	case PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND:
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   3a69e:	7f73      	ldrb	r3, [r6, #29]
   3a6a0:	2b03      	cmp	r3, #3
   3a6a2:	f040 80c0 	bne.w	3a826 <ull_conn_rx+0x22e>
	switch (rej_ext_ind->reject_opcode) {
   3a6a6:	f896 3020 	ldrb.w	r3, [r6, #32]
   3a6aa:	3b03      	subs	r3, #3
   3a6ac:	2b13      	cmp	r3, #19
   3a6ae:	f200 80f5 	bhi.w	3a89c <ull_conn_rx+0x2a4>
   3a6b2:	e8df f013 	tbh	[pc, r3, lsl #1]
   3a6b6:	058b      	.short	0x058b
   3a6b8:	00f300f3 	.word	0x00f300f3
   3a6bc:	00f300f3 	.word	0x00f300f3
   3a6c0:	00f300f3 	.word	0x00f300f3
   3a6c4:	00f300f3 	.word	0x00f300f3
   3a6c8:	00f300f3 	.word	0x00f300f3
   3a6cc:	054e00f3 	.word	0x054e00f3
   3a6d0:	00f300f3 	.word	0x00f300f3
   3a6d4:	00f300f3 	.word	0x00f300f3
   3a6d8:	00f304fc 	.word	0x00f304fc
   3a6dc:	051b      	.short	0x051b
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
   3a6de:	f895 21ce 	ldrb.w	r2, [r5, #462]	; 0x1ce
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
   3a6e2:	428b      	cmp	r3, r1
				conn->llcp_phy.state =
   3a6e4:	f042 0203 	orr.w	r2, r2, #3
   3a6e8:	f885 21ce 	strb.w	r2, [r5, #462]	; 0x1ce
				if (conn->llcp_phy.ack ==
   3a6ec:	d115      	bne.n	3a71a <ull_conn_rx+0x122>
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
						conn->phy_pref_tx;
   3a6ee:	f895 11d0 	ldrb.w	r1, [r5, #464]	; 0x1d0
					conn->llcp_phy.cmd = 0U;
   3a6f2:	f895 01cf 	ldrb.w	r0, [r5, #463]	; 0x1cf
						conn->phy_pref_tx;
   3a6f6:	f3c1 0702 	ubfx	r7, r1, #0, #3
					conn->llcp_phy.tx =
   3a6fa:	b2d2      	uxtb	r2, r2
   3a6fc:	f367 0284 	bfi	r2, r7, #2, #3
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
   3a700:	f3c1 01c2 	ubfx	r1, r1, #3, #3
					conn->llcp_phy.ack--;
   3a704:	3b01      	subs	r3, #1
					conn->llcp_phy.rx =
   3a706:	f361 1247 	bfi	r2, r1, #5, #3
					conn->llcp_phy.cmd = 0U;
   3a70a:	f36f 0082 	bfc	r0, #2, #1
					conn->llcp_phy.ack--;
   3a70e:	f885 31cd 	strb.w	r3, [r5, #461]	; 0x1cd
					conn->llcp_phy.rx =
   3a712:	f885 21ce 	strb.w	r2, [r5, #462]	; 0x1ce
					conn->llcp_phy.cmd = 0U;
   3a716:	f885 01cf 	strb.w	r0, [r5, #463]	; 0x1cf
				}

				conn->llcp_phy.tx &= p->rx_phys;
   3a71a:	f895 31ce 	ldrb.w	r3, [r5, #462]	; 0x1ce
   3a71e:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   3a722:	f3c3 0182 	ubfx	r1, r3, #2, #3
   3a726:	400a      	ands	r2, r1
   3a728:	f362 0384 	bfi	r3, r2, #2, #3
   3a72c:	f885 31ce 	strb.w	r3, [r5, #462]	; 0x1ce
				conn->llcp_phy.rx &= p->tx_phys;
   3a730:	f896 2020 	ldrb.w	r2, [r6, #32]
   3a734:	b2db      	uxtb	r3, r3
   3a736:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   3a73a:	f362 1347 	bfi	r3, r2, #5, #3

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3a73e:	b2da      	uxtb	r2, r3
   3a740:	f012 0f1c 	tst.w	r2, #28
				conn->llcp_phy.rx &= p->tx_phys;
   3a744:	f885 31ce 	strb.w	r3, [r5, #462]	; 0x1ce
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3a748:	d002      	beq.n	3a750 <ull_conn_rx+0x158>
   3a74a:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   3a74e:	d105      	bne.n	3a75c <ull_conn_rx+0x164>
					conn->llcp_phy.tx = 0;
   3a750:	f895 31ce 	ldrb.w	r3, [r5, #462]	; 0x1ce
   3a754:	f003 0303 	and.w	r3, r3, #3
   3a758:	f885 31ce 	strb.w	r3, [r5, #462]	; 0x1ce
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
   3a75c:	f895 31cf 	ldrb.w	r3, [r5, #463]	; 0x1cf
   3a760:	f043 0301 	orr.w	r3, r3, #1
   3a764:	f885 31cf 	strb.w	r3, [r5, #463]	; 0x1cf

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a768:	6823      	ldr	r3, [r4, #0]
   3a76a:	2201      	movs	r2, #1
   3a76c:	711a      	strb	r2, [r3, #4]
	int nack = 0;
   3a76e:	2000      	movs	r0, #0
}
   3a770:	b005      	add	sp, #20
   3a772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (opcode) {
   3a776:	f1b8 0f19 	cmp.w	r8, #25
   3a77a:	d854      	bhi.n	3a826 <ull_conn_rx+0x22e>
   3a77c:	a301      	add	r3, pc, #4	; (adr r3, 3a784 <ull_conn_rx+0x18c>)
   3a77e:	f853 f028 	ldr.w	pc, [r3, r8, lsl #2]
   3a782:	bf00      	nop
   3a784:	0003ad71 	.word	0x0003ad71
   3a788:	0003a981 	.word	0x0003a981
   3a78c:	0003b215 	.word	0x0003b215
   3a790:	0003b05d 	.word	0x0003b05d
   3a794:	0003b069 	.word	0x0003b069
   3a798:	0003a81d 	.word	0x0003a81d
   3a79c:	0003b247 	.word	0x0003b247
   3a7a0:	0003b2a1 	.word	0x0003b2a1
   3a7a4:	0003b04f 	.word	0x0003b04f
   3a7a8:	0003ab6b 	.word	0x0003ab6b
   3a7ac:	0003aad9 	.word	0x0003aad9
   3a7b0:	0003bdaf 	.word	0x0003bdaf
   3a7b4:	0003af03 	.word	0x0003af03
   3a7b8:	0003b2ed 	.word	0x0003b2ed
   3a7bc:	0003aee5 	.word	0x0003aee5
   3a7c0:	0003ad4b 	.word	0x0003ad4b
   3a7c4:	0003ac25 	.word	0x0003ac25
   3a7c8:	0003a69f 	.word	0x0003a69f
   3a7cc:	0003abdb 	.word	0x0003abdb
   3a7d0:	0003b039 	.word	0x0003b039
   3a7d4:	0003af61 	.word	0x0003af61
   3a7d8:	0003af61 	.word	0x0003af61
   3a7dc:	0003afd9 	.word	0x0003afd9
   3a7e0:	0003ae5d 	.word	0x0003ae5d
   3a7e4:	0003aa57 	.word	0x0003aa57
   3a7e8:	0003a9eb 	.word	0x0003a9eb
		if (conn->llcp_enc.pause_rx) {
   3a7ec:	b190      	cbz	r0, 3a814 <ull_conn_rx+0x21c>
		conn->llcp_terminate.reason_final =
   3a7ee:	233d      	movs	r3, #61	; 0x3d
   3a7f0:	f885 3153 	strb.w	r3, [r5, #339]	; 0x153
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a7f4:	6823      	ldr	r3, [r4, #0]
   3a7f6:	2201      	movs	r2, #1
		return 0;
   3a7f8:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a7fa:	711a      	strb	r2, [r3, #4]
}
   3a7fc:	b005      	add	sp, #20
   3a7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   3a802:	b120      	cbz	r0, 3a80e <ull_conn_rx+0x216>
			conn->llcp_terminate.reason_final =
   3a804:	233d      	movs	r3, #61	; 0x3d
   3a806:	f885 3153 	strb.w	r3, [r5, #339]	; 0x153
   3a80a:	f8d4 c000 	ldr.w	ip, [r4]
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a80e:	2301      	movs	r3, #1
   3a810:	f88c 3004 	strb.w	r3, [ip, #4]
	return 0;
   3a814:	2000      	movs	r0, #0
}
   3a816:	b005      	add	sp, #20
   3a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   3a81c:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3a820:	2b00      	cmp	r3, #0
   3a822:	f280 8581 	bge.w	3b328 <ull_conn_rx+0xd30>
   3a826:	f895 00e4 	ldrb.w	r0, [r5, #228]	; 0xe4
   3a82a:	f000 0402 	and.w	r4, r0, #2
	if (conn->common.txn_lock) {
   3a82e:	bbac      	cbnz	r4, 3a89c <ull_conn_rx+0x2a4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3a830:	4824      	ldr	r0, [pc, #144]	; (3a8c4 <ull_conn_rx+0x2cc>)
   3a832:	f7f9 fb09 	bl	33e48 <mem_acquire>
	if (!tx) {
   3a836:	2800      	cmp	r0, #0
   3a838:	f000 8501 	beq.w	3b23e <ull_conn_rx+0xc46>
	conn->common.txn_lock = 1U;
   3a83c:	f895 10e4 	ldrb.w	r1, [r5, #228]	; 0xe4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3a840:	7903      	ldrb	r3, [r0, #4]
	conn->common.txn_lock = 1U;
   3a842:	f041 0102 	orr.w	r1, r1, #2
   3a846:	f885 10e4 	strb.w	r1, [r5, #228]	; 0xe4
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   3a84a:	2102      	movs	r1, #2
   3a84c:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   3a84e:	f8d5 11d4 	ldr.w	r1, [r5, #468]	; 0x1d4
	pdu->llctrl.unknown_rsp.type = type;
   3a852:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3a856:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   3a85a:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3a85c:	7103      	strb	r3, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   3a85e:	71c2      	strb	r2, [r0, #7]
	if (
   3a860:	b301      	cbz	r1, 3a8a4 <ull_conn_rx+0x2ac>
	    !conn->llcp_enc.pause_tx &&
   3a862:	f895 3176 	ldrb.w	r3, [r5, #374]	; 0x176
	    conn->tx_head &&
   3a866:	079a      	lsls	r2, r3, #30
   3a868:	d41c      	bmi.n	3a8a4 <ull_conn_rx+0x2ac>
	    !conn->llcp_phy.pause_tx &&
   3a86a:	f895 31cf 	ldrb.w	r3, [r5, #463]	; 0x1cf
   3a86e:	07db      	lsls	r3, r3, #31
   3a870:	d418      	bmi.n	3a8a4 <ull_conn_rx+0x2ac>
		if (conn->tx_head == conn->tx_data) {
   3a872:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
   3a876:	4299      	cmp	r1, r3
		if (!conn->tx_ctrl) {
   3a878:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3a87c:	f000 8572 	beq.w	3b364 <ull_conn_rx+0xd6c>
		} else if (!conn->tx_ctrl) {
   3a880:	2b00      	cmp	r3, #0
   3a882:	f000 85a4 	beq.w	3b3ce <ull_conn_rx+0xdd6>
   3a886:	f8d5 11dc 	ldr.w	r1, [r5, #476]	; 0x1dc
	tx->next = conn->tx_ctrl_last->next;
   3a88a:	680b      	ldr	r3, [r1, #0]
   3a88c:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3a88e:	6008      	str	r0, [r1, #0]
	conn->tx_ctrl_last = tx;
   3a890:	6801      	ldr	r1, [r0, #0]
   3a892:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
	if (!tx->next) {
   3a896:	b909      	cbnz	r1, 3a89c <ull_conn_rx+0x2a4>
		conn->tx_data_last = tx;
   3a898:	f8c5 01e4 	str.w	r0, [r5, #484]	; 0x1e4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a89c:	2301      	movs	r3, #1
   3a89e:	7133      	strb	r3, [r6, #4]
	return 0;
   3a8a0:	2000      	movs	r0, #0
   3a8a2:	e765      	b.n	3a770 <ull_conn_rx+0x178>
		if (!conn->tx_ctrl) {
   3a8a4:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
   3a8a8:	2b00      	cmp	r3, #0
   3a8aa:	d063      	beq.n	3a974 <ull_conn_rx+0x37c>
	tx->next = conn->tx_ctrl_last->next;
   3a8ac:	f8d5 31dc 	ldr.w	r3, [r5, #476]	; 0x1dc
   3a8b0:	681a      	ldr	r2, [r3, #0]
   3a8b2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3a8b4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   3a8b6:	6801      	ldr	r1, [r0, #0]
   3a8b8:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
   3a8bc:	e7eb      	b.n	3a896 <ull_conn_rx+0x29e>
   3a8be:	bf00      	nop
   3a8c0:	20002d70 	.word	0x20002d70
   3a8c4:	20005348 	.word	0x20005348
	       (conn->lll.role &&
   3a8c8:	2800      	cmp	r0, #0
   3a8ca:	f000 84b0 	beq.w	3b22e <ull_conn_rx+0xc36>
		 (conn->llcp_enc.refresh &&
   3a8ce:	f1b8 0f02 	cmp.w	r8, #2
   3a8d2:	f000 849f 	beq.w	3b214 <ull_conn_rx+0xc1c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   3a8d6:	f1b8 0f0b 	cmp.w	r8, #11
   3a8da:	f000 8551 	beq.w	3b380 <ull_conn_rx+0xd88>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   3a8de:	f1b8 0f03 	cmp.w	r8, #3
   3a8e2:	f47f aed0 	bne.w	3a686 <ull_conn_rx+0x8e>
		if (!conn->lll.role ||
   3a8e6:	7f73      	ldrb	r3, [r6, #29]
   3a8e8:	2b17      	cmp	r3, #23
   3a8ea:	d19c      	bne.n	3a826 <ull_conn_rx+0x22e>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   3a8ec:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
   3a8f0:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
   3a8f4:	1a9b      	subs	r3, r3, r2
   3a8f6:	f003 0303 	and.w	r3, r3, #3
   3a8fa:	2b02      	cmp	r3, #2
   3a8fc:	f001 8163 	beq.w	3bbc6 <ull_conn_rx+0x15ce>
		memcpy(&conn->llcp_enc.rand[0],
   3a900:	2208      	movs	r2, #8
   3a902:	f106 0120 	add.w	r1, r6, #32
   3a906:	f205 1079 	addw	r0, r5, #377	; 0x179
   3a90a:	f011 fcef 	bl	4c2ec <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   3a90e:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   3a912:	f885 3177 	strb.w	r3, [r5, #375]	; 0x177
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   3a916:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   3a91a:	f885 3178 	strb.w	r3, [r5, #376]	; 0x178
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3a91e:	f895 2100 	ldrb.w	r2, [r5, #256]	; 0x100
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a922:	6821      	ldr	r1, [r4, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3a924:	2301      	movs	r3, #1
   3a926:	f363 0201 	bfi	r2, r3, #0, #2
   3a92a:	f885 2100 	strb.w	r2, [r5, #256]	; 0x100
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3a92e:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   3a930:	f895 30f1 	ldrb.w	r3, [r5, #241]	; 0xf1
		conn->llcp_type = LLCP_ENCRYPTION;
   3a934:	2203      	movs	r2, #3
		conn->llcp_ack -= 2U;
   3a936:	3b02      	subs	r3, #2
   3a938:	f885 30f1 	strb.w	r3, [r5, #241]	; 0xf1
		conn->llcp_type = LLCP_ENCRYPTION;
   3a93c:	f885 20f2 	strb.w	r2, [r5, #242]	; 0xf2
		memcpy(&conn->llcp.encryption.skd[0],
   3a940:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   3a944:	2208      	movs	r2, #8
   3a946:	f505 7081 	add.w	r0, r5, #258	; 0x102
   3a94a:	f011 fccf 	bl	4c2ec <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   3a94e:	2204      	movs	r2, #4
   3a950:	f106 0132 	add.w	r1, r6, #50	; 0x32
   3a954:	f105 0094 	add.w	r0, r5, #148	; 0x94
   3a958:	f011 fcc8 	bl	4c2ec <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   3a95c:	f895 3176 	ldrb.w	r3, [r5, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3a960:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
   3a964:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   3a968:	f043 0301 	orr.w	r3, r3, #1
   3a96c:	f885 3176 	strb.w	r3, [r5, #374]	; 0x176
	int nack = 0;
   3a970:	2000      	movs	r0, #0
   3a972:	e6fd      	b.n	3a770 <ull_conn_rx+0x178>
			tx->next = conn->tx_head;
   3a974:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   3a976:	e9c5 0075 	strd	r0, r0, [r5, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3a97a:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
   3a97e:	e78a      	b.n	3a896 <ull_conn_rx+0x29e>
		if (!conn->lll.role ||
   3a980:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3a984:	2b00      	cmp	r3, #0
   3a986:	f6bf af4e 	bge.w	3a826 <ull_conn_rx+0x22e>
   3a98a:	7f73      	ldrb	r3, [r6, #29]
   3a98c:	2b08      	cmp	r3, #8
   3a98e:	f47f af4a 	bne.w	3a826 <ull_conn_rx+0x22e>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   3a992:	f8b6 4025 	ldrh.w	r4, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   3a996:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
   3a998:	1ae3      	subs	r3, r4, r3
   3a99a:	041f      	lsls	r7, r3, #16
   3a99c:	f101 8013 	bmi.w	3b9c6 <ull_conn_rx+0x13ce>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3a9a0:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
   3a9a4:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
   3a9a8:	1a9b      	subs	r3, r3, r2
   3a9aa:	f003 0303 	and.w	r3, r3, #3
   3a9ae:	2b02      	cmp	r3, #2
   3a9b0:	f001 8002 	beq.w	3b9b8 <ull_conn_rx+0x13c0>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   3a9b4:	2205      	movs	r2, #5
   3a9b6:	f106 0120 	add.w	r1, r6, #32
   3a9ba:	f105 00f5 	add.w	r0, r5, #245	; 0xf5
   3a9be:	f011 fc95 	bl	4c2ec <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   3a9c2:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
	conn->llcp_ack -= 2U;
   3a9c6:	f895 30f1 	ldrb.w	r3, [r5, #241]	; 0xf1
	conn->llcp.chan_map.instant = instant;
   3a9ca:	f8a5 40fa 	strh.w	r4, [r5, #250]	; 0xfa
	conn->llcp_type = LLCP_CHAN_MAP;
   3a9ce:	2002      	movs	r0, #2
	conn->llcp.chan_map.initiate = 0U;
   3a9d0:	f36f 0200 	bfc	r2, #0, #1
	conn->llcp_ack -= 2U;
   3a9d4:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a9d6:	2101      	movs	r1, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   3a9d8:	f885 00f2 	strb.w	r0, [r5, #242]	; 0xf2
	conn->llcp.chan_map.initiate = 0U;
   3a9dc:	f885 20f4 	strb.w	r2, [r5, #244]	; 0xf4
	conn->llcp_ack -= 2U;
   3a9e0:	f885 30f1 	strb.w	r3, [r5, #241]	; 0xf1
	int nack = 0;
   3a9e4:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3a9e6:	7131      	strb	r1, [r6, #4]
		if (err) {
   3a9e8:	e6c2      	b.n	3a770 <ull_conn_rx+0x178>
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   3a9ea:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3a9ee:	2b00      	cmp	r3, #0
   3a9f0:	f6ff af19 	blt.w	3a826 <ull_conn_rx+0x22e>
   3a9f4:	7f73      	ldrb	r3, [r6, #29]
   3a9f6:	2b03      	cmp	r3, #3
   3a9f8:	f47f af15 	bne.w	3a826 <ull_conn_rx+0x22e>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   3a9fc:	f895 1060 	ldrb.w	r1, [r5, #96]	; 0x60
					 conn->lll.phy_rx))) {
   3aa00:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
			if (!(p->phys & (conn->lll.phy_tx |
   3aa04:	f896 2020 	ldrb.w	r2, [r6, #32]
   3aa08:	430b      	orrs	r3, r1
   3aa0a:	f003 0307 	and.w	r3, r3, #7
   3aa0e:	4213      	tst	r3, r2
   3aa10:	f43f af00 	beq.w	3a814 <ull_conn_rx+0x21c>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   3aa14:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
   3aa18:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
   3aa1c:	1a9b      	subs	r3, r3, r2
   3aa1e:	f003 0303 	and.w	r3, r3, #3
   3aa22:	2b02      	cmp	r3, #2
   3aa24:	f43f aef6 	beq.w	3a814 <ull_conn_rx+0x21c>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   3aa28:	f105 00f5 	add.w	r0, r5, #245	; 0xf5
   3aa2c:	f004 fca8 	bl	3f380 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   3aa30:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
			conn->llcp.chan_map.initiate = 1U;
   3aa34:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   3aa38:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   3aa3a:	2102      	movs	r1, #2
   3aa3c:	f885 10f2 	strb.w	r1, [r5, #242]	; 0xf2
			conn->llcp_ack -= 2U;
   3aa40:	f885 20f1 	strb.w	r2, [r5, #241]	; 0xf1
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3aa44:	6822      	ldr	r2, [r4, #0]
			conn->llcp.chan_map.initiate = 1U;
   3aa46:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3aa4a:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   3aa4c:	f885 30f4 	strb.w	r3, [r5, #244]	; 0xf4
	int nack = 0;
   3aa50:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3aa52:	7111      	strb	r1, [r2, #4]

		break;
   3aa54:	e68c      	b.n	3a770 <ull_conn_rx+0x178>
		if (!conn->lll.role ||
   3aa56:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3aa5a:	2b00      	cmp	r3, #0
   3aa5c:	f6bf aee3 	bge.w	3a826 <ull_conn_rx+0x22e>
   3aa60:	7f73      	ldrb	r3, [r6, #29]
   3aa62:	2b05      	cmp	r3, #5
   3aa64:	f47f aedf 	bne.w	3a826 <ull_conn_rx+0x22e>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   3aa68:	f896 2020 	ldrb.w	r2, [r6, #32]
   3aa6c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3aa70:	4313      	orrs	r3, r2
   3aa72:	f013 0007 	ands.w	r0, r3, #7
   3aa76:	f040 87e3 	bne.w	3ba40 <ull_conn_rx+0x1448>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   3aa7a:	f895 11cc 	ldrb.w	r1, [r5, #460]	; 0x1cc
   3aa7e:	f895 31cd 	ldrb.w	r3, [r5, #461]	; 0x1cd
   3aa82:	428b      	cmp	r3, r1
   3aa84:	f43f af0a 	beq.w	3a89c <ull_conn_rx+0x2a4>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   3aa88:	f895 21ce 	ldrb.w	r2, [r5, #462]	; 0x1ce
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   3aa8c:	f002 0203 	and.w	r2, r2, #3
   3aa90:	2a02      	cmp	r2, #2
   3aa92:	f47f af03 	bne.w	3a89c <ull_conn_rx+0x2a4>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3aa96:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3aa9a:	f895 31cf 	ldrb.w	r3, [r5, #463]	; 0x1cf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3aa9e:	f885 11cd 	strb.w	r1, [r5, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3aaa2:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3aaa6:	f3c2 0102 	ubfx	r1, r2, #0, #3
   3aaaa:	f361 1206 	bfi	r2, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   3aaae:	f885 31cf 	strb.w	r3, [r5, #463]	; 0x1cf
		if (!conn->llcp_phy.cmd) {
   3aab2:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   3aab6:	f8a5 00c8 	strh.w	r0, [r5, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3aaba:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
		if (!conn->llcp_phy.cmd) {
   3aabe:	f000 87ae 	beq.w	3ba1e <ull_conn_rx+0x1426>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3aac2:	6823      	ldr	r3, [r4, #0]
   3aac4:	221c      	movs	r2, #28
   3aac6:	711a      	strb	r2, [r3, #4]
		p->status = 0U;
   3aac8:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
   3aaca:	7771      	strb	r1, [r6, #29]
		p->rx = conn->lll.phy_rx;
   3aacc:	f895 2061 	ldrb.w	r2, [r5, #97]	; 0x61
   3aad0:	f3c2 0202 	ubfx	r2, r2, #0, #3
   3aad4:	77b2      	strb	r2, [r6, #30]
		if (err) {
   3aad6:	e64b      	b.n	3a770 <ull_conn_rx+0x178>
		if (!conn->lll.role ||
   3aad8:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3aadc:	2b00      	cmp	r3, #0
   3aade:	f6bf aea2 	bge.w	3a826 <ull_conn_rx+0x22e>
   3aae2:	7f74      	ldrb	r4, [r6, #29]
   3aae4:	2c01      	cmp	r4, #1
   3aae6:	f47f ae9e 	bne.w	3a826 <ull_conn_rx+0x22e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3aaea:	48d9      	ldr	r0, [pc, #868]	; (3ae50 <ull_conn_rx+0x858>)
   3aaec:	f7f9 f9ac 	bl	33e48 <mem_acquire>
		if (!tx) {
   3aaf0:	2800      	cmp	r0, #0
   3aaf2:	f000 83a4 	beq.w	3b23e <ull_conn_rx+0xc46>
	conn->llcp_enc.pause_rx = 1U;
   3aaf6:	f895 3176 	ldrb.w	r3, [r5, #374]	; 0x176
	conn->lll.enc_rx = 0;
   3aafa:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   3aafe:	f023 0305 	bic.w	r3, r3, #5
	conn->lll.enc_rx = 0;
   3ab02:	f36f 02c3 	bfc	r2, #3, #1
   3ab06:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   3ab0a:	f043 0305 	orr.w	r3, r3, #5
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ab0e:	7902      	ldrb	r2, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   3ab10:	f885 3176 	strb.w	r3, [r5, #374]	; 0x176
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3ab14:	7144      	strb	r4, [r0, #5]
	    conn->tx_head &&
   3ab16:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ab1a:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   3ab1e:	210b      	movs	r1, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ab20:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   3ab22:	71c1      	strb	r1, [r0, #7]
	if (
   3ab24:	2b00      	cmp	r3, #0
   3ab26:	f000 848c 	beq.w	3b442 <ull_conn_rx+0xe4a>
	    !conn->llcp_enc.pause_tx &&
   3ab2a:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
	    conn->tx_head &&
   3ab2e:	0791      	lsls	r1, r2, #30
   3ab30:	f100 8487 	bmi.w	3b442 <ull_conn_rx+0xe4a>
	    !conn->llcp_phy.pause_tx &&
   3ab34:	f895 21cf 	ldrb.w	r2, [r5, #463]	; 0x1cf
   3ab38:	07d2      	lsls	r2, r2, #31
   3ab3a:	f100 8482 	bmi.w	3b442 <ull_conn_rx+0xe4a>
		if (conn->tx_head == conn->tx_data) {
   3ab3e:	f8d5 21e0 	ldr.w	r2, [r5, #480]	; 0x1e0
   3ab42:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3ab44:	f8d5 21d8 	ldr.w	r2, [r5, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3ab48:	f001 8054 	beq.w	3bbf4 <ull_conn_rx+0x15fc>
		} else if (!conn->tx_ctrl) {
   3ab4c:	2a00      	cmp	r2, #0
   3ab4e:	f001 805e 	beq.w	3bc0e <ull_conn_rx+0x1616>
	tx->next = conn->tx_ctrl_last->next;
   3ab52:	f8d5 31dc 	ldr.w	r3, [r5, #476]	; 0x1dc
   3ab56:	681a      	ldr	r2, [r3, #0]
   3ab58:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3ab5a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   3ab5c:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
	if (!tx->next) {
   3ab60:	6803      	ldr	r3, [r0, #0]
   3ab62:	2b00      	cmp	r3, #0
   3ab64:	f47f ae9a 	bne.w	3a89c <ull_conn_rx+0x2a4>
   3ab68:	e696      	b.n	3a898 <ull_conn_rx+0x2a0>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   3ab6a:	7f73      	ldrb	r3, [r6, #29]
   3ab6c:	2b09      	cmp	r3, #9
   3ab6e:	f47f ae5a 	bne.w	3a826 <ull_conn_rx+0x22e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   3ab72:	6a72      	ldr	r2, [r6, #36]	; 0x24
   3ab74:	6a30      	ldr	r0, [r6, #32]
	feat &= LL_FEAT_BIT_MASK;
   3ab76:	4fb7      	ldr	r7, [pc, #732]	; (3ae54 <ull_conn_rx+0x85c>)
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3ab78:	e9d5 314e 	ldrd	r3, r1, [r5, #312]	; 0x138
	feat &= LL_FEAT_BIT_MASK;
   3ab7c:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   3ab80:	4338      	orrs	r0, r7
   3ab82:	f042 0210 	orr.w	r2, r2, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   3ab86:	400a      	ands	r2, r1
   3ab88:	4003      	ands	r3, r0
   3ab8a:	e9c5 324e 	strd	r3, r2, [r5, #312]	; 0x138
   3ab8e:	6a34      	ldr	r4, [r6, #32]
   3ab90:	6a76      	ldr	r6, [r6, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   3ab92:	f7fc fb13 	bl	371bc <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
   3ab96:	ea44 0307 	orr.w	r3, r4, r7
	feat_result = feat_to_keep & feat_octet0;
   3ab9a:	ea03 0200 	and.w	r2, r3, r0
   3ab9e:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
	feat_result &= 0xFF;
   3aba2:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   3aba6:	4322      	orrs	r2, r4
	conn->common.fex_valid = 1U;
   3aba8:	f895 40e4 	ldrb.w	r4, [r5, #228]	; 0xe4
	conn->llcp_feature.ack = conn->llcp_feature.req;
   3abac:	f895 3130 	ldrb.w	r3, [r5, #304]	; 0x130
   3abb0:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3abb4:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat &= LL_FEAT_BIT_MASK;
   3abb8:	f006 01ff 	and.w	r1, r6, #255	; 0xff
	feat_result &= 0xFF;
   3abbc:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   3abbe:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	feat &= LL_FEAT_BIT_MASK;
   3abc2:	f041 0110 	orr.w	r1, r1, #16
	conn->common.fex_valid = 1U;
   3abc6:	f044 0401 	orr.w	r4, r4, #1
	conn->llcp_feature.features_peer =
   3abca:	e9c5 2150 	strd	r2, r1, [r5, #320]	; 0x140
	conn->common.fex_valid = 1U;
   3abce:	f885 40e4 	strb.w	r4, [r5, #228]	; 0xe4
	conn->procedure_expire = 0U;
   3abd2:	f8a5 30c8 	strh.w	r3, [r5, #200]	; 0xc8
	int nack = 0;
   3abd6:	4618      	mov	r0, r3
   3abd8:	e5ca      	b.n	3a770 <ull_conn_rx+0x178>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   3abda:	7f77      	ldrb	r7, [r6, #29]
   3abdc:	f895 00e4 	ldrb.w	r0, [r5, #228]	; 0xe4
   3abe0:	2f01      	cmp	r7, #1
   3abe2:	f000 0402 	and.w	r4, r0, #2
   3abe6:	f47f ae22 	bne.w	3a82e <ull_conn_rx+0x236>
	if (conn->common.txn_lock) {
   3abea:	2c00      	cmp	r4, #0
   3abec:	f040 8685 	bne.w	3b8fa <ull_conn_rx+0x1302>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3abf0:	4897      	ldr	r0, [pc, #604]	; (3ae50 <ull_conn_rx+0x858>)
   3abf2:	f7f9 f929 	bl	33e48 <mem_acquire>
	if (!tx) {
   3abf6:	4601      	mov	r1, r0
   3abf8:	2800      	cmp	r0, #0
   3abfa:	f000 8320 	beq.w	3b23e <ull_conn_rx+0xc46>
	conn->common.txn_lock = 1U;
   3abfe:	f895 20e4 	ldrb.w	r2, [r5, #228]	; 0xe4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ac02:	7903      	ldrb	r3, [r0, #4]
	conn->common.txn_lock = 1U;
   3ac04:	f042 0202 	orr.w	r2, r2, #2
   3ac08:	f885 20e4 	strb.w	r2, [r5, #228]	; 0xe4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ac0c:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   3ac10:	2213      	movs	r2, #19
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   3ac12:	7147      	strb	r7, [r0, #5]
	ctrl_tx_sec_enqueue(conn, tx);
   3ac14:	4628      	mov	r0, r5
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ac16:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   3ac18:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   3ac1a:	f7fe ffe1 	bl	39be0 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3ac1e:	7137      	strb	r7, [r6, #4]
	return 0;
   3ac20:	4620      	mov	r0, r4
   3ac22:	e5a5      	b.n	3a770 <ull_conn_rx+0x178>
		if (conn->lll.role ||
   3ac24:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3ac28:	2b00      	cmp	r3, #0
   3ac2a:	f6ff adfc 	blt.w	3a826 <ull_conn_rx+0x22e>
   3ac2e:	7f73      	ldrb	r3, [r6, #29]
   3ac30:	2b18      	cmp	r3, #24
   3ac32:	f47f adf8 	bne.w	3a826 <ull_conn_rx+0x22e>
		if (!conn->lll.role &&
   3ac36:	f895 2194 	ldrb.w	r2, [r5, #404]	; 0x194
   3ac3a:	f895 3195 	ldrb.w	r3, [r5, #405]	; 0x195
   3ac3e:	429a      	cmp	r2, r3
   3ac40:	f43f ae2c 	beq.w	3a89c <ull_conn_rx+0x2a4>
		    (conn->llcp_conn_param.state ==
   3ac44:	f895 3196 	ldrb.w	r3, [r5, #406]	; 0x196
		     conn->llcp_conn_param.ack) &&
   3ac48:	f003 030f 	and.w	r3, r3, #15
   3ac4c:	2b04      	cmp	r3, #4
   3ac4e:	f47f ae25 	bne.w	3a89c <ull_conn_rx+0x2a4>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   3ac52:	f8b6 e020 	ldrh.w	lr, [r6, #32]
   3ac56:	fa1f f38e 	uxth.w	r3, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3ac5a:	2b05      	cmp	r3, #5
   3ac5c:	f240 8659 	bls.w	3b912 <ull_conn_rx+0x131a>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   3ac60:	f8b6 c022 	ldrh.w	ip, [r6, #34]	; 0x22
   3ac64:	fa1f f18c 	uxth.w	r1, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3ac68:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   3ac6c:	f200 8651 	bhi.w	3b912 <ull_conn_rx+0x131a>
			    (interval_max > 3200) ||
   3ac70:	428b      	cmp	r3, r1
   3ac72:	f200 864e 	bhi.w	3b912 <ull_conn_rx+0x131a>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   3ac76:	8cb7      	ldrh	r7, [r6, #36]	; 0x24
   3ac78:	b2bb      	uxth	r3, r7
			    (interval_min > interval_max) ||
   3ac7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   3ac7e:	f080 8648 	bcs.w	3b912 <ull_conn_rx+0x131a>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   3ac82:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   3ac84:	fa1f f880 	uxth.w	r8, r0
			    (latency > 499) ||
   3ac88:	f1a8 020a 	sub.w	r2, r8, #10
   3ac8c:	b292      	uxth	r2, r2
   3ac8e:	f640 4976 	movw	r9, #3190	; 0xc76
   3ac92:	454a      	cmp	r2, r9
   3ac94:	f200 863d 	bhi.w	3b912 <ull_conn_rx+0x131a>
			     ((latency + 1) * interval_max)) ||
   3ac98:	fb03 1301 	mla	r3, r3, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   3ac9c:	ebb3 0f88 	cmp.w	r3, r8, lsl #2
   3aca0:	f080 8637 	bcs.w	3b912 <ull_conn_rx+0x131a>
				cpr->preferred_periodicity;
   3aca4:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   3aca8:	4299      	cmp	r1, r3
   3acaa:	f0c0 8632 	bcc.w	3b912 <ull_conn_rx+0x131a>
			conn->procedure_expire = 0U;
   3acae:	2200      	movs	r2, #0
			conn->llcp_conn_param.preferred_periodicity =
   3acb0:	f885 31a0 	strb.w	r3, [r5, #416]	; 0x1a0
			conn->procedure_expire = 0U;
   3acb4:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
			conn->llcp_conn_param.interval_min = interval_min;
   3acb8:	f8a5 e198 	strh.w	lr, [r5, #408]	; 0x198
			conn->llcp_conn_param.interval_max = interval_max;
   3acbc:	f8a5 c19a 	strh.w	ip, [r5, #410]	; 0x19a
			conn->llcp_conn_param.latency =	latency;
   3acc0:	f8a5 719c 	strh.w	r7, [r5, #412]	; 0x19c
			conn->llcp_conn_param.timeout =	timeout;
   3acc4:	f8a5 019e 	strh.w	r0, [r5, #414]	; 0x19e
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3acc8:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
   3accc:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3acd0:	f895 2196 	ldrb.w	r2, [r5, #406]	; 0x196
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3acd4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   3acd8:	f8a5 31a2 	strh.w	r3, [r5, #418]	; 0x1a2
				sys_le16_to_cpu(cpr->offset0);
   3acdc:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
   3ace0:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
   3ace4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   3ace8:	f8a5 31a4 	strh.w	r3, [r5, #420]	; 0x1a4
				sys_le16_to_cpu(cpr->offset1);
   3acec:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
   3acf0:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   3acf4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   3acf8:	f8a5 31a6 	strh.w	r3, [r5, #422]	; 0x1a6
				sys_le16_to_cpu(cpr->offset2);
   3acfc:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   3ad00:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   3ad04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   3ad08:	f8a5 31a8 	strh.w	r3, [r5, #424]	; 0x1a8
				sys_le16_to_cpu(cpr->offset3);
   3ad0c:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   3ad10:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   3ad14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   3ad18:	f8a5 31aa 	strh.w	r3, [r5, #426]	; 0x1aa
				sys_le16_to_cpu(cpr->offset4);
   3ad1c:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
   3ad20:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
   3ad24:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   3ad28:	f8a5 31ac 	strh.w	r3, [r5, #428]	; 0x1ac
				sys_le16_to_cpu(cpr->offset5);
   3ad2c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   3ad30:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
   3ad34:	6826      	ldr	r6, [r4, #0]
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3ad36:	2101      	movs	r1, #1
				sys_le16_to_cpu(cpr->offset5);
   3ad38:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3ad3c:	f361 0203 	bfi	r2, r1, #0, #4
			conn->llcp_conn_param.offset5 =
   3ad40:	f8a5 31ae 	strh.w	r3, [r5, #430]	; 0x1ae
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   3ad44:	f885 2196 	strb.w	r2, [r5, #406]	; 0x196
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ad48:	e5a8      	b.n	3a89c <ull_conn_rx+0x2a4>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   3ad4a:	7f73      	ldrb	r3, [r6, #29]
   3ad4c:	2b18      	cmp	r3, #24
   3ad4e:	f47f ad6a 	bne.w	3a826 <ull_conn_rx+0x22e>
	return conn_upd_curr && (conn_upd_curr != conn);
   3ad52:	4b41      	ldr	r3, [pc, #260]	; (3ae58 <ull_conn_rx+0x860>)
   3ad54:	681b      	ldr	r3, [r3, #0]
   3ad56:	2b00      	cmp	r3, #0
   3ad58:	f000 8342 	beq.w	3b3e0 <ull_conn_rx+0xde8>
   3ad5c:	429d      	cmp	r5, r3
   3ad5e:	f000 833f 	beq.w	3b3e0 <ull_conn_rx+0xde8>
			nack = reject_ext_ind_send(conn, *rx,
   3ad62:	4631      	mov	r1, r6
   3ad64:	4628      	mov	r0, r5
   3ad66:	2320      	movs	r3, #32
   3ad68:	220f      	movs	r2, #15
   3ad6a:	f7fe feaf 	bl	39acc <reject_ext_ind_send>
			break;
   3ad6e:	e4ff      	b.n	3a770 <ull_conn_rx+0x178>
		if (!conn->lll.role ||
   3ad70:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3ad74:	2b00      	cmp	r3, #0
   3ad76:	f6bf ad56 	bge.w	3a826 <ull_conn_rx+0x22e>
   3ad7a:	7f73      	ldrb	r3, [r6, #29]
   3ad7c:	2b0c      	cmp	r3, #12
   3ad7e:	f47f ad52 	bne.w	3a826 <ull_conn_rx+0x22e>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   3ad82:	f8b6 0029 	ldrh.w	r0, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   3ad86:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
   3ad88:	1ac3      	subs	r3, r0, r3
   3ad8a:	041b      	lsls	r3, r3, #16
   3ad8c:	f100 861b 	bmi.w	3b9c6 <ull_conn_rx+0x13ce>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3ad90:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
   3ad94:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
   3ad98:	1a9b      	subs	r3, r3, r2
   3ad9a:	f003 0303 	and.w	r3, r3, #3
   3ad9e:	2b02      	cmp	r3, #2
   3ada0:	f000 860a 	beq.w	3b9b8 <ull_conn_rx+0x13c0>
	if (!conn_upd_curr) {
   3ada4:	4b2c      	ldr	r3, [pc, #176]	; (3ae58 <ull_conn_rx+0x860>)
   3ada6:	681a      	ldr	r2, [r3, #0]
   3ada8:	2a00      	cmp	r2, #0
   3adaa:	f000 86cd 	beq.w	3bb48 <ull_conn_rx+0x1550>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   3adae:	f896 3020 	ldrb.w	r3, [r6, #32]
   3adb2:	f885 3128 	strb.w	r3, [r5, #296]	; 0x128
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   3adb6:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3adba:	f895 311a 	ldrb.w	r3, [r5, #282]	; 0x11a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   3adbe:	f240 42e2 	movw	r2, #1250	; 0x4e2
   3adc2:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   3adc6:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   3adca:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   3adce:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   3add2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   3add6:	f8a5 211c 	strh.w	r2, [r5, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   3adda:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   3adde:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   3ade2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   3ade6:	f8a5 211e 	strh.w	r2, [r5, #286]	; 0x11e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3adea:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
   3adee:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3adf2:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   3adf6:	f8a5 00f4 	strh.w	r0, [r5, #244]	; 0xf4
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3adfa:	f023 030f 	bic.w	r3, r3, #15
	link->mem = conn->llcp_rx;
   3adfe:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3ae02:	f043 0308 	orr.w	r3, r3, #8
	conn->llcp_cu.ack--;
   3ae06:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   3ae08:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   3ae0c:	f885 2119 	strb.w	r2, [r5, #281]	; 0x119
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   3ae10:	f885 311a 	strb.w	r3, [r5, #282]	; 0x11a
	conn->llcp_cu.timeout =
   3ae14:	f8a5 1120 	strh.w	r1, [r5, #288]	; 0x120
	link->mem = conn->llcp_rx;
   3ae18:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   3ae1a:	6823      	ldr	r3, [r4, #0]
   3ae1c:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   3ae1e:	6823      	ldr	r3, [r4, #0]
   3ae20:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
	*rx = NULL;
   3ae24:	2300      	movs	r3, #0
   3ae26:	6023      	str	r3, [r4, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   3ae28:	f895 2194 	ldrb.w	r2, [r5, #404]	; 0x194
   3ae2c:	f895 3195 	ldrb.w	r3, [r5, #405]	; 0x195
   3ae30:	4293      	cmp	r3, r2
   3ae32:	d007      	beq.n	3ae44 <ull_conn_rx+0x84c>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   3ae34:	f895 3196 	ldrb.w	r3, [r5, #406]	; 0x196
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   3ae38:	f003 030e 	and.w	r3, r3, #14
   3ae3c:	2b04      	cmp	r3, #4
   3ae3e:	d101      	bne.n	3ae44 <ull_conn_rx+0x84c>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3ae40:	f885 2195 	strb.w	r2, [r5, #405]	; 0x195
		conn->procedure_expire = 0U;
   3ae44:	2300      	movs	r3, #0
   3ae46:	f8a5 30c8 	strh.w	r3, [r5, #200]	; 0xc8
	int nack = 0;
   3ae4a:	4618      	mov	r0, r3
   3ae4c:	e490      	b.n	3a770 <ull_conn_rx+0x178>
   3ae4e:	bf00      	nop
   3ae50:	20005348 	.word	0x20005348
   3ae54:	087830d0 	.word	0x087830d0
   3ae58:	200052b4 	.word	0x200052b4
		if (conn->lll.role ||
   3ae5c:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3ae60:	2b00      	cmp	r3, #0
   3ae62:	f6ff ace0 	blt.w	3a826 <ull_conn_rx+0x22e>
   3ae66:	7f73      	ldrb	r3, [r6, #29]
   3ae68:	2b03      	cmp	r3, #3
   3ae6a:	f47f acdc 	bne.w	3a826 <ull_conn_rx+0x22e>
		if (!conn->lll.role &&
   3ae6e:	f895 21cd 	ldrb.w	r2, [r5, #461]	; 0x1cd
   3ae72:	f895 31cc 	ldrb.w	r3, [r5, #460]	; 0x1cc
   3ae76:	429a      	cmp	r2, r3
   3ae78:	f43f ad10 	beq.w	3a89c <ull_conn_rx+0x2a4>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   3ae7c:	f895 31ce 	ldrb.w	r3, [r5, #462]	; 0x1ce
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3ae80:	f003 0203 	and.w	r2, r3, #3
   3ae84:	2a02      	cmp	r2, #2
   3ae86:	f47f ad09 	bne.w	3a89c <ull_conn_rx+0x2a4>
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   3ae8a:	f043 0303 	orr.w	r3, r3, #3
   3ae8e:	f885 31ce 	strb.w	r3, [r5, #462]	; 0x1ce
			conn->llcp_phy.tx &= p->rx_phys;
   3ae92:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   3ae96:	f3c3 0182 	ubfx	r1, r3, #2, #3
   3ae9a:	400a      	ands	r2, r1
   3ae9c:	f362 0384 	bfi	r3, r2, #2, #3
   3aea0:	f885 31ce 	strb.w	r3, [r5, #462]	; 0x1ce
			conn->llcp_phy.rx &= p->tx_phys;
   3aea4:	f896 2020 	ldrb.w	r2, [r6, #32]
   3aea8:	b2db      	uxtb	r3, r3
   3aeaa:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   3aeae:	f362 1347 	bfi	r3, r2, #5, #3
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3aeb2:	b2da      	uxtb	r2, r3
   3aeb4:	f012 0f1c 	tst.w	r2, #28
			conn->llcp_phy.rx &= p->tx_phys;
   3aeb8:	f885 31ce 	strb.w	r3, [r5, #462]	; 0x1ce
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   3aebc:	d002      	beq.n	3aec4 <ull_conn_rx+0x8cc>
   3aebe:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   3aec2:	d105      	bne.n	3aed0 <ull_conn_rx+0x8d8>
				conn->llcp_phy.tx = 0;
   3aec4:	f895 31ce 	ldrb.w	r3, [r5, #462]	; 0x1ce
   3aec8:	f003 0303 	and.w	r3, r3, #3
   3aecc:	f885 31ce 	strb.w	r3, [r5, #462]	; 0x1ce
			conn->llcp_phy.pause_tx = 1U;
   3aed0:	f895 31cf 	ldrb.w	r3, [r5, #463]	; 0x1cf
			conn->procedure_expire = 0U;
   3aed4:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   3aed6:	f043 0301 	orr.w	r3, r3, #1
   3aeda:	f885 31cf 	strb.w	r3, [r5, #463]	; 0x1cf
			conn->procedure_expire = 0U;
   3aede:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3aee2:	e4db      	b.n	3a89c <ull_conn_rx+0x2a4>
		if (conn->lll.role ||
   3aee4:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3aee8:	2b00      	cmp	r3, #0
   3aeea:	f6ff ac9c 	blt.w	3a826 <ull_conn_rx+0x22e>
   3aeee:	7f73      	ldrb	r3, [r6, #29]
   3aef0:	2b09      	cmp	r3, #9
   3aef2:	f47f ac98 	bne.w	3a826 <ull_conn_rx+0x22e>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   3aef6:	4662      	mov	r2, ip
   3aef8:	4631      	mov	r1, r6
   3aefa:	4628      	mov	r0, r5
   3aefc:	f7fe ff0a 	bl	39d14 <feature_rsp_send>
		break;
   3af00:	e436      	b.n	3a770 <ull_conn_rx+0x178>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   3af02:	7f74      	ldrb	r4, [r6, #29]
   3af04:	2c06      	cmp	r4, #6
   3af06:	f47f ac8e 	bne.w	3a826 <ull_conn_rx+0x22e>
	if (!conn->llcp_version.tx) {
   3af0a:	f895 314a 	ldrb.w	r3, [r5, #330]	; 0x14a
   3af0e:	07df      	lsls	r7, r3, #31
   3af10:	f140 844f 	bpl.w	3b7b2 <ull_conn_rx+0x11ba>
	} else if (!conn->llcp_version.rx) {
   3af14:	f013 0302 	ands.w	r3, r3, #2
   3af18:	f47f acc0 	bne.w	3a89c <ull_conn_rx+0x2a4>
		conn->llcp_version.ack = conn->llcp_version.req;
   3af1c:	f895 2148 	ldrb.w	r2, [r5, #328]	; 0x148
		conn->procedure_expire = 0U;
   3af20:	f8a5 30c8 	strh.w	r3, [r5, #200]	; 0xc8
		conn->llcp_version.ack = conn->llcp_version.req;
   3af24:	f885 2149 	strb.w	r2, [r5, #329]	; 0x149
	conn->llcp_version.version_number = v->version_number;
   3af28:	f896 3020 	ldrb.w	r3, [r6, #32]
   3af2c:	f885 314b 	strb.w	r3, [r5, #331]	; 0x14b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   3af30:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   3af34:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   3af38:	f895 314a 	ldrb.w	r3, [r5, #330]	; 0x14a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   3af3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   3af40:	f8a5 214c 	strh.w	r2, [r5, #332]	; 0x14c
		sys_le16_to_cpu(v->sub_version_number);
   3af44:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   3af48:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   3af4c:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   3af50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   3af54:	f8a5 214e 	strh.w	r2, [r5, #334]	; 0x14e
	conn->llcp_version.rx = 1U;
   3af58:	f885 314a 	strb.w	r3, [r5, #330]	; 0x14a
	return 0;
   3af5c:	2000      	movs	r0, #0
   3af5e:	e407      	b.n	3a770 <ull_conn_rx+0x178>
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   3af60:	7f73      	ldrb	r3, [r6, #29]
   3af62:	2b09      	cmp	r3, #9
   3af64:	f47f ac5f 	bne.w	3a826 <ull_conn_rx+0x22e>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   3af68:	f1b8 0f14 	cmp.w	r8, #20
   3af6c:	f000 827b 	beq.w	3b466 <ull_conn_rx+0xe6e>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3af70:	f895 21bc 	ldrb.w	r2, [r5, #444]	; 0x1bc
	if (/* Local idle, and Peer request then complete the Peer procedure
   3af74:	f895 11bd 	ldrb.w	r1, [r5, #445]	; 0x1bd
	eff_rx_octets = conn->lll.max_rx_octets;
   3af78:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3af7c:	9200      	str	r2, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
   3af7e:	4291      	cmp	r1, r2
	eff_rx_octets = conn->lll.max_rx_octets;
   3af80:	9301      	str	r3, [sp, #4]
	eff_tx_octets = conn->lll.max_tx_octets;
   3af82:	f8b5 9058 	ldrh.w	r9, [r5, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   3af86:	f8b5 a05e 	ldrh.w	sl, [r5, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   3af8a:	f8b5 b05c 	ldrh.w	fp, [r5, #92]	; 0x5c
	if (/* Local idle, and Peer request then complete the Peer procedure
   3af8e:	f000 85d8 	beq.w	3bb42 <ull_conn_rx+0x154a>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   3af92:	f895 21be 	ldrb.w	r2, [r5, #446]	; 0x1be
	struct node_tx *tx = NULL;
   3af96:	2100      	movs	r1, #0
	       tx) ||
   3af98:	f002 0207 	and.w	r2, r2, #7
   3af9c:	2a02      	cmp	r2, #2
   3af9e:	f000 828b 	beq.w	3b4b8 <ull_conn_rx+0xec0>
   3afa2:	f896 801f 	ldrb.w	r8, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   3afa6:	f1b8 0f15 	cmp.w	r8, #21
   3afaa:	f43f ac33 	beq.w	3a814 <ull_conn_rx+0x21c>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3afae:	4608      	mov	r0, r1
   3afb0:	49ea      	ldr	r1, [pc, #936]	; (3b35c <ull_conn_rx+0xd64>)
   3afb2:	f7f8 ff63 	bl	33e7c <mem_release>
			if (conn->llcp_length.state ==
   3afb6:	f895 31be 	ldrb.w	r3, [r5, #446]	; 0x1be
			conn->common.txn_lock = 0U;
   3afba:	f895 20e4 	ldrb.w	r2, [r5, #228]	; 0xe4
			if (conn->llcp_length.state ==
   3afbe:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   3afc2:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   3afc6:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   3afc8:	f885 20e4 	strb.w	r2, [r5, #228]	; 0xe4
			if (conn->llcp_length.state ==
   3afcc:	f47f ac22 	bne.w	3a814 <ull_conn_rx+0x21c>
				return -EBUSY;
   3afd0:	f06f 000f 	mvn.w	r0, #15
   3afd4:	f7ff bbcc 	b.w	3a770 <ull_conn_rx+0x178>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   3afd8:	7f73      	ldrb	r3, [r6, #29]
   3afda:	2b03      	cmp	r3, #3
   3afdc:	f47f ac23 	bne.w	3a826 <ull_conn_rx+0x22e>
		if (!conn->lll.role) {
   3afe0:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3afe4:	2b00      	cmp	r3, #0
   3afe6:	f2c0 835d 	blt.w	3b6a4 <ull_conn_rx+0x10ac>
			if ((conn->llcp_phy.ack !=
   3afea:	f895 31cd 	ldrb.w	r3, [r5, #461]	; 0x1cd
			     conn->llcp_phy.req) &&
   3afee:	f895 11cc 	ldrb.w	r1, [r5, #460]	; 0x1cc
			if ((conn->llcp_phy.ack !=
   3aff2:	428b      	cmp	r3, r1
   3aff4:	d007      	beq.n	3b006 <ull_conn_rx+0xa0e>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   3aff6:	f895 21ce 	ldrb.w	r2, [r5, #462]	; 0x1ce
   3affa:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   3affe:	3a01      	subs	r2, #1
   3b000:	2a02      	cmp	r2, #2
   3b002:	f240 84c0 	bls.w	3b986 <ull_conn_rx+0x138e>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   3b006:	f895 20f0 	ldrb.w	r2, [r5, #240]	; 0xf0
   3b00a:	f895 00f1 	ldrb.w	r0, [r5, #241]	; 0xf1
   3b00e:	1a12      	subs	r2, r2, r0
   3b010:	f002 0203 	and.w	r2, r2, #3
   3b014:	2a02      	cmp	r2, #2
   3b016:	f000 8469 	beq.w	3b8ec <ull_conn_rx+0x12f4>
				     LLCP_ENCRYPTION)) ||
   3b01a:	f895 0194 	ldrb.w	r0, [r5, #404]	; 0x194
   3b01e:	f895 2195 	ldrb.w	r2, [r5, #405]	; 0x195
   3b022:	4290      	cmp	r0, r2
   3b024:	f43f ab5b 	beq.w	3a6de <ull_conn_rx+0xe6>
				nack = reject_ext_ind_send(conn, *rx,
   3b028:	4631      	mov	r1, r6
   3b02a:	4628      	mov	r0, r5
   3b02c:	232a      	movs	r3, #42	; 0x2a
   3b02e:	2216      	movs	r2, #22
   3b030:	f7fe fd4c 	bl	39acc <reject_ext_ind_send>
   3b034:	f7ff bb9c 	b.w	3a770 <ull_conn_rx+0x178>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   3b038:	7f71      	ldrb	r1, [r6, #29]
   3b03a:	2901      	cmp	r1, #1
   3b03c:	f47f abf3 	bne.w	3a826 <ull_conn_rx+0x22e>
		conn->procedure_expire = 0U;
   3b040:	2300      	movs	r3, #0
   3b042:	f8a5 30c8 	strh.w	r3, [r5, #200]	; 0xc8
	int nack = 0;
   3b046:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b048:	7131      	strb	r1, [r6, #4]
		break;
   3b04a:	f7ff bb91 	b.w	3a770 <ull_conn_rx+0x178>
		if (!conn->lll.role ||
   3b04e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3b052:	2b00      	cmp	r3, #0
   3b054:	f6ff af4b 	blt.w	3aeee <ull_conn_rx+0x8f6>
   3b058:	f7ff bbe5 	b.w	3a826 <ull_conn_rx+0x22e>
		if (!conn->lll.role ||
   3b05c:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3b060:	2b00      	cmp	r3, #0
   3b062:	f6bf abe0 	bge.w	3a826 <ull_conn_rx+0x22e>
   3b066:	e43e      	b.n	3a8e6 <ull_conn_rx+0x2ee>
		if (conn->lll.role ||
   3b068:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3b06c:	2b00      	cmp	r3, #0
   3b06e:	f6ff abda 	blt.w	3a826 <ull_conn_rx+0x22e>
   3b072:	7f73      	ldrb	r3, [r6, #29]
   3b074:	2b0d      	cmp	r3, #13
   3b076:	f47f abd6 	bne.w	3a826 <ull_conn_rx+0x22e>
		memcpy(&conn->llcp.encryption.skd[8],
   3b07a:	2208      	movs	r2, #8
   3b07c:	f106 0120 	add.w	r1, r6, #32
   3b080:	f505 7085 	add.w	r0, r5, #266	; 0x10a
   3b084:	f011 f932 	bl	4c2ec <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   3b088:	f106 0128 	add.w	r1, r6, #40	; 0x28
   3b08c:	2204      	movs	r2, #4
   3b08e:	f105 0098 	add.w	r0, r5, #152	; 0x98
   3b092:	f011 f92b 	bl	4c2ec <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   3b096:	f895 3176 	ldrb.w	r3, [r5, #374]	; 0x176
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b09a:	6822      	ldr	r2, [r4, #0]
		conn->llcp_enc.pause_rx = 1U;
   3b09c:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b0a0:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   3b0a2:	f885 3176 	strb.w	r3, [r5, #374]	; 0x176
	int nack = 0;
   3b0a6:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b0a8:	7111      	strb	r1, [r2, #4]
		break;
   3b0aa:	f7ff bb61 	b.w	3a770 <ull_conn_rx+0x178>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   3b0ae:	f895 21bc 	ldrb.w	r2, [r5, #444]	; 0x1bc
   3b0b2:	f895 31bd 	ldrb.w	r3, [r5, #445]	; 0x1bd
   3b0b6:	4293      	cmp	r3, r2
   3b0b8:	f43f abf0 	beq.w	3a89c <ull_conn_rx+0x2a4>
	conn->procedure_expire = 0U;
   3b0bc:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b0be:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   3b0c0:	f885 21bd 	strb.w	r2, [r5, #445]	; 0x1bd
	conn->procedure_expire = 0U;
   3b0c4:	f8a5 30c8 	strh.w	r3, [r5, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b0c8:	7771      	strb	r1, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3b0ca:	f8b5 205a 	ldrh.w	r2, [r5, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3b0ce:	f8b5 7058 	ldrh.w	r7, [r5, #88]	; 0x58
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   3b0d2:	f8b5 405e 	ldrh.w	r4, [r5, #94]	; 0x5e
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   3b0d6:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   3b0da:	8432      	strh	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b0dc:	2215      	movs	r2, #21
	int nack = 0;
   3b0de:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   3b0e0:	84b7      	strh	r7, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   3b0e2:	8474      	strh	r4, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   3b0e4:	84f1      	strh	r1, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b0e6:	77f2      	strb	r2, [r6, #31]
	if (err) {
   3b0e8:	f7ff bb42 	b.w	3a770 <ull_conn_rx+0x178>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3b0ec:	f895 01cc 	ldrb.w	r0, [r5, #460]	; 0x1cc
   3b0f0:	f895 31cd 	ldrb.w	r3, [r5, #461]	; 0x1cd
   3b0f4:	4283      	cmp	r3, r0
   3b0f6:	f43f abd1 	beq.w	3a89c <ull_conn_rx+0x2a4>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3b0fa:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   3b0fe:	2a23      	cmp	r2, #35	; 0x23
   3b100:	d012      	beq.n	3b128 <ull_conn_rx+0xb30>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b102:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3b106:	f895 11cf 	ldrb.w	r1, [r5, #463]	; 0x1cf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3b10a:	f885 01cd 	strb.w	r0, [r5, #461]	; 0x1cd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b10e:	f3c3 0002 	ubfx	r0, r3, #0, #3
   3b112:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   3b116:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   3b11a:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   3b11c:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3b120:	f885 11cf 	strb.w	r1, [r5, #463]	; 0x1cf
		conn->procedure_expire = 0U;
   3b124:	f8a5 00c8 	strh.w	r0, [r5, #200]	; 0xc8
	if (!conn->llcp_phy.cmd) {
   3b128:	f895 31cf 	ldrb.w	r3, [r5, #463]	; 0x1cf
   3b12c:	075f      	lsls	r7, r3, #29
   3b12e:	f57f abb5 	bpl.w	3a89c <ull_conn_rx+0x2a4>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b132:	231c      	movs	r3, #28
	p->status = rej_ext_ind->error_code;
   3b134:	7732      	strb	r2, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b136:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   3b138:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   3b13c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3b140:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   3b142:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
   3b146:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3b14a:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
   3b14c:	2000      	movs	r0, #0
   3b14e:	f7ff bb0f 	b.w	3a770 <ull_conn_rx+0x178>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3b152:	f895 3194 	ldrb.w	r3, [r5, #404]	; 0x194
   3b156:	f895 2195 	ldrb.w	r2, [r5, #405]	; 0x195
   3b15a:	429a      	cmp	r2, r3
   3b15c:	f43f ab9e 	beq.w	3a89c <ull_conn_rx+0x2a4>
	if (!lll->role && (rej_ext_ind->error_code ==
   3b160:	f995 1039 	ldrsb.w	r1, [r5, #57]	; 0x39
   3b164:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   3b168:	2900      	cmp	r1, #0
   3b16a:	f2c0 853a 	blt.w	3bbe2 <ull_conn_rx+0x15ea>
   3b16e:	2a1a      	cmp	r2, #26
   3b170:	f000 8628 	beq.w	3bdc4 <ull_conn_rx+0x17cc>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   3b174:	f895 2196 	ldrb.w	r2, [r5, #406]	; 0x196
   3b178:	f002 010f 	and.w	r1, r2, #15
   3b17c:	2904      	cmp	r1, #4
   3b17e:	d106      	bne.n	3b18e <ull_conn_rx+0xb96>
	conn_upd_curr = NULL;
   3b180:	4977      	ldr	r1, [pc, #476]	; (3b360 <ull_conn_rx+0xd68>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3b182:	f885 3195 	strb.w	r3, [r5, #405]	; 0x195
	conn_upd_curr = NULL;
   3b186:	2300      	movs	r3, #0
   3b188:	600b      	str	r3, [r1, #0]
		conn->procedure_expire = 0U;
   3b18a:	f8a5 30c8 	strh.w	r3, [r5, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   3b18e:	06d4      	lsls	r4, r2, #27
   3b190:	f57f ab84 	bpl.w	3a89c <ull_conn_rx+0x2a4>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3b194:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3b196:	f01c 0f01 	tst.w	ip, #1
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3b19a:	7133      	strb	r3, [r6, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3b19c:	f040 85cd 	bne.w	3bd3a <ull_conn_rx+0x1742>
	cu->status = rej_ext_ind->error_code;
   3b1a0:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3b1a4:	7733      	strb	r3, [r6, #28]
	cu->interval = lll->interval;
   3b1a6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   3b1a8:	f8b5 20c2 	ldrh.w	r2, [r5, #194]	; 0xc2
	cu->latency = lll->latency;
   3b1ac:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
	cu->interval = lll->interval;
   3b1ae:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
   3b1b0:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   3b1b4:	237d      	movs	r3, #125	; 0x7d
   3b1b6:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   3b1ba:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
   3b1bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   3b1c0:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   3b1c2:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   3b1c6:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   3b1c8:	f7ff bad2 	b.w	3a770 <ull_conn_rx+0x178>
		if ((conn->llcp_ack != conn->llcp_req) &&
   3b1cc:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
   3b1d0:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
   3b1d4:	429a      	cmp	r2, r3
   3b1d6:	f43f ab61 	beq.w	3a89c <ull_conn_rx+0x2a4>
   3b1da:	f895 20f2 	ldrb.w	r2, [r5, #242]	; 0xf2
   3b1de:	2a03      	cmp	r2, #3
   3b1e0:	f47f ab5c 	bne.w	3a89c <ull_conn_rx+0x2a4>
	conn->llcp_enc.pause_rx = 0U;
   3b1e4:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
	conn->llcp_ack = conn->llcp_req;
   3b1e8:	f885 30f1 	strb.w	r3, [r5, #241]	; 0xf1
	conn->llcp_enc.pause_rx = 0U;
   3b1ec:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   3b1f0:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   3b1f2:	f885 2176 	strb.w	r2, [r5, #374]	; 0x176
	conn->procedure_expire = 0U;
   3b1f6:	f8a5 30c8 	strh.w	r3, [r5, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   3b1fa:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   3b1fe:	f886 2020 	strb.w	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3b202:	220d      	movs	r2, #13
	int nack = 0;
   3b204:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3b206:	77f2      	strb	r2, [r6, #31]
	if (err) {
   3b208:	f7ff bab2 	b.w	3a770 <ull_conn_rx+0x178>
		((!conn->llcp_enc.refresh &&
   3b20c:	f1b8 0f02 	cmp.w	r8, #2
   3b210:	f47f aa35 	bne.w	3a67e <ull_conn_rx+0x86>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   3b214:	7f73      	ldrb	r3, [r6, #29]
   3b216:	2b02      	cmp	r3, #2
   3b218:	f47f ab05 	bne.w	3a826 <ull_conn_rx+0x22e>
	conn->llcp_terminate.reason_final =
   3b21c:	f896 3020 	ldrb.w	r3, [r6, #32]
   3b220:	f885 3153 	strb.w	r3, [r5, #339]	; 0x153
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b224:	2301      	movs	r3, #1
   3b226:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   3b228:	2000      	movs	r0, #0
   3b22a:	f7ff baa1 	b.w	3a770 <ull_conn_rx+0x178>
		((!conn->llcp_enc.refresh &&
   3b22e:	f1b8 0f07 	cmp.w	r8, #7
   3b232:	d035      	beq.n	3b2a0 <ull_conn_rx+0xca8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   3b234:	f1b8 0f02 	cmp.w	r8, #2
   3b238:	f47f aa25 	bne.w	3a686 <ull_conn_rx+0x8e>
   3b23c:	e7ea      	b.n	3b214 <ull_conn_rx+0xc1c>
			return -ENOBUFS;
   3b23e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   3b242:	f7ff ba95 	b.w	3a770 <ull_conn_rx+0x178>
		if ((conn->llcp_req == conn->llcp_ack) ||
   3b246:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
   3b24a:	f895 00f1 	ldrb.w	r0, [r5, #241]	; 0xf1
   3b24e:	4298      	cmp	r0, r3
   3b250:	f43f aae9 	beq.w	3a826 <ull_conn_rx+0x22e>
   3b254:	f895 00f2 	ldrb.w	r0, [r5, #242]	; 0xf2
   3b258:	2803      	cmp	r0, #3
   3b25a:	f47f aae4 	bne.w	3a826 <ull_conn_rx+0x22e>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   3b25e:	7f70      	ldrb	r0, [r6, #29]
   3b260:	2801      	cmp	r0, #1
   3b262:	f47f aae0 	bne.w	3a826 <ull_conn_rx+0x22e>
		if (conn->lll.role) {
   3b266:	f995 2039 	ldrsb.w	r2, [r5, #57]	; 0x39
   3b26a:	2a00      	cmp	r2, #0
   3b26c:	f2c0 8393 	blt.w	3b996 <ull_conn_rx+0x139e>
			conn->llcp_enc.pause_rx = 0U;
   3b270:	f895 1176 	ldrb.w	r1, [r5, #374]	; 0x176
			conn->llcp_ack = conn->llcp_req;
   3b274:	f885 30f1 	strb.w	r3, [r5, #241]	; 0xf1
			conn->llcp_enc.pause_rx = 0U;
   3b278:	f021 0103 	bic.w	r1, r1, #3
			conn->procedure_expire = 0U;
   3b27c:	2300      	movs	r3, #0
			conn->llcp_enc.pause_rx = 0U;
   3b27e:	f885 1176 	strb.w	r1, [r5, #374]	; 0x176
			conn->procedure_expire = 0U;
   3b282:	f8a5 30c8 	strh.w	r3, [r5, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   3b286:	0748      	lsls	r0, r1, #29
   3b288:	f57f aac4 	bpl.w	3a814 <ull_conn_rx+0x21c>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   3b28c:	6823      	ldr	r3, [r4, #0]
			conn->llcp_enc.refresh = 0U;
   3b28e:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   3b292:	2219      	movs	r2, #25
			conn->llcp_enc.refresh = 0U;
   3b294:	f885 1176 	strb.w	r1, [r5, #374]	; 0x176
	int nack = 0;
   3b298:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   3b29a:	711a      	strb	r2, [r3, #4]
   3b29c:	f7ff ba68 	b.w	3a770 <ull_conn_rx+0x178>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   3b2a0:	7f73      	ldrb	r3, [r6, #29]
   3b2a2:	2b02      	cmp	r3, #2
   3b2a4:	f47f aabf 	bne.w	3a826 <ull_conn_rx+0x22e>
			    conn->llcp_conn_param.req) &&
   3b2a8:	f895 2194 	ldrb.w	r2, [r5, #404]	; 0x194
		} else if ((conn->llcp_conn_param.ack !=
   3b2ac:	f895 1195 	ldrb.w	r1, [r5, #405]	; 0x195
   3b2b0:	f896 3020 	ldrb.w	r3, [r6, #32]
   3b2b4:	4291      	cmp	r1, r2
   3b2b6:	d002      	beq.n	3b2be <ull_conn_rx+0xcc6>
			    conn->llcp_conn_param.req) &&
   3b2b8:	2b0f      	cmp	r3, #15
   3b2ba:	f000 829f 	beq.w	3b7fc <ull_conn_rx+0x1204>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   3b2be:	f895 21bc 	ldrb.w	r2, [r5, #444]	; 0x1bc
   3b2c2:	f895 11bd 	ldrb.w	r1, [r5, #445]	; 0x1bd
   3b2c6:	4291      	cmp	r1, r2
   3b2c8:	d002      	beq.n	3b2d0 <ull_conn_rx+0xcd8>
   3b2ca:	2b14      	cmp	r3, #20
   3b2cc:	f000 82e0 	beq.w	3b890 <ull_conn_rx+0x1298>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   3b2d0:	f895 11cc 	ldrb.w	r1, [r5, #460]	; 0x1cc
   3b2d4:	f895 21cd 	ldrb.w	r2, [r5, #461]	; 0x1cd
   3b2d8:	428a      	cmp	r2, r1
   3b2da:	d002      	beq.n	3b2e2 <ull_conn_rx+0xcea>
   3b2dc:	2b16      	cmp	r3, #22
   3b2de:	f000 832e 	beq.w	3b93e <ull_conn_rx+0x1346>
			switch (llctrl->unknown_rsp.type) {
   3b2e2:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b2e4:	bf04      	itt	eq
   3b2e6:	2301      	moveq	r3, #1
   3b2e8:	7133      	strbeq	r3, [r6, #4]
				break;
   3b2ea:	e5ab      	b.n	3ae44 <ull_conn_rx+0x84c>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   3b2ec:	7f73      	ldrb	r3, [r6, #29]
   3b2ee:	2b02      	cmp	r3, #2
   3b2f0:	f47f aa99 	bne.w	3a826 <ull_conn_rx+0x22e>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   3b2f4:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
   3b2f8:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
   3b2fc:	429a      	cmp	r2, r3
   3b2fe:	d004      	beq.n	3b30a <ull_conn_rx+0xd12>
   3b300:	f895 20f2 	ldrb.w	r2, [r5, #242]	; 0xf2
   3b304:	2a03      	cmp	r2, #3
   3b306:	f000 830c 	beq.w	3b922 <ull_conn_rx+0x132a>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3b30a:	f895 01cc 	ldrb.w	r0, [r5, #460]	; 0x1cc
   3b30e:	f895 31cd 	ldrb.w	r3, [r5, #461]	; 0x1cd
   3b312:	4283      	cmp	r3, r0
   3b314:	f000 82c6 	beq.w	3b8a4 <ull_conn_rx+0x12ac>
		rej_ext_ind->error_code = rej_ind->error_code;
   3b318:	f896 2020 	ldrb.w	r2, [r6, #32]
   3b31c:	f886 2021 	strb.w	r2, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3b320:	2a23      	cmp	r2, #35	; 0x23
   3b322:	f47f aeee 	bne.w	3b102 <ull_conn_rx+0xb0a>
   3b326:	e6ff      	b.n	3b128 <ull_conn_rx+0xb30>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   3b328:	f895 10f0 	ldrb.w	r1, [r5, #240]	; 0xf0
   3b32c:	f895 30f1 	ldrb.w	r3, [r5, #241]	; 0xf1
   3b330:	4299      	cmp	r1, r3
   3b332:	f43f aa78 	beq.w	3a826 <ull_conn_rx+0x22e>
   3b336:	f895 30f2 	ldrb.w	r3, [r5, #242]	; 0xf2
   3b33a:	2b03      	cmp	r3, #3
   3b33c:	f47f aa73 	bne.w	3a826 <ull_conn_rx+0x22e>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   3b340:	7f73      	ldrb	r3, [r6, #29]
   3b342:	2b01      	cmp	r3, #1
   3b344:	f47f aa6f 	bne.w	3a826 <ull_conn_rx+0x22e>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3b348:	f895 2100 	ldrb.w	r2, [r5, #256]	; 0x100
   3b34c:	f36f 0201 	bfc	r2, #0, #2
   3b350:	f885 2100 	strb.w	r2, [r5, #256]	; 0x100
	int nack = 0;
   3b354:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b356:	7133      	strb	r3, [r6, #4]
		break;
   3b358:	f7ff ba0a 	b.w	3a770 <ull_conn_rx+0x178>
   3b35c:	20005348 	.word	0x20005348
   3b360:	200052b4 	.word	0x200052b4
			conn->tx_data = conn->tx_data->next;
   3b364:	680a      	ldr	r2, [r1, #0]
   3b366:	f8c5 21e0 	str.w	r2, [r5, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3b36a:	2b00      	cmp	r3, #0
   3b36c:	f47f aa8b 	bne.w	3a886 <ull_conn_rx+0x28e>
			tx->next = conn->tx_head->next;
   3b370:	680b      	ldr	r3, [r1, #0]
   3b372:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   3b374:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
   3b376:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
   3b378:	e9c5 0076 	strd	r0, r0, [r5, #472]	; 0x1d8
   3b37c:	f7ff ba8b 	b.w	3a896 <ull_conn_rx+0x29e>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3b380:	7f73      	ldrb	r3, [r6, #29]
   3b382:	2b01      	cmp	r3, #1
   3b384:	f47f aa4f 	bne.w	3a826 <ull_conn_rx+0x22e>
		conn->lll.enc_tx = 0;
   3b388:	f895 307a 	ldrb.w	r3, [r5, #122]	; 0x7a
   3b38c:	f36f 1304 	bfc	r3, #4, #1
   3b390:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   3b394:	f7ff ba82 	b.w	3a89c <ull_conn_rx+0x2a4>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3b398:	7f73      	ldrb	r3, [r6, #29]
   3b39a:	2b01      	cmp	r3, #1
   3b39c:	f47f aa43 	bne.w	3a826 <ull_conn_rx+0x22e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b3a0:	48be      	ldr	r0, [pc, #760]	; (3b69c <ull_conn_rx+0x10a4>)
   3b3a2:	f7f8 fd51 	bl	33e48 <mem_acquire>
		if (!tx) {
   3b3a6:	2800      	cmp	r0, #0
   3b3a8:	f43f af49 	beq.w	3b23e <ull_conn_rx+0xc46>
	conn->llcp_enc.pause_rx = 1U;
   3b3ac:	f895 1176 	ldrb.w	r1, [r5, #374]	; 0x176
	conn->lll.enc_rx = 0;
   3b3b0:	f895 307a 	ldrb.w	r3, [r5, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b3b4:	7902      	ldrb	r2, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   3b3b6:	f041 0101 	orr.w	r1, r1, #1
   3b3ba:	f885 1176 	strb.w	r1, [r5, #374]	; 0x176
	conn->lll.enc_rx = 0;
   3b3be:	f023 0318 	bic.w	r3, r3, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3b3c2:	2101      	movs	r1, #1
	conn->lll.enc_rx = 0;
   3b3c4:	f885 307a 	strb.w	r3, [r5, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   3b3c8:	7141      	strb	r1, [r0, #5]
   3b3ca:	f7ff bba4 	b.w	3ab16 <ull_conn_rx+0x51e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3b3ce:	790b      	ldrb	r3, [r1, #4]
   3b3d0:	f003 0303 	and.w	r3, r3, #3
   3b3d4:	2b03      	cmp	r3, #3
   3b3d6:	d040      	beq.n	3b45a <ull_conn_rx+0xe62>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3b3d8:	f8c5 11d8 	str.w	r1, [r5, #472]	; 0x1d8
   3b3dc:	f7ff ba55 	b.w	3a88a <ull_conn_rx+0x292>
		if (!conn->lll.role) {
   3b3e0:	f995 7039 	ldrsb.w	r7, [r5, #57]	; 0x39
   3b3e4:	f895 0195 	ldrb.w	r0, [r5, #405]	; 0x195
   3b3e8:	f895 2194 	ldrb.w	r2, [r5, #404]	; 0x194
   3b3ec:	9000      	str	r0, [sp, #0]
   3b3ee:	2f00      	cmp	r7, #0
   3b3f0:	f2c0 80bf 	blt.w	3b572 <ull_conn_rx+0xf7a>
			if ((conn->llcp_conn_param.req !=
   3b3f4:	9f00      	ldr	r7, [sp, #0]
   3b3f6:	4297      	cmp	r7, r2
   3b3f8:	d00a      	beq.n	3b410 <ull_conn_rx+0xe18>
			    ((conn->llcp_conn_param.state ==
   3b3fa:	f895 2196 	ldrb.w	r2, [r5, #406]	; 0x196
					conn->llcp_conn_param.ack) &&
   3b3fe:	f012 0f0b 	tst.w	r2, #11
   3b402:	f000 827e 	beq.w	3b902 <ull_conn_rx+0x130a>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   3b406:	f002 020f 	and.w	r2, r2, #15
   3b40a:	2a06      	cmp	r2, #6
   3b40c:	f000 8279 	beq.w	3b902 <ull_conn_rx+0x130a>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   3b410:	f895 20f0 	ldrb.w	r2, [r5, #240]	; 0xf0
   3b414:	f895 70f1 	ldrb.w	r7, [r5, #241]	; 0xf1
   3b418:	1bd2      	subs	r2, r2, r7
   3b41a:	f002 0203 	and.w	r2, r2, #3
   3b41e:	2a02      	cmp	r2, #2
   3b420:	f000 8395 	beq.w	3bb4e <ull_conn_rx+0x1556>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   3b424:	f895 71cc 	ldrb.w	r7, [r5, #460]	; 0x1cc
   3b428:	f895 21cd 	ldrb.w	r2, [r5, #461]	; 0x1cd
   3b42c:	4297      	cmp	r7, r2
   3b42e:	f000 83f8 	beq.w	3bc22 <ull_conn_rx+0x162a>
				nack = reject_ext_ind_send(conn, *rx,
   3b432:	4631      	mov	r1, r6
   3b434:	4628      	mov	r0, r5
   3b436:	232a      	movs	r3, #42	; 0x2a
   3b438:	220f      	movs	r2, #15
   3b43a:	f7fe fb47 	bl	39acc <reject_ext_ind_send>
   3b43e:	f7ff b997 	b.w	3a770 <ull_conn_rx+0x178>
		if (!conn->tx_ctrl) {
   3b442:	f8d5 21d8 	ldr.w	r2, [r5, #472]	; 0x1d8
   3b446:	2a00      	cmp	r2, #0
   3b448:	f47f ab83 	bne.w	3ab52 <ull_conn_rx+0x55a>
			tx->next = conn->tx_head;
   3b44c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3b44e:	e9c5 0075 	strd	r0, r0, [r5, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3b452:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
   3b456:	f7ff bb83 	b.w	3ab60 <ull_conn_rx+0x568>
	    ((pdu_data_tx->llctrl.opcode !=
   3b45a:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3b45c:	2b03      	cmp	r3, #3
   3b45e:	d087      	beq.n	3b370 <ull_conn_rx+0xd78>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3b460:	2b0a      	cmp	r3, #10
   3b462:	d1b9      	bne.n	3b3d8 <ull_conn_rx+0xde0>
   3b464:	e784      	b.n	3b370 <ull_conn_rx+0xd78>
	if (conn->common.txn_lock) {
   3b466:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
   3b46a:	0799      	lsls	r1, r3, #30
   3b46c:	f53f aa16 	bmi.w	3a89c <ull_conn_rx+0x2a4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b470:	488a      	ldr	r0, [pc, #552]	; (3b69c <ull_conn_rx+0x10a4>)
   3b472:	f7f8 fce9 	bl	33e48 <mem_acquire>
	if (!tx) {
   3b476:	4601      	mov	r1, r0
   3b478:	2800      	cmp	r0, #0
   3b47a:	f43f aee0 	beq.w	3b23e <ull_conn_rx+0xc46>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3b47e:	f895 31bc 	ldrb.w	r3, [r5, #444]	; 0x1bc
   3b482:	9300      	str	r3, [sp, #0]
	eff_rx_octets = conn->lll.max_rx_octets;
   3b484:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
	conn->common.txn_lock = 1U;
   3b488:	f895 20e4 	ldrb.w	r2, [r5, #228]	; 0xe4
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   3b48c:	f895 01bd 	ldrb.w	r0, [r5, #445]	; 0x1bd
	eff_rx_octets = conn->lll.max_rx_octets;
   3b490:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   3b492:	9b00      	ldr	r3, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   3b494:	f8b5 9058 	ldrh.w	r9, [r5, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   3b498:	f8b5 a05e 	ldrh.w	sl, [r5, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   3b49c:	f8b5 b05c 	ldrh.w	fp, [r5, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   3b4a0:	f042 0202 	orr.w	r2, r2, #2
	if (/* Local idle, and Peer request then complete the Peer procedure
   3b4a4:	4283      	cmp	r3, r0
	conn->common.txn_lock = 1U;
   3b4a6:	f885 20e4 	strb.w	r2, [r5, #228]	; 0xe4
	if (/* Local idle, and Peer request then complete the Peer procedure
   3b4aa:	d005      	beq.n	3b4b8 <ull_conn_rx+0xec0>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   3b4ac:	f895 21be 	ldrb.w	r2, [r5, #446]	; 0x1be
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   3b4b0:	f012 0f06 	tst.w	r2, #6
   3b4b4:	f47f ad70 	bne.w	3af98 <ull_conn_rx+0x9a0>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   3b4b8:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b4ba:	2a1a      	cmp	r2, #26
   3b4bc:	f240 8261 	bls.w	3b982 <ull_conn_rx+0x138a>
			eff_tx_octets = MIN(max_rx_octets,
   3b4c0:	f8b5 00d2 	ldrh.w	r0, [r5, #210]	; 0xd2
   3b4c4:	4282      	cmp	r2, r0
   3b4c6:	bf28      	it	cs
   3b4c8:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b4ca:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
			eff_rx_octets = MIN(max_tx_octets,
   3b4ce:	9b01      	ldr	r3, [sp, #4]
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   3b4d0:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   3b4d4:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   3b4d8:	f1be 0f1b 	cmp.w	lr, #27
   3b4dc:	bf34      	ite	cc
   3b4de:	469e      	movcc	lr, r3
   3b4e0:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   3b4e4:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
			eff_rx_octets = MIN(max_tx_octets,
   3b4e8:	4618      	mov	r0, r3
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   3b4ea:	bf34      	ite	cc
   3b4ec:	4658      	movcc	r0, fp
   3b4ee:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   3b4f2:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   3b4f6:	bf34      	ite	cc
   3b4f8:	46d4      	movcc	ip, sl
   3b4fa:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   3b4fe:	459e      	cmp	lr, r3
   3b500:	f000 8265 	beq.w	3b9ce <ull_conn_rx+0x13d6>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   3b504:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
   3b506:	f8a5 e1c0 	strh.w	lr, [r5, #448]	; 0x1c0
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   3b50a:	3b01      	subs	r3, #1
   3b50c:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
			conn->llcp_length.tx_octets = eff_tx_octets;
   3b510:	f8a5 21c2 	strh.w	r2, [r5, #450]	; 0x1c2
			conn->llcp_length.rx_time = eff_rx_time;
   3b514:	f8a5 c1c4 	strh.w	ip, [r5, #452]	; 0x1c4
			conn->llcp_length.tx_time = eff_tx_time;
   3b518:	f8a5 01c6 	strh.w	r0, [r5, #454]	; 0x1c6
				conn->llcp_length.state =
   3b51c:	f895 31be 	ldrb.w	r3, [r5, #446]	; 0x1be
			if (tx) {
   3b520:	2900      	cmp	r1, #0
   3b522:	f000 831a 	beq.w	3bb5a <ull_conn_rx+0x1562>
				conn->llcp_length.state =
   3b526:	2605      	movs	r6, #5
   3b528:	f366 0302 	bfi	r3, r6, #0, #3
   3b52c:	f885 31be 	strb.w	r3, [r5, #446]	; 0x1be
			link->mem = conn->llcp_rx;
   3b530:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
   3b534:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
   3b536:	6823      	ldr	r3, [r4, #0]
   3b538:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
   3b53a:	6823      	ldr	r3, [r4, #0]
   3b53c:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
			*rx = NULL;
   3b540:	2300      	movs	r3, #0
   3b542:	6023      	str	r3, [r4, #0]
	if (tx) {
   3b544:	2900      	cmp	r1, #0
   3b546:	f43f a965 	beq.w	3a814 <ull_conn_rx+0x21c>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b54a:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   3b54c:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b54e:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b552:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b554:	2409      	movs	r4, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   3b556:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   3b558:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   3b55c:	4628      	mov	r0, r5
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   3b55e:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b562:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3b564:	714c      	strb	r4, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3b566:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   3b568:	f7fe fb3a 	bl	39be0 <ctrl_tx_sec_enqueue>
	return 0;
   3b56c:	2000      	movs	r0, #0
   3b56e:	f7ff b8ff 	b.w	3a770 <ull_conn_rx+0x178>
		} else if ((conn->llcp_conn_param.req ==
   3b572:	9900      	ldr	r1, [sp, #0]
   3b574:	4291      	cmp	r1, r2
   3b576:	d005      	beq.n	3b584 <ull_conn_rx+0xf8c>
			    conn->llcp_conn_param.ack) ||
   3b578:	f895 2196 	ldrb.w	r2, [r5, #406]	; 0x196
   3b57c:	f012 0f0b 	tst.w	r2, #11
   3b580:	f47f a98c 	bne.w	3a89c <ull_conn_rx+0x2a4>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   3b584:	f8b6 a020 	ldrh.w	sl, [r6, #32]
   3b588:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3b58c:	2a05      	cmp	r2, #5
   3b58e:	f240 8108 	bls.w	3b7a2 <ull_conn_rx+0x11aa>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   3b592:	f8b6 9022 	ldrh.w	r9, [r6, #34]	; 0x22
   3b596:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3b59a:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   3b59e:	f200 8100 	bhi.w	3b7a2 <ull_conn_rx+0x11aa>
			    (interval_max > 3200) ||
   3b5a2:	428a      	cmp	r2, r1
   3b5a4:	f200 80fd 	bhi.w	3b7a2 <ull_conn_rx+0x11aa>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   3b5a8:	f8b6 8024 	ldrh.w	r8, [r6, #36]	; 0x24
   3b5ac:	fa1f f788 	uxth.w	r7, r8
			    (interval_min > interval_max) ||
   3b5b0:	f5b7 7ffa 	cmp.w	r7, #500	; 0x1f4
   3b5b4:	f080 80f5 	bcs.w	3b7a2 <ull_conn_rx+0x11aa>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   3b5b8:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
   3b5bc:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   3b5c0:	f1a2 0c0a 	sub.w	ip, r2, #10
   3b5c4:	fa1f fc8c 	uxth.w	ip, ip
   3b5c8:	f640 4b76 	movw	fp, #3190	; 0xc76
   3b5cc:	45dc      	cmp	ip, fp
   3b5ce:	f200 80e8 	bhi.w	3b7a2 <ull_conn_rx+0x11aa>
			     ((latency + 1) * interval_max)) ||
   3b5d2:	fb07 1c01 	mla	ip, r7, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   3b5d6:	ebbc 0f82 	cmp.w	ip, r2, lsl #2
   3b5da:	f080 80e2 	bcs.w	3b7a2 <ull_conn_rx+0x11aa>
				cpr->preferred_periodicity;
   3b5de:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
			     ((latency + 1) * interval_max)) ||
   3b5e2:	4561      	cmp	r1, ip
   3b5e4:	f0c0 80dd 	bcc.w	3b7a2 <ull_conn_rx+0x11aa>
			conn->llcp_conn_param.timeout =	timeout;
   3b5e8:	f8a5 e19e 	strh.w	lr, [r5, #414]	; 0x19e
			conn->llcp_conn_param.interval_min = interval_min;
   3b5ec:	f8a5 a198 	strh.w	sl, [r5, #408]	; 0x198
			conn->llcp_conn_param.interval_max = interval_max;
   3b5f0:	f8a5 919a 	strh.w	r9, [r5, #410]	; 0x19a
			conn->llcp_conn_param.latency =	latency;
   3b5f4:	f8a5 819c 	strh.w	r8, [r5, #412]	; 0x19c
			conn->llcp_conn_param.preferred_periodicity =
   3b5f8:	f885 c1a0 	strb.w	ip, [r5, #416]	; 0x1a0
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3b5fc:	f896 802a 	ldrb.w	r8, [r6, #42]	; 0x2a
   3b600:	f896 c029 	ldrb.w	ip, [r6, #41]	; 0x29
			     lll->interval) ||
   3b604:	f8b5 e02a 	ldrh.w	lr, [r5, #42]	; 0x2a
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   3b608:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   3b60c:	f8a5 c1a2 	strh.w	ip, [r5, #418]	; 0x1a2
				sys_le16_to_cpu(cpr->offset0);
   3b610:	f896 802c 	ldrb.w	r8, [r6, #44]	; 0x2c
   3b614:	f896 c02b 	ldrb.w	ip, [r6, #43]	; 0x2b
   3b618:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset0 =
   3b61c:	f8a5 c1a4 	strh.w	ip, [r5, #420]	; 0x1a4
				sys_le16_to_cpu(cpr->offset1);
   3b620:	f896 802e 	ldrb.w	r8, [r6, #46]	; 0x2e
   3b624:	f896 c02d 	ldrb.w	ip, [r6, #45]	; 0x2d
   3b628:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset1 =
   3b62c:	f8a5 c1a6 	strh.w	ip, [r5, #422]	; 0x1a6
				sys_le16_to_cpu(cpr->offset2);
   3b630:	f896 8030 	ldrb.w	r8, [r6, #48]	; 0x30
   3b634:	f896 c02f 	ldrb.w	ip, [r6, #47]	; 0x2f
   3b638:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset2 =
   3b63c:	f8a5 c1a8 	strh.w	ip, [r5, #424]	; 0x1a8
				sys_le16_to_cpu(cpr->offset3);
   3b640:	f896 8032 	ldrb.w	r8, [r6, #50]	; 0x32
   3b644:	f896 c031 	ldrb.w	ip, [r6, #49]	; 0x31
   3b648:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset3 =
   3b64c:	f8a5 c1aa 	strh.w	ip, [r5, #426]	; 0x1aa
				sys_le16_to_cpu(cpr->offset4);
   3b650:	f896 c033 	ldrb.w	ip, [r6, #51]	; 0x33
   3b654:	f896 8034 	ldrb.w	r8, [r6, #52]	; 0x34
   3b658:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset4 =
   3b65c:	f8a5 c1ac 	strh.w	ip, [r5, #428]	; 0x1ac
				sys_le16_to_cpu(cpr->offset5);
   3b660:	f896 c035 	ldrb.w	ip, [r6, #53]	; 0x35
   3b664:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
   3b668:	4571      	cmp	r1, lr
				sys_le16_to_cpu(cpr->offset5);
   3b66a:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   3b66e:	f8a5 61ae 	strh.w	r6, [r5, #430]	; 0x1ae
			if ((conn->llcp_conn_param.interval_max !=
   3b672:	f000 83e4 	beq.w	3be3e <ull_conn_rx+0x1846>
				conn->llcp_conn_param.state =
   3b676:	f895 2196 	ldrb.w	r2, [r5, #406]	; 0x196
   3b67a:	2103      	movs	r1, #3
   3b67c:	f361 0203 	bfi	r2, r1, #0, #4
   3b680:	f885 2196 	strb.w	r2, [r5, #406]	; 0x196
			conn->llcp_conn_param.ack--;
   3b684:	9a00      	ldr	r2, [sp, #0]
   3b686:	3a01      	subs	r2, #1
   3b688:	f885 2195 	strb.w	r2, [r5, #405]	; 0x195
	if (!conn_upd_curr) {
   3b68c:	2b00      	cmp	r3, #0
   3b68e:	f47f a8c1 	bne.w	3a814 <ull_conn_rx+0x21c>
		conn_upd_curr = conn;
   3b692:	4a03      	ldr	r2, [pc, #12]	; (3b6a0 <ull_conn_rx+0x10a8>)
	int nack = 0;
   3b694:	4618      	mov	r0, r3
		conn_upd_curr = conn;
   3b696:	6015      	str	r5, [r2, #0]
   3b698:	f7ff b86a 	b.w	3a770 <ull_conn_rx+0x178>
   3b69c:	20005348 	.word	0x20005348
   3b6a0:	200052b4 	.word	0x200052b4
	if (conn->common.txn_lock) {
   3b6a4:	f895 40e4 	ldrb.w	r4, [r5, #228]	; 0xe4
   3b6a8:	f014 0402 	ands.w	r4, r4, #2
   3b6ac:	f47f a8f6 	bne.w	3a89c <ull_conn_rx+0x2a4>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b6b0:	48de      	ldr	r0, [pc, #888]	; (3ba2c <ull_conn_rx+0x1434>)
   3b6b2:	f7f8 fbc9 	bl	33e48 <mem_acquire>
	if (!tx) {
   3b6b6:	2800      	cmp	r0, #0
   3b6b8:	f43f adc1 	beq.w	3b23e <ull_conn_rx+0xc46>
	conn->common.txn_lock = 1U;
   3b6bc:	f895 30e4 	ldrb.w	r3, [r5, #228]	; 0xe4
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3b6c0:	f895 c1ce 	ldrb.w	ip, [r5, #462]	; 0x1ce
   3b6c4:	f895 11d0 	ldrb.w	r1, [r5, #464]	; 0x1d0
	if (conn->llcp_phy.ack ==
   3b6c8:	f895 81cd 	ldrb.w	r8, [r5, #461]	; 0x1cd
   3b6cc:	f895 21cc 	ldrb.w	r2, [r5, #460]	; 0x1cc
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3b6d0:	2702      	movs	r7, #2
   3b6d2:	f367 0c01 	bfi	ip, r7, #0, #2
	conn->common.txn_lock = 1U;
   3b6d6:	433b      	orrs	r3, r7
	if (conn->llcp_phy.ack ==
   3b6d8:	4542      	cmp	r2, r8
   3b6da:	f3c1 0702 	ubfx	r7, r1, #0, #3
   3b6de:	f3c1 01c2 	ubfx	r1, r1, #3, #3
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3b6e2:	f885 c1ce 	strb.w	ip, [r5, #462]	; 0x1ce
	conn->common.txn_lock = 1U;
   3b6e6:	f885 30e4 	strb.w	r3, [r5, #228]	; 0xe4
	if (conn->llcp_phy.ack ==
   3b6ea:	fa5f fc87 	uxtb.w	ip, r7
   3b6ee:	fa5f fe81 	uxtb.w	lr, r1
   3b6f2:	d114      	bne.n	3b71e <ull_conn_rx+0x1126>
		conn->llcp_phy.tx =
   3b6f4:	f895 31ce 	ldrb.w	r3, [r5, #462]	; 0x1ce
   3b6f8:	f36c 0384 	bfi	r3, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
   3b6fc:	f895 c1cf 	ldrb.w	ip, [r5, #463]	; 0x1cf
		conn->llcp_phy.ack--;
   3b700:	3a01      	subs	r2, #1
		conn->llcp_phy.cmd = 0U;
   3b702:	f364 0c82 	bfi	ip, r4, #2, #1
		conn->llcp_phy.rx =
   3b706:	f36e 1347 	bfi	r3, lr, #5, #3
		conn->procedure_expire =
   3b70a:	f8b5 40c6 	ldrh.w	r4, [r5, #198]	; 0xc6
		conn->llcp_phy.ack--;
   3b70e:	f885 21cd 	strb.w	r2, [r5, #461]	; 0x1cd
		conn->llcp_phy.rx =
   3b712:	f885 31ce 	strb.w	r3, [r5, #462]	; 0x1ce
		conn->llcp_phy.cmd = 0U;
   3b716:	f885 c1cf 	strb.w	ip, [r5, #463]	; 0x1cf
		conn->procedure_expire =
   3b71a:	f8a5 40c8 	strh.w	r4, [r5, #200]	; 0xc8
	conn->llcp_phy.tx &= p->rx_phys;
   3b71e:	f895 31ce 	ldrb.w	r3, [r5, #462]	; 0x1ce
   3b722:	f896 4021 	ldrb.w	r4, [r6, #33]	; 0x21
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b726:	7902      	ldrb	r2, [r0, #4]
	conn->llcp_phy.tx &= p->rx_phys;
   3b728:	f3c3 0c82 	ubfx	ip, r3, #2, #3
   3b72c:	ea04 040c 	and.w	r4, r4, ip
   3b730:	f364 0384 	bfi	r3, r4, #2, #3
   3b734:	f885 31ce 	strb.w	r3, [r5, #462]	; 0x1ce
	conn->llcp_phy.rx &= p->tx_phys;
   3b738:	f896 4020 	ldrb.w	r4, [r6, #32]
   3b73c:	b2db      	uxtb	r3, r3
   3b73e:	ea04 1453 	and.w	r4, r4, r3, lsr #5
   3b742:	f364 1347 	bfi	r3, r4, #5, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   3b746:	2403      	movs	r4, #3
	conn->llcp_phy.rx &= p->tx_phys;
   3b748:	f885 31ce 	strb.w	r3, [r5, #462]	; 0x1ce
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   3b74c:	7144      	strb	r4, [r0, #5]
	    conn->tx_head &&
   3b74e:	f8d5 41d4 	ldr.w	r4, [r5, #468]	; 0x1d4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   3b752:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b754:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   3b758:	2717      	movs	r7, #23
   3b75a:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   3b75e:	7241      	strb	r1, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b760:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   3b762:	71c7      	strb	r7, [r0, #7]
	if (
   3b764:	2c00      	cmp	r4, #0
   3b766:	f000 811d 	beq.w	3b9a4 <ull_conn_rx+0x13ac>
	    !conn->llcp_enc.pause_tx &&
   3b76a:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
	    conn->tx_head &&
   3b76e:	0792      	lsls	r2, r2, #30
   3b770:	f100 8118 	bmi.w	3b9a4 <ull_conn_rx+0x13ac>
	    !conn->llcp_phy.pause_tx &&
   3b774:	f895 21cf 	ldrb.w	r2, [r5, #463]	; 0x1cf
   3b778:	07d7      	lsls	r7, r2, #31
   3b77a:	f100 8113 	bmi.w	3b9a4 <ull_conn_rx+0x13ac>
		if (conn->tx_head == conn->tx_data) {
   3b77e:	f8d5 21e0 	ldr.w	r2, [r5, #480]	; 0x1e0
   3b782:	4294      	cmp	r4, r2
   3b784:	f000 83ba 	beq.w	3befc <ull_conn_rx+0x1904>
		} else if (!conn->tx_ctrl) {
   3b788:	2b00      	cmp	r3, #0
   3b78a:	f47f a9e2 	bne.w	3ab52 <ull_conn_rx+0x55a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3b78e:	7923      	ldrb	r3, [r4, #4]
   3b790:	f003 0303 	and.w	r3, r3, #3
   3b794:	2b03      	cmp	r3, #3
   3b796:	f000 8373 	beq.w	3be80 <ull_conn_rx+0x1888>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3b79a:	e9c5 4476 	strd	r4, r4, [r5, #472]	; 0x1d8
   3b79e:	f7ff b9d8 	b.w	3ab52 <ull_conn_rx+0x55a>
				nack = reject_ext_ind_send(conn, *rx,
   3b7a2:	4631      	mov	r1, r6
   3b7a4:	4628      	mov	r0, r5
   3b7a6:	231e      	movs	r3, #30
   3b7a8:	220f      	movs	r2, #15
   3b7aa:	f7fe f98f 	bl	39acc <reject_ext_ind_send>
				break;
   3b7ae:	f7fe bfdf 	b.w	3a770 <ull_conn_rx+0x178>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3b7b2:	489e      	ldr	r0, [pc, #632]	; (3ba2c <ull_conn_rx+0x1434>)
   3b7b4:	f7f8 fb48 	bl	33e48 <mem_acquire>
		if (!tx) {
   3b7b8:	4601      	mov	r1, r0
   3b7ba:	2800      	cmp	r0, #0
   3b7bc:	f43f ad3f 	beq.w	3b23e <ull_conn_rx+0xc46>
		conn->llcp_version.tx = 1U;
   3b7c0:	f895 214a 	ldrb.w	r2, [r5, #330]	; 0x14a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b7c4:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   3b7c6:	f042 0201 	orr.w	r2, r2, #1
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b7ca:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_version.tx = 1U;
   3b7ce:	f885 214a 	strb.w	r2, [r5, #330]	; 0x14a
		pdu_tx->len =
   3b7d2:	7144      	strb	r4, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3b7d4:	7103      	strb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3b7d6:	220c      	movs	r2, #12
		v->sub_version_number =
   3b7d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3b7dc:	2005      	movs	r0, #5
   3b7de:	f06f 040e 	mvn.w	r4, #14
   3b7e2:	7288      	strb	r0, [r1, #10]
		v->sub_version_number =
   3b7e4:	72cb      	strb	r3, [r1, #11]
   3b7e6:	730b      	strb	r3, [r1, #12]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3b7e8:	71ca      	strb	r2, [r1, #7]
		v->version_number = LL_VERSION_NUMBER;
   3b7ea:	720a      	strb	r2, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   3b7ec:	724c      	strb	r4, [r1, #9]
		ctrl_tx_sec_enqueue(conn, tx);
   3b7ee:	4628      	mov	r0, r5
   3b7f0:	f7fe f9f6 	bl	39be0 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b7f4:	2301      	movs	r3, #1
   3b7f6:	7133      	strb	r3, [r6, #4]
   3b7f8:	f7ff bb96 	b.w	3af28 <ull_conn_rx+0x930>
			conn->llcp_conn_param.disabled = 1U;
   3b7fc:	f895 3196 	ldrb.w	r3, [r5, #406]	; 0x196
			if (!conn->lll.role) {
   3b800:	f995 1039 	ldrsb.w	r1, [r5, #57]	; 0x39
			conn->llcp_conn_param.disabled = 1U;
   3b804:	f043 0320 	orr.w	r3, r3, #32
			if (!conn->lll.role) {
   3b808:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   3b80a:	f885 3196 	strb.w	r3, [r5, #406]	; 0x196
			if (!conn->lll.role) {
   3b80e:	f2c0 81b3 	blt.w	3bb78 <ull_conn_rx+0x1580>
				LL_ASSERT(conn->llcp_cu.req ==
   3b812:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   3b816:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   3b81a:	429a      	cmp	r2, r3
   3b81c:	d00e      	beq.n	3b83c <ull_conn_rx+0x1244>
   3b81e:	f641 33f6 	movw	r3, #7158	; 0x1bf6
   3b822:	4a83      	ldr	r2, [pc, #524]	; (3ba30 <ull_conn_rx+0x1438>)
   3b824:	4983      	ldr	r1, [pc, #524]	; (3ba34 <ull_conn_rx+0x143c>)
   3b826:	4884      	ldr	r0, [pc, #528]	; (3ba38 <ull_conn_rx+0x1440>)
   3b828:	f00e fc58 	bl	4a0dc <printk>
   3b82c:	4040      	eors	r0, r0
   3b82e:	f380 8811 	msr	BASEPRI, r0
   3b832:	f04f 0003 	mov.w	r0, #3
   3b836:	df02      	svc	2
   3b838:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
				conn->llcp_conn_param.state =
   3b83c:	f895 1196 	ldrb.w	r1, [r5, #406]	; 0x196
				conn->llcp_cu.interval =
   3b840:	f8b5 019a 	ldrh.w	r0, [r5, #410]	; 0x19a
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3b844:	f895 211a 	ldrb.w	r2, [r5, #282]	; 0x11a
				conn->llcp_cu.interval =
   3b848:	f8a5 011c 	strh.w	r0, [r5, #284]	; 0x11c
				conn->llcp_cu.win_size = 1U;
   3b84c:	2601      	movs	r6, #1
				conn->llcp_conn_param.state =
   3b84e:	2006      	movs	r0, #6
				conn->llcp_cu.ack--;
   3b850:	3b01      	subs	r3, #1
				conn->llcp_conn_param.state =
   3b852:	f360 0103 	bfi	r1, r0, #0, #4
				conn->llcp_cu.ack--;
   3b856:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
				conn->llcp_cu.win_size = 1U;
   3b85a:	f885 6128 	strb.w	r6, [r5, #296]	; 0x128
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b85e:	6824      	ldr	r4, [r4, #0]
				conn->llcp_conn_param.state =
   3b860:	f885 1196 	strb.w	r1, [r5, #406]	; 0x196
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3b864:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3b868:	f3c1 1100 	ubfx	r1, r1, #4, #1
   3b86c:	f361 02c3 	bfi	r2, r1, #3, #1
				conn->llcp_cu.latency =
   3b870:	f8b5 719c 	ldrh.w	r7, [r5, #412]	; 0x19c
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3b874:	f885 211a 	strb.w	r2, [r5, #282]	; 0x11a
				conn->llcp_cu.win_offset_us = 0U;
   3b878:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   3b87a:	f8b5 219e 	ldrh.w	r2, [r5, #414]	; 0x19e
				conn->llcp_cu.win_offset_us = 0U;
   3b87e:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
				conn->llcp_cu.latency =
   3b882:	f8a5 711e 	strh.w	r7, [r5, #286]	; 0x11e
				conn->llcp_cu.timeout =
   3b886:	f8a5 2120 	strh.w	r2, [r5, #288]	; 0x120
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3b88a:	7126      	strb	r6, [r4, #4]
				break;
   3b88c:	f7fe bf70 	b.w	3a770 <ull_conn_rx+0x178>
			conn->llcp_length.disabled = 1U;
   3b890:	f895 31be 	ldrb.w	r3, [r5, #446]	; 0x1be
			conn->llcp_length.ack = conn->llcp_length.req;
   3b894:	f885 21bd 	strb.w	r2, [r5, #445]	; 0x1bd
			conn->llcp_length.disabled = 1U;
   3b898:	f043 0308 	orr.w	r3, r3, #8
   3b89c:	f885 31be 	strb.w	r3, [r5, #446]	; 0x1be
			conn->llcp_length.ack = conn->llcp_length.req;
   3b8a0:	f7ff bad0 	b.w	3ae44 <ull_conn_rx+0x84c>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   3b8a4:	f895 2194 	ldrb.w	r2, [r5, #404]	; 0x194
   3b8a8:	f895 3195 	ldrb.w	r3, [r5, #405]	; 0x195
   3b8ac:	4293      	cmp	r3, r2
   3b8ae:	f43f abfe 	beq.w	3b0ae <ull_conn_rx+0xab6>
		rej_ext_ind->error_code = rej_ind->error_code;
   3b8b2:	f896 3020 	ldrb.w	r3, [r6, #32]
   3b8b6:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   3b8ba:	f995 1039 	ldrsb.w	r1, [r5, #57]	; 0x39
   3b8be:	2900      	cmp	r1, #0
   3b8c0:	f2c0 8255 	blt.w	3bd6e <ull_conn_rx+0x1776>
   3b8c4:	2b1a      	cmp	r3, #26
   3b8c6:	f000 827d 	beq.w	3bdc4 <ull_conn_rx+0x17cc>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   3b8ca:	f895 3196 	ldrb.w	r3, [r5, #406]	; 0x196
   3b8ce:	f003 010f 	and.w	r1, r3, #15
   3b8d2:	2904      	cmp	r1, #4
   3b8d4:	d106      	bne.n	3b8e4 <ull_conn_rx+0x12ec>
	conn_upd_curr = NULL;
   3b8d6:	4959      	ldr	r1, [pc, #356]	; (3ba3c <ull_conn_rx+0x1444>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3b8d8:	f885 2195 	strb.w	r2, [r5, #405]	; 0x195
	conn_upd_curr = NULL;
   3b8dc:	2200      	movs	r2, #0
   3b8de:	600a      	str	r2, [r1, #0]
		conn->procedure_expire = 0U;
   3b8e0:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   3b8e4:	06d8      	lsls	r0, r3, #27
   3b8e6:	f57e afd9 	bpl.w	3a89c <ull_conn_rx+0x2a4>
   3b8ea:	e453      	b.n	3b194 <ull_conn_rx+0xb9c>
				      0x03) == 0x02) &&
   3b8ec:	f895 20f2 	ldrb.w	r2, [r5, #242]	; 0xf2
   3b8f0:	2a03      	cmp	r2, #3
   3b8f2:	f47f ab99 	bne.w	3b028 <ull_conn_rx+0xa30>
   3b8f6:	f7ff bb90 	b.w	3b01a <ull_conn_rx+0xa22>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b8fa:	7137      	strb	r7, [r6, #4]
		*err = 0U;
   3b8fc:	2000      	movs	r0, #0
   3b8fe:	f7fe bf37 	b.w	3a770 <ull_conn_rx+0x178>
				nack = reject_ext_ind_send(conn, *rx,
   3b902:	4631      	mov	r1, r6
   3b904:	4628      	mov	r0, r5
   3b906:	2323      	movs	r3, #35	; 0x23
   3b908:	220f      	movs	r2, #15
   3b90a:	f7fe f8df 	bl	39acc <reject_ext_ind_send>
   3b90e:	f7fe bf2f 	b.w	3a770 <ull_conn_rx+0x178>
				nack = reject_ext_ind_send(conn, *rx,
   3b912:	4631      	mov	r1, r6
   3b914:	4628      	mov	r0, r5
   3b916:	231e      	movs	r3, #30
   3b918:	2210      	movs	r2, #16
   3b91a:	f7fe f8d7 	bl	39acc <reject_ext_ind_send>
				break;
   3b91e:	f7fe bf27 	b.w	3a770 <ull_conn_rx+0x178>
	conn->llcp_enc.pause_rx = 0U;
   3b922:	f895 2176 	ldrb.w	r2, [r5, #374]	; 0x176
	conn->llcp_ack = conn->llcp_req;
   3b926:	f885 30f1 	strb.w	r3, [r5, #241]	; 0xf1
	conn->llcp_enc.pause_rx = 0U;
   3b92a:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   3b92e:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   3b930:	f885 2176 	strb.w	r2, [r5, #374]	; 0x176
	conn->procedure_expire = 0U;
   3b934:	f8a5 30c8 	strh.w	r3, [r5, #200]	; 0xc8
	int nack = 0;
   3b938:	4618      	mov	r0, r3
   3b93a:	f7fe bf19 	b.w	3a770 <ull_conn_rx+0x178>
			conn->llcp_phy.pause_tx = 0U;
   3b93e:	f895 31cf 	ldrb.w	r3, [r5, #463]	; 0x1cf
			lll->phy_tx_time = lll->phy_tx;
   3b942:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
			conn->llcp_phy.ack = conn->llcp_phy.req;
   3b946:	f885 11cd 	strb.w	r1, [r5, #461]	; 0x1cd
			conn->llcp_phy.pause_tx = 0U;
   3b94a:	f023 0309 	bic.w	r3, r3, #9
   3b94e:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   3b952:	f3c2 0102 	ubfx	r1, r2, #0, #3
   3b956:	f361 1206 	bfi	r2, r1, #4, #3
			if (conn->llcp_phy.cmd) {
   3b95a:	0758      	lsls	r0, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   3b95c:	f885 31cf 	strb.w	r3, [r5, #463]	; 0x1cf
			lll->phy_tx_time = lll->phy_tx;
   3b960:	f885 2060 	strb.w	r2, [r5, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   3b964:	f140 8103 	bpl.w	3bb6e <ull_conn_rx+0x1576>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b968:	6822      	ldr	r2, [r4, #0]
				p->status = 0U;
   3b96a:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3b96c:	201c      	movs	r0, #28
   3b96e:	7110      	strb	r0, [r2, #4]
				p->tx = lll->phy_tx;
   3b970:	7771      	strb	r1, [r6, #29]
				p->status = 0U;
   3b972:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
   3b974:	f895 3061 	ldrb.w	r3, [r5, #97]	; 0x61
   3b978:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3b97c:	77b3      	strb	r3, [r6, #30]
   3b97e:	f7ff ba61 	b.w	3ae44 <ull_conn_rx+0x84c>
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   3b982:	464a      	mov	r2, r9
   3b984:	e5a1      	b.n	3b4ca <ull_conn_rx+0xed2>
				nack = reject_ext_ind_send(conn, *rx,
   3b986:	4631      	mov	r1, r6
   3b988:	4628      	mov	r0, r5
   3b98a:	2323      	movs	r3, #35	; 0x23
   3b98c:	2216      	movs	r2, #22
   3b98e:	f7fe f89d 	bl	39acc <reject_ext_ind_send>
   3b992:	f7fe beed 	b.w	3a770 <ull_conn_rx+0x178>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3b996:	f895 3100 	ldrb.w	r3, [r5, #256]	; 0x100
   3b99a:	f36f 0301 	bfc	r3, #0, #2
   3b99e:	f885 3100 	strb.w	r3, [r5, #256]	; 0x100
   3b9a2:	e470      	b.n	3b286 <ull_conn_rx+0xc8e>
		if (!conn->tx_ctrl) {
   3b9a4:	2b00      	cmp	r3, #0
   3b9a6:	f47f a8d4 	bne.w	3ab52 <ull_conn_rx+0x55a>
			tx->next = conn->tx_head;
   3b9aa:	6004      	str	r4, [r0, #0]
				conn->tx_ctrl = tx;
   3b9ac:	e9c5 0075 	strd	r0, r0, [r5, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3b9b0:	f8c5 01dc 	str.w	r0, [r5, #476]	; 0x1dc
   3b9b4:	f7ff b8d4 	b.w	3ab60 <ull_conn_rx+0x568>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b9b8:	2301      	movs	r3, #1
   3b9ba:	7133      	strb	r3, [r6, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   3b9bc:	232a      	movs	r3, #42	; 0x2a
			conn->llcp_terminate.reason_final = err;
   3b9be:	f885 3153 	strb.w	r3, [r5, #339]	; 0x153
   3b9c2:	f7fe bf27 	b.w	3a814 <ull_conn_rx+0x21c>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3b9c6:	2301      	movs	r3, #1
   3b9c8:	7133      	strb	r3, [r6, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   3b9ca:	2328      	movs	r3, #40	; 0x28
   3b9cc:	e7f7      	b.n	3b9be <ull_conn_rx+0x13c6>
			conn->procedure_expire = 0U;
   3b9ce:	2700      	movs	r7, #0
			conn->llcp_length.ack = conn->llcp_length.req;
   3b9d0:	9b00      	ldr	r3, [sp, #0]
   3b9d2:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3b9d6:	454a      	cmp	r2, r9
			conn->procedure_expire = 0U;
   3b9d8:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3b9dc:	f000 81bc 	beq.w	3bd58 <ull_conn_rx+0x1760>
			conn->lll.max_rx_time = eff_rx_time;
   3b9e0:	f8a5 c05e 	strh.w	ip, [r5, #94]	; 0x5e
			if (tx) {
   3b9e4:	2900      	cmp	r1, #0
   3b9e6:	f000 81a3 	beq.w	3bd30 <ull_conn_rx+0x1738>
				conn->llcp_length.state =
   3b9ea:	f895 41be 	ldrb.w	r4, [r5, #446]	; 0x1be
					(conn->llcp_length.req - 1);
   3b9ee:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   3b9f0:	f8a5 e1c0 	strh.w	lr, [r5, #448]	; 0x1c0
				conn->llcp_length.state =
   3b9f4:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   3b9f6:	3b01      	subs	r3, #1
				conn->llcp_length.state =
   3b9f8:	f367 0402 	bfi	r4, r7, #0, #3
				conn->llcp_length.ack =
   3b9fc:	f885 31bd 	strb.w	r3, [r5, #445]	; 0x1bd
				conn->llcp_length.tx_octets = eff_tx_octets;
   3ba00:	f8a5 21c2 	strh.w	r2, [r5, #450]	; 0x1c2
				conn->llcp_length.rx_time = eff_rx_time;
   3ba04:	f8a5 c1c4 	strh.w	ip, [r5, #452]	; 0x1c4
				conn->llcp_length.tx_time = eff_tx_time;
   3ba08:	f8a5 01c6 	strh.w	r0, [r5, #454]	; 0x1c6
				conn->llcp_length.state =
   3ba0c:	f885 41be 	strb.w	r4, [r5, #446]	; 0x1be
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   3ba10:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   3ba14:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   3ba16:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   3ba1a:	84f0      	strh	r0, [r6, #38]	; 0x26
   3ba1c:	e592      	b.n	3b544 <ull_conn_rx+0xf4c>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ba1e:	6822      	ldr	r2, [r4, #0]
   3ba20:	2101      	movs	r1, #1
	int nack = 0;
   3ba22:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3ba24:	7111      	strb	r1, [r2, #4]
		if (err) {
   3ba26:	f7fe bea3 	b.w	3a770 <ull_conn_rx+0x178>
   3ba2a:	bf00      	nop
   3ba2c:	20005348 	.word	0x20005348
   3ba30:	00053248 	.word	0x00053248
   3ba34:	000533d8 	.word	0x000533d8
   3ba38:	00052d50 	.word	0x00052d50
   3ba3c:	200052b4 	.word	0x200052b4
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3ba40:	f10d 000f 	add.w	r0, sp, #15
   3ba44:	2101      	movs	r1, #1
	phy = ind->c_to_p_phy;
   3ba46:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3ba4a:	f7f8 fbc5 	bl	341d8 <util_ones_count_get>
   3ba4e:	2801      	cmp	r0, #1
   3ba50:	d86e      	bhi.n	3bb30 <ull_conn_rx+0x1538>
	phy = ind->p_to_c_phy;
   3ba52:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   3ba56:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   3ba5a:	f10d 000f 	add.w	r0, sp, #15
   3ba5e:	2101      	movs	r1, #1
   3ba60:	f7f8 fbba 	bl	341d8 <util_ones_count_get>
   3ba64:	2801      	cmp	r0, #1
   3ba66:	d863      	bhi.n	3bb30 <ull_conn_rx+0x1538>
	instant = sys_le16_to_cpu(ind->instant);
   3ba68:	8c71      	ldrh	r1, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   3ba6a:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
   3ba6c:	1acb      	subs	r3, r1, r3
   3ba6e:	0418      	lsls	r0, r3, #16
   3ba70:	f100 8198 	bmi.w	3bda4 <ull_conn_rx+0x17ac>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3ba74:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
   3ba78:	f895 20f1 	ldrb.w	r2, [r5, #241]	; 0xf1
   3ba7c:	1a9b      	subs	r3, r3, r2
   3ba7e:	f003 0303 	and.w	r3, r3, #3
   3ba82:	2b02      	cmp	r3, #2
   3ba84:	f000 8189 	beq.w	3bd9a <ull_conn_rx+0x17a2>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3ba88:	f895 01cc 	ldrb.w	r0, [r5, #460]	; 0x1cc
   3ba8c:	f895 31cd 	ldrb.w	r3, [r5, #461]	; 0x1cd
   3ba90:	4283      	cmp	r3, r0
   3ba92:	d018      	beq.n	3bac6 <ull_conn_rx+0x14ce>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   3ba94:	f895 31ce 	ldrb.w	r3, [r5, #462]	; 0x1ce
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   3ba98:	f003 0303 	and.w	r3, r3, #3
   3ba9c:	2b02      	cmp	r3, #2
   3ba9e:	d112      	bne.n	3bac6 <ull_conn_rx+0x14ce>
		conn->llcp_phy.pause_tx = 0U;
   3baa0:	f895 31cf 	ldrb.w	r3, [r5, #463]	; 0x1cf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3baa4:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3baa8:	f885 01cd 	strb.w	r0, [r5, #461]	; 0x1cd
		conn->llcp_phy.pause_tx = 0U;
   3baac:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3bab0:	f3c3 0080 	ubfx	r0, r3, #2, #1
   3bab4:	f360 0241 	bfi	r2, r0, #1, #1
		conn->procedure_expire = 0U;
   3bab8:	2000      	movs	r0, #0
		conn->llcp_phy.pause_tx = 0U;
   3baba:	f885 31cf 	strb.w	r3, [r5, #463]	; 0x1cf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3babe:	f885 20f4 	strb.w	r2, [r5, #244]	; 0xf4
		conn->procedure_expire = 0U;
   3bac2:	f8a5 00c8 	strh.w	r0, [r5, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   3bac6:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
   3baca:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
	link->mem = conn->llcp_rx;
   3bace:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   3bad2:	f360 0384 	bfi	r3, r0, #2, #3
   3bad6:	f885 30f4 	strb.w	r3, [r5, #244]	; 0xf4
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   3bada:	f896 0020 	ldrb.w	r0, [r6, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   3bade:	f8a5 10f6 	strh.w	r1, [r5, #246]	; 0xf6
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   3bae2:	f360 1347 	bfi	r3, r0, #5, #3
	conn->llcp.phy_upd_ind.initiate = 0U;
   3bae6:	f36f 0300 	bfc	r3, #0, #1
   3baea:	f885 30f4 	strb.w	r3, [r5, #244]	; 0xf4
	link->mem = conn->llcp_rx;
   3baee:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   3baf0:	6823      	ldr	r3, [r4, #0]
   3baf2:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   3baf4:	6823      	ldr	r3, [r4, #0]
   3baf6:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
	*rx = NULL;
   3bafa:	2100      	movs	r1, #0
   3bafc:	6021      	str	r1, [r4, #0]
	conn->llcp_ack -= 2U;
   3bafe:	f895 30f1 	ldrb.w	r3, [r5, #241]	; 0xf1
	if (conn->llcp.phy_upd_ind.tx) {
   3bb02:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
	conn->llcp_ack -= 2U;
   3bb06:	3b02      	subs	r3, #2
	conn->llcp_type = LLCP_PHY_UPD;
   3bb08:	2006      	movs	r0, #6
	conn->llcp_ack -= 2U;
   3bb0a:	f885 30f1 	strb.w	r3, [r5, #241]	; 0xf1
	if (conn->llcp.phy_upd_ind.tx) {
   3bb0e:	f012 031c 	ands.w	r3, r2, #28
	conn->llcp_type = LLCP_PHY_UPD;
   3bb12:	f885 00f2 	strb.w	r0, [r5, #242]	; 0xf2
	if (conn->llcp.phy_upd_ind.tx) {
   3bb16:	f43e ae7d 	beq.w	3a814 <ull_conn_rx+0x21c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3bb1a:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   3bb1e:	f3c2 0282 	ubfx	r2, r2, #2, #3
   3bb22:	f362 1306 	bfi	r3, r2, #4, #3
	int nack = 0;
   3bb26:	4608      	mov	r0, r1
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3bb28:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
		if (err) {
   3bb2c:	f7fe be20 	b.w	3a770 <ull_conn_rx+0x178>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bb30:	6823      	ldr	r3, [r4, #0]
   3bb32:	2201      	movs	r2, #1
   3bb34:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   3bb36:	231e      	movs	r3, #30
			conn->llcp_terminate.reason_final = err;
   3bb38:	f885 3153 	strb.w	r3, [r5, #339]	; 0x153
	int nack = 0;
   3bb3c:	2000      	movs	r0, #0
   3bb3e:	f7fe be17 	b.w	3a770 <ull_conn_rx+0x178>
	struct node_tx *tx = NULL;
   3bb42:	2100      	movs	r1, #0
   3bb44:	f7ff ba2f 	b.w	3afa6 <ull_conn_rx+0x9ae>
		conn_upd_curr = conn;
   3bb48:	601d      	str	r5, [r3, #0]
   3bb4a:	f7ff b930 	b.w	3adae <ull_conn_rx+0x7b6>
				      0x03) == 0x02) &&
   3bb4e:	f895 20f2 	ldrb.w	r2, [r5, #242]	; 0xf2
   3bb52:	2a03      	cmp	r2, #3
   3bb54:	f47f ac6d 	bne.w	3b432 <ull_conn_rx+0xe3a>
   3bb58:	e464      	b.n	3b424 <ull_conn_rx+0xe2c>
				conn->llcp_length.state =
   3bb5a:	2604      	movs	r6, #4
   3bb5c:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   3bb60:	f8a5 2058 	strh.w	r2, [r5, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   3bb64:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
				conn->llcp_length.state =
   3bb68:	f885 31be 	strb.w	r3, [r5, #446]	; 0x1be
   3bb6c:	e4e0      	b.n	3b530 <ull_conn_rx+0xf38>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bb6e:	6823      	ldr	r3, [r4, #0]
   3bb70:	2201      	movs	r2, #1
   3bb72:	711a      	strb	r2, [r3, #4]
   3bb74:	f7ff b966 	b.w	3ae44 <ull_conn_rx+0x84c>
			if (!conn->llcp_conn_param.cmd) {
   3bb78:	f895 3196 	ldrb.w	r3, [r5, #406]	; 0x196
	conn_upd_curr = NULL;
   3bb7c:	49d9      	ldr	r1, [pc, #868]	; (3bee4 <ull_conn_rx+0x18ec>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3bb7e:	f885 2195 	strb.w	r2, [r5, #405]	; 0x195
			if (!conn->llcp_conn_param.cmd) {
   3bb82:	f013 0310 	ands.w	r3, r3, #16
	conn_upd_curr = NULL;
   3bb86:	f04f 0200 	mov.w	r2, #0
   3bb8a:	600a      	str	r2, [r1, #0]
			if (!conn->llcp_conn_param.cmd) {
   3bb8c:	f43f af47 	beq.w	3ba1e <ull_conn_rx+0x1426>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3bb90:	6823      	ldr	r3, [r4, #0]
   3bb92:	2218      	movs	r2, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3bb94:	f01c 0f01 	tst.w	ip, #1
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   3bb98:	711a      	strb	r2, [r3, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3bb9a:	f040 817e 	bne.w	3be9a <ull_conn_rx+0x18a2>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   3bb9e:	231a      	movs	r3, #26
   3bba0:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   3bba2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   3bba4:	f8b5 20c2 	ldrh.w	r2, [r5, #194]	; 0xc2
			cu->latency = lll->latency;
   3bba8:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
			cu->interval = lll->interval;
   3bbaa:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
   3bbac:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   3bbb0:	237d      	movs	r3, #125	; 0x7d
   3bbb2:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   3bbb6:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
   3bbb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3bbbc:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   3bbc0:	8473      	strh	r3, [r6, #34]	; 0x22
   3bbc2:	f7ff b93f 	b.w	3ae44 <ull_conn_rx+0x84c>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3bbc6:	f895 30e5 	ldrb.w	r3, [r5, #229]	; 0xe5
			conn->llcp_ack += 2U;
   3bbca:	3202      	adds	r2, #2
   3bbcc:	f885 20f1 	strb.w	r2, [r5, #241]	; 0xf1
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3bbd0:	2b00      	cmp	r3, #0
   3bbd2:	f040 80d4 	bne.w	3bd7e <ull_conn_rx+0x1786>
			conn->periph.llcp_type = conn->llcp_type;
   3bbd6:	f895 30f2 	ldrb.w	r3, [r5, #242]	; 0xf2
   3bbda:	f885 30e5 	strb.w	r3, [r5, #229]	; 0xe5
   3bbde:	f7fe be8f 	b.w	3a900 <ull_conn_rx+0x308>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3bbe2:	2a23      	cmp	r2, #35	; 0x23
   3bbe4:	f43f aac6 	beq.w	3b174 <ull_conn_rx+0xb7c>
			conn->periph.ticks_to_offset =
   3bbe8:	f8d5 21b8 	ldr.w	r2, [r5, #440]	; 0x1b8
   3bbec:	f8c5 20ec 	str.w	r2, [r5, #236]	; 0xec
   3bbf0:	f7ff bac0 	b.w	3b174 <ull_conn_rx+0xb7c>
			conn->tx_data = conn->tx_data->next;
   3bbf4:	6819      	ldr	r1, [r3, #0]
   3bbf6:	f8c5 11e0 	str.w	r1, [r5, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3bbfa:	2a00      	cmp	r2, #0
   3bbfc:	f47e afa9 	bne.w	3ab52 <ull_conn_rx+0x55a>
			tx->next = conn->tx_head->next;
   3bc00:	681a      	ldr	r2, [r3, #0]
   3bc02:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3bc04:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   3bc06:	e9c5 0076 	strd	r0, r0, [r5, #472]	; 0x1d8
   3bc0a:	f7fe bfa9 	b.w	3ab60 <ull_conn_rx+0x568>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3bc0e:	791a      	ldrb	r2, [r3, #4]
   3bc10:	f002 0203 	and.w	r2, r2, #3
   3bc14:	2a03      	cmp	r2, #3
   3bc16:	f000 8178 	beq.w	3bf0a <ull_conn_rx+0x1912>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3bc1a:	e9c5 3376 	strd	r3, r3, [r5, #472]	; 0x1d8
   3bc1e:	f7fe bf98 	b.w	3ab52 <ull_conn_rx+0x55a>
				uint16_t interval_min =
   3bc22:	f8b6 9020 	ldrh.w	r9, [r6, #32]
   3bc26:	fa1f f289 	uxth.w	r2, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3bc2a:	2a05      	cmp	r2, #5
   3bc2c:	f67f adb9 	bls.w	3b7a2 <ull_conn_rx+0x11aa>
				uint16_t interval_max =
   3bc30:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
   3bc34:	fa1f f788 	uxth.w	r7, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   3bc38:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
   3bc3c:	f63f adb1 	bhi.w	3b7a2 <ull_conn_rx+0x11aa>
				    (interval_max > 3200) ||
   3bc40:	42ba      	cmp	r2, r7
   3bc42:	f63f adae 	bhi.w	3b7a2 <ull_conn_rx+0x11aa>
				uint16_t latency =
   3bc46:	f8b6 b024 	ldrh.w	fp, [r6, #36]	; 0x24
   3bc4a:	fa1f fc8b 	uxth.w	ip, fp
				    (interval_min > interval_max) ||
   3bc4e:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   3bc52:	f4bf ada6 	bcs.w	3b7a2 <ull_conn_rx+0x11aa>
				uint16_t timeout =
   3bc56:	f8b6 a026 	ldrh.w	sl, [r6, #38]	; 0x26
   3bc5a:	fa1f f28a 	uxth.w	r2, sl
				    (latency > 499) ||
   3bc5e:	f1a2 0e0a 	sub.w	lr, r2, #10
   3bc62:	fa1f fe8e 	uxth.w	lr, lr
   3bc66:	f640 4076 	movw	r0, #3190	; 0xc76
   3bc6a:	4586      	cmp	lr, r0
   3bc6c:	f63f ad99 	bhi.w	3b7a2 <ull_conn_rx+0x11aa>
				     ((latency + 1) * interval_max)) ||
   3bc70:	fb0c 7e07 	mla	lr, ip, r7, r7
				    (timeout > 3200) ||
   3bc74:	ebbe 0f82 	cmp.w	lr, r2, lsl #2
   3bc78:	f4bf ad93 	bcs.w	3b7a2 <ull_conn_rx+0x11aa>
					cpr->preferred_periodicity;
   3bc7c:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
				     ((latency + 1) * interval_max)) ||
   3bc80:	4577      	cmp	r7, lr
   3bc82:	f4ff ad8e 	bcc.w	3b7a2 <ull_conn_rx+0x11aa>
				conn->llcp_conn_param.interval_max =
   3bc86:	f8a5 819a 	strh.w	r8, [r5, #410]	; 0x19a
				conn->llcp_conn_param.interval_min =
   3bc8a:	f8a5 9198 	strh.w	r9, [r5, #408]	; 0x198
				conn->llcp_conn_param.latency =	latency;
   3bc8e:	f8a5 b19c 	strh.w	fp, [r5, #412]	; 0x19c
				conn->llcp_conn_param.timeout =	timeout;
   3bc92:	f8a5 a19e 	strh.w	sl, [r5, #414]	; 0x19e
				conn->llcp_conn_param.preferred_periodicity =
   3bc96:	f885 e1a0 	strb.w	lr, [r5, #416]	; 0x1a0
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   3bc9a:	f896 902a 	ldrb.w	r9, [r6, #42]	; 0x2a
   3bc9e:	f896 e029 	ldrb.w	lr, [r6, #41]	; 0x29
				     lll->interval) ||
   3bca2:	f8b5 802a 	ldrh.w	r8, [r5, #42]	; 0x2a
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   3bca6:	ea4e 2e09 	orr.w	lr, lr, r9, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   3bcaa:	f8a5 e1a2 	strh.w	lr, [r5, #418]	; 0x1a2
					sys_le16_to_cpu(cpr->offset0);
   3bcae:	f896 902c 	ldrb.w	r9, [r6, #44]	; 0x2c
   3bcb2:	f896 e02b 	ldrb.w	lr, [r6, #43]	; 0x2b
   3bcb6:	ea4e 2e09 	orr.w	lr, lr, r9, lsl #8
				conn->llcp_conn_param.offset0 =
   3bcba:	f8a5 e1a4 	strh.w	lr, [r5, #420]	; 0x1a4
					sys_le16_to_cpu(cpr->offset1);
   3bcbe:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
   3bcc2:	f896 e02d 	ldrb.w	lr, [r6, #45]	; 0x2d
   3bcc6:	ea4e 2e09 	orr.w	lr, lr, r9, lsl #8
				conn->llcp_conn_param.offset1 =
   3bcca:	f8a5 e1a6 	strh.w	lr, [r5, #422]	; 0x1a6
					sys_le16_to_cpu(cpr->offset2);
   3bcce:	f896 9030 	ldrb.w	r9, [r6, #48]	; 0x30
   3bcd2:	f896 e02f 	ldrb.w	lr, [r6, #47]	; 0x2f
   3bcd6:	ea4e 2e09 	orr.w	lr, lr, r9, lsl #8
				conn->llcp_conn_param.offset2 =
   3bcda:	f8a5 e1a8 	strh.w	lr, [r5, #424]	; 0x1a8
					sys_le16_to_cpu(cpr->offset3);
   3bcde:	f896 9032 	ldrb.w	r9, [r6, #50]	; 0x32
   3bce2:	f896 e031 	ldrb.w	lr, [r6, #49]	; 0x31
   3bce6:	ea4e 2e09 	orr.w	lr, lr, r9, lsl #8
				conn->llcp_conn_param.offset3 =
   3bcea:	f8a5 e1aa 	strh.w	lr, [r5, #426]	; 0x1aa
					sys_le16_to_cpu(cpr->offset4);
   3bcee:	f896 e033 	ldrb.w	lr, [r6, #51]	; 0x33
   3bcf2:	f896 9034 	ldrb.w	r9, [r6, #52]	; 0x34
   3bcf6:	ea4e 2e09 	orr.w	lr, lr, r9, lsl #8
				conn->llcp_conn_param.offset4 =
   3bcfa:	f8a5 e1ac 	strh.w	lr, [r5, #428]	; 0x1ac
					sys_le16_to_cpu(cpr->offset5);
   3bcfe:	f896 e035 	ldrb.w	lr, [r6, #53]	; 0x35
   3bd02:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
   3bd06:	4547      	cmp	r7, r8
					sys_le16_to_cpu(cpr->offset5);
   3bd08:	ea4e 2606 	orr.w	r6, lr, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   3bd0c:	f8a5 61ae 	strh.w	r6, [r5, #430]	; 0x1ae
				if ((conn->llcp_conn_param.interval_max !=
   3bd10:	f000 80d1 	beq.w	3beb6 <ull_conn_rx+0x18be>
					if (conn->llcp_enc.pause_tx) {
   3bd14:	0789      	lsls	r1, r1, #30
						conn->llcp_conn_param.state =
   3bd16:	f895 2196 	ldrb.w	r2, [r5, #406]	; 0x196
					if (conn->llcp_enc.pause_tx) {
   3bd1a:	f57f acae 	bpl.w	3b67a <ull_conn_rx+0x1082>
						(*rx)->hdr.type =
   3bd1e:	6821      	ldr	r1, [r4, #0]
						conn->llcp_conn_param.state =
   3bd20:	2402      	movs	r4, #2
   3bd22:	f364 0203 	bfi	r2, r4, #0, #4
						(*rx)->hdr.type =
   3bd26:	2401      	movs	r4, #1
						conn->llcp_conn_param.state =
   3bd28:	f885 2196 	strb.w	r2, [r5, #406]	; 0x196
						(*rx)->hdr.type =
   3bd2c:	710c      	strb	r4, [r1, #4]
   3bd2e:	e4a9      	b.n	3b684 <ull_conn_rx+0x108c>
				conn->lll.max_tx_octets = eff_tx_octets;
   3bd30:	f8a5 2058 	strh.w	r2, [r5, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   3bd34:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
   3bd38:	e66a      	b.n	3ba10 <ull_conn_rx+0x1418>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3bd3a:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   3bd3e:	4a6a      	ldr	r2, [pc, #424]	; (3bee8 <ull_conn_rx+0x18f0>)
   3bd40:	496a      	ldr	r1, [pc, #424]	; (3beec <ull_conn_rx+0x18f4>)
   3bd42:	486b      	ldr	r0, [pc, #428]	; (3bef0 <ull_conn_rx+0x18f8>)
   3bd44:	f00e f9ca 	bl	4a0dc <printk>
   3bd48:	4040      	eors	r0, r0
   3bd4a:	f380 8811 	msr	BASEPRI, r0
   3bd4e:	f04f 0003 	mov.w	r0, #3
   3bd52:	df02      	svc	2
   3bd54:	f7ff ba24 	b.w	3b1a0 <ull_conn_rx+0xba8>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   3bd58:	4558      	cmp	r0, fp
   3bd5a:	f47f ae41 	bne.w	3b9e0 <ull_conn_rx+0x13e8>
			    eff_rx_time == conn->lll.max_rx_time &&
   3bd5e:	45d4      	cmp	ip, sl
   3bd60:	f47f ae3e 	bne.w	3b9e0 <ull_conn_rx+0x13e8>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bd64:	6823      	ldr	r3, [r4, #0]
   3bd66:	2401      	movs	r4, #1
   3bd68:	711c      	strb	r4, [r3, #4]
				goto send_length_resp;
   3bd6a:	f7ff bbeb 	b.w	3b544 <ull_conn_rx+0xf4c>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   3bd6e:	2b23      	cmp	r3, #35	; 0x23
   3bd70:	f43f adab 	beq.w	3b8ca <ull_conn_rx+0x12d2>
			conn->periph.ticks_to_offset =
   3bd74:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   3bd78:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
   3bd7c:	e5a5      	b.n	3b8ca <ull_conn_rx+0x12d2>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   3bd7e:	f641 13ad 	movw	r3, #6573	; 0x19ad
   3bd82:	4a59      	ldr	r2, [pc, #356]	; (3bee8 <ull_conn_rx+0x18f0>)
   3bd84:	495b      	ldr	r1, [pc, #364]	; (3bef4 <ull_conn_rx+0x18fc>)
   3bd86:	485a      	ldr	r0, [pc, #360]	; (3bef0 <ull_conn_rx+0x18f8>)
   3bd88:	f00e f9a8 	bl	4a0dc <printk>
   3bd8c:	4040      	eors	r0, r0
   3bd8e:	f380 8811 	msr	BASEPRI, r0
   3bd92:	f04f 0003 	mov.w	r0, #3
   3bd96:	df02      	svc	2
   3bd98:	e71d      	b.n	3bbd6 <ull_conn_rx+0x15de>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bd9a:	6823      	ldr	r3, [r4, #0]
   3bd9c:	2201      	movs	r2, #1
   3bd9e:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   3bda0:	232a      	movs	r3, #42	; 0x2a
   3bda2:	e6c9      	b.n	3bb38 <ull_conn_rx+0x1540>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3bda4:	6823      	ldr	r3, [r4, #0]
   3bda6:	2201      	movs	r2, #1
   3bda8:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   3bdaa:	2328      	movs	r3, #40	; 0x28
   3bdac:	e6c4      	b.n	3bb38 <ull_conn_rx+0x1540>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   3bdae:	7f73      	ldrb	r3, [r6, #29]
   3bdb0:	2b01      	cmp	r3, #1
   3bdb2:	f47e ad38 	bne.w	3a826 <ull_conn_rx+0x22e>
	} else if (!conn->lll.role) {
   3bdb6:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   3bdba:	2b00      	cmp	r3, #0
   3bdbc:	f6bf aaf0 	bge.w	3b3a0 <ull_conn_rx+0xda8>
   3bdc0:	f7ff bae2 	b.w	3b388 <ull_conn_rx+0xd90>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   3bdc4:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   3bdc8:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   3bdcc:	429a      	cmp	r2, r3
   3bdce:	d00e      	beq.n	3bdee <ull_conn_rx+0x17f6>
   3bdd0:	f241 43af 	movw	r3, #5295	; 0x14af
   3bdd4:	4a44      	ldr	r2, [pc, #272]	; (3bee8 <ull_conn_rx+0x18f0>)
   3bdd6:	4948      	ldr	r1, [pc, #288]	; (3bef8 <ull_conn_rx+0x1900>)
   3bdd8:	4845      	ldr	r0, [pc, #276]	; (3bef0 <ull_conn_rx+0x18f8>)
   3bdda:	f00e f97f 	bl	4a0dc <printk>
   3bdde:	4040      	eors	r0, r0
   3bde0:	f380 8811 	msr	BASEPRI, r0
   3bde4:	f04f 0003 	mov.w	r0, #3
   3bde8:	df02      	svc	2
   3bdea:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3bdee:	f895 1196 	ldrb.w	r1, [r5, #406]	; 0x196
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   3bdf2:	f8b5 019a 	ldrh.w	r0, [r5, #410]	; 0x19a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3bdf6:	f895 211a 	ldrb.w	r2, [r5, #282]	; 0x11a
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   3bdfa:	f8a5 011c 	strh.w	r0, [r5, #284]	; 0x11c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3bdfe:	2006      	movs	r0, #6
   3be00:	f360 0103 	bfi	r1, r0, #0, #4
		conn->llcp_cu.ack--;
   3be04:	3b01      	subs	r3, #1
		conn->llcp_cu.win_size = 1U;
   3be06:	2001      	movs	r0, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   3be08:	f360 0202 	bfi	r2, r0, #0, #3
		conn->llcp_cu.ack--;
   3be0c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3be10:	f3c1 1300 	ubfx	r3, r1, #4, #1
   3be14:	f363 02c3 	bfi	r2, r3, #3, #1
		conn->llcp_cu.win_offset_us = 0U;
   3be18:	2400      	movs	r4, #0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3be1a:	f885 1196 	strb.w	r1, [r5, #406]	; 0x196
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3be1e:	f8b5 319e 	ldrh.w	r3, [r5, #414]	; 0x19e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3be22:	f8b5 119c 	ldrh.w	r1, [r5, #412]	; 0x19c
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3be26:	f885 211a 	strb.w	r2, [r5, #282]	; 0x11a
		conn->llcp_cu.win_size = 1U;
   3be2a:	f885 0128 	strb.w	r0, [r5, #296]	; 0x128
		conn->llcp_cu.win_offset_us = 0U;
   3be2e:	f8c5 4124 	str.w	r4, [r5, #292]	; 0x124
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3be32:	f8a5 111e 	strh.w	r1, [r5, #286]	; 0x11e
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3be36:	f8a5 3120 	strh.w	r3, [r5, #288]	; 0x120
	if (err) {
   3be3a:	f7fe bd2f 	b.w	3a89c <ull_conn_rx+0x2a4>
			     lll->interval) ||
   3be3e:	8dae      	ldrh	r6, [r5, #44]	; 0x2c
   3be40:	42be      	cmp	r6, r7
   3be42:	f47f ac18 	bne.w	3b676 <ull_conn_rx+0x107e>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   3be46:	f240 46e2 	movw	r6, #1250	; 0x4e2
   3be4a:	fb06 f101 	mul.w	r1, r6, r1
   3be4e:	f242 7610 	movw	r6, #10000	; 0x2710
   3be52:	fb06 1202 	mla	r2, r6, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   3be56:	f8b5 60c2 	ldrh.w	r6, [r5, #194]	; 0xc2
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   3be5a:	3a01      	subs	r2, #1
   3be5c:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   3be60:	b292      	uxth	r2, r2
   3be62:	4296      	cmp	r6, r2
   3be64:	f47f ac07 	bne.w	3b676 <ull_conn_rx+0x107e>
				conn->llcp_conn_param.state =
   3be68:	f8b5 2196 	ldrh.w	r2, [r5, #406]	; 0x196
   3be6c:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   3be70:	f042 0201 	orr.w	r2, r2, #1
   3be74:	f8a5 2196 	strh.w	r2, [r5, #406]	; 0x196
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   3be78:	6822      	ldr	r2, [r4, #0]
   3be7a:	2101      	movs	r1, #1
   3be7c:	7111      	strb	r1, [r2, #4]
   3be7e:	e401      	b.n	3b684 <ull_conn_rx+0x108c>
	    ((pdu_data_tx->llctrl.opcode !=
   3be80:	79e3      	ldrb	r3, [r4, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3be82:	2b03      	cmp	r3, #3
   3be84:	d002      	beq.n	3be8c <ull_conn_rx+0x1894>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3be86:	2b0a      	cmp	r3, #10
   3be88:	f47f ac87 	bne.w	3b79a <ull_conn_rx+0x11a2>
			tx->next = conn->tx_head->next;
   3be8c:	6823      	ldr	r3, [r4, #0]
   3be8e:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   3be90:	6020      	str	r0, [r4, #0]
				conn->tx_ctrl_last = tx;
   3be92:	e9c5 0076 	strd	r0, r0, [r5, #472]	; 0x1d8
   3be96:	f7fe be63 	b.w	3ab60 <ull_conn_rx+0x568>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   3be9a:	f641 4322 	movw	r3, #7202	; 0x1c22
   3be9e:	4a12      	ldr	r2, [pc, #72]	; (3bee8 <ull_conn_rx+0x18f0>)
   3bea0:	4912      	ldr	r1, [pc, #72]	; (3beec <ull_conn_rx+0x18f4>)
   3bea2:	4813      	ldr	r0, [pc, #76]	; (3bef0 <ull_conn_rx+0x18f8>)
   3bea4:	f00e f91a 	bl	4a0dc <printk>
   3bea8:	4040      	eors	r0, r0
   3beaa:	f380 8811 	msr	BASEPRI, r0
   3beae:	f04f 0003 	mov.w	r0, #3
   3beb2:	df02      	svc	2
   3beb4:	e673      	b.n	3bb9e <ull_conn_rx+0x15a6>
				     lll->interval) ||
   3beb6:	8dae      	ldrh	r6, [r5, #44]	; 0x2c
   3beb8:	4566      	cmp	r6, ip
   3beba:	f47f af2b 	bne.w	3bd14 <ull_conn_rx+0x171c>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   3bebe:	f240 46e2 	movw	r6, #1250	; 0x4e2
   3bec2:	fb06 f608 	mul.w	r6, r6, r8
   3bec6:	f242 7710 	movw	r7, #10000	; 0x2710
   3beca:	fb07 6202 	mla	r2, r7, r2, r6
				     lll->latency) ||
   3bece:	f8b5 70c2 	ldrh.w	r7, [r5, #194]	; 0xc2
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   3bed2:	3a01      	subs	r2, #1
   3bed4:	fbb2 f2f6 	udiv	r2, r2, r6
				     lll->latency) ||
   3bed8:	b292      	uxth	r2, r2
   3beda:	4297      	cmp	r7, r2
   3bedc:	f47f af1a 	bne.w	3bd14 <ull_conn_rx+0x171c>
   3bee0:	e7c2      	b.n	3be68 <ull_conn_rx+0x1870>
   3bee2:	bf00      	nop
   3bee4:	200052b4 	.word	0x200052b4
   3bee8:	00053248 	.word	0x00053248
   3beec:	00052e88 	.word	0x00052e88
   3bef0:	00052d50 	.word	0x00052d50
   3bef4:	000533b4 	.word	0x000533b4
   3bef8:	000533d8 	.word	0x000533d8
			conn->tx_data = conn->tx_data->next;
   3befc:	6822      	ldr	r2, [r4, #0]
   3befe:	f8c5 21e0 	str.w	r2, [r5, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3bf02:	2b00      	cmp	r3, #0
   3bf04:	d0c2      	beq.n	3be8c <ull_conn_rx+0x1894>
   3bf06:	f7fe be24 	b.w	3ab52 <ull_conn_rx+0x55a>
	    ((pdu_data_tx->llctrl.opcode !=
   3bf0a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3bf0c:	2a03      	cmp	r2, #3
   3bf0e:	f43f ae77 	beq.w	3bc00 <ull_conn_rx+0x1608>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3bf12:	2a0a      	cmp	r2, #10
   3bf14:	f47f ae81 	bne.w	3bc1a <ull_conn_rx+0x1622>
   3bf18:	e672      	b.n	3bc00 <ull_conn_rx+0x1608>
   3bf1a:	bf00      	nop

0003bf1c <ull_conn_llcp>:
{
   3bf1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((conn->llcp_ack == conn->llcp_req) &&
   3bf20:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3bf24:	f890 70f0 	ldrb.w	r7, [r0, #240]	; 0xf0
   3bf28:	42bb      	cmp	r3, r7
{
   3bf2a:	4604      	mov	r4, r0
   3bf2c:	460e      	mov	r6, r1
   3bf2e:	4615      	mov	r5, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   3bf30:	d02f      	beq.n	3bf92 <ull_conn_llcp+0x76>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3bf32:	1afb      	subs	r3, r7, r3
   3bf34:	f003 0303 	and.w	r3, r3, #3
   3bf38:	2b02      	cmp	r3, #2
   3bf3a:	d00f      	beq.n	3bf5c <ull_conn_llcp+0x40>
			break;
   3bf3c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3bf40:	f1bc 0f00 	cmp.w	ip, #0
   3bf44:	db42      	blt.n	3bfcc <ull_conn_llcp+0xb0>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   3bf46:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
   3bf4a:	f894 2151 	ldrb.w	r2, [r4, #337]	; 0x151
   3bf4e:	1a9b      	subs	r3, r3, r2
   3bf50:	b2db      	uxtb	r3, r3
   3bf52:	2b01      	cmp	r3, #1
   3bf54:	d054      	beq.n	3c000 <ull_conn_llcp+0xe4>
	return 0;
   3bf56:	2000      	movs	r0, #0
}
   3bf58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bf5c:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   3bf60:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3bf64:	4291      	cmp	r1, r2
   3bf66:	d006      	beq.n	3bf76 <ull_conn_llcp+0x5a>
			if ((conn->llcp_length.state ==
   3bf68:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   3bf6c:	f003 0106 	and.w	r1, r3, #6
   3bf70:	2904      	cmp	r1, #4
   3bf72:	f000 8312 	beq.w	3c59a <ull_conn_llcp+0x67e>
		switch (conn->llcp_type) {
   3bf76:	f894 70f2 	ldrb.w	r7, [r4, #242]	; 0xf2
   3bf7a:	1e7b      	subs	r3, r7, #1
   3bf7c:	2b05      	cmp	r3, #5
   3bf7e:	f200 82f8 	bhi.w	3c572 <ull_conn_llcp+0x656>
   3bf82:	e8df f013 	tbh	[pc, r3, lsl #1]
   3bf86:	02c4      	.short	0x02c4
   3bf88:	020a0291 	.word	0x020a0291
   3bf8c:	01cf02f6 	.word	0x01cf02f6
   3bf90:	0127      	.short	0x0127
   3bf92:	f990 c039 	ldrsb.w	ip, [r0, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   3bf96:	f1bc 0f00 	cmp.w	ip, #0
   3bf9a:	f2c0 82f8 	blt.w	3c58e <ull_conn_llcp+0x672>
	    !conn->llcp_enc.pause_rx) {
   3bf9e:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   3bfa2:	f012 0801 	ands.w	r8, r2, #1
   3bfa6:	d1cb      	bne.n	3bf40 <ull_conn_llcp+0x24>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   3bfa8:	f894 1119 	ldrb.w	r1, [r4, #281]	; 0x119
   3bfac:	f894 0118 	ldrb.w	r0, [r4, #280]	; 0x118
   3bfb0:	4288      	cmp	r0, r1
   3bfb2:	f000 84e7 	beq.w	3c984 <ull_conn_llcp+0xa68>
			conn->llcp_type = LLCP_CONN_UPD;
   3bfb6:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   3bfb8:	3b02      	subs	r3, #2
			conn->llcp_type = LLCP_CONN_UPD;
   3bfba:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
			conn->llcp_ack -= 2U;
   3bfbe:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
   3bfc2:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   3bfc6:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   3bfca:	e7cb      	b.n	3bf64 <ull_conn_llcp+0x48>
   3bfcc:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3bfd0:	2a00      	cmp	r2, #0
   3bfd2:	d0b8      	beq.n	3bf46 <ull_conn_llcp+0x2a>
		switch (conn->periph.llcp_type) {
   3bfd4:	2a02      	cmp	r2, #2
   3bfd6:	f000 82a3 	beq.w	3c520 <ull_conn_llcp+0x604>
   3bfda:	2a06      	cmp	r2, #6
   3bfdc:	d05b      	beq.n	3c096 <ull_conn_llcp+0x17a>
   3bfde:	2a01      	cmp	r2, #1
   3bfe0:	f000 80ed 	beq.w	3c1be <ull_conn_llcp+0x2a2>
			LL_ASSERT(0);
   3bfe4:	f240 5312 	movw	r3, #1298	; 0x512
   3bfe8:	4aca      	ldr	r2, [pc, #808]	; (3c314 <ull_conn_llcp+0x3f8>)
   3bfea:	49cb      	ldr	r1, [pc, #812]	; (3c318 <ull_conn_llcp+0x3fc>)
   3bfec:	48cb      	ldr	r0, [pc, #812]	; (3c31c <ull_conn_llcp+0x400>)
   3bfee:	f00e f875 	bl	4a0dc <printk>
   3bff2:	4040      	eors	r0, r0
   3bff4:	f380 8811 	msr	BASEPRI, r0
   3bff8:	f04f 0003 	mov.w	r0, #3
   3bffc:	df02      	svc	2
			break;
   3bffe:	e7a2      	b.n	3bf46 <ull_conn_llcp+0x2a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c000:	48c7      	ldr	r0, [pc, #796]	; (3c320 <ull_conn_llcp+0x404>)
   3c002:	f7f7 ff21 	bl	33e48 <mem_acquire>
		if (tx) {
   3c006:	2800      	cmp	r0, #0
   3c008:	d038      	beq.n	3c07c <ull_conn_llcp+0x160>
			conn->llcp_terminate.ack--;
   3c00a:	f894 3151 	ldrb.w	r3, [r4, #337]	; 0x151
   3c00e:	3b01      	subs	r3, #1
   3c010:	f884 3151 	strb.w	r3, [r4, #337]	; 0x151
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c014:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   3c016:	2202      	movs	r2, #2
   3c018:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c01a:	f043 0303 	orr.w	r3, r3, #3
   3c01e:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   3c020:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   3c022:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu_tx->llctrl.terminate_ind.error_code =
   3c026:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
   3c02a:	7202      	strb	r2, [r0, #8]
	if (
   3c02c:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3c030:	b1b3      	cbz	r3, 3c060 <ull_conn_llcp+0x144>
	    !conn->llcp_enc.pause_tx &&
   3c032:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c036:	078d      	lsls	r5, r1, #30
   3c038:	d412      	bmi.n	3c060 <ull_conn_llcp+0x144>
	    !conn->llcp_phy.pause_tx &&
   3c03a:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3c03e:	07c9      	lsls	r1, r1, #31
   3c040:	d40e      	bmi.n	3c060 <ull_conn_llcp+0x144>
		if (conn->tx_head == conn->tx_data) {
   3c042:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3c046:	428b      	cmp	r3, r1
   3c048:	f001 803a 	beq.w	3d0c0 <ull_conn_llcp+0x11a4>
		} else if (!conn->tx_ctrl) {
   3c04c:	b95a      	cbnz	r2, 3c066 <ull_conn_llcp+0x14a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3c04e:	791a      	ldrb	r2, [r3, #4]
   3c050:	f002 0203 	and.w	r2, r2, #3
   3c054:	2a03      	cmp	r2, #3
   3c056:	f001 82d6 	beq.w	3d606 <ull_conn_llcp+0x16ea>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3c05a:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   3c05e:	e004      	b.n	3c06a <ull_conn_llcp+0x14e>
		if (!conn->tx_ctrl) {
   3c060:	2a00      	cmp	r2, #0
   3c062:	f000 84e7 	beq.w	3ca34 <ull_conn_llcp+0xb18>
	tx->next = conn->tx_ctrl_last->next;
   3c066:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c06a:	681a      	ldr	r2, [r3, #0]
   3c06c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3c06e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   3c070:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   3c072:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c076:	b90b      	cbnz	r3, 3c07c <ull_conn_llcp+0x160>
		conn->tx_data_last = tx;
   3c078:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
		if (!conn->procedure_expire) {
   3c07c:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   3c080:	2800      	cmp	r0, #0
   3c082:	f47f af68 	bne.w	3bf56 <ull_conn_llcp+0x3a>
			conn->procedure_expire = conn->supervision_reload;
   3c086:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   3c08a:	2b01      	cmp	r3, #1
   3c08c:	f240 84cd 	bls.w	3ca2a <ull_conn_llcp+0xb0e>
			conn->procedure_expire = conn->supervision_reload;
   3c090:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3c094:	e75f      	b.n	3bf56 <ull_conn_llcp+0x3a>
			event_counter = lll->event_counter +
   3c096:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3c098:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.phy_upd_ind.initiate) {
   3c09a:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
			event_counter = lll->event_counter +
   3c09e:	440b      	add	r3, r1
   3c0a0:	441d      	add	r5, r3
	if (conn->llcp.phy_upd_ind.initiate) {
   3c0a2:	f012 0601 	ands.w	r6, r2, #1
			event_counter = lll->event_counter +
   3c0a6:	b2ad      	uxth	r5, r5
	if (conn->llcp.phy_upd_ind.initiate) {
   3c0a8:	f040 840e 	bne.w	3c8c8 <ull_conn_llcp+0x9ac>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   3c0ac:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   3c0b0:	1aed      	subs	r5, r5, r3
   3c0b2:	042a      	lsls	r2, r5, #16
   3c0b4:	f53f af47 	bmi.w	3bf46 <ull_conn_llcp+0x2a>
			rx = ll_pdu_rx_alloc();
   3c0b8:	f7fb fdee 	bl	37c98 <ll_pdu_rx_alloc>
			if (!rx) {
   3c0bc:	4601      	mov	r1, r0
   3c0be:	2800      	cmp	r0, #0
   3c0c0:	f43f af41 	beq.w	3bf46 <ull_conn_llcp+0x2a>
			rx->hdr.link->mem = conn->llcp_rx;
   3c0c4:	6800      	ldr	r0, [r0, #0]
   3c0c6:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   3c0ca:	6043      	str	r3, [r0, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c0cc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   3c0d0:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c0d4:	2b00      	cmp	r3, #0
   3c0d6:	f2c0 865d 	blt.w	3cd94 <ull_conn_llcp+0xe78>
			conn->llcp_ack = conn->llcp_req;
   3c0da:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c0de:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		if (conn->llcp.phy_upd_ind.tx) {
   3c0e2:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		old_tx = lll->phy_tx;
   3c0e6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   3c0ea:	f894 5061 	ldrb.w	r5, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   3c0ee:	f8b4 605e 	ldrh.w	r6, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   3c0f2:	f012 0f1c 	tst.w	r2, #28
		old_tx = lll->phy_tx;
   3c0f6:	f003 0807 	and.w	r8, r3, #7
		old_rx = lll->phy_rx;
   3c0fa:	f005 0507 	and.w	r5, r5, #7
		if (conn->llcp.phy_upd_ind.tx) {
   3c0fe:	f040 8604 	bne.w	3cd0a <ull_conn_llcp+0xdee>
		uint16_t eff_tx_time = lll->max_tx_time;
   3c102:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
   3c106:	46c4      	mov	ip, r8
		if (conn->llcp.phy_upd_ind.rx) {
   3c108:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   3c10c:	f000 85fa 	beq.w	3cd04 <ull_conn_llcp+0xde8>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   3c110:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3c114:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   3c118:	f36e 0302 	bfi	r3, lr, #0, #3
   3c11c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   3c120:	f44f 76a4 	mov.w	r6, #328	; 0x148
		conn->llcp_rx = rx->hdr.link->mem;
   3c124:	6843      	ldr	r3, [r0, #4]
   3c126:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   3c12a:	0793      	lsls	r3, r2, #30
   3c12c:	d402      	bmi.n	3c134 <ull_conn_llcp+0x218>
   3c12e:	45e0      	cmp	r8, ip
   3c130:	f001 8001 	beq.w	3d136 <ull_conn_llcp+0x121a>
		rx->hdr.handle = lll->handle;
   3c134:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3c136:	80cb      	strh	r3, [r1, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3c138:	221c      	movs	r2, #28
		upd->status = 0U;
   3c13a:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   3c13c:	f881 c01d 	strb.w	ip, [r1, #29]
		upd->rx = lll->phy_rx;
   3c140:	f881 e01e 	strb.w	lr, [r1, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3c144:	710a      	strb	r2, [r1, #4]
		upd->status = 0U;
   3c146:	770b      	strb	r3, [r1, #28]
		ll_rx_put(rx->hdr.link, rx);
   3c148:	f7fb fd76 	bl	37c38 <ll_rx_put>
		rx = conn->llcp_rx;
   3c14c:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
		LL_ASSERT(rx && rx->hdr.link);
   3c150:	2d00      	cmp	r5, #0
   3c152:	f000 8628 	beq.w	3cda6 <ull_conn_llcp+0xe8a>
   3c156:	6828      	ldr	r0, [r5, #0]
   3c158:	2800      	cmp	r0, #0
   3c15a:	f000 8624 	beq.w	3cda6 <ull_conn_llcp+0xe8a>
		if ((eff_tx_time <= lll->max_tx_time) &&
   3c15e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   3c162:	6842      	ldr	r2, [r0, #4]
   3c164:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		if ((eff_tx_time <= lll->max_tx_time) &&
   3c168:	42bb      	cmp	r3, r7
   3c16a:	d30a      	bcc.n	3c182 <ull_conn_llcp+0x266>
   3c16c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   3c170:	d807      	bhi.n	3c182 <ull_conn_llcp+0x266>
		    (eff_rx_time <= lll->max_rx_time) &&
   3c172:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   3c176:	42b3      	cmp	r3, r6
   3c178:	d303      	bcc.n	3c182 <ull_conn_llcp+0x266>
		    (eff_rx_time <= lll->max_rx_time) &&
   3c17a:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   3c17e:	f240 87ed 	bls.w	3d15c <ull_conn_llcp+0x1240>
		lll->max_tx_time = eff_tx_time;
   3c182:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   3c186:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   3c18a:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   3c18c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3c18e:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   3c190:	f043 0303 	orr.w	r3, r3, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3c194:	2209      	movs	r2, #9
   3c196:	776a      	strb	r2, [r5, #29]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   3c198:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   3c19a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   3c19e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   3c1a2:	842b      	strh	r3, [r5, #32]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c1a4:	2203      	movs	r2, #3
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3c1a6:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   3c1a8:	84a9      	strh	r1, [r5, #36]	; 0x24
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c1aa:	712a      	strb	r2, [r5, #4]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3c1ac:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   3c1ae:	4629      	mov	r1, r5
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   3c1b0:	846e      	strh	r6, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   3c1b2:	84ef      	strh	r7, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   3c1b4:	f7fb fd40 	bl	37c38 <ll_rx_put>
		ll_rx_sched();
   3c1b8:	f7fb fd48 	bl	37c4c <ll_rx_sched>
   3c1bc:	e6c3      	b.n	3bf46 <ull_conn_llcp+0x2a>
			if (event_conn_upd_prep(conn, lazy,
   3c1be:	4632      	mov	r2, r6
   3c1c0:	4629      	mov	r1, r5
   3c1c2:	4620      	mov	r0, r4
   3c1c4:	f7ea ffe0 	bl	27188 <event_conn_upd_prep>
   3c1c8:	2800      	cmp	r0, #0
   3c1ca:	f47f aebc 	bne.w	3bf46 <ull_conn_llcp+0x2a>
				return -ECANCELED;
   3c1ce:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3c1d2:	e6c1      	b.n	3bf58 <ull_conn_llcp+0x3c>
			event_counter = lll->event_counter +
   3c1d4:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   3c1d6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
	if (conn->llcp.phy_upd_ind.initiate) {
   3c1d8:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
			event_counter = lll->event_counter +
   3c1dc:	440b      	add	r3, r1
   3c1de:	442b      	add	r3, r5
	if (conn->llcp.phy_upd_ind.initiate) {
   3c1e0:	f012 0801 	ands.w	r8, r2, #1
			event_counter = lll->event_counter +
   3c1e4:	b29f      	uxth	r7, r3
	if (conn->llcp.phy_upd_ind.initiate) {
   3c1e6:	4611      	mov	r1, r2
   3c1e8:	f040 82bc 	bne.w	3c764 <ull_conn_llcp+0x848>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   3c1ec:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
   3c1f0:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3c1f4:	1afb      	subs	r3, r7, r3
   3c1f6:	0418      	lsls	r0, r3, #16
   3c1f8:	f53f aea2 	bmi.w	3bf40 <ull_conn_llcp+0x24>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   3c1fc:	f1bc 0f00 	cmp.w	ip, #0
   3c200:	f2c0 873f 	blt.w	3d082 <ull_conn_llcp+0x1166>
   3c204:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
			conn->llcp_ack = conn->llcp_req;
   3c208:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c20c:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		old_tx = lll->phy_tx;
   3c210:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   3c214:	f894 a061 	ldrb.w	sl, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   3c218:	f8b4 905e 	ldrh.w	r9, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   3c21c:	f012 0f1c 	tst.w	r2, #28
		old_tx = lll->phy_tx;
   3c220:	f003 0b07 	and.w	fp, r3, #7
		old_rx = lll->phy_rx;
   3c224:	f00a 0a07 	and.w	sl, sl, #7
		if (conn->llcp.phy_upd_ind.tx) {
   3c228:	f040 8562 	bne.w	3ccf0 <ull_conn_llcp+0xdd4>
		uint16_t eff_tx_time = lll->max_tx_time;
   3c22c:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   3c230:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   3c234:	d008      	beq.n	3c248 <ull_conn_llcp+0x32c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   3c236:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   3c23a:	0952      	lsrs	r2, r2, #5
   3c23c:	f362 0302 	bfi	r3, r2, #0, #3
   3c240:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   3c244:	f44f 79a4 	mov.w	r9, #328	; 0x148
		LL_ASSERT(rx && rx->hdr.link);
   3c248:	2f00      	cmp	r7, #0
   3c24a:	f000 8575 	beq.w	3cd38 <ull_conn_llcp+0xe1c>
   3c24e:	6838      	ldr	r0, [r7, #0]
   3c250:	2800      	cmp	r0, #0
   3c252:	f000 8571 	beq.w	3cd38 <ull_conn_llcp+0xe1c>
		conn->llcp_rx = rx->hdr.link->mem;
   3c256:	f894 c061 	ldrb.w	ip, [r4, #97]	; 0x61
   3c25a:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   3c25e:	6843      	ldr	r3, [r0, #4]
   3c260:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   3c264:	f3c2 0202 	ubfx	r2, r2, #0, #3
   3c268:	f3cc 0302 	ubfx	r3, ip, #0, #3
   3c26c:	0789      	lsls	r1, r1, #30
   3c26e:	fa5f fc82 	uxtb.w	ip, r2
   3c272:	fa5f fe83 	uxtb.w	lr, r3
   3c276:	d402      	bmi.n	3c27e <ull_conn_llcp+0x362>
   3c278:	45e3      	cmp	fp, ip
   3c27a:	f000 873d 	beq.w	3d0f8 <ull_conn_llcp+0x11dc>
		rx->hdr.handle = lll->handle;
   3c27e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   3c280:	80f9      	strh	r1, [r7, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3c282:	f04f 0c1c 	mov.w	ip, #28
		upd->status = 0U;
   3c286:	2100      	movs	r1, #0
   3c288:	7739      	strb	r1, [r7, #28]
		upd->tx = lll->phy_tx;
   3c28a:	777a      	strb	r2, [r7, #29]
		upd->rx = lll->phy_rx;
   3c28c:	77bb      	strb	r3, [r7, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3c28e:	f887 c004 	strb.w	ip, [r7, #4]
		ll_rx_put(rx->hdr.link, rx);
   3c292:	4639      	mov	r1, r7
   3c294:	f7fb fcd0 	bl	37c38 <ll_rx_put>
		rx = conn->llcp_rx;
   3c298:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
		LL_ASSERT(rx && rx->hdr.link);
   3c29c:	2f00      	cmp	r7, #0
   3c29e:	f000 855d 	beq.w	3cd5c <ull_conn_llcp+0xe40>
   3c2a2:	6838      	ldr	r0, [r7, #0]
   3c2a4:	2800      	cmp	r0, #0
   3c2a6:	f000 8559 	beq.w	3cd5c <ull_conn_llcp+0xe40>
		if ((eff_tx_time <= lll->max_tx_time) &&
   3c2aa:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   3c2ae:	6842      	ldr	r2, [r0, #4]
   3c2b0:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		if ((eff_tx_time <= lll->max_tx_time) &&
   3c2b4:	4543      	cmp	r3, r8
   3c2b6:	d30a      	bcc.n	3c2ce <ull_conn_llcp+0x3b2>
   3c2b8:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   3c2bc:	d807      	bhi.n	3c2ce <ull_conn_llcp+0x3b2>
		    (eff_rx_time <= lll->max_rx_time) &&
   3c2be:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   3c2c2:	454b      	cmp	r3, r9
   3c2c4:	d303      	bcc.n	3c2ce <ull_conn_llcp+0x3b2>
		    (eff_rx_time <= lll->max_rx_time) &&
   3c2c6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   3c2ca:	f240 8729 	bls.w	3d120 <ull_conn_llcp+0x1204>
		lll->max_tx_time = eff_tx_time;
   3c2ce:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   3c2d2:	f8a4 905e 	strh.w	r9, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   3c2d6:	7f3b      	ldrb	r3, [r7, #28]
		rx->hdr.handle = lll->handle;
   3c2d8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3c2da:	80fa      	strh	r2, [r7, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   3c2dc:	f043 0303 	orr.w	r3, r3, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   3c2e0:	2209      	movs	r2, #9
   3c2e2:	777a      	strb	r2, [r7, #29]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   3c2e4:	773b      	strb	r3, [r7, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   3c2e6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   3c2ea:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   3c2ee:	843b      	strh	r3, [r7, #32]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c2f0:	2203      	movs	r2, #3
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3c2f2:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   3c2f4:	84b9      	strh	r1, [r7, #36]	; 0x24
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c2f6:	713a      	strb	r2, [r7, #4]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3c2f8:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
   3c2fa:	4639      	mov	r1, r7
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   3c2fc:	f8a7 9022 	strh.w	r9, [r7, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   3c300:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   3c304:	f7fb fc98 	bl	37c38 <ll_rx_put>
		ll_rx_sched();
   3c308:	f7fb fca0 	bl	37c4c <ll_rx_sched>
   3c30c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3c310:	e616      	b.n	3bf40 <ull_conn_llcp+0x24>
   3c312:	bf00      	nop
   3c314:	00053248 	.word	0x00053248
   3c318:	00052dd8 	.word	0x00052dd8
   3c31c:	00052d50 	.word	0x00052d50
   3c320:	20005348 	.word	0x20005348
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c324:	48d7      	ldr	r0, [pc, #860]	; (3c684 <ull_conn_llcp+0x768>)
   3c326:	f7f7 fd8f 	bl	33e48 <mem_acquire>
	if (tx) {
   3c32a:	2800      	cmp	r0, #0
   3c32c:	f43f ae06 	beq.w	3bf3c <ull_conn_llcp+0x20>
		conn->llcp_ack = conn->llcp_req;
   3c330:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c334:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   3c338:	2301      	movs	r3, #1
   3c33a:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c33c:	7902      	ldrb	r2, [r0, #4]
   3c33e:	e9d4 3775 	ldrd	r3, r7, [r4, #468]	; 0x1d4
   3c342:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   3c346:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c348:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   3c34a:	71c1      	strb	r1, [r0, #7]
	if (
   3c34c:	2b00      	cmp	r3, #0
   3c34e:	f000 837b 	beq.w	3ca48 <ull_conn_llcp+0xb2c>
	    !conn->llcp_enc.pause_tx &&
   3c352:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c356:	0791      	lsls	r1, r2, #30
   3c358:	f100 8376 	bmi.w	3ca48 <ull_conn_llcp+0xb2c>
	    !conn->llcp_phy.pause_tx &&
   3c35c:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c360:	07d2      	lsls	r2, r2, #31
   3c362:	f100 8371 	bmi.w	3ca48 <ull_conn_llcp+0xb2c>
		if (conn->tx_head == conn->tx_data) {
   3c366:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c36a:	4293      	cmp	r3, r2
   3c36c:	f001 813a 	beq.w	3d5e4 <ull_conn_llcp+0x16c8>
		} else if (!conn->tx_ctrl) {
   3c370:	2f00      	cmp	r7, #0
   3c372:	f001 81a0 	beq.w	3d6b6 <ull_conn_llcp+0x179a>
	tx->next = conn->tx_ctrl_last->next;
   3c376:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c37a:	681a      	ldr	r2, [r3, #0]
   3c37c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3c37e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   3c380:	6803      	ldr	r3, [r0, #0]
   3c382:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c386:	2b00      	cmp	r3, #0
   3c388:	f000 84d2 	beq.w	3cd30 <ull_conn_llcp+0xe14>
		conn->procedure_expire = conn->procedure_reload;
   3c38c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   3c390:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3c394:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3c398:	e5d2      	b.n	3bf40 <ull_conn_llcp+0x24>
	if (conn->llcp.encryption.state) {
   3c39a:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c39e:	f013 0803 	ands.w	r8, r3, #3
   3c3a2:	f000 8177 	beq.w	3c694 <ull_conn_llcp+0x778>
		if (lll->role &&
   3c3a6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3c3aa:	2b00      	cmp	r3, #0
   3c3ac:	f6bf adcb 	bge.w	3bf46 <ull_conn_llcp+0x2a>
   3c3b0:	f1b8 0f01 	cmp.w	r8, #1
   3c3b4:	f47f ae0a 	bne.w	3bfcc <ull_conn_llcp+0xb0>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c3b8:	48b2      	ldr	r0, [pc, #712]	; (3c684 <ull_conn_llcp+0x768>)
   3c3ba:	f7f7 fd45 	bl	33e48 <mem_acquire>
	if (!tx) {
   3c3be:	4607      	mov	r7, r0
   3c3c0:	2800      	cmp	r0, #0
   3c3c2:	f43f adbb 	beq.w	3bf3c <ull_conn_llcp+0x20>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c3c6:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   3c3c8:	220d      	movs	r2, #13
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c3ca:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   3c3ce:	f04f 0904 	mov.w	r9, #4
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   3c3d2:	f100 0808 	add.w	r8, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c3d6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   3c3d8:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   3c3da:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   3c3de:	210c      	movs	r1, #12
   3c3e0:	4640      	mov	r0, r8
   3c3e2:	f004 fb4d 	bl	40a80 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   3c3e6:	4641      	mov	r1, r8
   3c3e8:	2208      	movs	r2, #8
   3c3ea:	f504 7085 	add.w	r0, r4, #266	; 0x10a
   3c3ee:	f00f ff7d 	bl	4c2ec <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   3c3f2:	464a      	mov	r2, r9
   3c3f4:	f107 0110 	add.w	r1, r7, #16
   3c3f8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   3c3fc:	f00f ff76 	bl	4c2ec <memcpy>
	    conn->tx_head &&
   3c400:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3c404:	2b00      	cmp	r3, #0
   3c406:	f000 8630 	beq.w	3d06a <ull_conn_llcp+0x114e>
	    !conn->llcp_enc.pause_tx &&
   3c40a:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
   3c40e:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
	    conn->tx_head &&
   3c412:	0788      	lsls	r0, r1, #30
   3c414:	f100 862b 	bmi.w	3d06e <ull_conn_llcp+0x1152>
	    !conn->llcp_phy.pause_tx &&
   3c418:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3c41c:	07c9      	lsls	r1, r1, #31
   3c41e:	f100 8626 	bmi.w	3d06e <ull_conn_llcp+0x1152>
		if (conn->tx_head == conn->tx_data) {
   3c422:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3c426:	428b      	cmp	r3, r1
   3c428:	f001 824e 	beq.w	3d8c8 <ull_conn_llcp+0x19ac>
		} else if (!conn->tx_ctrl) {
   3c42c:	2a00      	cmp	r2, #0
   3c42e:	f001 8279 	beq.w	3d924 <ull_conn_llcp+0x1a08>
	tx->next = conn->tx_ctrl_last->next;
   3c432:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c436:	681a      	ldr	r2, [r3, #0]
   3c438:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   3c43a:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   3c43c:	683b      	ldr	r3, [r7, #0]
   3c43e:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c442:	2b00      	cmp	r3, #0
   3c444:	f001 80ae 	beq.w	3d5a4 <ull_conn_llcp+0x1688>
			rx = ll_pdu_rx_alloc();
   3c448:	f7fb fc26 	bl	37c98 <ll_pdu_rx_alloc>
			if (!rx) {
   3c44c:	4607      	mov	r7, r0
   3c44e:	2800      	cmp	r0, #0
   3c450:	f43f ad74 	beq.w	3bf3c <ull_conn_llcp+0x20>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c454:	7f3b      	ldrb	r3, [r7, #28]
			rx->hdr.handle = conn->lll.handle;
   3c456:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3c458:	80fa      	strh	r2, [r7, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c45a:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c45e:	2203      	movs	r2, #3
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3c460:	2117      	movs	r1, #23
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c462:	773b      	strb	r3, [r7, #28]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c464:	713a      	strb	r2, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3c466:	77fa      	strb	r2, [r7, #31]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3c468:	7779      	strb	r1, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   3c46a:	2208      	movs	r2, #8
   3c46c:	f204 1179 	addw	r1, r4, #377	; 0x179
   3c470:	f107 0020 	add.w	r0, r7, #32
   3c474:	f00f ff3a 	bl	4c2ec <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   3c478:	f894 3177 	ldrb.w	r3, [r4, #375]	; 0x177
   3c47c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   3c480:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
   3c484:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   3c488:	4639      	mov	r1, r7
   3c48a:	6838      	ldr	r0, [r7, #0]
   3c48c:	f7fb fbd4 	bl	37c38 <ll_rx_put>
			ll_rx_sched();
   3c490:	f7fb fbdc 	bl	37c4c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   3c494:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3c498:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3c49c:	2202      	movs	r2, #2
   3c49e:	f362 0301 	bfi	r3, r2, #0, #2
   3c4a2:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3c4a6:	e54b      	b.n	3bf40 <ull_conn_llcp+0x24>
			event_counter = lll->event_counter +
   3c4a8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3c4aa:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   3c4ac:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
			event_counter = lll->event_counter +
   3c4b0:	440b      	add	r3, r1
   3c4b2:	442b      	add	r3, r5
	if (conn->llcp.chan_map.initiate) {
   3c4b4:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   3c4b8:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   3c4ba:	f040 8090 	bne.w	3c5de <ull_conn_llcp+0x6c2>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   3c4be:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3c4c2:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3c4c6:	1afb      	subs	r3, r7, r3
   3c4c8:	041f      	lsls	r7, r3, #16
   3c4ca:	f53f ad39 	bmi.w	3bf40 <ull_conn_llcp+0x24>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3c4ce:	f1bc 0f00 	cmp.w	ip, #0
   3c4d2:	f2c0 8424 	blt.w	3cd1e <ull_conn_llcp+0xe02>
			conn->llcp_ack = conn->llcp_req;
   3c4d6:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c4da:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		memcpy(&lll->data_chan_map[0],
   3c4de:	f104 0734 	add.w	r7, r4, #52	; 0x34
   3c4e2:	2205      	movs	r2, #5
   3c4e4:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3c4e8:	4638      	mov	r0, r7
   3c4ea:	f00f feff 	bl	4c2ec <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   3c4ee:	4638      	mov	r0, r7
   3c4f0:	2105      	movs	r1, #5
   3c4f2:	f7f7 fe71 	bl	341d8 <util_ones_count_get>
		lll->data_chan_count =
   3c4f6:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3c4fa:	2301      	movs	r3, #1
		lll->data_chan_count =
   3c4fc:	f360 0c05 	bfi	ip, r0, #0, #6
   3c500:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3c504:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
   3c508:	fa4f fc8c 	sxtb.w	ip, ip
   3c50c:	e518      	b.n	3bf40 <ull_conn_llcp+0x24>
			if (event_conn_upd_prep(conn, lazy,
   3c50e:	4632      	mov	r2, r6
   3c510:	4629      	mov	r1, r5
   3c512:	4620      	mov	r0, r4
   3c514:	f7ea fe38 	bl	27188 <event_conn_upd_prep>
   3c518:	2800      	cmp	r0, #0
   3c51a:	f47f ad0f 	bne.w	3bf3c <ull_conn_llcp+0x20>
   3c51e:	e656      	b.n	3c1ce <ull_conn_llcp+0x2b2>
			event_counter = lll->event_counter +
   3c520:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   3c522:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   3c524:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
			event_counter = lll->event_counter +
   3c528:	440b      	add	r3, r1
   3c52a:	441d      	add	r5, r3
	if (conn->llcp.chan_map.initiate) {
   3c52c:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   3c530:	b2ad      	uxth	r5, r5
	if (conn->llcp.chan_map.initiate) {
   3c532:	f040 817d 	bne.w	3c830 <ull_conn_llcp+0x914>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   3c536:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
   3c53a:	1aed      	subs	r5, r5, r3
   3c53c:	0429      	lsls	r1, r5, #16
   3c53e:	f53f ad02 	bmi.w	3bf46 <ull_conn_llcp+0x2a>
		memcpy(&lll->data_chan_map[0],
   3c542:	f104 0534 	add.w	r5, r4, #52	; 0x34
			conn->periph.llcp_type = LLCP_NONE;
   3c546:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   3c54a:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3c54e:	2205      	movs	r2, #5
   3c550:	4628      	mov	r0, r5
   3c552:	f00f fecb 	bl	4c2ec <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   3c556:	4628      	mov	r0, r5
   3c558:	2105      	movs	r1, #5
   3c55a:	f7f7 fe3d 	bl	341d8 <util_ones_count_get>
		lll->data_chan_count =
   3c55e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3c562:	2201      	movs	r2, #1
		lll->data_chan_count =
   3c564:	f360 0305 	bfi	r3, r0, #0, #6
   3c568:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   3c56c:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
   3c570:	e4e9      	b.n	3bf46 <ull_conn_llcp+0x2a>
			LL_ASSERT(0);
   3c572:	f240 43e1 	movw	r3, #1249	; 0x4e1
   3c576:	4a44      	ldr	r2, [pc, #272]	; (3c688 <ull_conn_llcp+0x76c>)
   3c578:	4944      	ldr	r1, [pc, #272]	; (3c68c <ull_conn_llcp+0x770>)
   3c57a:	4845      	ldr	r0, [pc, #276]	; (3c690 <ull_conn_llcp+0x774>)
   3c57c:	f00d fdae 	bl	4a0dc <printk>
   3c580:	4040      	eors	r0, r0
   3c582:	f380 8811 	msr	BASEPRI, r0
   3c586:	f04f 0003 	mov.w	r0, #3
   3c58a:	df02      	svc	2
   3c58c:	e4d6      	b.n	3bf3c <ull_conn_llcp+0x20>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   3c58e:	f890 20e5 	ldrb.w	r2, [r0, #229]	; 0xe5
   3c592:	2a00      	cmp	r2, #0
   3c594:	f47f ad1c 	bne.w	3bfd0 <ull_conn_llcp+0xb4>
   3c598:	e501      	b.n	3bf9e <ull_conn_llcp+0x82>
	switch (conn->llcp_length.state) {
   3c59a:	f3c3 0702 	ubfx	r7, r3, #0, #3
   3c59e:	b2f9      	uxtb	r1, r7
   3c5a0:	2907      	cmp	r1, #7
   3c5a2:	d00e      	beq.n	3c5c2 <ull_conn_llcp+0x6a6>
   3c5a4:	f04f 0801 	mov.w	r8, #1
   3c5a8:	fa08 f001 	lsl.w	r0, r8, r1
   3c5ac:	f010 0c4e 	ands.w	ip, r0, #78	; 0x4e
   3c5b0:	f47f ace1 	bne.w	3bf76 <ull_conn_llcp+0x5a>
   3c5b4:	f010 0f30 	tst.w	r0, #48	; 0x30
   3c5b8:	f040 8414 	bne.w	3cde4 <ull_conn_llcp+0xec8>
   3c5bc:	2900      	cmp	r1, #0
   3c5be:	f000 872d 	beq.w	3d41c <ull_conn_llcp+0x1500>
		LL_ASSERT(0);
   3c5c2:	f241 03ea 	movw	r3, #4330	; 0x10ea
   3c5c6:	4a30      	ldr	r2, [pc, #192]	; (3c688 <ull_conn_llcp+0x76c>)
   3c5c8:	4930      	ldr	r1, [pc, #192]	; (3c68c <ull_conn_llcp+0x770>)
   3c5ca:	4831      	ldr	r0, [pc, #196]	; (3c690 <ull_conn_llcp+0x774>)
   3c5cc:	f00d fd86 	bl	4a0dc <printk>
   3c5d0:	4040      	eors	r0, r0
   3c5d2:	f380 8811 	msr	BASEPRI, r0
   3c5d6:	f04f 0003 	mov.w	r0, #3
   3c5da:	df02      	svc	2
		break;
   3c5dc:	e4cb      	b.n	3bf76 <ull_conn_llcp+0x5a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c5de:	4829      	ldr	r0, [pc, #164]	; (3c684 <ull_conn_llcp+0x768>)
   3c5e0:	f7f7 fc32 	bl	33e48 <mem_acquire>
		if (tx) {
   3c5e4:	4680      	mov	r8, r0
   3c5e6:	2800      	cmp	r0, #0
   3c5e8:	f43f aca8 	beq.w	3bf3c <ull_conn_llcp+0x20>
						      conn->lll.latency + 6;
   3c5ec:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c5ee:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   3c5f0:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
						      conn->lll.latency + 6;
   3c5f4:	3306      	adds	r3, #6
   3c5f6:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   3c5f8:	f8a4 30fa 	strh.w	r3, [r4, #250]	; 0xfa
			conn->llcp.chan_map.initiate = 0U;
   3c5fc:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->llctrl.opcode =
   3c600:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c602:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c606:	2008      	movs	r0, #8
			conn->llcp.chan_map.initiate = 0U;
   3c608:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c60c:	f888 2004 	strb.w	r2, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c610:	f888 0005 	strb.w	r0, [r8, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3c614:	f888 3007 	strb.w	r3, [r8, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3c618:	2205      	movs	r2, #5
   3c61a:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
   3c61e:	4440      	add	r0, r8
   3c620:	f00f fe64 	bl	4c2ec <memcpy>
	    conn->tx_head &&
   3c624:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3c628:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   3c62c:	f8a8 200d 	strh.w	r2, [r8, #13]
	if (
   3c630:	2b00      	cmp	r3, #0
   3c632:	f000 83a3 	beq.w	3cd7c <ull_conn_llcp+0xe60>
	    !conn->llcp_enc.pause_tx &&
   3c636:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
   3c63a:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
	    conn->tx_head &&
   3c63e:	0788      	lsls	r0, r1, #30
   3c640:	f100 839e 	bmi.w	3cd80 <ull_conn_llcp+0xe64>
	    !conn->llcp_phy.pause_tx &&
   3c644:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3c648:	07c9      	lsls	r1, r1, #31
   3c64a:	f100 8399 	bmi.w	3cd80 <ull_conn_llcp+0xe64>
		if (conn->tx_head == conn->tx_data) {
   3c64e:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3c652:	428b      	cmp	r3, r1
   3c654:	f001 810c 	beq.w	3d870 <ull_conn_llcp+0x1954>
		} else if (!conn->tx_ctrl) {
   3c658:	2a00      	cmp	r2, #0
   3c65a:	f001 812b 	beq.w	3d8b4 <ull_conn_llcp+0x1998>
	tx->next = conn->tx_ctrl_last->next;
   3c65e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c662:	681a      	ldr	r2, [r3, #0]
   3c664:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   3c668:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
   3c66c:	f8d8 3000 	ldr.w	r3, [r8]
   3c670:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c674:	2b00      	cmp	r3, #0
   3c676:	f47f ac61 	bne.w	3bf3c <ull_conn_llcp+0x20>
		conn->tx_data_last = tx;
   3c67a:	f8c4 81e4 	str.w	r8, [r4, #484]	; 0x1e4
   3c67e:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3c682:	e45d      	b.n	3bf40 <ull_conn_llcp+0x24>
   3c684:	20005348 	.word	0x20005348
   3c688:	00053248 	.word	0x00053248
   3c68c:	00052dd8 	.word	0x00052dd8
   3c690:	00052d50 	.word	0x00052d50
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c694:	48ba      	ldr	r0, [pc, #744]	; (3c980 <ull_conn_llcp+0xa64>)
   3c696:	f7f7 fbd7 	bl	33e48 <mem_acquire>
	if (!tx) {
   3c69a:	4681      	mov	r9, r0
   3c69c:	2800      	cmp	r0, #0
   3c69e:	f43f ac4d 	beq.w	3bf3c <ull_conn_llcp+0x20>
	if (!lll->role) {
   3c6a2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3c6a6:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   3c6a8:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   3c6ac:	f280 844d 	bge.w	3cf4a <ull_conn_llcp+0x102e>
	else if (!lll->enc_rx) {
   3c6b0:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3c6b4:	f013 0008 	ands.w	r0, r3, #8
   3c6b8:	f040 861b 	bne.w	3d2f2 <ull_conn_llcp+0x13d6>
		if (conn->llcp.encryption.error_code) {
   3c6bc:	f894 8101 	ldrb.w	r8, [r4, #257]	; 0x101
   3c6c0:	f1b8 0f00 	cmp.w	r8, #0
   3c6c4:	f000 863b 	beq.w	3d33e <ull_conn_llcp+0x1422>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c6c8:	f899 3004 	ldrb.w	r3, [r9, #4]
	if (conn->common.fex_valid &&
   3c6cc:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c6d0:	f043 0303 	orr.w	r3, r3, #3
   3c6d4:	f889 3004 	strb.w	r3, [r9, #4]
	if (conn->common.fex_valid &&
   3c6d8:	07d3      	lsls	r3, r2, #31
   3c6da:	f140 875b 	bpl.w	3d594 <ull_conn_llcp+0x1678>
	    (conn->llcp_feature.features_conn &
   3c6de:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   3c6e2:	4603      	mov	r3, r0
   3c6e4:	f001 0204 	and.w	r2, r1, #4
	if (conn->common.fex_valid &&
   3c6e8:	4313      	orrs	r3, r2
   3c6ea:	f000 8753 	beq.w	3d594 <ull_conn_llcp+0x1678>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3c6ee:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3c6f0:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   3c6f2:	f889 8009 	strb.w	r8, [r9, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3c6f6:	f889 2007 	strb.w	r2, [r9, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3c6fa:	f889 3008 	strb.w	r3, [r9, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   3c6fe:	f889 7005 	strb.w	r7, [r9, #5]
	    conn->tx_head &&
   3c702:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	conn->llcp.encryption.error_code = 0U;
   3c706:	2200      	movs	r2, #0
   3c708:	f884 2101 	strb.w	r2, [r4, #257]	; 0x101
	if (
   3c70c:	2b00      	cmp	r3, #0
   3c70e:	f000 8678 	beq.w	3d402 <ull_conn_llcp+0x14e6>
	    !conn->llcp_enc.pause_tx &&
   3c712:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c716:	0791      	lsls	r1, r2, #30
   3c718:	f100 8673 	bmi.w	3d402 <ull_conn_llcp+0x14e6>
	    !conn->llcp_phy.pause_tx &&
   3c71c:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c720:	07d2      	lsls	r2, r2, #31
   3c722:	f100 866e 	bmi.w	3d402 <ull_conn_llcp+0x14e6>
		if (conn->tx_head == conn->tx_data) {
   3c726:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c72a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3c72c:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3c730:	f001 8142 	beq.w	3d9b8 <ull_conn_llcp+0x1a9c>
		} else if (!conn->tx_ctrl) {
   3c734:	2a00      	cmp	r2, #0
   3c736:	f001 8273 	beq.w	3dc20 <ull_conn_llcp+0x1d04>
	tx->next = conn->tx_ctrl_last->next;
   3c73a:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c73e:	681a      	ldr	r2, [r3, #0]
   3c740:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3c744:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   3c748:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c74c:	f8d9 3000 	ldr.w	r3, [r9]
   3c750:	2b00      	cmp	r3, #0
   3c752:	f000 87f8 	beq.w	3d746 <ull_conn_llcp+0x182a>
			conn->llcp_ack = conn->llcp_req;
   3c756:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3c75a:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
			return;
   3c75e:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   3c762:	e435      	b.n	3bfd0 <ull_conn_llcp+0xb4>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   3c764:	2200      	movs	r2, #0
   3c766:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   3c76a:	f7f7 fbd9 	bl	33f20 <memq_peek>
   3c76e:	4681      	mov	r9, r0
   3c770:	2800      	cmp	r0, #0
   3c772:	f47f abe3 	bne.w	3bf3c <ull_conn_llcp+0x20>
		rx = ll_pdu_rx_alloc_peek(2);
   3c776:	2002      	movs	r0, #2
   3c778:	f7fb fa6e 	bl	37c58 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   3c77c:	4682      	mov	sl, r0
   3c77e:	2800      	cmp	r0, #0
   3c780:	f43f abdc 	beq.w	3bf3c <ull_conn_llcp+0x20>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c784:	487e      	ldr	r0, [pc, #504]	; (3c980 <ull_conn_llcp+0xa64>)
   3c786:	f7f7 fb5f 	bl	33e48 <mem_acquire>
		if (!tx) {
   3c78a:	4680      	mov	r8, r0
   3c78c:	2800      	cmp	r0, #0
   3c78e:	f43f abd5 	beq.w	3bf3c <ull_conn_llcp+0x20>
		conn->llcp.phy_upd_ind.initiate = 0U;
   3c792:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   3c796:	f369 0200 	bfi	r2, r9, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
   3c79a:	b2d3      	uxtb	r3, r2
   3c79c:	f3c3 0982 	ubfx	r9, r3, #2, #3
   3c7a0:	ea59 1953 	orrs.w	r9, r9, r3, lsr #5
		conn->llcp.phy_upd_ind.initiate = 0U;
   3c7a4:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		if (!((conn->llcp.phy_upd_ind.tx |
   3c7a8:	f040 878f 	bne.w	3d6ca <ull_conn_llcp+0x17ae>
			conn->llcp_ack = conn->llcp_req;
   3c7ac:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
			conn->llcp.phy_upd_ind.instant = 0U;
   3c7b0:	f8a4 90f6 	strh.w	r9, [r4, #246]	; 0xf6
			if (conn->llcp.phy_upd_ind.cmd) {
   3c7b4:	0799      	lsls	r1, r3, #30
			conn->llcp_ack = conn->llcp_req;
   3c7b6:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			if (conn->llcp.phy_upd_ind.cmd) {
   3c7ba:	f100 87c8 	bmi.w	3d74e <ull_conn_llcp+0x1832>
   3c7be:	464b      	mov	r3, r9
   3c7c0:	4649      	mov	r1, r9
		pdu_ctrl_tx->len =
   3c7c2:	2205      	movs	r2, #5
   3c7c4:	f888 2005 	strb.w	r2, [r8, #5]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   3c7c8:	f888 9008 	strb.w	r9, [r8, #8]
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   3c7cc:	f888 3009 	strb.w	r3, [r8, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c7d0:	f898 2004 	ldrb.w	r2, [r8, #4]
	    conn->tx_head &&
   3c7d4:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   3c7d8:	f8a8 100a 	strh.w	r1, [r8, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c7dc:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
   3c7e0:	2018      	movs	r0, #24
   3c7e2:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c7e6:	f888 2004 	strb.w	r2, [r8, #4]
		pdu_ctrl_tx->llctrl.opcode =
   3c7ea:	f888 0007 	strb.w	r0, [r8, #7]
	if (
   3c7ee:	2b00      	cmp	r3, #0
   3c7f0:	f000 86b9 	beq.w	3d566 <ull_conn_llcp+0x164a>
	    !conn->llcp_enc.pause_tx &&
   3c7f4:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c7f8:	0792      	lsls	r2, r2, #30
   3c7fa:	f100 86b4 	bmi.w	3d566 <ull_conn_llcp+0x164a>
	    !conn->llcp_phy.pause_tx &&
   3c7fe:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3c802:	07d7      	lsls	r7, r2, #31
   3c804:	f100 86af 	bmi.w	3d566 <ull_conn_llcp+0x164a>
		if (conn->tx_head == conn->tx_data) {
   3c808:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3c80c:	4293      	cmp	r3, r2
   3c80e:	f001 80e2 	beq.w	3d9d6 <ull_conn_llcp+0x1aba>
		} else if (!conn->tx_ctrl) {
   3c812:	2900      	cmp	r1, #0
   3c814:	f001 81f3 	beq.w	3dbfe <ull_conn_llcp+0x1ce2>
	tx->next = conn->tx_ctrl_last->next;
   3c818:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c81c:	681a      	ldr	r2, [r3, #0]
   3c81e:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   3c822:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
   3c826:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c82a:	f8d8 3000 	ldr.w	r3, [r8]
   3c82e:	e721      	b.n	3c674 <ull_conn_llcp+0x758>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c830:	4853      	ldr	r0, [pc, #332]	; (3c980 <ull_conn_llcp+0xa64>)
   3c832:	f7f7 fb09 	bl	33e48 <mem_acquire>
		if (tx) {
   3c836:	4606      	mov	r6, r0
   3c838:	2800      	cmp	r0, #0
   3c83a:	f43f ab84 	beq.w	3bf46 <ull_conn_llcp+0x2a>
						      conn->lll.latency + 6;
   3c83e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c840:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   3c842:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
						      conn->lll.latency + 6;
   3c846:	3206      	adds	r2, #6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c848:	f043 0303 	orr.w	r3, r3, #3
						      conn->lll.latency + 6;
   3c84c:	4415      	add	r5, r2
			conn->llcp.chan_map.initiate = 0U;
   3c84e:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c852:	2008      	movs	r0, #8
			pdu_ctrl_tx->llctrl.opcode =
   3c854:	2201      	movs	r2, #1
			conn->llcp.chan_map.initiate = 0U;
   3c856:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
			conn->llcp.chan_map.instant = event_counter +
   3c85a:	f8a4 50fa 	strh.w	r5, [r4, #250]	; 0xfa
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3c85e:	f104 01f5 	add.w	r1, r4, #245	; 0xf5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c862:	7133      	strb	r3, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3c864:	7170      	strb	r0, [r6, #5]
			pdu_ctrl_tx->llctrl.opcode =
   3c866:	71f2      	strb	r2, [r6, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   3c868:	1830      	adds	r0, r6, r0
   3c86a:	2205      	movs	r2, #5
   3c86c:	f00f fd3e 	bl	4c2ec <memcpy>
	    conn->tx_head &&
   3c870:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   3c874:	f8b4 20fa 	ldrh.w	r2, [r4, #250]	; 0xfa
   3c878:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
   3c87c:	2b00      	cmp	r3, #0
   3c87e:	f000 82f8 	beq.w	3ce72 <ull_conn_llcp+0xf56>
	    !conn->llcp_enc.pause_tx &&
   3c882:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
   3c886:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
	    conn->tx_head &&
   3c88a:	078d      	lsls	r5, r1, #30
   3c88c:	f100 82f3 	bmi.w	3ce76 <ull_conn_llcp+0xf5a>
	    !conn->llcp_phy.pause_tx &&
   3c890:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3c894:	07c8      	lsls	r0, r1, #31
   3c896:	f100 82ee 	bmi.w	3ce76 <ull_conn_llcp+0xf5a>
		if (conn->tx_head == conn->tx_data) {
   3c89a:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3c89e:	428b      	cmp	r3, r1
   3c8a0:	f000 87f7 	beq.w	3d892 <ull_conn_llcp+0x1976>
		} else if (!conn->tx_ctrl) {
   3c8a4:	2a00      	cmp	r2, #0
   3c8a6:	f001 8033 	beq.w	3d910 <ull_conn_llcp+0x19f4>
	tx->next = conn->tx_ctrl_last->next;
   3c8aa:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c8ae:	681a      	ldr	r2, [r3, #0]
   3c8b0:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   3c8b2:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
   3c8b4:	6833      	ldr	r3, [r6, #0]
   3c8b6:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c8ba:	2b00      	cmp	r3, #0
   3c8bc:	f47f ab43 	bne.w	3bf46 <ull_conn_llcp+0x2a>
		conn->tx_data_last = tx;
   3c8c0:	f8c4 61e4 	str.w	r6, [r4, #484]	; 0x1e4
   3c8c4:	f7ff bb3f 	b.w	3bf46 <ull_conn_llcp+0x2a>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   3c8c8:	2200      	movs	r2, #0
   3c8ca:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   3c8ce:	f7f7 fb27 	bl	33f20 <memq_peek>
   3c8d2:	4607      	mov	r7, r0
   3c8d4:	2800      	cmp	r0, #0
   3c8d6:	f47f ab36 	bne.w	3bf46 <ull_conn_llcp+0x2a>
		rx = ll_pdu_rx_alloc_peek(2);
   3c8da:	2002      	movs	r0, #2
   3c8dc:	f7fb f9bc 	bl	37c58 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   3c8e0:	4680      	mov	r8, r0
   3c8e2:	2800      	cmp	r0, #0
   3c8e4:	f43f ab2f 	beq.w	3bf46 <ull_conn_llcp+0x2a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3c8e8:	4825      	ldr	r0, [pc, #148]	; (3c980 <ull_conn_llcp+0xa64>)
   3c8ea:	f7f7 faad 	bl	33e48 <mem_acquire>
		if (!tx) {
   3c8ee:	4606      	mov	r6, r0
   3c8f0:	2800      	cmp	r0, #0
   3c8f2:	f43f ab28 	beq.w	3bf46 <ull_conn_llcp+0x2a>
		conn->llcp.phy_upd_ind.initiate = 0U;
   3c8f6:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   3c8fa:	f367 0200 	bfi	r2, r7, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
   3c8fe:	b2d3      	uxtb	r3, r2
   3c900:	f3c3 0782 	ubfx	r7, r3, #2, #3
   3c904:	ea57 1753 	orrs.w	r7, r7, r3, lsr #5
		conn->llcp.phy_upd_ind.initiate = 0U;
   3c908:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		if (!((conn->llcp.phy_upd_ind.tx |
   3c90c:	f040 86fc 	bne.w	3d708 <ull_conn_llcp+0x17ec>
			conn->llcp_ack = conn->llcp_req;
   3c910:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
			conn->llcp.phy_upd_ind.instant = 0U;
   3c914:	f8a4 70f6 	strh.w	r7, [r4, #246]	; 0xf6
			if (conn->llcp.phy_upd_ind.cmd) {
   3c918:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   3c91a:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			if (conn->llcp.phy_upd_ind.cmd) {
   3c91e:	f100 873c 	bmi.w	3d79a <ull_conn_llcp+0x187e>
   3c922:	463b      	mov	r3, r7
   3c924:	463a      	mov	r2, r7
		pdu_ctrl_tx->len =
   3c926:	2105      	movs	r1, #5
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   3c928:	7273      	strb	r3, [r6, #9]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   3c92a:	7237      	strb	r7, [r6, #8]
		pdu_ctrl_tx->len =
   3c92c:	7171      	strb	r1, [r6, #5]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c92e:	7933      	ldrb	r3, [r6, #4]
	    conn->tx_head &&
   3c930:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   3c934:	8172      	strh	r2, [r6, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c936:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode =
   3c93a:	2018      	movs	r0, #24
   3c93c:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3c940:	7133      	strb	r3, [r6, #4]
		pdu_ctrl_tx->llctrl.opcode =
   3c942:	71f0      	strb	r0, [r6, #7]
	if (
   3c944:	2900      	cmp	r1, #0
   3c946:	f000 861b 	beq.w	3d580 <ull_conn_llcp+0x1664>
	    !conn->llcp_enc.pause_tx &&
   3c94a:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
	    conn->tx_head &&
   3c94e:	079d      	lsls	r5, r3, #30
   3c950:	f100 8616 	bmi.w	3d580 <ull_conn_llcp+0x1664>
	    !conn->llcp_phy.pause_tx &&
   3c954:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3c958:	07d8      	lsls	r0, r3, #31
   3c95a:	f100 8611 	bmi.w	3d580 <ull_conn_llcp+0x1664>
		if (conn->tx_head == conn->tx_data) {
   3c95e:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
   3c962:	4299      	cmp	r1, r3
   3c964:	f001 8135 	beq.w	3dbd2 <ull_conn_llcp+0x1cb6>
		} else if (!conn->tx_ctrl) {
   3c968:	2a00      	cmp	r2, #0
   3c96a:	f001 813f 	beq.w	3dbec <ull_conn_llcp+0x1cd0>
	tx->next = conn->tx_ctrl_last->next;
   3c96e:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3c972:	681a      	ldr	r2, [r3, #0]
   3c974:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   3c976:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
   3c978:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3c97c:	6833      	ldr	r3, [r6, #0]
   3c97e:	e79c      	b.n	3c8ba <ull_conn_llcp+0x99e>
   3c980:	20005348 	.word	0x20005348
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   3c984:	f894 0131 	ldrb.w	r0, [r4, #305]	; 0x131
   3c988:	f894 e130 	ldrb.w	lr, [r4, #304]	; 0x130
   3c98c:	4570      	cmp	r0, lr
   3c98e:	d064      	beq.n	3ca5a <ull_conn_llcp+0xb3e>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   3c990:	eba0 000e 	sub.w	r0, r0, lr
   3c994:	07c0      	lsls	r0, r0, #31
   3c996:	f57f aad3 	bpl.w	3bf40 <ull_conn_llcp+0x24>
	if (conn->common.fex_valid) {
   3c99a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3c99e:	f013 0901 	ands.w	r9, r3, #1
   3c9a2:	f000 8271 	beq.w	3ce88 <ull_conn_llcp+0xf6c>
		rx = ll_pdu_rx_alloc();
   3c9a6:	f7fb f977 	bl	37c98 <ll_pdu_rx_alloc>
		if (!rx) {
   3c9aa:	4607      	mov	r7, r0
   3c9ac:	2800      	cmp	r0, #0
   3c9ae:	f000 80e9 	beq.w	3cb84 <ull_conn_llcp+0xc68>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   3c9b2:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   3c9b6:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c9ba:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   3c9bc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3c9be:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c9c0:	f043 0303 	orr.w	r3, r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   3c9c4:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c9c6:	2003      	movs	r0, #3
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   3c9c8:	4641      	mov	r1, r8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3c9ca:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3c9cc:	7138      	strb	r0, [r7, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   3c9ce:	777a      	strb	r2, [r7, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   3c9d0:	77fa      	strb	r2, [r7, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   3c9d2:	f107 0020 	add.w	r0, r7, #32
   3c9d6:	2208      	movs	r2, #8
   3c9d8:	f00f fc93 	bl	4c302 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
   3c9dc:	e9d4 2350 	ldrd	r2, r3, [r4, #320]	; 0x140
	sys_put_le16(val >> 16, &dst[2]);
   3c9e0:	0c10      	lsrs	r0, r2, #16
   3c9e2:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   3c9e4:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	dst[0] = val;
   3c9e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	dst[1] = val >> 8;
   3c9ec:	f887 c023 	strb.w	ip, [r7, #35]	; 0x23
   3c9f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   3c9f4:	f3c2 2c07 	ubfx	ip, r2, #8, #8
	dst[0] = val;
   3c9f8:	f887 0022 	strb.w	r0, [r7, #34]	; 0x22
	dst[1] = val >> 8;
   3c9fc:	0a08      	lsrs	r0, r1, #8
	dst[0] = val;
   3c9fe:	f887 1026 	strb.w	r1, [r7, #38]	; 0x26
   3ca02:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
   3ca06:	f887 c021 	strb.w	ip, [r7, #33]	; 0x21
   3ca0a:	f887 0027 	strb.w	r0, [r7, #39]	; 0x27
   3ca0e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		ll_rx_put(rx->hdr.link, rx);
   3ca12:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
   3ca14:	6808      	ldr	r0, [r1, #0]
   3ca16:	f7fb f90f 	bl	37c38 <ll_rx_put>
	ll_rx_sched();
   3ca1a:	f7fb f917 	bl	37c4c <ll_rx_sched>
   3ca1e:	f894 70f0 	ldrb.w	r7, [r4, #240]	; 0xf0
   3ca22:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3ca26:	f7ff ba84 	b.w	3bf32 <ull_conn_llcp+0x16>
				conn->procedure_expire++;
   3ca2a:	3301      	adds	r3, #1
   3ca2c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3ca30:	f7ff ba92 	b.w	3bf58 <ull_conn_llcp+0x3c>
			tx->next = conn->tx_head;
   3ca34:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3ca36:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ca3a:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3ca3e:	2b00      	cmp	r3, #0
   3ca40:	f47f ab1c 	bne.w	3c07c <ull_conn_llcp+0x160>
   3ca44:	f7ff bb18 	b.w	3c078 <ull_conn_llcp+0x15c>
		if (!conn->tx_ctrl) {
   3ca48:	2f00      	cmp	r7, #0
   3ca4a:	f47f ac94 	bne.w	3c376 <ull_conn_llcp+0x45a>
			tx->next = conn->tx_head;
   3ca4e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3ca50:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ca54:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3ca58:	e495      	b.n	3c386 <ull_conn_llcp+0x46a>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   3ca5a:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
   3ca5e:	f894 e148 	ldrb.w	lr, [r4, #328]	; 0x148
   3ca62:	4570      	cmp	r0, lr
   3ca64:	f000 8094 	beq.w	3cb90 <ull_conn_llcp+0xc74>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   3ca68:	eba0 000e 	sub.w	r0, r0, lr
   3ca6c:	07c1      	lsls	r1, r0, #31
   3ca6e:	f57f aa67 	bpl.w	3bf40 <ull_conn_llcp+0x24>
	if (conn->llcp_version.tx == 0U) {
   3ca72:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
   3ca76:	07da      	lsls	r2, r3, #31
   3ca78:	f140 852b 	bpl.w	3d4d2 <ull_conn_llcp+0x15b6>
	} else if (conn->llcp_version.rx) {
   3ca7c:	079f      	lsls	r7, r3, #30
   3ca7e:	f140 8525 	bpl.w	3d4cc <ull_conn_llcp+0x15b0>
		rx = ll_pdu_rx_alloc();
   3ca82:	f7fb f909 	bl	37c98 <ll_pdu_rx_alloc>
		if (!rx) {
   3ca86:	4601      	mov	r1, r0
   3ca88:	2800      	cmp	r0, #0
   3ca8a:	d07b      	beq.n	3cb84 <ull_conn_llcp+0xc68>
		conn->llcp_version.ack = conn->llcp_version.req;
   3ca8c:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
   3ca90:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3ca94:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   3ca96:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3ca98:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3ca9a:	f043 0303 	orr.w	r3, r3, #3
   3ca9e:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3caa0:	2003      	movs	r0, #3
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   3caa2:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3caa4:	230c      	movs	r3, #12
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   3caa6:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   3caa8:	77cb      	strb	r3, [r1, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3caaa:	7108      	strb	r0, [r1, #4]
		pdu->llctrl.version_ind.version_number =
   3caac:	f894 014b 	ldrb.w	r0, [r4, #331]	; 0x14b
		pdu->llctrl.version_ind.company_id =
   3cab0:	f8b4 214c 	ldrh.w	r2, [r4, #332]	; 0x14c
		pdu->llctrl.version_ind.sub_version_number =
   3cab4:	f8b4 314e 	ldrh.w	r3, [r4, #334]	; 0x14e
   3cab8:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
   3cabc:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.company_id =
   3cac0:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
   3cac4:	e7a6      	b.n	3ca14 <ull_conn_llcp+0xaf8>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3cac6:	48c0      	ldr	r0, [pc, #768]	; (3cdc8 <ull_conn_llcp+0xeac>)
   3cac8:	f7f7 f9be 	bl	33e48 <mem_acquire>
	if (!tx) {
   3cacc:	2800      	cmp	r0, #0
   3cace:	d059      	beq.n	3cb84 <ull_conn_llcp+0xc68>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cad0:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   3cad2:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cad6:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   3cada:	2218      	movs	r2, #24
   3cadc:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3cade:	7103      	strb	r3, [r0, #4]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3cae0:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   3cae4:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   3cae8:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3caec:	8101      	strh	r1, [r0, #8]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   3caee:	f8b4 119e 	ldrh.w	r1, [r4, #414]	; 0x19e
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   3caf2:	8142      	strh	r2, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   3caf4:	8183      	strh	r3, [r0, #12]
	p->preferred_periodicity = 0U;
   3caf6:	2200      	movs	r2, #0
	p->offset1 = sys_cpu_to_le16(0xffff);
   3caf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->preferred_periodicity = 0U;
   3cafc:	7402      	strb	r2, [r0, #16]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   3cafe:	81c1      	strh	r1, [r0, #14]
	p->offset0 = sys_cpu_to_le16(0x0000);
   3cb00:	74c2      	strb	r2, [r0, #19]
   3cb02:	7502      	strb	r2, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   3cb04:	7543      	strb	r3, [r0, #21]
   3cb06:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   3cb08:	75c3      	strb	r3, [r0, #23]
   3cb0a:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   3cb0c:	7643      	strb	r3, [r0, #25]
   3cb0e:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   3cb10:	76c3      	strb	r3, [r0, #27]
   3cb12:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   3cb14:	7743      	strb	r3, [r0, #29]
   3cb16:	7783      	strb	r3, [r0, #30]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   3cb18:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   3cb1c:	68a2      	ldr	r2, [r4, #8]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   3cb1e:	2107      	movs	r1, #7
   3cb20:	f361 0303 	bfi	r3, r1, #0, #4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3cb24:	210f      	movs	r1, #15
   3cb26:	71c1      	strb	r1, [r0, #7]
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   3cb28:	2a00      	cmp	r2, #0
	conn->procedure_expire = conn->procedure_reload;
   3cb2a:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   3cb2e:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   3cb32:	f8c4 61b4 	str.w	r6, [r4, #436]	; 0x1b4
	conn->procedure_expire = conn->procedure_reload;
   3cb36:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   3cb3a:	da0a      	bge.n	3cb52 <ull_conn_llcp+0xc36>
			uint32_t ticks_prepare_to_start =
   3cb3c:	68e3      	ldr	r3, [r4, #12]
   3cb3e:	6861      	ldr	r1, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   3cb40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   3cb44:	428b      	cmp	r3, r1
   3cb46:	bf2c      	ite	cs
   3cb48:	18f3      	addcs	r3, r6, r3
   3cb4a:	1873      	addcc	r3, r6, r1
   3cb4c:	1a9b      	subs	r3, r3, r2
   3cb4e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
		s_mfy_sched_offset.param = (void *)conn;
   3cb52:	4f9e      	ldr	r7, [pc, #632]	; (3cdcc <ull_conn_llcp+0xeb0>)
		win_offs = &p->offset0;
   3cb54:	3013      	adds	r0, #19
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3cb56:	2201      	movs	r2, #1
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
   3cb58:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3cb5c:	463b      	mov	r3, r7
   3cb5e:	4610      	mov	r0, r2
   3cb60:	2102      	movs	r1, #2
		s_mfy_sched_offset.param = (void *)conn;
   3cb62:	60bc      	str	r4, [r7, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   3cb64:	f7f7 fa48 	bl	33ff8 <mayfly_enqueue>
		LL_ASSERT(!retval);
   3cb68:	b160      	cbz	r0, 3cb84 <ull_conn_llcp+0xc68>
   3cb6a:	4a99      	ldr	r2, [pc, #612]	; (3cdd0 <ull_conn_llcp+0xeb4>)
   3cb6c:	4999      	ldr	r1, [pc, #612]	; (3cdd4 <ull_conn_llcp+0xeb8>)
   3cb6e:	f640 63f6 	movw	r3, #3830	; 0xef6
		LL_ASSERT(0);
   3cb72:	4899      	ldr	r0, [pc, #612]	; (3cdd8 <ull_conn_llcp+0xebc>)
   3cb74:	f00d fab2 	bl	4a0dc <printk>
   3cb78:	4040      	eors	r0, r0
   3cb7a:	f380 8811 	msr	BASEPRI, r0
   3cb7e:	f04f 0003 	mov.w	r0, #3
   3cb82:	df02      	svc	2
		break;
   3cb84:	f894 70f0 	ldrb.w	r7, [r4, #240]	; 0xf0
   3cb88:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3cb8c:	f7ff b9d1 	b.w	3bf32 <ull_conn_llcp+0x16>
		} else if (conn->llcp_conn_param.ack !=
   3cb90:	f894 e195 	ldrb.w	lr, [r4, #405]	; 0x195
   3cb94:	f894 0194 	ldrb.w	r0, [r4, #404]	; 0x194
   3cb98:	4586      	cmp	lr, r0
   3cb9a:	f000 8247 	beq.w	3d02c <ull_conn_llcp+0x1110>
	return conn_upd_curr && (conn_upd_curr != conn);
   3cb9e:	f8df 8240 	ldr.w	r8, [pc, #576]	; 3cde0 <ull_conn_llcp+0xec4>
   3cba2:	f8d8 0000 	ldr.w	r0, [r8]
   3cba6:	2800      	cmp	r0, #0
   3cba8:	f000 8500 	beq.w	3d5ac <ull_conn_llcp+0x1690>
   3cbac:	4284      	cmp	r4, r0
   3cbae:	f47f a9c7 	bne.w	3bf40 <ull_conn_llcp+0x24>
	switch (conn->llcp_conn_param.state) {
   3cbb2:	f894 0196 	ldrb.w	r0, [r4, #406]	; 0x196
   3cbb6:	f000 000f 	and.w	r0, r0, #15
   3cbba:	2808      	cmp	r0, #8
   3cbbc:	f201 80a7 	bhi.w	3dd0e <ull_conn_llcp+0x1df2>
   3cbc0:	f20f 0e04 	addw	lr, pc, #4
   3cbc4:	f85e f020 	ldr.w	pc, [lr, r0, lsl #2]
   3cbc8:	0003cac7 	.word	0x0003cac7
   3cbcc:	0003cc6d 	.word	0x0003cc6d
   3cbd0:	0003cc21 	.word	0x0003cc21
   3cbd4:	0003bf33 	.word	0x0003bf33
   3cbd8:	0003bf33 	.word	0x0003bf33
   3cbdc:	0003bf33 	.word	0x0003bf33
   3cbe0:	0003bf33 	.word	0x0003bf33
   3cbe4:	0003bf33 	.word	0x0003bf33
   3cbe8:	0003cbed 	.word	0x0003cbed
			event_counter = lll->event_counter +
   3cbec:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
   3cbee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3cbf0:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
   3cbf4:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
			event_counter = lll->event_counter +
   3cbf8:	4403      	add	r3, r0
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3cbfa:	2004      	movs	r0, #4
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
   3cbfc:	442b      	add	r3, r5
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3cbfe:	f360 0203 	bfi	r2, r0, #0, #4
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
   3cc02:	f821 3c02 	strh.w	r3, [r1, #-2]
	ctrl_tx_pause_enqueue(conn, tx, false);
   3cc06:	4620      	mov	r0, r4
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   3cc08:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
	ctrl_tx_pause_enqueue(conn, tx, false);
   3cc0c:	3913      	subs	r1, #19
   3cc0e:	2200      	movs	r2, #0
   3cc10:	f7fc fd46 	bl	396a0 <ctrl_tx_pause_enqueue>
   3cc14:	f894 70f0 	ldrb.w	r7, [r4, #240]	; 0xf0
   3cc18:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3cc1c:	f7ff b989 	b.w	3bf32 <ull_conn_llcp+0x16>
	if (conn->llcp_enc.pause_tx) {
   3cc20:	0790      	lsls	r0, r2, #30
   3cc22:	f53f a98d 	bmi.w	3bf40 <ull_conn_llcp+0x24>
	rx = ll_pdu_rx_alloc();
   3cc26:	f7fb f837 	bl	37c98 <ll_pdu_rx_alloc>
	if (!rx) {
   3cc2a:	4601      	mov	r1, r0
   3cc2c:	2800      	cmp	r0, #0
   3cc2e:	d0a9      	beq.n	3cb84 <ull_conn_llcp+0xc68>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3cc30:	f894 0196 	ldrb.w	r0, [r4, #406]	; 0x196
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cc34:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3cc36:	2203      	movs	r2, #3
   3cc38:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cc3c:	4313      	orrs	r3, r2
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   3cc3e:	f884 0196 	strb.w	r0, [r4, #406]	; 0x196
	rx->hdr.handle = conn->lll.handle;
   3cc42:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cc44:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   3cc46:	2318      	movs	r3, #24
   3cc48:	774b      	strb	r3, [r1, #29]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   3cc4a:	f8b4 319a 	ldrh.w	r3, [r4, #410]	; 0x19a
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3cc4e:	f8b4 7198 	ldrh.w	r7, [r4, #408]	; 0x198
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3cc52:	710a      	strb	r2, [r1, #4]
	rx->hdr.handle = conn->lll.handle;
   3cc54:	80c8      	strh	r0, [r1, #6]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   3cc56:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   3cc5a:	f8b4 019c 	ldrh.w	r0, [r4, #412]	; 0x19c
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   3cc5e:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3cc60:	230f      	movs	r3, #15
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   3cc62:	840f      	strh	r7, [r1, #32]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   3cc64:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   3cc66:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3cc68:	77cb      	strb	r3, [r1, #31]
   3cc6a:	e6d3      	b.n	3ca14 <ull_conn_llcp+0xaf8>
	if (conn->llcp_conn_param.status) {
   3cc6c:	f894 7197 	ldrb.w	r7, [r4, #407]	; 0x197
   3cc70:	2f00      	cmp	r7, #0
   3cc72:	f040 86c9 	bne.w	3da08 <ull_conn_llcp+0x1aec>
	if (!conn->lll.role) {
   3cc76:	f1bc 0f00 	cmp.w	ip, #0
   3cc7a:	f2c0 8720 	blt.w	3dabe <ull_conn_llcp+0x1ba2>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3cc7e:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   3cc82:	f894 01a0 	ldrb.w	r0, [r4, #416]	; 0x1a0
		conn->llcp_cu.win_offset_us = 0U;
   3cc86:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3cc8a:	2206      	movs	r2, #6
   3cc8c:	f362 0303 	bfi	r3, r2, #0, #4
		conn->llcp_cu.win_size = 1U;
   3cc90:	2201      	movs	r2, #1
   3cc92:	f884 2128 	strb.w	r2, [r4, #296]	; 0x128
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   3cc96:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
		interval_max = conn->llcp_conn_param.interval_max;
   3cc9a:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
		if (preferred_periodicity) {
   3cc9e:	2800      	cmp	r0, #0
   3cca0:	f000 8709 	beq.w	3dab6 <ull_conn_llcp+0x1b9a>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   3cca4:	fbb2 f3f0 	udiv	r3, r2, r0
   3cca8:	fb13 f300 	smulbb	r3, r3, r0
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   3ccac:	f8b4 0198 	ldrh.w	r0, [r4, #408]	; 0x198
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   3ccb0:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   3ccb2:	4298      	cmp	r0, r3
   3ccb4:	bf88      	it	hi
   3ccb6:	4613      	movhi	r3, r2
   3ccb8:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3ccbc:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3ccc0:	f8b4 019c 	ldrh.w	r0, [r4, #412]	; 0x19c
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3ccc4:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   3ccc8:	f8a4 011e 	strh.w	r0, [r4, #286]	; 0x11e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3cccc:	2002      	movs	r0, #2
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3ccce:	f3c2 1200 	ubfx	r2, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   3ccd2:	f360 0302 	bfi	r3, r0, #0, #3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3ccd6:	f362 03c3 	bfi	r3, r2, #3, #1
		conn->llcp_cu.ack--;
   3ccda:	3901      	subs	r1, #1
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3ccdc:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
		conn->llcp_cu.ack--;
   3cce0:	f884 1119 	strb.w	r1, [r4, #281]	; 0x119
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   3cce4:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   3cce8:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3ccec:	f7ff b92b 	b.w	3bf46 <ull_conn_llcp+0x2a>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   3ccf0:	f3c2 0082 	ubfx	r0, r2, #2, #3
   3ccf4:	f360 0302 	bfi	r3, r0, #0, #3
   3ccf8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   3ccfc:	f44f 78a4 	mov.w	r8, #328	; 0x148
   3cd00:	f7ff ba96 	b.w	3c230 <ull_conn_llcp+0x314>
		if (conn->llcp.phy_upd_ind.rx) {
   3cd04:	46ae      	mov	lr, r5
   3cd06:	f7ff ba0d 	b.w	3c124 <ull_conn_llcp+0x208>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   3cd0a:	f3c2 0c82 	ubfx	ip, r2, #2, #3
   3cd0e:	f36c 0302 	bfi	r3, ip, #0, #3
   3cd12:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   3cd16:	f44f 77a4 	mov.w	r7, #328	; 0x148
   3cd1a:	f7ff b9f5 	b.w	3c108 <ull_conn_llcp+0x1ec>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3cd1e:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   3cd22:	2b00      	cmp	r3, #0
   3cd24:	f43f abd7 	beq.w	3c4d6 <ull_conn_llcp+0x5ba>
			conn->periph.llcp_type = LLCP_NONE;
   3cd28:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
   3cd2c:	f7ff bbd7 	b.w	3c4de <ull_conn_llcp+0x5c2>
		conn->tx_data_last = tx;
   3cd30:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3cd34:	f7ff bb2a 	b.w	3c38c <ull_conn_llcp+0x470>
		LL_ASSERT(rx && rx->hdr.link);
   3cd38:	f241 231a 	movw	r3, #4634	; 0x121a
   3cd3c:	4a24      	ldr	r2, [pc, #144]	; (3cdd0 <ull_conn_llcp+0xeb4>)
   3cd3e:	4927      	ldr	r1, [pc, #156]	; (3cddc <ull_conn_llcp+0xec0>)
   3cd40:	4825      	ldr	r0, [pc, #148]	; (3cdd8 <ull_conn_llcp+0xebc>)
   3cd42:	f00d f9cb 	bl	4a0dc <printk>
   3cd46:	4040      	eors	r0, r0
   3cd48:	f380 8811 	msr	BASEPRI, r0
   3cd4c:	f04f 0003 	mov.w	r0, #3
   3cd50:	df02      	svc	2
   3cd52:	6838      	ldr	r0, [r7, #0]
   3cd54:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
   3cd58:	f7ff ba7d 	b.w	3c256 <ull_conn_llcp+0x33a>
		LL_ASSERT(rx && rx->hdr.link);
   3cd5c:	f241 2349 	movw	r3, #4681	; 0x1249
   3cd60:	4a1b      	ldr	r2, [pc, #108]	; (3cdd0 <ull_conn_llcp+0xeb4>)
   3cd62:	491e      	ldr	r1, [pc, #120]	; (3cddc <ull_conn_llcp+0xec0>)
   3cd64:	481c      	ldr	r0, [pc, #112]	; (3cdd8 <ull_conn_llcp+0xebc>)
   3cd66:	f00d f9b9 	bl	4a0dc <printk>
   3cd6a:	4040      	eors	r0, r0
   3cd6c:	f380 8811 	msr	BASEPRI, r0
   3cd70:	f04f 0003 	mov.w	r0, #3
   3cd74:	df02      	svc	2
   3cd76:	6838      	ldr	r0, [r7, #0]
   3cd78:	f7ff ba97 	b.w	3c2aa <ull_conn_llcp+0x38e>
   3cd7c:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3cd80:	2a00      	cmp	r2, #0
   3cd82:	f47f ac6c 	bne.w	3c65e <ull_conn_llcp+0x742>
			tx->next = conn->tx_head;
   3cd86:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   3cd8a:	e9c4 8875 	strd	r8, r8, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3cd8e:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
   3cd92:	e46f      	b.n	3c674 <ull_conn_llcp+0x758>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3cd94:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   3cd98:	2b00      	cmp	r3, #0
   3cd9a:	f43f a99e 	beq.w	3c0da <ull_conn_llcp+0x1be>
			conn->periph.llcp_type = LLCP_NONE;
   3cd9e:	f884 60e5 	strb.w	r6, [r4, #229]	; 0xe5
   3cda2:	f7ff b99e 	b.w	3c0e2 <ull_conn_llcp+0x1c6>
		LL_ASSERT(rx && rx->hdr.link);
   3cda6:	f241 2349 	movw	r3, #4681	; 0x1249
   3cdaa:	4a09      	ldr	r2, [pc, #36]	; (3cdd0 <ull_conn_llcp+0xeb4>)
   3cdac:	490b      	ldr	r1, [pc, #44]	; (3cddc <ull_conn_llcp+0xec0>)
   3cdae:	480a      	ldr	r0, [pc, #40]	; (3cdd8 <ull_conn_llcp+0xebc>)
   3cdb0:	f00d f994 	bl	4a0dc <printk>
   3cdb4:	4040      	eors	r0, r0
   3cdb6:	f380 8811 	msr	BASEPRI, r0
   3cdba:	f04f 0003 	mov.w	r0, #3
   3cdbe:	df02      	svc	2
   3cdc0:	6828      	ldr	r0, [r5, #0]
   3cdc2:	f7ff b9cc 	b.w	3c15e <ull_conn_llcp+0x242>
   3cdc6:	bf00      	nop
   3cdc8:	20005348 	.word	0x20005348
   3cdcc:	20000ae4 	.word	0x20000ae4
   3cdd0:	00053248 	.word	0x00053248
   3cdd4:	00052ee0 	.word	0x00052ee0
   3cdd8:	00052d50 	.word	0x00052d50
   3cddc:	00053290 	.word	0x00053290
   3cde0:	200052b4 	.word	0x200052b4
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   3cde4:	f003 0007 	and.w	r0, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   3cde8:	f8b4 e1c0 	ldrh.w	lr, [r4, #448]	; 0x1c0
		lll->max_rx_time = conn->llcp_length.rx_time;
   3cdec:	f8b4 11c4 	ldrh.w	r1, [r4, #452]	; 0x1c4
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   3cdf0:	f8a4 e05a 	strh.w	lr, [r4, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   3cdf4:	2804      	cmp	r0, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   3cdf6:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
		tx_octets = conn->llcp_length.tx_octets;
   3cdfa:	f8b4 81c2 	ldrh.w	r8, [r4, #450]	; 0x1c2
		uint16_t tx_time = conn->llcp_length.tx_time;
   3cdfe:	f8b4 71c6 	ldrh.w	r7, [r4, #454]	; 0x1c6
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   3ce02:	f000 82f4 	beq.w	3d3ee <ull_conn_llcp+0x14d2>
			conn->llcp_length.state =
   3ce06:	2206      	movs	r2, #6
   3ce08:	f362 0302 	bfi	r3, r2, #0, #3
   3ce0c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		rx = conn->llcp_rx;
   3ce10:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
		LL_ASSERT(rx && rx->hdr.link);
   3ce14:	f1b9 0f00 	cmp.w	r9, #0
   3ce18:	f000 81b7 	beq.w	3d18a <ull_conn_llcp+0x126e>
   3ce1c:	f8d9 0000 	ldr.w	r0, [r9]
   3ce20:	2800      	cmp	r0, #0
   3ce22:	f000 81b2 	beq.w	3d18a <ull_conn_llcp+0x126e>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   3ce26:	f899 301c 	ldrb.w	r3, [r9, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   3ce2a:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
   3ce2c:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
		conn->llcp_rx = rx->hdr.link->mem;
   3ce30:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   3ce34:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3ce38:	2203      	movs	r2, #3
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   3ce3a:	f889 301c 	strb.w	r3, [r9, #28]
		pdu_ctrl_rx->len =
   3ce3e:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3ce42:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
   3ce44:	f8a9 c006 	strh.w	ip, [r9, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   3ce48:	f8a9 e020 	strh.w	lr, [r9, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   3ce4c:	f8a9 1022 	strh.w	r1, [r9, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3ce50:	f889 2004 	strb.w	r2, [r9, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3ce54:	f889 301f 	strb.w	r3, [r9, #31]
		ll_rx_put(rx->hdr.link, rx);
   3ce58:	4649      	mov	r1, r9
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   3ce5a:	f8a9 8024 	strh.w	r8, [r9, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   3ce5e:	f8a9 7026 	strh.w	r7, [r9, #38]	; 0x26
		pdu_ctrl_rx->len =
   3ce62:	f889 a01d 	strb.w	sl, [r9, #29]
		ll_rx_put(rx->hdr.link, rx);
   3ce66:	f7fa fee7 	bl	37c38 <ll_rx_put>
		ll_rx_sched();
   3ce6a:	f7fa feef 	bl	37c4c <ll_rx_sched>
	break;
   3ce6e:	f7ff b882 	b.w	3bf76 <ull_conn_llcp+0x5a>
   3ce72:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3ce76:	2a00      	cmp	r2, #0
   3ce78:	f47f ad17 	bne.w	3c8aa <ull_conn_llcp+0x98e>
			tx->next = conn->tx_head;
   3ce7c:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   3ce7e:	e9c4 6675 	strd	r6, r6, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3ce82:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
   3ce86:	e518      	b.n	3c8ba <ull_conn_llcp+0x99e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3ce88:	48d7      	ldr	r0, [pc, #860]	; (3d1e8 <ull_conn_llcp+0x12cc>)
   3ce8a:	f7f6 ffdd 	bl	33e48 <mem_acquire>
	if (tx) {
   3ce8e:	4607      	mov	r7, r0
   3ce90:	2800      	cmp	r0, #0
   3ce92:	f43f ae77 	beq.w	3cb84 <ull_conn_llcp+0xc68>
		conn->llcp_feature.ack--;
   3ce96:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   3ce9a:	2209      	movs	r2, #9
		conn->llcp_feature.ack--;
   3ce9c:	3b01      	subs	r3, #1
   3ce9e:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   3cea2:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   3cea4:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3cea8:	7903      	ldrb	r3, [r0, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
   3ceaa:	2a00      	cmp	r2, #0
   3ceac:	bfac      	ite	ge
   3ceae:	2208      	movge	r2, #8
   3ceb0:	220e      	movlt	r2, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3ceb2:	f043 0303 	orr.w	r3, r3, #3
		pdu->llctrl.opcode = !conn->lll.role ?
   3ceb6:	71c2      	strb	r2, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   3ceb8:	2208      	movs	r2, #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3ceba:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   3cebc:	4649      	mov	r1, r9
   3cebe:	4410      	add	r0, r2
   3cec0:	f00f fa1f 	bl	4c302 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
   3cec4:	e9d4 234e 	ldrd	r2, r3, [r4, #312]	; 0x138
	sys_put_le16(val >> 16, &dst[2]);
   3cec8:	0c10      	lsrs	r0, r2, #16
   3ceca:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   3cecc:	ea4f 2c10 	mov.w	ip, r0, lsr #8
	dst[0] = val;
   3ced0:	733b      	strb	r3, [r7, #12]
	dst[1] = val >> 8;
   3ced2:	f887 c00b 	strb.w	ip, [r7, #11]
   3ced6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   3ceda:	72b8      	strb	r0, [r7, #10]
	dst[1] = val >> 8;
   3cedc:	f3c2 2c07 	ubfx	ip, r2, #8, #8
   3cee0:	0a08      	lsrs	r0, r1, #8
	dst[0] = val;
   3cee2:	723a      	strb	r2, [r7, #8]
	dst[1] = val >> 8;
   3cee4:	f887 c009 	strb.w	ip, [r7, #9]
	dst[0] = val;
   3cee8:	73b9      	strb	r1, [r7, #14]
	dst[1] = val >> 8;
   3ceea:	73f8      	strb	r0, [r7, #15]
   3ceec:	737b      	strb	r3, [r7, #13]
	    conn->tx_head &&
   3ceee:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3cef2:	2b00      	cmp	r3, #0
   3cef4:	f000 813b 	beq.w	3d16e <ull_conn_llcp+0x1252>
	    !conn->llcp_enc.pause_tx &&
   3cef8:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
   3cefc:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
	    conn->tx_head &&
   3cf00:	0789      	lsls	r1, r1, #30
   3cf02:	f100 8136 	bmi.w	3d172 <ull_conn_llcp+0x1256>
	    !conn->llcp_phy.pause_tx &&
   3cf06:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3cf0a:	07c8      	lsls	r0, r1, #31
   3cf0c:	f100 8131 	bmi.w	3d172 <ull_conn_llcp+0x1256>
		if (conn->tx_head == conn->tx_data) {
   3cf10:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3cf14:	428b      	cmp	r3, r1
   3cf16:	f000 84ed 	beq.w	3d8f4 <ull_conn_llcp+0x19d8>
		} else if (!conn->tx_ctrl) {
   3cf1a:	2a00      	cmp	r2, #0
   3cf1c:	f000 85a9 	beq.w	3da72 <ull_conn_llcp+0x1b56>
	tx->next = conn->tx_ctrl_last->next;
   3cf20:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3cf24:	681a      	ldr	r2, [r3, #0]
   3cf26:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   3cf28:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   3cf2a:	683b      	ldr	r3, [r7, #0]
   3cf2c:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3cf30:	2b00      	cmp	r3, #0
   3cf32:	f000 8365 	beq.w	3d600 <ull_conn_llcp+0x16e4>
		conn->procedure_expire = conn->procedure_reload;
   3cf36:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   3cf3a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	break;
   3cf3e:	f894 70f0 	ldrb.w	r7, [r4, #240]	; 0xf0
   3cf42:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3cf46:	f7fe bff4 	b.w	3bf32 <ull_conn_llcp+0x16>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   3cf4a:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   3cf4e:	463b      	mov	r3, r7
   3cf50:	4642      	mov	r2, r8
   3cf52:	f504 7181 	add.w	r1, r4, #258	; 0x102
   3cf56:	f204 1081 	addw	r0, r4, #385	; 0x181
   3cf5a:	f006 f8e3 	bl	43124 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   3cf5e:	4639      	mov	r1, r7
   3cf60:	2210      	movs	r2, #16
   3cf62:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   3cf66:	f00f f9c1 	bl	4c2ec <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   3cf6a:	2208      	movs	r2, #8
   3cf6c:	f104 0194 	add.w	r1, r4, #148	; 0x94
   3cf70:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   3cf74:	f00f f9ba 	bl	4c2ec <memcpy>
		lll->ccm_rx.direction = 0;
   3cf78:	f894 0093 	ldrb.w	r0, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   3cf7c:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
		lll->enc_rx = 1;
   3cf80:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   3cf84:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->enc_rx = 1;
   3cf88:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
   3cf8c:	f368 0000 	bfi	r0, r8, #0, #1
		lll->ccm_tx.direction = 1;
   3cf90:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
   3cf94:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
		lll->enc_rx = 1;
   3cf98:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   3cf9c:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   3cfa0:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
   3cfa4:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   3cfa8:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   3cfac:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   3cfb0:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   3cfb4:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
		lll->ccm_tx.counter = 0;
   3cfb8:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   3cfbc:	4651      	mov	r1, sl
		lll->ccm_tx.counter = 0;
   3cfbe:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
		lll->ccm_tx.direction = 1;
   3cfc2:	f884 20b4 	strb.w	r2, [r4, #180]	; 0xb4
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   3cfc6:	4620      	mov	r0, r4
   3cfc8:	f7fc fdf8 	bl	39bbc <start_enc_rsp_send>
	    conn->tx_head &&
   3cfcc:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3cfd0:	2b00      	cmp	r3, #0
   3cfd2:	f000 8086 	beq.w	3d0e2 <ull_conn_llcp+0x11c6>
	    !conn->llcp_enc.pause_tx &&
   3cfd6:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
   3cfda:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
	    conn->tx_head &&
   3cfde:	0788      	lsls	r0, r1, #30
   3cfe0:	f100 8081 	bmi.w	3d0e6 <ull_conn_llcp+0x11ca>
	    !conn->llcp_phy.pause_tx &&
   3cfe4:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3cfe8:	07c9      	lsls	r1, r1, #31
   3cfea:	d47c      	bmi.n	3d0e6 <ull_conn_llcp+0x11ca>
		if (conn->tx_head == conn->tx_data) {
   3cfec:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3cff0:	428b      	cmp	r3, r1
   3cff2:	f000 84af 	beq.w	3d954 <ull_conn_llcp+0x1a38>
		} else if (!conn->tx_ctrl) {
   3cff6:	2a00      	cmp	r2, #0
   3cff8:	f000 84fc 	beq.w	3d9f4 <ull_conn_llcp+0x1ad8>
	tx->next = conn->tx_ctrl_last->next;
   3cffc:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3d000:	681a      	ldr	r2, [r3, #0]
   3d002:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3d006:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   3d00a:	f8d9 3000 	ldr.w	r3, [r9]
   3d00e:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d012:	2b00      	cmp	r3, #0
   3d014:	f000 80b6 	beq.w	3d184 <ull_conn_llcp+0x1268>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3d018:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3d01c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3d020:	f043 0303 	orr.w	r3, r3, #3
   3d024:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
   3d028:	f7fe bf8a 	b.w	3bf40 <ull_conn_llcp+0x24>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   3d02c:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   3d030:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   3d034:	4291      	cmp	r1, r2
   3d036:	f000 80bc 	beq.w	3d1b2 <ull_conn_llcp+0x1296>
	switch (conn->llcp_length.state) {
   3d03a:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   3d03e:	f003 0107 	and.w	r1, r3, #7
   3d042:	2907      	cmp	r1, #7
   3d044:	d00c      	beq.n	3d060 <ull_conn_llcp+0x1144>
   3d046:	2001      	movs	r0, #1
   3d048:	4088      	lsls	r0, r1
   3d04a:	f010 0f4e 	tst.w	r0, #78	; 0x4e
   3d04e:	f47e af77 	bne.w	3bf40 <ull_conn_llcp+0x24>
   3d052:	f010 0f30 	tst.w	r0, #48	; 0x30
   3d056:	f040 83c6 	bne.w	3d7e6 <ull_conn_llcp+0x18ca>
   3d05a:	2900      	cmp	r1, #0
   3d05c:	f000 82f2 	beq.w	3d644 <ull_conn_llcp+0x1728>
		LL_ASSERT(0);
   3d060:	f241 03ea 	movw	r3, #4330	; 0x10ea
		LL_ASSERT(0);
   3d064:	4a61      	ldr	r2, [pc, #388]	; (3d1ec <ull_conn_llcp+0x12d0>)
   3d066:	4962      	ldr	r1, [pc, #392]	; (3d1f0 <ull_conn_llcp+0x12d4>)
   3d068:	e583      	b.n	3cb72 <ull_conn_llcp+0xc56>
   3d06a:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3d06e:	2a00      	cmp	r2, #0
   3d070:	f47f a9df 	bne.w	3c432 <ull_conn_llcp+0x516>
			tx->next = conn->tx_head;
   3d074:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   3d076:	e9c4 7775 	strd	r7, r7, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d07a:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
   3d07e:	f7ff b9e0 	b.w	3c442 <ull_conn_llcp+0x526>
			rx = ll_pdu_rx_alloc();
   3d082:	f7fa fe09 	bl	37c98 <ll_pdu_rx_alloc>
			if (!rx) {
   3d086:	4607      	mov	r7, r0
   3d088:	2800      	cmp	r0, #0
   3d08a:	f43e af57 	beq.w	3bf3c <ull_conn_llcp+0x20>
			rx->hdr.link->mem = conn->llcp_rx;
   3d08e:	6803      	ldr	r3, [r0, #0]
   3d090:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   3d094:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3d096:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3d09a:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
			conn->llcp_rx = rx;
   3d09e:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   3d0a2:	2b00      	cmp	r3, #0
   3d0a4:	bfa8      	it	ge
   3d0a6:	4611      	movge	r1, r2
   3d0a8:	f6bf a8ae 	bge.w	3c208 <ull_conn_llcp+0x2ec>
   3d0ac:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   3d0b0:	4611      	mov	r1, r2
   3d0b2:	2b00      	cmp	r3, #0
   3d0b4:	f43f a8a8 	beq.w	3c208 <ull_conn_llcp+0x2ec>
			conn->periph.llcp_type = LLCP_NONE;
   3d0b8:	f884 80e5 	strb.w	r8, [r4, #229]	; 0xe5
   3d0bc:	f7ff b8a8 	b.w	3c210 <ull_conn_llcp+0x2f4>
			conn->tx_data = conn->tx_data->next;
   3d0c0:	6819      	ldr	r1, [r3, #0]
   3d0c2:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d0c6:	2a00      	cmp	r2, #0
   3d0c8:	f47e afcd 	bne.w	3c066 <ull_conn_llcp+0x14a>
			tx->next = conn->tx_head->next;
   3d0cc:	681a      	ldr	r2, [r3, #0]
   3d0ce:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3d0d0:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   3d0d2:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3d0d4:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
	if (!tx->next) {
   3d0d8:	2b00      	cmp	r3, #0
   3d0da:	f47e afcf 	bne.w	3c07c <ull_conn_llcp+0x160>
   3d0de:	f7fe bfcb 	b.w	3c078 <ull_conn_llcp+0x15c>
   3d0e2:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3d0e6:	2a00      	cmp	r2, #0
   3d0e8:	d188      	bne.n	3cffc <ull_conn_llcp+0x10e0>
			tx->next = conn->tx_head;
   3d0ea:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3d0ee:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d0f2:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
   3d0f6:	e78c      	b.n	3d012 <ull_conn_llcp+0x10f6>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   3d0f8:	45f2      	cmp	sl, lr
   3d0fa:	f47f a8c0 	bne.w	3c27e <ull_conn_llcp+0x362>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3d0fe:	2301      	movs	r3, #1
   3d100:	713b      	strb	r3, [r7, #4]
			ll_rx_put(rx->hdr.link, rx);
   3d102:	4639      	mov	r1, r7
   3d104:	f7fa fd98 	bl	37c38 <ll_rx_put>
				rx = conn->llcp_rx;
   3d108:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
				LL_ASSERT(rx && rx->hdr.link);
   3d10c:	2f00      	cmp	r7, #0
   3d10e:	f000 84a0 	beq.w	3da52 <ull_conn_llcp+0x1b36>
   3d112:	6838      	ldr	r0, [r7, #0]
   3d114:	2800      	cmp	r0, #0
   3d116:	f000 849c 	beq.w	3da52 <ull_conn_llcp+0x1b36>
				conn->llcp_rx = rx->hdr.link->mem;
   3d11a:	6843      	ldr	r3, [r0, #4]
   3d11c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3d120:	2301      	movs	r3, #1
   3d122:	713b      	strb	r3, [r7, #4]
			ll_rx_put(rx->hdr.link, rx);
   3d124:	4639      	mov	r1, r7
   3d126:	f7fa fd87 	bl	37c38 <ll_rx_put>
			ll_rx_sched();
   3d12a:	f7fa fd8f 	bl	37c4c <ll_rx_sched>
			return;
   3d12e:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   3d132:	f7fe bf05 	b.w	3bf40 <ull_conn_llcp+0x24>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   3d136:	4575      	cmp	r5, lr
   3d138:	f47e affc 	bne.w	3c134 <ull_conn_llcp+0x218>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3d13c:	2301      	movs	r3, #1
   3d13e:	710b      	strb	r3, [r1, #4]
			ll_rx_put(rx->hdr.link, rx);
   3d140:	f7fa fd7a 	bl	37c38 <ll_rx_put>
				rx = conn->llcp_rx;
   3d144:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
				LL_ASSERT(rx && rx->hdr.link);
   3d148:	2d00      	cmp	r5, #0
   3d14a:	f000 8414 	beq.w	3d976 <ull_conn_llcp+0x1a5a>
   3d14e:	6828      	ldr	r0, [r5, #0]
   3d150:	2800      	cmp	r0, #0
   3d152:	f000 8410 	beq.w	3d976 <ull_conn_llcp+0x1a5a>
				conn->llcp_rx = rx->hdr.link->mem;
   3d156:	6843      	ldr	r3, [r0, #4]
   3d158:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   3d15c:	2301      	movs	r3, #1
   3d15e:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   3d160:	4629      	mov	r1, r5
   3d162:	f7fa fd69 	bl	37c38 <ll_rx_put>
			ll_rx_sched();
   3d166:	f7fa fd71 	bl	37c4c <ll_rx_sched>
			return;
   3d16a:	f7fe beec 	b.w	3bf46 <ull_conn_llcp+0x2a>
   3d16e:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3d172:	2a00      	cmp	r2, #0
   3d174:	f47f aed4 	bne.w	3cf20 <ull_conn_llcp+0x1004>
			tx->next = conn->tx_head;
   3d178:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   3d17a:	e9c4 7775 	strd	r7, r7, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d17e:	f8c4 71dc 	str.w	r7, [r4, #476]	; 0x1dc
   3d182:	e6d5      	b.n	3cf30 <ull_conn_llcp+0x1014>
		conn->tx_data_last = tx;
   3d184:	f8c4 91e4 	str.w	r9, [r4, #484]	; 0x1e4
   3d188:	e746      	b.n	3d018 <ull_conn_llcp+0x10fc>
		LL_ASSERT(rx && rx->hdr.link);
   3d18a:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   3d18e:	4a17      	ldr	r2, [pc, #92]	; (3d1ec <ull_conn_llcp+0x12d0>)
   3d190:	4918      	ldr	r1, [pc, #96]	; (3d1f4 <ull_conn_llcp+0x12d8>)
   3d192:	4819      	ldr	r0, [pc, #100]	; (3d1f8 <ull_conn_llcp+0x12dc>)
   3d194:	f00c ffa2 	bl	4a0dc <printk>
   3d198:	4040      	eors	r0, r0
   3d19a:	f380 8811 	msr	BASEPRI, r0
   3d19e:	f04f 0003 	mov.w	r0, #3
   3d1a2:	df02      	svc	2
   3d1a4:	f8d9 0000 	ldr.w	r0, [r9]
   3d1a8:	f8b4 e05a 	ldrh.w	lr, [r4, #90]	; 0x5a
   3d1ac:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   3d1b0:	e639      	b.n	3ce26 <ull_conn_llcp+0xf0a>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   3d1b2:	f894 e1cc 	ldrb.w	lr, [r4, #460]	; 0x1cc
   3d1b6:	f894 01cd 	ldrb.w	r0, [r4, #461]	; 0x1cd
   3d1ba:	4570      	cmp	r0, lr
   3d1bc:	f43e aec0 	beq.w	3bf40 <ull_conn_llcp+0x24>
	switch (conn->llcp_phy.state) {
   3d1c0:	f894 01ce 	ldrb.w	r0, [r4, #462]	; 0x1ce
   3d1c4:	f000 0c03 	and.w	ip, r0, #3
   3d1c8:	f1bc 0f03 	cmp.w	ip, #3
   3d1cc:	f200 85a3 	bhi.w	3dd16 <ull_conn_llcp+0x1dfa>
   3d1d0:	f20f 0804 	addw	r8, pc, #4
   3d1d4:	f858 f02c 	ldr.w	pc, [r8, ip, lsl #2]
   3d1d8:	0003d1fd 	.word	0x0003d1fd
   3d1dc:	0003bf33 	.word	0x0003bf33
   3d1e0:	0003bf33 	.word	0x0003bf33
   3d1e4:	0003d267 	.word	0x0003d267
   3d1e8:	20005348 	.word	0x20005348
   3d1ec:	00053248 	.word	0x00053248
   3d1f0:	00052dd8 	.word	0x00052dd8
   3d1f4:	00053290 	.word	0x00053290
   3d1f8:	00052d50 	.word	0x00052d50
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d1fc:	48df      	ldr	r0, [pc, #892]	; (3d57c <ull_conn_llcp+0x1660>)
   3d1fe:	f7f6 fe23 	bl	33e48 <mem_acquire>
		if (!tx) {
   3d202:	4601      	mov	r1, r0
   3d204:	2800      	cmp	r0, #0
   3d206:	f43f acbd 	beq.w	3cb84 <ull_conn_llcp+0xc68>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3d20a:	f894 71ce 	ldrb.w	r7, [r4, #462]	; 0x1ce
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3d20e:	f894 01cf 	ldrb.w	r0, [r4, #463]	; 0x1cf
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3d212:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3d216:	f894 e060 	ldrb.w	lr, [r4, #96]	; 0x60
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3d21a:	2301      	movs	r3, #1
   3d21c:	f363 0701 	bfi	r7, r3, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3d220:	b2fb      	uxtb	r3, r7
   3d222:	f3c3 0c82 	ubfx	ip, r3, #2, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3d226:	f3c0 0040 	ubfx	r0, r0, #1, #1
		conn->phy_pref_rx = conn->llcp_phy.rx;
   3d22a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3d22e:	f360 0ec3 	bfi	lr, r0, #3, #1
		conn->phy_pref_tx = conn->llcp_phy.tx;
   3d232:	f36c 0202 	bfi	r2, ip, #0, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d236:	7908      	ldrb	r0, [r1, #4]
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   3d238:	f884 71ce 	strb.w	r7, [r4, #462]	; 0x1ce
		conn->phy_pref_rx = conn->llcp_phy.rx;
   3d23c:	f363 02c5 	bfi	r2, r3, #3, #3
   3d240:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d244:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   3d248:	2703      	movs	r7, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   3d24a:	2216      	movs	r2, #22
		conn->lll.phy_flags = conn->llcp_phy.flags;
   3d24c:	f884 e060 	strb.w	lr, [r4, #96]	; 0x60
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d250:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   3d252:	71ca      	strb	r2, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   3d254:	f881 c008 	strb.w	ip, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   3d258:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->len =
   3d25a:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
   3d25c:	2200      	movs	r2, #0
   3d25e:	4620      	mov	r0, r4
   3d260:	f7fc fa1e 	bl	396a0 <ctrl_tx_pause_enqueue>
   3d264:	e667      	b.n	3cf36 <ull_conn_llcp+0x101a>
		if (conn->llcp_phy.tx & PHY_2M) {
   3d266:	f3c0 0782 	ubfx	r7, r0, #2, #3
   3d26a:	f017 0f02 	tst.w	r7, #2
		conn->llcp_phy.ack = conn->llcp_phy.req;
   3d26e:	f884 e1cd 	strb.w	lr, [r4, #461]	; 0x1cd
		if (conn->llcp_phy.tx & PHY_2M) {
   3d272:	f000 849a 	beq.w	3dbaa <ull_conn_llcp+0x1c8e>
			conn->llcp_phy.tx = PHY_2M;
   3d276:	2702      	movs	r7, #2
   3d278:	f367 0084 	bfi	r0, r7, #2, #3
   3d27c:	f884 01ce 	strb.w	r0, [r4, #462]	; 0x1ce
		if (conn->llcp_phy.rx & PHY_2M) {
   3d280:	f894 01ce 	ldrb.w	r0, [r4, #462]	; 0x1ce
   3d284:	0947      	lsrs	r7, r0, #5
   3d286:	f017 0f02 	tst.w	r7, #2
   3d28a:	f000 8483 	beq.w	3db94 <ull_conn_llcp+0x1c78>
			conn->llcp_phy.rx = PHY_2M;
   3d28e:	2702      	movs	r7, #2
   3d290:	f367 1047 	bfi	r0, r7, #5, #3
   3d294:	f884 01ce 	strb.w	r0, [r4, #462]	; 0x1ce
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   3d298:	f894 01ce 	ldrb.w	r0, [r4, #462]	; 0x1ce
   3d29c:	f894 8060 	ldrb.w	r8, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   3d2a0:	f894 e061 	ldrb.w	lr, [r4, #97]	; 0x61
   3d2a4:	f894 70f4 	ldrb.w	r7, [r4, #244]	; 0xf4
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   3d2a8:	f3c0 0c82 	ubfx	ip, r0, #2, #3
   3d2ac:	f008 0807 	and.w	r8, r8, #7
			conn->llcp.phy_upd_ind.tx = 0U;
   3d2b0:	45e0      	cmp	r8, ip
   3d2b2:	bf08      	it	eq
   3d2b4:	f04f 0c00 	moveq.w	ip, #0
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   3d2b8:	f00e 0e07 	and.w	lr, lr, #7
   3d2bc:	0940      	lsrs	r0, r0, #5
   3d2be:	f36c 0784 	bfi	r7, ip, #2, #3
			conn->llcp.phy_upd_ind.rx = 0U;
   3d2c2:	4586      	cmp	lr, r0
   3d2c4:	bf08      	it	eq
   3d2c6:	2000      	moveq	r0, #0
   3d2c8:	f360 1747 	bfi	r7, r0, #5, #3
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3d2cc:	f894 c1cf 	ldrb.w	ip, [r4, #463]	; 0x1cf
		conn->llcp.phy_upd_ind.initiate = 1U;
   3d2d0:	b2f8      	uxtb	r0, r7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3d2d2:	f040 0001 	orr.w	r0, r0, #1
   3d2d6:	f3cc 0780 	ubfx	r7, ip, #2, #1
   3d2da:	f367 0041 	bfi	r0, r7, #1, #1
		conn->llcp_ack -= 2U;
   3d2de:	3b02      	subs	r3, #2
		conn->llcp_type = LLCP_PHY_UPD;
   3d2e0:	2706      	movs	r7, #6
		conn->llcp_ack -= 2U;
   3d2e2:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   3d2e6:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
		conn->llcp_type = LLCP_PHY_UPD;
   3d2ea:	f884 70f2 	strb.w	r7, [r4, #242]	; 0xf2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   3d2ee:	f7fe be39 	b.w	3bf64 <ull_conn_llcp+0x48>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   3d2f2:	4651      	mov	r1, sl
   3d2f4:	4620      	mov	r0, r4
   3d2f6:	f7fc fc61 	bl	39bbc <start_enc_rsp_send>
	    conn->tx_head &&
   3d2fa:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	if (
   3d2fe:	2b00      	cmp	r3, #0
   3d300:	d06a      	beq.n	3d3d8 <ull_conn_llcp+0x14bc>
	    !conn->llcp_enc.pause_tx &&
   3d302:	f894 1176 	ldrb.w	r1, [r4, #374]	; 0x176
   3d306:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
	    conn->tx_head &&
   3d30a:	078f      	lsls	r7, r1, #30
   3d30c:	d466      	bmi.n	3d3dc <ull_conn_llcp+0x14c0>
	    !conn->llcp_phy.pause_tx &&
   3d30e:	f894 11cf 	ldrb.w	r1, [r4, #463]	; 0x1cf
   3d312:	07c8      	lsls	r0, r1, #31
   3d314:	d462      	bmi.n	3d3dc <ull_conn_llcp+0x14c0>
		if (conn->tx_head == conn->tx_data) {
   3d316:	f8d4 11e0 	ldr.w	r1, [r4, #480]	; 0x1e0
   3d31a:	428b      	cmp	r3, r1
   3d31c:	f000 830c 	beq.w	3d938 <ull_conn_llcp+0x1a1c>
		} else if (!conn->tx_ctrl) {
   3d320:	2a00      	cmp	r2, #0
   3d322:	f000 8338 	beq.w	3d996 <ull_conn_llcp+0x1a7a>
	tx->next = conn->tx_ctrl_last->next;
   3d326:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3d32a:	681a      	ldr	r2, [r3, #0]
   3d32c:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   3d330:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   3d334:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d338:	f8d9 3000 	ldr.w	r3, [r9]
   3d33c:	e669      	b.n	3d012 <ull_conn_llcp+0x10f6>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   3d33e:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   3d342:	463b      	mov	r3, r7
   3d344:	4642      	mov	r2, r8
   3d346:	f504 7181 	add.w	r1, r4, #258	; 0x102
   3d34a:	f204 1081 	addw	r0, r4, #385	; 0x181
   3d34e:	f005 fee9 	bl	43124 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   3d352:	4639      	mov	r1, r7
   3d354:	2210      	movs	r2, #16
   3d356:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   3d35a:	f00e ffc7 	bl	4c2ec <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   3d35e:	2208      	movs	r2, #8
   3d360:	f104 0194 	add.w	r1, r4, #148	; 0x94
   3d364:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   3d368:	f00e ffc0 	bl	4c2ec <memcpy>
			lll->ccm_rx.direction = 1U;
   3d36c:	f894 2093 	ldrb.w	r2, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   3d370:	f894 10b4 	ldrb.w	r1, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   3d374:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   3d378:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   3d37c:	f042 0201 	orr.w	r2, r2, #1
			lll->ccm_tx.direction = 0U;
   3d380:	f368 0100 	bfi	r1, r8, #0, #1
			lll->enc_rx = 1U;
   3d384:	f043 0308 	orr.w	r3, r3, #8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3d388:	2001      	movs	r0, #1
			lll->ccm_rx.direction = 1U;
   3d38a:	f884 2093 	strb.w	r2, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   3d38e:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   3d392:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   3d396:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   3d39a:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
   3d39e:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   3d3a2:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   3d3a6:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   3d3aa:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   3d3ae:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			lll->ccm_tx.counter = 0U;
   3d3b2:	f8c4 80ac 	str.w	r8, [r4, #172]	; 0xac
   3d3b6:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d3ba:	f899 2004 	ldrb.w	r2, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   3d3be:	f889 0005 	strb.w	r0, [r9, #5]
	    conn->tx_head &&
   3d3c2:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d3c6:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   3d3ca:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d3cc:	f889 2004 	strb.w	r2, [r9, #4]
			pdu_ctrl_tx->llctrl.opcode =
   3d3d0:	f889 1007 	strb.w	r1, [r9, #7]
	if (
   3d3d4:	2b00      	cmp	r3, #0
   3d3d6:	d194      	bne.n	3d302 <ull_conn_llcp+0x13e6>
   3d3d8:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3d3dc:	2a00      	cmp	r2, #0
   3d3de:	d1a2      	bne.n	3d326 <ull_conn_llcp+0x140a>
			tx->next = conn->tx_head;
   3d3e0:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3d3e4:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d3e8:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
   3d3ec:	e7a4      	b.n	3d338 <ull_conn_llcp+0x141c>
			if (!conn->llcp_length.cache.tx_octets) {
   3d3ee:	f8b4 01c8 	ldrh.w	r0, [r4, #456]	; 0x1c8
   3d3f2:	2800      	cmp	r0, #0
   3d3f4:	f040 8118 	bne.w	3d628 <ull_conn_llcp+0x170c>
				conn->llcp_length.ack = conn->llcp_length.req;
   3d3f8:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
				conn->procedure_expire = 0U;
   3d3fc:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
   3d400:	e506      	b.n	3ce10 <ull_conn_llcp+0xef4>
		if (!conn->tx_ctrl) {
   3d402:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d406:	2a00      	cmp	r2, #0
   3d408:	f47f a997 	bne.w	3c73a <ull_conn_llcp+0x81e>
			tx->next = conn->tx_head;
   3d40c:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   3d410:	e9c4 9975 	strd	r9, r9, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d414:	f8c4 91dc 	str.w	r9, [r4, #476]	; 0x1dc
   3d418:	f7ff b998 	b.w	3c74c <ull_conn_llcp+0x830>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d41c:	4857      	ldr	r0, [pc, #348]	; (3d57c <ull_conn_llcp+0x1660>)
   3d41e:	f7f6 fd13 	bl	33e48 <mem_acquire>
		if (!tx) {
   3d422:	2800      	cmp	r0, #0
   3d424:	f43e ada7 	beq.w	3bf76 <ull_conn_llcp+0x5a>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   3d428:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   3d42c:	f8b4 11c2 	ldrh.w	r1, [r4, #450]	; 0x1c2
		conn->default_tx_time = conn->llcp_length.tx_time;
   3d430:	f8b4 21c6 	ldrh.w	r2, [r4, #454]	; 0x1c6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   3d434:	f8a4 10d2 	strh.w	r1, [r4, #210]	; 0xd2
		conn->default_tx_time = conn->llcp_length.tx_time;
   3d438:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   3d43c:	f368 0302 	bfi	r3, r8, #0, #3
		pdu_ctrl_tx->len =
   3d440:	f04f 0c09 	mov.w	ip, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d444:	7902      	ldrb	r2, [r0, #4]
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   3d446:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		pdu_ctrl_tx->len =
   3d44a:	f880 c005 	strb.w	ip, [r0, #5]
	    conn->tx_head &&
   3d44e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   3d452:	7247      	strb	r7, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d454:	f042 0203 	orr.w	r2, r2, #3
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   3d458:	f047 0c1b 	orr.w	ip, r7, #27
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   3d45c:	f04f 0e14 	mov.w	lr, #20
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d460:	7102      	strb	r2, [r0, #4]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   3d462:	f047 0248 	orr.w	r2, r7, #72	; 0x48
   3d466:	ea47 0708 	orr.w	r7, r7, r8
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   3d46a:	8181      	strh	r1, [r0, #12]
   3d46c:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   3d470:	f880 e007 	strb.w	lr, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   3d474:	f880 c008 	strb.w	ip, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   3d478:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   3d47a:	7382      	strb	r2, [r0, #14]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   3d47c:	72c7      	strb	r7, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   3d47e:	73c7      	strb	r7, [r0, #15]
	if (
   3d480:	2b00      	cmp	r3, #0
   3d482:	f000 80c8 	beq.w	3d616 <ull_conn_llcp+0x16fa>
	    !conn->llcp_enc.pause_tx &&
   3d486:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3d48a:	0792      	lsls	r2, r2, #30
   3d48c:	f100 80c3 	bmi.w	3d616 <ull_conn_llcp+0x16fa>
	    !conn->llcp_phy.pause_tx &&
   3d490:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3d494:	07d7      	lsls	r7, r2, #31
   3d496:	f100 80be 	bmi.w	3d616 <ull_conn_llcp+0x16fa>
		if (conn->tx_head == conn->tx_data) {
   3d49a:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3d49e:	4293      	cmp	r3, r2
   3d4a0:	f000 83d7 	beq.w	3dc52 <ull_conn_llcp+0x1d36>
		} else if (!conn->tx_ctrl) {
   3d4a4:	2900      	cmp	r1, #0
   3d4a6:	f000 83cc 	beq.w	3dc42 <ull_conn_llcp+0x1d26>
	tx->next = conn->tx_ctrl_last->next;
   3d4aa:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3d4ae:	681a      	ldr	r2, [r3, #0]
   3d4b0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3d4b2:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   3d4b4:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d4b8:	6803      	ldr	r3, [r0, #0]
   3d4ba:	2b00      	cmp	r3, #0
   3d4bc:	f000 81f7 	beq.w	3d8ae <ull_conn_llcp+0x1992>
		conn->procedure_expire = conn->procedure_reload;
   3d4c0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   3d4c4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	break;
   3d4c8:	f7fe bd55 	b.w	3bf76 <ull_conn_llcp+0x5a>
		LL_ASSERT(0);
   3d4cc:	f640 63a1 	movw	r3, #3745	; 0xea1
   3d4d0:	e5c8      	b.n	3d064 <ull_conn_llcp+0x1148>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d4d2:	482a      	ldr	r0, [pc, #168]	; (3d57c <ull_conn_llcp+0x1660>)
   3d4d4:	f7f6 fcb8 	bl	33e48 <mem_acquire>
		if (tx) {
   3d4d8:	2800      	cmp	r0, #0
   3d4da:	f43f ab53 	beq.w	3cb84 <ull_conn_llcp+0xc68>
			conn->llcp_version.ack--;
   3d4de:	f894 2149 	ldrb.w	r2, [r4, #329]	; 0x149
			conn->llcp_version.tx = 1U;
   3d4e2:	f894 314a 	ldrb.w	r3, [r4, #330]	; 0x14a
			conn->llcp_version.ack--;
   3d4e6:	3a01      	subs	r2, #1
   3d4e8:	f884 2149 	strb.w	r2, [r4, #329]	; 0x149
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3d4ec:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
   3d4ee:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
   3d4f2:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
   3d4f4:	f884 314a 	strb.w	r3, [r4, #330]	; 0x14a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3d4f8:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
   3d4fc:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   3d4fe:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   3d502:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.opcode =
   3d504:	210c      	movs	r1, #12
			pdu->llctrl.version_ind.company_id = cid;
   3d506:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
   3d50a:	71c1      	strb	r1, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   3d50c:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   3d50e:	7242      	strb	r2, [r0, #9]
   3d510:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
   3d512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.version_ind.company_id = cid;
   3d516:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   3d518:	72c2      	strb	r2, [r0, #11]
   3d51a:	7302      	strb	r2, [r0, #12]
	if (
   3d51c:	2b00      	cmp	r3, #0
   3d51e:	f000 80bf 	beq.w	3d6a0 <ull_conn_llcp+0x1784>
	    !conn->llcp_enc.pause_tx &&
   3d522:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
	    conn->tx_head &&
   3d526:	0791      	lsls	r1, r2, #30
   3d528:	f100 80ba 	bmi.w	3d6a0 <ull_conn_llcp+0x1784>
	    !conn->llcp_phy.pause_tx &&
   3d52c:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
   3d530:	07d2      	lsls	r2, r2, #31
   3d532:	f100 80b5 	bmi.w	3d6a0 <ull_conn_llcp+0x1784>
		if (conn->tx_head == conn->tx_data) {
   3d536:	f8d4 21e0 	ldr.w	r2, [r4, #480]	; 0x1e0
   3d53a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   3d53c:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
		if (conn->tx_head == conn->tx_data) {
   3d540:	f000 8393 	beq.w	3dc6a <ull_conn_llcp+0x1d4e>
		} else if (!conn->tx_ctrl) {
   3d544:	2a00      	cmp	r2, #0
   3d546:	f000 833b 	beq.w	3dbc0 <ull_conn_llcp+0x1ca4>
	tx->next = conn->tx_ctrl_last->next;
   3d54a:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
   3d54e:	681a      	ldr	r2, [r3, #0]
   3d550:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   3d552:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   3d554:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
	if (!tx->next) {
   3d558:	6803      	ldr	r3, [r0, #0]
   3d55a:	2b00      	cmp	r3, #0
   3d55c:	f47f aceb 	bne.w	3cf36 <ull_conn_llcp+0x101a>
		conn->tx_data_last = tx;
   3d560:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
		conn->procedure_expire = conn->procedure_reload;
   3d564:	e4e7      	b.n	3cf36 <ull_conn_llcp+0x101a>
		if (!conn->tx_ctrl) {
   3d566:	2900      	cmp	r1, #0
   3d568:	f47f a956 	bne.w	3c818 <ull_conn_llcp+0x8fc>
			tx->next = conn->tx_head;
   3d56c:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   3d570:	e9c4 8875 	strd	r8, r8, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d574:	f8c4 81dc 	str.w	r8, [r4, #476]	; 0x1dc
   3d578:	f7ff b957 	b.w	3c82a <ull_conn_llcp+0x90e>
   3d57c:	20005348 	.word	0x20005348
		if (!conn->tx_ctrl) {
   3d580:	2a00      	cmp	r2, #0
   3d582:	f47f a9f4 	bne.w	3c96e <ull_conn_llcp+0xa52>
			tx->next = conn->tx_head;
   3d586:	6031      	str	r1, [r6, #0]
				conn->tx_ctrl = tx;
   3d588:	e9c4 6675 	strd	r6, r6, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d58c:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
   3d590:	f7ff b9f4 	b.w	3c97c <ull_conn_llcp+0xa60>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3d594:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   3d596:	f889 8008 	strb.w	r8, [r9, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   3d59a:	f889 3007 	strb.w	r3, [r9, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   3d59e:	2702      	movs	r7, #2
   3d5a0:	f7ff b8ad 	b.w	3c6fe <ull_conn_llcp+0x7e2>
		conn->tx_data_last = tx;
   3d5a4:	f8c4 71e4 	str.w	r7, [r4, #484]	; 0x1e4
   3d5a8:	f7fe bf4e 	b.w	3c448 <ull_conn_llcp+0x52c>
	switch (conn->llcp_conn_param.state) {
   3d5ac:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3d5b0:	f003 030f 	and.w	r3, r3, #15
   3d5b4:	2b08      	cmp	r3, #8
   3d5b6:	f200 83aa 	bhi.w	3dd0e <ull_conn_llcp+0x1df2>
   3d5ba:	a001      	add	r0, pc, #4	; (adr r0, 3d5c0 <ull_conn_llcp+0x16a4>)
   3d5bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   3d5c0:	0003cac7 	.word	0x0003cac7
   3d5c4:	0003cc6d 	.word	0x0003cc6d
   3d5c8:	0003cc21 	.word	0x0003cc21
   3d5cc:	0003bf41 	.word	0x0003bf41
   3d5d0:	0003bf41 	.word	0x0003bf41
   3d5d4:	0003bf41 	.word	0x0003bf41
   3d5d8:	0003bf41 	.word	0x0003bf41
   3d5dc:	0003bf41 	.word	0x0003bf41
   3d5e0:	0003cbed 	.word	0x0003cbed
			conn->tx_data = conn->tx_data->next;
   3d5e4:	681a      	ldr	r2, [r3, #0]
   3d5e6:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d5ea:	2f00      	cmp	r7, #0
   3d5ec:	f47e aec3 	bne.w	3c376 <ull_conn_llcp+0x45a>
			tx->next = conn->tx_head->next;
   3d5f0:	681a      	ldr	r2, [r3, #0]
   3d5f2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3d5f4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   3d5f6:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   3d5f8:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   3d5fc:	f7fe bec3 	b.w	3c386 <ull_conn_llcp+0x46a>
		conn->tx_data_last = tx;
   3d600:	f8c4 71e4 	str.w	r7, [r4, #484]	; 0x1e4
		conn->procedure_expire = conn->procedure_reload;
   3d604:	e497      	b.n	3cf36 <ull_conn_llcp+0x101a>
	    ((pdu_data_tx->llctrl.opcode !=
   3d606:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d608:	2a03      	cmp	r2, #3
   3d60a:	f43f ad5f 	beq.w	3d0cc <ull_conn_llcp+0x11b0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d60e:	2a0a      	cmp	r2, #10
   3d610:	f47e ad23 	bne.w	3c05a <ull_conn_llcp+0x13e>
   3d614:	e55a      	b.n	3d0cc <ull_conn_llcp+0x11b0>
		if (!conn->tx_ctrl) {
   3d616:	2900      	cmp	r1, #0
   3d618:	f47f af47 	bne.w	3d4aa <ull_conn_llcp+0x158e>
			tx->next = conn->tx_head;
   3d61c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3d61e:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d622:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3d626:	e747      	b.n	3d4b8 <ull_conn_llcp+0x159c>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3d628:	f36c 0302 	bfi	r3, ip, #0, #3
				conn->llcp_length.tx_time =
   3d62c:	f8b4 21ca 	ldrh.w	r2, [r4, #458]	; 0x1ca
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3d630:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_length.tx_octets =
   3d634:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
				conn->llcp_length.cache.tx_octets = 0;
   3d638:	f8a4 c1c8 	strh.w	ip, [r4, #456]	; 0x1c8
				conn->llcp_length.tx_time =
   3d63c:	f8a4 21c6 	strh.w	r2, [r4, #454]	; 0x1c6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3d640:	f7ff bbe6 	b.w	3ce10 <ull_conn_llcp+0xef4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3d644:	48d8      	ldr	r0, [pc, #864]	; (3d9a8 <ull_conn_llcp+0x1a8c>)
   3d646:	f7f6 fbff 	bl	33e48 <mem_acquire>
		if (!tx) {
   3d64a:	2800      	cmp	r0, #0
   3d64c:	f43f aa9a 	beq.w	3cb84 <ull_conn_llcp+0xc68>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   3d650:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   3d654:	f8b4 71c2 	ldrh.w	r7, [r4, #450]	; 0x1c2
		conn->default_tx_time = conn->llcp_length.tx_time;
   3d658:	f8b4 21c6 	ldrh.w	r2, [r4, #454]	; 0x1c6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   3d65c:	f8a4 70d2 	strh.w	r7, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   3d660:	2101      	movs	r1, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
   3d662:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   3d666:	f361 0302 	bfi	r3, r1, #0, #3
		pdu_ctrl_tx->len =
   3d66a:	2209      	movs	r2, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   3d66c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		pdu_ctrl_tx->len =
   3d670:	7142      	strb	r2, [r0, #5]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d672:	7902      	ldrb	r2, [r0, #4]
	    conn->tx_head &&
   3d674:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   3d678:	8187      	strh	r7, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d67a:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   3d67e:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   3d682:	72c1      	strb	r1, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   3d684:	73c1      	strb	r1, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   3d686:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3d688:	7102      	strb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   3d68a:	211b      	movs	r1, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   3d68c:	2248      	movs	r2, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   3d68e:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   3d692:	7247      	strb	r7, [r0, #9]
   3d694:	7201      	strb	r1, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   3d696:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   3d698:	7382      	strb	r2, [r0, #14]
	if (
   3d69a:	2b00      	cmp	r3, #0
   3d69c:	f47f af41 	bne.w	3d522 <ull_conn_llcp+0x1606>
		if (!conn->tx_ctrl) {
   3d6a0:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3d6a4:	2a00      	cmp	r2, #0
   3d6a6:	f47f af50 	bne.w	3d54a <ull_conn_llcp+0x162e>
			tx->next = conn->tx_head;
   3d6aa:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   3d6ac:	e9c4 0075 	strd	r0, r0, [r4, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3d6b0:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
   3d6b4:	e750      	b.n	3d558 <ull_conn_llcp+0x163c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d6b6:	791a      	ldrb	r2, [r3, #4]
   3d6b8:	f002 0203 	and.w	r2, r2, #3
   3d6bc:	2a03      	cmp	r2, #3
   3d6be:	f000 8111 	beq.w	3d8e4 <ull_conn_llcp+0x19c8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d6c2:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d6c6:	f7fe be56 	b.w	3c376 <ull_conn_llcp+0x45a>
							 lll->latency +
   3d6ca:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   3d6cc:	3306      	adds	r3, #6
   3d6ce:	443b      	add	r3, r7
			conn->llcp.phy_upd_ind.instant = event_counter +
   3d6d0:	f8a4 30f6 	strh.w	r3, [r4, #246]	; 0xf6
			(void)ll_pdu_rx_alloc();
   3d6d4:	f7fa fae0 	bl	37c98 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   3d6d8:	f8da 3000 	ldr.w	r3, [sl]
   3d6dc:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   3d6e0:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   3d6e2:	f8c4 a114 	str.w	sl, [r4, #276]	; 0x114
				rx = ll_pdu_rx_alloc();
   3d6e6:	f7fa fad7 	bl	37c98 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   3d6ea:	6803      	ldr	r3, [r0, #0]
   3d6ec:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   3d6f0:	605a      	str	r2, [r3, #4]
				conn->llcp_rx = rx;
   3d6f2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   3d6f6:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   3d6fa:	f3c3 0982 	ubfx	r9, r3, #2, #3
   3d6fe:	f8b4 10f6 	ldrh.w	r1, [r4, #246]	; 0xf6
   3d702:	095b      	lsrs	r3, r3, #5
   3d704:	f7ff b85d 	b.w	3c7c2 <ull_conn_llcp+0x8a6>
							 lll->latency +
   3d708:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   3d70a:	3306      	adds	r3, #6
   3d70c:	441d      	add	r5, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   3d70e:	f8a4 50f6 	strh.w	r5, [r4, #246]	; 0xf6
			(void)ll_pdu_rx_alloc();
   3d712:	f7fa fac1 	bl	37c98 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   3d716:	f8d8 3000 	ldr.w	r3, [r8]
   3d71a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   3d71e:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   3d720:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
				rx = ll_pdu_rx_alloc();
   3d724:	f7fa fab8 	bl	37c98 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   3d728:	6803      	ldr	r3, [r0, #0]
   3d72a:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   3d72e:	605a      	str	r2, [r3, #4]
				conn->llcp_rx = rx;
   3d730:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   3d734:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   3d738:	f3c3 0782 	ubfx	r7, r3, #2, #3
   3d73c:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
   3d740:	095b      	lsrs	r3, r3, #5
   3d742:	f7ff b8f0 	b.w	3c926 <ull_conn_llcp+0xa0a>
		conn->tx_data_last = tx;
   3d746:	f8c4 91e4 	str.w	r9, [r4, #484]	; 0x1e4
   3d74a:	f7ff b804 	b.w	3c756 <ull_conn_llcp+0x83a>
				(void)ll_pdu_rx_alloc();
   3d74e:	f7fa faa3 	bl	37c98 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   3d752:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				upd->status = 0U;
   3d754:	f88a 901c 	strb.w	r9, [sl, #28]
				upd->tx = lll->phy_tx;
   3d758:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				rx->hdr.handle = lll->handle;
   3d75c:	f8aa 2006 	strh.w	r2, [sl, #6]
				upd->tx = lll->phy_tx;
   3d760:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3d764:	f88a 301d 	strb.w	r3, [sl, #29]
				upd->rx = lll->phy_rx;
   3d768:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
				ll_rx_put(rx->hdr.link, rx);
   3d76c:	f8da 0000 	ldr.w	r0, [sl]
				upd->rx = lll->phy_rx;
   3d770:	f3c3 0302 	ubfx	r3, r3, #0, #3
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3d774:	221c      	movs	r2, #28
				upd->rx = lll->phy_rx;
   3d776:	f88a 301e 	strb.w	r3, [sl, #30]
				ll_rx_put(rx->hdr.link, rx);
   3d77a:	4651      	mov	r1, sl
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3d77c:	f88a 2004 	strb.w	r2, [sl, #4]
				ll_rx_put(rx->hdr.link, rx);
   3d780:	f7fa fa5a 	bl	37c38 <ll_rx_put>
				ll_rx_sched();
   3d784:	f7fa fa62 	bl	37c4c <ll_rx_sched>
   3d788:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   3d78c:	f8b4 10f6 	ldrh.w	r1, [r4, #246]	; 0xf6
   3d790:	f3c3 0982 	ubfx	r9, r3, #2, #3
   3d794:	095b      	lsrs	r3, r3, #5
   3d796:	f7ff b814 	b.w	3c7c2 <ull_conn_llcp+0x8a6>
				(void)ll_pdu_rx_alloc();
   3d79a:	f7fa fa7d 	bl	37c98 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   3d79e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				upd->status = 0U;
   3d7a0:	f888 701c 	strb.w	r7, [r8, #28]
				upd->tx = lll->phy_tx;
   3d7a4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				rx->hdr.handle = lll->handle;
   3d7a8:	f8a8 2006 	strh.w	r2, [r8, #6]
				upd->tx = lll->phy_tx;
   3d7ac:	f3c3 0302 	ubfx	r3, r3, #0, #3
   3d7b0:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   3d7b4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
				ll_rx_put(rx->hdr.link, rx);
   3d7b8:	f8d8 0000 	ldr.w	r0, [r8]
				upd->rx = lll->phy_rx;
   3d7bc:	f3c3 0302 	ubfx	r3, r3, #0, #3
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3d7c0:	221c      	movs	r2, #28
				upd->rx = lll->phy_rx;
   3d7c2:	f888 301e 	strb.w	r3, [r8, #30]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   3d7c6:	f888 2004 	strb.w	r2, [r8, #4]
				ll_rx_put(rx->hdr.link, rx);
   3d7ca:	4641      	mov	r1, r8
   3d7cc:	f7fa fa34 	bl	37c38 <ll_rx_put>
				ll_rx_sched();
   3d7d0:	f7fa fa3c 	bl	37c4c <ll_rx_sched>
   3d7d4:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   3d7d8:	f8b4 20f6 	ldrh.w	r2, [r4, #246]	; 0xf6
   3d7dc:	f3c3 0782 	ubfx	r7, r3, #2, #3
   3d7e0:	095b      	lsrs	r3, r3, #5
   3d7e2:	f7ff b8a0 	b.w	3c926 <ull_conn_llcp+0xa0a>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   3d7e6:	f003 0307 	and.w	r3, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   3d7ea:	f8b4 01c0 	ldrh.w	r0, [r4, #448]	; 0x1c0
		lll->max_rx_time = conn->llcp_length.rx_time;
   3d7ee:	f8b4 11c4 	ldrh.w	r1, [r4, #452]	; 0x1c4
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   3d7f2:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   3d7f6:	2b04      	cmp	r3, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   3d7f8:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
		tx_octets = conn->llcp_length.tx_octets;
   3d7fc:	f8b4 91c2 	ldrh.w	r9, [r4, #450]	; 0x1c2
		uint16_t tx_time = conn->llcp_length.tx_time;
   3d800:	f8b4 81c6 	ldrh.w	r8, [r4, #454]	; 0x1c6
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   3d804:	f000 814e 	beq.w	3daa4 <ull_conn_llcp+0x1b88>
			conn->llcp_length.state =
   3d808:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   3d80c:	2206      	movs	r2, #6
   3d80e:	f362 0302 	bfi	r3, r2, #0, #3
   3d812:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		rx = conn->llcp_rx;
   3d816:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
		LL_ASSERT(rx && rx->hdr.link);
   3d81a:	2f00      	cmp	r7, #0
   3d81c:	f000 8133 	beq.w	3da86 <ull_conn_llcp+0x1b6a>
   3d820:	6838      	ldr	r0, [r7, #0]
   3d822:	2800      	cmp	r0, #0
   3d824:	f000 812f 	beq.w	3da86 <ull_conn_llcp+0x1b6a>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   3d828:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   3d82a:	6842      	ldr	r2, [r0, #4]
   3d82c:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   3d830:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_rx->len =
   3d834:	2109      	movs	r1, #9
		rx->hdr.handle = conn->lll.handle;
   3d836:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   3d838:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
   3d83a:	7779      	strb	r1, [r7, #29]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   3d83c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   3d840:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
		rx->hdr.handle = conn->lll.handle;
   3d844:	80fa      	strh	r2, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   3d846:	843b      	strh	r3, [r7, #32]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3d848:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   3d84a:	2315      	movs	r3, #21
   3d84c:	77fb      	strb	r3, [r7, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   3d84e:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   3d850:	713a      	strb	r2, [r7, #4]
		ll_rx_put(rx->hdr.link, rx);
   3d852:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   3d854:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   3d858:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   3d85c:	f7fa f9ec 	bl	37c38 <ll_rx_put>
		ll_rx_sched();
   3d860:	f7fa f9f4 	bl	37c4c <ll_rx_sched>
	break;
   3d864:	f894 70f0 	ldrb.w	r7, [r4, #240]	; 0xf0
   3d868:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3d86c:	f7fe bb61 	b.w	3bf32 <ull_conn_llcp+0x16>
			conn->tx_data = conn->tx_data->next;
   3d870:	6819      	ldr	r1, [r3, #0]
   3d872:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d876:	2a00      	cmp	r2, #0
   3d878:	f47e aef1 	bne.w	3c65e <ull_conn_llcp+0x742>
			tx->next = conn->tx_head->next;
   3d87c:	681a      	ldr	r2, [r3, #0]
   3d87e:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   3d882:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
   3d886:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   3d88a:	e9c4 8876 	strd	r8, r8, [r4, #472]	; 0x1d8
   3d88e:	f7fe bef1 	b.w	3c674 <ull_conn_llcp+0x758>
			conn->tx_data = conn->tx_data->next;
   3d892:	6819      	ldr	r1, [r3, #0]
   3d894:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d898:	2a00      	cmp	r2, #0
   3d89a:	f47f a806 	bne.w	3c8aa <ull_conn_llcp+0x98e>
			tx->next = conn->tx_head->next;
   3d89e:	681a      	ldr	r2, [r3, #0]
   3d8a0:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
   3d8a2:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
   3d8a4:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
   3d8a6:	e9c4 6676 	strd	r6, r6, [r4, #472]	; 0x1d8
   3d8aa:	f7ff b806 	b.w	3c8ba <ull_conn_llcp+0x99e>
		conn->tx_data_last = tx;
   3d8ae:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
   3d8b2:	e605      	b.n	3d4c0 <ull_conn_llcp+0x15a4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d8b4:	791a      	ldrb	r2, [r3, #4]
   3d8b6:	f002 0203 	and.w	r2, r2, #3
   3d8ba:	2a03      	cmp	r2, #3
   3d8bc:	f000 81a8 	beq.w	3dc10 <ull_conn_llcp+0x1cf4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d8c0:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d8c4:	f7fe becb 	b.w	3c65e <ull_conn_llcp+0x742>
			conn->tx_data = conn->tx_data->next;
   3d8c8:	6819      	ldr	r1, [r3, #0]
   3d8ca:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d8ce:	2a00      	cmp	r2, #0
   3d8d0:	f47e adaf 	bne.w	3c432 <ull_conn_llcp+0x516>
			tx->next = conn->tx_head->next;
   3d8d4:	681a      	ldr	r2, [r3, #0]
   3d8d6:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   3d8d8:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl = tx;
   3d8da:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   3d8dc:	e9c4 7776 	strd	r7, r7, [r4, #472]	; 0x1d8
   3d8e0:	f7fe bdaf 	b.w	3c442 <ull_conn_llcp+0x526>
	    ((pdu_data_tx->llctrl.opcode !=
   3d8e4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d8e6:	2a03      	cmp	r2, #3
   3d8e8:	f43f ae82 	beq.w	3d5f0 <ull_conn_llcp+0x16d4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3d8ec:	2a0a      	cmp	r2, #10
   3d8ee:	f47f aee8 	bne.w	3d6c2 <ull_conn_llcp+0x17a6>
   3d8f2:	e67d      	b.n	3d5f0 <ull_conn_llcp+0x16d4>
			conn->tx_data = conn->tx_data->next;
   3d8f4:	6819      	ldr	r1, [r3, #0]
   3d8f6:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d8fa:	2a00      	cmp	r2, #0
   3d8fc:	f47f ab10 	bne.w	3cf20 <ull_conn_llcp+0x1004>
			tx->next = conn->tx_head->next;
   3d900:	681a      	ldr	r2, [r3, #0]
   3d902:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   3d904:	601f      	str	r7, [r3, #0]
				conn->tx_ctrl = tx;
   3d906:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   3d908:	e9c4 7776 	strd	r7, r7, [r4, #472]	; 0x1d8
   3d90c:	f7ff bb10 	b.w	3cf30 <ull_conn_llcp+0x1014>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d910:	791a      	ldrb	r2, [r3, #4]
   3d912:	f002 0203 	and.w	r2, r2, #3
   3d916:	2a03      	cmp	r2, #3
   3d918:	f000 81bb 	beq.w	3dc92 <ull_conn_llcp+0x1d76>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d91c:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d920:	f7fe bfc3 	b.w	3c8aa <ull_conn_llcp+0x98e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d924:	791a      	ldrb	r2, [r3, #4]
   3d926:	f002 0203 	and.w	r2, r2, #3
   3d92a:	2a03      	cmp	r2, #3
   3d92c:	f000 8181 	beq.w	3dc32 <ull_conn_llcp+0x1d16>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d930:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d934:	f7fe bd7d 	b.w	3c432 <ull_conn_llcp+0x516>
			conn->tx_data = conn->tx_data->next;
   3d938:	6819      	ldr	r1, [r3, #0]
   3d93a:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d93e:	2a00      	cmp	r2, #0
   3d940:	f47f acf1 	bne.w	3d326 <ull_conn_llcp+0x140a>
			tx->next = conn->tx_head->next;
   3d944:	681a      	ldr	r2, [r3, #0]
   3d946:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3d94a:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   3d94e:	e9c4 9976 	strd	r9, r9, [r4, #472]	; 0x1d8
   3d952:	e4f1      	b.n	3d338 <ull_conn_llcp+0x141c>
			conn->tx_data = conn->tx_data->next;
   3d954:	6819      	ldr	r1, [r3, #0]
   3d956:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d95a:	2a00      	cmp	r2, #0
   3d95c:	f47f ab4e 	bne.w	3cffc <ull_conn_llcp+0x10e0>
			tx->next = conn->tx_head->next;
   3d960:	681a      	ldr	r2, [r3, #0]
   3d962:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3d966:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   3d96a:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   3d96e:	e9c4 9976 	strd	r9, r9, [r4, #472]	; 0x1d8
   3d972:	f7ff bb4e 	b.w	3d012 <ull_conn_llcp+0x10f6>
				LL_ASSERT(rx && rx->hdr.link);
   3d976:	f241 232c 	movw	r3, #4652	; 0x122c
   3d97a:	4a0c      	ldr	r2, [pc, #48]	; (3d9ac <ull_conn_llcp+0x1a90>)
   3d97c:	490c      	ldr	r1, [pc, #48]	; (3d9b0 <ull_conn_llcp+0x1a94>)
   3d97e:	480d      	ldr	r0, [pc, #52]	; (3d9b4 <ull_conn_llcp+0x1a98>)
   3d980:	f00c fbac 	bl	4a0dc <printk>
   3d984:	4040      	eors	r0, r0
   3d986:	f380 8811 	msr	BASEPRI, r0
   3d98a:	f04f 0003 	mov.w	r0, #3
   3d98e:	df02      	svc	2
   3d990:	6828      	ldr	r0, [r5, #0]
   3d992:	f7ff bbe0 	b.w	3d156 <ull_conn_llcp+0x123a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d996:	791a      	ldrb	r2, [r3, #4]
   3d998:	f002 0203 	and.w	r2, r2, #3
   3d99c:	2a03      	cmp	r2, #3
   3d99e:	f000 8170 	beq.w	3dc82 <ull_conn_llcp+0x1d66>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3d9a2:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3d9a6:	e4be      	b.n	3d326 <ull_conn_llcp+0x140a>
   3d9a8:	20005348 	.word	0x20005348
   3d9ac:	00053248 	.word	0x00053248
   3d9b0:	00053290 	.word	0x00053290
   3d9b4:	00052d50 	.word	0x00052d50
			conn->tx_data = conn->tx_data->next;
   3d9b8:	6819      	ldr	r1, [r3, #0]
   3d9ba:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d9be:	2a00      	cmp	r2, #0
   3d9c0:	f47e aebb 	bne.w	3c73a <ull_conn_llcp+0x81e>
			tx->next = conn->tx_head->next;
   3d9c4:	681a      	ldr	r2, [r3, #0]
   3d9c6:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   3d9ca:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   3d9ce:	e9c4 9976 	strd	r9, r9, [r4, #472]	; 0x1d8
   3d9d2:	f7fe bebb 	b.w	3c74c <ull_conn_llcp+0x830>
			conn->tx_data = conn->tx_data->next;
   3d9d6:	681a      	ldr	r2, [r3, #0]
   3d9d8:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3d9dc:	2900      	cmp	r1, #0
   3d9de:	f47e af1b 	bne.w	3c818 <ull_conn_llcp+0x8fc>
			tx->next = conn->tx_head->next;
   3d9e2:	681a      	ldr	r2, [r3, #0]
   3d9e4:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   3d9e8:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl_last = tx;
   3d9ec:	e9c4 8876 	strd	r8, r8, [r4, #472]	; 0x1d8
   3d9f0:	f7fe bf1b 	b.w	3c82a <ull_conn_llcp+0x90e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3d9f4:	791a      	ldrb	r2, [r3, #4]
   3d9f6:	f002 0203 	and.w	r2, r2, #3
   3d9fa:	2a03      	cmp	r2, #3
   3d9fc:	f000 80aa 	beq.w	3db54 <ull_conn_llcp+0x1c38>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3da00:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3da04:	f7ff bafa 	b.w	3cffc <ull_conn_llcp+0x10e0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3da08:	48c5      	ldr	r0, [pc, #788]	; (3dd20 <ull_conn_llcp+0x1e04>)
   3da0a:	f7f6 fa1d 	bl	33e48 <mem_acquire>
		if (!tx) {
   3da0e:	4601      	mov	r1, r0
   3da10:	2800      	cmp	r0, #0
   3da12:	f43f a8b7 	beq.w	3cb84 <ull_conn_llcp+0xc68>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   3da16:	7903      	ldrb	r3, [r0, #4]
   3da18:	f043 0303 	orr.w	r3, r3, #3
   3da1c:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3da1e:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   3da20:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3da22:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   3da24:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   3da26:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   3da28:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
   3da2a:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
   3da2e:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   3da30:	2200      	movs	r2, #0
   3da32:	4620      	mov	r0, r4
   3da34:	f7fb fe34 	bl	396a0 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   3da38:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
   3da3c:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
	conn_upd_curr = NULL;
   3da40:	2300      	movs	r3, #0
   3da42:	f8c8 3000 	str.w	r3, [r8]
		return;
   3da46:	f894 70f0 	ldrb.w	r7, [r4, #240]	; 0xf0
   3da4a:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3da4e:	f7fe ba70 	b.w	3bf32 <ull_conn_llcp+0x16>
				LL_ASSERT(rx && rx->hdr.link);
   3da52:	f241 232c 	movw	r3, #4652	; 0x122c
   3da56:	4ab3      	ldr	r2, [pc, #716]	; (3dd24 <ull_conn_llcp+0x1e08>)
   3da58:	49b3      	ldr	r1, [pc, #716]	; (3dd28 <ull_conn_llcp+0x1e0c>)
   3da5a:	48b4      	ldr	r0, [pc, #720]	; (3dd2c <ull_conn_llcp+0x1e10>)
   3da5c:	f00c fb3e 	bl	4a0dc <printk>
   3da60:	4040      	eors	r0, r0
   3da62:	f380 8811 	msr	BASEPRI, r0
   3da66:	f04f 0003 	mov.w	r0, #3
   3da6a:	df02      	svc	2
   3da6c:	6838      	ldr	r0, [r7, #0]
   3da6e:	f7ff bb54 	b.w	3d11a <ull_conn_llcp+0x11fe>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3da72:	791a      	ldrb	r2, [r3, #4]
   3da74:	f002 0203 	and.w	r2, r2, #3
   3da78:	2a03      	cmp	r2, #3
   3da7a:	f000 8083 	beq.w	3db84 <ull_conn_llcp+0x1c68>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3da7e:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3da82:	f7ff ba4d 	b.w	3cf20 <ull_conn_llcp+0x1004>
		LL_ASSERT(rx && rx->hdr.link);
   3da86:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   3da8a:	4aa6      	ldr	r2, [pc, #664]	; (3dd24 <ull_conn_llcp+0x1e08>)
   3da8c:	49a6      	ldr	r1, [pc, #664]	; (3dd28 <ull_conn_llcp+0x1e0c>)
   3da8e:	48a7      	ldr	r0, [pc, #668]	; (3dd2c <ull_conn_llcp+0x1e10>)
   3da90:	f00c fb24 	bl	4a0dc <printk>
   3da94:	4040      	eors	r0, r0
   3da96:	f380 8811 	msr	BASEPRI, r0
   3da9a:	f04f 0003 	mov.w	r0, #3
   3da9e:	df02      	svc	2
   3daa0:	6838      	ldr	r0, [r7, #0]
   3daa2:	e6c1      	b.n	3d828 <ull_conn_llcp+0x190c>
			if (!conn->llcp_length.cache.tx_octets) {
   3daa4:	f8b4 31c8 	ldrh.w	r3, [r4, #456]	; 0x1c8
   3daa8:	2b00      	cmp	r3, #0
   3daaa:	d15b      	bne.n	3db64 <ull_conn_llcp+0x1c48>
				conn->llcp_length.ack = conn->llcp_length.req;
   3daac:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
				conn->procedure_expire = 0U;
   3dab0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   3dab4:	e6af      	b.n	3d816 <ull_conn_llcp+0x18fa>
			conn->llcp_cu.interval = interval_max;
   3dab6:	f8a4 211c 	strh.w	r2, [r4, #284]	; 0x11c
   3daba:	f7ff b8ff 	b.w	3ccbc <ull_conn_llcp+0xda0>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   3dabe:	4898      	ldr	r0, [pc, #608]	; (3dd20 <ull_conn_llcp+0x1e04>)
   3dac0:	f7f6 f9c2 	bl	33e48 <mem_acquire>
	if (!tx) {
   3dac4:	4601      	mov	r1, r0
   3dac6:	2800      	cmp	r0, #0
   3dac8:	f43f a85c 	beq.w	3cb84 <ull_conn_llcp+0xc68>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3dacc:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   3dace:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   3dad0:	f043 0303 	orr.w	r3, r3, #3
   3dad4:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   3dad6:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
   3dad8:	f8b4 3198 	ldrh.w	r3, [r4, #408]	; 0x198
	rsp->interval_max =
   3dadc:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
	rsp->interval_min =
   3dae0:	8103      	strh	r3, [r0, #8]
	rsp->latency =
   3dae2:	f8b4 319c 	ldrh.w	r3, [r4, #412]	; 0x19c
	rsp->interval_max =
   3dae6:	8142      	strh	r2, [r0, #10]
	rsp->timeout =
   3dae8:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
	rsp->latency =
   3daec:	8183      	strh	r3, [r0, #12]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   3daee:	2310      	movs	r3, #16
	rsp->timeout =
   3daf0:	81c2      	strh	r2, [r0, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   3daf2:	71c3      	strb	r3, [r0, #7]
	rsp->preferred_periodicity =
   3daf4:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   3daf8:	7403      	strb	r3, [r0, #16]
	rsp->reference_conn_event_count =
   3dafa:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   3dafe:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
	rsp->reference_conn_event_count =
   3db02:	f8a0 3011 	strh.w	r3, [r0, #17]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   3db06:	f8b4 31a6 	ldrh.w	r3, [r4, #422]	; 0x1a6
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   3db0a:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   3db0e:	f8b4 21a8 	ldrh.w	r2, [r4, #424]	; 0x1a8
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   3db12:	f8a0 3015 	strh.w	r3, [r0, #21]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   3db16:	f8b4 31aa 	ldrh.w	r3, [r4, #426]	; 0x1aa
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   3db1a:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   3db1e:	f8b4 21ac 	ldrh.w	r2, [r4, #428]	; 0x1ac
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   3db22:	f8a0 3019 	strh.w	r3, [r0, #25]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   3db26:	f8b4 31ae 	ldrh.w	r3, [r4, #430]	; 0x1ae
   3db2a:	f8a0 301d 	strh.w	r3, [r0, #29]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   3db2e:	f8a0 201b 	strh.w	r2, [r0, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
   3db32:	463a      	mov	r2, r7
   3db34:	4620      	mov	r0, r4
   3db36:	f7fb fdb3 	bl	396a0 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   3db3a:	f894 2196 	ldrb.w	r2, [r4, #406]	; 0x196
   3db3e:	f894 70f0 	ldrb.w	r7, [r4, #240]	; 0xf0
   3db42:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3db46:	2105      	movs	r1, #5
   3db48:	f361 0203 	bfi	r2, r1, #0, #4
   3db4c:	f884 2196 	strb.w	r2, [r4, #406]	; 0x196
   3db50:	f7fe b9ef 	b.w	3bf32 <ull_conn_llcp+0x16>
	    ((pdu_data_tx->llctrl.opcode !=
   3db54:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3db56:	2a03      	cmp	r2, #3
   3db58:	f43f af02 	beq.w	3d960 <ull_conn_llcp+0x1a44>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3db5c:	2a0a      	cmp	r2, #10
   3db5e:	f47f af4f 	bne.w	3da00 <ull_conn_llcp+0x1ae4>
   3db62:	e6fd      	b.n	3d960 <ull_conn_llcp+0x1a44>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3db64:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
				conn->llcp_length.tx_octets =
   3db68:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
				conn->llcp_length.cache.tx_octets = 0;
   3db6c:	2300      	movs	r3, #0
				conn->llcp_length.tx_time =
   3db6e:	f8b4 11ca 	ldrh.w	r1, [r4, #458]	; 0x1ca
				conn->llcp_length.cache.tx_octets = 0;
   3db72:	f8a4 31c8 	strh.w	r3, [r4, #456]	; 0x1c8
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3db76:	f363 0202 	bfi	r2, r3, #0, #3
   3db7a:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
				conn->llcp_length.tx_time =
   3db7e:	f8a4 11c6 	strh.w	r1, [r4, #454]	; 0x1c6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3db82:	e648      	b.n	3d816 <ull_conn_llcp+0x18fa>
	    ((pdu_data_tx->llctrl.opcode !=
   3db84:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3db86:	2a03      	cmp	r2, #3
   3db88:	f43f aeba 	beq.w	3d900 <ull_conn_llcp+0x19e4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3db8c:	2a0a      	cmp	r2, #10
   3db8e:	f47f af76 	bne.w	3da7e <ull_conn_llcp+0x1b62>
   3db92:	e6b5      	b.n	3d900 <ull_conn_llcp+0x19e4>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   3db94:	f017 0f01 	tst.w	r7, #1
   3db98:	f000 808a 	beq.w	3dcb0 <ull_conn_llcp+0x1d94>
			conn->llcp_phy.rx = PHY_1M;
   3db9c:	2701      	movs	r7, #1
   3db9e:	f367 1047 	bfi	r0, r7, #5, #3
   3dba2:	f884 01ce 	strb.w	r0, [r4, #462]	; 0x1ce
   3dba6:	f7ff bb77 	b.w	3d298 <ull_conn_llcp+0x137c>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   3dbaa:	f017 0f01 	tst.w	r7, #1
   3dbae:	f000 8089 	beq.w	3dcc4 <ull_conn_llcp+0x1da8>
			conn->llcp_phy.tx = PHY_1M;
   3dbb2:	2701      	movs	r7, #1
   3dbb4:	f367 0084 	bfi	r0, r7, #2, #3
   3dbb8:	f884 01ce 	strb.w	r0, [r4, #462]	; 0x1ce
   3dbbc:	f7ff bb60 	b.w	3d280 <ull_conn_llcp+0x1364>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dbc0:	791a      	ldrb	r2, [r3, #4]
   3dbc2:	f002 0203 	and.w	r2, r2, #3
   3dbc6:	2a03      	cmp	r2, #3
   3dbc8:	f000 8086 	beq.w	3dcd8 <ull_conn_llcp+0x1dbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3dbcc:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3dbd0:	e4bb      	b.n	3d54a <ull_conn_llcp+0x162e>
			conn->tx_data = conn->tx_data->next;
   3dbd2:	680b      	ldr	r3, [r1, #0]
   3dbd4:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3dbd8:	2a00      	cmp	r2, #0
   3dbda:	f47e aec8 	bne.w	3c96e <ull_conn_llcp+0xa52>
			tx->next = conn->tx_head->next;
   3dbde:	680b      	ldr	r3, [r1, #0]
   3dbe0:	6033      	str	r3, [r6, #0]
			conn->tx_head->next = tx;
   3dbe2:	600e      	str	r6, [r1, #0]
				conn->tx_ctrl_last = tx;
   3dbe4:	e9c4 6676 	strd	r6, r6, [r4, #472]	; 0x1d8
   3dbe8:	f7fe bec8 	b.w	3c97c <ull_conn_llcp+0xa60>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dbec:	790b      	ldrb	r3, [r1, #4]
   3dbee:	f003 0303 	and.w	r3, r3, #3
   3dbf2:	2b03      	cmp	r3, #3
   3dbf4:	d077      	beq.n	3dce6 <ull_conn_llcp+0x1dca>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3dbf6:	e9c4 1176 	strd	r1, r1, [r4, #472]	; 0x1d8
   3dbfa:	f7fe beb8 	b.w	3c96e <ull_conn_llcp+0xa52>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dbfe:	791a      	ldrb	r2, [r3, #4]
   3dc00:	f002 0203 	and.w	r2, r2, #3
   3dc04:	2a03      	cmp	r2, #3
   3dc06:	d04c      	beq.n	3dca2 <ull_conn_llcp+0x1d86>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3dc08:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3dc0c:	f7fe be04 	b.w	3c818 <ull_conn_llcp+0x8fc>
	    ((pdu_data_tx->llctrl.opcode !=
   3dc10:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dc12:	2a03      	cmp	r2, #3
   3dc14:	f43f ae32 	beq.w	3d87c <ull_conn_llcp+0x1960>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dc18:	2a0a      	cmp	r2, #10
   3dc1a:	f47f ae51 	bne.w	3d8c0 <ull_conn_llcp+0x19a4>
   3dc1e:	e62d      	b.n	3d87c <ull_conn_llcp+0x1960>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dc20:	791a      	ldrb	r2, [r3, #4]
   3dc22:	f002 0203 	and.w	r2, r2, #3
   3dc26:	2a03      	cmp	r2, #3
   3dc28:	d064      	beq.n	3dcf4 <ull_conn_llcp+0x1dd8>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3dc2a:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3dc2e:	f7fe bd84 	b.w	3c73a <ull_conn_llcp+0x81e>
	    ((pdu_data_tx->llctrl.opcode !=
   3dc32:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dc34:	2a03      	cmp	r2, #3
   3dc36:	f43f ae4d 	beq.w	3d8d4 <ull_conn_llcp+0x19b8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dc3a:	2a0a      	cmp	r2, #10
   3dc3c:	f47f ae78 	bne.w	3d930 <ull_conn_llcp+0x1a14>
   3dc40:	e648      	b.n	3d8d4 <ull_conn_llcp+0x19b8>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dc42:	791a      	ldrb	r2, [r3, #4]
   3dc44:	f002 0203 	and.w	r2, r2, #3
   3dc48:	2a03      	cmp	r2, #3
   3dc4a:	d05a      	beq.n	3dd02 <ull_conn_llcp+0x1de6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3dc4c:	e9c4 3376 	strd	r3, r3, [r4, #472]	; 0x1d8
   3dc50:	e42b      	b.n	3d4aa <ull_conn_llcp+0x158e>
			conn->tx_data = conn->tx_data->next;
   3dc52:	681a      	ldr	r2, [r3, #0]
   3dc54:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3dc58:	2900      	cmp	r1, #0
   3dc5a:	f47f ac26 	bne.w	3d4aa <ull_conn_llcp+0x158e>
			tx->next = conn->tx_head->next;
   3dc5e:	681a      	ldr	r2, [r3, #0]
   3dc60:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3dc62:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   3dc64:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   3dc68:	e426      	b.n	3d4b8 <ull_conn_llcp+0x159c>
			conn->tx_data = conn->tx_data->next;
   3dc6a:	6819      	ldr	r1, [r3, #0]
   3dc6c:	f8c4 11e0 	str.w	r1, [r4, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3dc70:	2a00      	cmp	r2, #0
   3dc72:	f47f ac6a 	bne.w	3d54a <ull_conn_llcp+0x162e>
			tx->next = conn->tx_head->next;
   3dc76:	681a      	ldr	r2, [r3, #0]
   3dc78:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   3dc7a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   3dc7c:	e9c4 0076 	strd	r0, r0, [r4, #472]	; 0x1d8
   3dc80:	e46a      	b.n	3d558 <ull_conn_llcp+0x163c>
	    ((pdu_data_tx->llctrl.opcode !=
   3dc82:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dc84:	2a03      	cmp	r2, #3
   3dc86:	f43f ae5d 	beq.w	3d944 <ull_conn_llcp+0x1a28>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dc8a:	2a0a      	cmp	r2, #10
   3dc8c:	f47f ae89 	bne.w	3d9a2 <ull_conn_llcp+0x1a86>
   3dc90:	e658      	b.n	3d944 <ull_conn_llcp+0x1a28>
	    ((pdu_data_tx->llctrl.opcode !=
   3dc92:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dc94:	2a03      	cmp	r2, #3
   3dc96:	f43f ae02 	beq.w	3d89e <ull_conn_llcp+0x1982>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dc9a:	2a0a      	cmp	r2, #10
   3dc9c:	f47f ae3e 	bne.w	3d91c <ull_conn_llcp+0x1a00>
   3dca0:	e5fd      	b.n	3d89e <ull_conn_llcp+0x1982>
	    ((pdu_data_tx->llctrl.opcode !=
   3dca2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dca4:	2a03      	cmp	r2, #3
   3dca6:	f43f ae9c 	beq.w	3d9e2 <ull_conn_llcp+0x1ac6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dcaa:	2a0a      	cmp	r2, #10
   3dcac:	d1ac      	bne.n	3dc08 <ull_conn_llcp+0x1cec>
   3dcae:	e698      	b.n	3d9e2 <ull_conn_llcp+0x1ac6>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   3dcb0:	f017 0704 	ands.w	r7, r7, #4
			conn->llcp_phy.rx = PHY_CODED;
   3dcb4:	bf18      	it	ne
   3dcb6:	2704      	movne	r7, #4
			conn->llcp_phy.rx = 0U;
   3dcb8:	f367 1047 	bfi	r0, r7, #5, #3
   3dcbc:	f884 01ce 	strb.w	r0, [r4, #462]	; 0x1ce
   3dcc0:	f7ff baea 	b.w	3d298 <ull_conn_llcp+0x137c>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   3dcc4:	f017 0704 	ands.w	r7, r7, #4
			conn->llcp_phy.tx = PHY_CODED;
   3dcc8:	bf18      	it	ne
   3dcca:	2704      	movne	r7, #4
			conn->llcp_phy.tx = 0U;
   3dccc:	f367 0084 	bfi	r0, r7, #2, #3
   3dcd0:	f884 01ce 	strb.w	r0, [r4, #462]	; 0x1ce
   3dcd4:	f7ff bad4 	b.w	3d280 <ull_conn_llcp+0x1364>
	    ((pdu_data_tx->llctrl.opcode !=
   3dcd8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dcda:	2a03      	cmp	r2, #3
   3dcdc:	d0cb      	beq.n	3dc76 <ull_conn_llcp+0x1d5a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dcde:	2a0a      	cmp	r2, #10
   3dce0:	f47f af74 	bne.w	3dbcc <ull_conn_llcp+0x1cb0>
   3dce4:	e7c7      	b.n	3dc76 <ull_conn_llcp+0x1d5a>
	    ((pdu_data_tx->llctrl.opcode !=
   3dce6:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dce8:	2b03      	cmp	r3, #3
   3dcea:	f43f af78 	beq.w	3dbde <ull_conn_llcp+0x1cc2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dcee:	2b0a      	cmp	r3, #10
   3dcf0:	d181      	bne.n	3dbf6 <ull_conn_llcp+0x1cda>
   3dcf2:	e774      	b.n	3dbde <ull_conn_llcp+0x1cc2>
	    ((pdu_data_tx->llctrl.opcode !=
   3dcf4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dcf6:	2a03      	cmp	r2, #3
   3dcf8:	f43f ae64 	beq.w	3d9c4 <ull_conn_llcp+0x1aa8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dcfc:	2a0a      	cmp	r2, #10
   3dcfe:	d194      	bne.n	3dc2a <ull_conn_llcp+0x1d0e>
   3dd00:	e660      	b.n	3d9c4 <ull_conn_llcp+0x1aa8>
	    ((pdu_data_tx->llctrl.opcode !=
   3dd02:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3dd04:	2a03      	cmp	r2, #3
   3dd06:	d0aa      	beq.n	3dc5e <ull_conn_llcp+0x1d42>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3dd08:	2a0a      	cmp	r2, #10
   3dd0a:	d19f      	bne.n	3dc4c <ull_conn_llcp+0x1d30>
   3dd0c:	e7a7      	b.n	3dc5e <ull_conn_llcp+0x1d42>
		LL_ASSERT(0);
   3dd0e:	f640 73e1 	movw	r3, #4065	; 0xfe1
   3dd12:	f7ff b9a7 	b.w	3d064 <ull_conn_llcp+0x1148>
		LL_ASSERT(0);
   3dd16:	f241 1367 	movw	r3, #4455	; 0x1167
   3dd1a:	f7ff b9a3 	b.w	3d064 <ull_conn_llcp+0x1148>
   3dd1e:	bf00      	nop
   3dd20:	20005348 	.word	0x20005348
   3dd24:	00053248 	.word	0x00053248
   3dd28:	00053290 	.word	0x00053290
   3dd2c:	00052d50 	.word	0x00052d50

0003dd30 <ull_conn_tx_demux>:
{
   3dd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3dd34:	4f27      	ldr	r7, [pc, #156]	; (3ddd4 <ull_conn_tx_demux+0xa4>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3dd36:	4e28      	ldr	r6, [pc, #160]	; (3ddd8 <ull_conn_tx_demux+0xa8>)
   3dd38:	78fa      	ldrb	r2, [r7, #3]
{
   3dd3a:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   3dd3c:	1d3d      	adds	r5, r7, #4
   3dd3e:	e024      	b.n	3dd8a <ull_conn_tx_demux+0x5a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3dd40:	4642      	mov	r2, r8
   3dd42:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3dd46:	4630      	mov	r0, r6
   3dd48:	f7f6 f8b0 	bl	33eac <mem_get>
	if (conn->lll.handle != handle) {
   3dd4c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   3dd4e:	4543      	cmp	r3, r8
   3dd50:	d129      	bne.n	3dda6 <ull_conn_tx_demux+0x76>
			struct node_tx *tx = lll_tx->node;
   3dd52:	f8d9 3004 	ldr.w	r3, [r9, #4]
			if (!conn->tx_data) {
   3dd56:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
			tx->next = NULL;
   3dd5a:	2100      	movs	r1, #0
   3dd5c:	6019      	str	r1, [r3, #0]
			if (!conn->tx_data) {
   3dd5e:	b37a      	cbz	r2, 3ddc0 <ull_conn_tx_demux+0x90>
			if (conn->tx_data_last) {
   3dd60:	f8d0 21e4 	ldr.w	r2, [r0, #484]	; 0x1e4
   3dd64:	b102      	cbz	r2, 3dd68 <ull_conn_tx_demux+0x38>
				conn->tx_data_last->next = tx;
   3dd66:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   3dd68:	f8c0 31e4 	str.w	r3, [r0, #484]	; 0x1e4
		MFIFO_DEQUEUE(conn_tx);
   3dd6c:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   3dd6e:	78bb      	ldrb	r3, [r7, #2]
   3dd70:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   3dd72:	429a      	cmp	r2, r3
   3dd74:	d005      	beq.n	3dd82 <ull_conn_tx_demux+0x52>
	_first += 1U;
   3dd76:	3301      	adds	r3, #1
   3dd78:	b2db      	uxtb	r3, r3
		_first = 0U;
   3dd7a:	4299      	cmp	r1, r3
   3dd7c:	bf08      	it	eq
   3dd7e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   3dd80:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   3dd82:	3c01      	subs	r4, #1
   3dd84:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   3dd88:	d018      	beq.n	3ddbc <ull_conn_tx_demux+0x8c>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   3dd8a:	78bb      	ldrb	r3, [r7, #2]
   3dd8c:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   3dd8e:	4293      	cmp	r3, r2
   3dd90:	d014      	beq.n	3ddbc <ull_conn_tx_demux+0x8c>
	return (void *)(fifo + first * size);
   3dd92:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   3dd96:	eb15 0903 	adds.w	r9, r5, r3
   3dd9a:	d00f      	beq.n	3ddbc <ull_conn_tx_demux+0x8c>
		conn = ll_connected_get(lll_tx->handle);
   3dd9c:	f835 8003 	ldrh.w	r8, [r5, r3]
	if (handle >= CONFIG_BT_MAX_CONN) {
   3dda0:	f1b8 0f05 	cmp.w	r8, #5
   3dda4:	d9cc      	bls.n	3dd40 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   3dda6:	f8d9 1004 	ldr.w	r1, [r9, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   3ddaa:	790b      	ldrb	r3, [r1, #4]
   3ddac:	f36f 0301 	bfc	r3, #0, #2
   3ddb0:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   3ddb2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   3ddb6:	f7f9 ff87 	bl	37cc8 <ll_tx_ack_put>
   3ddba:	e7d7      	b.n	3dd6c <ull_conn_tx_demux+0x3c>
}
   3ddbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (!conn->tx_head) {
   3ddc0:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
				conn->tx_data = tx;
   3ddc4:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
				if (!conn->tx_head) {
   3ddc8:	2a00      	cmp	r2, #0
   3ddca:	d1c9      	bne.n	3dd60 <ull_conn_tx_demux+0x30>
					conn->tx_head = tx;
   3ddcc:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
			if (conn->tx_data_last) {
   3ddd0:	e7ca      	b.n	3dd68 <ull_conn_tx_demux+0x38>
   3ddd2:	bf00      	nop
   3ddd4:	20000a70 	.word	0x20000a70
   3ddd8:	20002d70 	.word	0x20002d70

0003dddc <conn_cleanup_finalize>:
{
   3dddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   3dde0:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
{
   3dde4:	b082      	sub	sp, #8
   3dde6:	4605      	mov	r5, r0
	while (rx) {
   3dde8:	b141      	cbz	r1, 3ddfc <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   3ddea:	2601      	movs	r6, #1
		rx = hdr->link->mem;
   3ddec:	6808      	ldr	r0, [r1, #0]
   3ddee:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   3ddf0:	710e      	strb	r6, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   3ddf2:	f7f9 ff21 	bl	37c38 <ll_rx_put>
	while (rx) {
   3ddf6:	4621      	mov	r1, r4
   3ddf8:	2c00      	cmp	r4, #0
   3ddfa:	d1f7      	bne.n	3ddec <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   3ddfc:	f8d5 11d4 	ldr.w	r1, [r5, #468]	; 0x1d4
   3de00:	b381      	cbz	r1, 3de64 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   3de02:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 3debc <conn_cleanup_finalize+0xe0>
		LL_ASSERT(link);
   3de06:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 3deb4 <conn_cleanup_finalize+0xd8>
   3de0a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 3dec0 <conn_cleanup_finalize+0xe4>
   3de0e:	f105 0768 	add.w	r7, r5, #104	; 0x68
   3de12:	e007      	b.n	3de24 <conn_cleanup_finalize+0x48>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3de14:	4631      	mov	r1, r6
   3de16:	4620      	mov	r0, r4
   3de18:	463a      	mov	r2, r7
   3de1a:	f7f6 f879 	bl	33f10 <memq_enqueue>
	while (conn->tx_head) {
   3de1e:	f8d5 11d4 	ldr.w	r1, [r5, #468]	; 0x1d4
   3de22:	b1f9      	cbz	r1, 3de64 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3de24:	4628      	mov	r0, r5
   3de26:	f7fb fbbd 	bl	395a4 <tx_ull_dequeue>
   3de2a:	4606      	mov	r6, r0
		link = mem_acquire(&mem_link_tx.free);
   3de2c:	4640      	mov	r0, r8
   3de2e:	f7f6 f80b 	bl	33e48 <mem_acquire>
		LL_ASSERT(link);
   3de32:	4604      	mov	r4, r0
   3de34:	2800      	cmp	r0, #0
   3de36:	d1ed      	bne.n	3de14 <conn_cleanup_finalize+0x38>
   3de38:	f640 135e 	movw	r3, #2398	; 0x95e
   3de3c:	4652      	mov	r2, sl
   3de3e:	4649      	mov	r1, r9
   3de40:	481a      	ldr	r0, [pc, #104]	; (3deac <conn_cleanup_finalize+0xd0>)
   3de42:	f00c f94b 	bl	4a0dc <printk>
   3de46:	4040      	eors	r0, r0
   3de48:	f380 8811 	msr	BASEPRI, r0
   3de4c:	f04f 0003 	mov.w	r0, #3
   3de50:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3de52:	4631      	mov	r1, r6
   3de54:	4620      	mov	r0, r4
   3de56:	463a      	mov	r2, r7
   3de58:	f7f6 f85a 	bl	33f10 <memq_enqueue>
	while (conn->tx_head) {
   3de5c:	f8d5 11d4 	ldr.w	r1, [r5, #468]	; 0x1d4
   3de60:	2900      	cmp	r1, #0
   3de62:	d1df      	bne.n	3de24 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   3de64:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   3de68:	4b11      	ldr	r3, [pc, #68]	; (3deb0 <conn_cleanup_finalize+0xd4>)
   3de6a:	9500      	str	r5, [sp, #0]
   3de6c:	3205      	adds	r2, #5
   3de6e:	b2d2      	uxtb	r2, r2
   3de70:	2101      	movs	r1, #1
   3de72:	2000      	movs	r0, #0
   3de74:	f7f7 fc7e 	bl	35774 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3de78:	f030 0302 	bics.w	r3, r0, #2
   3de7c:	d00c      	beq.n	3de98 <conn_cleanup_finalize+0xbc>
   3de7e:	f640 1324 	movw	r3, #2340	; 0x924
   3de82:	4a0c      	ldr	r2, [pc, #48]	; (3deb4 <conn_cleanup_finalize+0xd8>)
   3de84:	490c      	ldr	r1, [pc, #48]	; (3deb8 <conn_cleanup_finalize+0xdc>)
   3de86:	4809      	ldr	r0, [pc, #36]	; (3deac <conn_cleanup_finalize+0xd0>)
   3de88:	f00c f928 	bl	4a0dc <printk>
   3de8c:	4040      	eors	r0, r0
   3de8e:	f380 8811 	msr	BASEPRI, r0
   3de92:	f04f 0003 	mov.w	r0, #3
   3de96:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   3de98:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   3de9c:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   3de9e:	852b      	strh	r3, [r5, #40]	; 0x28
}
   3dea0:	b002      	add	sp, #8
   3dea2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   3dea6:	f7ff bf43 	b.w	3dd30 <ull_conn_tx_demux>
   3deaa:	bf00      	nop
   3deac:	00052d50 	.word	0x00052d50
   3deb0:	00039861 	.word	0x00039861
   3deb4:	00053248 	.word	0x00053248
   3deb8:	000532a4 	.word	0x000532a4
   3debc:	2000576c 	.word	0x2000576c
   3dec0:	00053350 	.word	0x00053350

0003dec4 <ull_conn_done>:
{
   3dec4:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   3dec6:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   3dec8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   3deca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3dece:	429a      	cmp	r2, r3
{
   3ded0:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   3ded2:	f000 8098 	beq.w	3e006 <ull_conn_done+0x142>
	switch (done->extra.mic_state) {
   3ded6:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   3deda:	2b01      	cmp	r3, #1
   3dedc:	4605      	mov	r5, r0
   3dede:	f000 8111 	beq.w	3e104 <ull_conn_done+0x240>
   3dee2:	2b00      	cmp	r3, #0
   3dee4:	f000 8091 	beq.w	3e00a <ull_conn_done+0x146>
   3dee8:	2b02      	cmp	r3, #2
   3deea:	f040 80a9 	bne.w	3e040 <ull_conn_done+0x17c>
		conn->llcp_terminate.reason_final =
   3deee:	233d      	movs	r3, #61	; 0x3d
   3def0:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
	if (reason_final && (
   3def4:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   3def8:	2900      	cmp	r1, #0
   3defa:	f2c0 80bf 	blt.w	3e07c <ull_conn_done+0x1b8>
			       conn->llcp_terminate.ack) & 0xFF) ==
   3defe:	f894 1150 	ldrb.w	r1, [r4, #336]	; 0x150
   3df02:	f894 0151 	ldrb.w	r0, [r4, #337]	; 0x151
   3df06:	1a09      	subs	r1, r1, r0
			    lll->role ||
   3df08:	b2c9      	uxtb	r1, r1
   3df0a:	2903      	cmp	r1, #3
   3df0c:	f000 80b6 	beq.w	3e07c <ull_conn_done+0x1b8>
			     TERM_ACKED) ||
   3df10:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   3df14:	f011 0004 	ands.w	r0, r1, #4
   3df18:	f040 80b0 	bne.w	3e07c <ull_conn_done+0x1b8>
			    conn->central.terminate_ack ||
   3df1c:	2b3d      	cmp	r3, #61	; 0x3d
   3df1e:	f000 80ad 	beq.w	3e07c <ull_conn_done+0x1b8>
	latency_event = lll->latency_event;
   3df22:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   3df24:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	ticks_drift_plus = 0U;
   3df26:	9009      	str	r0, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   3df28:	1c7e      	adds	r6, r7, #1
	ticks_drift_minus = 0U;
   3df2a:	9008      	str	r0, [sp, #32]
	elapsed_event = latency_event + 1;
   3df2c:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   3df2e:	2b00      	cmp	r3, #0
   3df30:	f000 80b6 	beq.w	3e0a0 <ull_conn_done+0x1dc>
			conn->central.terminate_ack = 1;
   3df34:	f041 0104 	orr.w	r1, r1, #4
   3df38:	f884 10e4 	strb.w	r1, [r4, #228]	; 0xe4
	if (done->extra.crc_valid) {
   3df3c:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   3df40:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   3df42:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   3df44:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   3df48:	f140 80f5 	bpl.w	3e136 <ull_conn_done+0x272>
		conn->supervision_expire = 0U;
   3df4c:	2500      	movs	r5, #0
   3df4e:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   3df52:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   3df56:	b12b      	cbz	r3, 3df64 <ull_conn_done+0xa0>
		if (conn->procedure_expire > elapsed_event) {
   3df58:	42b3      	cmp	r3, r6
   3df5a:	f240 80ff 	bls.w	3e15c <ull_conn_done+0x298>
			conn->procedure_expire -= elapsed_event;
   3df5e:	1b9b      	subs	r3, r3, r6
   3df60:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   3df64:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   3df68:	b12b      	cbz	r3, 3df76 <ull_conn_done+0xb2>
		if (conn->apto_expire > elapsed_event) {
   3df6a:	42b3      	cmp	r3, r6
   3df6c:	f240 813f 	bls.w	3e1ee <ull_conn_done+0x32a>
			conn->apto_expire -= elapsed_event;
   3df70:	1b9b      	subs	r3, r3, r6
   3df72:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   3df76:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
   3df7a:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   3df7e:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
   3df82:	2a00      	cmp	r2, #0
   3df84:	f040 80d1 	bne.w	3e12a <ull_conn_done+0x266>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3df88:	1a5b      	subs	r3, r3, r1
   3df8a:	f003 0303 	and.w	r3, r3, #3
   3df8e:	2b02      	cmp	r3, #2
   3df90:	f000 80f7 	beq.w	3e182 <ull_conn_done+0x2be>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   3df94:	f894 2118 	ldrb.w	r2, [r4, #280]	; 0x118
   3df98:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   3df9c:	429a      	cmp	r2, r3
   3df9e:	f000 80f7 	beq.w	3e190 <ull_conn_done+0x2cc>
		lll->latency_event = 0U;
   3dfa2:	2200      	movs	r2, #0
   3dfa4:	8622      	strh	r2, [r4, #48]	; 0x30
	if ((force) || (latency_event != lll->latency_event)) {
   3dfa6:	e9dd 6308 	ldrd	r6, r3, [sp, #32]
   3dfaa:	2d00      	cmp	r5, #0
   3dfac:	f000 80b4 	beq.w	3e118 <ull_conn_done+0x254>
		lazy = lll->latency_event + 1U;
   3dfb0:	3201      	adds	r2, #1
   3dfb2:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3dfb4:	b913      	cbnz	r3, 3dfbc <ull_conn_done+0xf8>
   3dfb6:	2e00      	cmp	r6, #0
   3dfb8:	f000 80cc 	beq.w	3e154 <ull_conn_done+0x290>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   3dfbc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3dfc0:	4fac      	ldr	r7, [pc, #688]	; (3e274 <ull_conn_done+0x3b0>)
		struct ll_conn *conn = lll->hdr.parent;
   3dfc2:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3dfc4:	9406      	str	r4, [sp, #24]
   3dfc6:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   3dfc8:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   3dfca:	9103      	str	r1, [sp, #12]
   3dfcc:	b2d2      	uxtb	r2, r2
   3dfce:	9504      	str	r5, [sp, #16]
   3dfd0:	9600      	str	r6, [sp, #0]
   3dfd2:	9705      	str	r7, [sp, #20]
   3dfd4:	e9cd 0001 	strd	r0, r0, [sp, #4]
   3dfd8:	2101      	movs	r1, #1
   3dfda:	f7f7 fbb3 	bl	35744 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3dfde:	f030 0302 	bics.w	r3, r0, #2
   3dfe2:	d010      	beq.n	3e006 <ull_conn_done+0x142>
   3dfe4:	f7f9 ff06 	bl	37df4 <ull_disable_mark_get>
   3dfe8:	4284      	cmp	r4, r0
   3dfea:	d00c      	beq.n	3e006 <ull_conn_done+0x142>
   3dfec:	f240 63cf 	movw	r3, #1743	; 0x6cf
   3dff0:	4aa1      	ldr	r2, [pc, #644]	; (3e278 <ull_conn_done+0x3b4>)
   3dff2:	49a2      	ldr	r1, [pc, #648]	; (3e27c <ull_conn_done+0x3b8>)
   3dff4:	48a2      	ldr	r0, [pc, #648]	; (3e280 <ull_conn_done+0x3bc>)
   3dff6:	f00c f871 	bl	4a0dc <printk>
   3dffa:	4040      	eors	r0, r0
   3dffc:	f380 8811 	msr	BASEPRI, r0
   3e000:	f04f 0003 	mov.w	r0, #3
   3e004:	df02      	svc	2
}
   3e006:	b00b      	add	sp, #44	; 0x2c
   3e008:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   3e00a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3e00e:	0718      	lsls	r0, r3, #28
   3e010:	f140 809a 	bpl.w	3e148 <ull_conn_done+0x284>
					    (lll->latency + 6)) ?
   3e014:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   3e016:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   3e01a:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   3e01c:	4299      	cmp	r1, r3
   3e01e:	bfc4      	itt	gt
   3e020:	1f8b      	subgt	r3, r1, #6
   3e022:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   3e024:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   3e028:	bfcc      	ite	gt
   3e02a:	b29b      	uxthgt	r3, r3
   3e02c:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   3e02e:	4298      	cmp	r0, r3
   3e030:	f000 80d7 	beq.w	3e1e2 <ull_conn_done+0x31e>
				conn->appto_reload = appto_reload_new;
   3e034:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   3e038:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   3e03c:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
	reason_final = conn->llcp_terminate.reason_final;
   3e040:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
	if (reason_final && (
   3e044:	2b00      	cmp	r3, #0
   3e046:	f47f af55 	bne.w	3def4 <ull_conn_done+0x30>
	latency_event = lll->latency_event;
   3e04a:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   3e04c:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	ticks_drift_plus = 0U;
   3e04e:	9309      	str	r3, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   3e050:	1c7e      	adds	r6, r7, #1
	ticks_drift_minus = 0U;
   3e052:	9308      	str	r3, [sp, #32]
	elapsed_event = latency_event + 1;
   3e054:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   3e056:	b31a      	cbz	r2, 3e0a0 <ull_conn_done+0x1dc>
		} else if (lll->role) {
   3e058:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3e05c:	2b00      	cmp	r3, #0
   3e05e:	f6bf af6d 	bge.w	3df3c <ull_conn_done+0x78>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   3e062:	aa08      	add	r2, sp, #32
   3e064:	a909      	add	r1, sp, #36	; 0x24
   3e066:	4628      	mov	r0, r5
   3e068:	f7e8 fbe2 	bl	26830 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   3e06c:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   3e070:	2b00      	cmp	r3, #0
   3e072:	f000 80e8 	beq.w	3e246 <ull_conn_done+0x382>
				lll->latency_event = 0;
   3e076:	2300      	movs	r3, #0
   3e078:	8623      	strh	r3, [r4, #48]	; 0x30
   3e07a:	e75f      	b.n	3df3c <ull_conn_done+0x78>
	if (conn == conn_upd_curr) {
   3e07c:	4981      	ldr	r1, [pc, #516]	; (3e284 <ull_conn_done+0x3c0>)
	rx->hdr.handle = conn->lll.handle;
   3e07e:	f8a4 215a 	strh.w	r2, [r4, #346]	; 0x15a
	if (conn == conn_upd_curr) {
   3e082:	6808      	ldr	r0, [r1, #0]
	*((uint8_t *)rx->pdu) = reason;
   3e084:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
	if (conn == conn_upd_curr) {
   3e088:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   3e08a:	bf04      	itt	eq
   3e08c:	2000      	moveq	r0, #0
   3e08e:	6008      	streq	r0, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3e090:	2117      	movs	r1, #23
   3e092:	f884 1158 	strb.w	r1, [r4, #344]	; 0x158
	conn_cleanup_finalize(conn);
   3e096:	4620      	mov	r0, r4
   3e098:	f7ff fea0 	bl	3dddc <conn_cleanup_finalize>
}
   3e09c:	b00b      	add	sp, #44	; 0x2c
   3e09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (done->extra.crc_valid) {
   3e0a0:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   3e0a4:	f013 0301 	ands.w	r3, r3, #1
   3e0a8:	f47f af50 	bne.w	3df4c <ull_conn_done+0x88>
	else if (conn->connect_expire) {
   3e0ac:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
   3e0b0:	2a00      	cmp	r2, #0
   3e0b2:	d040      	beq.n	3e136 <ull_conn_done+0x272>
		if (conn->connect_expire > elapsed_event) {
   3e0b4:	42b2      	cmp	r2, r6
   3e0b6:	f240 80b4 	bls.w	3e222 <ull_conn_done+0x35e>
			conn->connect_expire -= elapsed_event;
   3e0ba:	1b92      	subs	r2, r2, r6
   3e0bc:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
   3e0c0:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   3e0c4:	2d00      	cmp	r5, #0
   3e0c6:	f43f af44 	beq.w	3df52 <ull_conn_done+0x8e>
		if (conn->supervision_expire > elapsed_event) {
   3e0ca:	42ae      	cmp	r6, r5
   3e0cc:	d276      	bcs.n	3e1bc <ull_conn_done+0x2f8>
			conn->supervision_expire -= elapsed_event;
   3e0ce:	1bad      	subs	r5, r5, r6
   3e0d0:	b2ab      	uxth	r3, r5
			if (conn->supervision_expire <= 6U) {
   3e0d2:	2b06      	cmp	r3, #6
			lll->latency_event = 0U;
   3e0d4:	f04f 0500 	mov.w	r5, #0
			conn->supervision_expire -= elapsed_event;
   3e0d8:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   3e0dc:	8625      	strh	r5, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   3e0de:	d959      	bls.n	3e194 <ull_conn_done+0x2d0>
			else if (lll->role) {
   3e0e0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3e0e4:	42ab      	cmp	r3, r5
   3e0e6:	f6bf af34 	bge.w	3df52 <ull_conn_done+0x8e>
				if (latency_event) {
   3e0ea:	2f00      	cmp	r7, #0
   3e0ec:	d152      	bne.n	3e194 <ull_conn_done+0x2d0>
					force = conn->periph.force & 0x01;
   3e0ee:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
					conn->periph.force >>= 1U;
   3e0f2:	086b      	lsrs	r3, r5, #1
					if (force) {
   3e0f4:	f015 0501 	ands.w	r5, r5, #1
						conn->periph.force |= BIT(31);
   3e0f8:	bf18      	it	ne
   3e0fa:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
   3e0fe:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
   3e102:	e726      	b.n	3df52 <ull_conn_done+0x8e>
		conn->appto_expire = conn->apto_expire = 0U;
   3e104:	2300      	movs	r3, #0
   3e106:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   3e10a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	reason_final = conn->llcp_terminate.reason_final;
   3e10e:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
	if (reason_final && (
   3e112:	2b00      	cmp	r3, #0
   3e114:	d099      	beq.n	3e04a <ull_conn_done+0x186>
   3e116:	e6ed      	b.n	3def4 <ull_conn_done+0x30>
	if ((force) || (latency_event != lll->latency_event)) {
   3e118:	42ba      	cmp	r2, r7
   3e11a:	f47f af49 	bne.w	3dfb0 <ull_conn_done+0xec>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3e11e:	b913      	cbnz	r3, 3e126 <ull_conn_done+0x262>
   3e120:	2e00      	cmp	r6, #0
   3e122:	f43f af70 	beq.w	3e006 <ull_conn_done+0x142>
	lazy = 0U;
   3e126:	4629      	mov	r1, r5
   3e128:	e748      	b.n	3dfbc <ull_conn_done+0xf8>
		if (conn->appto_expire > elapsed_event) {
   3e12a:	42b2      	cmp	r2, r6
   3e12c:	d934      	bls.n	3e198 <ull_conn_done+0x2d4>
			conn->appto_expire -= elapsed_event;
   3e12e:	1b96      	subs	r6, r2, r6
   3e130:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
   3e134:	e728      	b.n	3df88 <ull_conn_done+0xc4>
		if (!conn->supervision_expire) {
   3e136:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
   3e13a:	2d00      	cmp	r5, #0
   3e13c:	d1c5      	bne.n	3e0ca <ull_conn_done+0x206>
			conn->supervision_expire = conn->supervision_reload;
   3e13e:	f8b4 50c2 	ldrh.w	r5, [r4, #194]	; 0xc2
   3e142:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
   3e146:	e7bd      	b.n	3e0c4 <ull_conn_done+0x200>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   3e148:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   3e14c:	07d9      	lsls	r1, r3, #31
   3e14e:	f57f af77 	bpl.w	3e040 <ull_conn_done+0x17c>
   3e152:	e75f      	b.n	3e014 <ull_conn_done+0x150>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3e154:	2900      	cmp	r1, #0
   3e156:	d05b      	beq.n	3e210 <ull_conn_done+0x34c>
   3e158:	4633      	mov	r3, r6
   3e15a:	e72f      	b.n	3dfbc <ull_conn_done+0xf8>
	if (conn == conn_upd_curr) {
   3e15c:	4b49      	ldr	r3, [pc, #292]	; (3e284 <ull_conn_done+0x3c0>)
   3e15e:	681a      	ldr	r2, [r3, #0]
   3e160:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   3e162:	bf04      	itt	eq
   3e164:	2200      	moveq	r2, #0
   3e166:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   3e168:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3e16a:	f8a4 315a 	strh.w	r3, [r4, #346]	; 0x15a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3e16e:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   3e170:	2322      	movs	r3, #34	; 0x22
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3e172:	f884 2158 	strb.w	r2, [r4, #344]	; 0x158
	*((uint8_t *)rx->pdu) = reason;
   3e176:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
	conn_cleanup_finalize(conn);
   3e17a:	4620      	mov	r0, r4
   3e17c:	f7ff fe2e 	bl	3dddc <conn_cleanup_finalize>
			return;
   3e180:	e741      	b.n	3e006 <ull_conn_done+0x142>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3e182:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3e186:	3b01      	subs	r3, #1
   3e188:	2b01      	cmp	r3, #1
   3e18a:	f63f af03 	bhi.w	3df94 <ull_conn_done+0xd0>
   3e18e:	e708      	b.n	3dfa2 <ull_conn_done+0xde>
   3e190:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   3e192:	e708      	b.n	3dfa6 <ull_conn_done+0xe2>
					force = 1U;
   3e194:	2501      	movs	r5, #1
   3e196:	e6dc      	b.n	3df52 <ull_conn_done+0x8e>
			if ((conn->procedure_expire == 0U) &&
   3e198:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   3e19c:	2000      	movs	r0, #0
   3e19e:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   3e1a2:	2a00      	cmp	r2, #0
   3e1a4:	f47f aef0 	bne.w	3df88 <ull_conn_done+0xc4>
   3e1a8:	428b      	cmp	r3, r1
   3e1aa:	f47f aeed 	bne.w	3df88 <ull_conn_done+0xc4>
				conn->llcp_ack -= 2U;
   3e1ae:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   3e1b0:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   3e1b2:	f884 30f1 	strb.w	r3, [r4, #241]	; 0xf1
				conn->llcp_type = LLCP_PING;
   3e1b6:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   3e1ba:	e6eb      	b.n	3df94 <ull_conn_done+0xd0>
	if (conn == conn_upd_curr) {
   3e1bc:	4b31      	ldr	r3, [pc, #196]	; (3e284 <ull_conn_done+0x3c0>)
   3e1be:	681a      	ldr	r2, [r3, #0]
   3e1c0:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   3e1c2:	bf04      	itt	eq
   3e1c4:	2200      	moveq	r2, #0
   3e1c6:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   3e1c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3e1ca:	f8a4 315a 	strh.w	r3, [r4, #346]	; 0x15a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3e1ce:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   3e1d0:	2308      	movs	r3, #8
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3e1d2:	f884 2158 	strb.w	r2, [r4, #344]	; 0x158
	*((uint8_t *)rx->pdu) = reason;
   3e1d6:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
	conn_cleanup_finalize(conn);
   3e1da:	4620      	mov	r0, r4
   3e1dc:	f7ff fdfe 	bl	3dddc <conn_cleanup_finalize>
			return;
   3e1e0:	e711      	b.n	3e006 <ull_conn_done+0x142>
			if (conn->apto_expire == 0U) {
   3e1e2:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
   3e1e6:	2800      	cmp	r0, #0
   3e1e8:	f47f af2a 	bne.w	3e040 <ull_conn_done+0x17c>
   3e1ec:	e724      	b.n	3e038 <ull_conn_done+0x174>
			rx = ll_pdu_rx_alloc();
   3e1ee:	f7f9 fd53 	bl	37c98 <ll_pdu_rx_alloc>
			if (rx) {
   3e1f2:	b190      	cbz	r0, 3e21a <ull_conn_done+0x356>
				conn->apto_expire = 0U;
   3e1f4:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   3e1f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   3e1f8:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				rx->type = NODE_RX_TYPE_APTO;
   3e1fc:	231a      	movs	r3, #26
				rx->handle = lll->handle;
   3e1fe:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   3e200:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   3e202:	4601      	mov	r1, r0
   3e204:	6800      	ldr	r0, [r0, #0]
   3e206:	f7f9 fd17 	bl	37c38 <ll_rx_put>
				ll_rx_sched();
   3e20a:	f7f9 fd1f 	bl	37c4c <ll_rx_sched>
   3e20e:	e6b2      	b.n	3df76 <ull_conn_done+0xb2>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   3e210:	2d00      	cmp	r5, #0
   3e212:	f43f aef8 	beq.w	3e006 <ull_conn_done+0x142>
   3e216:	4633      	mov	r3, r6
   3e218:	e6d0      	b.n	3dfbc <ull_conn_done+0xf8>
				conn->apto_expire = 1U;
   3e21a:	2301      	movs	r3, #1
   3e21c:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   3e220:	e6a9      	b.n	3df76 <ull_conn_done+0xb2>
	if (conn == conn_upd_curr) {
   3e222:	4a18      	ldr	r2, [pc, #96]	; (3e284 <ull_conn_done+0x3c0>)
   3e224:	6811      	ldr	r1, [r2, #0]
   3e226:	428c      	cmp	r4, r1
		conn_upd_curr = NULL;
   3e228:	bf08      	it	eq
   3e22a:	6013      	streq	r3, [r2, #0]
	rx->hdr.handle = conn->lll.handle;
   3e22c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   3e22e:	f8a4 315a 	strh.w	r3, [r4, #346]	; 0x15a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3e232:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   3e234:	233e      	movs	r3, #62	; 0x3e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   3e236:	f884 2158 	strb.w	r2, [r4, #344]	; 0x158
	*((uint8_t *)rx->pdu) = reason;
   3e23a:	f884 3170 	strb.w	r3, [r4, #368]	; 0x170
	conn_cleanup_finalize(conn);
   3e23e:	4620      	mov	r0, r4
   3e240:	f7ff fdcc 	bl	3dddc <conn_cleanup_finalize>
			return;
   3e244:	e6df      	b.n	3e006 <ull_conn_done+0x142>
				ull_conn_tx_demux(UINT8_MAX);
   3e246:	20ff      	movs	r0, #255	; 0xff
   3e248:	f7ff fd72 	bl	3dd30 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   3e24c:	f8d4 21d4 	ldr.w	r2, [r4, #468]	; 0x1d4
   3e250:	2a00      	cmp	r2, #0
   3e252:	f47f af10 	bne.w	3e076 <ull_conn_done+0x1b2>
   3e256:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   3e25a:	f7f5 fe61 	bl	33f20 <memq_peek>
   3e25e:	2800      	cmp	r0, #0
   3e260:	f47f af09 	bne.w	3e076 <ull_conn_done+0x1b2>
			} else if (lll->periph.latency_enabled) {
   3e264:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   3e268:	075a      	lsls	r2, r3, #29
   3e26a:	f57f ae67 	bpl.w	3df3c <ull_conn_done+0x78>
				lll->latency_event = lll->latency;
   3e26e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   3e270:	8623      	strh	r3, [r4, #48]	; 0x30
   3e272:	e663      	b.n	3df3c <ull_conn_done+0x78>
   3e274:	00039a8d 	.word	0x00039a8d
   3e278:	00053248 	.word	0x00053248
   3e27c:	00053358 	.word	0x00053358
   3e280:	00052d50 	.word	0x00052d50
   3e284:	200052b4 	.word	0x200052b4

0003e288 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   3e288:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
   3e28c:	2b00      	cmp	r3, #0
   3e28e:	f000 80c1 	beq.w	3e414 <ull_conn_tx_lll_enqueue+0x18c>
   3e292:	3901      	subs	r1, #1
{
   3e294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3e298:	4604      	mov	r4, r0
   3e29a:	b2cd      	uxtb	r5, r1
		link = mem_acquire(&mem_link_tx.free);
   3e29c:	4e5e      	ldr	r6, [pc, #376]	; (3e418 <ull_conn_tx_lll_enqueue+0x190>)
		LL_ASSERT(link);
   3e29e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 3e424 <ull_conn_tx_lll_enqueue+0x19c>
   3e2a2:	4f5e      	ldr	r7, [pc, #376]	; (3e41c <ull_conn_tx_lll_enqueue+0x194>)
   3e2a4:	e011      	b.n	3e2ca <ull_conn_tx_lll_enqueue+0x42>
		link = mem_acquire(&mem_link_tx.free);
   3e2a6:	4630      	mov	r0, r6
   3e2a8:	f7f5 fdce 	bl	33e48 <mem_acquire>
		LL_ASSERT(link);
   3e2ac:	4682      	mov	sl, r0
   3e2ae:	2800      	cmp	r0, #0
   3e2b0:	d042      	beq.n	3e338 <ull_conn_tx_lll_enqueue+0xb0>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   3e2b2:	4649      	mov	r1, r9
   3e2b4:	4650      	mov	r0, sl
   3e2b6:	f104 0268 	add.w	r2, r4, #104	; 0x68
   3e2ba:	f7f5 fe29 	bl	33f10 <memq_enqueue>
	while (conn->tx_head &&
   3e2be:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
   3e2c2:	3d01      	subs	r5, #1
   3e2c4:	b2ed      	uxtb	r5, r5
   3e2c6:	2b00      	cmp	r3, #0
   3e2c8:	d05e      	beq.n	3e388 <ull_conn_tx_lll_enqueue+0x100>
		 !conn->llcp_phy.pause_tx &&
   3e2ca:	f894 21cf 	ldrb.w	r2, [r4, #463]	; 0x1cf
	while (conn->tx_head &&
   3e2ce:	07d1      	lsls	r1, r2, #31
   3e2d0:	d403      	bmi.n	3e2da <ull_conn_tx_lll_enqueue+0x52>
		 !conn->llcp_enc.pause_tx &&
   3e2d2:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
		 !conn->llcp_phy.pause_tx &&
   3e2d6:	0792      	lsls	r2, r2, #30
   3e2d8:	d53c      	bpl.n	3e354 <ull_conn_tx_lll_enqueue+0xcc>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   3e2da:	f8d4 21d8 	ldr.w	r2, [r4, #472]	; 0x1d8
   3e2de:	4293      	cmp	r3, r2
   3e2e0:	d152      	bne.n	3e388 <ull_conn_tx_lll_enqueue+0x100>
   3e2e2:	2dff      	cmp	r5, #255	; 0xff
   3e2e4:	d050      	beq.n	3e388 <ull_conn_tx_lll_enqueue+0x100>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3e2e6:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
   3e2ea:	4620      	mov	r0, r4
   3e2ec:	f7fb f95a 	bl	395a4 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3e2f0:	7903      	ldrb	r3, [r0, #4]
   3e2f2:	f003 0303 	and.w	r3, r3, #3
   3e2f6:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   3e2f8:	4681      	mov	r9, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3e2fa:	d1d4      	bne.n	3e2a6 <ull_conn_tx_lll_enqueue+0x1e>
			ctrl_tx_pre_ack(conn, pdu_tx);
   3e2fc:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   3e2fe:	2b17      	cmp	r3, #23
   3e300:	d8d1      	bhi.n	3e2a6 <ull_conn_tx_lll_enqueue+0x1e>
   3e302:	2201      	movs	r2, #1
   3e304:	fa02 f303 	lsl.w	r3, r2, r3
   3e308:	f413 6f83 	tst.w	r3, #1048	; 0x418
   3e30c:	d108      	bne.n	3e320 <ull_conn_tx_lll_enqueue+0x98>
   3e30e:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
   3e312:	d13b      	bne.n	3e38c <ull_conn_tx_lll_enqueue+0x104>
   3e314:	0518      	lsls	r0, r3, #20
   3e316:	d5c6      	bpl.n	3e2a6 <ull_conn_tx_lll_enqueue+0x1e>
		if (!conn->lll.role) {
   3e318:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   3e31c:	2b00      	cmp	r3, #0
   3e31e:	dac2      	bge.n	3e2a6 <ull_conn_tx_lll_enqueue+0x1e>
		conn->llcp_enc.pause_tx = 1U;
   3e320:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   3e324:	f043 0302 	orr.w	r3, r3, #2
   3e328:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
		link = mem_acquire(&mem_link_tx.free);
   3e32c:	4630      	mov	r0, r6
   3e32e:	f7f5 fd8b 	bl	33e48 <mem_acquire>
		LL_ASSERT(link);
   3e332:	4682      	mov	sl, r0
   3e334:	2800      	cmp	r0, #0
   3e336:	d1bc      	bne.n	3e2b2 <ull_conn_tx_lll_enqueue+0x2a>
   3e338:	f240 7326 	movw	r3, #1830	; 0x726
   3e33c:	4642      	mov	r2, r8
   3e33e:	4639      	mov	r1, r7
   3e340:	4837      	ldr	r0, [pc, #220]	; (3e420 <ull_conn_tx_lll_enqueue+0x198>)
   3e342:	f00b fecb 	bl	4a0dc <printk>
   3e346:	4040      	eors	r0, r0
   3e348:	f380 8811 	msr	BASEPRI, r0
   3e34c:	f04f 0003 	mov.w	r0, #3
   3e350:	df02      	svc	2
   3e352:	e7ae      	b.n	3e2b2 <ull_conn_tx_lll_enqueue+0x2a>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   3e354:	791a      	ldrb	r2, [r3, #4]
   3e356:	f002 0203 	and.w	r2, r2, #3
   3e35a:	2a03      	cmp	r2, #3
   3e35c:	d1c1      	bne.n	3e2e2 <ull_conn_tx_lll_enqueue+0x5a>
	    ((pdu_data_tx->llctrl.opcode ==
   3e35e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   3e360:	2a03      	cmp	r2, #3
   3e362:	d001      	beq.n	3e368 <ull_conn_tx_lll_enqueue+0xe0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   3e364:	2a0a      	cmp	r2, #10
   3e366:	d1bc      	bne.n	3e2e2 <ull_conn_tx_lll_enqueue+0x5a>
		if (((conn->llcp_req != conn->llcp_ack) &&
   3e368:	f894 10f1 	ldrb.w	r1, [r4, #241]	; 0xf1
   3e36c:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3e370:	428a      	cmp	r2, r1
   3e372:	d012      	beq.n	3e39a <ull_conn_tx_lll_enqueue+0x112>
   3e374:	f894 20f2 	ldrb.w	r2, [r4, #242]	; 0xf2
   3e378:	2a03      	cmp	r2, #3
   3e37a:	d0b2      	beq.n	3e2e2 <ull_conn_tx_lll_enqueue+0x5a>
			if ((tx->next != NULL) &&
   3e37c:	681a      	ldr	r2, [r3, #0]
   3e37e:	b11a      	cbz	r2, 3e388 <ull_conn_tx_lll_enqueue+0x100>
   3e380:	f8d4 11d8 	ldr.w	r1, [r4, #472]	; 0x1d8
   3e384:	4291      	cmp	r1, r2
   3e386:	d034      	beq.n	3e3f2 <ull_conn_tx_lll_enqueue+0x16a>
}
   3e388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   3e38c:	f894 31cf 	ldrb.w	r3, [r4, #463]	; 0x1cf
   3e390:	f043 0301 	orr.w	r3, r3, #1
   3e394:	f884 31cf 	strb.w	r3, [r4, #463]	; 0x1cf
		break;
   3e398:	e785      	b.n	3e2a6 <ull_conn_tx_lll_enqueue+0x1e>
		    ((conn->llcp_req == conn->llcp_ack) &&
   3e39a:	f894 0131 	ldrb.w	r0, [r4, #305]	; 0x131
   3e39e:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
   3e3a2:	4288      	cmp	r0, r1
   3e3a4:	d1ea      	bne.n	3e37c <ull_conn_tx_lll_enqueue+0xf4>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   3e3a6:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
   3e3aa:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
   3e3ae:	4288      	cmp	r0, r1
   3e3b0:	d1e4      	bne.n	3e37c <ull_conn_tx_lll_enqueue+0xf4>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   3e3b2:	f894 0195 	ldrb.w	r0, [r4, #405]	; 0x195
   3e3b6:	f894 1194 	ldrb.w	r1, [r4, #404]	; 0x194
   3e3ba:	4288      	cmp	r0, r1
   3e3bc:	d1de      	bne.n	3e37c <ull_conn_tx_lll_enqueue+0xf4>
		       conn->llcp_conn_param.req) ||
   3e3be:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   3e3c2:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   3e3c6:	4288      	cmp	r0, r1
   3e3c8:	d1d8      	bne.n	3e37c <ull_conn_tx_lll_enqueue+0xf4>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   3e3ca:	f894 01cd 	ldrb.w	r0, [r4, #461]	; 0x1cd
   3e3ce:	f894 11cc 	ldrb.w	r1, [r4, #460]	; 0x1cc
   3e3d2:	4288      	cmp	r0, r1
   3e3d4:	d1d2      	bne.n	3e37c <ull_conn_tx_lll_enqueue+0xf4>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3e3d6:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
   3e3da:	2101      	movs	r1, #1
   3e3dc:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   3e3e0:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   3e3e2:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   3e3e4:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   3e3e8:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
			conn->llcp_type = LLCP_ENCRYPTION;
   3e3ec:	f884 10f2 	strb.w	r1, [r4, #242]	; 0xf2
			conn->llcp_ack -= 2U;
   3e3f0:	e777      	b.n	3e2e2 <ull_conn_tx_lll_enqueue+0x5a>
				tx->next = conn->tx_ctrl_last->next;
   3e3f2:	f8d4 21dc 	ldr.w	r2, [r4, #476]	; 0x1dc
				if (!conn->tx_data_last) {
   3e3f6:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
				conn->tx_head = tx->next;
   3e3fa:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   3e3fe:	6811      	ldr	r1, [r2, #0]
   3e400:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   3e402:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   3e404:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
				if (!conn->tx_data_last) {
   3e408:	2800      	cmp	r0, #0
   3e40a:	f47f af6a 	bne.w	3e2e2 <ull_conn_tx_lll_enqueue+0x5a>
					conn->tx_data_last = tx;
   3e40e:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
   3e412:	e766      	b.n	3e2e2 <ull_conn_tx_lll_enqueue+0x5a>
   3e414:	4770      	bx	lr
   3e416:	bf00      	nop
   3e418:	2000576c 	.word	0x2000576c
   3e41c:	00053350 	.word	0x00053350
   3e420:	00052d50 	.word	0x00052d50
   3e424:	00053248 	.word	0x00053248

0003e428 <tx_demux>:
{
   3e428:	b510      	push	{r4, lr}
   3e42a:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   3e42c:	2001      	movs	r0, #1
   3e42e:	f7ff fc7f 	bl	3dd30 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   3e432:	4620      	mov	r0, r4
   3e434:	2101      	movs	r1, #1
}
   3e436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   3e43a:	f7ff bf25 	b.w	3e288 <ull_conn_tx_lll_enqueue>
   3e43e:	bf00      	nop

0003e440 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   3e440:	4901      	ldr	r1, [pc, #4]	; (3e448 <ull_conn_link_tx_release+0x8>)
   3e442:	f7f5 bd1b 	b.w	33e7c <mem_release>
   3e446:	bf00      	nop
   3e448:	2000576c 	.word	0x2000576c

0003e44c <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   3e44c:	4b01      	ldr	r3, [pc, #4]	; (3e454 <ull_conn_ack_last_idx_get+0x8>)
}
   3e44e:	78d8      	ldrb	r0, [r3, #3]
   3e450:	4770      	bx	lr
   3e452:	bf00      	nop
   3e454:	2000098c 	.word	0x2000098c

0003e458 <ull_conn_ack_peek>:
{
   3e458:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   3e45a:	4b0b      	ldr	r3, [pc, #44]	; (3e488 <ull_conn_ack_peek+0x30>)
   3e45c:	789c      	ldrb	r4, [r3, #2]
   3e45e:	78dd      	ldrb	r5, [r3, #3]
   3e460:	781e      	ldrb	r6, [r3, #0]
	if (first == last) {
   3e462:	42ac      	cmp	r4, r5
   3e464:	d00d      	beq.n	3e482 <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   3e466:	3304      	adds	r3, #4
   3e468:	fb14 f406 	smulbb	r4, r4, r6
	if (!lll_tx) {
   3e46c:	4607      	mov	r7, r0
   3e46e:	1918      	adds	r0, r3, r4
   3e470:	d005      	beq.n	3e47e <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   3e472:	703d      	strb	r5, [r7, #0]
	*handle = lll_tx->handle;
   3e474:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   3e476:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   3e478:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   3e47a:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   3e47c:	6818      	ldr	r0, [r3, #0]
}
   3e47e:	bcf0      	pop	{r4, r5, r6, r7}
   3e480:	4770      	bx	lr
		return NULL;
   3e482:	2000      	movs	r0, #0
   3e484:	e7fb      	b.n	3e47e <ull_conn_ack_peek+0x26>
   3e486:	bf00      	nop
   3e488:	2000098c 	.word	0x2000098c

0003e48c <ull_conn_ack_by_last_peek>:
{
   3e48c:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   3e48e:	4b09      	ldr	r3, [pc, #36]	; (3e4b4 <ull_conn_ack_by_last_peek+0x28>)
   3e490:	789c      	ldrb	r4, [r3, #2]
   3e492:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   3e494:	4284      	cmp	r4, r0
   3e496:	d00b      	beq.n	3e4b0 <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   3e498:	3304      	adds	r3, #4
   3e49a:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   3e49e:	1918      	adds	r0, r3, r4
   3e4a0:	d004      	beq.n	3e4ac <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   3e4a2:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   3e4a4:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   3e4a6:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   3e4a8:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   3e4aa:	6818      	ldr	r0, [r3, #0]
}
   3e4ac:	bc30      	pop	{r4, r5}
   3e4ae:	4770      	bx	lr
		return NULL;
   3e4b0:	2000      	movs	r0, #0
   3e4b2:	e7fb      	b.n	3e4ac <ull_conn_ack_by_last_peek+0x20>
   3e4b4:	2000098c 	.word	0x2000098c

0003e4b8 <ull_conn_ack_dequeue>:
{
   3e4b8:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   3e4ba:	4b0a      	ldr	r3, [pc, #40]	; (3e4e4 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   3e4bc:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   3e4be:	78da      	ldrb	r2, [r3, #3]
   3e4c0:	7818      	ldrb	r0, [r3, #0]
   3e4c2:	785c      	ldrb	r4, [r3, #1]
   3e4c4:	428a      	cmp	r2, r1
   3e4c6:	d00a      	beq.n	3e4de <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   3e4c8:	1c4a      	adds	r2, r1, #1
   3e4ca:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   3e4cc:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   3e4d0:	4294      	cmp	r4, r2
   3e4d2:	bf08      	it	eq
   3e4d4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   3e4d6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   3e4d8:	709a      	strb	r2, [r3, #2]
}
   3e4da:	bc10      	pop	{r4}
   3e4dc:	4770      	bx	lr
		return NULL;
   3e4de:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   3e4e0:	e7fb      	b.n	3e4da <ull_conn_ack_dequeue+0x22>
   3e4e2:	bf00      	nop
   3e4e4:	2000098c 	.word	0x2000098c

0003e4e8 <ull_conn_lll_ack_enqueue>:
{
   3e4e8:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   3e4ea:	4a13      	ldr	r2, [pc, #76]	; (3e538 <ull_conn_lll_ack_enqueue+0x50>)
   3e4ec:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   3e4ee:	7855      	ldrb	r5, [r2, #1]
   3e4f0:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   3e4f2:	1c73      	adds	r3, r6, #1
   3e4f4:	b2db      	uxtb	r3, r3
		last = 0U;
   3e4f6:	429d      	cmp	r5, r3
   3e4f8:	bf08      	it	eq
   3e4fa:	2300      	moveq	r3, #0
	if (last == first) {
   3e4fc:	429c      	cmp	r4, r3
   3e4fe:	d00a      	beq.n	3e516 <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   3e500:	4615      	mov	r5, r2
   3e502:	f815 4b04 	ldrb.w	r4, [r5], #4
   3e506:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   3e50a:	192e      	adds	r6, r5, r4
   3e50c:	d003      	beq.n	3e516 <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   3e50e:	5328      	strh	r0, [r5, r4]
	lll_tx->node = tx;
   3e510:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   3e512:	70d3      	strb	r3, [r2, #3]
}
   3e514:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   3e516:	f240 7376 	movw	r3, #1910	; 0x776
   3e51a:	4a08      	ldr	r2, [pc, #32]	; (3e53c <ull_conn_lll_ack_enqueue+0x54>)
   3e51c:	4908      	ldr	r1, [pc, #32]	; (3e540 <ull_conn_lll_ack_enqueue+0x58>)
   3e51e:	4809      	ldr	r0, [pc, #36]	; (3e544 <ull_conn_lll_ack_enqueue+0x5c>)
   3e520:	f00b fddc 	bl	4a0dc <printk>
   3e524:	4040      	eors	r0, r0
   3e526:	f380 8811 	msr	BASEPRI, r0
   3e52a:	f04f 0003 	mov.w	r0, #3
   3e52e:	df02      	svc	2
	lll_tx->handle = handle;
   3e530:	2300      	movs	r3, #0
   3e532:	801b      	strh	r3, [r3, #0]
   3e534:	deff      	udf	#255	; 0xff
   3e536:	bf00      	nop
   3e538:	2000098c 	.word	0x2000098c
   3e53c:	00053248 	.word	0x00053248
   3e540:	00053340 	.word	0x00053340
   3e544:	00052d50 	.word	0x00052d50

0003e548 <ull_conn_tx_ack>:
{
   3e548:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   3e54a:	7953      	ldrb	r3, [r2, #5]
{
   3e54c:	b083      	sub	sp, #12
   3e54e:	4614      	mov	r4, r2
   3e550:	4605      	mov	r5, r0
   3e552:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   3e554:	b37b      	cbz	r3, 3e5b6 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   3e556:	7923      	ldrb	r3, [r4, #4]
   3e558:	f003 0203 	and.w	r2, r3, #3
   3e55c:	2a03      	cmp	r2, #3
   3e55e:	d00d      	beq.n	3e57c <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   3e560:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3e564:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   3e566:	bf04      	itt	eq
   3e568:	f36f 0301 	bfceq	r3, #0, #2
   3e56c:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   3e56e:	4621      	mov	r1, r4
   3e570:	4628      	mov	r0, r5
}
   3e572:	b003      	add	sp, #12
   3e574:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   3e578:	f7f9 bba6 	b.w	37cc8 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   3e57c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3e580:	429d      	cmp	r5, r3
   3e582:	d126      	bne.n	3e5d2 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   3e584:	6830      	ldr	r0, [r6, #0]
   3e586:	4284      	cmp	r4, r0
   3e588:	d04b      	beq.n	3e622 <ull_conn_tx_ack+0xda>
		LL_ASSERT(!link->next);
   3e58a:	2800      	cmp	r0, #0
   3e58c:	d0ef      	beq.n	3e56e <ull_conn_tx_ack+0x26>
   3e58e:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   3e592:	4ac7      	ldr	r2, [pc, #796]	; (3e8b0 <ull_conn_tx_ack+0x368>)
   3e594:	49c7      	ldr	r1, [pc, #796]	; (3e8b4 <ull_conn_tx_ack+0x36c>)
   3e596:	48c8      	ldr	r0, [pc, #800]	; (3e8b8 <ull_conn_tx_ack+0x370>)
   3e598:	f00b fda0 	bl	4a0dc <printk>
   3e59c:	4040      	eors	r0, r0
   3e59e:	f380 8811 	msr	BASEPRI, r0
   3e5a2:	f04f 0003 	mov.w	r0, #3
   3e5a6:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   3e5a8:	4621      	mov	r1, r4
   3e5aa:	4628      	mov	r0, r5
}
   3e5ac:	b003      	add	sp, #12
   3e5ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   3e5b2:	f7f9 bb89 	b.w	37cc8 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   3e5b6:	f240 7383 	movw	r3, #1923	; 0x783
   3e5ba:	4abd      	ldr	r2, [pc, #756]	; (3e8b0 <ull_conn_tx_ack+0x368>)
   3e5bc:	49bf      	ldr	r1, [pc, #764]	; (3e8bc <ull_conn_tx_ack+0x374>)
   3e5be:	48be      	ldr	r0, [pc, #760]	; (3e8b8 <ull_conn_tx_ack+0x370>)
   3e5c0:	f00b fd8c 	bl	4a0dc <printk>
   3e5c4:	4040      	eors	r0, r0
   3e5c6:	f380 8811 	msr	BASEPRI, r0
   3e5ca:	f04f 0003 	mov.w	r0, #3
   3e5ce:	df02      	svc	2
   3e5d0:	e7c1      	b.n	3e556 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3e5d2:	462a      	mov	r2, r5
   3e5d4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   3e5d8:	48b9      	ldr	r0, [pc, #740]	; (3e8c0 <ull_conn_tx_ack+0x378>)
   3e5da:	f7f5 fc67 	bl	33eac <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   3e5de:	79e3      	ldrb	r3, [r4, #7]
   3e5e0:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   3e5e2:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   3e5e4:	2b16      	cmp	r3, #22
   3e5e6:	d818      	bhi.n	3e61a <ull_conn_tx_ack+0xd2>
   3e5e8:	e8df f013 	tbh	[pc, r3, lsl #1]
   3e5ec:	00430060 	.word	0x00430060
   3e5f0:	002b0032 	.word	0x002b0032
   3e5f4:	0024007d 	.word	0x0024007d
   3e5f8:	00240017 	.word	0x00240017
   3e5fc:	008f00d4 	.word	0x008f00d4
   3e600:	00390017 	.word	0x00390017
   3e604:	00170017 	.word	0x00170017
   3e608:	00210017 	.word	0x00210017
   3e60c:	00240017 	.word	0x00240017
   3e610:	01120142 	.word	0x01120142
   3e614:	00e500f1 	.word	0x00e500f1
   3e618:	006c      	.short	0x006c
		if (link->next == (void *)tx) {
   3e61a:	6830      	ldr	r0, [r6, #0]
   3e61c:	42a0      	cmp	r0, r4
   3e61e:	d1b4      	bne.n	3e58a <ull_conn_tx_ack+0x42>
   3e620:	4620      	mov	r0, r4
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3e622:	49a8      	ldr	r1, [pc, #672]	; (3e8c4 <ull_conn_tx_ack+0x37c>)
}
   3e624:	b003      	add	sp, #12
   3e626:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   3e62a:	f7f5 bc27 	b.w	33e7c <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   3e62e:	7a23      	ldrb	r3, [r4, #8]
   3e630:	2b03      	cmp	r3, #3
   3e632:	d014      	beq.n	3e65e <ull_conn_tx_ack+0x116>
			conn->common.txn_lock = 0U;
   3e634:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
   3e638:	f36f 0341 	bfc	r3, #1, #1
   3e63c:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
			break;
   3e640:	e7a0      	b.n	3e584 <ull_conn_tx_ack+0x3c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   3e642:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
   3e646:	f043 0303 	orr.w	r3, r3, #3
   3e64a:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
   3e64e:	e799      	b.n	3e584 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   3e650:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
   3e654:	f043 0302 	orr.w	r3, r3, #2
   3e658:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
   3e65c:	e792      	b.n	3e584 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   3e65e:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
		conn->procedure_expire = 0U;
   3e662:	2200      	movs	r2, #0
		conn->llcp_enc.pause_rx = 0U;
   3e664:	f023 0303 	bic.w	r3, r3, #3
   3e668:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		conn->procedure_expire = 0U;
   3e66c:	f8a7 20c8 	strh.w	r2, [r7, #200]	; 0xc8
		break;
   3e670:	e788      	b.n	3e584 <ull_conn_tx_ack+0x3c>
		memcpy(&conn->llcp.encryption.skd[0],
   3e672:	2208      	movs	r2, #8
   3e674:	f104 0112 	add.w	r1, r4, #18
   3e678:	f500 7081 	add.w	r0, r0, #258	; 0x102
   3e67c:	f00d fe36 	bl	4c2ec <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   3e680:	2204      	movs	r2, #4
   3e682:	f104 011a 	add.w	r1, r4, #26
   3e686:	f107 0094 	add.w	r0, r7, #148	; 0x94
   3e68a:	f00d fe2f 	bl	4c2ec <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   3e68e:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3e692:	f8b7 10c6 	ldrh.w	r1, [r7, #198]	; 0xc6
		conn->llcp_enc.ack = conn->llcp_enc.req;
   3e696:	f897 2174 	ldrb.w	r2, [r7, #372]	; 0x174
		conn->procedure_expire = conn->procedure_reload;
   3e69a:	f8a7 10c8 	strh.w	r1, [r7, #200]	; 0xc8
		conn->llcp_enc.pause_tx = 1U;
   3e69e:	f043 0302 	orr.w	r3, r3, #2
   3e6a2:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
		conn->llcp_enc.ack = conn->llcp_enc.req;
   3e6a6:	f887 2175 	strb.w	r2, [r7, #373]	; 0x175
		break;
   3e6aa:	e76b      	b.n	3e584 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   3e6ac:	7a23      	ldrb	r3, [r4, #8]
		conn->llcp_terminate.ack--;
   3e6ae:	f890 2151 	ldrb.w	r2, [r0, #337]	; 0x151
			conn->llcp_terminate.reason_final =
   3e6b2:	2b13      	cmp	r3, #19
   3e6b4:	bf08      	it	eq
   3e6b6:	2316      	moveq	r3, #22
		conn->llcp_terminate.ack--;
   3e6b8:	3a01      	subs	r2, #1
   3e6ba:	f880 3153 	strb.w	r3, [r0, #339]	; 0x153
   3e6be:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
	break;
   3e6c2:	e75f      	b.n	3e584 <ull_conn_tx_ack+0x3c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3e6c4:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
   3e6c8:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3e6cc:	f890 21cf 	ldrb.w	r2, [r0, #463]	; 0x1cf
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3e6d0:	f3c3 0382 	ubfx	r3, r3, #2, #3
   3e6d4:	f363 1106 	bfi	r1, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   3e6d8:	f36f 0200 	bfc	r2, #0, #1
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   3e6dc:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   3e6e0:	f880 21cf 	strb.w	r2, [r0, #463]	; 0x1cf
		break;
   3e6e4:	e74e      	b.n	3e584 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   3e6e6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e6ea:	2b00      	cmp	r3, #0
   3e6ec:	daa9      	bge.n	3e642 <ull_conn_tx_ack+0xfa>
			conn->llcp_enc.pause_rx = 0U;
   3e6ee:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
			conn->llcp_ack = conn->llcp_req;
   3e6f2:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3e6f6:	f880 20f1 	strb.w	r2, [r0, #241]	; 0xf1
			conn->llcp_enc.pause_rx = 0U;
   3e6fa:	f023 0303 	bic.w	r3, r3, #3
			conn->procedure_expire = 0U;
   3e6fe:	2200      	movs	r2, #0
			conn->llcp_enc.pause_rx = 0U;
   3e700:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
			conn->procedure_expire = 0U;
   3e704:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   3e708:	e73c      	b.n	3e584 <ull_conn_tx_ack+0x3c>
		if (!conn->lll.role) {
   3e70a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e70e:	2b00      	cmp	r3, #0
   3e710:	db9e      	blt.n	3e650 <ull_conn_tx_ack+0x108>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e712:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3e714:	2203      	movs	r2, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e716:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3e71a:	2117      	movs	r1, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   3e71c:	71e2      	strb	r2, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   3e71e:	2208      	movs	r2, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   3e720:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   3e722:	7161      	strb	r1, [r4, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   3e724:	f200 1179 	addw	r1, r0, #377	; 0x179
   3e728:	18a0      	adds	r0, r4, r2
   3e72a:	f00d fddf 	bl	4c2ec <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   3e72e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
   3e732:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   3e734:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
   3e738:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   3e73a:	210c      	movs	r1, #12
   3e73c:	f104 0012 	add.w	r0, r4, #18
   3e740:	f002 f99e 	bl	40a80 <lll_csrand_isr_get>
	    conn->tx_head &&
   3e744:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
	if (
   3e748:	2b00      	cmp	r3, #0
   3e74a:	f000 80cd 	beq.w	3e8e8 <ull_conn_tx_ack+0x3a0>
	    !conn->llcp_enc.pause_tx &&
   3e74e:	f897 1176 	ldrb.w	r1, [r7, #374]	; 0x176
   3e752:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
	    conn->tx_head &&
   3e756:	0788      	lsls	r0, r1, #30
   3e758:	f100 80c8 	bmi.w	3e8ec <ull_conn_tx_ack+0x3a4>
	    !conn->llcp_phy.pause_tx &&
   3e75c:	f897 11cf 	ldrb.w	r1, [r7, #463]	; 0x1cf
   3e760:	07c9      	lsls	r1, r1, #31
   3e762:	f100 80c3 	bmi.w	3e8ec <ull_conn_tx_ack+0x3a4>
		if (conn->tx_head == conn->tx_data) {
   3e766:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
   3e76a:	428b      	cmp	r3, r1
   3e76c:	f000 80e3 	beq.w	3e936 <ull_conn_tx_ack+0x3ee>
		} else if (!conn->tx_ctrl) {
   3e770:	2a00      	cmp	r2, #0
   3e772:	f000 80d8 	beq.w	3e926 <ull_conn_tx_ack+0x3de>
	tx->next = conn->tx_ctrl_last->next;
   3e776:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
   3e77a:	681a      	ldr	r2, [r3, #0]
   3e77c:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   3e77e:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
   3e780:	6823      	ldr	r3, [r4, #0]
   3e782:	f8c7 41dc 	str.w	r4, [r7, #476]	; 0x1dc
	if (!tx->next) {
   3e786:	6832      	ldr	r2, [r6, #0]
   3e788:	2b00      	cmp	r3, #0
   3e78a:	d07e      	beq.n	3e88a <ull_conn_tx_ack+0x342>
		if (link->next == (void *)tx) {
   3e78c:	2a00      	cmp	r2, #0
   3e78e:	d07f      	beq.n	3e890 <ull_conn_tx_ack+0x348>
}
   3e790:	b003      	add	sp, #12
   3e792:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_enc.pause_tx = 1U;
   3e794:	f890 3176 	ldrb.w	r3, [r0, #374]	; 0x176
		conn->procedure_expire = conn->procedure_reload;
   3e798:	f8b0 20c6 	ldrh.w	r2, [r0, #198]	; 0xc6
   3e79c:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_enc.pause_tx = 1U;
   3e7a0:	f023 0306 	bic.w	r3, r3, #6
   3e7a4:	f043 0306 	orr.w	r3, r3, #6
		conn->llcp_enc.ack = conn->llcp_enc.req;
   3e7a8:	f890 2174 	ldrb.w	r2, [r0, #372]	; 0x174
		conn->llcp_enc.pause_tx = 1U;
   3e7ac:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
		conn->llcp_enc.ack = conn->llcp_enc.req;
   3e7b0:	f880 2175 	strb.w	r2, [r0, #373]	; 0x175
		break;
   3e7b4:	e6e6      	b.n	3e584 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   3e7b6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3e7ba:	2b00      	cmp	r3, #0
   3e7bc:	f2c0 8088 	blt.w	3e8d0 <ull_conn_tx_ack+0x388>
		conn->llcp_phy.pause_tx = 0U;
   3e7c0:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
   3e7c4:	f36f 0300 	bfc	r3, #0, #1
   3e7c8:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
		break;
   3e7cc:	e6da      	b.n	3e584 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3e7ce:	f890 31ce 	ldrb.w	r3, [r0, #462]	; 0x1ce
		if (conn->lll.role) {
   3e7d2:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3e7d6:	2102      	movs	r1, #2
   3e7d8:	f361 0301 	bfi	r3, r1, #0, #2
		if (conn->lll.role) {
   3e7dc:	2a00      	cmp	r2, #0
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   3e7de:	f880 31ce 	strb.w	r3, [r0, #462]	; 0x1ce
		if (conn->lll.role) {
   3e7e2:	daed      	bge.n	3e7c0 <ull_conn_tx_ack+0x278>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3e7e4:	4a38      	ldr	r2, [pc, #224]	; (3e8c8 <ull_conn_tx_ack+0x380>)
   3e7e6:	f04f 3304 	mov.w	r3, #67372036	; 0x4040404
   3e7ea:	e9cd 2300 	strd	r2, r3, [sp]
			phys = conn->llcp_phy.tx | lll->phy_tx;
   3e7ee:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
   3e7f2:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
   3e7f6:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   3e7fa:	f003 0307 	and.w	r3, r3, #7
   3e7fe:	a902      	add	r1, sp, #8
   3e800:	440b      	add	r3, r1
   3e802:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   3e806:	f363 1206 	bfi	r2, r3, #4, #3
   3e80a:	f887 2060 	strb.w	r2, [r7, #96]	; 0x60
   3e80e:	e7d7      	b.n	3e7c0 <ull_conn_tx_ack+0x278>
		conn->common.txn_lock = 0U;
   3e810:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   3e814:	f890 21bc 	ldrb.w	r2, [r0, #444]	; 0x1bc
   3e818:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
		conn->common.txn_lock = 0U;
   3e81c:	f36f 0341 	bfc	r3, #1, #1
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   3e820:	4291      	cmp	r1, r2
		conn->common.txn_lock = 0U;
   3e822:	f880 30e4 	strb.w	r3, [r0, #228]	; 0xe4
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   3e826:	f43f aead 	beq.w	3e584 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   3e82a:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   3e82e:	f003 0107 	and.w	r1, r3, #7
   3e832:	2907      	cmp	r1, #7
   3e834:	f43f aea6 	beq.w	3e584 <ull_conn_tx_ack+0x3c>
   3e838:	2001      	movs	r0, #1
   3e83a:	fa00 f101 	lsl.w	r1, r0, r1
   3e83e:	f011 0f68 	tst.w	r1, #104	; 0x68
   3e842:	f43f ae9f 	beq.w	3e584 <ull_conn_tx_ack+0x3c>
				conn->lll.max_tx_octets =
   3e846:	f8b7 11c2 	ldrh.w	r1, [r7, #450]	; 0x1c2
   3e84a:	f8a7 1058 	strh.w	r1, [r7, #88]	; 0x58
				if (conn->llcp_length.state ==
   3e84e:	f003 0107 	and.w	r1, r3, #7
				conn->lll.max_tx_time =
   3e852:	f8b7 01c6 	ldrh.w	r0, [r7, #454]	; 0x1c6
   3e856:	f8a7 005c 	strh.w	r0, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   3e85a:	2905      	cmp	r1, #5
   3e85c:	d05d      	beq.n	3e91a <ull_conn_tx_ack+0x3d2>
				if (!conn->llcp_length.cache.tx_octets) {
   3e85e:	f8b7 11c8 	ldrh.w	r1, [r7, #456]	; 0x1c8
   3e862:	2900      	cmp	r1, #0
   3e864:	d14b      	bne.n	3e8fe <ull_conn_tx_ack+0x3b6>
					conn->llcp_length.ack =
   3e866:	f887 21bd 	strb.w	r2, [r7, #445]	; 0x1bd
					conn->procedure_expire = 0U;
   3e86a:	f8a7 10c8 	strh.w	r1, [r7, #200]	; 0xc8
					break;
   3e86e:	e689      	b.n	3e584 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   3e870:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   3e874:	f003 0207 	and.w	r2, r3, #7
   3e878:	2a01      	cmp	r2, #1
   3e87a:	f47f ae83 	bne.w	3e584 <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   3e87e:	2202      	movs	r2, #2
   3e880:	f362 0302 	bfi	r3, r2, #0, #3
   3e884:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
   3e888:	e67c      	b.n	3e584 <ull_conn_tx_ack+0x3c>
		conn->tx_data_last = tx;
   3e88a:	f8c7 41e4 	str.w	r4, [r7, #484]	; 0x1e4
   3e88e:	e77d      	b.n	3e78c <ull_conn_tx_ack+0x244>
			LL_ASSERT(link->next);
   3e890:	f240 7392 	movw	r3, #1938	; 0x792
   3e894:	4a06      	ldr	r2, [pc, #24]	; (3e8b0 <ull_conn_tx_ack+0x368>)
   3e896:	490d      	ldr	r1, [pc, #52]	; (3e8cc <ull_conn_tx_ack+0x384>)
   3e898:	4807      	ldr	r0, [pc, #28]	; (3e8b8 <ull_conn_tx_ack+0x370>)
   3e89a:	f00b fc1f 	bl	4a0dc <printk>
   3e89e:	4040      	eors	r0, r0
   3e8a0:	f380 8811 	msr	BASEPRI, r0
   3e8a4:	f04f 0003 	mov.w	r0, #3
   3e8a8:	df02      	svc	2
   3e8aa:	2000      	movs	r0, #0
   3e8ac:	e6b9      	b.n	3e622 <ull_conn_tx_ack+0xda>
   3e8ae:	bf00      	nop
   3e8b0:	00053248 	.word	0x00053248
   3e8b4:	0005340c 	.word	0x0005340c
   3e8b8:	00052d50 	.word	0x00052d50
   3e8bc:	00053400 	.word	0x00053400
   3e8c0:	20002d70 	.word	0x20002d70
   3e8c4:	20005348 	.word	0x20005348
   3e8c8:	01020101 	.word	0x01020101
   3e8cc:	00053418 	.word	0x00053418
				conn->common.txn_lock = 0U;
   3e8d0:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3e8d4:	4a21      	ldr	r2, [pc, #132]	; (3e95c <ull_conn_tx_ack+0x414>)
   3e8d6:	9200      	str	r2, [sp, #0]
				conn->common.txn_lock = 0U;
   3e8d8:	f36f 0341 	bfc	r3, #1, #1
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3e8dc:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
				conn->common.txn_lock = 0U;
   3e8e0:	f880 30e4 	strb.w	r3, [r0, #228]	; 0xe4
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   3e8e4:	9201      	str	r2, [sp, #4]
				conn->common.txn_lock = 0U;
   3e8e6:	e782      	b.n	3e7ee <ull_conn_tx_ack+0x2a6>
   3e8e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
		if (!conn->tx_ctrl) {
   3e8ec:	2a00      	cmp	r2, #0
   3e8ee:	f47f af42 	bne.w	3e776 <ull_conn_tx_ack+0x22e>
			tx->next = conn->tx_head;
   3e8f2:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   3e8f4:	e9c7 4475 	strd	r4, r4, [r7, #468]	; 0x1d4
				conn->tx_ctrl_last = tx;
   3e8f8:	f8c7 41dc 	str.w	r4, [r7, #476]	; 0x1dc
   3e8fc:	e743      	b.n	3e786 <ull_conn_tx_ack+0x23e>
				conn->llcp_length.cache.tx_octets = 0;
   3e8fe:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3e900:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp_length.tx_octets =
   3e904:	f8a7 11c2 	strh.w	r1, [r7, #450]	; 0x1c2
				conn->llcp_length.tx_time =
   3e908:	f8b7 11ca 	ldrh.w	r1, [r7, #458]	; 0x1ca
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   3e90c:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
				conn->llcp_length.cache.tx_octets = 0;
   3e910:	f8a7 21c8 	strh.w	r2, [r7, #456]	; 0x1c8
				conn->llcp_length.tx_time =
   3e914:	f8a7 11c6 	strh.w	r1, [r7, #454]	; 0x1c6
				break;
   3e918:	e634      	b.n	3e584 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   3e91a:	2204      	movs	r2, #4
   3e91c:	f362 0302 	bfi	r3, r2, #0, #3
   3e920:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
					break;
   3e924:	e62e      	b.n	3e584 <ull_conn_tx_ack+0x3c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3e926:	791a      	ldrb	r2, [r3, #4]
   3e928:	f002 0203 	and.w	r2, r2, #3
   3e92c:	2a03      	cmp	r2, #3
   3e92e:	d00f      	beq.n	3e950 <ull_conn_tx_ack+0x408>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   3e930:	e9c7 3376 	strd	r3, r3, [r7, #472]	; 0x1d8
   3e934:	e71f      	b.n	3e776 <ull_conn_tx_ack+0x22e>
			conn->tx_data = conn->tx_data->next;
   3e936:	6819      	ldr	r1, [r3, #0]
   3e938:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
		if (!conn->tx_ctrl) {
   3e93c:	2a00      	cmp	r2, #0
   3e93e:	f47f af1a 	bne.w	3e776 <ull_conn_tx_ack+0x22e>
			tx->next = conn->tx_head->next;
   3e942:	681a      	ldr	r2, [r3, #0]
   3e944:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   3e946:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
   3e948:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   3e94a:	e9c7 4476 	strd	r4, r4, [r7, #472]	; 0x1d8
   3e94e:	e71a      	b.n	3e786 <ull_conn_tx_ack+0x23e>
	    ((pdu_data_tx->llctrl.opcode !=
   3e950:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   3e952:	2a03      	cmp	r2, #3
   3e954:	d0f5      	beq.n	3e942 <ull_conn_tx_ack+0x3fa>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   3e956:	2a0a      	cmp	r2, #10
   3e958:	d1ea      	bne.n	3e930 <ull_conn_tx_ack+0x3e8>
   3e95a:	e7f2      	b.n	3e942 <ull_conn_tx_ack+0x3fa>
   3e95c:	01020101 	.word	0x01020101

0003e960 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   3e960:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3e964:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3e968:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   3e96a:	bf03      	ittte	eq
   3e96c:	3301      	addeq	r3, #1
   3e96e:	f880 30f0 	strbeq.w	r3, [r0, #240]	; 0xf0
	return 0;
   3e972:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   3e974:	200c      	movne	r0, #12
}
   3e976:	4770      	bx	lr

0003e978 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   3e978:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   3e97c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   3e980:	f3c2 1202 	ubfx	r2, r2, #4, #3
   3e984:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3e986:	bf14      	ite	ne
   3e988:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3e98a:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   3e98c:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   3e990:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   3e992:	bf14      	ite	ne
   3e994:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   3e996:	3b0b      	subeq	r3, #11
   3e998:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   3e99a:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   3e99c:	bf44      	itt	mi
   3e99e:	3b04      	submi	r3, #4
   3e9a0:	b29b      	uxthmi	r3, r3
}
   3e9a2:	4298      	cmp	r0, r3
   3e9a4:	bf28      	it	cs
   3e9a6:	4618      	movcs	r0, r3
   3e9a8:	4770      	bx	lr
   3e9aa:	bf00      	nop

0003e9ac <ull_pdu_data_init>:
}
   3e9ac:	4770      	bx	lr
   3e9ae:	bf00      	nop

0003e9b0 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   3e9b0:	b510      	push	{r4, lr}
   3e9b2:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   3e9b4:	b930      	cbnz	r0, 3e9c4 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   3e9b6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3e9ba:	f36f 0382 	bfc	r3, #2, #1
   3e9be:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   3e9c2:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   3e9c4:	f240 23af 	movw	r3, #687	; 0x2af
   3e9c8:	4a08      	ldr	r2, [pc, #32]	; (3e9ec <ticker_update_latency_cancel_op_cb+0x3c>)
   3e9ca:	4909      	ldr	r1, [pc, #36]	; (3e9f0 <ticker_update_latency_cancel_op_cb+0x40>)
   3e9cc:	4809      	ldr	r0, [pc, #36]	; (3e9f4 <ticker_update_latency_cancel_op_cb+0x44>)
   3e9ce:	f00b fb85 	bl	4a0dc <printk>
   3e9d2:	4040      	eors	r0, r0
   3e9d4:	f380 8811 	msr	BASEPRI, r0
   3e9d8:	f04f 0003 	mov.w	r0, #3
   3e9dc:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   3e9de:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   3e9e2:	f36f 0382 	bfc	r3, #2, #1
   3e9e6:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   3e9ea:	bd10      	pop	{r4, pc}
   3e9ec:	00053454 	.word	0x00053454
   3e9f0:	0005349c 	.word	0x0005349c
   3e9f4:	00052d50 	.word	0x00052d50

0003e9f8 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3e9f8:	b900      	cbnz	r0, 3e9fc <ticker_op_cb+0x4>
   3e9fa:	4770      	bx	lr
{
   3e9fc:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3e9fe:	4a07      	ldr	r2, [pc, #28]	; (3ea1c <ticker_op_cb+0x24>)
   3ea00:	4907      	ldr	r1, [pc, #28]	; (3ea20 <ticker_op_cb+0x28>)
   3ea02:	4808      	ldr	r0, [pc, #32]	; (3ea24 <ticker_op_cb+0x2c>)
   3ea04:	f240 23a7 	movw	r3, #679	; 0x2a7
   3ea08:	f00b fb68 	bl	4a0dc <printk>
   3ea0c:	4040      	eors	r0, r0
   3ea0e:	f380 8811 	msr	BASEPRI, r0
   3ea12:	f04f 0003 	mov.w	r0, #3
   3ea16:	df02      	svc	2
}
   3ea18:	bd08      	pop	{r3, pc}
   3ea1a:	bf00      	nop
   3ea1c:	00053454 	.word	0x00053454
   3ea20:	000532e0 	.word	0x000532e0
   3ea24:	00052d50 	.word	0x00052d50

0003ea28 <ticker_op_stop_adv_cb.part.1>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   3ea28:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   3ea2a:	4a07      	ldr	r2, [pc, #28]	; (3ea48 <ticker_op_stop_adv_cb.part.1+0x20>)
   3ea2c:	4907      	ldr	r1, [pc, #28]	; (3ea4c <ticker_op_stop_adv_cb.part.1+0x24>)
   3ea2e:	4808      	ldr	r0, [pc, #32]	; (3ea50 <ticker_op_stop_adv_cb.part.1+0x28>)
   3ea30:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   3ea34:	f00b fb52 	bl	4a0dc <printk>
   3ea38:	4040      	eors	r0, r0
   3ea3a:	f380 8811 	msr	BASEPRI, r0
   3ea3e:	f04f 0003 	mov.w	r0, #3
   3ea42:	df02      	svc	2
}
   3ea44:	bd08      	pop	{r3, pc}
   3ea46:	bf00      	nop
   3ea48:	00053454 	.word	0x00053454
   3ea4c:	00053424 	.word	0x00053424
   3ea50:	00052d50 	.word	0x00052d50

0003ea54 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   3ea54:	2801      	cmp	r0, #1
   3ea56:	d000      	beq.n	3ea5a <ticker_op_stop_adv_cb+0x6>
   3ea58:	4770      	bx	lr
{
   3ea5a:	b510      	push	{r4, lr}
   3ea5c:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   3ea5e:	f7f9 f9c9 	bl	37df4 <ull_disable_mark_get>
   3ea62:	4284      	cmp	r4, r0
   3ea64:	d003      	beq.n	3ea6e <ticker_op_stop_adv_cb+0x1a>
}
   3ea66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ea6a:	f7ff bfdd 	b.w	3ea28 <ticker_op_stop_adv_cb.part.1>
   3ea6e:	bd10      	pop	{r4, pc}

0003ea70 <ull_periph_ticker_cb>:
{
   3ea70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ea74:	9c09      	ldr	r4, [sp, #36]	; 0x24
   3ea76:	f89d 9020 	ldrb.w	r9, [sp, #32]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3ea7a:	8d27      	ldrh	r7, [r4, #40]	; 0x28
   3ea7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3ea80:	428f      	cmp	r7, r1
   3ea82:	d029      	beq.n	3ead8 <ull_periph_ticker_cb+0x68>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   3ea84:	4690      	mov	r8, r2
   3ea86:	4606      	mov	r6, r0
   3ea88:	4601      	mov	r1, r0
   3ea8a:	461a      	mov	r2, r3
   3ea8c:	4620      	mov	r0, r4
   3ea8e:	461d      	mov	r5, r3
   3ea90:	f7fd fa44 	bl	3bf1c <ull_conn_llcp>
		if (ret) {
   3ea94:	bb00      	cbnz	r0, 3ead8 <ull_periph_ticker_cb+0x68>
	return ++hdr->ref;
   3ea96:	7823      	ldrb	r3, [r4, #0]
   3ea98:	3301      	adds	r3, #1
   3ea9a:	b2db      	uxtb	r3, r3
   3ea9c:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   3ea9e:	b35b      	cbz	r3, 3eaf8 <ull_periph_ticker_cb+0x88>
	p.ticks_at_expire = ticks_at_expire;
   3eaa0:	4f1c      	ldr	r7, [pc, #112]	; (3eb14 <ull_periph_ticker_cb+0xa4>)
	mfy.param = &p;
   3eaa2:	4b1d      	ldr	r3, [pc, #116]	; (3eb18 <ull_periph_ticker_cb+0xa8>)
	p.ticks_at_expire = ticks_at_expire;
   3eaa4:	603e      	str	r6, [r7, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3eaa6:	2200      	movs	r2, #0
	p.param = &conn->lll;
   3eaa8:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3eaac:	4611      	mov	r1, r2
   3eaae:	2001      	movs	r0, #1
	mfy.param = &p;
   3eab0:	609f      	str	r7, [r3, #8]
	p.remainder = remainder;
   3eab2:	f8c7 8004 	str.w	r8, [r7, #4]
	p.lazy = lazy;
   3eab6:	813d      	strh	r5, [r7, #8]
	p.force = force;
   3eab8:	f887 900a 	strb.w	r9, [r7, #10]
	p.param = &conn->lll;
   3eabc:	f8c7 c00c 	str.w	ip, [r7, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3eac0:	f7f5 fa9a 	bl	33ff8 <mayfly_enqueue>
	LL_ASSERT(!err);
   3eac4:	b950      	cbnz	r0, 3eadc <ull_periph_ticker_cb+0x6c>
	ull_conn_tx_demux(UINT8_MAX);
   3eac6:	20ff      	movs	r0, #255	; 0xff
   3eac8:	f7ff f932 	bl	3dd30 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3eacc:	4620      	mov	r0, r4
   3eace:	21ff      	movs	r1, #255	; 0xff
}
   3ead0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3ead4:	f7ff bbd8 	b.w	3e288 <ull_conn_tx_lll_enqueue>
}
   3ead8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(!err);
   3eadc:	f240 232a 	movw	r3, #554	; 0x22a
   3eae0:	4a0e      	ldr	r2, [pc, #56]	; (3eb1c <ull_periph_ticker_cb+0xac>)
   3eae2:	490f      	ldr	r1, [pc, #60]	; (3eb20 <ull_periph_ticker_cb+0xb0>)
   3eae4:	480f      	ldr	r0, [pc, #60]	; (3eb24 <ull_periph_ticker_cb+0xb4>)
   3eae6:	f00b faf9 	bl	4a0dc <printk>
   3eaea:	4040      	eors	r0, r0
   3eaec:	f380 8811 	msr	BASEPRI, r0
   3eaf0:	f04f 0003 	mov.w	r0, #3
   3eaf4:	df02      	svc	2
   3eaf6:	e7e6      	b.n	3eac6 <ull_periph_ticker_cb+0x56>
	LL_ASSERT(ref);
   3eaf8:	f240 231d 	movw	r3, #541	; 0x21d
   3eafc:	4a07      	ldr	r2, [pc, #28]	; (3eb1c <ull_periph_ticker_cb+0xac>)
   3eafe:	490a      	ldr	r1, [pc, #40]	; (3eb28 <ull_periph_ticker_cb+0xb8>)
   3eb00:	4808      	ldr	r0, [pc, #32]	; (3eb24 <ull_periph_ticker_cb+0xb4>)
   3eb02:	f00b faeb 	bl	4a0dc <printk>
   3eb06:	4040      	eors	r0, r0
   3eb08:	f380 8811 	msr	BASEPRI, r0
   3eb0c:	f04f 0003 	mov.w	r0, #3
   3eb10:	df02      	svc	2
   3eb12:	e7c5      	b.n	3eaa0 <ull_periph_ticker_cb+0x30>
   3eb14:	20005860 	.word	0x20005860
   3eb18:	20000af4 	.word	0x20000af4
   3eb1c:	00053454 	.word	0x00053454
   3eb20:	00052ff0 	.word	0x00052ff0
   3eb24:	00052d50 	.word	0x00052d50
   3eb28:	00053170 	.word	0x00053170

0003eb2c <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   3eb2c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   3eb2e:	b143      	cbz	r3, 3eb42 <ull_periph_latency_cancel+0x16>
{
   3eb30:	b530      	push	{r4, r5, lr}
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   3eb32:	f890 40e4 	ldrb.w	r4, [r0, #228]	; 0xe4
   3eb36:	f014 0304 	ands.w	r3, r4, #4
{
   3eb3a:	b089      	sub	sp, #36	; 0x24
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   3eb3c:	d002      	beq.n	3eb44 <ull_periph_latency_cancel+0x18>
}
   3eb3e:	b009      	add	sp, #36	; 0x24
   3eb40:	bd30      	pop	{r4, r5, pc}
   3eb42:	4770      	bx	lr
		conn->periph.latency_cancel = 1U;
   3eb44:	f044 0404 	orr.w	r4, r4, #4
   3eb48:	f880 40e4 	strb.w	r4, [r0, #228]	; 0xe4
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   3eb4c:	3105      	adds	r1, #5
   3eb4e:	4d0f      	ldr	r5, [pc, #60]	; (3eb8c <ull_periph_latency_cancel+0x60>)
   3eb50:	9006      	str	r0, [sp, #24]
   3eb52:	2401      	movs	r4, #1
   3eb54:	b2ca      	uxtb	r2, r1
   3eb56:	9304      	str	r3, [sp, #16]
   3eb58:	e9cd 3301 	strd	r3, r3, [sp, #4]
   3eb5c:	9300      	str	r3, [sp, #0]
   3eb5e:	4618      	mov	r0, r3
   3eb60:	9505      	str	r5, [sp, #20]
   3eb62:	9403      	str	r4, [sp, #12]
   3eb64:	2103      	movs	r1, #3
   3eb66:	f7f6 fded 	bl	35744 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   3eb6a:	f030 0302 	bics.w	r3, r0, #2
   3eb6e:	d0e6      	beq.n	3eb3e <ull_periph_latency_cancel+0x12>
   3eb70:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
   3eb74:	4a06      	ldr	r2, [pc, #24]	; (3eb90 <ull_periph_latency_cancel+0x64>)
   3eb76:	4907      	ldr	r1, [pc, #28]	; (3eb94 <ull_periph_latency_cancel+0x68>)
   3eb78:	4807      	ldr	r0, [pc, #28]	; (3eb98 <ull_periph_latency_cancel+0x6c>)
   3eb7a:	f00b faaf 	bl	4a0dc <printk>
   3eb7e:	4040      	eors	r0, r0
   3eb80:	f380 8811 	msr	BASEPRI, r0
   3eb84:	f04f 0003 	mov.w	r0, #3
   3eb88:	df02      	svc	2
}
   3eb8a:	e7d8      	b.n	3eb3e <ull_periph_latency_cancel+0x12>
   3eb8c:	0003e9b1 	.word	0x0003e9b1
   3eb90:	00053454 	.word	0x00053454
   3eb94:	000532a4 	.word	0x000532a4
   3eb98:	00052d50 	.word	0x00052d50

0003eb9c <ll_start_enc_req_send>:
{
   3eb9c:	b570      	push	{r4, r5, r6, lr}
   3eb9e:	460d      	mov	r5, r1
   3eba0:	4616      	mov	r6, r2
	conn = ll_connected_get(handle);
   3eba2:	f7fb f951 	bl	39e48 <ll_connected_get>
	if (!conn) {
   3eba6:	2800      	cmp	r0, #0
   3eba8:	d040      	beq.n	3ec2c <ll_start_enc_req_send+0x90>
	if (error_code) {
   3ebaa:	4604      	mov	r4, r0
   3ebac:	b95d      	cbnz	r5, 3ebc6 <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   3ebae:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3ebb2:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3ebb6:	429a      	cmp	r2, r3
   3ebb8:	d003      	beq.n	3ebc2 <ll_start_enc_req_send+0x26>
   3ebba:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
   3ebbe:	2b03      	cmp	r3, #3
   3ebc0:	d026      	beq.n	3ec10 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   3ebc2:	200c      	movs	r0, #12
}
   3ebc4:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   3ebc6:	f890 0176 	ldrb.w	r0, [r0, #374]	; 0x176
   3ebca:	f010 0004 	ands.w	r0, r0, #4
   3ebce:	d112      	bne.n	3ebf6 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   3ebd0:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   3ebd4:	f894 30f1 	ldrb.w	r3, [r4, #241]	; 0xf1
   3ebd8:	429a      	cmp	r2, r3
   3ebda:	d0f2      	beq.n	3ebc2 <ll_start_enc_req_send+0x26>
   3ebdc:	f894 30f2 	ldrb.w	r3, [r4, #242]	; 0xf2
   3ebe0:	2b03      	cmp	r3, #3
   3ebe2:	d1ee      	bne.n	3ebc2 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3ebe4:	f894 3100 	ldrb.w	r3, [r4, #256]	; 0x100
			conn->llcp.encryption.error_code = error_code;
   3ebe8:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3ebec:	f360 0301 	bfi	r3, r0, #0, #2
   3ebf0:	f884 3100 	strb.w	r3, [r4, #256]	; 0x100
}
   3ebf4:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   3ebf6:	f894 2150 	ldrb.w	r2, [r4, #336]	; 0x150
			if (conn->llcp_terminate.ack !=
   3ebfa:	f894 3151 	ldrb.w	r3, [r4, #337]	; 0x151
   3ebfe:	4293      	cmp	r3, r2
   3ec00:	d1df      	bne.n	3ebc2 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   3ec02:	3301      	adds	r3, #1
   3ec04:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
			conn->llcp_terminate.reason_own = error_code;
   3ec08:	f884 5152 	strb.w	r5, [r4, #338]	; 0x152
	return 0;
   3ec0c:	2000      	movs	r0, #0
}
   3ec0e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   3ec10:	4631      	mov	r1, r6
   3ec12:	2210      	movs	r2, #16
   3ec14:	f200 1081 	addw	r0, r0, #385	; 0x181
   3ec18:	f00d fb68 	bl	4c2ec <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   3ec1c:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
   3ec20:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   3ec24:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
	return 0;
   3ec28:	4628      	mov	r0, r5
}
   3ec2a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3ec2c:	2002      	movs	r0, #2
}
   3ec2e:	bd70      	pop	{r4, r5, r6, pc}

0003ec30 <ticker_op_stop_scan_cb>:
}
   3ec30:	4770      	bx	lr
   3ec32:	bf00      	nop

0003ec34 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3ec34:	b900      	cbnz	r0, 3ec38 <ticker_op_cb+0x4>
   3ec36:	4770      	bx	lr
{
   3ec38:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   3ec3a:	4a07      	ldr	r2, [pc, #28]	; (3ec58 <ticker_op_cb+0x24>)
   3ec3c:	4907      	ldr	r1, [pc, #28]	; (3ec5c <ticker_op_cb+0x28>)
   3ec3e:	4808      	ldr	r0, [pc, #32]	; (3ec60 <ticker_op_cb+0x2c>)
   3ec40:	f240 43ad 	movw	r3, #1197	; 0x4ad
   3ec44:	f00b fa4a 	bl	4a0dc <printk>
   3ec48:	4040      	eors	r0, r0
   3ec4a:	f380 8811 	msr	BASEPRI, r0
   3ec4e:	f04f 0003 	mov.w	r0, #3
   3ec52:	df02      	svc	2
}
   3ec54:	bd08      	pop	{r3, pc}
   3ec56:	bf00      	nop
   3ec58:	000534b0 	.word	0x000534b0
   3ec5c:	000532e0 	.word	0x000532e0
   3ec60:	00052d50 	.word	0x00052d50

0003ec64 <ull_central_ticker_cb>:
{
   3ec64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ec68:	9c09      	ldr	r4, [sp, #36]	; 0x24
   3ec6a:	f89d 9020 	ldrb.w	r9, [sp, #32]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   3ec6e:	8d27      	ldrh	r7, [r4, #40]	; 0x28
   3ec70:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3ec74:	428f      	cmp	r7, r1
   3ec76:	d030      	beq.n	3ecda <ull_central_ticker_cb+0x76>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   3ec78:	4690      	mov	r8, r2
   3ec7a:	4606      	mov	r6, r0
   3ec7c:	4601      	mov	r1, r0
   3ec7e:	461a      	mov	r2, r3
   3ec80:	4620      	mov	r0, r4
   3ec82:	461d      	mov	r5, r3
   3ec84:	f7fd f94a 	bl	3bf1c <ull_conn_llcp>
		if (ret) {
   3ec88:	bb38      	cbnz	r0, 3ecda <ull_central_ticker_cb+0x76>
   3ec8a:	7823      	ldrb	r3, [r4, #0]
   3ec8c:	3301      	adds	r3, #1
   3ec8e:	b2db      	uxtb	r3, r3
   3ec90:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   3ec92:	b393      	cbz	r3, 3ecfa <ull_central_ticker_cb+0x96>
	ull_conn_tx_demux(2);
   3ec94:	2002      	movs	r0, #2
   3ec96:	f7ff f84b 	bl	3dd30 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   3ec9a:	2102      	movs	r1, #2
   3ec9c:	4620      	mov	r0, r4
   3ec9e:	f7ff faf3 	bl	3e288 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   3eca2:	4f1d      	ldr	r7, [pc, #116]	; (3ed18 <ull_central_ticker_cb+0xb4>)
	mfy.param = &p;
   3eca4:	4b1d      	ldr	r3, [pc, #116]	; (3ed1c <ull_central_ticker_cb+0xb8>)
	p.ticks_at_expire = ticks_at_expire;
   3eca6:	603e      	str	r6, [r7, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3eca8:	2200      	movs	r2, #0
	p.param = &conn->lll;
   3ecaa:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3ecae:	4611      	mov	r1, r2
   3ecb0:	2001      	movs	r0, #1
	mfy.param = &p;
   3ecb2:	609f      	str	r7, [r3, #8]
	p.remainder = remainder;
   3ecb4:	f8c7 8004 	str.w	r8, [r7, #4]
	p.lazy = lazy;
   3ecb8:	813d      	strh	r5, [r7, #8]
	p.force = force;
   3ecba:	f887 900a 	strb.w	r9, [r7, #10]
	p.param = &conn->lll;
   3ecbe:	f8c7 c00c 	str.w	ip, [r7, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   3ecc2:	f7f5 f999 	bl	33ff8 <mayfly_enqueue>
	LL_ASSERT(!err);
   3ecc6:	b950      	cbnz	r0, 3ecde <ull_central_ticker_cb+0x7a>
	ull_conn_tx_demux(UINT8_MAX);
   3ecc8:	20ff      	movs	r0, #255	; 0xff
   3ecca:	f7ff f831 	bl	3dd30 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3ecce:	4620      	mov	r0, r4
   3ecd0:	21ff      	movs	r1, #255	; 0xff
}
   3ecd2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   3ecd6:	f7ff bad7 	b.w	3e288 <ull_conn_tx_lll_enqueue>
}
   3ecda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(!err);
   3ecde:	f240 434d 	movw	r3, #1101	; 0x44d
   3ece2:	4a0f      	ldr	r2, [pc, #60]	; (3ed20 <ull_central_ticker_cb+0xbc>)
   3ece4:	490f      	ldr	r1, [pc, #60]	; (3ed24 <ull_central_ticker_cb+0xc0>)
   3ece6:	4810      	ldr	r0, [pc, #64]	; (3ed28 <ull_central_ticker_cb+0xc4>)
   3ece8:	f00b f9f8 	bl	4a0dc <printk>
   3ecec:	4040      	eors	r0, r0
   3ecee:	f380 8811 	msr	BASEPRI, r0
   3ecf2:	f04f 0003 	mov.w	r0, #3
   3ecf6:	df02      	svc	2
   3ecf8:	e7e6      	b.n	3ecc8 <ull_central_ticker_cb+0x64>
	LL_ASSERT(ref);
   3ecfa:	f240 433a 	movw	r3, #1082	; 0x43a
   3ecfe:	4a08      	ldr	r2, [pc, #32]	; (3ed20 <ull_central_ticker_cb+0xbc>)
   3ed00:	490a      	ldr	r1, [pc, #40]	; (3ed2c <ull_central_ticker_cb+0xc8>)
   3ed02:	4809      	ldr	r0, [pc, #36]	; (3ed28 <ull_central_ticker_cb+0xc4>)
   3ed04:	f00b f9ea 	bl	4a0dc <printk>
   3ed08:	4040      	eors	r0, r0
   3ed0a:	f380 8811 	msr	BASEPRI, r0
   3ed0e:	f04f 0003 	mov.w	r0, #3
   3ed12:	df02      	svc	2
   3ed14:	e7be      	b.n	3ec94 <ull_central_ticker_cb+0x30>
   3ed16:	bf00      	nop
   3ed18:	20005878 	.word	0x20005878
   3ed1c:	20000b04 	.word	0x20000b04
   3ed20:	000534b0 	.word	0x000534b0
   3ed24:	00052ff0 	.word	0x00052ff0
   3ed28:	00052d50 	.word	0x00052d50
   3ed2c:	00053170 	.word	0x00053170

0003ed30 <ll_connect_disable>:
{
   3ed30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ed34:	4607      	mov	r7, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   3ed36:	2000      	movs	r0, #0
   3ed38:	f7fa fbf2 	bl	39520 <ull_scan_is_enabled_get>
	if (!scan) {
   3ed3c:	b368      	cbz	r0, 3ed9a <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   3ed3e:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   3ed40:	4604      	mov	r4, r0
   3ed42:	b353      	cbz	r3, 3ed9a <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   3ed44:	f893 2020 	ldrb.w	r2, [r3, #32]
   3ed48:	f042 0202 	orr.w	r2, r2, #2
   3ed4c:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   3ed50:	6a06      	ldr	r6, [r0, #32]
	if (!conn_lll) {
   3ed52:	b316      	cbz	r6, 3ed9a <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   3ed54:	4601      	mov	r1, r0
   3ed56:	2000      	movs	r0, #0
   3ed58:	f7fa fb3c 	bl	393d4 <ull_scan_disable>
	if (!err) {
   3ed5c:	4605      	mov	r5, r0
   3ed5e:	b9c8      	cbnz	r0, 3ed94 <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   3ed60:	6836      	ldr	r6, [r6, #0]
		link = node_rx->hdr.link;
   3ed62:	f8d6 8154 	ldr.w	r8, [r6, #340]	; 0x154
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   3ed66:	f506 79aa 	add.w	r9, r6, #340	; 0x154
		LL_ASSERT(link);
   3ed6a:	f1b8 0f00 	cmp.w	r8, #0
   3ed6e:	d018      	beq.n	3eda2 <__kernel_ram_size+0x2>
		ll_rx_link_release(link);
   3ed70:	4640      	mov	r0, r8
   3ed72:	f7f8 ff4f 	bl	37c14 <ll_rx_link_release>
		scan_lll = &scan->lll;
   3ed76:	341c      	adds	r4, #28
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3ed78:	2116      	movs	r1, #22
		node_rx->hdr.handle = 0xffff;
   3ed7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   3ed7e:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   3ed80:	f8c6 415c 	str.w	r4, [r6, #348]	; 0x15c
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   3ed84:	f886 1158 	strb.w	r1, [r6, #344]	; 0x158
		node_rx->hdr.handle = 0xffff;
   3ed88:	f8a6 215a 	strh.w	r2, [r6, #346]	; 0x15a
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   3ed8c:	f886 3170 	strb.w	r3, [r6, #368]	; 0x170
		*rx = node_rx;
   3ed90:	f8c7 9000 	str.w	r9, [r7]
}
   3ed94:	4628      	mov	r0, r5
   3ed96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   3ed9a:	250c      	movs	r5, #12
}
   3ed9c:	4628      	mov	r0, r5
   3ed9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   3eda2:	f240 235b 	movw	r3, #603	; 0x25b
   3eda6:	4a06      	ldr	r2, [pc, #24]	; (3edc0 <__kernel_ram_size+0x20>)
   3eda8:	4906      	ldr	r1, [pc, #24]	; (3edc4 <__kernel_ram_size+0x24>)
   3edaa:	4807      	ldr	r0, [pc, #28]	; (3edc8 <__kernel_ram_size+0x28>)
   3edac:	f00b f996 	bl	4a0dc <printk>
   3edb0:	4040      	eors	r0, r0
   3edb2:	f380 8811 	msr	BASEPRI, r0
   3edb6:	f04f 0003 	mov.w	r0, #3
   3edba:	df02      	svc	2
   3edbc:	e7d8      	b.n	3ed70 <ll_connect_disable+0x40>
   3edbe:	bf00      	nop
   3edc0:	000534b0 	.word	0x000534b0
   3edc4:	00053350 	.word	0x00053350
   3edc8:	00052d50 	.word	0x00052d50

0003edcc <ll_enc_req_send>:
{
   3edcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3edd0:	4688      	mov	r8, r1
   3edd2:	4616      	mov	r6, r2
   3edd4:	4699      	mov	r9, r3
   3edd6:	4607      	mov	r7, r0
	conn = ll_connected_get(handle);
   3edd8:	f7fb f836 	bl	39e48 <ll_connected_get>
	if (!conn) {
   3eddc:	2800      	cmp	r0, #0
   3edde:	d066      	beq.n	3eeae <ll_enc_req_send+0xe2>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   3ede0:	f890 2174 	ldrb.w	r2, [r0, #372]	; 0x174
   3ede4:	f890 3175 	ldrb.w	r3, [r0, #373]	; 0x175
   3ede8:	429a      	cmp	r2, r3
   3edea:	4604      	mov	r4, r0
   3edec:	d140      	bne.n	3ee70 <ll_enc_req_send+0xa4>
   3edee:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
   3edf2:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
   3edf6:	429a      	cmp	r2, r3
   3edf8:	d003      	beq.n	3ee02 <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   3edfa:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
   3edfe:	2b03      	cmp	r3, #3
   3ee00:	d036      	beq.n	3ee70 <ll_enc_req_send+0xa4>
	tx = ll_tx_mem_acquire();
   3ee02:	f7fb f835 	bl	39e70 <ll_tx_mem_acquire>
	if (tx) {
   3ee06:	4605      	mov	r5, r0
   3ee08:	b390      	cbz	r0, 3ee70 <ll_enc_req_send+0xa4>
		ull_pdu_data_init(pdu_data_tx);
   3ee0a:	3004      	adds	r0, #4
   3ee0c:	f7ff fdce 	bl	3e9ac <ull_pdu_data_init>
		memcpy(&conn->llcp_enc.ltk[0], ltk, sizeof(conn->llcp_enc.ltk));
   3ee10:	4649      	mov	r1, r9
   3ee12:	2210      	movs	r2, #16
   3ee14:	f204 1081 	addw	r0, r4, #385	; 0x181
   3ee18:	f00d fa68 	bl	4c2ec <memcpy>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   3ee1c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   3ee20:	f013 0318 	ands.w	r3, r3, #24
   3ee24:	d027      	beq.n	3ee76 <ll_enc_req_send+0xaa>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   3ee26:	2b18      	cmp	r3, #24
   3ee28:	d11f      	bne.n	3ee6a <ll_enc_req_send+0x9e>
			memcpy(&conn->llcp_enc.rand[0], rand_num,
   3ee2a:	4641      	mov	r1, r8
   3ee2c:	2208      	movs	r2, #8
   3ee2e:	f204 1079 	addw	r0, r4, #377	; 0x179
   3ee32:	f00d fa5b 	bl	4c2ec <memcpy>
			conn->llcp_enc.ediv[0] = ediv[0];
   3ee36:	7833      	ldrb	r3, [r6, #0]
   3ee38:	f884 3177 	strb.w	r3, [r4, #375]	; 0x177
			conn->llcp_enc.ediv[1] = ediv[1];
   3ee3c:	7873      	ldrb	r3, [r6, #1]
   3ee3e:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ee42:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   3ee44:	2101      	movs	r1, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ee46:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
   3ee4a:	220a      	movs	r2, #10
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ee4c:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   3ee4e:	7169      	strb	r1, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   3ee50:	71ea      	strb	r2, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   3ee52:	4638      	mov	r0, r7
   3ee54:	4629      	mov	r1, r5
   3ee56:	f7fb f817 	bl	39e88 <ll_tx_mem_enqueue>
   3ee5a:	b930      	cbnz	r0, 3ee6a <ll_enc_req_send+0x9e>
		conn->llcp_enc.req++;
   3ee5c:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
   3ee60:	3301      	adds	r3, #1
   3ee62:	f884 3174 	strb.w	r3, [r4, #372]	; 0x174
}
   3ee66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   3ee6a:	4628      	mov	r0, r5
   3ee6c:	f7fb f806 	bl	39e7c <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   3ee70:	200c      	movs	r0, #12
}
   3ee72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ee76:	792b      	ldrb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   3ee78:	2203      	movs	r2, #3
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ee7a:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->llctrl.opcode =
   3ee7e:	71ea      	strb	r2, [r5, #7]
			pdu_data_tx->len =
   3ee80:	2017      	movs	r0, #23
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3ee82:	2208      	movs	r2, #8
   3ee84:	4641      	mov	r1, r8
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   3ee86:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   3ee88:	7168      	strb	r0, [r5, #5]
			memcpy(enc_req->rand, rand_num, sizeof(enc_req->rand));
   3ee8a:	18a8      	adds	r0, r5, r2
   3ee8c:	f00d fa2e 	bl	4c2ec <memcpy>
			enc_req->ediv[0] = ediv[0];
   3ee90:	7833      	ldrb	r3, [r6, #0]
   3ee92:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   3ee94:	7873      	ldrb	r3, [r6, #1]
   3ee96:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   3ee98:	2108      	movs	r1, #8
   3ee9a:	f105 0012 	add.w	r0, r5, #18
   3ee9e:	f001 fde1 	bl	40a64 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   3eea2:	2104      	movs	r1, #4
   3eea4:	f105 001a 	add.w	r0, r5, #26
   3eea8:	f001 fddc 	bl	40a64 <lll_csrand_get>
   3eeac:	e7d1      	b.n	3ee52 <ll_enc_req_send+0x86>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3eeae:	2002      	movs	r0, #2
}
   3eeb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003eeb4 <ull_central_reset>:
{
   3eeb4:	b530      	push	{r4, r5, lr}
   3eeb6:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   3eeb8:	a801      	add	r0, sp, #4
   3eeba:	f7ff ff39 	bl	3ed30 <ll_connect_disable>
	if (!err) {
   3eebe:	4604      	mov	r4, r0
   3eec0:	b110      	cbz	r0, 3eec8 <ull_central_reset+0x14>
}
   3eec2:	4620      	mov	r0, r4
   3eec4:	b003      	add	sp, #12
   3eec6:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   3eec8:	f7fa fb2a 	bl	39520 <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   3eecc:	4605      	mov	r5, r0
   3eece:	b150      	cbz	r0, 3eee6 <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   3eed0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   3eed4:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   3eed6:	f36f 0300 	bfc	r3, #0, #1
}
   3eeda:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   3eedc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   3eee0:	622a      	str	r2, [r5, #32]
}
   3eee2:	b003      	add	sp, #12
   3eee4:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   3eee6:	f240 23e9 	movw	r3, #745	; 0x2e9
   3eeea:	4a06      	ldr	r2, [pc, #24]	; (3ef04 <ull_central_reset+0x50>)
   3eeec:	4906      	ldr	r1, [pc, #24]	; (3ef08 <ull_central_reset+0x54>)
   3eeee:	4807      	ldr	r0, [pc, #28]	; (3ef0c <ull_central_reset+0x58>)
   3eef0:	f00b f8f4 	bl	4a0dc <printk>
   3eef4:	4040      	eors	r0, r0
   3eef6:	f380 8811 	msr	BASEPRI, r0
   3eefa:	f04f 0003 	mov.w	r0, #3
   3eefe:	df02      	svc	2
   3ef00:	e7e6      	b.n	3eed0 <ull_central_reset+0x1c>
   3ef02:	bf00      	nop
   3ef04:	000534b0 	.word	0x000534b0
   3ef08:	000534f4 	.word	0x000534f4
   3ef0c:	00052d50 	.word	0x00052d50

0003ef10 <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   3ef10:	6883      	ldr	r3, [r0, #8]
{
   3ef12:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   3ef14:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   3ef16:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   3ef18:	b31c      	cbz	r4, 3ef62 <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   3ef1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
	scan->lll.conn = NULL;
   3ef1c:	2200      	movs	r2, #0
   3ef1e:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   3ef20:	b163      	cbz	r3, 3ef3c <ull_central_cleanup+0x2c>
   3ef22:	f240 3305 	movw	r3, #773	; 0x305
   3ef26:	4a1d      	ldr	r2, [pc, #116]	; (3ef9c <ull_central_cleanup+0x8c>)
   3ef28:	491d      	ldr	r1, [pc, #116]	; (3efa0 <ull_central_cleanup+0x90>)
   3ef2a:	481e      	ldr	r0, [pc, #120]	; (3efa4 <ull_central_cleanup+0x94>)
   3ef2c:	f00b f8d6 	bl	4a0dc <printk>
   3ef30:	4040      	eors	r0, r0
   3ef32:	f380 8811 	msr	BASEPRI, r0
   3ef36:	f04f 0003 	mov.w	r0, #3
   3ef3a:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   3ef3c:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   3ef40:	f104 0048 	add.w	r0, r4, #72	; 0x48
   3ef44:	f7f4 ffda 	bl	33efc <memq_deinit>
	LL_ASSERT(link);
   3ef48:	4606      	mov	r6, r0
   3ef4a:	b1c0      	cbz	r0, 3ef7e <ull_central_cleanup+0x6e>
	conn_lll->link_tx_free = link;
   3ef4c:	65a6      	str	r6, [r4, #88]	; 0x58
	ll_conn_release(conn);
   3ef4e:	6820      	ldr	r0, [r4, #0]
   3ef50:	f7fa ff64 	bl	39e1c <ll_conn_release>
	scan->is_enabled = 0U;
   3ef54:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   3ef58:	f36f 0300 	bfc	r3, #0, #1
   3ef5c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   3ef60:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   3ef62:	f240 3302 	movw	r3, #770	; 0x302
   3ef66:	4a0d      	ldr	r2, [pc, #52]	; (3ef9c <ull_central_cleanup+0x8c>)
   3ef68:	490f      	ldr	r1, [pc, #60]	; (3efa8 <ull_central_cleanup+0x98>)
   3ef6a:	480e      	ldr	r0, [pc, #56]	; (3efa4 <ull_central_cleanup+0x94>)
   3ef6c:	f00b f8b6 	bl	4a0dc <printk>
   3ef70:	4040      	eors	r0, r0
   3ef72:	f380 8811 	msr	BASEPRI, r0
   3ef76:	f04f 0003 	mov.w	r0, #3
   3ef7a:	df02      	svc	2
   3ef7c:	e7cd      	b.n	3ef1a <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   3ef7e:	f44f 7342 	mov.w	r3, #776	; 0x308
   3ef82:	4a06      	ldr	r2, [pc, #24]	; (3ef9c <ull_central_cleanup+0x8c>)
   3ef84:	4909      	ldr	r1, [pc, #36]	; (3efac <ull_central_cleanup+0x9c>)
   3ef86:	4807      	ldr	r0, [pc, #28]	; (3efa4 <ull_central_cleanup+0x94>)
   3ef88:	f00b f8a8 	bl	4a0dc <printk>
   3ef8c:	4040      	eors	r0, r0
   3ef8e:	f380 8811 	msr	BASEPRI, r0
   3ef92:	f04f 0003 	mov.w	r0, #3
   3ef96:	df02      	svc	2
   3ef98:	e7d8      	b.n	3ef4c <ull_central_cleanup+0x3c>
   3ef9a:	bf00      	nop
   3ef9c:	000534b0 	.word	0x000534b0
   3efa0:	00052ef4 	.word	0x00052ef4
   3efa4:	00052d50 	.word	0x00052d50
   3efa8:	00052ee8 	.word	0x00052ee8
   3efac:	00053350 	.word	0x00053350

0003efb0 <ull_central_chm_update>:
{
   3efb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (handle--) {
   3efb2:	2405      	movs	r4, #5
		conn->llcp_type = LLCP_CHAN_MAP;
   3efb4:	2702      	movs	r7, #2
	while (handle--) {
   3efb6:	f64f 76ff 	movw	r6, #65535	; 0xffff
		conn = ll_connected_get(handle);
   3efba:	4620      	mov	r0, r4
   3efbc:	f7fa ff44 	bl	39e48 <ll_connected_get>
		if (!conn || conn->lll.role) {
   3efc0:	4605      	mov	r5, r0
   3efc2:	b1b8      	cbz	r0, 3eff4 <ull_central_chm_update+0x44>
   3efc4:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3efc8:	2b00      	cmp	r3, #0
   3efca:	db13      	blt.n	3eff4 <ull_central_chm_update+0x44>
		ret = ull_conn_llcp_req(conn);
   3efcc:	f7ff fcc8 	bl	3e960 <ull_conn_llcp_req>
		if (ret) {
   3efd0:	b9a8      	cbnz	r0, 3effe <ull_central_chm_update+0x4e>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   3efd2:	f105 00f5 	add.w	r0, r5, #245	; 0xf5
   3efd6:	f000 f9d3 	bl	3f380 <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   3efda:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
		conn->llcp_req++;
   3efde:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
		conn->llcp_type = LLCP_CHAN_MAP;
   3efe2:	f885 70f2 	strb.w	r7, [r5, #242]	; 0xf2
		conn->llcp.chan_map.initiate = 1U;
   3efe6:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_req++;
   3efea:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   3efec:	f885 20f4 	strb.w	r2, [r5, #244]	; 0xf4
		conn->llcp_req++;
   3eff0:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	while (handle--) {
   3eff4:	3c01      	subs	r4, #1
   3eff6:	b2a4      	uxth	r4, r4
   3eff8:	42b4      	cmp	r4, r6
   3effa:	d1de      	bne.n	3efba <ull_central_chm_update+0xa>
	return 0;
   3effc:	2000      	movs	r0, #0
}
   3effe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003f000 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   3f000:	6008      	str	r0, [r1, #0]
}
   3f002:	4770      	bx	lr

0003f004 <win_offset_calc>:
{
   3f004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f008:	b091      	sub	sp, #68	; 0x44
   3f00a:	e9dd 781a 	ldrd	r7, r8, [sp, #104]	; 0x68
   3f00e:	9109      	str	r1, [sp, #36]	; 0x24
	if (conn_curr->lll.role) {
   3f010:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
{
   3f014:	9007      	str	r0, [sp, #28]
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   3f016:	6900      	ldr	r0, [r0, #16]
   3f018:	900b      	str	r0, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
   3f01a:	2900      	cmp	r1, #0
{
   3f01c:	920a      	str	r2, [sp, #40]	; 0x28
   3f01e:	9306      	str	r3, [sp, #24]
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3f020:	f04f 02ff 	mov.w	r2, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3f024:	f04f 0300 	mov.w	r3, #0
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   3f028:	bfbc      	itt	lt
   3f02a:	3014      	addlt	r0, #20
   3f02c:	900b      	strlt	r0, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3f02e:	4691      	mov	r9, r2
		ticks_anchor_prev = offset_index = offset = 0U;
   3f030:	461e      	mov	r6, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   3f032:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   3f036:	9205      	str	r2, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3f038:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
		ticks_anchor_prev = offset_index = offset = 0U;
   3f03c:	461c      	mov	r4, r3
   3f03e:	9304      	str	r3, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   3f040:	461d      	mov	r5, r3
   3f042:	469a      	mov	sl, r3
   3f044:	e049      	b.n	3f0da <win_offset_calc+0xd6>
		if (ticker_id == 0xff) {
   3f046:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3f04a:	28ff      	cmp	r0, #255	; 0xff
   3f04c:	d06c      	beq.n	3f128 <win_offset_calc+0x124>
		if ((ticker_id_prev != 0xff) &&
   3f04e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   3f052:	d012      	beq.n	3f07a <win_offset_calc+0x76>
   3f054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3f056:	9a04      	ldr	r2, [sp, #16]
   3f058:	4293      	cmp	r3, r2
   3f05a:	d00e      	beq.n	3f07a <win_offset_calc+0x76>
			LL_ASSERT(0);
   3f05c:	f240 13c3 	movw	r3, #451	; 0x1c3
   3f060:	4a8c      	ldr	r2, [pc, #560]	; (3f294 <win_offset_calc+0x290>)
   3f062:	498d      	ldr	r1, [pc, #564]	; (3f298 <win_offset_calc+0x294>)
   3f064:	488d      	ldr	r0, [pc, #564]	; (3f29c <win_offset_calc+0x298>)
   3f066:	f00b f839 	bl	4a0dc <printk>
   3f06a:	4040      	eors	r0, r0
   3f06c:	f380 8811 	msr	BASEPRI, r0
   3f070:	f04f 0003 	mov.w	r0, #3
   3f074:	df02      	svc	2
   3f076:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
   3f07a:	1e83      	subs	r3, r0, #2
   3f07c:	2b08      	cmp	r3, #8
   3f07e:	f200 8084 	bhi.w	3f18a <win_offset_calc+0x186>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   3f082:	2804      	cmp	r0, #4
   3f084:	f240 808e 	bls.w	3f1a4 <win_offset_calc+0x1a0>
		if (ticker_id_other != 0xff) {
   3f088:	9b05      	ldr	r3, [sp, #20]
   3f08a:	2bff      	cmp	r3, #255	; 0xff
   3f08c:	d179      	bne.n	3f182 <win_offset_calc+0x17e>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   3f08e:	3805      	subs	r0, #5
   3f090:	b280      	uxth	r0, r0
   3f092:	f7fa fed1 	bl	39e38 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   3f096:	9b07      	ldr	r3, [sp, #28]
   3f098:	4283      	cmp	r3, r0
   3f09a:	d076      	beq.n	3f18a <win_offset_calc+0x186>
   3f09c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3f09e:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   3f0a2:	783b      	ldrb	r3, [r7, #0]
   3f0a4:	2a00      	cmp	r2, #0
   3f0a6:	f040 808b 	bne.w	3f1c0 <win_offset_calc+0x1bc>
   3f0aa:	2900      	cmp	r1, #0
   3f0ac:	db13      	blt.n	3f0d6 <win_offset_calc+0xd2>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3f0ae:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   3f0b0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
   3f0b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3f0b8:	f101 0228 	add.w	r2, r1, #40	; 0x28
   3f0bc:	9208      	str	r2, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3f0be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3f0c0:	6811      	ldr	r1, [r2, #0]
   3f0c2:	4559      	cmp	r1, fp
   3f0c4:	f0c0 808b 	bcc.w	3f1de <win_offset_calc+0x1da>
			ticks_anchor_prev = ticks_anchor;
   3f0c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
			ticker_id_prev = ticker_id;
   3f0ca:	f89d 9033 	ldrb.w	r9, [sp, #51]	; 0x33
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   3f0ce:	f8dd a020 	ldr.w	sl, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
   3f0d2:	9204      	str	r2, [sp, #16]
			ticker_id_prev = ticker_id;
   3f0d4:	465d      	mov	r5, fp
	} while (offset_index < *offset_max);
   3f0d6:	429c      	cmp	r4, r3
   3f0d8:	d25a      	bcs.n	3f190 <win_offset_calc+0x18c>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3f0da:	ab0f      	add	r3, sp, #60	; 0x3c
   3f0dc:	9302      	str	r3, [sp, #8]
   3f0de:	4b70      	ldr	r3, [pc, #448]	; (3f2a0 <win_offset_calc+0x29c>)
   3f0e0:	9301      	str	r3, [sp, #4]
		ret_cb = TICKER_STATUS_BUSY;
   3f0e2:	f04f 0c02 	mov.w	ip, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3f0e6:	ab0d      	add	r3, sp, #52	; 0x34
   3f0e8:	9300      	str	r3, [sp, #0]
   3f0ea:	4661      	mov	r1, ip
   3f0ec:	ab0e      	add	r3, sp, #56	; 0x38
   3f0ee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   3f0f2:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   3f0f4:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   3f0f8:	f7f6 fb84 	bl	35804 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   3f0fc:	2802      	cmp	r0, #2
   3f0fe:	d054      	beq.n	3f1aa <win_offset_calc+0x1a6>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   3f100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   3f102:	2b00      	cmp	r3, #0
   3f104:	d09f      	beq.n	3f046 <win_offset_calc+0x42>
   3f106:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   3f10a:	4a62      	ldr	r2, [pc, #392]	; (3f294 <win_offset_calc+0x290>)
   3f10c:	4965      	ldr	r1, [pc, #404]	; (3f2a4 <win_offset_calc+0x2a0>)
   3f10e:	4863      	ldr	r0, [pc, #396]	; (3f29c <win_offset_calc+0x298>)
   3f110:	f00a ffe4 	bl	4a0dc <printk>
   3f114:	4040      	eors	r0, r0
   3f116:	f380 8811 	msr	BASEPRI, r0
   3f11a:	f04f 0003 	mov.w	r0, #3
   3f11e:	df02      	svc	2
		if (ticker_id == 0xff) {
   3f120:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   3f124:	28ff      	cmp	r0, #255	; 0xff
   3f126:	d192      	bne.n	3f04e <win_offset_calc+0x4a>
   3f128:	46d3      	mov	fp, sl
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   3f12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f12c:	681a      	ldr	r2, [r3, #0]
		while (offset_index < *offset_max) {
   3f12e:	783b      	ldrb	r3, [r7, #0]
   3f130:	4295      	cmp	r5, r2
   3f132:	bf38      	it	cc
   3f134:	4615      	movcc	r5, r2
   3f136:	42a3      	cmp	r3, r4
   3f138:	d921      	bls.n	3f17e <win_offset_calc+0x17a>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3f13a:	485b      	ldr	r0, [pc, #364]	; (3f2a8 <win_offset_calc+0x2a4>)
			if (offset >= conn_interval) {
   3f13c:	9e06      	ldr	r6, [sp, #24]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3f13e:	eb05 030b 	add.w	r3, r5, fp
   3f142:	fba0 2303 	umull	r2, r3, r0, r3
   3f146:	095b      	lsrs	r3, r3, #5
   3f148:	b29a      	uxth	r2, r3
			if (offset >= conn_interval) {
   3f14a:	42b2      	cmp	r2, r6
   3f14c:	d303      	bcc.n	3f156 <win_offset_calc+0x152>
   3f14e:	e090      	b.n	3f272 <win_offset_calc+0x26e>
   3f150:	4296      	cmp	r6, r2
   3f152:	f240 808e 	bls.w	3f272 <win_offset_calc+0x26e>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   3f156:	b221      	sxth	r1, r4
   3f158:	eb08 0c41 	add.w	ip, r8, r1, lsl #1
   3f15c:	0a12      	lsrs	r2, r2, #8
	dst[0] = val;
   3f15e:	f808 3011 	strb.w	r3, [r8, r1, lsl #1]
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   3f162:	3528      	adds	r5, #40	; 0x28
	dst[1] = val >> 8;
   3f164:	f88c 2001 	strb.w	r2, [ip, #1]
			offset_index++;
   3f168:	3401      	adds	r4, #1
		while (offset_index < *offset_max) {
   3f16a:	7839      	ldrb	r1, [r7, #0]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3f16c:	eb0b 0305 	add.w	r3, fp, r5
   3f170:	fba0 2303 	umull	r2, r3, r0, r3
			offset_index++;
   3f174:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3f176:	095b      	lsrs	r3, r3, #5
		while (offset_index < *offset_max) {
   3f178:	42a1      	cmp	r1, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   3f17a:	b29a      	uxth	r2, r3
		while (offset_index < *offset_max) {
   3f17c:	d8e8      	bhi.n	3f150 <win_offset_calc+0x14c>
		*ticks_to_offset_next = ticks_to_expire_prev;
   3f17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f180:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
   3f182:	703c      	strb	r4, [r7, #0]
}
   3f184:	b011      	add	sp, #68	; 0x44
   3f186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f18a:	783b      	ldrb	r3, [r7, #0]
	} while (offset_index < *offset_max);
   3f18c:	429c      	cmp	r4, r3
   3f18e:	d3a4      	bcc.n	3f0da <win_offset_calc+0xd6>
	if (ticker_id == 0xff) {
   3f190:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3f194:	2bff      	cmp	r3, #255	; 0xff
   3f196:	d1f4      	bne.n	3f182 <win_offset_calc+0x17e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   3f198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f19a:	681b      	ldr	r3, [r3, #0]
   3f19c:	429d      	cmp	r5, r3
   3f19e:	bf38      	it	cc
   3f1a0:	461d      	movcc	r5, r3
   3f1a2:	e7ec      	b.n	3f17e <win_offset_calc+0x17a>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   3f1a4:	9005      	str	r0, [sp, #20]
   3f1a6:	783b      	ldrb	r3, [r7, #0]
   3f1a8:	e795      	b.n	3f0d6 <win_offset_calc+0xd2>
			while (ret_cb == TICKER_STATUS_BUSY) {
   3f1aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3f1ac:	2b02      	cmp	r3, #2
   3f1ae:	d1a7      	bne.n	3f100 <win_offset_calc+0xfc>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   3f1b0:	2102      	movs	r1, #2
   3f1b2:	2000      	movs	r0, #0
   3f1b4:	f7f6 fb6e 	bl	35894 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   3f1b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3f1ba:	2b02      	cmp	r3, #2
   3f1bc:	d0f8      	beq.n	3f1b0 <win_offset_calc+0x1ac>
   3f1be:	e79f      	b.n	3f100 <win_offset_calc+0xfc>
			if (conn->lll.role) {
   3f1c0:	2900      	cmp	r1, #0
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3f1c2:	6900      	ldr	r0, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   3f1c4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
			if (conn->lll.role) {
   3f1c8:	da45      	bge.n	3f256 <win_offset_calc+0x252>
				ticks_slot_abs_curr += ticks_slot_margin;
   3f1ca:	f100 023c 	add.w	r2, r0, #60	; 0x3c
   3f1ce:	9208      	str	r2, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3f1d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3f1d2:	6811      	ldr	r1, [r2, #0]
   3f1d4:	4559      	cmp	r1, fp
				ticks_slot_margin =
   3f1d6:	f04f 0914 	mov.w	r9, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   3f1da:	f4bf af75 	bcs.w	3f0c8 <win_offset_calc+0xc4>
				if (ticks_to_expire_prev <
   3f1de:	428d      	cmp	r5, r1
   3f1e0:	bf38      	it	cc
   3f1e2:	460d      	movcc	r5, r1
				while ((offset_index < *offset_max) &&
   3f1e4:	429c      	cmp	r4, r3
   3f1e6:	d22f      	bcs.n	3f248 <win_offset_calc+0x244>
   3f1e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3f1ea:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
   3f1ee:	4453      	add	r3, sl
   3f1f0:	46b0      	mov	r8, r6
   3f1f2:	4499      	add	r9, r3
   3f1f4:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   3f1f6:	e011      	b.n	3f21c <win_offset_calc+0x218>
					if (offset >= conn_interval) {
   3f1f8:	9a06      	ldr	r2, [sp, #24]
					offset = (ticks_to_expire_prev +
   3f1fa:	fa1f f883 	uxth.w	r8, r3
					if (offset >= conn_interval) {
   3f1fe:	4590      	cmp	r8, r2
   3f200:	ea4f 2018 	mov.w	r0, r8, lsr #8
					ticks_to_expire_prev +=
   3f204:	f105 0528 	add.w	r5, r5, #40	; 0x28
					if (offset >= conn_interval) {
   3f208:	d237      	bcs.n	3f27a <win_offset_calc+0x276>
	dst[0] = val;
   3f20a:	f806 3011 	strb.w	r3, [r6, r1, lsl #1]
	dst[1] = val >> 8;
   3f20e:	f88c 0001 	strb.w	r0, [ip, #1]
				while ((offset_index < *offset_max) &&
   3f212:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   3f214:	fa5f f48e 	uxtb.w	r4, lr
				while ((offset_index < *offset_max) &&
   3f218:	42a3      	cmp	r3, r4
   3f21a:	d922      	bls.n	3f262 <win_offset_calc+0x25e>
				       (ticker_ticks_diff_get(
   3f21c:	4629      	mov	r1, r5
   3f21e:	4658      	mov	r0, fp
   3f220:	f7f6 fb52 	bl	358c8 <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   3f224:	4a20      	ldr	r2, [pc, #128]	; (3f2a8 <win_offset_calc+0x2a4>)
   3f226:	eb05 030a 	add.w	r3, r5, sl
						      (sizeof(uint16_t) *
   3f22a:	b221      	sxth	r1, r4
						  ticks_slot_abs_prev) /
   3f22c:	fba2 2303 	umull	r2, r3, r2, r3
				while ((offset_index < *offset_max) &&
   3f230:	4548      	cmp	r0, r9
					sys_put_le16(offset,
   3f232:	eb06 0c41 	add.w	ip, r6, r1, lsl #1
						  ticks_slot_abs_prev) /
   3f236:	ea4f 1353 	mov.w	r3, r3, lsr #5
					offset_index++;
   3f23a:	f104 0e01 	add.w	lr, r4, #1
				while ((offset_index < *offset_max) &&
   3f23e:	d2db      	bcs.n	3f1f8 <win_offset_calc+0x1f4>
   3f240:	961b      	str	r6, [sp, #108]	; 0x6c
   3f242:	4646      	mov	r6, r8
   3f244:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
				*ticks_to_offset_next = ticks_to_expire_prev;
   3f248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f24a:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   3f24c:	9b06      	ldr	r3, [sp, #24]
   3f24e:	42b3      	cmp	r3, r6
   3f250:	d91e      	bls.n	3f290 <win_offset_calc+0x28c>
   3f252:	783b      	ldrb	r3, [r7, #0]
   3f254:	e738      	b.n	3f0c8 <win_offset_calc+0xc4>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   3f256:	f100 0228 	add.w	r2, r0, #40	; 0x28
   3f25a:	9208      	str	r2, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
   3f25c:	f04f 0900 	mov.w	r9, #0
   3f260:	e72d      	b.n	3f0be <win_offset_calc+0xba>
				*ticks_to_offset_next = ticks_to_expire_prev;
   3f262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f264:	961b      	str	r6, [sp, #108]	; 0x6c
   3f266:	601d      	str	r5, [r3, #0]
   3f268:	4646      	mov	r6, r8
   3f26a:	783b      	ldrb	r3, [r7, #0]
   3f26c:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
				if (offset >= conn_interval) {
   3f270:	e72a      	b.n	3f0c8 <win_offset_calc+0xc4>
		*ticks_to_offset_next = ticks_to_expire_prev;
   3f272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
   3f274:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   3f276:	601d      	str	r5, [r3, #0]
   3f278:	e783      	b.n	3f182 <win_offset_calc+0x17e>
				*ticks_to_offset_next = ticks_to_expire_prev;
   3f27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3f27c:	2500      	movs	r5, #0
   3f27e:	46d3      	mov	fp, sl
   3f280:	46b0      	mov	r8, r6
   3f282:	601d      	str	r5, [r3, #0]
	if (ticker_id == 0xff) {
   3f284:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3f288:	2bff      	cmp	r3, #255	; 0xff
   3f28a:	f47f af7a 	bne.w	3f182 <win_offset_calc+0x17e>
   3f28e:	e74c      	b.n	3f12a <win_offset_calc+0x126>
   3f290:	46d3      	mov	fp, sl
   3f292:	e7f7      	b.n	3f284 <win_offset_calc+0x280>
   3f294:	000534fc 	.word	0x000534fc
   3f298:	00052dd8 	.word	0x00052dd8
   3f29c:	00052d50 	.word	0x00052d50
   3f2a0:	0003f001 	.word	0x0003f001
   3f2a4:	00053540 	.word	0x00053540
   3f2a8:	cccccccd 	.word	0xcccccccd

0003f2ac <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   3f2ac:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   3f2ae:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   3f2b0:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   3f2b2:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   3f2b4:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   3f2b6:	89c0      	ldrh	r0, [r0, #14]
   3f2b8:	6909      	ldr	r1, [r1, #16]
   3f2ba:	3310      	adds	r3, #16
   3f2bc:	f7e9 b9b0 	b.w	28620 <after_mstr_offset_get>

0003f2c0 <ull_sched_mfy_win_offset_use>:
{
   3f2c0:	b510      	push	{r4, lr}
   3f2c2:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   3f2c4:	f500 7392 	add.w	r3, r0, #292	; 0x124
   3f2c8:	f8d0 20fc 	ldr.w	r2, [r0, #252]	; 0xfc
   3f2cc:	6901      	ldr	r1, [r0, #16]
   3f2ce:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   3f2d0:	f7e9 f9a6 	bl	28620 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   3f2d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   3f2d8:	4908      	ldr	r1, [pc, #32]	; (3f2fc <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   3f2da:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   3f2de:	fba1 1303 	umull	r1, r3, r1, r3
   3f2e2:	0a9b      	lsrs	r3, r3, #10
   3f2e4:	f3c3 2107 	ubfx	r1, r3, #8, #8
   3f2e8:	7051      	strb	r1, [r2, #1]
	dst[0] = val;
   3f2ea:	7013      	strb	r3, [r2, #0]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   3f2ec:	f894 311a 	ldrb.w	r3, [r4, #282]	; 0x11a
   3f2f0:	2204      	movs	r2, #4
   3f2f2:	f362 0302 	bfi	r3, r2, #0, #3
   3f2f6:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
}
   3f2fa:	bd10      	pop	{r4, pc}
   3f2fc:	d1b71759 	.word	0xd1b71759

0003f300 <ull_sched_mfy_free_win_offset_calc>:
{
   3f300:	b510      	push	{r4, lr}
	if (conn->lll.role) {
   3f302:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   3f306:	2b00      	cmp	r3, #0
{
   3f308:	b084      	sub	sp, #16
		conn->llcp_conn_param.ticks_to_offset_next =
   3f30a:	bfbc      	itt	lt
   3f30c:	f8d0 30ec 	ldrlt.w	r3, [r0, #236]	; 0xec
   3f310:	f8c0 31b8 	strlt.w	r3, [r0, #440]	; 0x1b8
	uint32_t ticks_to_offset_default = 0U;
   3f314:	f04f 0200 	mov.w	r2, #0
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3f318:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
	uint32_t ticks_to_offset_default = 0U;
   3f31c:	9203      	str	r2, [sp, #12]
{
   3f31e:	4604      	mov	r4, r0
	uint8_t offset_max = 6U;
   3f320:	f04f 0206 	mov.w	r2, #6
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3f324:	9301      	str	r3, [sp, #4]
   3f326:	f10d 030b 	add.w	r3, sp, #11
	uint8_t offset_max = 6U;
   3f32a:	f88d 200b 	strb.w	r2, [sp, #11]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3f32e:	9300      	str	r3, [sp, #0]
		ticks_to_offset_next =
   3f330:	bfb4      	ite	lt
   3f332:	f500 72dc 	addlt.w	r2, r0, #440	; 0x1b8
	ticks_to_offset_next = &ticks_to_offset_default;
   3f336:	aa03      	addge	r2, sp, #12
	win_offset_calc(conn, 0, ticks_to_offset_next,
   3f338:	f8b0 319a 	ldrh.w	r3, [r0, #410]	; 0x19a
   3f33c:	2100      	movs	r1, #0
   3f33e:	f7ff fe61 	bl	3f004 <win_offset_calc>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   3f342:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
   3f346:	2208      	movs	r2, #8
   3f348:	f362 0303 	bfi	r3, r2, #0, #4
   3f34c:	f884 3196 	strb.w	r3, [r4, #406]	; 0x196
}
   3f350:	b004      	add	sp, #16
   3f352:	bd10      	pop	{r4, pc}

0003f354 <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   3f354:	b510      	push	{r4, lr}
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   3f356:	4c08      	ldr	r4, [pc, #32]	; (3f378 <ll_chm_update+0x24>)
   3f358:	2205      	movs	r2, #5
   3f35a:	4601      	mov	r1, r0
   3f35c:	4620      	mov	r0, r4
   3f35e:	f00c ffc5 	bl	4c2ec <memcpy>
	count = util_ones_count_get(map, sizeof(map));
   3f362:	2105      	movs	r1, #5
   3f364:	4620      	mov	r0, r4
   3f366:	f7f4 ff37 	bl	341d8 <util_ones_count_get>
   3f36a:	4b04      	ldr	r3, [pc, #16]	; (3f37c <ll_chm_update+0x28>)
   3f36c:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   3f36e:	f7ff fe1f 	bl	3efb0 <ull_central_chm_update>
}
   3f372:	2000      	movs	r0, #0
   3f374:	bd10      	pop	{r4, pc}
   3f376:	bf00      	nop
   3f378:	20000b14 	.word	0x20000b14
   3f37c:	20000dac 	.word	0x20000dac

0003f380 <ull_chan_map_get>:
{
   3f380:	b508      	push	{r3, lr}
	(void)memcpy(chan_map, map, sizeof(map));
   3f382:	2205      	movs	r2, #5
   3f384:	4902      	ldr	r1, [pc, #8]	; (3f390 <ull_chan_map_get+0x10>)
   3f386:	f00c ffb1 	bl	4c2ec <memcpy>
	return count;
   3f38a:	4b02      	ldr	r3, [pc, #8]	; (3f394 <ull_chan_map_get+0x14>)
}
   3f38c:	7818      	ldrb	r0, [r3, #0]
   3f38e:	bd08      	pop	{r3, pc}
   3f390:	20000b14 	.word	0x20000b14
   3f394:	20000dac 	.word	0x20000dac

0003f398 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   3f398:	b470      	push	{r4, r5, r6}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3f39a:	fb02 1101 	mla	r1, r2, r1, r1
   3f39e:	7802      	ldrb	r2, [r0, #0]
   3f3a0:	4c1b      	ldr	r4, [pc, #108]	; (3f410 <lll_chan_sel_1+0x78>)
{
   3f3a2:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   3f3a6:	4411      	add	r1, r2
   3f3a8:	fb84 2401 	smull	r2, r4, r4, r1
   3f3ac:	440c      	add	r4, r1
   3f3ae:	1164      	asrs	r4, r4, #5
   3f3b0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   3f3b4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   3f3b8:	1b0c      	subs	r4, r1, r4
   3f3ba:	b2e2      	uxtb	r2, r4
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3f3bc:	08d1      	lsrs	r1, r2, #3
	*chan_use = chan_next;
   3f3be:	7002      	strb	r2, [r0, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3f3c0:	5c59      	ldrb	r1, [r3, r1]
   3f3c2:	f004 0407 	and.w	r4, r4, #7
   3f3c6:	fa41 f404 	asr.w	r4, r1, r4
   3f3ca:	f014 0401 	ands.w	r4, r4, #1
   3f3ce:	d11b      	bne.n	3f408 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   3f3d0:	fbb2 f0f5 	udiv	r0, r2, r5
   3f3d4:	fb05 2010 	mls	r0, r5, r0, r2
   3f3d8:	1e5e      	subs	r6, r3, #1
   3f3da:	b2c0      	uxtb	r0, r0
static uint8_t chan_sel_remap(uint8_t *chan_map, uint8_t chan_index)
{
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
   3f3dc:	4622      	mov	r2, r4
   3f3de:	3304      	adds	r3, #4
	byte_count = 5U;
	while (byte_count--) {
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   3f3e0:	f102 0508 	add.w	r5, r2, #8
   3f3e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		bit_count = 8U;
		while (bit_count--) {
   3f3e8:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   3f3ea:	f011 0f01 	tst.w	r1, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   3f3ee:	f102 0401 	add.w	r4, r2, #1
			bite >>= 1;
   3f3f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   3f3f6:	d002      	beq.n	3f3fe <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   3f3f8:	b130      	cbz	r0, 3f408 <lll_chan_sel_1+0x70>
				chan_index--;
   3f3fa:	3801      	subs	r0, #1
   3f3fc:	b2c0      	uxtb	r0, r0
			chan_next++;
   3f3fe:	b2e2      	uxtb	r2, r4
		while (bit_count--) {
   3f400:	42aa      	cmp	r2, r5
   3f402:	d1f2      	bne.n	3f3ea <lll_chan_sel_1+0x52>
	while (byte_count--) {
   3f404:	429e      	cmp	r6, r3
   3f406:	d1eb      	bne.n	3f3e0 <lll_chan_sel_1+0x48>
}
   3f408:	4610      	mov	r0, r2
   3f40a:	bc70      	pop	{r4, r5, r6}
   3f40c:	4770      	bx	lr
   3f40e:	bf00      	nop
   3f410:	dd67c8a7 	.word	0xdd67c8a7

0003f414 <lll_chan_id>:
{
   3f414:	b410      	push	{r4}
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   3f416:	7844      	ldrb	r4, [r0, #1]
	uint16_t aa_ms = ((uint16_t)access_addr[3] << 8) | access_addr[2];
   3f418:	78c1      	ldrb	r1, [r0, #3]
   3f41a:	7883      	ldrb	r3, [r0, #2]
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   3f41c:	7802      	ldrb	r2, [r0, #0]
	uint16_t aa_ms = ((uint16_t)access_addr[3] << 8) | access_addr[2];
   3f41e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   3f422:	ea42 2004 	orr.w	r0, r2, r4, lsl #8
}
   3f426:	4058      	eors	r0, r3
   3f428:	bc10      	pop	{r4}
   3f42a:	4770      	bx	lr

0003f42c <lll_chan_sel_2>:
{
   3f42c:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3f42e:	4d2e      	ldr	r5, [pc, #184]	; (3f4e8 <lll_chan_sel_2+0xbc>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3f430:	4c2e      	ldr	r4, [pc, #184]	; (3f4ec <lll_chan_sel_2+0xc0>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   3f432:	4048      	eors	r0, r1
   3f434:	2603      	movs	r6, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3f436:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   3f43a:	b2c0      	uxtb	r0, r0
   3f43c:	eb0c 2e8c 	add.w	lr, ip, ip, lsl #10
   3f440:	eb00 2780 	add.w	r7, r0, r0, lsl #10
   3f444:	ea05 0c4e 	and.w	ip, r5, lr, lsl #1
   3f448:	ea05 0047 	and.w	r0, r5, r7, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3f44c:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
   3f450:	ea04 1747 	and.w	r7, r4, r7, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   3f454:	ea4c 0c0e 	orr.w	ip, ip, lr
   3f458:	4338      	orrs	r0, r7
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   3f45a:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   3f45e:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   3f462:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   3f466:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   3f46a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   3f46e:	f3c0 4007 	ubfx	r0, r0, #16, #8
   3f472:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3f476:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   3f47a:	3e01      	subs	r6, #1
   3f47c:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   3f47e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   3f482:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   3f484:	d1d7      	bne.n	3f436 <lll_chan_sel_2+0xa>
	chan_next = prn_e % 37;
   3f486:	4c1a      	ldr	r4, [pc, #104]	; (3f4f0 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   3f488:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   3f48a:	fba4 4001 	umull	r4, r0, r4, r1
   3f48e:	1a0c      	subs	r4, r1, r0
   3f490:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   3f494:	0940      	lsrs	r0, r0, #5
   3f496:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   3f49a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   3f49e:	1a08      	subs	r0, r1, r0
   3f4a0:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   3f4a2:	08c4      	lsrs	r4, r0, #3
   3f4a4:	f000 0507 	and.w	r5, r0, #7
   3f4a8:	5d14      	ldrb	r4, [r2, r4]
   3f4aa:	412c      	asrs	r4, r5
   3f4ac:	07e4      	lsls	r4, r4, #31
   3f4ae:	d41a      	bmi.n	3f4e6 <lll_chan_sel_2+0xba>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   3f4b0:	fb01 f103 	mul.w	r1, r1, r3
	chan_next = 0U;
   3f4b4:	4630      	mov	r0, r6
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   3f4b6:	f3c1 4107 	ubfx	r1, r1, #16, #8
	while (byte_count--) {
   3f4ba:	1e56      	subs	r6, r2, #1
   3f4bc:	3204      	adds	r2, #4
		bite = *chan_map;
   3f4be:	f100 0508 	add.w	r5, r0, #8
   3f4c2:	f816 3f01 	ldrb.w	r3, [r6, #1]!
		while (bit_count--) {
   3f4c6:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   3f4c8:	f013 0f01 	tst.w	r3, #1
			chan_next++;
   3f4cc:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   3f4d0:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   3f4d4:	d002      	beq.n	3f4dc <lll_chan_sel_2+0xb0>
				if (chan_index == 0U) {
   3f4d6:	b131      	cbz	r1, 3f4e6 <lll_chan_sel_2+0xba>
				chan_index--;
   3f4d8:	3901      	subs	r1, #1
   3f4da:	b2c9      	uxtb	r1, r1
			chan_next++;
   3f4dc:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   3f4de:	42a8      	cmp	r0, r5
   3f4e0:	d1f2      	bne.n	3f4c8 <lll_chan_sel_2+0x9c>
	while (byte_count--) {
   3f4e2:	42b2      	cmp	r2, r6
   3f4e4:	d1eb      	bne.n	3f4be <lll_chan_sel_2+0x92>
}
   3f4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3f4e8:	00022110 	.word	0x00022110
   3f4ec:	00088440 	.word	0x00088440
   3f4f0:	bacf914d 	.word	0xbacf914d

0003f4f4 <fal_find>:
	}
}

static uint8_t fal_find(uint8_t addr_type, const uint8_t *const addr,
			uint8_t *const free_idx)
{
   3f4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3f4f8:	4688      	mov	r8, r1
	int i;

	if (free_idx) {
   3f4fa:	4615      	mov	r5, r2
   3f4fc:	b10a      	cbz	r2, 3f502 <fal_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   3f4fe:	23ff      	movs	r3, #255	; 0xff
   3f500:	7013      	strb	r3, [r2, #0]
   3f502:	4e17      	ldr	r6, [pc, #92]	; (3f560 <fal_find+0x6c>)
	}

	for (i = 0; i < FAL_SIZE; i++) {
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f504:	f000 0701 	and.w	r7, r0, #1
   3f508:	f106 0902 	add.w	r9, r6, #2
{
   3f50c:	2400      	movs	r4, #0
   3f50e:	e004      	b.n	3f51a <fal_find+0x26>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f510:	42ba      	cmp	r2, r7
   3f512:	d014      	beq.n	3f53e <fal_find+0x4a>
	for (i = 0; i < FAL_SIZE; i++) {
   3f514:	3401      	adds	r4, #1
   3f516:	2c08      	cmp	r4, #8
   3f518:	d00e      	beq.n	3f538 <fal_find+0x44>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f51a:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   3f51e:	07d9      	lsls	r1, r3, #31
   3f520:	f3c3 0240 	ubfx	r2, r3, #1, #1
   3f524:	d4f4      	bmi.n	3f510 <fal_find+0x1c>
			return i;
		} else if (free_idx && !fal[i].taken &&
   3f526:	2d00      	cmp	r5, #0
   3f528:	d0f4      	beq.n	3f514 <fal_find+0x20>
   3f52a:	782b      	ldrb	r3, [r5, #0]
   3f52c:	2bff      	cmp	r3, #255	; 0xff
			   (*free_idx == FILTER_IDX_NONE)) {
			*free_idx = i;
   3f52e:	bf08      	it	eq
   3f530:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < FAL_SIZE; i++) {
   3f532:	3401      	adds	r4, #1
   3f534:	2c08      	cmp	r4, #8
   3f536:	d1f0      	bne.n	3f51a <fal_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   3f538:	20ff      	movs	r0, #255	; 0xff
}
   3f53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   3f53e:	2206      	movs	r2, #6
   3f540:	4641      	mov	r1, r8
   3f542:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   3f546:	f00c fec1 	bl	4c2cc <memcmp>
   3f54a:	b130      	cbz	r0, 3f55a <fal_find+0x66>
		} else if (free_idx && !fal[i].taken &&
   3f54c:	2d00      	cmp	r5, #0
   3f54e:	d0e1      	beq.n	3f514 <fal_find+0x20>
   3f550:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   3f554:	07db      	lsls	r3, r3, #31
   3f556:	d4dd      	bmi.n	3f514 <fal_find+0x20>
   3f558:	e7e7      	b.n	3f52a <fal_find+0x36>
			return i;
   3f55a:	b2e0      	uxtb	r0, r4
   3f55c:	e7ed      	b.n	3f53a <fal_find+0x46>
   3f55e:	bf00      	nop
   3f560:	20005888 	.word	0x20005888

0003f564 <fal_update>:

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

static void fal_update(void)
{
   3f564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f568:	4f21      	ldr	r7, [pc, #132]	; (3f5f0 <fal_update+0x8c>)
   3f56a:	4d22      	ldr	r5, [pc, #136]	; (3f5f4 <fal_update+0x90>)
			continue;
		}

		j = fal[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3f56c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3f5f8 <fal_update+0x94>
   3f570:	f8df a088 	ldr.w	sl, [pc, #136]	; 3f5fc <fal_update+0x98>
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   3f574:	f1a7 0802 	sub.w	r8, r7, #2
   3f578:	f1a5 0b02 	sub.w	fp, r5, #2
{
   3f57c:	2400      	movs	r4, #0
		if (!fal[i].taken) {
   3f57e:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   3f582:	2601      	movs	r6, #1
		if (!fal[i].taken) {
   3f584:	f013 0f01 	tst.w	r3, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f588:	4638      	mov	r0, r7
	filter->enable_bitmask |= BIT(index);
   3f58a:	fa06 f604 	lsl.w	r6, r6, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f58e:	4629      	mov	r1, r5
   3f590:	f107 0706 	add.w	r7, r7, #6
   3f594:	f04f 0206 	mov.w	r2, #6
		if (!fal[i].taken) {
   3f598:	d022      	beq.n	3f5e0 <fal_update+0x7c>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3f59a:	f899 3000 	ldrb.w	r3, [r9]
   3f59e:	b163      	cbz	r3, 3f5ba <fal_update+0x56>
		j = fal[i].rl_idx;
   3f5a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   3f5a4:	2b07      	cmp	r3, #7
   3f5a6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   3f5aa:	d806      	bhi.n	3f5ba <fal_update+0x56>
   3f5ac:	f81a 303c 	ldrb.w	r3, [sl, ip, lsl #3]
   3f5b0:	f013 0f04 	tst.w	r3, #4
   3f5b4:	d001      	beq.n	3f5ba <fal_update+0x56>
   3f5b6:	06db      	lsls	r3, r3, #27
   3f5b8:	d512      	bpl.n	3f5e0 <fal_update+0x7c>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   3f5ba:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f5be:	f898 e001 	ldrb.w	lr, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   3f5c2:	f898 c000 	ldrb.w	ip, [r8]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   3f5c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f5ca:	40a3      	lsls	r3, r4
   3f5cc:	ea4e 0303 	orr.w	r3, lr, r3
	filter->enable_bitmask |= BIT(index);
   3f5d0:	ea4c 0606 	orr.w	r6, ip, r6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f5d4:	f888 3001 	strb.w	r3, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   3f5d8:	f888 6000 	strb.w	r6, [r8]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f5dc:	f00c fe86 	bl	4c2ec <memcpy>
   3f5e0:	3401      	adds	r4, #1
	for (i = 0U; i < FAL_SIZE; i++) {
   3f5e2:	2c08      	cmp	r4, #8
   3f5e4:	f105 0508 	add.w	r5, r5, #8
   3f5e8:	d1c9      	bne.n	3f57e <fal_update+0x1a>
}
   3f5ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f5ee:	bf00      	nop
   3f5f0:	200058ca 	.word	0x200058ca
   3f5f4:	2000588a 	.word	0x2000588a
   3f5f8:	20006d98 	.word	0x20006d98
   3f5fc:	200059b4 	.word	0x200059b4

0003f600 <rl_update>:
{
   3f600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f604:	f8df 8060 	ldr.w	r8, [pc, #96]	; 3f668 <rl_update+0x68>
	filter->enable_bitmask |= BIT(index);
   3f608:	4d16      	ldr	r5, [pc, #88]	; (3f664 <rl_update+0x64>)
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f60a:	f108 0701 	add.w	r7, r8, #1
   3f60e:	1cae      	adds	r6, r5, #2
{
   3f610:	2400      	movs	r4, #0
   3f612:	e002      	b.n	3f61a <rl_update+0x1a>
   3f614:	3401      	adds	r4, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f616:	2c08      	cmp	r4, #8
   3f618:	d021      	beq.n	3f65e <rl_update+0x5e>
		if (rl[i].taken) {
   3f61a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3f61e:	00d9      	lsls	r1, r3, #3
   3f620:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   3f624:	07da      	lsls	r2, r3, #31
   3f626:	d5f5      	bpl.n	3f614 <rl_update+0x14>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f628:	786a      	ldrb	r2, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   3f62a:	f895 c000 	ldrb.w	ip, [r5]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   3f62e:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   3f632:	f04f 0e01 	mov.w	lr, #1
   3f636:	fa0e fe04 	lsl.w	lr, lr, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f63a:	40a3      	lsls	r3, r4
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f63c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f640:	4313      	orrs	r3, r2
	filter->enable_bitmask |= BIT(index);
   3f642:	ea4c 0c0e 	orr.w	ip, ip, lr
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f646:	4439      	add	r1, r7
   3f648:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   3f64c:	2206      	movs	r2, #6
   3f64e:	3401      	adds	r4, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   3f650:	706b      	strb	r3, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   3f652:	f885 c000 	strb.w	ip, [r5]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   3f656:	f00c fe49 	bl	4c2ec <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3f65a:	2c08      	cmp	r4, #8
   3f65c:	d1dd      	bne.n	3f61a <rl_update+0x1a>
}
   3f65e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3f662:	bf00      	nop
   3f664:	20005af4 	.word	0x20005af4
   3f668:	200059b4 	.word	0x200059b4

0003f66c <rl_access_check.part.1>:
static int rl_access_check(bool check_ar)
   3f66c:	b508      	push	{r3, lr}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   3f66e:	2000      	movs	r0, #0
   3f670:	f7f9 ff70 	bl	39554 <ull_scan_is_enabled>
		? 0 : 1;
   3f674:	f030 0301 	bics.w	r3, r0, #1
}
   3f678:	bf0c      	ite	eq
   3f67a:	2001      	moveq	r0, #1
   3f67c:	2000      	movne	r0, #0
   3f67e:	bd08      	pop	{r3, pc}

0003f680 <ll_fal_size_get>:
}
   3f680:	2008      	movs	r0, #8
   3f682:	4770      	bx	lr

0003f684 <ll_fal_clear>:
{
   3f684:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   3f686:	2000      	movs	r0, #0
   3f688:	f7f9 fd48 	bl	3911c <ull_adv_filter_pol_get>
   3f68c:	b9f0      	cbnz	r0, 3f6cc <ll_fal_clear+0x48>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3f68e:	f7f9 ff79 	bl	39584 <ull_scan_filter_pol_get>
   3f692:	f010 0001 	ands.w	r0, r0, #1
   3f696:	d119      	bne.n	3f6cc <ll_fal_clear+0x48>
   3f698:	4a0d      	ldr	r2, [pc, #52]	; (3f6d0 <ll_fal_clear+0x4c>)
			rl[j].fal = 0U;
   3f69a:	4c0e      	ldr	r4, [pc, #56]	; (3f6d4 <ll_fal_clear+0x50>)
		uint8_t j = fal[i].rl_idx;
   3f69c:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   3f6a0:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   3f6a2:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   3f6a4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   3f6a8:	d805      	bhi.n	3f6b6 <ll_fal_clear+0x32>
			rl[j].fal = 0U;
   3f6aa:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   3f6ae:	f36f 1345 	bfc	r3, #5, #1
   3f6b2:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   3f6b6:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   3f6ba:	f36f 0300 	bfc	r3, #0, #1
   3f6be:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   3f6c2:	3001      	adds	r0, #1
   3f6c4:	2808      	cmp	r0, #8
   3f6c6:	d1e9      	bne.n	3f69c <ll_fal_clear+0x18>
	return 0;
   3f6c8:	2000      	movs	r0, #0
}
   3f6ca:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f6cc:	200c      	movs	r0, #12
}
   3f6ce:	bd10      	pop	{r4, pc}
   3f6d0:	20005888 	.word	0x20005888
   3f6d4:	200059b4 	.word	0x200059b4

0003f6d8 <ll_fal_remove>:
{
   3f6d8:	b538      	push	{r3, r4, r5, lr}
   3f6da:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   3f6dc:	2000      	movs	r0, #0
   3f6de:	f7f9 fd1d 	bl	3911c <ull_adv_filter_pol_get>
   3f6e2:	b978      	cbnz	r0, 3f704 <ll_fal_remove+0x2c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3f6e4:	f7f9 ff4e 	bl	39584 <ull_scan_filter_pol_get>
   3f6e8:	f010 0401 	ands.w	r4, r0, #1
   3f6ec:	d10a      	bne.n	3f704 <ll_fal_remove+0x2c>
	if (addr->type == ADDR_TYPE_ANON) {
   3f6ee:	7828      	ldrb	r0, [r5, #0]
   3f6f0:	28ff      	cmp	r0, #255	; 0xff
   3f6f2:	d009      	beq.n	3f708 <ll_fal_remove+0x30>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   3f6f4:	1c69      	adds	r1, r5, #1
   3f6f6:	4622      	mov	r2, r4
   3f6f8:	f7ff fefc 	bl	3f4f4 <fal_find>
	if (i < ARRAY_SIZE(fal)) {
   3f6fc:	2807      	cmp	r0, #7
   3f6fe:	d905      	bls.n	3f70c <ll_fal_remove+0x34>
   3f700:	2002      	movs	r0, #2
}
   3f702:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f704:	200c      	movs	r0, #12
}
   3f706:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   3f708:	4620      	mov	r0, r4
}
   3f70a:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = fal[i].rl_idx;
   3f70c:	4a0a      	ldr	r2, [pc, #40]	; (3f738 <ll_fal_remove+0x60>)
   3f70e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   3f712:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   3f714:	2b07      	cmp	r3, #7
   3f716:	d807      	bhi.n	3f728 <ll_fal_remove+0x50>
			rl[j].fal = 0U;
   3f718:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   3f71c:	00db      	lsls	r3, r3, #3
   3f71e:	4907      	ldr	r1, [pc, #28]	; (3f73c <ll_fal_remove+0x64>)
   3f720:	5ccd      	ldrb	r5, [r1, r3]
   3f722:	f364 1545 	bfi	r5, r4, #5, #1
   3f726:	54cd      	strb	r5, [r1, r3]
		fal[i].taken = 0U;
   3f728:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   3f72c:	f36f 0300 	bfc	r3, #0, #1
   3f730:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
   3f734:	2000      	movs	r0, #0
}
   3f736:	bd38      	pop	{r3, r4, r5, pc}
   3f738:	20005888 	.word	0x20005888
   3f73c:	200059b4 	.word	0x200059b4

0003f740 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3f740:	2807      	cmp	r0, #7
{
   3f742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f746:	4604      	mov	r4, r0
   3f748:	460f      	mov	r7, r1
   3f74a:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3f74c:	d816      	bhi.n	3f77c <ll_rl_id_addr_get+0x3c>
	LL_ASSERT(rl[rl_idx].taken);
   3f74e:	00a5      	lsls	r5, r4, #2
   3f750:	192b      	adds	r3, r5, r4
   3f752:	4e18      	ldr	r6, [pc, #96]	; (3f7b4 <ll_rl_id_addr_get+0x74>)
   3f754:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   3f758:	07db      	lsls	r3, r3, #31
   3f75a:	d51d      	bpl.n	3f798 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   3f75c:	4425      	add	r5, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3f75e:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   3f760:	f816 3035 	ldrb.w	r3, [r6, r5, lsl #3]
   3f764:	f3c3 1380 	ubfx	r3, r3, #6, #1
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3f768:	fb01 6104 	mla	r1, r1, r4, r6
	*id_addr_type = rl[rl_idx].id_addr_type;
   3f76c:	703b      	strb	r3, [r7, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3f76e:	4640      	mov	r0, r8
   3f770:	3101      	adds	r1, #1
   3f772:	2206      	movs	r2, #6
}
   3f774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   3f778:	f00c bdb8 	b.w	4c2ec <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   3f77c:	f44f 7389 	mov.w	r3, #274	; 0x112
   3f780:	4a0d      	ldr	r2, [pc, #52]	; (3f7b8 <ll_rl_id_addr_get+0x78>)
   3f782:	490e      	ldr	r1, [pc, #56]	; (3f7bc <ll_rl_id_addr_get+0x7c>)
   3f784:	480e      	ldr	r0, [pc, #56]	; (3f7c0 <ll_rl_id_addr_get+0x80>)
   3f786:	f00a fca9 	bl	4a0dc <printk>
   3f78a:	4040      	eors	r0, r0
   3f78c:	f380 8811 	msr	BASEPRI, r0
   3f790:	f04f 0003 	mov.w	r0, #3
   3f794:	df02      	svc	2
   3f796:	e7da      	b.n	3f74e <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   3f798:	f240 1313 	movw	r3, #275	; 0x113
   3f79c:	4a06      	ldr	r2, [pc, #24]	; (3f7b8 <ll_rl_id_addr_get+0x78>)
   3f79e:	4909      	ldr	r1, [pc, #36]	; (3f7c4 <ll_rl_id_addr_get+0x84>)
   3f7a0:	4807      	ldr	r0, [pc, #28]	; (3f7c0 <ll_rl_id_addr_get+0x80>)
   3f7a2:	f00a fc9b 	bl	4a0dc <printk>
   3f7a6:	4040      	eors	r0, r0
   3f7a8:	f380 8811 	msr	BASEPRI, r0
   3f7ac:	f04f 0003 	mov.w	r0, #3
   3f7b0:	df02      	svc	2
   3f7b2:	e7d3      	b.n	3f75c <ll_rl_id_addr_get+0x1c>
   3f7b4:	200059b4 	.word	0x200059b4
   3f7b8:	00053548 	.word	0x00053548
   3f7bc:	0005358c 	.word	0x0005358c
   3f7c0:	00052d50 	.word	0x00052d50
   3f7c4:	00053598 	.word	0x00053598

0003f7c8 <ll_rl_size_get>:
   3f7c8:	2008      	movs	r0, #8
   3f7ca:	4770      	bx	lr

0003f7cc <ll_rl_clear>:
{
   3f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f7ce:	2000      	movs	r0, #0
   3f7d0:	f7f9 fc98 	bl	39104 <ull_adv_is_enabled>
		? 0 : 1;
   3f7d4:	b108      	cbz	r0, 3f7da <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f7d6:	200c      	movs	r0, #12
}
   3f7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3f7da:	4604      	mov	r4, r0
   3f7dc:	f7ff ff46 	bl	3f66c <rl_access_check.part.1>
	if (!rl_access_check(false)) {
   3f7e0:	2800      	cmp	r0, #0
   3f7e2:	d0f8      	beq.n	3f7d6 <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   3f7e4:	4b1a      	ldr	r3, [pc, #104]	; (3f850 <ll_rl_clear+0x84>)
	peer_irk_count = 0U;
   3f7e6:	491b      	ldr	r1, [pc, #108]	; (3f854 <ll_rl_clear+0x88>)
		rl[i].taken = 0U;
   3f7e8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   3f7ec:	f893 c000 	ldrb.w	ip, [r3]
   3f7f0:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   3f7f4:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   3f7f8:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   3f7fc:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   3f800:	700c      	strb	r4, [r1, #0]
		rl[i].taken = 0U;
   3f802:	f364 0200 	bfi	r2, r4, #0, #1
   3f806:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   3f80a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   3f80e:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   3f812:	f364 0000 	bfi	r0, r4, #0, #1
   3f816:	f364 0c00 	bfi	ip, r4, #0, #1
   3f81a:	f364 0700 	bfi	r7, r4, #0, #1
   3f81e:	f364 0600 	bfi	r6, r4, #0, #1
   3f822:	f364 0500 	bfi	r5, r4, #0, #1
   3f826:	f364 0100 	bfi	r1, r4, #0, #1
   3f82a:	f364 0200 	bfi	r2, r4, #0, #1
   3f82e:	f883 00c8 	strb.w	r0, [r3, #200]	; 0xc8
   3f832:	f883 c000 	strb.w	ip, [r3]
   3f836:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   3f83a:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   3f83e:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   3f842:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   3f846:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	return 0;
   3f84a:	4620      	mov	r0, r4
}
   3f84c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3f84e:	bf00      	nop
   3f850:	200059b4 	.word	0x200059b4
   3f854:	20006d97 	.word	0x20006d97

0003f858 <ll_rl_enable>:
{
   3f858:	b538      	push	{r3, r4, r5, lr}
   3f85a:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3f85c:	2000      	movs	r0, #0
   3f85e:	f7f9 fc51 	bl	39104 <ull_adv_is_enabled>
		? 0 : 1;
   3f862:	b108      	cbz	r0, 3f868 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3f864:	200c      	movs	r0, #12
}
   3f866:	bd38      	pop	{r3, r4, r5, pc}
   3f868:	4604      	mov	r4, r0
   3f86a:	f7ff feff 	bl	3f66c <rl_access_check.part.1>
	if (!rl_access_check(false)) {
   3f86e:	2800      	cmp	r0, #0
   3f870:	d0f8      	beq.n	3f864 <ll_rl_enable+0xc>
	switch (enable) {
   3f872:	b13d      	cbz	r5, 3f884 <ll_rl_enable+0x2c>
   3f874:	2d01      	cmp	r5, #1
   3f876:	d001      	beq.n	3f87c <ll_rl_enable+0x24>
		return BT_HCI_ERR_INVALID_PARAM;
   3f878:	2012      	movs	r0, #18
}
   3f87a:	bd38      	pop	{r3, r4, r5, pc}
		rl_enable = 1U;
   3f87c:	4b03      	ldr	r3, [pc, #12]	; (3f88c <ll_rl_enable+0x34>)
   3f87e:	701d      	strb	r5, [r3, #0]
	return 0;
   3f880:	4620      	mov	r0, r4
}
   3f882:	bd38      	pop	{r3, r4, r5, pc}
		rl_enable = 0U;
   3f884:	4b01      	ldr	r3, [pc, #4]	; (3f88c <ll_rl_enable+0x34>)
   3f886:	701d      	strb	r5, [r3, #0]
	return 0;
   3f888:	4628      	mov	r0, r5
}
   3f88a:	bd38      	pop	{r3, r4, r5, pc}
   3f88c:	20006d98 	.word	0x20006d98

0003f890 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   3f890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3f894:	4a02      	ldr	r2, [pc, #8]	; (3f8a0 <ll_rl_timeout_set+0x10>)
   3f896:	fb03 f000 	mul.w	r0, r3, r0
   3f89a:	6010      	str	r0, [r2, #0]
}
   3f89c:	4770      	bx	lr
   3f89e:	bf00      	nop
   3f8a0:	20005b28 	.word	0x20005b28

0003f8a4 <ull_filter_reset>:
{
   3f8a4:	b4f0      	push	{r4, r5, r6, r7}
   3f8a6:	4930      	ldr	r1, [pc, #192]	; (3f968 <ull_filter_reset+0xc4>)
   3f8a8:	4c30      	ldr	r4, [pc, #192]	; (3f96c <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   3f8aa:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   3f8ac:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   3f8b0:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   3f8b2:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   3f8b4:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   3f8b8:	d805      	bhi.n	3f8c6 <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   3f8ba:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   3f8be:	f36f 1245 	bfc	r2, #5, #1
   3f8c2:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		fal[i].taken = 0U;
   3f8c6:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   3f8ca:	f36f 0200 	bfc	r2, #0, #1
   3f8ce:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   3f8d2:	3301      	adds	r3, #1
   3f8d4:	2b08      	cmp	r3, #8
   3f8d6:	d1e9      	bne.n	3f8ac <ull_filter_reset+0x8>
		rl[i].taken = 0U;
   3f8d8:	780f      	ldrb	r7, [r1, #0]
   3f8da:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   3f8de:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   3f8e2:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   3f8e6:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   3f8ea:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   3f8ec:	f363 0700 	bfi	r7, r3, #0, #1
   3f8f0:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   3f8f2:	4f1f      	ldr	r7, [pc, #124]	; (3f970 <ull_filter_reset+0xcc>)
		rl[i].taken = 0U;
   3f8f4:	f363 0500 	bfi	r5, r3, #0, #1
   3f8f8:	f363 0400 	bfi	r4, r3, #0, #1
   3f8fc:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   3f900:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   3f902:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   3f906:	4f1b      	ldr	r7, [pc, #108]	; (3f974 <ull_filter_reset+0xd0>)
		rl[i].taken = 0U;
   3f908:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   3f90c:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   3f910:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   3f914:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   3f918:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   3f91c:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   3f91e:	f363 0600 	bfi	r6, r3, #0, #1
   3f922:	f363 0500 	bfi	r5, r3, #0, #1
   3f926:	f363 0400 	bfi	r4, r3, #0, #1
   3f92a:	f363 0200 	bfi	r2, r3, #0, #1
   3f92e:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   3f932:	4b11      	ldr	r3, [pc, #68]	; (3f978 <ull_filter_reset+0xd4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   3f934:	4e11      	ldr	r6, [pc, #68]	; (3f97c <ull_filter_reset+0xd8>)
		rl[i].taken = 0U;
   3f936:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   3f93a:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   3f93e:	4f10      	ldr	r7, [pc, #64]	; (3f980 <ull_filter_reset+0xdc>)
		rl[i].taken = 0U;
   3f940:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_last_ms = -1;
   3f944:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   3f948:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   3f94c:	6037      	str	r7, [r6, #0]
	rpa_last_ms = -1;
   3f94e:	e9c3 4500 	strd	r4, r5, [r3]
	if (init) {
   3f952:	b120      	cbz	r0, 3f95e <ull_filter_reset+0xba>
		k_work_init_delayable(&rpa_work, rpa_timeout);
   3f954:	490b      	ldr	r1, [pc, #44]	; (3f984 <ull_filter_reset+0xe0>)
   3f956:	480c      	ldr	r0, [pc, #48]	; (3f988 <ull_filter_reset+0xe4>)
}
   3f958:	bcf0      	pop	{r4, r5, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   3f95a:	f011 bc2e 	b.w	511ba <k_work_init_delayable>
		k_work_cancel_delayable(&rpa_work);
   3f95e:	480a      	ldr	r0, [pc, #40]	; (3f988 <ull_filter_reset+0xe4>)
}
   3f960:	bcf0      	pop	{r4, r5, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   3f962:	f011 bc35 	b.w	511d0 <k_work_cancel_delayable>
   3f966:	bf00      	nop
   3f968:	200059b4 	.word	0x200059b4
   3f96c:	20005888 	.word	0x20005888
   3f970:	20006d98 	.word	0x20006d98
   3f974:	20006d97 	.word	0x20006d97
   3f978:	20003910 	.word	0x20003910
   3f97c:	20005b28 	.word	0x20005b28
   3f980:	000dbba0 	.word	0x000dbba0
   3f984:	0003fc51 	.word	0x0003fc51
   3f988:	20003918 	.word	0x20003918

0003f98c <ull_filter_lll_get>:
		return &fal_filter;
   3f98c:	4a03      	ldr	r2, [pc, #12]	; (3f99c <ull_filter_lll_get+0x10>)
   3f98e:	4b04      	ldr	r3, [pc, #16]	; (3f9a0 <ull_filter_lll_get+0x14>)
}
   3f990:	2800      	cmp	r0, #0
   3f992:	bf0c      	ite	eq
   3f994:	4610      	moveq	r0, r2
   3f996:	4618      	movne	r0, r3
   3f998:	4770      	bx	lr
   3f99a:	bf00      	nop
   3f99c:	20005af4 	.word	0x20005af4
   3f9a0:	200058c8 	.word	0x200058c8

0003f9a4 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   3f9a4:	b1a8      	cbz	r0, 3f9d2 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f9a6:	4b0c      	ldr	r3, [pc, #48]	; (3f9d8 <ull_filter_adv_scan_state_cb+0x34>)
   3f9a8:	681a      	ldr	r2, [r3, #0]
{
   3f9aa:	b510      	push	{r4, lr}
   3f9ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3f9b0:	f240 30e7 	movw	r0, #999	; 0x3e7
   3f9b4:	2100      	movs	r1, #0
   3f9b6:	fbe3 0102 	umlal	r0, r1, r3, r2
   3f9ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f9be:	2300      	movs	r3, #0
   3f9c0:	f7e6 fb9e 	bl	26100 <__aeabi_uldivmod>
}
   3f9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3f9c8:	4602      	mov	r2, r0
   3f9ca:	460b      	mov	r3, r1
   3f9cc:	4803      	ldr	r0, [pc, #12]	; (3f9dc <ull_filter_adv_scan_state_cb+0x38>)
   3f9ce:	f009 b949 	b.w	48c64 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   3f9d2:	4802      	ldr	r0, [pc, #8]	; (3f9dc <ull_filter_adv_scan_state_cb+0x38>)
   3f9d4:	f011 bbfc 	b.w	511d0 <k_work_cancel_delayable>
   3f9d8:	20005b28 	.word	0x20005b28
   3f9dc:	20003918 	.word	0x20003918

0003f9e0 <ull_filter_adv_update>:
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   3f9e0:	4a0d      	ldr	r2, [pc, #52]	; (3fa18 <ull_filter_adv_update+0x38>)
{
   3f9e2:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   3f9e4:	2300      	movs	r3, #0
   3f9e6:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   3f9e8:	b970      	cbnz	r0, 3fa08 <ull_filter_adv_update+0x28>
	if (rl_enable &&
   3f9ea:	4b0c      	ldr	r3, [pc, #48]	; (3fa1c <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   3f9ec:	4a0c      	ldr	r2, [pc, #48]	; (3fa20 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   3f9ee:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   3f9f0:	2000      	movs	r0, #0
   3f9f2:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   3f9f4:	b903      	cbnz	r3, 3f9f8 <ull_filter_adv_update+0x18>
}
   3f9f6:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   3f9f8:	f7f9 fdac 	bl	39554 <ull_scan_is_enabled>
	if (rl_enable &&
   3f9fc:	2800      	cmp	r0, #0
   3f9fe:	d1fa      	bne.n	3f9f6 <ull_filter_adv_update+0x16>
}
   3fa00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   3fa04:	f7ff bdfc 	b.w	3f600 <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   3fa08:	4618      	mov	r0, r3
   3fa0a:	f7f9 fdbb 	bl	39584 <ull_scan_filter_pol_get>
	if (adv_fp &&
   3fa0e:	07c3      	lsls	r3, r0, #31
   3fa10:	d4eb      	bmi.n	3f9ea <ull_filter_adv_update+0xa>
		fal_update();
   3fa12:	f7ff fda7 	bl	3f564 <fal_update>
   3fa16:	e7e8      	b.n	3f9ea <ull_filter_adv_update+0xa>
   3fa18:	200058c8 	.word	0x200058c8
   3fa1c:	20006d98 	.word	0x20006d98
   3fa20:	20005af4 	.word	0x20005af4

0003fa24 <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   3fa24:	4a0e      	ldr	r2, [pc, #56]	; (3fa60 <ull_filter_scan_update+0x3c>)
{
   3fa26:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   3fa28:	2300      	movs	r3, #0
   3fa2a:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   3fa2c:	07c2      	lsls	r2, r0, #31
   3fa2e:	d40e      	bmi.n	3fa4e <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   3fa30:	4b0c      	ldr	r3, [pc, #48]	; (3fa64 <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   3fa32:	4a0d      	ldr	r2, [pc, #52]	; (3fa68 <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   3fa34:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   3fa36:	2000      	movs	r0, #0
   3fa38:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   3fa3a:	b903      	cbnz	r3, 3fa3e <ull_filter_scan_update+0x1a>
}
   3fa3c:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   3fa3e:	f7f9 fb61 	bl	39104 <ull_adv_is_enabled>
	if (rl_enable &&
   3fa42:	2800      	cmp	r0, #0
   3fa44:	d1fa      	bne.n	3fa3c <ull_filter_scan_update+0x18>
}
   3fa46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   3fa4a:	f7ff bdd9 	b.w	3f600 <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   3fa4e:	4618      	mov	r0, r3
   3fa50:	f7f9 fb64 	bl	3911c <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   3fa54:	2800      	cmp	r0, #0
   3fa56:	d1eb      	bne.n	3fa30 <ull_filter_scan_update+0xc>
		fal_update();
   3fa58:	f7ff fd84 	bl	3f564 <fal_update>
   3fa5c:	e7e8      	b.n	3fa30 <ull_filter_scan_update+0xc>
   3fa5e:	bf00      	nop
   3fa60:	200058c8 	.word	0x200058c8
   3fa64:	20006d98 	.word	0x20006d98
   3fa68:	20005af4 	.word	0x20005af4

0003fa6c <ull_filter_rpa_update>:
{
   3fa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fa70:	4682      	mov	sl, r0
   3fa72:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   3fa74:	f011 fd45 	bl	51502 <z_impl_k_uptime_ticks>
   3fa78:	014b      	lsls	r3, r1, #5
   3fa7a:	ea4f 1840 	mov.w	r8, r0, lsl #5
   3fa7e:	ebb8 0800 	subs.w	r8, r8, r0
   3fa82:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   3fa86:	eb63 0301 	sbc.w	r3, r3, r1
   3fa8a:	009b      	lsls	r3, r3, #2
   3fa8c:	ea4f 0288 	mov.w	r2, r8, lsl #2
   3fa90:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   3fa94:	eb12 0800 	adds.w	r8, r2, r0
   3fa98:	eb43 0101 	adc.w	r1, r3, r1
   3fa9c:	00c9      	lsls	r1, r1, #3
   3fa9e:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   3faa2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   3faa6:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   3faaa:	0bc8      	lsrs	r0, r1, #15
   3faac:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   3fab0:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   3fab2:	f1ba 0f00 	cmp.w	sl, #0
   3fab6:	d117      	bne.n	3fae8 <ull_filter_rpa_update+0x7c>
   3fab8:	4b5d      	ldr	r3, [pc, #372]	; (3fc30 <ull_filter_rpa_update+0x1c4>)
   3faba:	e9d3 2300 	ldrd	r2, r3, [r3]
   3fabe:	1c59      	adds	r1, r3, #1
   3fac0:	bf08      	it	eq
   3fac2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   3fac6:	d00f      	beq.n	3fae8 <ull_filter_rpa_update+0x7c>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   3fac8:	495a      	ldr	r1, [pc, #360]	; (3fc34 <ull_filter_rpa_update+0x1c8>)
   3faca:	6809      	ldr	r1, [r1, #0]
   3facc:	ebb8 0402 	subs.w	r4, r8, r2
   3fad0:	eb60 0503 	sbc.w	r5, r0, r3
   3fad4:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   3fad6:	428c      	cmp	r4, r1
   3fad8:	eb75 0303 	sbcs.w	r3, r5, r3
   3fadc:	bfac      	ite	ge
   3fade:	f04f 0901 	movge.w	r9, #1
   3fae2:	f04f 0900 	movlt.w	r9, #0
   3fae6:	e001      	b.n	3faec <ull_filter_rpa_update+0x80>
   3fae8:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3faec:	4e52      	ldr	r6, [pc, #328]	; (3fc38 <ull_filter_rpa_update+0x1cc>)
   3faee:	f8df b15c 	ldr.w	fp, [pc, #348]	; 3fc4c <ull_filter_rpa_update+0x1e0>
   3faf2:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
	bool all = timeout || (rpa_last_ms == -1) ||
   3faf6:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   3faf8:	00a5      	lsls	r5, r4, #2
   3fafa:	192b      	adds	r3, r5, r4
   3fafc:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3fb00:	07da      	lsls	r2, r3, #31
   3fb02:	d515      	bpl.n	3fb30 <ull_filter_rpa_update+0xc4>
   3fb04:	f1b9 0f00 	cmp.w	r9, #0
   3fb08:	d101      	bne.n	3fb0e <ull_filter_rpa_update+0xa2>
   3fb0a:	0798      	lsls	r0, r3, #30
   3fb0c:	d410      	bmi.n	3fb30 <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   3fb0e:	192b      	adds	r3, r5, r4
   3fb10:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3fb14:	0759      	lsls	r1, r3, #29
   3fb16:	d433      	bmi.n	3fb80 <ull_filter_rpa_update+0x114>
			if (rl[i].lirk) {
   3fb18:	192b      	adds	r3, r5, r4
   3fb1a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   3fb1e:	071a      	lsls	r2, r3, #28
   3fb20:	d419      	bmi.n	3fb56 <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   3fb22:	4425      	add	r5, r4
   3fb24:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   3fb28:	f043 0302 	orr.w	r3, r3, #2
   3fb2c:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
   3fb30:	3401      	adds	r4, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fb32:	2c08      	cmp	r4, #8
   3fb34:	f106 0628 	add.w	r6, r6, #40	; 0x28
   3fb38:	d1de      	bne.n	3faf8 <ull_filter_rpa_update+0x8c>
	if (all) {
   3fb3a:	f1b9 0f00 	cmp.w	r9, #0
   3fb3e:	d004      	beq.n	3fb4a <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   3fb40:	4b3b      	ldr	r3, [pc, #236]	; (3fc30 <ull_filter_rpa_update+0x1c4>)
   3fb42:	9a01      	ldr	r2, [sp, #4]
   3fb44:	f8c3 8000 	str.w	r8, [r3]
   3fb48:	605a      	str	r2, [r3, #4]
	if (timeout) {
   3fb4a:	f1ba 0f00 	cmp.w	sl, #0
   3fb4e:	d13b      	bne.n	3fbc8 <ull_filter_rpa_update+0x15c>
}
   3fb50:	b007      	add	sp, #28
   3fb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   3fb56:	a902      	add	r1, sp, #8
   3fb58:	f1a6 001d 	sub.w	r0, r6, #29
   3fb5c:	f00c fc35 	bl	4c3ca <bt_rpa_create>
				LL_ASSERT(!err);
   3fb60:	2800      	cmp	r0, #0
   3fb62:	d157      	bne.n	3fc14 <ull_filter_rpa_update+0x1a8>
				rl[i].local_rpa = &rpa;
   3fb64:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   3fb68:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
	memcpy(dst, src, sizeof(*dst));
   3fb6c:	a902      	add	r1, sp, #8
   3fb6e:	4618      	mov	r0, r3
   3fb70:	2206      	movs	r2, #6
   3fb72:	6031      	str	r1, [r6, #0]
   3fb74:	9300      	str	r3, [sp, #0]
   3fb76:	f00c fbb9 	bl	4c2ec <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   3fb7a:	9b00      	ldr	r3, [sp, #0]
   3fb7c:	6033      	str	r3, [r6, #0]
   3fb7e:	e7d0      	b.n	3fb22 <ull_filter_rpa_update+0xb6>
	psrc += length - 1;
   3fb80:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
   3fb84:	4a2d      	ldr	r2, [pc, #180]	; (3fc3c <ull_filter_rpa_update+0x1d0>)
   3fb86:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   3fb8a:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   3fb8c:	f10d 0307 	add.w	r3, sp, #7
   3fb90:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   3fb94:	f812 1901 	ldrb.w	r1, [r2], #-1
   3fb98:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   3fb9c:	4283      	cmp	r3, r0
   3fb9e:	d1f9      	bne.n	3fb94 <ull_filter_rpa_update+0x128>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   3fba0:	1fb1      	subs	r1, r6, #6
   3fba2:	a802      	add	r0, sp, #8
   3fba4:	f00c fc11 	bl	4c3ca <bt_rpa_create>
				LL_ASSERT(!err);
   3fba8:	2800      	cmp	r0, #0
   3fbaa:	d0b5      	beq.n	3fb18 <ull_filter_rpa_update+0xac>
   3fbac:	f240 23eb 	movw	r3, #747	; 0x2eb
   3fbb0:	4a23      	ldr	r2, [pc, #140]	; (3fc40 <ull_filter_rpa_update+0x1d4>)
   3fbb2:	4924      	ldr	r1, [pc, #144]	; (3fc44 <ull_filter_rpa_update+0x1d8>)
   3fbb4:	4824      	ldr	r0, [pc, #144]	; (3fc48 <ull_filter_rpa_update+0x1dc>)
   3fbb6:	f00a fa91 	bl	4a0dc <printk>
   3fbba:	4040      	eors	r0, r0
   3fbbc:	f380 8811 	msr	BASEPRI, r0
   3fbc0:	f04f 0003 	mov.w	r0, #3
   3fbc4:	df02      	svc	2
   3fbc6:	e7a7      	b.n	3fb18 <ull_filter_rpa_update+0xac>
		adv = ull_adv_is_enabled_get(0);
   3fbc8:	2000      	movs	r0, #0
   3fbca:	f7f9 fa8d 	bl	390e8 <ull_adv_is_enabled_get>
		if (adv) {
   3fbce:	4604      	mov	r4, r0
   3fbd0:	2800      	cmp	r0, #0
   3fbd2:	d0bd      	beq.n	3fb50 <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   3fbd4:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   3fbd8:	075b      	lsls	r3, r3, #29
   3fbda:	d5b9      	bpl.n	3fb50 <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   3fbdc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   3fbe0:	2b07      	cmp	r3, #7
   3fbe2:	d8b5      	bhi.n	3fb50 <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   3fbe4:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   3fbe8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   3fbec:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   3fbee:	6add      	ldr	r5, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   3fbf0:	3028      	adds	r0, #40	; 0x28
   3fbf2:	f001 fbed 	bl	413d0 <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   3fbf6:	786a      	ldrb	r2, [r5, #1]
   3fbf8:	4606      	mov	r6, r0
   3fbfa:	4629      	mov	r1, r5
   3fbfc:	3202      	adds	r2, #2
   3fbfe:	f00c fb75 	bl	4c2ec <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   3fc02:	4631      	mov	r1, r6
   3fc04:	4620      	mov	r0, r4
   3fc06:	f7f9 fa99 	bl	3913c <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   3fc0a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   3fc0e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   3fc12:	e79d      	b.n	3fb50 <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   3fc14:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   3fc18:	4a09      	ldr	r2, [pc, #36]	; (3fc40 <ull_filter_rpa_update+0x1d4>)
   3fc1a:	490a      	ldr	r1, [pc, #40]	; (3fc44 <ull_filter_rpa_update+0x1d8>)
   3fc1c:	480a      	ldr	r0, [pc, #40]	; (3fc48 <ull_filter_rpa_update+0x1dc>)
   3fc1e:	f00a fa5d 	bl	4a0dc <printk>
   3fc22:	4040      	eors	r0, r0
   3fc24:	f380 8811 	msr	BASEPRI, r0
   3fc28:	f04f 0003 	mov.w	r0, #3
   3fc2c:	df02      	svc	2
   3fc2e:	e799      	b.n	3fb64 <ull_filter_rpa_update+0xf8>
   3fc30:	20003910 	.word	0x20003910
   3fc34:	20005b28 	.word	0x20005b28
   3fc38:	200059d8 	.word	0x200059d8
   3fc3c:	20005934 	.word	0x20005934
   3fc40:	00053548 	.word	0x00053548
   3fc44:	00052ff0 	.word	0x00052ff0
   3fc48:	00052d50 	.word	0x00052d50
   3fc4c:	200058fc 	.word	0x200058fc

0003fc50 <rpa_timeout>:
{
   3fc50:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   3fc52:	2001      	movs	r0, #1
   3fc54:	f7ff ff0a 	bl	3fa6c <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3fc58:	4b0a      	ldr	r3, [pc, #40]	; (3fc84 <rpa_timeout+0x34>)
   3fc5a:	681a      	ldr	r2, [r3, #0]
   3fc5c:	f240 30e7 	movw	r0, #999	; 0x3e7
   3fc60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   3fc64:	2100      	movs	r1, #0
   3fc66:	fbe3 0102 	umlal	r0, r1, r3, r2
   3fc6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3fc6e:	2300      	movs	r3, #0
   3fc70:	f7e6 fa46 	bl	26100 <__aeabi_uldivmod>
}
   3fc74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   3fc78:	4602      	mov	r2, r0
   3fc7a:	460b      	mov	r3, r1
   3fc7c:	4802      	ldr	r0, [pc, #8]	; (3fc88 <rpa_timeout+0x38>)
   3fc7e:	f008 bff1 	b.w	48c64 <k_work_schedule>
   3fc82:	bf00      	nop
   3fc84:	20005b28 	.word	0x20005b28
   3fc88:	20003918 	.word	0x20003918

0003fc8c <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   3fc8c:	2807      	cmp	r0, #7
   3fc8e:	d812      	bhi.n	3fcb6 <ull_filter_adva_get+0x2a>
{
   3fc90:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   3fc92:	0086      	lsls	r6, r0, #2
   3fc94:	1833      	adds	r3, r6, r0
   3fc96:	4d10      	ldr	r5, [pc, #64]	; (3fcd8 <ull_filter_adva_get+0x4c>)
   3fc98:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   3fc9c:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   3fca0:	b13b      	cbz	r3, 3fcb2 <ull_filter_adva_get+0x26>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   3fca2:	0793      	lsls	r3, r2, #30
   3fca4:	4604      	mov	r4, r0
   3fca6:	d508      	bpl.n	3fcba <ull_filter_adva_get+0x2e>
		return rl[rl_idx].local_rpa->val;
   3fca8:	1930      	adds	r0, r6, r4
   3fcaa:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   3fcae:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   3fcb0:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   3fcb2:	4618      	mov	r0, r3
}
   3fcb4:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   3fcb6:	2000      	movs	r0, #0
}
   3fcb8:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   3fcba:	f44f 7347 	mov.w	r3, #796	; 0x31c
   3fcbe:	4a07      	ldr	r2, [pc, #28]	; (3fcdc <ull_filter_adva_get+0x50>)
   3fcc0:	4907      	ldr	r1, [pc, #28]	; (3fce0 <ull_filter_adva_get+0x54>)
   3fcc2:	4808      	ldr	r0, [pc, #32]	; (3fce4 <ull_filter_adva_get+0x58>)
   3fcc4:	f00a fa0a 	bl	4a0dc <printk>
   3fcc8:	4040      	eors	r0, r0
   3fcca:	f380 8811 	msr	BASEPRI, r0
   3fcce:	f04f 0003 	mov.w	r0, #3
   3fcd2:	df02      	svc	2
   3fcd4:	e7e8      	b.n	3fca8 <ull_filter_adva_get+0x1c>
   3fcd6:	bf00      	nop
   3fcd8:	200059b4 	.word	0x200059b4
   3fcdc:	00053548 	.word	0x00053548
   3fce0:	000535ac 	.word	0x000535ac
   3fce4:	00052d50 	.word	0x00052d50

0003fce8 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   3fce8:	2807      	cmp	r0, #7
   3fcea:	d80c      	bhi.n	3fd06 <ull_filter_tgta_get+0x1e>
   3fcec:	4a07      	ldr	r2, [pc, #28]	; (3fd0c <ull_filter_tgta_get+0x24>)
   3fcee:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3fcf2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   3fcf6:	f3c3 0380 	ubfx	r3, r3, #2, #1
   3fcfa:	b123      	cbz	r3, 3fd06 <ull_filter_tgta_get+0x1e>
		return rl[rl_idx].peer_rpa.val;
   3fcfc:	2328      	movs	r3, #40	; 0x28
   3fcfe:	fb03 2000 	mla	r0, r3, r0, r2
   3fd02:	301e      	adds	r0, #30
   3fd04:	4770      	bx	lr
	return NULL;
   3fd06:	2000      	movs	r0, #0
   3fd08:	4770      	bx	lr
   3fd0a:	bf00      	nop
   3fd0c:	200059b4 	.word	0x200059b4

0003fd10 <ull_filter_rl_find>:
{
   3fd10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fd14:	468b      	mov	fp, r1
	if (free_idx) {
   3fd16:	4616      	mov	r6, r2
   3fd18:	b10a      	cbz	r2, 3fd1e <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   3fd1a:	23ff      	movs	r3, #255	; 0xff
   3fd1c:	7013      	strb	r3, [r2, #0]
   3fd1e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 3fd84 <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3fd22:	f000 0901 	and.w	r9, r0, #1
   3fd26:	f108 0a01 	add.w	sl, r8, #1
{
   3fd2a:	2400      	movs	r4, #0
   3fd2c:	e004      	b.n	3fd38 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3fd2e:	454a      	cmp	r2, r9
   3fd30:	d019      	beq.n	3fd66 <ull_filter_rl_find+0x56>
   3fd32:	3401      	adds	r4, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fd34:	2c08      	cmp	r4, #8
   3fd36:	d012      	beq.n	3fd5e <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3fd38:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   3fd3c:	00e8      	lsls	r0, r5, #3
   3fd3e:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   3fd42:	07d9      	lsls	r1, r3, #31
   3fd44:	f3c3 1280 	ubfx	r2, r3, #6, #1
   3fd48:	b2e7      	uxtb	r7, r4
   3fd4a:	d4f0      	bmi.n	3fd2e <ull_filter_rl_find+0x1e>
		} else if (free_idx && !rl[i].taken &&
   3fd4c:	2e00      	cmp	r6, #0
   3fd4e:	d0f0      	beq.n	3fd32 <ull_filter_rl_find+0x22>
   3fd50:	7833      	ldrb	r3, [r6, #0]
   3fd52:	3401      	adds	r4, #1
   3fd54:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   3fd56:	bf08      	it	eq
   3fd58:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   3fd5a:	2c08      	cmp	r4, #8
   3fd5c:	d1ec      	bne.n	3fd38 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   3fd5e:	27ff      	movs	r7, #255	; 0xff
}
   3fd60:	4638      	mov	r0, r7
   3fd62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   3fd66:	4450      	add	r0, sl
   3fd68:	2206      	movs	r2, #6
   3fd6a:	4659      	mov	r1, fp
   3fd6c:	f00c faae 	bl	4c2cc <memcmp>
   3fd70:	2800      	cmp	r0, #0
   3fd72:	d0f5      	beq.n	3fd60 <ull_filter_rl_find+0x50>
		} else if (free_idx && !rl[i].taken &&
   3fd74:	2e00      	cmp	r6, #0
   3fd76:	d0dc      	beq.n	3fd32 <ull_filter_rl_find+0x22>
   3fd78:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   3fd7c:	07db      	lsls	r3, r3, #31
   3fd7e:	d4d8      	bmi.n	3fd32 <ull_filter_rl_find+0x22>
   3fd80:	e7e6      	b.n	3fd50 <ull_filter_rl_find+0x40>
   3fd82:	bf00      	nop
   3fd84:	200059b4 	.word	0x200059b4

0003fd88 <ll_fal_add>:
{
   3fd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3fd8c:	4605      	mov	r5, r0
   3fd8e:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   3fd90:	2000      	movs	r0, #0
   3fd92:	f7f9 f9c3 	bl	3911c <ull_adv_filter_pol_get>
   3fd96:	2800      	cmp	r0, #0
   3fd98:	d13f      	bne.n	3fe1a <ll_fal_add+0x92>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   3fd9a:	f7f9 fbf3 	bl	39584 <ull_scan_filter_pol_get>
   3fd9e:	f010 0401 	ands.w	r4, r0, #1
   3fda2:	d13a      	bne.n	3fe1a <ll_fal_add+0x92>
	if (addr->type == ADDR_TYPE_ANON) {
   3fda4:	7828      	ldrb	r0, [r5, #0]
   3fda6:	28ff      	cmp	r0, #255	; 0xff
   3fda8:	d03b      	beq.n	3fe22 <ll_fal_add+0x9a>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   3fdaa:	f105 0801 	add.w	r8, r5, #1
   3fdae:	4641      	mov	r1, r8
   3fdb0:	f10d 0207 	add.w	r2, sp, #7
   3fdb4:	f7ff fb9e 	bl	3f4f4 <fal_find>
	if (i < ARRAY_SIZE(fal)) {
   3fdb8:	2807      	cmp	r0, #7
   3fdba:	d92a      	bls.n	3fe12 <ll_fal_add+0x8a>
	} else if (j >= ARRAY_SIZE(fal)) {
   3fdbc:	f89d 6007 	ldrb.w	r6, [sp, #7]
   3fdc0:	2e07      	cmp	r6, #7
   3fdc2:	d832      	bhi.n	3fe2a <ll_fal_add+0xa2>
	fal[i].id_addr_type = id_addr->type & 0x1;
   3fdc4:	4f1c      	ldr	r7, [pc, #112]	; (3fe38 <ll_fal_add+0xb0>)
   3fdc6:	782a      	ldrb	r2, [r5, #0]
   3fdc8:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   3fdcc:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
	fal[i].id_addr_type = id_addr->type & 0x1;
   3fdd0:	f362 0341 	bfi	r3, r2, #1, #1
   3fdd4:	4641      	mov	r1, r8
   3fdd6:	2206      	movs	r2, #6
   3fdd8:	3002      	adds	r0, #2
   3fdda:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
   3fdde:	f00c fa85 	bl	4c2ec <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3fde2:	4622      	mov	r2, r4
   3fde4:	4641      	mov	r1, r8
   3fde6:	7828      	ldrb	r0, [r5, #0]
   3fde8:	f7ff ff92 	bl	3fd10 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   3fdec:	2807      	cmp	r0, #7
   3fdee:	d81e      	bhi.n	3fe2e <ll_fal_add+0xa6>
		rl[j].fal = 1U;
   3fdf0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   3fdf4:	00db      	lsls	r3, r3, #3
   3fdf6:	4c11      	ldr	r4, [pc, #68]	; (3fe3c <ll_fal_add+0xb4>)
   3fdf8:	5ce1      	ldrb	r1, [r4, r3]
		fal[i].rl_idx = j;
   3fdfa:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].fal = 1U;
   3fdfe:	f041 0120 	orr.w	r1, r1, #32
   3fe02:	54e1      	strb	r1, [r4, r3]
		fal[i].rl_idx = j;
   3fe04:	7050      	strb	r0, [r2, #1]
	fal[i].taken = 1U;
   3fe06:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   3fe0a:	f043 0301 	orr.w	r3, r3, #1
   3fe0e:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
   3fe12:	2000      	movs	r0, #0
}
   3fe14:	b002      	add	sp, #8
   3fe16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   3fe1a:	200c      	movs	r0, #12
}
   3fe1c:	b002      	add	sp, #8
   3fe1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   3fe22:	4620      	mov	r0, r4
}
   3fe24:	b002      	add	sp, #8
   3fe26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (j >= ARRAY_SIZE(fal)) {
   3fe2a:	2007      	movs	r0, #7
	return fal_add(addr);
   3fe2c:	e7f6      	b.n	3fe1c <ll_fal_add+0x94>
		fal[i].rl_idx = FILTER_IDX_NONE;
   3fe2e:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   3fe32:	22ff      	movs	r2, #255	; 0xff
   3fe34:	705a      	strb	r2, [r3, #1]
   3fe36:	e7e6      	b.n	3fe06 <ll_fal_add+0x7e>
   3fe38:	20005888 	.word	0x20005888
   3fe3c:	200059b4 	.word	0x200059b4

0003fe40 <ll_rl_add>:
{
   3fe40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fe44:	4606      	mov	r6, r0
   3fe46:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3fe48:	2000      	movs	r0, #0
{
   3fe4a:	460d      	mov	r5, r1
   3fe4c:	4617      	mov	r7, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3fe4e:	f7f9 f959 	bl	39104 <ull_adv_is_enabled>
		? 0 : 1;
   3fe52:	b118      	cbz	r0, 3fe5c <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3fe54:	200c      	movs	r0, #12
}
   3fe56:	b005      	add	sp, #20
   3fe58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fe5c:	f7ff fc06 	bl	3f66c <rl_access_check.part.1>
	if (!rl_access_check(false)) {
   3fe60:	2800      	cmp	r0, #0
   3fe62:	d0f7      	beq.n	3fe54 <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   3fe64:	46b1      	mov	r9, r6
   3fe66:	f10d 020f 	add.w	r2, sp, #15
   3fe6a:	f819 0b01 	ldrb.w	r0, [r9], #1
   3fe6e:	4649      	mov	r1, r9
   3fe70:	f7ff ff4e 	bl	3fd10 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   3fe74:	2807      	cmp	r0, #7
   3fe76:	f240 8082 	bls.w	3ff7e <ll_rl_add+0x13e>
	} else if (j >= ARRAY_SIZE(rl)) {
   3fe7a:	f89d 800f 	ldrb.w	r8, [sp, #15]
   3fe7e:	f1b8 0f07 	cmp.w	r8, #7
   3fe82:	d875      	bhi.n	3ff70 <ll_rl_add+0x130>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   3fe84:	eb08 0b88 	add.w	fp, r8, r8, lsl #2
   3fe88:	4c45      	ldr	r4, [pc, #276]	; (3ffa0 <ll_rl_add+0x160>)
   3fe8a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   3fe8e:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   3fe90:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   3fe94:	2206      	movs	r2, #6
   3fe96:	4649      	mov	r1, r9
   3fe98:	4420      	add	r0, r4
   3fe9a:	9301      	str	r3, [sp, #4]
   3fe9c:	f00c fa26 	bl	4c2ec <memcpy>
   3fea0:	7831      	ldrb	r1, [r6, #0]
   3fea2:	f814 200b 	ldrb.w	r2, [r4, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3fea6:	4628      	mov	r0, r5
	rl[i].id_addr_type = id_addr->type & 0x1;
   3fea8:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3feac:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   3feae:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3feb2:	f7f4 f813 	bl	33edc <mem_nz>
   3feb6:	f814 200b 	ldrb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3feba:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3febc:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3fec0:	4638      	mov	r0, r7
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   3fec2:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   3fec6:	f7f4 f809 	bl	33edc <mem_nz>
   3feca:	f814 200b 	ldrb.w	r2, [r4, fp]
   3fece:	f000 0001 	and.w	r0, r0, #1
   3fed2:	f360 02c3 	bfi	r2, r0, #3, #1
   3fed6:	f804 200b 	strb.w	r2, [r4, fp]
	if (rl[i].pirk) {
   3feda:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   3fedc:	ea4f 0a88 	mov.w	sl, r8, lsl #2
   3fee0:	eb04 030b 	add.w	r3, r4, fp
	if (rl[i].pirk) {
   3fee4:	d518      	bpl.n	3ff18 <ll_rl_add+0xd8>
		rl[i].pirk_idx = peer_irk_count;
   3fee6:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 3ffac <ll_rl_add+0x16c>
		peer_irk_rl_ids[peer_irk_count] = i;
   3feea:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 3ffb0 <ll_rl_add+0x170>
		rl[i].pirk_idx = peer_irk_count;
   3feee:	f89c 1000 	ldrb.w	r1, [ip]
   3fef2:	4a2c      	ldr	r2, [pc, #176]	; (3ffa4 <ll_rl_add+0x164>)
   3fef4:	75d9      	strb	r1, [r3, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   3fef6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
		peer_irk_rl_ids[peer_irk_count] = i;
   3fefa:	f80e 8001 	strb.w	r8, [lr, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   3fefe:	3101      	adds	r1, #1
	psrc += length - 1;
   3ff00:	f105 030f 	add.w	r3, r5, #15
   3ff04:	f88c 1000 	strb.w	r1, [ip]
	for (; length > 0; length--) {
   3ff08:	3a01      	subs	r2, #1
   3ff0a:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   3ff0c:	f813 1901 	ldrb.w	r1, [r3], #-1
   3ff10:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (; length > 0; length--) {
   3ff14:	42ab      	cmp	r3, r5
   3ff16:	d1f9      	bne.n	3ff0c <ll_rl_add+0xcc>
	if (rl[i].lirk) {
   3ff18:	bb98      	cbnz	r0, 3ff82 <ll_rl_add+0x142>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   3ff1a:	9801      	ldr	r0, [sp, #4]
   3ff1c:	eb0a 0508 	add.w	r5, sl, r8
   3ff20:	00ed      	lsls	r5, r5, #3
   3ff22:	3018      	adds	r0, #24
   3ff24:	2206      	movs	r2, #6
   3ff26:	2100      	movs	r1, #0
   3ff28:	4420      	add	r0, r4
   3ff2a:	f00c f9ea 	bl	4c302 <memset>
	rl[i].rpas_ready = 0U;
   3ff2e:	5d63      	ldrb	r3, [r4, r5]
   3ff30:	f023 0312 	bic.w	r3, r3, #18
   3ff34:	5563      	strb	r3, [r4, r5]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   3ff36:	4649      	mov	r1, r9
   3ff38:	2200      	movs	r2, #0
   3ff3a:	7830      	ldrb	r0, [r6, #0]
   3ff3c:	f7ff fada 	bl	3f4f4 <fal_find>
	if (j < ARRAY_SIZE(fal)) {
   3ff40:	2807      	cmp	r0, #7
   3ff42:	d817      	bhi.n	3ff74 <ll_rl_add+0x134>
		rl[i].fal = 1U;
   3ff44:	5d63      	ldrb	r3, [r4, r5]
		fal[j].rl_idx = i;
   3ff46:	4a18      	ldr	r2, [pc, #96]	; (3ffa8 <ll_rl_add+0x168>)
		rl[i].fal = 1U;
   3ff48:	f043 0320 	orr.w	r3, r3, #32
		fal[j].rl_idx = i;
   3ff4c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].fal = 1U;
   3ff50:	5563      	strb	r3, [r4, r5]
		fal[j].rl_idx = i;
   3ff52:	f880 8001 	strb.w	r8, [r0, #1]
	rl[i].taken = 1U;
   3ff56:	44d0      	add	r8, sl
   3ff58:	ea4f 08c8 	mov.w	r8, r8, lsl #3
	return 0;
   3ff5c:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   3ff5e:	f814 3008 	ldrb.w	r3, [r4, r8]
   3ff62:	f043 0301 	orr.w	r3, r3, #1
   3ff66:	f804 3008 	strb.w	r3, [r4, r8]
}
   3ff6a:	b005      	add	sp, #20
   3ff6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   3ff70:	2007      	movs	r0, #7
   3ff72:	e770      	b.n	3fe56 <ll_rl_add+0x16>
		rl[i].fal = 0U;
   3ff74:	5d63      	ldrb	r3, [r4, r5]
   3ff76:	f36f 1345 	bfc	r3, #5, #1
   3ff7a:	5563      	strb	r3, [r4, r5]
   3ff7c:	e7eb      	b.n	3ff56 <ll_rl_add+0x116>
		return BT_HCI_ERR_INVALID_PARAM;
   3ff7e:	2012      	movs	r0, #18
   3ff80:	e769      	b.n	3fe56 <ll_rl_add+0x16>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   3ff82:	9b01      	ldr	r3, [sp, #4]
   3ff84:	1dd8      	adds	r0, r3, #7
   3ff86:	2210      	movs	r2, #16
   3ff88:	4639      	mov	r1, r7
   3ff8a:	4420      	add	r0, r4
   3ff8c:	f00c f9ae 	bl	4c2ec <memcpy>
		rl[i].local_rpa = NULL;
   3ff90:	eb0a 0308 	add.w	r3, sl, r8
   3ff94:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   3ff98:	2200      	movs	r2, #0
   3ff9a:	625a      	str	r2, [r3, #36]	; 0x24
   3ff9c:	e7bd      	b.n	3ff1a <ll_rl_add+0xda>
   3ff9e:	bf00      	nop
   3ffa0:	200059b4 	.word	0x200059b4
   3ffa4:	20005934 	.word	0x20005934
   3ffa8:	20005888 	.word	0x20005888
   3ffac:	20006d97 	.word	0x20006d97
   3ffb0:	2000592c 	.word	0x2000592c

0003ffb4 <ll_rl_remove>:
{
   3ffb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ffb8:	4605      	mov	r5, r0
   3ffba:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   3ffbc:	2000      	movs	r0, #0
   3ffbe:	f7f9 f8a1 	bl	39104 <ull_adv_is_enabled>
		? 0 : 1;
   3ffc2:	b118      	cbz	r0, 3ffcc <ll_rl_remove+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   3ffc4:	200c      	movs	r0, #12
}
   3ffc6:	b003      	add	sp, #12
   3ffc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ffcc:	4604      	mov	r4, r0
   3ffce:	f7ff fb4d 	bl	3f66c <rl_access_check.part.1>
	if (!rl_access_check(false)) {
   3ffd2:	2800      	cmp	r0, #0
   3ffd4:	d0f6      	beq.n	3ffc4 <ll_rl_remove+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3ffd6:	462e      	mov	r6, r5
   3ffd8:	4622      	mov	r2, r4
   3ffda:	f816 0b01 	ldrb.w	r0, [r6], #1
   3ffde:	4631      	mov	r1, r6
   3ffe0:	f7ff fe96 	bl	3fd10 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   3ffe4:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   3ffe6:	4680      	mov	r8, r0
	if (i < ARRAY_SIZE(rl)) {
   3ffe8:	d903      	bls.n	3fff2 <ll_rl_remove+0x3e>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   3ffea:	2002      	movs	r0, #2
}
   3ffec:	b003      	add	sp, #12
   3ffee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   3fff2:	0087      	lsls	r7, r0, #2
   3fff4:	183b      	adds	r3, r7, r0
   3fff6:	00db      	lsls	r3, r3, #3
   3fff8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 400b8 <ll_rl_remove+0x104>
   3fffc:	f819 2003 	ldrb.w	r2, [r9, r3]
   40000:	0752      	lsls	r2, r2, #29
   40002:	444b      	add	r3, r9
   40004:	d530      	bpl.n	40068 <ll_rl_remove+0xb4>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   40006:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 400bc <ll_rl_remove+0x108>
   4000a:	f89b a000 	ldrb.w	sl, [fp]
   4000e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   40012:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
   40016:	d025      	beq.n	40064 <ll_rl_remove+0xb0>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   40018:	7ddb      	ldrb	r3, [r3, #23]
			if (pj && pi != pj) {
   4001a:	4553      	cmp	r3, sl
   4001c:	d022      	beq.n	40064 <ll_rl_remove+0xb0>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   4001e:	4823      	ldr	r0, [pc, #140]	; (400ac <ll_rl_remove+0xf8>)
   40020:	9301      	str	r3, [sp, #4]
   40022:	eb00 110a 	add.w	r1, r0, sl, lsl #4
   40026:	2210      	movs	r2, #16
   40028:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   4002c:	f00c f95e 	bl	4c2ec <memcpy>
   40030:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   40032:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   40036:	eb09 01c2 	add.w	r1, r9, r2, lsl #3
   4003a:	f819 2032 	ldrb.w	r2, [r9, r2, lsl #3]
   4003e:	f012 0f01 	tst.w	r2, #1
   40042:	b2e0      	uxtb	r0, r4
   40044:	f104 0401 	add.w	r4, r4, #1
   40048:	d004      	beq.n	40054 <ll_rl_remove+0xa0>
   4004a:	0752      	lsls	r2, r2, #29
   4004c:	d502      	bpl.n	40054 <ll_rl_remove+0xa0>
   4004e:	7dca      	ldrb	r2, [r1, #23]
   40050:	4552      	cmp	r2, sl
   40052:	d021      	beq.n	40098 <ll_rl_remove+0xe4>
				for (k = 0U;
   40054:	2c08      	cmp	r4, #8
   40056:	d1ec      	bne.n	40032 <ll_rl_remove+0x7e>
   40058:	f89b a000 	ldrb.w	sl, [fp]
   4005c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   40060:	fa5f fa8a 	uxtb.w	sl, sl
			peer_irk_count--;
   40064:	f88b a000 	strb.w	sl, [fp]
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   40068:	4631      	mov	r1, r6
   4006a:	7828      	ldrb	r0, [r5, #0]
   4006c:	2200      	movs	r2, #0
   4006e:	f7ff fa41 	bl	3f4f4 <fal_find>
		if (j < ARRAY_SIZE(fal)) {
   40072:	2807      	cmp	r0, #7
   40074:	d804      	bhi.n	40080 <ll_rl_remove+0xcc>
			fal[j].rl_idx = FILTER_IDX_NONE;
   40076:	4b0e      	ldr	r3, [pc, #56]	; (400b0 <ll_rl_remove+0xfc>)
   40078:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   4007c:	23ff      	movs	r3, #255	; 0xff
   4007e:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   40080:	4447      	add	r7, r8
   40082:	00ff      	lsls	r7, r7, #3
		return 0;
   40084:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   40086:	f819 3007 	ldrb.w	r3, [r9, r7]
   4008a:	f36f 0300 	bfc	r3, #0, #1
   4008e:	f809 3007 	strb.w	r3, [r9, r7]
}
   40092:	b003      	add	sp, #12
   40094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						rl[k].pirk_idx = pi;
   40098:	f89b a000 	ldrb.w	sl, [fp]
						peer_irk_rl_ids[pi] = k;
   4009c:	4a05      	ldr	r2, [pc, #20]	; (400b4 <ll_rl_remove+0x100>)
						rl[k].pirk_idx = pi;
   4009e:	75cb      	strb	r3, [r1, #23]
						peer_irk_rl_ids[pi] = k;
   400a0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   400a4:	fa5f fa8a 	uxtb.w	sl, sl
   400a8:	54d0      	strb	r0, [r2, r3]
						break;
   400aa:	e7db      	b.n	40064 <ll_rl_remove+0xb0>
   400ac:	20005934 	.word	0x20005934
   400b0:	20005888 	.word	0x20005888
   400b4:	2000592c 	.word	0x2000592c
   400b8:	200059b4 	.word	0x200059b4
   400bc:	20006d97 	.word	0x20006d97

000400c0 <ll_rl_crpa_set>:
{
   400c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   400c4:	795c      	ldrb	r4, [r3, #5]
   400c6:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   400ca:	2c40      	cmp	r4, #64	; 0x40
{
   400cc:	b082      	sub	sp, #8
	if ((crpa[5] & 0xc0) == 0x40) {
   400ce:	d002      	beq.n	400d6 <ll_rl_crpa_set+0x16>
}
   400d0:	b002      	add	sp, #8
   400d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (id_addr) {
   400d6:	b129      	cbz	r1, 400e4 <ll_rl_crpa_set+0x24>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr,
   400d8:	2200      	movs	r2, #0
   400da:	9301      	str	r3, [sp, #4]
   400dc:	f7ff fe18 	bl	3fd10 <ull_filter_rl_find>
   400e0:	9b01      	ldr	r3, [sp, #4]
   400e2:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   400e4:	2a07      	cmp	r2, #7
   400e6:	d8f3      	bhi.n	400d0 <ll_rl_crpa_set+0x10>
   400e8:	4e17      	ldr	r6, [pc, #92]	; (40148 <ll_rl_crpa_set+0x88>)
   400ea:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   400ee:	f816 1031 	ldrb.w	r1, [r6, r1, lsl #3]
   400f2:	07c9      	lsls	r1, r1, #31
   400f4:	d5ec      	bpl.n	400d0 <ll_rl_crpa_set+0x10>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   400f6:	b212      	sxth	r2, r2
   400f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   400fc:	00d4      	lsls	r4, r2, #3
   400fe:	f104 0718 	add.w	r7, r4, #24
   40102:	4437      	add	r7, r6
   40104:	4619      	mov	r1, r3
   40106:	4638      	mov	r0, r7
   40108:	2206      	movs	r2, #6
   4010a:	f00c f8ef 	bl	4c2ec <memcpy>
   4010e:	2500      	movs	r5, #0
   40110:	e001      	b.n	40116 <ll_rl_crpa_set+0x56>
	defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)
static void conn_rpa_update(uint8_t rl_idx)
{
	uint16_t handle;

	for (handle = 0U; handle < CONFIG_BT_MAX_CONN; handle++) {
   40112:	2d06      	cmp	r5, #6
   40114:	d0dc      	beq.n	400d0 <ll_rl_crpa_set+0x10>
		struct ll_conn *conn = ll_connected_get(handle);
   40116:	b2a8      	uxth	r0, r5
   40118:	f7f9 fe96 	bl	39e48 <ll_connected_get>

		/* The RPA of the connection matches the RPA that was just
		 * resolved
		 */
		if (conn && !memcmp(conn->peer_id_addr, rl[rl_idx].curr_rpa.val,
   4011c:	3501      	adds	r5, #1
   4011e:	f100 08dd 	add.w	r8, r0, #221	; 0xdd
   40122:	2206      	movs	r2, #6
   40124:	4639      	mov	r1, r7
   40126:	2800      	cmp	r0, #0
   40128:	d0f3      	beq.n	40112 <ll_rl_crpa_set+0x52>
   4012a:	4640      	mov	r0, r8
   4012c:	f00c f8ce 	bl	4c2cc <memcmp>
   40130:	2800      	cmp	r0, #0
   40132:	d1ee      	bne.n	40112 <ll_rl_crpa_set+0x52>
				    BDADDR_SIZE)) {
			(void)memcpy(conn->peer_id_addr, rl[rl_idx].id_addr.val,
   40134:	1c61      	adds	r1, r4, #1
   40136:	4431      	add	r1, r6
   40138:	4640      	mov	r0, r8
   4013a:	2206      	movs	r2, #6
}
   4013c:	b002      	add	sp, #8
   4013e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			(void)memcpy(conn->peer_id_addr, rl[rl_idx].id_addr.val,
   40142:	f00c b8d3 	b.w	4c2ec <memcpy>
   40146:	bf00      	nop
   40148:	200059b4 	.word	0x200059b4

0004014c <ll_rl_crpa_get>:
{
   4014c:	b538      	push	{r3, r4, r5, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   4014e:	4603      	mov	r3, r0
{
   40150:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   40152:	f813 0b01 	ldrb.w	r0, [r3], #1
   40156:	2200      	movs	r2, #0
   40158:	4619      	mov	r1, r3
   4015a:	f7ff fdd9 	bl	3fd10 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   4015e:	2807      	cmp	r0, #7
   40160:	d901      	bls.n	40166 <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   40162:	2002      	movs	r0, #2
}
   40164:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   40166:	2328      	movs	r3, #40	; 0x28
   40168:	2218      	movs	r2, #24
   4016a:	4c08      	ldr	r4, [pc, #32]	; (4018c <ll_rl_crpa_get+0x40>)
   4016c:	fb13 2000 	smlabb	r0, r3, r0, r2
   40170:	4404      	add	r4, r0
   40172:	4620      	mov	r0, r4
   40174:	2106      	movs	r1, #6
   40176:	f7f3 feb1 	bl	33edc <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   4017a:	2800      	cmp	r0, #0
   4017c:	d0f1      	beq.n	40162 <ll_rl_crpa_get+0x16>
   4017e:	4621      	mov	r1, r4
   40180:	4628      	mov	r0, r5
   40182:	2206      	movs	r2, #6
   40184:	f00c f8b2 	bl	4c2ec <memcpy>
		return 0;
   40188:	2000      	movs	r0, #0
}
   4018a:	bd38      	pop	{r3, r4, r5, pc}
   4018c:	200059b4 	.word	0x200059b4

00040190 <ll_rl_lrpa_get>:
{
   40190:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   40192:	4603      	mov	r3, r0
{
   40194:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   40196:	f813 0b01 	ldrb.w	r0, [r3], #1
   4019a:	2200      	movs	r2, #0
   4019c:	4619      	mov	r1, r3
   4019e:	f7ff fdb7 	bl	3fd10 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   401a2:	2807      	cmp	r0, #7
   401a4:	d901      	bls.n	401aa <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   401a6:	2002      	movs	r0, #2
}
   401a8:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   401aa:	4b06      	ldr	r3, [pc, #24]	; (401c4 <ll_rl_lrpa_get+0x34>)
   401ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   401b0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   401b4:	2206      	movs	r2, #6
   401b6:	4620      	mov	r0, r4
   401b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
   401ba:	f00c f897 	bl	4c2ec <memcpy>
		return 0;
   401be:	2000      	movs	r0, #0
}
   401c0:	bd10      	pop	{r4, pc}
   401c2:	bf00      	nop
   401c4:	200059b4 	.word	0x200059b4

000401c8 <ll_priv_mode_set>:
{
   401c8:	b570      	push	{r4, r5, r6, lr}
   401ca:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   401cc:	2000      	movs	r0, #0
{
   401ce:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   401d0:	f7f8 ff98 	bl	39104 <ull_adv_is_enabled>
		? 0 : 1;
   401d4:	b108      	cbz	r0, 401da <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   401d6:	200c      	movs	r0, #12
}
   401d8:	bd70      	pop	{r4, r5, r6, pc}
   401da:	4604      	mov	r4, r0
   401dc:	f7ff fa46 	bl	3f66c <rl_access_check.part.1>
	if (!rl_access_check(false)) {
   401e0:	2800      	cmp	r0, #0
   401e2:	d0f8      	beq.n	401d6 <ll_priv_mode_set+0xe>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   401e4:	4629      	mov	r1, r5
   401e6:	4622      	mov	r2, r4
   401e8:	f811 0b01 	ldrb.w	r0, [r1], #1
   401ec:	f7ff fd90 	bl	3fd10 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   401f0:	2807      	cmp	r0, #7
   401f2:	d818      	bhi.n	40226 <ll_priv_mode_set+0x5e>
		switch (mode) {
   401f4:	b16e      	cbz	r6, 40212 <ll_priv_mode_set+0x4a>
   401f6:	2e01      	cmp	r6, #1
   401f8:	d109      	bne.n	4020e <ll_priv_mode_set+0x46>
			rl[i].dev = 1U;
   401fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   401fe:	00c3      	lsls	r3, r0, #3
   40200:	490a      	ldr	r1, [pc, #40]	; (4022c <ll_priv_mode_set+0x64>)
   40202:	5cca      	ldrb	r2, [r1, r3]
   40204:	f042 0210 	orr.w	r2, r2, #16
	return 0;
   40208:	4620      	mov	r0, r4
			rl[i].dev = 1U;
   4020a:	54ca      	strb	r2, [r1, r3]
}
   4020c:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_INVALID_PARAM;
   4020e:	2012      	movs	r0, #18
}
   40210:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   40212:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   40216:	00c0      	lsls	r0, r0, #3
   40218:	4b04      	ldr	r3, [pc, #16]	; (4022c <ll_priv_mode_set+0x64>)
   4021a:	5c1a      	ldrb	r2, [r3, r0]
   4021c:	f366 1204 	bfi	r2, r6, #4, #1
   40220:	541a      	strb	r2, [r3, r0]
	return 0;
   40222:	4630      	mov	r0, r6
}
   40224:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   40226:	2002      	movs	r0, #2
}
   40228:	bd70      	pop	{r4, r5, r6, pc}
   4022a:	bf00      	nop
   4022c:	200059b4 	.word	0x200059b4

00040230 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   40230:	2807      	cmp	r0, #7
   40232:	d807      	bhi.n	40244 <ull_filter_lll_lrpa_used+0x14>
   40234:	4b04      	ldr	r3, [pc, #16]	; (40248 <ull_filter_lll_lrpa_used+0x18>)
   40236:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   4023a:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   4023e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   40242:	4770      	bx	lr
   40244:	2000      	movs	r0, #0
}
   40246:	4770      	bx	lr
   40248:	200059b4 	.word	0x200059b4

0004024c <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   4024c:	2807      	cmp	r0, #7
   4024e:	d80d      	bhi.n	4026c <ull_filter_lll_lrpa_get+0x20>
   40250:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   40254:	00c3      	lsls	r3, r0, #3
   40256:	4a06      	ldr	r2, [pc, #24]	; (40270 <ull_filter_lll_lrpa_get+0x24>)
   40258:	5cd1      	ldrb	r1, [r2, r3]
   4025a:	f3c1 00c0 	ubfx	r0, r1, #3, #1
   4025e:	b130      	cbz	r0, 4026e <ull_filter_lll_lrpa_get+0x22>
   40260:	f3c1 0040 	ubfx	r0, r1, #1, #1
   40264:	b118      	cbz	r0, 4026e <ull_filter_lll_lrpa_get+0x22>
	return rl[rl_idx].local_rpa;
   40266:	4413      	add	r3, r2
   40268:	6a58      	ldr	r0, [r3, #36]	; 0x24
   4026a:	4770      	bx	lr
		return NULL;
   4026c:	2000      	movs	r0, #0
}
   4026e:	4770      	bx	lr
   40270:	200059b4 	.word	0x200059b4

00040274 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   40274:	4b02      	ldr	r3, [pc, #8]	; (40280 <ull_filter_lll_irks_get+0xc>)
   40276:	781b      	ldrb	r3, [r3, #0]
   40278:	7003      	strb	r3, [r0, #0]
}
   4027a:	4802      	ldr	r0, [pc, #8]	; (40284 <ull_filter_lll_irks_get+0x10>)
   4027c:	4770      	bx	lr
   4027e:	bf00      	nop
   40280:	20006d97 	.word	0x20006d97
   40284:	20005934 	.word	0x20005934

00040288 <ull_filter_lll_rl_idx>:
{
   40288:	b538      	push	{r3, r4, r5, lr}
   4028a:	460c      	mov	r4, r1
	if (filter) {
   4028c:	b150      	cbz	r0, 402a4 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   4028e:	2907      	cmp	r1, #7
   40290:	d813      	bhi.n	402ba <ull_filter_lll_rl_idx+0x32>
		LL_ASSERT(fal[devmatch_id].taken);
   40292:	4d28      	ldr	r5, [pc, #160]	; (40334 <ull_filter_lll_rl_idx+0xac>)
   40294:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   40298:	07da      	lsls	r2, r3, #31
   4029a:	d520      	bpl.n	402de <ull_filter_lll_rl_idx+0x56>
		i = fal[devmatch_id].rl_idx;
   4029c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   402a0:	7860      	ldrb	r0, [r4, #1]
}
   402a2:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   402a4:	2907      	cmp	r1, #7
   402a6:	d837      	bhi.n	40318 <ull_filter_lll_rl_idx+0x90>
		LL_ASSERT(rl[i].taken);
   402a8:	4b23      	ldr	r3, [pc, #140]	; (40338 <ull_filter_lll_rl_idx+0xb0>)
   402aa:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   402ae:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   402b2:	07db      	lsls	r3, r3, #31
   402b4:	d521      	bpl.n	402fa <ull_filter_lll_rl_idx+0x72>
   402b6:	4620      	mov	r0, r4
}
   402b8:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   402ba:	f240 335d 	movw	r3, #861	; 0x35d
   402be:	4a1f      	ldr	r2, [pc, #124]	; (4033c <ull_filter_lll_rl_idx+0xb4>)
   402c0:	491f      	ldr	r1, [pc, #124]	; (40340 <ull_filter_lll_rl_idx+0xb8>)
   402c2:	4820      	ldr	r0, [pc, #128]	; (40344 <ull_filter_lll_rl_idx+0xbc>)
   402c4:	f009 ff0a 	bl	4a0dc <printk>
   402c8:	4040      	eors	r0, r0
   402ca:	f380 8811 	msr	BASEPRI, r0
   402ce:	f04f 0003 	mov.w	r0, #3
   402d2:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   402d4:	4d17      	ldr	r5, [pc, #92]	; (40334 <ull_filter_lll_rl_idx+0xac>)
   402d6:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   402da:	07da      	lsls	r2, r3, #31
   402dc:	d4de      	bmi.n	4029c <ull_filter_lll_rl_idx+0x14>
   402de:	f240 335e 	movw	r3, #862	; 0x35e
   402e2:	4a16      	ldr	r2, [pc, #88]	; (4033c <ull_filter_lll_rl_idx+0xb4>)
   402e4:	4918      	ldr	r1, [pc, #96]	; (40348 <ull_filter_lll_rl_idx+0xc0>)
   402e6:	4817      	ldr	r0, [pc, #92]	; (40344 <ull_filter_lll_rl_idx+0xbc>)
   402e8:	f009 fef8 	bl	4a0dc <printk>
   402ec:	4040      	eors	r0, r0
   402ee:	f380 8811 	msr	BASEPRI, r0
   402f2:	f04f 0003 	mov.w	r0, #3
   402f6:	df02      	svc	2
   402f8:	e7d0      	b.n	4029c <ull_filter_lll_rl_idx+0x14>
		LL_ASSERT(rl[i].taken);
   402fa:	f240 3363 	movw	r3, #867	; 0x363
   402fe:	4a0f      	ldr	r2, [pc, #60]	; (4033c <ull_filter_lll_rl_idx+0xb4>)
   40300:	4912      	ldr	r1, [pc, #72]	; (4034c <ull_filter_lll_rl_idx+0xc4>)
   40302:	4810      	ldr	r0, [pc, #64]	; (40344 <ull_filter_lll_rl_idx+0xbc>)
   40304:	f009 feea 	bl	4a0dc <printk>
   40308:	4040      	eors	r0, r0
   4030a:	f380 8811 	msr	BASEPRI, r0
   4030e:	f04f 0003 	mov.w	r0, #3
   40312:	df02      	svc	2
   40314:	4620      	mov	r0, r4
}
   40316:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   40318:	f240 3361 	movw	r3, #865	; 0x361
   4031c:	4a07      	ldr	r2, [pc, #28]	; (4033c <ull_filter_lll_rl_idx+0xb4>)
   4031e:	490c      	ldr	r1, [pc, #48]	; (40350 <ull_filter_lll_rl_idx+0xc8>)
   40320:	4808      	ldr	r0, [pc, #32]	; (40344 <ull_filter_lll_rl_idx+0xbc>)
   40322:	f009 fedb 	bl	4a0dc <printk>
   40326:	4040      	eors	r0, r0
   40328:	f380 8811 	msr	BASEPRI, r0
   4032c:	f04f 0003 	mov.w	r0, #3
   40330:	df02      	svc	2
   40332:	e7b9      	b.n	402a8 <ull_filter_lll_rl_idx+0x20>
   40334:	20005888 	.word	0x20005888
   40338:	200059b4 	.word	0x200059b4
   4033c:	00053548 	.word	0x00053548
   40340:	000535c4 	.word	0x000535c4
   40344:	00052d50 	.word	0x00052d50
   40348:	0005366c 	.word	0x0005366c
   4034c:	00053728 	.word	0x00053728
   40350:	00053684 	.word	0x00053684

00040354 <ull_filter_lll_rl_irk_idx>:
{
   40354:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   40356:	4b20      	ldr	r3, [pc, #128]	; (403d8 <ull_filter_lll_rl_irk_idx+0x84>)
   40358:	781b      	ldrb	r3, [r3, #0]
   4035a:	4283      	cmp	r3, r0
{
   4035c:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   4035e:	d90c      	bls.n	4037a <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   40360:	4b1e      	ldr	r3, [pc, #120]	; (403dc <ull_filter_lll_rl_irk_idx+0x88>)
   40362:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   40364:	2c07      	cmp	r4, #7
   40366:	d819      	bhi.n	4039c <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   40368:	4b1d      	ldr	r3, [pc, #116]	; (403e0 <ull_filter_lll_rl_irk_idx+0x8c>)
   4036a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   4036e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   40372:	07db      	lsls	r3, r3, #31
   40374:	d520      	bpl.n	403b8 <ull_filter_lll_rl_irk_idx+0x64>
}
   40376:	4620      	mov	r0, r4
   40378:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   4037a:	f240 336d 	movw	r3, #877	; 0x36d
   4037e:	4a19      	ldr	r2, [pc, #100]	; (403e4 <ull_filter_lll_rl_irk_idx+0x90>)
   40380:	4919      	ldr	r1, [pc, #100]	; (403e8 <ull_filter_lll_rl_irk_idx+0x94>)
   40382:	481a      	ldr	r0, [pc, #104]	; (403ec <ull_filter_lll_rl_irk_idx+0x98>)
   40384:	f009 feaa 	bl	4a0dc <printk>
   40388:	4040      	eors	r0, r0
   4038a:	f380 8811 	msr	BASEPRI, r0
   4038e:	f04f 0003 	mov.w	r0, #3
   40392:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   40394:	4b11      	ldr	r3, [pc, #68]	; (403dc <ull_filter_lll_rl_irk_idx+0x88>)
   40396:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   40398:	2c07      	cmp	r4, #7
   4039a:	d9e5      	bls.n	40368 <ull_filter_lll_rl_irk_idx+0x14>
   4039c:	f240 336f 	movw	r3, #879	; 0x36f
   403a0:	4a10      	ldr	r2, [pc, #64]	; (403e4 <ull_filter_lll_rl_irk_idx+0x90>)
   403a2:	4913      	ldr	r1, [pc, #76]	; (403f0 <ull_filter_lll_rl_irk_idx+0x9c>)
   403a4:	4811      	ldr	r0, [pc, #68]	; (403ec <ull_filter_lll_rl_irk_idx+0x98>)
   403a6:	f009 fe99 	bl	4a0dc <printk>
   403aa:	4040      	eors	r0, r0
   403ac:	f380 8811 	msr	BASEPRI, r0
   403b0:	f04f 0003 	mov.w	r0, #3
   403b4:	df02      	svc	2
   403b6:	e7d7      	b.n	40368 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   403b8:	f44f 735c 	mov.w	r3, #880	; 0x370
   403bc:	4a09      	ldr	r2, [pc, #36]	; (403e4 <ull_filter_lll_rl_irk_idx+0x90>)
   403be:	490d      	ldr	r1, [pc, #52]	; (403f4 <ull_filter_lll_rl_irk_idx+0xa0>)
   403c0:	480a      	ldr	r0, [pc, #40]	; (403ec <ull_filter_lll_rl_irk_idx+0x98>)
   403c2:	f009 fe8b 	bl	4a0dc <printk>
   403c6:	4040      	eors	r0, r0
   403c8:	f380 8811 	msr	BASEPRI, r0
   403cc:	f04f 0003 	mov.w	r0, #3
   403d0:	df02      	svc	2
}
   403d2:	4620      	mov	r0, r4
   403d4:	bd10      	pop	{r4, pc}
   403d6:	bf00      	nop
   403d8:	20006d97 	.word	0x20006d97
   403dc:	2000592c 	.word	0x2000592c
   403e0:	200059b4 	.word	0x200059b4
   403e4:	00053548 	.word	0x00053548
   403e8:	00053734 	.word	0x00053734
   403ec:	00052d50 	.word	0x00052d50
   403f0:	00053754 	.word	0x00053754
   403f4:	00053728 	.word	0x00053728

000403f8 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   403f8:	2807      	cmp	r0, #7
   403fa:	d821      	bhi.n	40440 <ull_filter_lll_irk_in_fal+0x48>
{
   403fc:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   403fe:	0085      	lsls	r5, r0, #2
   40400:	182b      	adds	r3, r5, r0
   40402:	4e10      	ldr	r6, [pc, #64]	; (40444 <ull_filter_lll_irk_in_fal+0x4c>)
   40404:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   40408:	07db      	lsls	r3, r3, #31
   4040a:	4604      	mov	r4, r0
   4040c:	d505      	bpl.n	4041a <ull_filter_lll_irk_in_fal+0x22>
	return rl[rl_idx].fal;
   4040e:	1928      	adds	r0, r5, r4
   40410:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
   40414:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   40418:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   4041a:	f240 337b 	movw	r3, #891	; 0x37b
   4041e:	4a0a      	ldr	r2, [pc, #40]	; (40448 <ull_filter_lll_irk_in_fal+0x50>)
   40420:	490a      	ldr	r1, [pc, #40]	; (4044c <ull_filter_lll_irk_in_fal+0x54>)
   40422:	480b      	ldr	r0, [pc, #44]	; (40450 <ull_filter_lll_irk_in_fal+0x58>)
   40424:	f009 fe5a 	bl	4a0dc <printk>
   40428:	4040      	eors	r0, r0
   4042a:	f380 8811 	msr	BASEPRI, r0
   4042e:	f04f 0003 	mov.w	r0, #3
   40432:	df02      	svc	2
	return rl[rl_idx].fal;
   40434:	1928      	adds	r0, r5, r4
   40436:	f816 0030 	ldrb.w	r0, [r6, r0, lsl #3]
   4043a:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   4043e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   40440:	2000      	movs	r0, #0
}
   40442:	4770      	bx	lr
   40444:	200059b4 	.word	0x200059b4
   40448:	00053548 	.word	0x00053548
   4044c:	00053598 	.word	0x00053598
   40450:	00052d50 	.word	0x00052d50

00040454 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   40454:	4b13      	ldr	r3, [pc, #76]	; (404a4 <ull_filter_lll_rl_idx_allowed+0x50>)
   40456:	781b      	ldrb	r3, [r3, #0]
   40458:	b1a3      	cbz	r3, 40484 <ull_filter_lll_rl_idx_allowed+0x30>
   4045a:	2907      	cmp	r1, #7
   4045c:	d812      	bhi.n	40484 <ull_filter_lll_rl_idx_allowed+0x30>
   4045e:	b988      	cbnz	r0, 40484 <ull_filter_lll_rl_idx_allowed+0x30>
{
   40460:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   40462:	008d      	lsls	r5, r1, #2
   40464:	186b      	adds	r3, r5, r1
   40466:	4e10      	ldr	r6, [pc, #64]	; (404a8 <ull_filter_lll_rl_idx_allowed+0x54>)
   40468:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   4046c:	07da      	lsls	r2, r3, #31
   4046e:	460c      	mov	r4, r1
   40470:	d50a      	bpl.n	40488 <ull_filter_lll_rl_idx_allowed+0x34>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   40472:	1929      	adds	r1, r5, r4
   40474:	f816 0031 	ldrb.w	r0, [r6, r1, lsl #3]
   40478:	0743      	lsls	r3, r0, #29
   4047a:	bf4c      	ite	mi
   4047c:	f3c0 1000 	ubfxmi	r0, r0, #4, #1
   40480:	2001      	movpl	r0, #1
}
   40482:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   40484:	2001      	movs	r0, #1
}
   40486:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   40488:	f44f 7365 	mov.w	r3, #916	; 0x394
   4048c:	4a07      	ldr	r2, [pc, #28]	; (404ac <ull_filter_lll_rl_idx_allowed+0x58>)
   4048e:	4908      	ldr	r1, [pc, #32]	; (404b0 <ull_filter_lll_rl_idx_allowed+0x5c>)
   40490:	4808      	ldr	r0, [pc, #32]	; (404b4 <ull_filter_lll_rl_idx_allowed+0x60>)
   40492:	f009 fe23 	bl	4a0dc <printk>
   40496:	4040      	eors	r0, r0
   40498:	f380 8811 	msr	BASEPRI, r0
   4049c:	f04f 0003 	mov.w	r0, #3
   404a0:	df02      	svc	2
   404a2:	e7e6      	b.n	40472 <ull_filter_lll_rl_idx_allowed+0x1e>
   404a4:	20006d98 	.word	0x20006d98
   404a8:	200059b4 	.word	0x200059b4
   404ac:	00053548 	.word	0x00053548
   404b0:	00053598 	.word	0x00053598
   404b4:	00052d50 	.word	0x00052d50

000404b8 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   404b8:	7813      	ldrb	r3, [r2, #0]
   404ba:	2bff      	cmp	r3, #255	; 0xff
   404bc:	d11c      	bne.n	404f8 <ull_filter_lll_rl_addr_allowed+0x40>
{
   404be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   404c2:	4e19      	ldr	r6, [pc, #100]	; (40528 <ull_filter_lll_rl_addr_allowed+0x70>)
   404c4:	4684      	mov	ip, r0
   404c6:	2300      	movs	r3, #0
   404c8:	f106 0e06 	add.w	lr, r6, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   404cc:	009f      	lsls	r7, r3, #2
   404ce:	18fc      	adds	r4, r7, r3
   404d0:	00e5      	lsls	r5, r4, #3
   404d2:	f816 4034 	ldrb.w	r4, [r6, r4, lsl #3]
   404d6:	f014 0001 	ands.w	r0, r4, #1
   404da:	eb06 0905 	add.w	r9, r6, r5
   404de:	fa5f f883 	uxtb.w	r8, r3
   404e2:	d003      	beq.n	404ec <ull_filter_lll_rl_addr_allowed+0x34>
   404e4:	f3c4 1480 	ubfx	r4, r4, #6, #1
   404e8:	4564      	cmp	r4, ip
   404ea:	d007      	beq.n	404fc <ull_filter_lll_rl_addr_allowed+0x44>
   404ec:	3301      	adds	r3, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   404ee:	2b08      	cmp	r3, #8
   404f0:	d1ec      	bne.n	404cc <ull_filter_lll_rl_addr_allowed+0x14>
		return true;
   404f2:	2001      	movs	r0, #1
}
   404f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   404f8:	2001      	movs	r0, #1
}
   404fa:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   404fc:	464c      	mov	r4, r9
   404fe:	4475      	add	r5, lr
   40500:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   40504:	f814 bf01 	ldrb.w	fp, [r4, #1]!
   40508:	f819 af01 	ldrb.w	sl, [r9, #1]!
   4050c:	45d3      	cmp	fp, sl
   4050e:	d1ed      	bne.n	404ec <ull_filter_lll_rl_addr_allowed+0x34>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   40510:	42ac      	cmp	r4, r5
   40512:	d1f7      	bne.n	40504 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   40514:	443b      	add	r3, r7
				*rl_idx = i;
   40516:	f882 8000 	strb.w	r8, [r2]
				return !rl[i].pirk || rl[i].dev;
   4051a:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   4051e:	075a      	lsls	r2, r3, #29
   40520:	d5e8      	bpl.n	404f4 <ull_filter_lll_rl_addr_allowed+0x3c>
   40522:	f3c3 1000 	ubfx	r0, r3, #4, #1
   40526:	e7e5      	b.n	404f4 <ull_filter_lll_rl_addr_allowed+0x3c>
   40528:	200059b4 	.word	0x200059b4

0004052c <ull_filter_lll_rl_addr_resolve>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   4052c:	4b0f      	ldr	r3, [pc, #60]	; (4056c <ull_filter_lll_rl_addr_resolve+0x40>)
   4052e:	781b      	ldrb	r3, [r3, #0]
   40530:	b193      	cbz	r3, 40558 <ull_filter_lll_rl_addr_resolve+0x2c>
   40532:	2a07      	cmp	r2, #7
   40534:	d810      	bhi.n	40558 <ull_filter_lll_rl_addr_resolve+0x2c>
{
   40536:	b430      	push	{r4, r5}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   40538:	4b0d      	ldr	r3, [pc, #52]	; (40570 <ull_filter_lll_rl_addr_resolve+0x44>)
   4053a:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   4053e:	f813 5035 	ldrb.w	r5, [r3, r5, lsl #3]
   40542:	072c      	lsls	r4, r5, #28
   40544:	d505      	bpl.n	40552 <ull_filter_lll_rl_addr_resolve+0x26>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   40546:	b120      	cbz	r0, 40552 <ull_filter_lll_rl_addr_resolve+0x26>
   40548:	7948      	ldrb	r0, [r1, #5]
   4054a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   4054e:	2840      	cmp	r0, #64	; 0x40
   40550:	d004      	beq.n	4055c <ull_filter_lll_rl_addr_resolve+0x30>
}
   40552:	2000      	movs	r0, #0
   40554:	bc30      	pop	{r4, r5}
   40556:	4770      	bx	lr
   40558:	2000      	movs	r0, #0
   4055a:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   4055c:	2028      	movs	r0, #40	; 0x28
   4055e:	fb00 3002 	mla	r0, r0, r2, r3
   40562:	3007      	adds	r0, #7
}
   40564:	bc30      	pop	{r4, r5}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   40566:	f00b bf1d 	b.w	4c3a4 <bt_rpa_irk_matches>
   4056a:	bf00      	nop
   4056c:	20006d98 	.word	0x20006d98
   40570:	200059b4 	.word	0x200059b4

00040574 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   40574:	4b02      	ldr	r3, [pc, #8]	; (40580 <ull_filter_lll_rl_enabled+0xc>)
   40576:	7818      	ldrb	r0, [r3, #0]
}
   40578:	3000      	adds	r0, #0
   4057a:	bf18      	it	ne
   4057c:	2001      	movne	r0, #1
   4057e:	4770      	bx	lr
   40580:	20006d98 	.word	0x20006d98

00040584 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   40584:	4668      	mov	r0, sp
   40586:	f020 0107 	bic.w	r1, r0, #7
   4058a:	468d      	mov	sp, r1
   4058c:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   4058e:	f002 fdeb 	bl	43168 <isr_radio>

	ISR_DIRECT_PM();
   40592:	f7ec fac5 	bl	2cb20 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   40596:	f7ec fb95 	bl	2ccc4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   4059a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   4059e:	4685      	mov	sp, r0
   405a0:	4770      	bx	lr
   405a2:	bf00      	nop

000405a4 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   405a4:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   405a6:	4b09      	ldr	r3, [pc, #36]	; (405cc <rtc0_nrf5_isr+0x28>)
   405a8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   405ac:	b93a      	cbnz	r2, 405be <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   405ae:	2001      	movs	r0, #1
   405b0:	f7f3 fd74 	bl	3409c <mayfly_run>

#if !defined(CONFIG_BT_CTLR_LOW_LAT) && \
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	lll_prof_enter_ull_low();

	mayfly_run(TICKER_USER_ID_ULL_LOW);
   405b4:	2002      	movs	r0, #2

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   405b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   405ba:	f7f3 bd6f 	b.w	3409c <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   405be:	2000      	movs	r0, #0
   405c0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   405c4:	f7f4 ffda 	bl	3557c <ticker_trigger>
   405c8:	e7f1      	b.n	405ae <rtc0_nrf5_isr+0xa>
   405ca:	bf00      	nop
   405cc:	4000b000 	.word	0x4000b000

000405d0 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   405d0:	2000      	movs	r0, #0
   405d2:	f7f3 bd63 	b.w	3409c <mayfly_run>
   405d6:	bf00      	nop

000405d8 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   405d8:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   405da:	4b0e      	ldr	r3, [pc, #56]	; (40614 <ticker_stop_op_cb+0x3c>)
   405dc:	4c0e      	ldr	r4, [pc, #56]	; (40618 <ticker_stop_op_cb+0x40>)
   405de:	781a      	ldrb	r2, [r3, #0]
   405e0:	7823      	ldrb	r3, [r4, #0]
   405e2:	429a      	cmp	r2, r3
   405e4:	d006      	beq.n	405f4 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   405e6:	490d      	ldr	r1, [pc, #52]	; (4061c <ticker_stop_op_cb+0x44>)
   405e8:	4a0d      	ldr	r2, [pc, #52]	; (40620 <ticker_stop_op_cb+0x48>)
   405ea:	7809      	ldrb	r1, [r1, #0]
   405ec:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   405ee:	3301      	adds	r3, #1
   405f0:	7023      	strb	r3, [r4, #0]
}
   405f2:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   405f4:	f240 3301 	movw	r3, #769	; 0x301
   405f8:	4a0a      	ldr	r2, [pc, #40]	; (40624 <ticker_stop_op_cb+0x4c>)
   405fa:	490b      	ldr	r1, [pc, #44]	; (40628 <ticker_stop_op_cb+0x50>)
   405fc:	480b      	ldr	r0, [pc, #44]	; (4062c <ticker_stop_op_cb+0x54>)
   405fe:	f009 fd6d 	bl	4a0dc <printk>
   40602:	4040      	eors	r0, r0
   40604:	f380 8811 	msr	BASEPRI, r0
   40608:	f04f 0003 	mov.w	r0, #3
   4060c:	df02      	svc	2
   4060e:	7823      	ldrb	r3, [r4, #0]
   40610:	e7e9      	b.n	405e6 <ticker_stop_op_cb+0xe>
   40612:	bf00      	nop
   40614:	20006d9e 	.word	0x20006d9e
   40618:	20006d9d 	.word	0x20006d9d
   4061c:	20006d99 	.word	0x20006d99
   40620:	20006d9a 	.word	0x20006d9a
   40624:	00053848 	.word	0x00053848
   40628:	00053890 	.word	0x00053890
   4062c:	00052d50 	.word	0x00052d50

00040630 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   40630:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   40632:	b9f8      	cbnz	r0, 40674 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   40634:	4b1e      	ldr	r3, [pc, #120]	; (406b0 <ticker_start_op_cb+0x80>)
   40636:	4d1f      	ldr	r5, [pc, #124]	; (406b4 <ticker_start_op_cb+0x84>)
   40638:	781b      	ldrb	r3, [r3, #0]
   4063a:	782a      	ldrb	r2, [r5, #0]
   4063c:	4293      	cmp	r3, r2
   4063e:	d027      	beq.n	40690 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   40640:	4b1d      	ldr	r3, [pc, #116]	; (406b8 <ticker_start_op_cb+0x88>)
   40642:	4c1e      	ldr	r4, [pc, #120]	; (406bc <ticker_start_op_cb+0x8c>)
   40644:	781b      	ldrb	r3, [r3, #0]
   40646:	7821      	ldrb	r1, [r4, #0]
   40648:	b2db      	uxtb	r3, r3
	preempt_start_ack++;
   4064a:	3201      	adds	r2, #1
	LL_ASSERT(preempt_req == preempt_ack);
   4064c:	4299      	cmp	r1, r3
	preempt_start_ack++;
   4064e:	702a      	strb	r2, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   40650:	d00d      	beq.n	4066e <ticker_start_op_cb+0x3e>
   40652:	f240 330f 	movw	r3, #783	; 0x30f
   40656:	4a1a      	ldr	r2, [pc, #104]	; (406c0 <ticker_start_op_cb+0x90>)
   40658:	491a      	ldr	r1, [pc, #104]	; (406c4 <ticker_start_op_cb+0x94>)
   4065a:	481b      	ldr	r0, [pc, #108]	; (406c8 <ticker_start_op_cb+0x98>)
   4065c:	f009 fd3e 	bl	4a0dc <printk>
   40660:	4040      	eors	r0, r0
   40662:	f380 8811 	msr	BASEPRI, r0
   40666:	f04f 0003 	mov.w	r0, #3
   4066a:	df02      	svc	2
   4066c:	7823      	ldrb	r3, [r4, #0]
	preempt_req++;
   4066e:	3301      	adds	r3, #1
   40670:	7023      	strb	r3, [r4, #0]
}
   40672:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   40674:	f240 330a 	movw	r3, #778	; 0x30a
   40678:	4a11      	ldr	r2, [pc, #68]	; (406c0 <ticker_start_op_cb+0x90>)
   4067a:	4914      	ldr	r1, [pc, #80]	; (406cc <ticker_start_op_cb+0x9c>)
   4067c:	4812      	ldr	r0, [pc, #72]	; (406c8 <ticker_start_op_cb+0x98>)
   4067e:	f009 fd2d 	bl	4a0dc <printk>
   40682:	4040      	eors	r0, r0
   40684:	f380 8811 	msr	BASEPRI, r0
   40688:	f04f 0003 	mov.w	r0, #3
   4068c:	df02      	svc	2
   4068e:	e7d1      	b.n	40634 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   40690:	f44f 7343 	mov.w	r3, #780	; 0x30c
   40694:	4a0a      	ldr	r2, [pc, #40]	; (406c0 <ticker_start_op_cb+0x90>)
   40696:	490e      	ldr	r1, [pc, #56]	; (406d0 <ticker_start_op_cb+0xa0>)
   40698:	480b      	ldr	r0, [pc, #44]	; (406c8 <ticker_start_op_cb+0x98>)
   4069a:	f009 fd1f 	bl	4a0dc <printk>
   4069e:	4040      	eors	r0, r0
   406a0:	f380 8811 	msr	BASEPRI, r0
   406a4:	f04f 0003 	mov.w	r0, #3
   406a8:	df02      	svc	2
   406aa:	782a      	ldrb	r2, [r5, #0]
   406ac:	e7c8      	b.n	40640 <ticker_start_op_cb+0x10>
   406ae:	bf00      	nop
   406b0:	20006d9c 	.word	0x20006d9c
   406b4:	20006d9b 	.word	0x20006d9b
   406b8:	20006d99 	.word	0x20006d99
   406bc:	20006d9a 	.word	0x20006d9a
   406c0:	00053848 	.word	0x00053848
   406c4:	0005382c 	.word	0x0005382c
   406c8:	00052d50 	.word	0x00052d50
   406cc:	000532e0 	.word	0x000532e0
   406d0:	00053804 	.word	0x00053804

000406d4 <isr_race>:
	radio_status_reset();
   406d4:	f002 be6c 	b.w	433b0 <radio_status_reset>

000406d8 <preempt_ticker_stop>:

	return ret;
}

static uint32_t preempt_ticker_stop(void)
{
   406d8:	b530      	push	{r4, r5, lr}
	uint32_t ret;

	/* Do not request to stop preempt timeout if already requested or
	 * has expired
	 */
	if ((preempt_stop_req != preempt_stop_ack) ||
   406da:	4a17      	ldr	r2, [pc, #92]	; (40738 <preempt_ticker_stop+0x60>)
   406dc:	4c17      	ldr	r4, [pc, #92]	; (4073c <preempt_ticker_stop+0x64>)
   406de:	7812      	ldrb	r2, [r2, #0]
   406e0:	7823      	ldrb	r3, [r4, #0]
   406e2:	429a      	cmp	r2, r3
{
   406e4:	b083      	sub	sp, #12
	if ((preempt_stop_req != preempt_stop_ack) ||
   406e6:	d122      	bne.n	4072e <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   406e8:	4b15      	ldr	r3, [pc, #84]	; (40740 <preempt_ticker_stop+0x68>)
   406ea:	4a16      	ldr	r2, [pc, #88]	; (40744 <preempt_ticker_stop+0x6c>)
   406ec:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   406ee:	7812      	ldrb	r2, [r2, #0]
   406f0:	429a      	cmp	r2, r3
   406f2:	d01c      	beq.n	4072e <preempt_ticker_stop+0x56>
		return TICKER_STATUS_SUCCESS;
	}

	preempt_stop_req++;
   406f4:	7825      	ldrb	r5, [r4, #0]

	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   406f6:	4b14      	ldr	r3, [pc, #80]	; (40748 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   406f8:	3501      	adds	r5, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   406fa:	2200      	movs	r2, #0
	preempt_stop_req++;
   406fc:	b2ed      	uxtb	r5, r5
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   406fe:	9200      	str	r2, [sp, #0]
   40700:	4611      	mov	r1, r2
	preempt_stop_req++;
   40702:	7025      	strb	r5, [r4, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   40704:	4610      	mov	r0, r2
   40706:	f7f5 f835 	bl	35774 <ticker_stop>
			  TICKER_USER_ID_LLL,
			  TICKER_ID_LLL_PREEMPT,
			  ticker_stop_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   4070a:	4604      	mov	r4, r0
   4070c:	b178      	cbz	r0, 4072e <preempt_ticker_stop+0x56>
   4070e:	2802      	cmp	r0, #2
   40710:	d00e      	beq.n	40730 <preempt_ticker_stop+0x58>
   40712:	f240 3363 	movw	r3, #867	; 0x363
   40716:	4a0d      	ldr	r2, [pc, #52]	; (4074c <preempt_ticker_stop+0x74>)
   40718:	490d      	ldr	r1, [pc, #52]	; (40750 <preempt_ticker_stop+0x78>)
   4071a:	480e      	ldr	r0, [pc, #56]	; (40754 <preempt_ticker_stop+0x7c>)
   4071c:	f009 fcde 	bl	4a0dc <printk>
   40720:	4040      	eors	r0, r0
   40722:	f380 8811 	msr	BASEPRI, r0
   40726:	f04f 0003 	mov.w	r0, #3
   4072a:	df02      	svc	2
   4072c:	e000      	b.n	40730 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   4072e:	2400      	movs	r4, #0
		  (ret == TICKER_STATUS_BUSY));

	return ret;
}
   40730:	4620      	mov	r0, r4
   40732:	b003      	add	sp, #12
   40734:	bd30      	pop	{r4, r5, pc}
   40736:	bf00      	nop
   40738:	20006d9d 	.word	0x20006d9d
   4073c:	20006d9e 	.word	0x20006d9e
   40740:	20006d99 	.word	0x20006d99
   40744:	20006d9a 	.word	0x20006d9a
   40748:	000405d9 	.word	0x000405d9
   4074c:	00053848 	.word	0x00053848
   40750:	00053180 	.word	0x00053180
   40754:	00052d50 	.word	0x00052d50

00040758 <preempt_ticker_start>:
{
   40758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   4075c:	68ca      	ldr	r2, [r1, #12]
	if ((preempt_start_req != preempt_start_ack) ||
   4075e:	4b2e      	ldr	r3, [pc, #184]	; (40818 <preempt_ticker_start+0xc0>)
	ull = HDR_LLL2ULL(p->param);
   40760:	6812      	ldr	r2, [r2, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   40762:	4e2e      	ldr	r6, [pc, #184]	; (4081c <preempt_ticker_start+0xc4>)
	preempt_anchor = p->ticks_at_expire;
   40764:	f8d1 9000 	ldr.w	r9, [r1]
	preempt_to = MAX(ull->ticks_active_to_start,
   40768:	68d4      	ldr	r4, [r2, #12]
{
   4076a:	460d      	mov	r5, r1
	preempt_to = MAX(ull->ticks_active_to_start,
   4076c:	e9d2 1701 	ldrd	r1, r7, [r2, #4]
	if ((preempt_start_req != preempt_start_ack) ||
   40770:	781a      	ldrb	r2, [r3, #0]
   40772:	7833      	ldrb	r3, [r6, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   40774:	428f      	cmp	r7, r1
   40776:	bf2c      	ite	cs
   40778:	ebc4 0407 	rsbcs	r4, r4, r7
   4077c:	ebc4 0401 	rsbcc	r4, r4, r1
	if ((preempt_start_req != preempt_start_ack) ||
   40780:	429a      	cmp	r2, r3
{
   40782:	b08a      	sub	sp, #40	; 0x28
   40784:	4682      	mov	sl, r0
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   40786:	eb09 0704 	add.w	r7, r9, r4
	if ((preempt_start_req != preempt_start_ack) ||
   4078a:	d038      	beq.n	407fe <preempt_ticker_start+0xa6>
		if (!prev || prev->is_aborted ||
   4078c:	f1ba 0f00 	cmp.w	sl, #0
   40790:	d03e      	beq.n	40810 <preempt_ticker_start+0xb8>
   40792:	f89a 301c 	ldrb.w	r3, [sl, #28]
   40796:	079b      	lsls	r3, r3, #30
   40798:	d43a      	bmi.n	40810 <preempt_ticker_start+0xb8>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   4079a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 40830 <preempt_ticker_start+0xd8>
   4079e:	f8d8 0000 	ldr.w	r0, [r8]
   407a2:	1a38      	subs	r0, r7, r0
		if (!prev || prev->is_aborted ||
   407a4:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   407a8:	d026      	beq.n	407f8 <preempt_ticker_start+0xa0>
		preempt_ticker_stop();
   407aa:	f7ff ff95 	bl	406d8 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   407ae:	f89a 301c 	ldrb.w	r3, [sl, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   407b2:	f8da 2018 	ldr.w	r2, [sl, #24]
   407b6:	f8da 100c 	ldr.w	r1, [sl, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   407ba:	f8c8 7000 	str.w	r7, [r8]
		prev->is_aborted = 1U;
   407be:	f043 0302 	orr.w	r3, r3, #2
   407c2:	f88a 301c 	strb.w	r3, [sl, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   407c6:	4650      	mov	r0, sl
   407c8:	4790      	blx	r2
	preempt_start_req++;
   407ca:	7831      	ldrb	r1, [r6, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   407cc:	4814      	ldr	r0, [pc, #80]	; (40820 <preempt_ticker_start+0xc8>)
   407ce:	4b15      	ldr	r3, [pc, #84]	; (40824 <preempt_ticker_start+0xcc>)
   407d0:	9400      	str	r4, [sp, #0]
   407d2:	2200      	movs	r2, #0
	preempt_start_req++;
   407d4:	3101      	adds	r1, #1
   407d6:	b2cc      	uxtb	r4, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   407d8:	9307      	str	r3, [sp, #28]
   407da:	e9cd 2004 	strd	r2, r0, [sp, #16]
   407de:	9508      	str	r5, [sp, #32]
   407e0:	9506      	str	r5, [sp, #24]
   407e2:	464b      	mov	r3, r9
   407e4:	e9cd 2202 	strd	r2, r2, [sp, #8]
   407e8:	9201      	str	r2, [sp, #4]
   407ea:	4611      	mov	r1, r2
   407ec:	4610      	mov	r0, r2
	ticks_at_preempt = ticks_at_preempt_new;
   407ee:	f8c8 7000 	str.w	r7, [r8]
	preempt_start_req++;
   407f2:	7034      	strb	r4, [r6, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   407f4:	f7f4 ff34 	bl	35660 <ticker_start>
}
   407f8:	b00a      	add	sp, #40	; 0x28
   407fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   407fe:	4b0a      	ldr	r3, [pc, #40]	; (40828 <preempt_ticker_start+0xd0>)
   40800:	4a0a      	ldr	r2, [pc, #40]	; (4082c <preempt_ticker_start+0xd4>)
   40802:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   40804:	7812      	ldrb	r2, [r2, #0]
   40806:	429a      	cmp	r2, r3
   40808:	d1c0      	bne.n	4078c <preempt_ticker_start+0x34>
   4080a:	f8df 8024 	ldr.w	r8, [pc, #36]	; 40830 <preempt_ticker_start+0xd8>
   4080e:	e7dc      	b.n	407ca <preempt_ticker_start+0x72>
			return TICKER_STATUS_SUCCESS;
   40810:	2000      	movs	r0, #0
}
   40812:	b00a      	add	sp, #40	; 0x28
   40814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40818:	20006d9b 	.word	0x20006d9b
   4081c:	20006d9c 	.word	0x20006d9c
   40820:	0004097d 	.word	0x0004097d
   40824:	00040631 	.word	0x00040631
   40828:	20006d99 	.word	0x20006d99
   4082c:	20006d9a 	.word	0x20006d9a
   40830:	20005b44 	.word	0x20005b44

00040834 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   40834:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   40836:	4d4b      	ldr	r5, [pc, #300]	; (40964 <preempt+0x130>)
   40838:	68ab      	ldr	r3, [r5, #8]
{
   4083a:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   4083c:	b1b3      	cbz	r3, 4086c <preempt+0x38>
   4083e:	682b      	ldr	r3, [r5, #0]
   40840:	b1a3      	cbz	r3, 4086c <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   40842:	23ff      	movs	r3, #255	; 0xff
   40844:	4606      	mov	r6, r0
	next = ull_prepare_dequeue_iter(&idx);
   40846:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   4084a:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   4084e:	f7f7 fc09 	bl	38064 <ull_prepare_dequeue_iter>
	if (!next) {
   40852:	4601      	mov	r1, r0
   40854:	b150      	cbz	r0, 4086c <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   40856:	7f0b      	ldrb	r3, [r1, #28]
   40858:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   4085c:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   40860:	d006      	beq.n	40870 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   40862:	f7f7 fbff 	bl	38064 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   40866:	4601      	mov	r1, r0
   40868:	2800      	cmp	r0, #0
   4086a:	d1f4      	bne.n	40856 <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   4086c:	b009      	add	sp, #36	; 0x24
   4086e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   40870:	428e      	cmp	r6, r1
   40872:	d126      	bne.n	408c2 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   40874:	e9d5 1300 	ldrd	r1, r3, [r5]
   40878:	68f0      	ldr	r0, [r6, #12]
   4087a:	aa03      	add	r2, sp, #12
   4087c:	4798      	blx	r3
	if (!err) {
   4087e:	4607      	mov	r7, r0
   40880:	b1b0      	cbz	r0, 408b0 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   40882:	4620      	mov	r0, r4
   40884:	68ab      	ldr	r3, [r5, #8]
   40886:	6829      	ldr	r1, [r5, #0]
   40888:	4798      	blx	r3
	if (err == -EAGAIN) {
   4088a:	f117 0f0b 	cmn.w	r7, #11
   4088e:	d02c      	beq.n	408ea <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   40890:	378c      	adds	r7, #140	; 0x8c
   40892:	d0eb      	beq.n	4086c <preempt+0x38>
   40894:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   40898:	4a33      	ldr	r2, [pc, #204]	; (40968 <preempt+0x134>)
   4089a:	4934      	ldr	r1, [pc, #208]	; (4096c <preempt+0x138>)
   4089c:	4834      	ldr	r0, [pc, #208]	; (40970 <preempt+0x13c>)
   4089e:	f009 fc1d 	bl	4a0dc <printk>
   408a2:	4040      	eors	r0, r0
   408a4:	f380 8811 	msr	BASEPRI, r0
   408a8:	f04f 0003 	mov.w	r0, #3
   408ac:	df02      	svc	2
   408ae:	e7dd      	b.n	4086c <preempt+0x38>
		next->is_aborted = 1;
   408b0:	7f33      	ldrb	r3, [r6, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   408b2:	69b2      	ldr	r2, [r6, #24]
   408b4:	68f1      	ldr	r1, [r6, #12]
		next->is_aborted = 1;
   408b6:	f043 0302 	orr.w	r3, r3, #2
   408ba:	7733      	strb	r3, [r6, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   408bc:	4630      	mov	r0, r6
   408be:	4790      	blx	r2
		return;
   408c0:	e7d4      	b.n	4086c <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   408c2:	4620      	mov	r0, r4
   408c4:	f7ff ff48 	bl	40758 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   408c8:	f030 0302 	bics.w	r3, r0, #2
   408cc:	d0ce      	beq.n	4086c <preempt+0x38>
   408ce:	f240 339d 	movw	r3, #925	; 0x39d
   408d2:	4a25      	ldr	r2, [pc, #148]	; (40968 <preempt+0x134>)
   408d4:	4927      	ldr	r1, [pc, #156]	; (40974 <preempt+0x140>)
   408d6:	4826      	ldr	r0, [pc, #152]	; (40970 <preempt+0x13c>)
   408d8:	f009 fc00 	bl	4a0dc <printk>
   408dc:	4040      	eors	r0, r0
   408de:	f380 8811 	msr	BASEPRI, r0
   408e2:	f04f 0003 	mov.w	r0, #3
   408e6:	df02      	svc	2
   408e8:	e7c0      	b.n	4086c <preempt+0x38>
		iter_idx = UINT8_MAX;
   408ea:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   408ec:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   408f0:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   408f4:	f7f7 fbb6 	bl	38064 <ull_prepare_dequeue_iter>
		while (iter) {
   408f8:	b928      	cbnz	r0, 40906 <preempt+0xd2>
   408fa:	e013      	b.n	40924 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   408fc:	f10d 000b 	add.w	r0, sp, #11
   40900:	f7f7 fbb0 	bl	38064 <ull_prepare_dequeue_iter>
		while (iter) {
   40904:	b170      	cbz	r0, 40924 <preempt+0xf0>
			if (!iter->is_aborted &&
   40906:	7f03      	ldrb	r3, [r0, #28]
   40908:	079a      	lsls	r2, r3, #30
   4090a:	d4f7      	bmi.n	408fc <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   4090c:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   4090e:	6829      	ldr	r1, [r5, #0]
   40910:	4291      	cmp	r1, r2
   40912:	d1f3      	bne.n	408fc <preempt+0xc8>
				iter->is_aborted = 1;
   40914:	f043 0302 	orr.w	r3, r3, #2
   40918:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   4091a:	6983      	ldr	r3, [r0, #24]
   4091c:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   4091e:	f88d 400b 	strb.w	r4, [sp, #11]
   40922:	e7eb      	b.n	408fc <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   40924:	2000      	movs	r0, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   40926:	2301      	movs	r3, #1
	prepare_param.param = event.curr.param;
   40928:	682c      	ldr	r4, [r5, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   4092a:	9300      	str	r3, [sp, #0]
	struct lll_prepare_param prepare_param = {0};
   4092c:	e9cd 0004 	strd	r0, r0, [sp, #16]
   40930:	9006      	str	r0, [sp, #24]
	event.curr.param = NULL;
   40932:	6028      	str	r0, [r5, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   40934:	aa04      	add	r2, sp, #16
   40936:	9b03      	ldr	r3, [sp, #12]
   40938:	68a9      	ldr	r1, [r5, #8]
   4093a:	6868      	ldr	r0, [r5, #4]
	prepare_param.param = event.curr.param;
   4093c:	9407      	str	r4, [sp, #28]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   4093e:	f7f7 fb51 	bl	37fe4 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   40942:	2800      	cmp	r0, #0
   40944:	d192      	bne.n	4086c <preempt+0x38>
   40946:	f240 33ce 	movw	r3, #974	; 0x3ce
   4094a:	4a07      	ldr	r2, [pc, #28]	; (40968 <preempt+0x134>)
   4094c:	490a      	ldr	r1, [pc, #40]	; (40978 <preempt+0x144>)
   4094e:	4808      	ldr	r0, [pc, #32]	; (40970 <preempt+0x13c>)
   40950:	f009 fbc4 	bl	4a0dc <printk>
   40954:	4040      	eors	r0, r0
   40956:	f380 8811 	msr	BASEPRI, r0
   4095a:	f04f 0003 	mov.w	r0, #3
   4095e:	df02      	svc	2
   40960:	e784      	b.n	4086c <preempt+0x38>
   40962:	bf00      	nop
   40964:	20005b30 	.word	0x20005b30
   40968:	00053848 	.word	0x00053848
   4096c:	000537dc 	.word	0x000537dc
   40970:	00052d50 	.word	0x00052d50
   40974:	00053180 	.word	0x00053180
   40978:	000537d4 	.word	0x000537d4

0004097c <preempt_ticker_cb>:
{
   4097c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(preempt_ack != preempt_req);
   4097e:	4a18      	ldr	r2, [pc, #96]	; (409e0 <preempt_ticker_cb+0x64>)
   40980:	4d18      	ldr	r5, [pc, #96]	; (409e4 <preempt_ticker_cb+0x68>)
   40982:	7812      	ldrb	r2, [r2, #0]
   40984:	782b      	ldrb	r3, [r5, #0]
{
   40986:	9c05      	ldr	r4, [sp, #20]
	LL_ASSERT(preempt_ack != preempt_req);
   40988:	429a      	cmp	r2, r3
   4098a:	d01b      	beq.n	409c4 <preempt_ticker_cb+0x48>
	preempt_ack++;
   4098c:	7829      	ldrb	r1, [r5, #0]
	mfy.param = param;
   4098e:	4e16      	ldr	r6, [pc, #88]	; (409e8 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   40990:	3101      	adds	r1, #1
   40992:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   40994:	2200      	movs	r2, #0
	preempt_ack++;
   40996:	7029      	strb	r1, [r5, #0]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   40998:	4633      	mov	r3, r6
   4099a:	4611      	mov	r1, r2
   4099c:	2001      	movs	r0, #1
	mfy.param = param;
   4099e:	60b4      	str	r4, [r6, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   409a0:	f7f3 fb2a 	bl	33ff8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   409a4:	b900      	cbnz	r0, 409a8 <preempt_ticker_cb+0x2c>
}
   409a6:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!ret);
   409a8:	f240 3376 	movw	r3, #886	; 0x376
   409ac:	4a0f      	ldr	r2, [pc, #60]	; (409ec <preempt_ticker_cb+0x70>)
   409ae:	4910      	ldr	r1, [pc, #64]	; (409f0 <preempt_ticker_cb+0x74>)
   409b0:	4810      	ldr	r0, [pc, #64]	; (409f4 <preempt_ticker_cb+0x78>)
   409b2:	f009 fb93 	bl	4a0dc <printk>
   409b6:	4040      	eors	r0, r0
   409b8:	f380 8811 	msr	BASEPRI, r0
   409bc:	f04f 0003 	mov.w	r0, #3
   409c0:	df02      	svc	2
}
   409c2:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   409c4:	f44f 735c 	mov.w	r3, #880	; 0x370
   409c8:	4a08      	ldr	r2, [pc, #32]	; (409ec <preempt_ticker_cb+0x70>)
   409ca:	490b      	ldr	r1, [pc, #44]	; (409f8 <preempt_ticker_cb+0x7c>)
   409cc:	4809      	ldr	r0, [pc, #36]	; (409f4 <preempt_ticker_cb+0x78>)
   409ce:	f009 fb85 	bl	4a0dc <printk>
   409d2:	4040      	eors	r0, r0
   409d4:	f380 8811 	msr	BASEPRI, r0
   409d8:	f04f 0003 	mov.w	r0, #3
   409dc:	df02      	svc	2
   409de:	e7d5      	b.n	4098c <preempt_ticker_cb+0x10>
   409e0:	20006d9a 	.word	0x20006d9a
   409e4:	20006d99 	.word	0x20006d99
   409e8:	20000b1c 	.word	0x20000b1c
   409ec:	00053848 	.word	0x00053848
   409f0:	00052ed8 	.word	0x00052ed8
   409f4:	00052d50 	.word	0x00052d50
   409f8:	000537e8 	.word	0x000537e8

000409fc <lll_init>:
{
   409fc:	b510      	push	{r4, lr}
   409fe:	4816      	ldr	r0, [pc, #88]	; (40a58 <lll_init+0x5c>)
   40a00:	f007 fb88 	bl	48114 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   40a04:	4b15      	ldr	r3, [pc, #84]	; (40a5c <lll_init+0x60>)
   40a06:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   40a08:	b310      	cbz	r0, 40a50 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   40a0a:	4b15      	ldr	r3, [pc, #84]	; (40a60 <lll_init+0x64>)
   40a0c:	2400      	movs	r4, #0
   40a0e:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   40a10:	f000 fae4 	bl	40fdc <lll_clock_init>
	if (err < 0) {
   40a14:	2800      	cmp	r0, #0
   40a16:	db1a      	blt.n	40a4e <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   40a18:	4622      	mov	r2, r4
   40a1a:	4621      	mov	r1, r4
   40a1c:	2001      	movs	r0, #1
   40a1e:	f7ec f867 	bl	2caf0 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   40a22:	4622      	mov	r2, r4
   40a24:	2101      	movs	r1, #1
   40a26:	200b      	movs	r0, #11
   40a28:	f7ec f862 	bl	2caf0 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   40a2c:	4622      	mov	r2, r4
   40a2e:	4621      	mov	r1, r4
   40a30:	2018      	movs	r0, #24
   40a32:	f7ec f85d 	bl	2caf0 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   40a36:	2001      	movs	r0, #1
   40a38:	f7ec f828 	bl	2ca8c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   40a3c:	200b      	movs	r0, #11
   40a3e:	f7ec f825 	bl	2ca8c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   40a42:	2018      	movs	r0, #24
   40a44:	f7ec f822 	bl	2ca8c <arch_irq_enable>
	radio_setup();
   40a48:	f002 fbbe 	bl	431c8 <radio_setup>
	return 0;
   40a4c:	4620      	mov	r0, r4
}
   40a4e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   40a50:	f06f 0012 	mvn.w	r0, #18
}
   40a54:	bd10      	pop	{r4, pc}
   40a56:	bf00      	nop
   40a58:	0005379c 	.word	0x0005379c
   40a5c:	20005b2c 	.word	0x20005b2c
   40a60:	20005b30 	.word	0x20005b30

00040a64 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   40a64:	4b05      	ldr	r3, [pc, #20]	; (40a7c <lll_csrand_get+0x18>)
{
   40a66:	b410      	push	{r4}
	return entropy_get_entropy(dev_entropy, buf, len);
   40a68:	681b      	ldr	r3, [r3, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   40a6a:	689c      	ldr	r4, [r3, #8]
   40a6c:	6824      	ldr	r4, [r4, #0]
   40a6e:	b28a      	uxth	r2, r1
   40a70:	4601      	mov	r1, r0
   40a72:	4618      	mov	r0, r3
   40a74:	4623      	mov	r3, r4
}
   40a76:	bc10      	pop	{r4}
   40a78:	4718      	bx	r3
   40a7a:	bf00      	nop
   40a7c:	20005b2c 	.word	0x20005b2c

00040a80 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   40a80:	4b08      	ldr	r3, [pc, #32]	; (40aa4 <lll_csrand_isr_get+0x24>)
   40a82:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   40a84:	689a      	ldr	r2, [r3, #8]
{
   40a86:	b410      	push	{r4}
   40a88:	6854      	ldr	r4, [r2, #4]
   40a8a:	b134      	cbz	r4, 40a9a <lll_csrand_isr_get+0x1a>
   40a8c:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   40a8e:	46a4      	mov	ip, r4
   40a90:	4601      	mov	r1, r0
}
   40a92:	bc10      	pop	{r4}
   40a94:	4618      	mov	r0, r3
   40a96:	2300      	movs	r3, #0
   40a98:	4760      	bx	ip
   40a9a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   40a9e:	bc10      	pop	{r4}
   40aa0:	4770      	bx	lr
   40aa2:	bf00      	nop
   40aa4:	20005b2c 	.word	0x20005b2c

00040aa8 <lll_rand_isr_get>:
   40aa8:	f7ff bfea 	b.w	40a80 <lll_csrand_isr_get>

00040aac <lll_reset>:
}
   40aac:	2000      	movs	r0, #0
   40aae:	4770      	bx	lr

00040ab0 <lll_disable>:
{
   40ab0:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   40ab2:	4604      	mov	r4, r0
{
   40ab4:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   40ab6:	b378      	cbz	r0, 40b18 <lll_disable+0x68>
   40ab8:	4b23      	ldr	r3, [pc, #140]	; (40b48 <lll_disable+0x98>)
   40aba:	681a      	ldr	r2, [r3, #0]
   40abc:	4282      	cmp	r2, r0
   40abe:	d025      	beq.n	40b0c <lll_disable+0x5c>
		idx = UINT8_MAX;
   40ac0:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   40ac2:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   40ac6:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   40aca:	f7f7 facb 	bl	38064 <ull_prepare_dequeue_iter>
		while (next) {
   40ace:	b938      	cbnz	r0, 40ae0 <lll_disable+0x30>
   40ad0:	e01a      	b.n	40b08 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   40ad2:	428c      	cmp	r4, r1
   40ad4:	d00a      	beq.n	40aec <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   40ad6:	f10d 0007 	add.w	r0, sp, #7
   40ada:	f7f7 fac3 	bl	38064 <ull_prepare_dequeue_iter>
		while (next) {
   40ade:	b198      	cbz	r0, 40b08 <lll_disable+0x58>
			if (!next->is_aborted &&
   40ae0:	7f03      	ldrb	r3, [r0, #28]
   40ae2:	079b      	lsls	r3, r3, #30
   40ae4:	d4f7      	bmi.n	40ad6 <lll_disable+0x26>
				next->is_aborted = 1;
   40ae6:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   40ae8:	2c00      	cmp	r4, #0
   40aea:	d1f2      	bne.n	40ad2 <lll_disable+0x22>
				next->is_aborted = 1;
   40aec:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   40aee:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   40af0:	f043 0302 	orr.w	r3, r3, #2
   40af4:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   40af6:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   40af8:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   40afc:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   40b00:	f7f7 fab0 	bl	38064 <ull_prepare_dequeue_iter>
		while (next) {
   40b04:	2800      	cmp	r0, #0
   40b06:	d1eb      	bne.n	40ae0 <lll_disable+0x30>
}
   40b08:	b003      	add	sp, #12
   40b0a:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   40b0c:	689b      	ldr	r3, [r3, #8]
   40b0e:	b16b      	cbz	r3, 40b2c <lll_disable+0x7c>
   40b10:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   40b12:	2000      	movs	r0, #0
   40b14:	4798      	blx	r3
   40b16:	e7d3      	b.n	40ac0 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   40b18:	4a0b      	ldr	r2, [pc, #44]	; (40b48 <lll_disable+0x98>)
   40b1a:	6893      	ldr	r3, [r2, #8]
   40b1c:	2b00      	cmp	r3, #0
   40b1e:	d0cf      	beq.n	40ac0 <lll_disable+0x10>
   40b20:	6811      	ldr	r1, [r2, #0]
   40b22:	2900      	cmp	r1, #0
   40b24:	d0cc      	beq.n	40ac0 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   40b26:	2000      	movs	r0, #0
   40b28:	4798      	blx	r3
   40b2a:	e7c9      	b.n	40ac0 <lll_disable+0x10>
			LL_ASSERT(!param);
   40b2c:	23fd      	movs	r3, #253	; 0xfd
   40b2e:	4a07      	ldr	r2, [pc, #28]	; (40b4c <lll_disable+0x9c>)
   40b30:	4907      	ldr	r1, [pc, #28]	; (40b50 <lll_disable+0xa0>)
   40b32:	4808      	ldr	r0, [pc, #32]	; (40b54 <lll_disable+0xa4>)
   40b34:	f009 fad2 	bl	4a0dc <printk>
   40b38:	4040      	eors	r0, r0
   40b3a:	f380 8811 	msr	BASEPRI, r0
   40b3e:	f04f 0003 	mov.w	r0, #3
   40b42:	df02      	svc	2
   40b44:	e7bc      	b.n	40ac0 <lll_disable+0x10>
   40b46:	bf00      	nop
   40b48:	20005b30 	.word	0x20005b30
   40b4c:	00053848 	.word	0x00053848
   40b50:	00053768 	.word	0x00053768
   40b54:	00052d50 	.word	0x00052d50

00040b58 <lll_prepare_done>:
}
   40b58:	2000      	movs	r0, #0
   40b5a:	4770      	bx	lr

00040b5c <lll_done>:
{
   40b5c:	b538      	push	{r3, r4, r5, lr}
   40b5e:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   40b60:	f7f7 fa72 	bl	38048 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   40b64:	b154      	cbz	r4, 40b7c <lll_done+0x20>
   40b66:	b310      	cbz	r0, 40bae <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   40b68:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   40b6a:	2000      	movs	r0, #0
   40b6c:	f7f7 fa98 	bl	380a0 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   40b70:	4620      	mov	r0, r4
   40b72:	f7f7 fb01 	bl	38178 <ull_event_done>
	LL_ASSERT(evdone);
   40b76:	b158      	cbz	r0, 40b90 <lll_done+0x34>
}
   40b78:	2000      	movs	r0, #0
   40b7a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   40b7c:	4d1a      	ldr	r5, [pc, #104]	; (40be8 <lll_done+0x8c>)
   40b7e:	68ab      	ldr	r3, [r5, #8]
   40b80:	b31b      	cbz	r3, 40bca <lll_done+0x6e>
		param = event.curr.param;
   40b82:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   40b84:	2300      	movs	r3, #0
   40b86:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   40b88:	602b      	str	r3, [r5, #0]
		if (param) {
   40b8a:	2c00      	cmp	r4, #0
   40b8c:	d1ec      	bne.n	40b68 <lll_done+0xc>
   40b8e:	e7ec      	b.n	40b6a <lll_done+0xe>
	LL_ASSERT(evdone);
   40b90:	f240 136d 	movw	r3, #365	; 0x16d
   40b94:	4a15      	ldr	r2, [pc, #84]	; (40bec <lll_done+0x90>)
   40b96:	4916      	ldr	r1, [pc, #88]	; (40bf0 <lll_done+0x94>)
   40b98:	4816      	ldr	r0, [pc, #88]	; (40bf4 <lll_done+0x98>)
   40b9a:	f009 fa9f 	bl	4a0dc <printk>
   40b9e:	4040      	eors	r0, r0
   40ba0:	f380 8811 	msr	BASEPRI, r0
   40ba4:	f04f 0003 	mov.w	r0, #3
   40ba8:	df02      	svc	2
}
   40baa:	2000      	movs	r0, #0
   40bac:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   40bae:	f240 1337 	movw	r3, #311	; 0x137
   40bb2:	4a0e      	ldr	r2, [pc, #56]	; (40bec <lll_done+0x90>)
   40bb4:	4910      	ldr	r1, [pc, #64]	; (40bf8 <lll_done+0x9c>)
   40bb6:	480f      	ldr	r0, [pc, #60]	; (40bf4 <lll_done+0x98>)
   40bb8:	f009 fa90 	bl	4a0dc <printk>
   40bbc:	4040      	eors	r0, r0
   40bbe:	f380 8811 	msr	BASEPRI, r0
   40bc2:	f04f 0003 	mov.w	r0, #3
   40bc6:	df02      	svc	2
   40bc8:	e7ce      	b.n	40b68 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   40bca:	f240 133d 	movw	r3, #317	; 0x13d
   40bce:	4a07      	ldr	r2, [pc, #28]	; (40bec <lll_done+0x90>)
   40bd0:	490a      	ldr	r1, [pc, #40]	; (40bfc <lll_done+0xa0>)
   40bd2:	4808      	ldr	r0, [pc, #32]	; (40bf4 <lll_done+0x98>)
   40bd4:	f009 fa82 	bl	4a0dc <printk>
   40bd8:	4040      	eors	r0, r0
   40bda:	f380 8811 	msr	BASEPRI, r0
   40bde:	f04f 0003 	mov.w	r0, #3
   40be2:	df02      	svc	2
   40be4:	e7cd      	b.n	40b82 <lll_done+0x26>
   40be6:	bf00      	nop
   40be8:	20005b30 	.word	0x20005b30
   40bec:	00053848 	.word	0x00053848
   40bf0:	00053794 	.word	0x00053794
   40bf4:	00052d50 	.word	0x00052d50
   40bf8:	00053770 	.word	0x00053770
   40bfc:	00053780 	.word	0x00053780

00040c00 <lll_is_done>:
	*is_resume = (param != event.curr.param);
   40c00:	4a05      	ldr	r2, [pc, #20]	; (40c18 <lll_is_done+0x18>)
   40c02:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   40c04:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   40c06:	1a1b      	subs	r3, r3, r0
   40c08:	bf18      	it	ne
   40c0a:	2301      	movne	r3, #1
}
   40c0c:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   40c10:	700b      	strb	r3, [r1, #0]
}
   40c12:	0940      	lsrs	r0, r0, #5
   40c14:	4770      	bx	lr
   40c16:	bf00      	nop
   40c18:	20005b30 	.word	0x20005b30

00040c1c <lll_is_abort_cb>:
}
   40c1c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   40c20:	4770      	bx	lr
   40c22:	bf00      	nop

00040c24 <lll_event_offset_get>:
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   40c24:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
   40c28:	2a00      	cmp	r2, #0
   40c2a:	db04      	blt.n	40c36 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   40c2c:	429a      	cmp	r2, r3
   40c2e:	bf38      	it	cc
   40c30:	461a      	movcc	r2, r3
   40c32:	4610      	mov	r0, r2
}
   40c34:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   40c36:	68c0      	ldr	r0, [r0, #12]
   40c38:	4298      	cmp	r0, r3
   40c3a:	bf38      	it	cc
   40c3c:	4618      	movcc	r0, r3
   40c3e:	4770      	bx	lr

00040c40 <lll_preempt_calc>:
{
   40c40:	b510      	push	{r4, lr}
   40c42:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   40c44:	f7f4 fe3e 	bl	358c4 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   40c48:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   40c4a:	0203      	lsls	r3, r0, #8
   40c4c:	d405      	bmi.n	40c5a <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   40c4e:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   40c50:	2809      	cmp	r0, #9
   40c52:	bf94      	ite	ls
   40c54:	2000      	movls	r0, #0
   40c56:	2001      	movhi	r0, #1
}
   40c58:	bd10      	pop	{r4, pc}
		return 0;
   40c5a:	2000      	movs	r0, #0
}
   40c5c:	bd10      	pop	{r4, pc}
   40c5e:	bf00      	nop

00040c60 <lll_chan_set>:
	switch (chan) {
   40c60:	2826      	cmp	r0, #38	; 0x26
{
   40c62:	b510      	push	{r4, lr}
   40c64:	4604      	mov	r4, r0
	switch (chan) {
   40c66:	d01c      	beq.n	40ca2 <lll_chan_set+0x42>
   40c68:	2827      	cmp	r0, #39	; 0x27
   40c6a:	d012      	beq.n	40c92 <lll_chan_set+0x32>
   40c6c:	2825      	cmp	r0, #37	; 0x25
   40c6e:	d008      	beq.n	40c82 <lll_chan_set+0x22>
		if (chan < 11) {
   40c70:	280a      	cmp	r0, #10
   40c72:	d91e      	bls.n	40cb2 <lll_chan_set+0x52>
		} else if (chan < 40) {
   40c74:	2827      	cmp	r0, #39	; 0x27
   40c76:	d821      	bhi.n	40cbc <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   40c78:	3003      	adds	r0, #3
   40c7a:	0040      	lsls	r0, r0, #1
   40c7c:	f002 fb00 	bl	43280 <radio_freq_chan_set>
   40c80:	e002      	b.n	40c88 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   40c82:	2002      	movs	r0, #2
   40c84:	f002 fafc 	bl	43280 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   40c88:	4620      	mov	r0, r4
}
   40c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   40c8e:	f002 bafd 	b.w	4328c <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   40c92:	2050      	movs	r0, #80	; 0x50
   40c94:	f002 faf4 	bl	43280 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   40c98:	4620      	mov	r0, r4
}
   40c9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   40c9e:	f002 baf5 	b.w	4328c <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   40ca2:	201a      	movs	r0, #26
   40ca4:	f002 faec 	bl	43280 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   40ca8:	4620      	mov	r0, r4
}
   40caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   40cae:	f002 baed 	b.w	4328c <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   40cb2:	3002      	adds	r0, #2
   40cb4:	0040      	lsls	r0, r0, #1
   40cb6:	f002 fae3 	bl	43280 <radio_freq_chan_set>
   40cba:	e7e5      	b.n	40c88 <lll_chan_set+0x28>
			LL_ASSERT(0);
   40cbc:	f240 13df 	movw	r3, #479	; 0x1df
   40cc0:	4a05      	ldr	r2, [pc, #20]	; (40cd8 <lll_chan_set+0x78>)
   40cc2:	4906      	ldr	r1, [pc, #24]	; (40cdc <lll_chan_set+0x7c>)
   40cc4:	4806      	ldr	r0, [pc, #24]	; (40ce0 <lll_chan_set+0x80>)
   40cc6:	f009 fa09 	bl	4a0dc <printk>
   40cca:	4040      	eors	r0, r0
   40ccc:	f380 8811 	msr	BASEPRI, r0
   40cd0:	f04f 0003 	mov.w	r0, #3
   40cd4:	df02      	svc	2
   40cd6:	e7d7      	b.n	40c88 <lll_chan_set+0x28>
   40cd8:	00053848 	.word	0x00053848
   40cdc:	00052dd8 	.word	0x00052dd8
   40ce0:	00052d50 	.word	0x00052d50

00040ce4 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   40ce4:	f002 bb30 	b.w	43348 <radio_tx_ready_delay_get>

00040ce8 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   40ce8:	f002 bb36 	b.w	43358 <radio_rx_ready_delay_get>

00040cec <lll_isr_tx_status_reset>:
{
   40cec:	b508      	push	{r3, lr}
	radio_status_reset();
   40cee:	f002 fb5f 	bl	433b0 <radio_status_reset>
}
   40cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   40cf6:	f002 bce5 	b.w	436c4 <radio_tmr_status_reset>
   40cfa:	bf00      	nop

00040cfc <lll_isr_rx_status_reset>:
{
   40cfc:	b508      	push	{r3, lr}
	radio_status_reset();
   40cfe:	f002 fb57 	bl	433b0 <radio_status_reset>
	radio_tmr_status_reset();
   40d02:	f002 fcdf 	bl	436c4 <radio_tmr_status_reset>
}
   40d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   40d0a:	f002 bc8b 	b.w	43624 <radio_rssi_status_reset>
   40d0e:	bf00      	nop

00040d10 <lll_isr_status_reset>:
{
   40d10:	b508      	push	{r3, lr}
	radio_status_reset();
   40d12:	f002 fb4d 	bl	433b0 <radio_status_reset>
	radio_tmr_status_reset();
   40d16:	f002 fcd5 	bl	436c4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   40d1a:	f002 fcbb 	bl	43694 <radio_filter_status_reset>
	radio_ar_status_reset();
   40d1e:	f002 fedb 	bl	43ad8 <radio_ar_status_reset>
}
   40d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   40d26:	f002 bc7d 	b.w	43624 <radio_rssi_status_reset>
   40d2a:	bf00      	nop

00040d2c <lll_isr_cleanup>:
{
   40d2c:	b508      	push	{r3, lr}
	radio_isr_set(isr_race, param);
   40d2e:	4601      	mov	r1, r0
   40d30:	4815      	ldr	r0, [pc, #84]	; (40d88 <lll_isr_cleanup+0x5c>)
   40d32:	f002 fa29 	bl	43188 <radio_isr_set>
	if (!radio_is_idle()) {
   40d36:	f002 fb5b 	bl	433f0 <radio_is_idle>
   40d3a:	b150      	cbz	r0, 40d52 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   40d3c:	f002 fd9e 	bl	4387c <radio_tmr_stop>
	err = lll_hfclock_off();
   40d40:	f000 f992 	bl	41068 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40d44:	2800      	cmp	r0, #0
   40d46:	db0c      	blt.n	40d62 <lll_isr_cleanup+0x36>
	lll_done(NULL);
   40d48:	2000      	movs	r0, #0
}
   40d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   40d4e:	f7ff bf05 	b.w	40b5c <lll_done>
		radio_disable();
   40d52:	f002 fb15 	bl	43380 <radio_disable>
	radio_tmr_stop();
   40d56:	f002 fd91 	bl	4387c <radio_tmr_stop>
	err = lll_hfclock_off();
   40d5a:	f000 f985 	bl	41068 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40d5e:	2800      	cmp	r0, #0
   40d60:	daf2      	bge.n	40d48 <lll_isr_cleanup+0x1c>
   40d62:	f240 2342 	movw	r3, #578	; 0x242
   40d66:	4a09      	ldr	r2, [pc, #36]	; (40d8c <lll_isr_cleanup+0x60>)
   40d68:	4909      	ldr	r1, [pc, #36]	; (40d90 <lll_isr_cleanup+0x64>)
   40d6a:	480a      	ldr	r0, [pc, #40]	; (40d94 <lll_isr_cleanup+0x68>)
   40d6c:	f009 f9b6 	bl	4a0dc <printk>
   40d70:	4040      	eors	r0, r0
   40d72:	f380 8811 	msr	BASEPRI, r0
   40d76:	f04f 0003 	mov.w	r0, #3
   40d7a:	df02      	svc	2
	lll_done(NULL);
   40d7c:	2000      	movs	r0, #0
}
   40d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   40d82:	f7ff beeb 	b.w	40b5c <lll_done>
   40d86:	bf00      	nop
   40d88:	000406d5 	.word	0x000406d5
   40d8c:	00053848 	.word	0x00053848
   40d90:	0005375c 	.word	0x0005375c
   40d94:	00052d50 	.word	0x00052d50

00040d98 <lll_isr_abort>:
{
   40d98:	b510      	push	{r4, lr}
   40d9a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   40d9c:	f7ff ffb8 	bl	40d10 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   40da0:	4620      	mov	r0, r4
}
   40da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   40da6:	f7ff bfc1 	b.w	40d2c <lll_isr_cleanup>
   40daa:	bf00      	nop

00040dac <lll_isr_early_abort>:
{
   40dac:	b508      	push	{r3, lr}
	radio_isr_set(isr_race, param);
   40dae:	4601      	mov	r1, r0
   40db0:	4813      	ldr	r0, [pc, #76]	; (40e00 <lll_isr_early_abort+0x54>)
   40db2:	f002 f9e9 	bl	43188 <radio_isr_set>
	if (!radio_is_idle()) {
   40db6:	f002 fb1b 	bl	433f0 <radio_is_idle>
   40dba:	b140      	cbz	r0, 40dce <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   40dbc:	f000 f954 	bl	41068 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40dc0:	2800      	cmp	r0, #0
   40dc2:	db0a      	blt.n	40dda <lll_isr_early_abort+0x2e>
	lll_done(NULL);
   40dc4:	2000      	movs	r0, #0
}
   40dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   40dca:	f7ff bec7 	b.w	40b5c <lll_done>
		radio_disable();
   40dce:	f002 fad7 	bl	43380 <radio_disable>
	err = lll_hfclock_off();
   40dd2:	f000 f949 	bl	41068 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   40dd6:	2800      	cmp	r0, #0
   40dd8:	daf4      	bge.n	40dc4 <lll_isr_early_abort+0x18>
   40dda:	f240 2351 	movw	r3, #593	; 0x251
   40dde:	4a09      	ldr	r2, [pc, #36]	; (40e04 <lll_isr_early_abort+0x58>)
   40de0:	4909      	ldr	r1, [pc, #36]	; (40e08 <lll_isr_early_abort+0x5c>)
   40de2:	480a      	ldr	r0, [pc, #40]	; (40e0c <lll_isr_early_abort+0x60>)
   40de4:	f009 f97a 	bl	4a0dc <printk>
   40de8:	4040      	eors	r0, r0
   40dea:	f380 8811 	msr	BASEPRI, r0
   40dee:	f04f 0003 	mov.w	r0, #3
   40df2:	df02      	svc	2
	lll_done(NULL);
   40df4:	2000      	movs	r0, #0
}
   40df6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   40dfa:	f7ff beaf 	b.w	40b5c <lll_done>
   40dfe:	bf00      	nop
   40e00:	000406d5 	.word	0x000406d5
   40e04:	00053848 	.word	0x00053848
   40e08:	0005375c 	.word	0x0005375c
   40e0c:	00052d50 	.word	0x00052d50

00040e10 <lll_prepare_resolve>:
{
   40e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40e14:	b084      	sub	sp, #16
   40e16:	4680      	mov	r8, r0
	idx = UINT8_MAX;
   40e18:	24ff      	movs	r4, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   40e1a:	f10d 000f 	add.w	r0, sp, #15
{
   40e1e:	4689      	mov	r9, r1
   40e20:	4692      	mov	sl, r2
   40e22:	461f      	mov	r7, r3
	idx = UINT8_MAX;
   40e24:	f88d 400f 	strb.w	r4, [sp, #15]
{
   40e28:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	p = ull_prepare_dequeue_iter(&idx);
   40e2c:	f7f7 f91a 	bl	38064 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   40e30:	b360      	cbz	r0, 40e8c <lll_prepare_resolve+0x7c>
   40e32:	4604      	mov	r4, r0
   40e34:	e005      	b.n	40e42 <lll_prepare_resolve+0x32>
		p = ull_prepare_dequeue_iter(&idx);
   40e36:	f10d 000f 	add.w	r0, sp, #15
   40e3a:	f7f7 f913 	bl	38064 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   40e3e:	4604      	mov	r4, r0
   40e40:	b320      	cbz	r0, 40e8c <lll_prepare_resolve+0x7c>
   40e42:	7f23      	ldrb	r3, [r4, #28]
   40e44:	079b      	lsls	r3, r3, #30
   40e46:	d1f6      	bne.n	40e36 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   40e48:	4d47      	ldr	r5, [pc, #284]	; (40f68 <lll_prepare_resolve+0x158>)
	if ((!is_dequeue && !is_done_sync()) ||
   40e4a:	68ab      	ldr	r3, [r5, #8]
   40e4c:	bb1b      	cbnz	r3, 40e96 <lll_prepare_resolve+0x86>
	    (p && is_resume)) {
   40e4e:	2e00      	cmp	r6, #0
   40e50:	d041      	beq.n	40ed6 <lll_prepare_resolve+0xc6>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   40e52:	9600      	str	r6, [sp, #0]
   40e54:	4653      	mov	r3, sl
   40e56:	463a      	mov	r2, r7
   40e58:	4649      	mov	r1, r9
   40e5a:	4640      	mov	r0, r8
   40e5c:	f7f7 f8c2 	bl	37fe4 <ull_prepare_enqueue>
		LL_ASSERT(next);
   40e60:	b970      	cbnz	r0, 40e80 <lll_prepare_resolve+0x70>
   40e62:	f240 238d 	movw	r3, #653	; 0x28d
   40e66:	4a41      	ldr	r2, [pc, #260]	; (40f6c <lll_prepare_resolve+0x15c>)
   40e68:	4941      	ldr	r1, [pc, #260]	; (40f70 <lll_prepare_resolve+0x160>)
   40e6a:	4842      	ldr	r0, [pc, #264]	; (40f74 <lll_prepare_resolve+0x164>)
   40e6c:	f009 f936 	bl	4a0dc <printk>
   40e70:	4040      	eors	r0, r0
   40e72:	f380 8811 	msr	BASEPRI, r0
   40e76:	f04f 0003 	mov.w	r0, #3
   40e7a:	df02      	svc	2
   40e7c:	2000      	movs	r0, #0
		if (is_resume) {
   40e7e:	b1ae      	cbz	r6, 40eac <lll_prepare_resolve+0x9c>
		return -EINPROGRESS;
   40e80:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   40e84:	4620      	mov	r0, r4
   40e86:	b004      	add	sp, #16
   40e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   40e8c:	4d36      	ldr	r5, [pc, #216]	; (40f68 <lll_prepare_resolve+0x158>)
	if ((!is_dequeue && !is_done_sync()) ||
   40e8e:	68ab      	ldr	r3, [r5, #8]
   40e90:	2b00      	cmp	r3, #0
   40e92:	d02f      	beq.n	40ef4 <lll_prepare_resolve+0xe4>
   40e94:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   40e96:	9600      	str	r6, [sp, #0]
   40e98:	4653      	mov	r3, sl
   40e9a:	463a      	mov	r2, r7
   40e9c:	4649      	mov	r1, r9
   40e9e:	4640      	mov	r0, r8
   40ea0:	f7f7 f8a0 	bl	37fe4 <ull_prepare_enqueue>
		LL_ASSERT(next);
   40ea4:	2800      	cmp	r0, #0
   40ea6:	d0dc      	beq.n	40e62 <lll_prepare_resolve+0x52>
		if (is_resume) {
   40ea8:	2e00      	cmp	r6, #0
   40eaa:	d1e9      	bne.n	40e80 <lll_prepare_resolve+0x70>
		ret  = preempt_ticker_start(p, next);
   40eac:	4601      	mov	r1, r0
   40eae:	4620      	mov	r0, r4
   40eb0:	f7ff fc52 	bl	40758 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40eb4:	f030 0302 	bics.w	r3, r0, #2
   40eb8:	d0e2      	beq.n	40e80 <lll_prepare_resolve+0x70>
   40eba:	f240 2399 	movw	r3, #665	; 0x299
   40ebe:	4a2b      	ldr	r2, [pc, #172]	; (40f6c <lll_prepare_resolve+0x15c>)
   40ec0:	492d      	ldr	r1, [pc, #180]	; (40f78 <lll_prepare_resolve+0x168>)
   40ec2:	482c      	ldr	r0, [pc, #176]	; (40f74 <lll_prepare_resolve+0x164>)
   40ec4:	f009 f90a 	bl	4a0dc <printk>
   40ec8:	4040      	eors	r0, r0
   40eca:	f380 8811 	msr	BASEPRI, r0
   40ece:	f04f 0003 	mov.w	r0, #3
   40ed2:	df02      	svc	2
   40ed4:	e7d4      	b.n	40e80 <lll_prepare_resolve+0x70>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   40ed6:	42bc      	cmp	r4, r7
   40ed8:	d00c      	beq.n	40ef4 <lll_prepare_resolve+0xe4>
   40eda:	f240 23be 	movw	r3, #702	; 0x2be
   40ede:	4a23      	ldr	r2, [pc, #140]	; (40f6c <lll_prepare_resolve+0x15c>)
   40ee0:	4926      	ldr	r1, [pc, #152]	; (40f7c <lll_prepare_resolve+0x16c>)
   40ee2:	4824      	ldr	r0, [pc, #144]	; (40f74 <lll_prepare_resolve+0x164>)
   40ee4:	f009 f8fa 	bl	4a0dc <printk>
   40ee8:	4040      	eors	r0, r0
   40eea:	f380 8811 	msr	BASEPRI, r0
   40eee:	f04f 0003 	mov.w	r0, #3
   40ef2:	df02      	svc	2
	event.curr.param = prepare_param->param;
   40ef4:	68fb      	ldr	r3, [r7, #12]
   40ef6:	602b      	str	r3, [r5, #0]
	event.curr.abort_cb = abort_cb;
   40ef8:	e9c5 8901 	strd	r8, r9, [r5, #4]
	err = prepare_cb(prepare_param);
   40efc:	4638      	mov	r0, r7
   40efe:	47d0      	blx	sl
   40f00:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   40f02:	f7ff fbe9 	bl	406d8 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40f06:	f030 0302 	bics.w	r3, r0, #2
   40f0a:	d11e      	bne.n	40f4a <lll_prepare_resolve+0x13a>
		p = ull_prepare_dequeue_iter(&idx);
   40f0c:	f10d 000f 	add.w	r0, sp, #15
   40f10:	f7f7 f8a8 	bl	38064 <ull_prepare_dequeue_iter>
		if (!p) {
   40f14:	2800      	cmp	r0, #0
   40f16:	d0b5      	beq.n	40e84 <lll_prepare_resolve+0x74>
	} while (p->is_aborted || p->is_resume);
   40f18:	7f03      	ldrb	r3, [r0, #28]
   40f1a:	f013 0303 	ands.w	r3, r3, #3
   40f1e:	d1f5      	bne.n	40f0c <lll_prepare_resolve+0xfc>
	ret = preempt_ticker_start(NULL, p);
   40f20:	4601      	mov	r1, r0
   40f22:	4618      	mov	r0, r3
   40f24:	f7ff fc18 	bl	40758 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40f28:	f030 0302 	bics.w	r3, r0, #2
   40f2c:	d0aa      	beq.n	40e84 <lll_prepare_resolve+0x74>
   40f2e:	f240 23d9 	movw	r3, #729	; 0x2d9
   40f32:	4a0e      	ldr	r2, [pc, #56]	; (40f6c <lll_prepare_resolve+0x15c>)
   40f34:	4910      	ldr	r1, [pc, #64]	; (40f78 <lll_prepare_resolve+0x168>)
   40f36:	480f      	ldr	r0, [pc, #60]	; (40f74 <lll_prepare_resolve+0x164>)
   40f38:	f009 f8d0 	bl	4a0dc <printk>
   40f3c:	4040      	eors	r0, r0
   40f3e:	f380 8811 	msr	BASEPRI, r0
   40f42:	f04f 0003 	mov.w	r0, #3
   40f46:	df02      	svc	2
   40f48:	e79c      	b.n	40e84 <lll_prepare_resolve+0x74>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   40f4a:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   40f4e:	4a07      	ldr	r2, [pc, #28]	; (40f6c <lll_prepare_resolve+0x15c>)
   40f50:	4909      	ldr	r1, [pc, #36]	; (40f78 <lll_prepare_resolve+0x168>)
   40f52:	4808      	ldr	r0, [pc, #32]	; (40f74 <lll_prepare_resolve+0x164>)
   40f54:	f009 f8c2 	bl	4a0dc <printk>
   40f58:	4040      	eors	r0, r0
   40f5a:	f380 8811 	msr	BASEPRI, r0
   40f5e:	f04f 0003 	mov.w	r0, #3
   40f62:	df02      	svc	2
   40f64:	e7d2      	b.n	40f0c <lll_prepare_resolve+0xfc>
   40f66:	bf00      	nop
   40f68:	20005b30 	.word	0x20005b30
   40f6c:	00053848 	.word	0x00053848
   40f70:	000537a0 	.word	0x000537a0
   40f74:	00052d50 	.word	0x00052d50
   40f78:	00053180 	.word	0x00053180
   40f7c:	000537a8 	.word	0x000537a8

00040f80 <clock_ready>:
	z_impl_k_sem_give(sem);
   40f80:	f101 0010 	add.w	r0, r1, #16
   40f84:	f007 bc98 	b.w	488b8 <z_impl_k_sem_give>

00040f88 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   40f88:	b530      	push	{r4, r5, lr}
   40f8a:	4604      	mov	r4, r0
   40f8c:	b08b      	sub	sp, #44	; 0x2c
   40f8e:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   40f90:	2201      	movs	r2, #1
   40f92:	2100      	movs	r1, #0
   40f94:	a804      	add	r0, sp, #16
   40f96:	f010 f86a 	bl	5106e <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   40f9a:	2300      	movs	r3, #0
   40f9c:	4a0e      	ldr	r2, [pc, #56]	; (40fd8 <blocking_on+0x50>)
   40f9e:	9303      	str	r3, [sp, #12]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   40fa0:	4620      	mov	r0, r4
   40fa2:	2303      	movs	r3, #3
   40fa4:	4669      	mov	r1, sp
   40fa6:	9201      	str	r2, [sp, #4]
   40fa8:	9302      	str	r3, [sp, #8]
   40faa:	f009 f913 	bl	4a1d4 <onoff_request>
	if (err < 0) {
   40fae:	2800      	cmp	r0, #0
   40fb0:	db10      	blt.n	40fd4 <blocking_on+0x4c>
   40fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   40fb6:	f240 30e7 	movw	r0, #999	; 0x3e7
   40fba:	2100      	movs	r1, #0
   40fbc:	fbe3 0105 	umlal	r0, r1, r3, r5
   40fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   40fc4:	2300      	movs	r3, #0
   40fc6:	f7e5 f89b 	bl	26100 <__aeabi_uldivmod>
   40fca:	4602      	mov	r2, r0
   40fcc:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   40fce:	a804      	add	r0, sp, #16
   40fd0:	f007 fc98 	bl	48904 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   40fd4:	b00b      	add	sp, #44	; 0x2c
   40fd6:	bd30      	pop	{r4, r5, pc}
   40fd8:	00040f81 	.word	0x00040f81

00040fdc <lll_clock_init>:

int lll_clock_init(void)
{
   40fdc:	b538      	push	{r3, r4, r5, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   40fde:	2001      	movs	r0, #1
   40fe0:	f004 fa1a 	bl	45418 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   40fe4:	4b05      	ldr	r3, [pc, #20]	; (40ffc <lll_clock_init+0x20>)
   40fe6:	2501      	movs	r5, #1
   40fe8:	2200      	movs	r2, #0

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
   40fea:	4619      	mov	r1, r3
   40fec:	609d      	str	r5, [r3, #8]
   40fee:	60da      	str	r2, [r3, #12]
   40ff0:	605a      	str	r2, [r3, #4]
}
   40ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return onoff_request(mgr, &lf_cli);
   40ff6:	f009 b8ed 	b.w	4a1d4 <onoff_request>
   40ffa:	bf00      	nop
   40ffc:	20005b4c 	.word	0x20005b4c

00041000 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   41000:	4b0c      	ldr	r3, [pc, #48]	; (41034 <lll_clock_wait+0x34>)
   41002:	781a      	ldrb	r2, [r3, #0]
   41004:	b10a      	cbz	r2, 4100a <lll_clock_wait+0xa>
		return 0;
   41006:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   41008:	4770      	bx	lr
	done = true;
   4100a:	2201      	movs	r2, #1
{
   4100c:	b510      	push	{r4, lr}
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   4100e:	4610      	mov	r0, r2
	done = true;
   41010:	701a      	strb	r2, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   41012:	f004 fa01 	bl	45418 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   41016:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   4101a:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   4101c:	f7ff ffb4 	bl	40f88 <blocking_on>
	if (err) {
   41020:	b938      	cbnz	r0, 41032 <lll_clock_wait+0x32>
	err = onoff_release(mgr);
   41022:	4620      	mov	r0, r4
   41024:	f009 f91f 	bl	4a266 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   41028:	2802      	cmp	r0, #2
		return 0;
   4102a:	bf0c      	ite	eq
   4102c:	2000      	moveq	r0, #0
		return -EIO;
   4102e:	f06f 0004 	mvnne.w	r0, #4
}
   41032:	bd10      	pop	{r4, pc}
   41034:	20006d9f 	.word	0x20006d9f

00041038 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   41038:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   4103a:	4b0a      	ldr	r3, [pc, #40]	; (41064 <lll_hfclock_on+0x2c>)
   4103c:	f3bf 8f5b 	dmb	ish
   41040:	e853 2f00 	ldrex	r2, [r3]
   41044:	1c51      	adds	r1, r2, #1
   41046:	e843 1000 	strex	r0, r1, [r3]
   4104a:	2800      	cmp	r0, #0
   4104c:	d1f8      	bne.n	41040 <lll_hfclock_on+0x8>
   4104e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   41052:	2a00      	cmp	r2, #0
   41054:	dd01      	ble.n	4105a <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   41056:	2000      	movs	r0, #0
   41058:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   4105a:	f004 f9e5 	bl	45428 <z_nrf_clock_bt_ctlr_hf_request>
}
   4105e:	2000      	movs	r0, #0
   41060:	bd08      	pop	{r3, pc}
   41062:	bf00      	nop
   41064:	20005b48 	.word	0x20005b48

00041068 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   41068:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   4106a:	4b0d      	ldr	r3, [pc, #52]	; (410a0 <lll_hfclock_off+0x38>)
   4106c:	681a      	ldr	r2, [r3, #0]
   4106e:	2a00      	cmp	r2, #0
   41070:	dd12      	ble.n	41098 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   41072:	f3bf 8f5b 	dmb	ish
   41076:	e853 2f00 	ldrex	r2, [r3]
   4107a:	1e51      	subs	r1, r2, #1
   4107c:	e843 1000 	strex	r0, r1, [r3]
   41080:	2800      	cmp	r0, #0
   41082:	d1f8      	bne.n	41076 <lll_hfclock_off+0xe>
   41084:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   41088:	2a01      	cmp	r2, #1
   4108a:	dd01      	ble.n	41090 <lll_hfclock_off+0x28>
		return 0;
   4108c:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   4108e:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   41090:	f004 f9e0 	bl	45454 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   41094:	2000      	movs	r0, #0
}
   41096:	bd08      	pop	{r3, pc}
		return -EALREADY;
   41098:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   4109c:	bd08      	pop	{r3, pc}
   4109e:	bf00      	nop
   410a0:	20005b48 	.word	0x20005b48

000410a4 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   410a4:	2005      	movs	r0, #5
   410a6:	4770      	bx	lr

000410a8 <lll_clock_ppm_local_get>:

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   410a8:	2032      	movs	r0, #50	; 0x32
   410aa:	4770      	bx	lr

000410ac <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   410ac:	4b01      	ldr	r3, [pc, #4]	; (410b4 <lll_clock_ppm_get+0x8>)
}
   410ae:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   410b2:	4770      	bx	lr
   410b4:	000538b8 	.word	0x000538b8

000410b8 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   410b8:	b510      	push	{r4, lr}
   410ba:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   410bc:	f7ff fe28 	bl	40d10 <lll_isr_status_reset>

	radio_filter_disable();
   410c0:	f002 fade 	bl	43680 <radio_filter_disable>

	lll_isr_cleanup(param);
   410c4:	4620      	mov	r0, r4
}
   410c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   410ca:	f7ff be2f 	b.w	40d2c <lll_isr_cleanup>
   410ce:	bf00      	nop

000410d0 <isr_tx>:
{
   410d0:	b530      	push	{r4, r5, lr}
   410d2:	b083      	sub	sp, #12
   410d4:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   410d6:	f7ff fe09 	bl	40cec <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   410da:	2096      	movs	r0, #150	; 0x96
   410dc:	f002 fb02 	bl	436e4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   410e0:	2300      	movs	r3, #0
   410e2:	4618      	mov	r0, r3
   410e4:	461a      	mov	r2, r3
   410e6:	4619      	mov	r1, r3
   410e8:	f002 fa68 	bl	435bc <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   410ec:	2001      	movs	r0, #1
   410ee:	f7f6 ff29 	bl	37f44 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   410f2:	4604      	mov	r4, r0
   410f4:	2800      	cmp	r0, #0
   410f6:	d042      	beq.n	4117e <isr_tx+0xae>
	radio_pkt_rx_set(node_rx->pdu);
   410f8:	f104 001c 	add.w	r0, r4, #28
   410fc:	f002 f918 	bl	43330 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   41100:	f002 f962 	bl	433c8 <radio_is_ready>
   41104:	b9d8      	cbnz	r0, 4113e <isr_tx+0x6e>
	radio_isr_set(isr_rx, param);
   41106:	4629      	mov	r1, r5
   41108:	4824      	ldr	r0, [pc, #144]	; (4119c <isr_tx+0xcc>)
   4110a:	f002 f83d 	bl	43188 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   4110e:	f7ff fa31 	bl	40574 <ull_filter_lll_rl_enabled>
   41112:	bb48      	cbnz	r0, 41168 <isr_tx+0x98>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   41114:	f002 fc0e 	bl	43934 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   41118:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   4111a:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   4111c:	4608      	mov	r0, r1
   4111e:	f002 f91d 	bl	4335c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   41122:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   41124:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   41126:	4608      	mov	r0, r1
   41128:	f002 f914 	bl	43354 <radio_tx_chain_delay_get>
   4112c:	442c      	add	r4, r5
   4112e:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   41130:	1a20      	subs	r0, r4, r0
   41132:	f002 fbb7 	bl	438a4 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   41136:	f002 fbef 	bl	43918 <radio_tmr_end_capture>
}
   4113a:	b003      	add	sp, #12
   4113c:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   4113e:	f240 4345 	movw	r3, #1093	; 0x445
   41142:	4a17      	ldr	r2, [pc, #92]	; (411a0 <isr_tx+0xd0>)
   41144:	4917      	ldr	r1, [pc, #92]	; (411a4 <isr_tx+0xd4>)
   41146:	4818      	ldr	r0, [pc, #96]	; (411a8 <isr_tx+0xd8>)
   41148:	f008 ffc8 	bl	4a0dc <printk>
   4114c:	4040      	eors	r0, r0
   4114e:	f380 8811 	msr	BASEPRI, r0
   41152:	f04f 0003 	mov.w	r0, #3
   41156:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   41158:	4810      	ldr	r0, [pc, #64]	; (4119c <isr_tx+0xcc>)
   4115a:	4629      	mov	r1, r5
   4115c:	f002 f814 	bl	43188 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   41160:	f7ff fa08 	bl	40574 <ull_filter_lll_rl_enabled>
   41164:	2800      	cmp	r0, #0
   41166:	d0d5      	beq.n	41114 <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41168:	f10d 0007 	add.w	r0, sp, #7
   4116c:	f7ff f882 	bl	40274 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   41170:	2200      	movs	r2, #0
   41172:	4601      	mov	r1, r0
   41174:	f89d 0007 	ldrb.w	r0, [sp, #7]
   41178:	f002 fc76 	bl	43a68 <radio_ar_configure>
   4117c:	e7ca      	b.n	41114 <isr_tx+0x44>
	LL_ASSERT(node_rx);
   4117e:	f240 4341 	movw	r3, #1089	; 0x441
   41182:	4a07      	ldr	r2, [pc, #28]	; (411a0 <isr_tx+0xd0>)
   41184:	4909      	ldr	r1, [pc, #36]	; (411ac <isr_tx+0xdc>)
   41186:	4808      	ldr	r0, [pc, #32]	; (411a8 <isr_tx+0xd8>)
   41188:	f008 ffa8 	bl	4a0dc <printk>
   4118c:	4040      	eors	r0, r0
   4118e:	f380 8811 	msr	BASEPRI, r0
   41192:	f04f 0003 	mov.w	r0, #3
   41196:	df02      	svc	2
   41198:	e7ae      	b.n	410f8 <isr_tx+0x28>
   4119a:	bf00      	nop
   4119c:	000418ed 	.word	0x000418ed
   411a0:	000538e0 	.word	0x000538e0
   411a4:	00053934 	.word	0x00053934
   411a8:	00052d50 	.word	0x00052d50
   411ac:	0005392c 	.word	0x0005392c

000411b0 <is_abort_cb>:
	if (next != curr) {
   411b0:	4281      	cmp	r1, r0
{
   411b2:	b508      	push	{r3, lr}
	if (next != curr) {
   411b4:	d00e      	beq.n	411d4 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   411b6:	7a0b      	ldrb	r3, [r1, #8]
   411b8:	07db      	lsls	r3, r3, #31
   411ba:	d402      	bmi.n	411c2 <is_abort_cb+0x12>
			return -ECANCELED;
   411bc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   411c0:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   411c2:	4b13      	ldr	r3, [pc, #76]	; (41210 <is_abort_cb+0x60>)
   411c4:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   411c6:	f7ff ff37 	bl	41038 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   411ca:	2800      	cmp	r0, #0
   411cc:	db0f      	blt.n	411ee <is_abort_cb+0x3e>
   411ce:	f06f 000a 	mvn.w	r0, #10
}
   411d2:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   411d4:	7b0b      	ldrb	r3, [r1, #12]
   411d6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   411da:	690b      	ldr	r3, [r1, #16]
   411dc:	781b      	ldrb	r3, [r3, #0]
   411de:	f003 030f 	and.w	r3, r3, #15
   411e2:	2b01      	cmp	r3, #1
		return 0;
   411e4:	bf14      	ite	ne
   411e6:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   411ea:	2000      	moveq	r0, #0
}
   411ec:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   411ee:	f240 33fa 	movw	r3, #1018	; 0x3fa
   411f2:	4a08      	ldr	r2, [pc, #32]	; (41214 <is_abort_cb+0x64>)
   411f4:	4908      	ldr	r1, [pc, #32]	; (41218 <is_abort_cb+0x68>)
   411f6:	4809      	ldr	r0, [pc, #36]	; (4121c <is_abort_cb+0x6c>)
   411f8:	f008 ff70 	bl	4a0dc <printk>
   411fc:	4040      	eors	r0, r0
   411fe:	f380 8811 	msr	BASEPRI, r0
   41202:	f04f 0003 	mov.w	r0, #3
   41206:	df02      	svc	2
   41208:	f06f 000a 	mvn.w	r0, #10
}
   4120c:	bd08      	pop	{r3, pc}
   4120e:	bf00      	nop
   41210:	000416c1 	.word	0x000416c1
   41214:	000538e0 	.word	0x000538e0
   41218:	0005375c 	.word	0x0005375c
   4121c:	00052d50 	.word	0x00052d50

00041220 <abort_cb>:
{
   41220:	b510      	push	{r4, lr}
	if (!prepare_param) {
   41222:	b1d8      	cbz	r0, 4125c <abort_cb+0x3c>
	err = lll_hfclock_off();
   41224:	460c      	mov	r4, r1
   41226:	f7ff ff1f 	bl	41068 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   4122a:	2800      	cmp	r0, #0
   4122c:	db04      	blt.n	41238 <abort_cb+0x18>
	lll_done(param);
   4122e:	4620      	mov	r0, r4
}
   41230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   41234:	f7ff bc92 	b.w	40b5c <lll_done>
	LL_ASSERT(err >= 0);
   41238:	f44f 6384 	mov.w	r3, #1056	; 0x420
   4123c:	4a0b      	ldr	r2, [pc, #44]	; (4126c <abort_cb+0x4c>)
   4123e:	490c      	ldr	r1, [pc, #48]	; (41270 <abort_cb+0x50>)
   41240:	480c      	ldr	r0, [pc, #48]	; (41274 <abort_cb+0x54>)
   41242:	f008 ff4b 	bl	4a0dc <printk>
   41246:	4040      	eors	r0, r0
   41248:	f380 8811 	msr	BASEPRI, r0
   4124c:	f04f 0003 	mov.w	r0, #3
   41250:	df02      	svc	2
	lll_done(param);
   41252:	4620      	mov	r0, r4
}
   41254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   41258:	f7ff bc80 	b.w	40b5c <lll_done>
		radio_isr_set(isr_abort, param);
   4125c:	4806      	ldr	r0, [pc, #24]	; (41278 <abort_cb+0x58>)
   4125e:	f001 ff93 	bl	43188 <radio_isr_set>
}
   41262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   41266:	f002 b88b 	b.w	43380 <radio_disable>
   4126a:	bf00      	nop
   4126c:	000538e0 	.word	0x000538e0
   41270:	0005375c 	.word	0x0005375c
   41274:	00052d50 	.word	0x00052d50
   41278:	000410b9 	.word	0x000410b9

0004127c <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   4127c:	4b08      	ldr	r3, [pc, #32]	; (412a0 <lll_adv_init+0x24>)
   4127e:	2204      	movs	r2, #4
{
   41280:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   41282:	1898      	adds	r0, r3, r2
   41284:	2128      	movs	r1, #40	; 0x28
   41286:	f7f2 fdb1 	bl	33dec <mem_init>
	MFIFO_INIT(pdu_free);
   4128a:	4b06      	ldr	r3, [pc, #24]	; (412a4 <lll_adv_init+0x28>)
   4128c:	2400      	movs	r4, #0
   4128e:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   41290:	2202      	movs	r2, #2
   41292:	4621      	mov	r1, r4
   41294:	4804      	ldr	r0, [pc, #16]	; (412a8 <lll_adv_init+0x2c>)
   41296:	f00f feea 	bl	5106e <z_impl_k_sem_init>
}
   4129a:	4620      	mov	r0, r4
   4129c:	bd10      	pop	{r4, pc}
   4129e:	bf00      	nop
   412a0:	20005b5c 	.word	0x20005b5c
   412a4:	20000b2c 	.word	0x20000b2c
   412a8:	20005c00 	.word	0x20005c00

000412ac <lll_adv_reset>:
   412ac:	f7ff bfe6 	b.w	4127c <lll_adv_init>

000412b0 <lll_adv_data_init>:
{
   412b0:	b510      	push	{r4, lr}
   412b2:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   412b4:	4805      	ldr	r0, [pc, #20]	; (412cc <lll_adv_data_init+0x1c>)
   412b6:	f7f2 fdc7 	bl	33e48 <mem_acquire>
	if (!p) {
   412ba:	b120      	cbz	r0, 412c6 <lll_adv_data_init+0x16>
	p->len = 0U;
   412bc:	2300      	movs	r3, #0
   412be:	7043      	strb	r3, [r0, #1]
	pdu->pdu[0] = (void *)p;
   412c0:	6060      	str	r0, [r4, #4]
}
   412c2:	4618      	mov	r0, r3
   412c4:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   412c6:	f06f 030b 	mvn.w	r3, #11
   412ca:	e7fa      	b.n	412c2 <lll_adv_data_init+0x12>
   412cc:	20005b5c 	.word	0x20005b5c

000412d0 <lll_adv_data_reset>:
	pdu->first = 0U;
   412d0:	2300      	movs	r3, #0
   412d2:	7003      	strb	r3, [r0, #0]
	pdu->last = 0U;
   412d4:	7043      	strb	r3, [r0, #1]
	pdu->pdu[1] = NULL;
   412d6:	6083      	str	r3, [r0, #8]
}
   412d8:	4618      	mov	r0, r3
   412da:	4770      	bx	lr

000412dc <lll_adv_pdu_alloc_pdu_adv>:
{
   412dc:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   412de:	4c35      	ldr	r4, [pc, #212]	; (413b4 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   412e0:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   412e2:	78e1      	ldrb	r1, [r4, #3]
   412e4:	7823      	ldrb	r3, [r4, #0]
   412e6:	4291      	cmp	r1, r2
   412e8:	d003      	beq.n	412f2 <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   412ea:	fb02 4303 	mla	r3, r2, r3, r4
   412ee:	685d      	ldr	r5, [r3, #4]
	if (p) {
   412f0:	b935      	cbnz	r5, 41300 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   412f2:	4831      	ldr	r0, [pc, #196]	; (413b8 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   412f4:	f7f2 fda8 	bl	33e48 <mem_acquire>
	if (p) {
   412f8:	4605      	mov	r5, r0
   412fa:	b1a0      	cbz	r0, 41326 <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   412fc:	4628      	mov	r0, r5
   412fe:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   41300:	2200      	movs	r2, #0
   41302:	2300      	movs	r3, #0
   41304:	482d      	ldr	r0, [pc, #180]	; (413bc <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   41306:	f007 fafd 	bl	48904 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   4130a:	bb40      	cbnz	r0, 4135e <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   4130c:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   4130e:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   41310:	7861      	ldrb	r1, [r4, #1]
   41312:	429a      	cmp	r2, r3
   41314:	d0f2      	beq.n	412fc <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   41316:	3301      	adds	r3, #1
   41318:	b2db      	uxtb	r3, r3
		_first = 0U;
   4131a:	4299      	cmp	r1, r3
   4131c:	bf08      	it	eq
   4131e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   41320:	70a3      	strb	r3, [r4, #2]
}
   41322:	4628      	mov	r0, r5
   41324:	bd38      	pop	{r3, r4, r5, pc}
   41326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4132a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4132e:	4823      	ldr	r0, [pc, #140]	; (413bc <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   41330:	f007 fae8 	bl	48904 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   41334:	2800      	cmp	r0, #0
   41336:	d12e      	bne.n	41396 <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   41338:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   4133a:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   4133c:	7822      	ldrb	r2, [r4, #0]
   4133e:	7860      	ldrb	r0, [r4, #1]
   41340:	4299      	cmp	r1, r3
   41342:	d01a      	beq.n	4137a <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   41344:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   41348:	3301      	adds	r3, #1
   4134a:	b2db      	uxtb	r3, r3
	mem = *((void **)(fifo + _first * size));
   4134c:	6852      	ldr	r2, [r2, #4]
		_first = 0U;
   4134e:	4298      	cmp	r0, r3
   41350:	bf08      	it	eq
   41352:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   41354:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   41356:	b182      	cbz	r2, 4137a <lll_adv_pdu_alloc_pdu_adv+0x9e>
   41358:	4615      	mov	r5, r2
}
   4135a:	4628      	mov	r0, r5
   4135c:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   4135e:	f240 1397 	movw	r3, #407	; 0x197
   41362:	4a17      	ldr	r2, [pc, #92]	; (413c0 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   41364:	4917      	ldr	r1, [pc, #92]	; (413c4 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   41366:	4818      	ldr	r0, [pc, #96]	; (413c8 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   41368:	f008 feb8 	bl	4a0dc <printk>
   4136c:	4040      	eors	r0, r0
   4136e:	f380 8811 	msr	BASEPRI, r0
   41372:	f04f 0003 	mov.w	r0, #3
   41376:	df02      	svc	2
   41378:	e7c8      	b.n	4130c <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   4137a:	f240 13ad 	movw	r3, #429	; 0x1ad
   4137e:	4a10      	ldr	r2, [pc, #64]	; (413c0 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   41380:	4912      	ldr	r1, [pc, #72]	; (413cc <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   41382:	4811      	ldr	r0, [pc, #68]	; (413c8 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   41384:	f008 feaa 	bl	4a0dc <printk>
   41388:	4040      	eors	r0, r0
   4138a:	f380 8811 	msr	BASEPRI, r0
   4138e:	f04f 0003 	mov.w	r0, #3
   41392:	df02      	svc	2
   41394:	e7b2      	b.n	412fc <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   41396:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   4139a:	4a09      	ldr	r2, [pc, #36]	; (413c0 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   4139c:	4909      	ldr	r1, [pc, #36]	; (413c4 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   4139e:	480a      	ldr	r0, [pc, #40]	; (413c8 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   413a0:	f008 fe9c 	bl	4a0dc <printk>
   413a4:	4040      	eors	r0, r0
   413a6:	f380 8811 	msr	BASEPRI, r0
   413aa:	f04f 0003 	mov.w	r0, #3
   413ae:	df02      	svc	2
   413b0:	e7c2      	b.n	41338 <lll_adv_pdu_alloc_pdu_adv+0x5c>
   413b2:	bf00      	nop
   413b4:	20000b2c 	.word	0x20000b2c
   413b8:	20005b5c 	.word	0x20005b5c
   413bc:	20005c00 	.word	0x20005c00
   413c0:	000538e0 	.word	0x000538e0
   413c4:	00052ff0 	.word	0x00052ff0
   413c8:	00052d50 	.word	0x00052d50
   413cc:	00053948 	.word	0x00053948

000413d0 <lll_adv_pdu_alloc>:
{
   413d0:	b510      	push	{r4, lr}
	first = pdu->first;
   413d2:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   413d4:	7843      	ldrb	r3, [r0, #1]
	first = pdu->first;
   413d6:	b2d2      	uxtb	r2, r2
	if (first == last) {
   413d8:	429a      	cmp	r2, r3
   413da:	d013      	beq.n	41404 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   413dc:	7042      	strb	r2, [r0, #1]
		first_latest = pdu->first;
   413de:	7804      	ldrb	r4, [r0, #0]
		if (first_latest != first) {
   413e0:	42a2      	cmp	r2, r4
   413e2:	d004      	beq.n	413ee <lll_adv_pdu_alloc+0x1e>
			last++;
   413e4:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   413e6:	7043      	strb	r3, [r0, #1]
			last++;
   413e8:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   413ea:	2b02      	cmp	r3, #2
   413ec:	d00e      	beq.n	4140c <lll_adv_pdu_alloc+0x3c>
   413ee:	461c      	mov	r4, r3
	*idx = last;
   413f0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   413f4:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   413f6:	6860      	ldr	r0, [r4, #4]
	if (p) {
   413f8:	b100      	cbz	r0, 413fc <lll_adv_pdu_alloc+0x2c>
}
   413fa:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   413fc:	f7ff ff6e 	bl	412dc <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   41400:	6060      	str	r0, [r4, #4]
}
   41402:	bd10      	pop	{r4, pc}
		last++;
   41404:	3301      	adds	r3, #1
   41406:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   41408:	2b02      	cmp	r3, #2
   4140a:	d1f0      	bne.n	413ee <lll_adv_pdu_alloc+0x1e>
{
   4140c:	2400      	movs	r4, #0
			last = 0U;
   4140e:	4623      	mov	r3, r4
   41410:	e7ee      	b.n	413f0 <lll_adv_pdu_alloc+0x20>
   41412:	bf00      	nop

00041414 <lll_adv_pdu_latest_get>:
{
   41414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	first = pdu->first;
   41416:	7804      	ldrb	r4, [r0, #0]
{
   41418:	4605      	mov	r5, r0
	if (first != pdu->last) {
   4141a:	7840      	ldrb	r0, [r0, #1]
	first = pdu->first;
   4141c:	b2e4      	uxtb	r4, r4
	if (first != pdu->last) {
   4141e:	42a0      	cmp	r0, r4
   41420:	d026      	beq.n	41470 <lll_adv_pdu_latest_get+0x5c>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   41422:	4a15      	ldr	r2, [pc, #84]	; (41478 <lll_adv_pdu_latest_get+0x64>)
   41424:	78d0      	ldrb	r0, [r2, #3]
   41426:	f892 c002 	ldrb.w	ip, [r2, #2]
   4142a:	460e      	mov	r6, r1
	last = last + 1;
   4142c:	1c43      	adds	r3, r0, #1
	if (last == count) {
   4142e:	7851      	ldrb	r1, [r2, #1]
	last = last + 1;
   41430:	b2db      	uxtb	r3, r3
		last = 0U;
   41432:	4299      	cmp	r1, r3
   41434:	bf08      	it	eq
   41436:	2300      	moveq	r3, #0
   41438:	eb05 0784 	add.w	r7, r5, r4, lsl #2
	if (last == first) {
   4143c:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   4143e:	6879      	ldr	r1, [r7, #4]
   41440:	d009      	beq.n	41456 <lll_adv_pdu_latest_get+0x42>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   41442:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   41446:	fb0c 2000 	mla	r0, ip, r0, r2
   4144a:	6041      	str	r1, [r0, #4]
	*last = idx; /* Commit: Update write index */
   4144c:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   4144e:	480b      	ldr	r0, [pc, #44]	; (4147c <lll_adv_pdu_latest_get+0x68>)
   41450:	f007 fa32 	bl	488b8 <z_impl_k_sem_give>
			p = next;
   41454:	2100      	movs	r1, #0
		first += 1U;
   41456:	3401      	adds	r4, #1
   41458:	b2e4      	uxtb	r4, r4
		if (first == DOUBLE_BUFFER_SIZE) {
   4145a:	2c02      	cmp	r4, #2
   4145c:	bf04      	itt	eq
   4145e:	2000      	moveq	r0, #0
			first = 0U;
   41460:	4604      	moveq	r4, r0
		*is_modified = 1U;
   41462:	f04f 0301 	mov.w	r3, #1
		pdu->pdu[pdu_idx] = p;
   41466:	6079      	str	r1, [r7, #4]
		pdu->first = first;
   41468:	bf18      	it	ne
   4146a:	4620      	movne	r0, r4
   4146c:	702c      	strb	r4, [r5, #0]
		*is_modified = 1U;
   4146e:	7033      	strb	r3, [r6, #0]
	return (void *)pdu->pdu[first];
   41470:	eb05 0080 	add.w	r0, r5, r0, lsl #2
}
   41474:	6840      	ldr	r0, [r0, #4]
   41476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   41478:	20000b2c 	.word	0x20000b2c
   4147c:	20005c00 	.word	0x20005c00

00041480 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   41480:	7a03      	ldrb	r3, [r0, #8]
{
   41482:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   41484:	f3c3 1302 	ubfx	r3, r3, #4, #3
   41488:	2b00      	cmp	r3, #0
{
   4148a:	4605      	mov	r5, r0
   4148c:	fa93 f0a3 	rbit	r0, r3
   41490:	fab0 f080 	clz	r0, r0
   41494:	bf08      	it	eq
   41496:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   4149a:	1c44      	adds	r4, r0, #1
{
   4149c:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   4149e:	d045      	beq.n	4152c <chan_prepare+0xac>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   414a0:	1e5a      	subs	r2, r3, #1
   414a2:	7a29      	ldrb	r1, [r5, #8]
   414a4:	4013      	ands	r3, r2
   414a6:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   414aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   414ae:	7229      	strb	r1, [r5, #8]
	lll_chan_set(36 + chan);
   414b0:	f7ff fbd6 	bl	40c60 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   414b4:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   414b6:	f10d 0107 	add.w	r1, sp, #7
   414ba:	f105 000c 	add.w	r0, r5, #12
   414be:	f88d 3007 	strb.w	r3, [sp, #7]
   414c2:	f7ff ffa7 	bl	41414 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   414c6:	4604      	mov	r4, r0
   414c8:	2800      	cmp	r0, #0
   414ca:	d040      	beq.n	4154e <chan_prepare+0xce>

	radio_pkt_tx_set(pdu);
   414cc:	4620      	mov	r0, r4
   414ce:	f001 ff35 	bl	4333c <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   414d2:	7823      	ldrb	r3, [r4, #0]
   414d4:	f003 030f 	and.w	r3, r3, #15
   414d8:	2b02      	cmp	r3, #2
   414da:	d01e      	beq.n	4151a <chan_prepare+0x9a>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   414dc:	f10d 0107 	add.w	r1, sp, #7
   414e0:	f105 0018 	add.w	r0, r5, #24
   414e4:	f7ff ff96 	bl	41414 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   414e8:	4606      	mov	r6, r0
   414ea:	2800      	cmp	r0, #0
   414ec:	d03d      	beq.n	4156a <chan_prepare+0xea>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   414ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   414f2:	b963      	cbnz	r3, 4150e <chan_prepare+0x8e>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   414f4:	4629      	mov	r1, r5
   414f6:	4824      	ldr	r0, [pc, #144]	; (41588 <chan_prepare+0x108>)
   414f8:	f001 fe46 	bl	43188 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   414fc:	2096      	movs	r0, #150	; 0x96
   414fe:	f002 f8f1 	bl	436e4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   41502:	2000      	movs	r0, #0
   41504:	f002 f810 	bl	43528 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   41508:	4620      	mov	r0, r4
   4150a:	b002      	add	sp, #8
   4150c:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   4150e:	1cb0      	adds	r0, r6, #2
   41510:	2206      	movs	r2, #6
   41512:	1ca1      	adds	r1, r4, #2
   41514:	f00a feea 	bl	4c2ec <memcpy>
   41518:	e7ec      	b.n	414f4 <chan_prepare+0x74>
		radio_isr_set(isr_done, lll);
   4151a:	4629      	mov	r1, r5
   4151c:	481b      	ldr	r0, [pc, #108]	; (4158c <chan_prepare+0x10c>)
   4151e:	f001 fe33 	bl	43188 <radio_isr_set>
		radio_switch_complete_and_disable();
   41522:	f002 f85f 	bl	435e4 <radio_switch_complete_and_disable>
}
   41526:	4620      	mov	r0, r4
   41528:	b002      	add	sp, #8
   4152a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   4152c:	f240 5337 	movw	r3, #1335	; 0x537
   41530:	4a17      	ldr	r2, [pc, #92]	; (41590 <chan_prepare+0x110>)
   41532:	4918      	ldr	r1, [pc, #96]	; (41594 <chan_prepare+0x114>)
   41534:	4818      	ldr	r0, [pc, #96]	; (41598 <chan_prepare+0x118>)
   41536:	f008 fdd1 	bl	4a0dc <printk>
   4153a:	4040      	eors	r0, r0
   4153c:	f380 8811 	msr	BASEPRI, r0
   41540:	f04f 0003 	mov.w	r0, #3
   41544:	df02      	svc	2
   41546:	7a2b      	ldrb	r3, [r5, #8]
   41548:	f3c3 1302 	ubfx	r3, r3, #4, #3
   4154c:	e7a8      	b.n	414a0 <chan_prepare+0x20>
	LL_ASSERT(pdu);
   4154e:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   41552:	4a0f      	ldr	r2, [pc, #60]	; (41590 <chan_prepare+0x110>)
   41554:	4911      	ldr	r1, [pc, #68]	; (4159c <chan_prepare+0x11c>)
   41556:	4810      	ldr	r0, [pc, #64]	; (41598 <chan_prepare+0x118>)
   41558:	f008 fdc0 	bl	4a0dc <printk>
   4155c:	4040      	eors	r0, r0
   4155e:	f380 8811 	msr	BASEPRI, r0
   41562:	f04f 0003 	mov.w	r0, #3
   41566:	df02      	svc	2
   41568:	e7b0      	b.n	414cc <chan_prepare+0x4c>
		LL_ASSERT(scan_pdu);
   4156a:	f240 534a 	movw	r3, #1354	; 0x54a
   4156e:	4a08      	ldr	r2, [pc, #32]	; (41590 <chan_prepare+0x110>)
   41570:	490b      	ldr	r1, [pc, #44]	; (415a0 <chan_prepare+0x120>)
   41572:	4809      	ldr	r0, [pc, #36]	; (41598 <chan_prepare+0x118>)
   41574:	f008 fdb2 	bl	4a0dc <printk>
   41578:	4040      	eors	r0, r0
   4157a:	f380 8811 	msr	BASEPRI, r0
   4157e:	f04f 0003 	mov.w	r0, #3
   41582:	df02      	svc	2
   41584:	e7b3      	b.n	414ee <chan_prepare+0x6e>
   41586:	bf00      	nop
   41588:	000410d1 	.word	0x000410d1
   4158c:	000416e9 	.word	0x000416e9
   41590:	000538e0 	.word	0x000538e0
   41594:	000538c8 	.word	0x000538c8
   41598:	00052d50 	.word	0x00052d50
   4159c:	000538d0 	.word	0x000538d0
   415a0:	000538d4 	.word	0x000538d4

000415a4 <prepare_cb>:
{
   415a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   415a6:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   415a8:	6863      	ldr	r3, [r4, #4]
{
   415aa:	b083      	sub	sp, #12
   415ac:	4606      	mov	r6, r0
	if (unlikely(lll->conn &&
   415ae:	2b00      	cmp	r3, #0
   415b0:	d16d      	bne.n	4168e <prepare_cb+0xea>
	radio_reset();
   415b2:	f001 fe2b 	bl	4320c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   415b6:	2000      	movs	r0, #0
   415b8:	f001 fe5c 	bl	43274 <radio_tx_power_set>
	radio_phy_set(0, 0);
   415bc:	2100      	movs	r1, #0
   415be:	4608      	mov	r0, r1
   415c0:	f001 fe48 	bl	43254 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   415c4:	2200      	movs	r2, #0
   415c6:	2125      	movs	r1, #37	; 0x25
   415c8:	2008      	movs	r0, #8
   415ca:	f001 fe8b 	bl	432e4 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   415ce:	4b35      	ldr	r3, [pc, #212]	; (416a4 <prepare_cb+0x100>)
   415d0:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   415d2:	a801      	add	r0, sp, #4
   415d4:	f001 fe6c 	bl	432b0 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   415d8:	4933      	ldr	r1, [pc, #204]	; (416a8 <prepare_cb+0x104>)
   415da:	f240 605b 	movw	r0, #1627	; 0x65b
   415de:	f001 ff11 	bl	43404 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   415e2:	7a23      	ldrb	r3, [r4, #8]
   415e4:	f3c3 0242 	ubfx	r2, r3, #1, #3
   415e8:	f362 1306 	bfi	r3, r2, #4, #3
   415ec:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   415ee:	4620      	mov	r0, r4
   415f0:	f7ff ff46 	bl	41480 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   415f4:	f7fe ffbe 	bl	40574 <ull_filter_lll_rl_enabled>
   415f8:	bb98      	cbnz	r0, 41662 <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   415fa:	7a63      	ldrb	r3, [r4, #9]
   415fc:	079b      	lsls	r3, r3, #30
   415fe:	d127      	bne.n	41650 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   41600:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   41602:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_event_offset_get(ull);
   41604:	4638      	mov	r0, r7
   41606:	f7ff fb0d 	bl	40c24 <lll_event_offset_get>
   4160a:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   4160c:	6872      	ldr	r2, [r6, #4]
   4160e:	f105 0109 	add.w	r1, r5, #9
   41612:	2001      	movs	r0, #1
   41614:	f002 f872 	bl	436fc <radio_tmr_start>
	radio_tmr_end_capture();
   41618:	f002 f97e 	bl	43918 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   4161c:	4620      	mov	r0, r4
   4161e:	f7f7 fd55 	bl	390cc <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   41622:	1c81      	adds	r1, r0, #2
   41624:	462a      	mov	r2, r5
   41626:	b2c9      	uxtb	r1, r1
   41628:	4638      	mov	r0, r7
   4162a:	f7ff fb09 	bl	40c40 <lll_preempt_calc>
   4162e:	b930      	cbnz	r0, 4163e <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   41630:	4620      	mov	r0, r4
   41632:	f7ff fa91 	bl	40b58 <lll_prepare_done>
		LL_ASSERT(!ret);
   41636:	b9d0      	cbnz	r0, 4166e <prepare_cb+0xca>
}
   41638:	2000      	movs	r0, #0
   4163a:	b003      	add	sp, #12
   4163c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   4163e:	4621      	mov	r1, r4
   41640:	481a      	ldr	r0, [pc, #104]	; (416ac <prepare_cb+0x108>)
   41642:	f001 fda1 	bl	43188 <radio_isr_set>
		radio_disable();
   41646:	f001 fe9b 	bl	43380 <radio_disable>
}
   4164a:	2000      	movs	r0, #0
   4164c:	b003      	add	sp, #12
   4164e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   41650:	2001      	movs	r0, #1
   41652:	f7fe f99b 	bl	3f98c <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   41656:	1c82      	adds	r2, r0, #2
   41658:	7841      	ldrb	r1, [r0, #1]
   4165a:	7800      	ldrb	r0, [r0, #0]
   4165c:	f001 fff4 	bl	43648 <radio_filter_configure>
   41660:	e7ce      	b.n	41600 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   41662:	7a60      	ldrb	r0, [r4, #9]
   41664:	f010 0003 	ands.w	r0, r0, #3
   41668:	bf18      	it	ne
   4166a:	2001      	movne	r0, #1
   4166c:	e7f1      	b.n	41652 <prepare_cb+0xae>
		LL_ASSERT(!ret);
   4166e:	f240 33d1 	movw	r3, #977	; 0x3d1
   41672:	4a0f      	ldr	r2, [pc, #60]	; (416b0 <prepare_cb+0x10c>)
   41674:	490f      	ldr	r1, [pc, #60]	; (416b4 <prepare_cb+0x110>)
   41676:	4810      	ldr	r0, [pc, #64]	; (416b8 <prepare_cb+0x114>)
   41678:	f008 fd30 	bl	4a0dc <printk>
   4167c:	4040      	eors	r0, r0
   4167e:	f380 8811 	msr	BASEPRI, r0
   41682:	f04f 0003 	mov.w	r0, #3
   41686:	df02      	svc	2
}
   41688:	2000      	movs	r0, #0
   4168a:	b003      	add	sp, #12
   4168c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   4168e:	f893 3020 	ldrb.w	r3, [r3, #32]
   41692:	079a      	lsls	r2, r3, #30
   41694:	d08d      	beq.n	415b2 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   41696:	4621      	mov	r1, r4
   41698:	4808      	ldr	r0, [pc, #32]	; (416bc <prepare_cb+0x118>)
   4169a:	f001 fd75 	bl	43188 <radio_isr_set>
		radio_disable();
   4169e:	f001 fe6f 	bl	43380 <radio_disable>
		return 0;
   416a2:	e7c9      	b.n	41638 <prepare_cb+0x94>
   416a4:	8e89bed6 	.word	0x8e89bed6
   416a8:	00555555 	.word	0x00555555
   416ac:	000410b9 	.word	0x000410b9
   416b0:	000538e0 	.word	0x000538e0
   416b4:	00052ed8 	.word	0x00052ed8
   416b8:	00052d50 	.word	0x00052d50
   416bc:	00040dad 	.word	0x00040dad

000416c0 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   416c0:	68c3      	ldr	r3, [r0, #12]
{
   416c2:	b570      	push	{r4, r5, r6, lr}
   416c4:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   416c6:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   416c8:	f7f4 f8fc 	bl	358c4 <ticker_ticks_now_get>
   416cc:	4605      	mov	r5, r0
   416ce:	4630      	mov	r0, r6
   416d0:	f7ff faa8 	bl	40c24 <lll_event_offset_get>
	p->remainder = 0;
   416d4:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   416d6:	1a28      	subs	r0, r5, r0
	p->remainder = 0;
   416d8:	e9c4 0300 	strd	r0, r3, [r4]
	p->lazy = 0;
   416dc:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   416de:	4620      	mov	r0, r4
}
   416e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   416e4:	f7ff bf5e 	b.w	415a4 <prepare_cb>

000416e8 <isr_done>:
{
   416e8:	b510      	push	{r4, lr}
   416ea:	4604      	mov	r4, r0
	lll_isr_status_reset();
   416ec:	f7ff fb10 	bl	40d10 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   416f0:	7a23      	ldrb	r3, [r4, #8]
   416f2:	f003 0271 	and.w	r2, r3, #113	; 0x71
   416f6:	2a01      	cmp	r2, #1
   416f8:	d105      	bne.n	41706 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   416fa:	f3c3 0242 	ubfx	r2, r3, #1, #3
   416fe:	f362 1306 	bfi	r3, r2, #4, #3
   41702:	7223      	strb	r3, [r4, #8]
   41704:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr &&
   41706:	f013 0f70 	tst.w	r3, #112	; 0x70
   4170a:	d005      	beq.n	41718 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   4170c:	6863      	ldr	r3, [r4, #4]
   4170e:	b153      	cbz	r3, 41726 <isr_done+0x3e>
   41710:	f893 3020 	ldrb.w	r3, [r3, #32]
   41714:	079b      	lsls	r3, r3, #30
   41716:	d506      	bpl.n	41726 <isr_done+0x3e>
	radio_filter_disable();
   41718:	f001 ffb2 	bl	43680 <radio_filter_disable>
	lll_isr_cleanup(param);
   4171c:	4620      	mov	r0, r4
}
   4171e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   41722:	f7ff bb03 	b.w	40d2c <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   41726:	4620      	mov	r0, r4
   41728:	f7ff feaa 	bl	41480 <chan_prepare>
		radio_tx_enable();
   4172c:	f001 fe22 	bl	43374 <radio_tx_enable>
}
   41730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   41734:	f002 b8f0 	b.w	43918 <radio_tmr_end_capture>

00041738 <lll_adv_prepare>:
{
   41738:	b510      	push	{r4, lr}
   4173a:	b082      	sub	sp, #8
   4173c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   4173e:	f7ff fc7b 	bl	41038 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   41742:	2800      	cmp	r0, #0
   41744:	db1a      	blt.n	4177c <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   41746:	9400      	str	r4, [sp, #0]
   41748:	2300      	movs	r3, #0
   4174a:	4a13      	ldr	r2, [pc, #76]	; (41798 <lll_adv_prepare+0x60>)
   4174c:	4913      	ldr	r1, [pc, #76]	; (4179c <lll_adv_prepare+0x64>)
   4174e:	4814      	ldr	r0, [pc, #80]	; (417a0 <lll_adv_prepare+0x68>)
   41750:	f7f7 f88c 	bl	3886c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   41754:	b108      	cbz	r0, 4175a <lll_adv_prepare+0x22>
   41756:	3077      	adds	r0, #119	; 0x77
   41758:	d101      	bne.n	4175e <lll_adv_prepare+0x26>
}
   4175a:	b002      	add	sp, #8
   4175c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   4175e:	f240 239d 	movw	r3, #669	; 0x29d
   41762:	4a10      	ldr	r2, [pc, #64]	; (417a4 <lll_adv_prepare+0x6c>)
   41764:	4910      	ldr	r1, [pc, #64]	; (417a8 <lll_adv_prepare+0x70>)
   41766:	4811      	ldr	r0, [pc, #68]	; (417ac <lll_adv_prepare+0x74>)
   41768:	f008 fcb8 	bl	4a0dc <printk>
   4176c:	4040      	eors	r0, r0
   4176e:	f380 8811 	msr	BASEPRI, r0
   41772:	f04f 0003 	mov.w	r0, #3
   41776:	df02      	svc	2
}
   41778:	b002      	add	sp, #8
   4177a:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   4177c:	f240 239a 	movw	r3, #666	; 0x29a
   41780:	4a08      	ldr	r2, [pc, #32]	; (417a4 <lll_adv_prepare+0x6c>)
   41782:	490b      	ldr	r1, [pc, #44]	; (417b0 <lll_adv_prepare+0x78>)
   41784:	4809      	ldr	r0, [pc, #36]	; (417ac <lll_adv_prepare+0x74>)
   41786:	f008 fca9 	bl	4a0dc <printk>
   4178a:	4040      	eors	r0, r0
   4178c:	f380 8811 	msr	BASEPRI, r0
   41790:	f04f 0003 	mov.w	r0, #3
   41794:	df02      	svc	2
   41796:	e7d6      	b.n	41746 <lll_adv_prepare+0xe>
   41798:	000415a5 	.word	0x000415a5
   4179c:	00041221 	.word	0x00041221
   417a0:	000411b1 	.word	0x000411b1
   417a4:	000538e0 	.word	0x000538e0
   417a8:	0005394c 	.word	0x0005394c
   417ac:	00052d50 	.word	0x00052d50
   417b0:	0005375c 	.word	0x0005375c

000417b4 <lll_adv_scan_req_check>:
{
   417b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   417b8:	460d      	mov	r5, r1
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   417ba:	7a41      	ldrb	r1, [r0, #9]
{
   417bc:	f89d 6018 	ldrb.w	r6, [sp, #24]
   417c0:	4617      	mov	r7, r2
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   417c2:	07ca      	lsls	r2, r1, #31
{
   417c4:	4698      	mov	r8, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   417c6:	d507      	bpl.n	417d8 <lll_adv_scan_req_check+0x24>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   417c8:	b1b6      	cbz	r6, 417f8 <lll_adv_scan_req_check+0x44>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   417ca:	782b      	ldrb	r3, [r5, #0]
   417cc:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   417d0:	d019      	beq.n	41806 <lll_adv_scan_req_check+0x52>
{
   417d2:	2000      	movs	r0, #0
}
   417d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						sr->scan_req.scan_addr,
   417d8:	4629      	mov	r1, r5
   417da:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   417dc:	f811 0b02 	ldrb.w	r0, [r1], #2
   417e0:	9a07      	ldr	r2, [sp, #28]
   417e2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   417e6:	f7fe fe67 	bl	404b8 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   417ea:	2800      	cmp	r0, #0
   417ec:	d1ed      	bne.n	417ca <lll_adv_scan_req_check+0x16>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   417ee:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   417f0:	07db      	lsls	r3, r3, #31
   417f2:	d5ee      	bpl.n	417d2 <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   417f4:	2e00      	cmp	r6, #0
   417f6:	d1e8      	bne.n	417ca <lll_adv_scan_req_check+0x16>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   417f8:	9b07      	ldr	r3, [sp, #28]
   417fa:	7818      	ldrb	r0, [r3, #0]
   417fc:	f7fe fdfc 	bl	403f8 <ull_filter_lll_irk_in_fal>
   41800:	2800      	cmp	r0, #0
   41802:	d1e2      	bne.n	417ca <lll_adv_scan_req_check+0x16>
   41804:	e7e5      	b.n	417d2 <lll_adv_scan_req_check+0x1e>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   41806:	f105 0108 	add.w	r1, r5, #8
   4180a:	4640      	mov	r0, r8
   4180c:	2206      	movs	r2, #6
   4180e:	f00a fd5d 	bl	4c2cc <memcmp>
	return (tx_addr == sr->rx_addr) &&
   41812:	fab0 f080 	clz	r0, r0
   41816:	0940      	lsrs	r0, r0, #5
}
   41818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004181c <lll_adv_connect_ind_check>:
{
   4181c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41820:	469a      	mov	sl, r3
	if (tgt_addr) {
   41822:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   41824:	f89d 9020 	ldrb.w	r9, [sp, #32]
   41828:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   4182c:	4606      	mov	r6, r0
   4182e:	460c      	mov	r4, r1
   41830:	4617      	mov	r7, r2
	if (tgt_addr) {
   41832:	b9fb      	cbnz	r3, 41874 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   41834:	7a42      	ldrb	r2, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41836:	0792      	lsls	r2, r2, #30
   41838:	d507      	bpl.n	4184a <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   4183a:	b1a5      	cbz	r5, 41866 <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   4183c:	7823      	ldrb	r3, [r4, #0]
   4183e:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   41842:	d03a      	beq.n	418ba <lll_adv_connect_ind_check+0x9e>
	return (rx_addr == ci->tx_addr) &&
   41844:	2000      	movs	r0, #0
}
   41846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   4184a:	f811 0b02 	ldrb.w	r0, [r1], #2
   4184e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   41850:	f3c0 1080 	ubfx	r0, r0, #6, #1
   41854:	f7fe fe30 	bl	404b8 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   41858:	2800      	cmp	r0, #0
   4185a:	d1ef      	bne.n	4183c <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   4185c:	7a73      	ldrb	r3, [r6, #9]
						rl_idx)) ||
   4185e:	079b      	lsls	r3, r3, #30
   41860:	d5f0      	bpl.n	41844 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   41862:	2d00      	cmp	r5, #0
   41864:	d1ea      	bne.n	4183c <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   41866:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   41868:	7818      	ldrb	r0, [r3, #0]
   4186a:	f7fe fdc5 	bl	403f8 <ull_filter_lll_irk_in_fal>
   4186e:	2800      	cmp	r0, #0
   41870:	d1e4      	bne.n	4183c <lll_adv_connect_ind_check+0x20>
   41872:	e7e7      	b.n	41844 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   41874:	4688      	mov	r8, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   41876:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   41878:	f818 0b02 	ldrb.w	r0, [r8], #2
   4187c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   41880:	4641      	mov	r1, r8
   41882:	f7fe fe19 	bl	404b8 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   41886:	2800      	cmp	r0, #0
   41888:	d0dc      	beq.n	41844 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   4188a:	7823      	ldrb	r3, [r4, #0]
   4188c:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   41890:	d1d8      	bne.n	41844 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   41892:	4650      	mov	r0, sl
   41894:	2206      	movs	r2, #6
   41896:	f104 0108 	add.w	r1, r4, #8
   4189a:	f00a fd17 	bl	4c2cc <memcmp>
	return (tx_addr == ci->rx_addr) &&
   4189e:	2800      	cmp	r0, #0
   418a0:	d1d0      	bne.n	41844 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   418a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   418a4:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   418a6:	28ff      	cmp	r0, #255	; 0xff
   418a8:	d011      	beq.n	418ce <lll_adv_connect_ind_check+0xb2>
   418aa:	7ab3      	ldrb	r3, [r6, #10]
   418ac:	2bff      	cmp	r3, #255	; 0xff
   418ae:	d00e      	beq.n	418ce <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   418b0:	1ac0      	subs	r0, r0, r3
   418b2:	fab0 f080 	clz	r0, r0
   418b6:	0940      	lsrs	r0, r0, #5
   418b8:	e7c5      	b.n	41846 <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   418ba:	f104 0108 	add.w	r1, r4, #8
   418be:	4650      	mov	r0, sl
   418c0:	2206      	movs	r2, #6
   418c2:	f00a fd03 	bl	4c2cc <memcmp>
	return (tx_addr == ci->rx_addr) &&
   418c6:	fab0 f080 	clz	r0, r0
   418ca:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   418cc:	e7bb      	b.n	41846 <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   418ce:	7823      	ldrb	r3, [r4, #0]
   418d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   418d4:	454b      	cmp	r3, r9
   418d6:	d1b5      	bne.n	41844 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   418d8:	4641      	mov	r1, r8
   418da:	9809      	ldr	r0, [sp, #36]	; 0x24
   418dc:	2206      	movs	r2, #6
   418de:	f00a fcf5 	bl	4c2cc <memcmp>
	return (rx_addr == ci->tx_addr) &&
   418e2:	fab0 f080 	clz	r0, r0
   418e6:	0940      	lsrs	r0, r0, #5
   418e8:	e7ad      	b.n	41846 <lll_adv_connect_ind_check+0x2a>
   418ea:	bf00      	nop

000418ec <isr_rx>:
{
   418ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   418f0:	b089      	sub	sp, #36	; 0x24
   418f2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   418f4:	f001 fd72 	bl	433dc <radio_is_done>
	if (trx_done) {
   418f8:	f010 0fff 	tst.w	r0, #255	; 0xff
   418fc:	d10a      	bne.n	41914 <isr_rx+0x28>
	lll_isr_status_reset();
   418fe:	f7ff fa07 	bl	40d10 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   41902:	4621      	mov	r1, r4
   41904:	487b      	ldr	r0, [pc, #492]	; (41af4 <isr_rx+0x208>)
   41906:	f001 fc3f 	bl	43188 <radio_isr_set>
	radio_disable();
   4190a:	f001 fd39 	bl	43380 <radio_disable>
}
   4190e:	b009      	add	sp, #36	; 0x24
   41910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = radio_crc_is_valid();
   41914:	f001 fd82 	bl	4341c <radio_crc_is_valid>
   41918:	4606      	mov	r6, r0
		devmatch_ok = radio_filter_has_match();
   4191a:	f001 fec3 	bl	436a4 <radio_filter_has_match>
   4191e:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   41920:	f001 feca 	bl	436b8 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   41924:	f002 f8ee 	bl	43b04 <radio_ar_has_match>
   41928:	4605      	mov	r5, r0
		irkmatch_id = radio_ar_match_get();
   4192a:	f002 f8cf 	bl	43acc <radio_ar_match_get>
   4192e:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   41930:	f001 fe80 	bl	43634 <radio_rssi_is_ready>
	lll_isr_status_reset();
   41934:	f7ff f9ec 	bl	40d10 <lll_isr_status_reset>
	if (crc_ok) {
   41938:	f016 0fff 	tst.w	r6, #255	; 0xff
   4193c:	d0e1      	beq.n	41902 <isr_rx+0x16>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   4193e:	f015 03ff 	ands.w	r3, r5, #255	; 0xff
   41942:	9305      	str	r3, [sp, #20]
   41944:	d17b      	bne.n	41a3e <isr_rx+0x152>
   41946:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   41948:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   4194a:	f88d 301f 	strb.w	r3, [sp, #31]
	node_rx = ull_pdu_rx_alloc_peek(1);
   4194e:	f7f6 faf9 	bl	37f44 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41952:	4606      	mov	r6, r0
   41954:	2800      	cmp	r0, #0
   41956:	f000 809f 	beq.w	41a98 <isr_rx+0x1ac>
   4195a:	7b23      	ldrb	r3, [r4, #12]
   4195c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   41960:	f106 0a1c 	add.w	sl, r6, #28
   41964:	691b      	ldr	r3, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   41966:	4699      	mov	r9, r3
		devmatch_ok = radio_filter_has_match();
   41968:	b2ff      	uxtb	r7, r7
	tx_addr = pdu_adv->tx_addr;
   4196a:	f819 5b02 	ldrb.w	r5, [r9], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   4196e:	f005 020f 	and.w	r2, r5, #15
   41972:	2a01      	cmp	r2, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   41974:	bf08      	it	eq
   41976:	f103 0808 	addeq.w	r8, r3, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   4197a:	7f33      	ldrb	r3, [r6, #28]
   4197c:	f003 030f 	and.w	r3, r3, #15
		tgt_addr = NULL;
   41980:	bf18      	it	ne
   41982:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   41986:	2b03      	cmp	r3, #3
	tx_addr = pdu_adv->tx_addr;
   41988:	f3c5 1b80 	ubfx	fp, r5, #6, #1
	rx_addr = pdu_adv->rx_addr;
   4198c:	ea4f 15d5 	mov.w	r5, r5, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   41990:	d05d      	beq.n	41a4e <isr_rx+0x162>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   41992:	2b05      	cmp	r3, #5
   41994:	d1b5      	bne.n	41902 <isr_rx+0x16>
   41996:	7f73      	ldrb	r3, [r6, #29]
   41998:	2b22      	cmp	r3, #34	; 0x22
   4199a:	d1b2      	bne.n	41902 <isr_rx+0x16>
		   lll->conn && !lll->conn->periph.cancelled &&
   4199c:	6863      	ldr	r3, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   4199e:	2b00      	cmp	r3, #0
   419a0:	d0af      	beq.n	41902 <isr_rx+0x16>
		   lll->conn && !lll->conn->periph.cancelled &&
   419a2:	f893 3020 	ldrb.w	r3, [r3, #32]
   419a6:	079b      	lsls	r3, r3, #30
   419a8:	d4ab      	bmi.n	41902 <isr_rx+0x16>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   419aa:	f10d 001f 	add.w	r0, sp, #31
   419ae:	9003      	str	r0, [sp, #12]
   419b0:	e9cd 8701 	strd	r8, r7, [sp, #4]
   419b4:	9500      	str	r5, [sp, #0]
   419b6:	464b      	mov	r3, r9
   419b8:	465a      	mov	r2, fp
   419ba:	4651      	mov	r1, sl
   419bc:	4620      	mov	r0, r4
   419be:	f7ff ff2d 	bl	4181c <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   419c2:	2800      	cmp	r0, #0
   419c4:	d09d      	beq.n	41902 <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   419c6:	2004      	movs	r0, #4
   419c8:	f7f6 fabc 	bl	37f44 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   419cc:	2800      	cmp	r0, #0
   419ce:	d098      	beq.n	41902 <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   419d0:	4621      	mov	r1, r4
   419d2:	4849      	ldr	r0, [pc, #292]	; (41af8 <isr_rx+0x20c>)
   419d4:	f001 fbd8 	bl	43188 <radio_isr_set>
		radio_disable();
   419d8:	f001 fcd2 	bl	43380 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   419dc:	f001 fcf4 	bl	433c8 <radio_is_ready>
   419e0:	2800      	cmp	r0, #0
   419e2:	d14b      	bne.n	41a7c <isr_rx+0x190>
		lll->conn->periph.initiated = 1;
   419e4:	6862      	ldr	r2, [r4, #4]
   419e6:	f892 3020 	ldrb.w	r3, [r2, #32]
   419ea:	f043 0301 	orr.w	r3, r3, #1
   419ee:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   419f2:	f7f6 fac7 	bl	37f84 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   419f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   419fa:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   419fc:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   419fe:	7102      	strb	r2, [r0, #4]
		ftr->param = lll;
   41a00:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   41a02:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   41a04:	f001 ff34 	bl	43870 <radio_tmr_start_get>
   41a08:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   41a0a:	f001 ff8d 	bl	43928 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   41a0e:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   41a10:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   41a12:	4608      	mov	r0, r1
   41a14:	f001 fca2 	bl	4335c <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   41a18:	9b05      	ldr	r3, [sp, #20]
		ftr->radio_end_us = radio_tmr_end_get() -
   41a1a:	1a20      	subs	r0, r4, r0
   41a1c:	6168      	str	r0, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   41a1e:	b1a3      	cbz	r3, 41a4a <isr_rx+0x15e>
   41a20:	f89d 301f 	ldrb.w	r3, [sp, #31]
   41a24:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   41a26:	f7f6 faad 	bl	37f84 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   41a2a:	4629      	mov	r1, r5
			ftr->extra = ull_pdu_rx_alloc();
   41a2c:	60e8      	str	r0, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   41a2e:	6828      	ldr	r0, [r5, #0]
   41a30:	f7f6 fac0 	bl	37fb4 <ull_rx_put>
		ull_rx_sched();
   41a34:	f7f6 face 	bl	37fd4 <ull_rx_sched>
}
   41a38:	b009      	add	sp, #36	; 0x24
   41a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   41a3e:	fa5f f088 	uxtb.w	r0, r8
   41a42:	f7fe fc87 	bl	40354 <ull_filter_lll_rl_irk_idx>
   41a46:	4603      	mov	r3, r0
   41a48:	e77e      	b.n	41948 <isr_rx+0x5c>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   41a4a:	23ff      	movs	r3, #255	; 0xff
   41a4c:	e7ea      	b.n	41a24 <isr_rx+0x138>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   41a4e:	7f73      	ldrb	r3, [r6, #29]
   41a50:	2b0c      	cmp	r3, #12
   41a52:	f47f af56 	bne.w	41902 <isr_rx+0x16>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   41a56:	f1b8 0f00 	cmp.w	r8, #0
   41a5a:	f47f af52 	bne.w	41902 <isr_rx+0x16>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   41a5e:	f10d 031f 	add.w	r3, sp, #31
   41a62:	e9cd 7300 	strd	r7, r3, [sp]
   41a66:	465a      	mov	r2, fp
   41a68:	464b      	mov	r3, r9
   41a6a:	4651      	mov	r1, sl
   41a6c:	4620      	mov	r0, r4
   41a6e:	f7ff fea1 	bl	417b4 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   41a72:	b9f8      	cbnz	r0, 41ab4 <isr_rx+0x1c8>
   41a74:	7f33      	ldrb	r3, [r6, #28]
   41a76:	f003 030f 	and.w	r3, r3, #15
   41a7a:	e78a      	b.n	41992 <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   41a7c:	f240 53da 	movw	r3, #1498	; 0x5da
   41a80:	4a1e      	ldr	r2, [pc, #120]	; (41afc <isr_rx+0x210>)
   41a82:	491f      	ldr	r1, [pc, #124]	; (41b00 <isr_rx+0x214>)
   41a84:	481f      	ldr	r0, [pc, #124]	; (41b04 <isr_rx+0x218>)
   41a86:	f008 fb29 	bl	4a0dc <printk>
   41a8a:	4040      	eors	r0, r0
   41a8c:	f380 8811 	msr	BASEPRI, r0
   41a90:	f04f 0003 	mov.w	r0, #3
   41a94:	df02      	svc	2
   41a96:	e7a5      	b.n	419e4 <isr_rx+0xf8>
	LL_ASSERT(node_rx);
   41a98:	f240 537a 	movw	r3, #1402	; 0x57a
   41a9c:	4a17      	ldr	r2, [pc, #92]	; (41afc <isr_rx+0x210>)
   41a9e:	491a      	ldr	r1, [pc, #104]	; (41b08 <isr_rx+0x21c>)
   41aa0:	4818      	ldr	r0, [pc, #96]	; (41b04 <isr_rx+0x218>)
   41aa2:	f008 fb1b 	bl	4a0dc <printk>
   41aa6:	4040      	eors	r0, r0
   41aa8:	f380 8811 	msr	BASEPRI, r0
   41aac:	f04f 0003 	mov.w	r0, #3
   41ab0:	df02      	svc	2
   41ab2:	e752      	b.n	4195a <isr_rx+0x6e>
		radio_isr_set(isr_done, lll);
   41ab4:	4621      	mov	r1, r4
   41ab6:	480f      	ldr	r0, [pc, #60]	; (41af4 <isr_rx+0x208>)
   41ab8:	f001 fb66 	bl	43188 <radio_isr_set>
		radio_switch_complete_and_disable();
   41abc:	f001 fd92 	bl	435e4 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   41ac0:	7e23      	ldrb	r3, [r4, #24]
   41ac2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   41ac6:	69e0      	ldr	r0, [r4, #28]
   41ac8:	f001 fc38 	bl	4333c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   41acc:	f001 fc7c 	bl	433c8 <radio_is_ready>
   41ad0:	2800      	cmp	r0, #0
   41ad2:	f43f af1c 	beq.w	4190e <isr_rx+0x22>
   41ad6:	f240 5393 	movw	r3, #1427	; 0x593
   41ada:	4a08      	ldr	r2, [pc, #32]	; (41afc <isr_rx+0x210>)
   41adc:	4908      	ldr	r1, [pc, #32]	; (41b00 <isr_rx+0x214>)
   41ade:	4809      	ldr	r0, [pc, #36]	; (41b04 <isr_rx+0x218>)
   41ae0:	f008 fafc 	bl	4a0dc <printk>
   41ae4:	4040      	eors	r0, r0
   41ae6:	f380 8811 	msr	BASEPRI, r0
   41aea:	f04f 0003 	mov.w	r0, #3
   41aee:	df02      	svc	2
		if (!err) {
   41af0:	e70d      	b.n	4190e <isr_rx+0x22>
   41af2:	bf00      	nop
   41af4:	000416e9 	.word	0x000416e9
   41af8:	000410b9 	.word	0x000410b9
   41afc:	000538e0 	.word	0x000538e0
   41b00:	00053934 	.word	0x00053934
   41b04:	00052d50 	.word	0x00052d50
   41b08:	0005392c 	.word	0x0005392c

00041b0c <common_prepare_cb>:
{
   41b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   41b10:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   41b12:	f994 3016 	ldrsb.w	r3, [r4, #22]
   41b16:	2b00      	cmp	r3, #0
{
   41b18:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   41b1a:	f2c0 8110 	blt.w	41d3e <common_prepare_cb+0x232>
   41b1e:	6863      	ldr	r3, [r4, #4]
   41b20:	4606      	mov	r6, r0
   41b22:	4688      	mov	r8, r1
   41b24:	2b00      	cmp	r3, #0
   41b26:	f040 80ff 	bne.w	41d28 <common_prepare_cb+0x21c>
	lll->state = 0U;
   41b2a:	7da3      	ldrb	r3, [r4, #22]
   41b2c:	f36f 0300 	bfc	r3, #0, #1
   41b30:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   41b32:	f001 fb6b 	bl	4320c <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   41b36:	2000      	movs	r0, #0
   41b38:	f001 fb9c 	bl	43274 <radio_tx_power_set>
	radio_phy_set(0, 0);
   41b3c:	2100      	movs	r1, #0
   41b3e:	4608      	mov	r0, r1
   41b40:	f001 fb88 	bl	43254 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   41b44:	2200      	movs	r2, #0
   41b46:	2125      	movs	r1, #37	; 0x25
   41b48:	2008      	movs	r0, #8
   41b4a:	f001 fbcb 	bl	432e4 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   41b4e:	2001      	movs	r0, #1
   41b50:	f7f6 f9f8 	bl	37f44 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41b54:	4605      	mov	r5, r0
   41b56:	2800      	cmp	r0, #0
   41b58:	f000 80d8 	beq.w	41d0c <common_prepare_cb+0x200>
	radio_pkt_rx_set(node_rx->pdu);
   41b5c:	f105 001c 	add.w	r0, r5, #28
   41b60:	f001 fbe6 	bl	43330 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   41b64:	4b7b      	ldr	r3, [pc, #492]	; (41d54 <common_prepare_cb+0x248>)
   41b66:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   41b68:	a80b      	add	r0, sp, #44	; 0x2c
   41b6a:	f001 fba1 	bl	432b0 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   41b6e:	497a      	ldr	r1, [pc, #488]	; (41d58 <common_prepare_cb+0x24c>)
   41b70:	f240 605b 	movw	r0, #1627	; 0x65b
   41b74:	f001 fc46 	bl	43404 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   41b78:	7da0      	ldrb	r0, [r4, #22]
   41b7a:	f3c0 0041 	ubfx	r0, r0, #1, #2
   41b7e:	3025      	adds	r0, #37	; 0x25
   41b80:	f7ff f86e 	bl	40c60 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   41b84:	4621      	mov	r1, r4
   41b86:	4875      	ldr	r0, [pc, #468]	; (41d5c <common_prepare_cb+0x250>)
   41b88:	f001 fafe 	bl	43188 <radio_isr_set>
	} else if (lll->type ||
   41b8c:	7da3      	ldrb	r3, [r4, #22]
   41b8e:	069b      	lsls	r3, r3, #26
   41b90:	d403      	bmi.n	41b9a <common_prepare_cb+0x8e>
		   lll->conn) {
   41b92:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   41b94:	2b00      	cmp	r3, #0
   41b96:	f000 8093 	beq.w	41cc0 <common_prepare_cb+0x1b4>
		radio_tmr_tifs_set(EVENT_IFS_US);
   41b9a:	2096      	movs	r0, #150	; 0x96
   41b9c:	f001 fda2 	bl	436e4 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   41ba0:	2300      	movs	r3, #0
   41ba2:	461a      	mov	r2, r3
   41ba4:	4619      	mov	r1, r3
   41ba6:	4618      	mov	r0, r3
   41ba8:	f001 fd08 	bl	435bc <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   41bac:	f7fe fce2 	bl	40574 <ull_filter_lll_rl_enabled>
   41bb0:	2800      	cmp	r0, #0
   41bb2:	d137      	bne.n	41c24 <common_prepare_cb+0x118>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   41bb4:	7da3      	ldrb	r3, [r4, #22]
   41bb6:	f013 0f18 	tst.w	r3, #24
   41bba:	d154      	bne.n	41c66 <common_prepare_cb+0x15a>
	ull = HDR_LLL2ULL(lll);
   41bbc:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   41bbe:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_event_offset_get(ull);
   41bc0:	4638      	mov	r0, r7
   41bc2:	f7ff f82f 	bl	40c24 <lll_event_offset_get>
   41bc6:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   41bc8:	f105 0109 	add.w	r1, r5, #9
   41bcc:	6872      	ldr	r2, [r6, #4]
   41bce:	2000      	movs	r0, #0
   41bd0:	f001 fd94 	bl	436fc <radio_tmr_start>
	radio_tmr_end_capture();
   41bd4:	f001 fea0 	bl	43918 <radio_tmr_end_capture>
	radio_rssi_measure();
   41bd8:	f001 fd14 	bl	43604 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   41bdc:	4620      	mov	r0, r4
   41bde:	f7f7 fc91 	bl	39504 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   41be2:	1d01      	adds	r1, r0, #4
   41be4:	b2c9      	uxtb	r1, r1
   41be6:	4638      	mov	r0, r7
   41be8:	462a      	mov	r2, r5
   41bea:	f7ff f829 	bl	40c40 <lll_preempt_calc>
   41bee:	bb80      	cbnz	r0, 41c52 <common_prepare_cb+0x146>
		if (!is_resume && lll->ticks_window) {
   41bf0:	f1b8 0f00 	cmp.w	r8, #0
   41bf4:	d102      	bne.n	41bfc <common_prepare_cb+0xf0>
   41bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   41bf8:	2b00      	cmp	r3, #0
   41bfa:	d164      	bne.n	41cc6 <common_prepare_cb+0x1ba>
		if (lll->conn) {
   41bfc:	6863      	ldr	r3, [r4, #4]
   41bfe:	b14b      	cbz	r3, 41c14 <common_prepare_cb+0x108>
			mfy_after_mstr_offset_get.param = p;
   41c00:	4857      	ldr	r0, [pc, #348]	; (41d60 <common_prepare_cb+0x254>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   41c02:	2201      	movs	r2, #1
   41c04:	4603      	mov	r3, r0
			mfy_after_mstr_offset_get.param = p;
   41c06:	6086      	str	r6, [r0, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   41c08:	2102      	movs	r1, #2
   41c0a:	2000      	movs	r0, #0
   41c0c:	f7f2 f9f4 	bl	33ff8 <mayfly_enqueue>
			LL_ASSERT(!retval);
   41c10:	2800      	cmp	r0, #0
   41c12:	d142      	bne.n	41c9a <common_prepare_cb+0x18e>
		ret = lll_prepare_done(lll);
   41c14:	4620      	mov	r0, r4
   41c16:	f7fe ff9f 	bl	40b58 <lll_prepare_done>
		LL_ASSERT(!ret);
   41c1a:	bb68      	cbnz	r0, 41c78 <common_prepare_cb+0x16c>
}
   41c1c:	2000      	movs	r0, #0
   41c1e:	b00c      	add	sp, #48	; 0x30
   41c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   41c24:	7da0      	ldrb	r0, [r4, #22]
   41c26:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   41c2a:	f7fd feaf 	bl	3f98c <ull_filter_lll_get>
   41c2e:	4605      	mov	r5, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41c30:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   41c34:	f7fe fb1e 	bl	40274 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   41c38:	1caa      	adds	r2, r5, #2
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41c3a:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   41c3c:	7869      	ldrb	r1, [r5, #1]
   41c3e:	7828      	ldrb	r0, [r5, #0]
   41c40:	f001 fd02 	bl	43648 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   41c44:	4639      	mov	r1, r7
   41c46:	2200      	movs	r2, #0
   41c48:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   41c4c:	f001 ff0c 	bl	43a68 <radio_ar_configure>
   41c50:	e7b4      	b.n	41bbc <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   41c52:	4621      	mov	r1, r4
   41c54:	4843      	ldr	r0, [pc, #268]	; (41d64 <common_prepare_cb+0x258>)
   41c56:	f001 fa97 	bl	43188 <radio_isr_set>
		radio_disable();
   41c5a:	f001 fb91 	bl	43380 <radio_disable>
}
   41c5e:	2000      	movs	r0, #0
   41c60:	b00c      	add	sp, #48	; 0x30
   41c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   41c66:	2001      	movs	r0, #1
   41c68:	f7fd fe90 	bl	3f98c <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   41c6c:	1c82      	adds	r2, r0, #2
   41c6e:	7841      	ldrb	r1, [r0, #1]
   41c70:	7800      	ldrb	r0, [r0, #0]
   41c72:	f001 fce9 	bl	43648 <radio_filter_configure>
   41c76:	e7a1      	b.n	41bbc <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   41c78:	f44f 7305 	mov.w	r3, #532	; 0x214
   41c7c:	4a3a      	ldr	r2, [pc, #232]	; (41d68 <common_prepare_cb+0x25c>)
   41c7e:	493b      	ldr	r1, [pc, #236]	; (41d6c <common_prepare_cb+0x260>)
   41c80:	483b      	ldr	r0, [pc, #236]	; (41d70 <common_prepare_cb+0x264>)
   41c82:	f008 fa2b 	bl	4a0dc <printk>
   41c86:	4040      	eors	r0, r0
   41c88:	f380 8811 	msr	BASEPRI, r0
   41c8c:	f04f 0003 	mov.w	r0, #3
   41c90:	df02      	svc	2
}
   41c92:	2000      	movs	r0, #0
   41c94:	b00c      	add	sp, #48	; 0x30
   41c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   41c9a:	f240 230f 	movw	r3, #527	; 0x20f
   41c9e:	4a32      	ldr	r2, [pc, #200]	; (41d68 <common_prepare_cb+0x25c>)
   41ca0:	4934      	ldr	r1, [pc, #208]	; (41d74 <common_prepare_cb+0x268>)
   41ca2:	4833      	ldr	r0, [pc, #204]	; (41d70 <common_prepare_cb+0x264>)
   41ca4:	f008 fa1a 	bl	4a0dc <printk>
   41ca8:	4040      	eors	r0, r0
   41caa:	f380 8811 	msr	BASEPRI, r0
   41cae:	f04f 0003 	mov.w	r0, #3
   41cb2:	df02      	svc	2
		ret = lll_prepare_done(lll);
   41cb4:	4620      	mov	r0, r4
   41cb6:	f7fe ff4f 	bl	40b58 <lll_prepare_done>
		LL_ASSERT(!ret);
   41cba:	2800      	cmp	r0, #0
   41cbc:	d0ae      	beq.n	41c1c <common_prepare_cb+0x110>
   41cbe:	e7db      	b.n	41c78 <common_prepare_cb+0x16c>
		radio_switch_complete_and_disable();
   41cc0:	f001 fc90 	bl	435e4 <radio_switch_complete_and_disable>
   41cc4:	e772      	b.n	41bac <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   41cc6:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   41cca:	9300      	str	r3, [sp, #0]
   41ccc:	9208      	str	r2, [sp, #32]
   41cce:	4b2a      	ldr	r3, [pc, #168]	; (41d78 <common_prepare_cb+0x26c>)
   41cd0:	4a2a      	ldr	r2, [pc, #168]	; (41d7c <common_prepare_cb+0x270>)
   41cd2:	9307      	str	r3, [sp, #28]
   41cd4:	9205      	str	r2, [sp, #20]
   41cd6:	462b      	mov	r3, r5
   41cd8:	9406      	str	r4, [sp, #24]
   41cda:	e9cd 8803 	strd	r8, r8, [sp, #12]
   41cde:	e9cd 8801 	strd	r8, r8, [sp, #4]
   41ce2:	4641      	mov	r1, r8
   41ce4:	2203      	movs	r2, #3
   41ce6:	f7f3 fcbb 	bl	35660 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   41cea:	f030 0302 	bics.w	r3, r0, #2
   41cee:	d085      	beq.n	41bfc <common_prepare_cb+0xf0>
   41cf0:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   41cf4:	4a1c      	ldr	r2, [pc, #112]	; (41d68 <common_prepare_cb+0x25c>)
   41cf6:	4922      	ldr	r1, [pc, #136]	; (41d80 <common_prepare_cb+0x274>)
   41cf8:	481d      	ldr	r0, [pc, #116]	; (41d70 <common_prepare_cb+0x264>)
   41cfa:	f008 f9ef 	bl	4a0dc <printk>
   41cfe:	4040      	eors	r0, r0
   41d00:	f380 8811 	msr	BASEPRI, r0
   41d04:	f04f 0003 	mov.w	r0, #3
   41d08:	df02      	svc	2
   41d0a:	e777      	b.n	41bfc <common_prepare_cb+0xf0>
	LL_ASSERT(node_rx);
   41d0c:	f240 138d 	movw	r3, #397	; 0x18d
   41d10:	4a15      	ldr	r2, [pc, #84]	; (41d68 <common_prepare_cb+0x25c>)
   41d12:	491c      	ldr	r1, [pc, #112]	; (41d84 <common_prepare_cb+0x278>)
   41d14:	4816      	ldr	r0, [pc, #88]	; (41d70 <common_prepare_cb+0x264>)
   41d16:	f008 f9e1 	bl	4a0dc <printk>
   41d1a:	4040      	eors	r0, r0
   41d1c:	f380 8811 	msr	BASEPRI, r0
   41d20:	f04f 0003 	mov.w	r0, #3
   41d24:	df02      	svc	2
   41d26:	e719      	b.n	41b5c <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   41d28:	6863      	ldr	r3, [r4, #4]
   41d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
   41d2e:	07d9      	lsls	r1, r3, #31
   41d30:	d405      	bmi.n	41d3e <common_prepare_cb+0x232>
   41d32:	6863      	ldr	r3, [r4, #4]
   41d34:	f893 3020 	ldrb.w	r3, [r3, #32]
   41d38:	079a      	lsls	r2, r3, #30
   41d3a:	f57f aef6 	bpl.w	41b2a <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   41d3e:	4621      	mov	r1, r4
   41d40:	4811      	ldr	r0, [pc, #68]	; (41d88 <common_prepare_cb+0x27c>)
   41d42:	f001 fa21 	bl	43188 <radio_isr_set>
		radio_disable();
   41d46:	f001 fb1b 	bl	43380 <radio_disable>
}
   41d4a:	2000      	movs	r0, #0
   41d4c:	b00c      	add	sp, #48	; 0x30
   41d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41d52:	bf00      	nop
   41d54:	8e89bed6 	.word	0x8e89bed6
   41d58:	00555555 	.word	0x00555555
   41d5c:	000288a1 	.word	0x000288a1
   41d60:	20000b4c 	.word	0x20000b4c
   41d64:	00041e31 	.word	0x00041e31
   41d68:	00053960 	.word	0x00053960
   41d6c:	00052ed8 	.word	0x00052ed8
   41d70:	00052d50 	.word	0x00052d50
   41d74:	00052ee0 	.word	0x00052ee0
   41d78:	00041f51 	.word	0x00041f51
   41d7c:	00041ff9 	.word	0x00041ff9
   41d80:	00053180 	.word	0x00053180
   41d84:	0005392c 	.word	0x0005392c
   41d88:	00040dad 	.word	0x00040dad

00041d8c <prepare_cb>:
	return common_prepare_cb(p, false);
   41d8c:	2100      	movs	r1, #0
   41d8e:	f7ff bebd 	b.w	41b0c <common_prepare_cb>
   41d92:	bf00      	nop

00041d94 <isr_common_done>:
{
   41d94:	b530      	push	{r4, r5, lr}
   41d96:	4604      	mov	r4, r0
   41d98:	b083      	sub	sp, #12
	lll_isr_status_reset();
   41d9a:	f7fe ffb9 	bl	40d10 <lll_isr_status_reset>
	lll->state = 0U;
   41d9e:	7da3      	ldrb	r3, [r4, #22]
   41da0:	f36f 0300 	bfc	r3, #0, #1
   41da4:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   41da6:	069b      	lsls	r3, r3, #26
   41da8:	d401      	bmi.n	41dae <isr_common_done+0x1a>
		   lll->conn) {
   41daa:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   41dac:	b3ab      	cbz	r3, 41e1a <isr_common_done+0x86>
		radio_tmr_tifs_set(EVENT_IFS_US);
   41dae:	2096      	movs	r0, #150	; 0x96
   41db0:	f001 fc98 	bl	436e4 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   41db4:	2300      	movs	r3, #0
   41db6:	461a      	mov	r2, r3
   41db8:	4619      	mov	r1, r3
   41dba:	4618      	mov	r0, r3
   41dbc:	f001 fbfe 	bl	435bc <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   41dc0:	2001      	movs	r0, #1
   41dc2:	f7f6 f8bf 	bl	37f44 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41dc6:	4605      	mov	r5, r0
   41dc8:	b1c8      	cbz	r0, 41dfe <isr_common_done+0x6a>
	radio_pkt_rx_set(node_rx->pdu);
   41dca:	f105 001c 	add.w	r0, r5, #28
   41dce:	f001 faaf 	bl	43330 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   41dd2:	f7fe fbcf 	bl	40574 <ull_filter_lll_rl_enabled>
   41dd6:	b938      	cbnz	r0, 41de8 <isr_common_done+0x54>
	radio_rssi_measure();
   41dd8:	f001 fc14 	bl	43604 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   41ddc:	4621      	mov	r1, r4
   41dde:	4810      	ldr	r0, [pc, #64]	; (41e20 <isr_common_done+0x8c>)
   41de0:	f001 f9d2 	bl	43188 <radio_isr_set>
}
   41de4:	b003      	add	sp, #12
   41de6:	bd30      	pop	{r4, r5, pc}
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41de8:	f10d 0007 	add.w	r0, sp, #7
   41dec:	f7fe fa42 	bl	40274 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   41df0:	2200      	movs	r2, #0
   41df2:	4601      	mov	r1, r0
   41df4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   41df8:	f001 fe36 	bl	43a68 <radio_ar_configure>
   41dfc:	e7ec      	b.n	41dd8 <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   41dfe:	f44f 7352 	mov.w	r3, #840	; 0x348
   41e02:	4a08      	ldr	r2, [pc, #32]	; (41e24 <isr_common_done+0x90>)
   41e04:	4908      	ldr	r1, [pc, #32]	; (41e28 <isr_common_done+0x94>)
   41e06:	4809      	ldr	r0, [pc, #36]	; (41e2c <isr_common_done+0x98>)
   41e08:	f008 f968 	bl	4a0dc <printk>
   41e0c:	4040      	eors	r0, r0
   41e0e:	f380 8811 	msr	BASEPRI, r0
   41e12:	f04f 0003 	mov.w	r0, #3
   41e16:	df02      	svc	2
   41e18:	e7d7      	b.n	41dca <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   41e1a:	f001 fbe3 	bl	435e4 <radio_switch_complete_and_disable>
   41e1e:	e7cf      	b.n	41dc0 <isr_common_done+0x2c>
   41e20:	000288a1 	.word	0x000288a1
   41e24:	00053960 	.word	0x00053960
   41e28:	0005392c 	.word	0x0005392c
   41e2c:	00052d50 	.word	0x00052d50

00041e30 <isr_abort>:
{
   41e30:	b510      	push	{r4, lr}
   41e32:	4604      	mov	r4, r0
	lll_isr_status_reset();
   41e34:	f7fe ff6c 	bl	40d10 <lll_isr_status_reset>
	radio_filter_disable();
   41e38:	f001 fc22 	bl	43680 <radio_filter_disable>
	lll_isr_cleanup(param);
   41e3c:	4620      	mov	r0, r4
}
   41e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   41e42:	f7fe bf73 	b.w	40d2c <lll_isr_cleanup>
   41e46:	bf00      	nop

00041e48 <isr_done>:
{
   41e48:	b508      	push	{r3, lr}
	isr_common_done(param);
   41e4a:	f7ff ffa3 	bl	41d94 <isr_common_done>
	radio_rx_enable();
   41e4e:	f001 fa8b 	bl	43368 <radio_rx_enable>
}
   41e52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   41e56:	f001 bd5f 	b.w	43918 <radio_tmr_end_capture>
   41e5a:	bf00      	nop

00041e5c <isr_tx>:
{
   41e5c:	b570      	push	{r4, r5, r6, lr}
   41e5e:	b082      	sub	sp, #8
   41e60:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   41e62:	f7fe ff43 	bl	40cec <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   41e66:	f001 fbbd 	bl	435e4 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   41e6a:	2001      	movs	r0, #1
   41e6c:	f7f6 f86a 	bl	37f44 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   41e70:	4604      	mov	r4, r0
   41e72:	2800      	cmp	r0, #0
   41e74:	d03e      	beq.n	41ef4 <isr_tx+0x98>
	radio_pkt_rx_set(node_rx->pdu);
   41e76:	f104 001c 	add.w	r0, r4, #28
   41e7a:	f001 fa59 	bl	43330 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   41e7e:	f001 faa3 	bl	433c8 <radio_is_ready>
   41e82:	b9d8      	cbnz	r0, 41ebc <isr_tx+0x60>
	if (ull_filter_lll_rl_enabled()) {
   41e84:	f7fe fb76 	bl	40574 <ull_filter_lll_rl_enabled>
   41e88:	bb48      	cbnz	r0, 41ede <isr_tx+0x82>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   41e8a:	f001 fd53 	bl	43934 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   41e8e:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   41e90:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   41e92:	4608      	mov	r0, r1
   41e94:	f001 fa62 	bl	4335c <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   41e98:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   41e9a:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   41e9c:	4608      	mov	r0, r1
   41e9e:	f001 fa59 	bl	43354 <radio_tx_chain_delay_get>
   41ea2:	4434      	add	r4, r6
   41ea4:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   41ea6:	1a20      	subs	r0, r4, r0
   41ea8:	f001 fcfc 	bl	438a4 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   41eac:	f001 fbaa 	bl	43604 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   41eb0:	4629      	mov	r1, r5
   41eb2:	4817      	ldr	r0, [pc, #92]	; (41f10 <isr_tx+0xb4>)
   41eb4:	f001 f968 	bl	43188 <radio_isr_set>
}
   41eb8:	b002      	add	sp, #8
   41eba:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!radio_is_ready());
   41ebc:	f240 3306 	movw	r3, #774	; 0x306
   41ec0:	4a14      	ldr	r2, [pc, #80]	; (41f14 <isr_tx+0xb8>)
   41ec2:	4915      	ldr	r1, [pc, #84]	; (41f18 <isr_tx+0xbc>)
   41ec4:	4815      	ldr	r0, [pc, #84]	; (41f1c <isr_tx+0xc0>)
   41ec6:	f008 f909 	bl	4a0dc <printk>
   41eca:	4040      	eors	r0, r0
   41ecc:	f380 8811 	msr	BASEPRI, r0
   41ed0:	f04f 0003 	mov.w	r0, #3
   41ed4:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   41ed6:	f7fe fb4d 	bl	40574 <ull_filter_lll_rl_enabled>
   41eda:	2800      	cmp	r0, #0
   41edc:	d0d5      	beq.n	41e8a <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   41ede:	f10d 0007 	add.w	r0, sp, #7
   41ee2:	f7fe f9c7 	bl	40274 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   41ee6:	2200      	movs	r2, #0
   41ee8:	4601      	mov	r1, r0
   41eea:	f89d 0007 	ldrb.w	r0, [sp, #7]
   41eee:	f001 fdbb 	bl	43a68 <radio_ar_configure>
   41ef2:	e7ca      	b.n	41e8a <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   41ef4:	f240 3302 	movw	r3, #770	; 0x302
   41ef8:	4a06      	ldr	r2, [pc, #24]	; (41f14 <isr_tx+0xb8>)
   41efa:	4909      	ldr	r1, [pc, #36]	; (41f20 <isr_tx+0xc4>)
   41efc:	4807      	ldr	r0, [pc, #28]	; (41f1c <isr_tx+0xc0>)
   41efe:	f008 f8ed 	bl	4a0dc <printk>
   41f02:	4040      	eors	r0, r0
   41f04:	f380 8811 	msr	BASEPRI, r0
   41f08:	f04f 0003 	mov.w	r0, #3
   41f0c:	df02      	svc	2
   41f0e:	e7b2      	b.n	41e76 <isr_tx+0x1a>
   41f10:	000288a1 	.word	0x000288a1
   41f14:	00053960 	.word	0x00053960
   41f18:	00053934 	.word	0x00053934
   41f1c:	00052d50 	.word	0x00052d50
   41f20:	0005392c 	.word	0x0005392c

00041f24 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   41f24:	68c3      	ldr	r3, [r0, #12]
{
   41f26:	b570      	push	{r4, r5, r6, lr}
   41f28:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   41f2a:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   41f2c:	f7f3 fcca 	bl	358c4 <ticker_ticks_now_get>
   41f30:	4605      	mov	r5, r0
   41f32:	4630      	mov	r0, r6
   41f34:	f7fe fe76 	bl	40c24 <lll_event_offset_get>
	p->remainder = 0;
   41f38:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   41f3a:	1a28      	subs	r0, r5, r0
	p->remainder = 0;
   41f3c:	e9c4 0300 	strd	r0, r3, [r4]
	p->lazy = 0;
   41f40:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   41f42:	4620      	mov	r0, r4
   41f44:	2101      	movs	r1, #1
}
   41f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   41f4a:	f7ff bddf 	b.w	41b0c <common_prepare_cb>
   41f4e:	bf00      	nop

00041f50 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   41f50:	b900      	cbnz	r0, 41f54 <ticker_op_start_cb+0x4>
   41f52:	4770      	bx	lr
{
   41f54:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   41f56:	4a07      	ldr	r2, [pc, #28]	; (41f74 <ticker_op_start_cb+0x24>)
   41f58:	4907      	ldr	r1, [pc, #28]	; (41f78 <ticker_op_start_cb+0x28>)
   41f5a:	4808      	ldr	r0, [pc, #32]	; (41f7c <ticker_op_start_cb+0x2c>)
   41f5c:	f44f 7324 	mov.w	r3, #656	; 0x290
   41f60:	f008 f8bc 	bl	4a0dc <printk>
   41f64:	4040      	eors	r0, r0
   41f66:	f380 8811 	msr	BASEPRI, r0
   41f6a:	f04f 0003 	mov.w	r0, #3
   41f6e:	df02      	svc	2
}
   41f70:	bd08      	pop	{r3, pc}
   41f72:	bf00      	nop
   41f74:	00053960 	.word	0x00053960
   41f78:	000532e0 	.word	0x000532e0
   41f7c:	00052d50 	.word	0x00052d50

00041f80 <is_abort_cb>:
	if (next != curr) {
   41f80:	4281      	cmp	r1, r0
{
   41f82:	b508      	push	{r3, lr}
	if (next != curr) {
   41f84:	d00d      	beq.n	41fa2 <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   41f86:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   41f88:	b113      	cbz	r3, 41f90 <is_abort_cb+0x10>
			return -ECANCELED;
   41f8a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   41f8e:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   41f90:	4b14      	ldr	r3, [pc, #80]	; (41fe4 <is_abort_cb+0x64>)
   41f92:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   41f94:	f7ff f850 	bl	41038 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   41f98:	2800      	cmp	r0, #0
   41f9a:	db12      	blt.n	41fc2 <is_abort_cb+0x42>
				return -EAGAIN;
   41f9c:	f06f 000a 	mvn.w	r0, #10
}
   41fa0:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   41fa2:	684b      	ldr	r3, [r1, #4]
   41fa4:	b123      	cbz	r3, 41fb0 <is_abort_cb+0x30>
   41fa6:	684b      	ldr	r3, [r1, #4]
   41fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
   41fac:	07db      	lsls	r3, r3, #31
   41fae:	d406      	bmi.n	41fbe <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   41fb0:	480d      	ldr	r0, [pc, #52]	; (41fe8 <is_abort_cb+0x68>)
   41fb2:	f001 f8e9 	bl	43188 <radio_isr_set>
	radio_disable();
   41fb6:	f001 f9e3 	bl	43380 <radio_disable>
   41fba:	2000      	movs	r0, #0
}
   41fbc:	bd08      	pop	{r3, pc}
		return 0;
   41fbe:	2000      	movs	r0, #0
}
   41fc0:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   41fc2:	f240 2332 	movw	r3, #562	; 0x232
   41fc6:	4a09      	ldr	r2, [pc, #36]	; (41fec <is_abort_cb+0x6c>)
   41fc8:	4909      	ldr	r1, [pc, #36]	; (41ff0 <is_abort_cb+0x70>)
   41fca:	480a      	ldr	r0, [pc, #40]	; (41ff4 <is_abort_cb+0x74>)
   41fcc:	f008 f886 	bl	4a0dc <printk>
   41fd0:	4040      	eors	r0, r0
   41fd2:	f380 8811 	msr	BASEPRI, r0
   41fd6:	f04f 0003 	mov.w	r0, #3
   41fda:	df02      	svc	2
				return -EAGAIN;
   41fdc:	f06f 000a 	mvn.w	r0, #10
}
   41fe0:	bd08      	pop	{r3, pc}
   41fe2:	bf00      	nop
   41fe4:	00041f25 	.word	0x00041f25
   41fe8:	00028801 	.word	0x00028801
   41fec:	00053960 	.word	0x00053960
   41ff0:	0005375c 	.word	0x0005375c
   41ff4:	00052d50 	.word	0x00052d50

00041ff8 <ticker_stop_cb>:
{
   41ff8:	b508      	push	{r3, lr}
	mfy.param = param;
   41ffa:	4b0c      	ldr	r3, [pc, #48]	; (4202c <ticker_stop_cb+0x34>)
{
   41ffc:	9a03      	ldr	r2, [sp, #12]
	mfy.param = param;
   41ffe:	609a      	str	r2, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   42000:	2200      	movs	r2, #0
   42002:	4611      	mov	r1, r2
   42004:	2001      	movs	r0, #1
   42006:	f7f1 fff7 	bl	33ff8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   4200a:	b900      	cbnz	r0, 4200e <ticker_stop_cb+0x16>
}
   4200c:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   4200e:	f240 2389 	movw	r3, #649	; 0x289
   42012:	4a07      	ldr	r2, [pc, #28]	; (42030 <ticker_stop_cb+0x38>)
   42014:	4907      	ldr	r1, [pc, #28]	; (42034 <ticker_stop_cb+0x3c>)
   42016:	4808      	ldr	r0, [pc, #32]	; (42038 <ticker_stop_cb+0x40>)
   42018:	f008 f860 	bl	4a0dc <printk>
   4201c:	4040      	eors	r0, r0
   4201e:	f380 8811 	msr	BASEPRI, r0
   42022:	f04f 0003 	mov.w	r0, #3
   42026:	df02      	svc	2
}
   42028:	bd08      	pop	{r3, pc}
   4202a:	bf00      	nop
   4202c:	20000b3c 	.word	0x20000b3c
   42030:	00053960 	.word	0x00053960
   42034:	00052ed8 	.word	0x00052ed8
   42038:	00052d50 	.word	0x00052d50

0004203c <isr_done_cleanup>:
{
   4203c:	b530      	push	{r4, r5, lr}
   4203e:	4604      	mov	r4, r0
   42040:	b085      	sub	sp, #20
	lll_isr_status_reset();
   42042:	f7fe fe65 	bl	40d10 <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   42046:	4620      	mov	r0, r4
   42048:	f10d 010f 	add.w	r1, sp, #15
   4204c:	f7fe fdd8 	bl	40c00 <lll_is_done>
   42050:	b9c8      	cbnz	r0, 42086 <isr_done_cleanup+0x4a>
	radio_filter_disable();
   42052:	4605      	mov	r5, r0
   42054:	f001 fb14 	bl	43680 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   42058:	7da2      	ldrb	r2, [r4, #22]
   4205a:	f3c2 0341 	ubfx	r3, r2, #1, #2
   4205e:	3301      	adds	r3, #1
   42060:	f003 0303 	and.w	r3, r3, #3
   42064:	2b03      	cmp	r3, #3
   42066:	bf14      	ite	ne
   42068:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   4206c:	f365 0242 	bfieq	r2, r5, #1, #2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   42070:	2300      	movs	r3, #0
		lll->chan = 0U;
   42072:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   42074:	4619      	mov	r1, r3
   42076:	9300      	str	r3, [sp, #0]
   42078:	4618      	mov	r0, r3
   4207a:	2203      	movs	r2, #3
   4207c:	f7f3 fb7a 	bl	35774 <ticker_stop>
	lll_isr_cleanup(param);
   42080:	4620      	mov	r0, r4
   42082:	f7fe fe53 	bl	40d2c <lll_isr_cleanup>
}
   42086:	b005      	add	sp, #20
   42088:	bd30      	pop	{r4, r5, pc}
   4208a:	bf00      	nop

0004208c <isr_scan_tgta_check>:
{
   4208c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42090:	f89d 8020 	ldrb.w	r8, [sp, #32]
   42094:	4615      	mov	r5, r2
   42096:	4607      	mov	r7, r0
   42098:	4689      	mov	r9, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   4209a:	4610      	mov	r0, r2
   4209c:	4619      	mov	r1, r3
   4209e:	4642      	mov	r2, r8
{
   420a0:	461e      	mov	r6, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   420a2:	f7fe fa43 	bl	4052c <ull_filter_lll_rl_addr_resolve>
   420a6:	4604      	mov	r4, r0
   420a8:	b9a0      	cbnz	r0, 420d4 <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   420aa:	f1b9 0f00 	cmp.w	r9, #0
   420ae:	d002      	beq.n	420b6 <isr_scan_tgta_check+0x2a>
   420b0:	7dfb      	ldrb	r3, [r7, #23]
   420b2:	079a      	lsls	r2, r3, #30
   420b4:	d41a      	bmi.n	420ec <isr_scan_tgta_check+0x60>
	return (((lll->init_addr_type == addr_type) &&
   420b6:	7dba      	ldrb	r2, [r7, #22]
   420b8:	f3c2 1380 	ubfx	r3, r2, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   420bc:	42ab      	cmp	r3, r5
   420be:	d00c      	beq.n	420da <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   420c0:	f3c2 02c1 	ubfx	r2, r2, #3, #2
   420c4:	0793      	lsls	r3, r2, #30
   420c6:	d505      	bpl.n	420d4 <isr_scan_tgta_check+0x48>
   420c8:	b125      	cbz	r5, 420d4 <isr_scan_tgta_check+0x48>
   420ca:	7973      	ldrb	r3, [r6, #5]
   420cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   420d0:	2b40      	cmp	r3, #64	; 0x40
   420d2:	d013      	beq.n	420fc <isr_scan_tgta_check+0x70>
}
   420d4:	4620      	mov	r0, r4
   420d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   420da:	2206      	movs	r2, #6
   420dc:	4631      	mov	r1, r6
   420de:	f107 0019 	add.w	r0, r7, #25
   420e2:	f00a f8f3 	bl	4c2cc <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   420e6:	b138      	cbz	r0, 420f8 <isr_scan_tgta_check+0x6c>
   420e8:	7dba      	ldrb	r2, [r7, #22]
   420ea:	e7e9      	b.n	420c0 <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   420ec:	4640      	mov	r0, r8
   420ee:	f7fe f8ad 	bl	4024c <ull_filter_lll_lrpa_get>
   420f2:	2800      	cmp	r0, #0
   420f4:	d1ee      	bne.n	420d4 <isr_scan_tgta_check+0x48>
   420f6:	e7de      	b.n	420b6 <isr_scan_tgta_check+0x2a>
			*dir_report = true;
   420f8:	2401      	movs	r4, #1
   420fa:	e7eb      	b.n	420d4 <isr_scan_tgta_check+0x48>
		if (dir_report) {
   420fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   420fe:	2b00      	cmp	r3, #0
   42100:	d0fa      	beq.n	420f8 <isr_scan_tgta_check+0x6c>
			*dir_report = true;
   42102:	2401      	movs	r4, #1
   42104:	701c      	strb	r4, [r3, #0]
   42106:	e7e5      	b.n	420d4 <isr_scan_tgta_check+0x48>

00042108 <isr_rx_scan_report.isra.5>:
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   42108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4210c:	4680      	mov	r8, r0
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
   4210e:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   42110:	460f      	mov	r7, r1
   42112:	4615      	mov	r5, r2
   42114:	461e      	mov	r6, r3
	node_rx = ull_pdu_rx_alloc_peek(3);
   42116:	f7f5 ff15 	bl	37f44 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   4211a:	b308      	cbz	r0, 42160 <isr_rx_scan_report.isra.5+0x58>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   4211c:	4604      	mov	r4, r0
   4211e:	f7f5 ff31 	bl	37f84 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   42122:	f64f 72ff 	movw	r2, #65535	; 0xffff
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   42126:	2305      	movs	r3, #5
	node_rx->hdr.handle = 0xffff;
   42128:	80e2      	strh	r2, [r4, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   4212a:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   4212c:	f1b8 0f00 	cmp.w	r8, #0
   42130:	d112      	bne.n	42158 <isr_rx_scan_report.isra.5+0x50>
   42132:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
   42134:	7ea3      	ldrb	r3, [r4, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   42136:	7620      	strb	r0, [r4, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   42138:	2f00      	cmp	r7, #0
   4213a:	bf08      	it	eq
   4213c:	25ff      	moveq	r5, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
   4213e:	f366 0341 	bfi	r3, r6, #1, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   42142:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
   42144:	76a3      	strb	r3, [r4, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
   42146:	4621      	mov	r1, r4
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   42148:	7665      	strb	r5, [r4, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
   4214a:	f7f5 ff33 	bl	37fb4 <ull_rx_put>
	ull_rx_sched();
   4214e:	f7f5 ff41 	bl	37fd4 <ull_rx_sched>

	return err;
   42152:	2000      	movs	r0, #0
}
   42154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
   42158:	f001 fa5e 	bl	43618 <radio_rssi_get>
   4215c:	b2c0      	uxtb	r0, r0
   4215e:	e7e9      	b.n	42134 <isr_rx_scan_report.isra.5+0x2c>
		return -ENOBUFS;
   42160:	f06f 0068 	mvn.w	r0, #104	; 0x68
   42164:	e7f6      	b.n	42154 <isr_rx_scan_report.isra.5+0x4c>
   42166:	bf00      	nop

00042168 <abort_cb>:
{
   42168:	b510      	push	{r4, lr}
	if (!prepare_param) {
   4216a:	b1d8      	cbz	r0, 421a4 <abort_cb+0x3c>
	err = lll_hfclock_off();
   4216c:	460c      	mov	r4, r1
   4216e:	f7fe ff7b 	bl	41068 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   42172:	2800      	cmp	r0, #0
   42174:	db04      	blt.n	42180 <abort_cb+0x18>
	lll_done(param);
   42176:	4620      	mov	r0, r4
}
   42178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   4217c:	f7fe bcee 	b.w	40b5c <lll_done>
	LL_ASSERT(err >= 0);
   42180:	f240 2379 	movw	r3, #633	; 0x279
   42184:	4a0b      	ldr	r2, [pc, #44]	; (421b4 <abort_cb+0x4c>)
   42186:	490c      	ldr	r1, [pc, #48]	; (421b8 <abort_cb+0x50>)
   42188:	480c      	ldr	r0, [pc, #48]	; (421bc <abort_cb+0x54>)
   4218a:	f007 ffa7 	bl	4a0dc <printk>
   4218e:	4040      	eors	r0, r0
   42190:	f380 8811 	msr	BASEPRI, r0
   42194:	f04f 0003 	mov.w	r0, #3
   42198:	df02      	svc	2
	lll_done(param);
   4219a:	4620      	mov	r0, r4
}
   4219c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   421a0:	f7fe bcdc 	b.w	40b5c <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   421a4:	4806      	ldr	r0, [pc, #24]	; (421c0 <abort_cb+0x58>)
   421a6:	f000 ffef 	bl	43188 <radio_isr_set>
}
   421aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   421ae:	f001 b8e7 	b.w	43380 <radio_disable>
   421b2:	bf00      	nop
   421b4:	00053960 	.word	0x00053960
   421b8:	0005375c 	.word	0x0005375c
   421bc:	00052d50 	.word	0x00052d50
   421c0:	0004203d 	.word	0x0004203d

000421c4 <lll_scan_init>:
}
   421c4:	2000      	movs	r0, #0
   421c6:	4770      	bx	lr

000421c8 <lll_scan_reset>:
   421c8:	2000      	movs	r0, #0
   421ca:	4770      	bx	lr

000421cc <lll_scan_prepare>:
{
   421cc:	b510      	push	{r4, lr}
   421ce:	b082      	sub	sp, #8
   421d0:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   421d2:	f7fe ff31 	bl	41038 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   421d6:	2800      	cmp	r0, #0
   421d8:	db19      	blt.n	4220e <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   421da:	9400      	str	r4, [sp, #0]
   421dc:	2300      	movs	r3, #0
   421de:	4a12      	ldr	r2, [pc, #72]	; (42228 <lll_scan_prepare+0x5c>)
   421e0:	4912      	ldr	r1, [pc, #72]	; (4222c <lll_scan_prepare+0x60>)
   421e2:	4813      	ldr	r0, [pc, #76]	; (42230 <lll_scan_prepare+0x64>)
   421e4:	f7f6 fb42 	bl	3886c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   421e8:	b108      	cbz	r0, 421ee <lll_scan_prepare+0x22>
   421ea:	3077      	adds	r0, #119	; 0x77
   421ec:	d101      	bne.n	421f2 <lll_scan_prepare+0x26>
}
   421ee:	b002      	add	sp, #8
   421f0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   421f2:	238b      	movs	r3, #139	; 0x8b
   421f4:	4a0f      	ldr	r2, [pc, #60]	; (42234 <lll_scan_prepare+0x68>)
   421f6:	4910      	ldr	r1, [pc, #64]	; (42238 <lll_scan_prepare+0x6c>)
   421f8:	4810      	ldr	r0, [pc, #64]	; (4223c <lll_scan_prepare+0x70>)
   421fa:	f007 ff6f 	bl	4a0dc <printk>
   421fe:	4040      	eors	r0, r0
   42200:	f380 8811 	msr	BASEPRI, r0
   42204:	f04f 0003 	mov.w	r0, #3
   42208:	df02      	svc	2
}
   4220a:	b002      	add	sp, #8
   4220c:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   4220e:	2388      	movs	r3, #136	; 0x88
   42210:	4a08      	ldr	r2, [pc, #32]	; (42234 <lll_scan_prepare+0x68>)
   42212:	490b      	ldr	r1, [pc, #44]	; (42240 <lll_scan_prepare+0x74>)
   42214:	4809      	ldr	r0, [pc, #36]	; (4223c <lll_scan_prepare+0x70>)
   42216:	f007 ff61 	bl	4a0dc <printk>
   4221a:	4040      	eors	r0, r0
   4221c:	f380 8811 	msr	BASEPRI, r0
   42220:	f04f 0003 	mov.w	r0, #3
   42224:	df02      	svc	2
   42226:	e7d8      	b.n	421da <lll_scan_prepare+0xe>
   42228:	00041d8d 	.word	0x00041d8d
   4222c:	00042169 	.word	0x00042169
   42230:	00041f81 	.word	0x00041f81
   42234:	00053960 	.word	0x00053960
   42238:	0005394c 	.word	0x0005394c
   4223c:	00052d50 	.word	0x00052d50
   42240:	0005375c 	.word	0x0005375c

00042244 <lll_scan_isr_rx_check>:
{
   42244:	b510      	push	{r4, lr}
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   42246:	7d84      	ldrb	r4, [r0, #22]
							       rl_idx))) ||
   42248:	0724      	lsls	r4, r4, #28
   4224a:	d502      	bpl.n	42252 <lll_scan_isr_rx_check+0xe>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   4224c:	b17a      	cbz	r2, 4226e <lll_scan_isr_rx_check+0x2a>
{
   4224e:	2001      	movs	r0, #1
}
   42250:	bd10      	pop	{r4, pc}
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   42252:	2a00      	cmp	r2, #0
   42254:	d0fb      	beq.n	4224e <lll_scan_isr_rx_check+0xa>
   42256:	460a      	mov	r2, r1
   42258:	4604      	mov	r4, r0
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   4225a:	4619      	mov	r1, r3
   4225c:	4610      	mov	r0, r2
   4225e:	f7fe f8f9 	bl	40454 <ull_filter_lll_rl_idx_allowed>
   42262:	2800      	cmp	r0, #0
   42264:	d1f3      	bne.n	4224e <lll_scan_isr_rx_check+0xa>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   42266:	7da3      	ldrb	r3, [r4, #22]
							       rl_idx))) ||
   42268:	071b      	lsls	r3, r3, #28
   4226a:	d4f0      	bmi.n	4224e <lll_scan_isr_rx_check+0xa>
}
   4226c:	bd10      	pop	{r4, pc}
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   4226e:	4618      	mov	r0, r3
}
   42270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   42274:	f7fe b8c0 	b.w	403f8 <ull_filter_lll_irk_in_fal>

00042278 <lll_scan_adva_check>:
{
   42278:	b570      	push	{r4, r5, r6, lr}
   4227a:	b082      	sub	sp, #8
	if (rl_idx != FILTER_IDX_NONE) {
   4227c:	2bff      	cmp	r3, #255	; 0xff
{
   4227e:	f88d 3007 	strb.w	r3, [sp, #7]
	if (rl_idx != FILTER_IDX_NONE) {
   42282:	d006      	beq.n	42292 <lll_scan_adva_check+0x1a>
		return (rl_idx == lll->rl_idx);
   42284:	7e00      	ldrb	r0, [r0, #24]
   42286:	1ac0      	subs	r0, r0, r3
   42288:	fab0 f080 	clz	r0, r0
   4228c:	0940      	lsrs	r0, r0, #5
}
   4228e:	b002      	add	sp, #8
   42290:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
   42292:	4616      	mov	r6, r2
   42294:	460d      	mov	r5, r1
   42296:	4604      	mov	r4, r0
   42298:	f10d 0207 	add.w	r2, sp, #7
   4229c:	4631      	mov	r1, r6
   4229e:	4628      	mov	r0, r5
   422a0:	f7fe f90a 	bl	404b8 <ull_filter_lll_rl_addr_allowed>
   422a4:	2800      	cmp	r0, #0
   422a6:	d0f2      	beq.n	4228e <lll_scan_adva_check+0x16>
	return ((lll->adv_addr_type == addr_type) &&
   422a8:	7de3      	ldrb	r3, [r4, #23]
   422aa:	f003 0301 	and.w	r3, r3, #1
   422ae:	42ab      	cmp	r3, r5
   422b0:	d002      	beq.n	422b8 <lll_scan_adva_check+0x40>
   422b2:	2000      	movs	r0, #0
}
   422b4:	b002      	add	sp, #8
   422b6:	bd70      	pop	{r4, r5, r6, pc}
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
   422b8:	4631      	mov	r1, r6
   422ba:	f104 0008 	add.w	r0, r4, #8
   422be:	2206      	movs	r2, #6
   422c0:	f00a f804 	bl	4c2cc <memcmp>
	return ((lll->adv_addr_type == addr_type) &&
   422c4:	fab0 f080 	clz	r0, r0
   422c8:	0940      	lsrs	r0, r0, #5
   422ca:	e7e0      	b.n	4228e <lll_scan_adva_check+0x16>

000422cc <lll_scan_prepare_connect_req>:
{
   422cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	pdu_tx->tx_addr = init_tx_addr;
   422d0:	780d      	ldrb	r5, [r1, #0]
{
   422d2:	f89d 601c 	ldrb.w	r6, [sp, #28]
	pdu_tx->tx_addr = init_tx_addr;
   422d6:	f366 1586 	bfi	r5, r6, #6, #1
	pdu_tx->rx_addr = adv_tx_addr;
   422da:	f363 15c7 	bfi	r5, r3, #7, #1
{
   422de:	460c      	mov	r4, r1
   422e0:	4606      	mov	r6, r0
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   422e2:	f005 05d0 	and.w	r5, r5, #208	; 0xd0
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   422e6:	2322      	movs	r3, #34	; 0x22
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   422e8:	f045 0025 	orr.w	r0, r5, #37	; 0x25
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   422ec:	9908      	ldr	r1, [sp, #32]
	lll_conn = lll->conn;
   422ee:	6875      	ldr	r5, [r6, #4]
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   422f0:	7063      	strb	r3, [r4, #1]
{
   422f2:	4690      	mov	r8, r2
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   422f4:	7020      	strb	r0, [r4, #0]
	memcpy(&pdu_tx->connect_ind.init_addr[0], init_addr, BDADDR_SIZE);
   422f6:	2206      	movs	r2, #6
   422f8:	1ca0      	adds	r0, r4, #2
   422fa:	f009 fff7 	bl	4c2ec <memcpy>
	memcpy(&pdu_tx->connect_ind.adv_addr[0], adv_addr, BDADDR_SIZE);
   422fe:	9906      	ldr	r1, [sp, #24]
   42300:	2206      	movs	r2, #6
   42302:	f104 0008 	add.w	r0, r4, #8
   42306:	f009 fff1 	bl	4c2ec <memcpy>
	memcpy(&pdu_tx->connect_ind.access_addr[0],
   4230a:	1d29      	adds	r1, r5, #4
   4230c:	2204      	movs	r2, #4
   4230e:	f104 000e 	add.w	r0, r4, #14
   42312:	f009 ffeb 	bl	4c2ec <memcpy>
	memcpy(&pdu_tx->connect_ind.crc_init[0], &lll_conn->crc_init[0], 3);
   42316:	f105 0108 	add.w	r1, r5, #8
   4231a:	f104 0012 	add.w	r0, r4, #18
   4231e:	2203      	movs	r2, #3
   42320:	f009 ffe4 	bl	4c2ec <memcpy>
	pdu_tx->connect_ind.win_size = 1;
   42324:	2301      	movs	r3, #1
   42326:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   42328:	89ef      	ldrh	r7, [r5, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   4232a:	f001 fafd 	bl	43928 <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   4232e:	f1b8 0f00 	cmp.w	r8, #0
   42332:	d045      	beq.n	423c0 <lll_scan_prepare_connect_req+0xf4>
   42334:	f008 0203 	and.w	r2, r8, #3
   42338:	322b      	adds	r2, #43	; 0x2b
   4233a:	00d2      	lsls	r2, r2, #3
   4233c:	f3c8 0840 	ubfx	r8, r8, #1, #1
   42340:	fa22 f208 	lsr.w	r2, r2, r8
	    lll->conn_win_offset_us == 0U) {
   42344:	6933      	ldr	r3, [r6, #16]
		conn_offset_us += WIN_DELAY_LEGACY;
   42346:	f500 60af 	add.w	r0, r0, #1400	; 0x578
   4234a:	4410      	add	r0, r2
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   4234c:	b39b      	cbz	r3, 423b6 <lll_scan_prepare_connect_req+0xea>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   4234e:	f240 42e2 	movw	r2, #1250	; 0x4e2
   42352:	fb02 f207 	mul.w	r2, r2, r7
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   42356:	2b00      	cmp	r3, #0
   42358:	db01      	blt.n	4235e <lll_scan_prepare_connect_req+0x92>
   4235a:	4283      	cmp	r3, r0
   4235c:	d201      	bcs.n	42362 <lll_scan_prepare_connect_req+0x96>
			win_offset_us += conn_interval_us;
   4235e:	4413      	add	r3, r2
   42360:	e7f9      	b.n	42356 <lll_scan_prepare_connect_req+0x8a>
		*conn_space_us = win_offset_us;
   42362:	9a09      	ldr	r2, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   42364:	4918      	ldr	r1, [pc, #96]	; (423c8 <lll_scan_prepare_connect_req+0xfc>)
		*conn_space_us = win_offset_us;
   42366:	6013      	str	r3, [r2, #0]
		pdu_tx->connect_ind.win_size++;
   42368:	7d62      	ldrb	r2, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   4236a:	1a1b      	subs	r3, r3, r0
   4236c:	fba1 1303 	umull	r1, r3, r1, r3
		pdu_tx->connect_ind.win_offset =
   42370:	f3c3 238f 	ubfx	r3, r3, #10, #16
		pdu_tx->connect_ind.win_size++;
   42374:	3201      	adds	r2, #1
		pdu_tx->connect_ind.win_offset =
   42376:	82e3      	strh	r3, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   42378:	7562      	strb	r2, [r4, #21]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   4237a:	8ab2      	ldrh	r2, [r6, #20]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   4237c:	89e9      	ldrh	r1, [r5, #14]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   4237e:	8a2b      	ldrh	r3, [r5, #16]
   42380:	8363      	strh	r3, [r4, #26]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   42382:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   42384:	83a2      	strh	r2, [r4, #28]
	memcpy(&pdu_tx->connect_ind.chan_map[0], &lll_conn->data_chan_map[0],
   42386:	f105 0118 	add.w	r1, r5, #24
   4238a:	2205      	movs	r2, #5
   4238c:	f104 001e 	add.w	r0, r4, #30
   42390:	f009 ffac 	bl	4c2ec <memcpy>
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   42394:	7faa      	ldrb	r2, [r5, #30]
   42396:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   4239a:	f362 0304 	bfi	r3, r2, #0, #5
   4239e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   423a2:	f7fe fe7f 	bl	410a4 <lll_clock_sca_local_get>
   423a6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   423aa:	f360 1347 	bfi	r3, r0, #5, #3
   423ae:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   423b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   423b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   423b8:	6010      	str	r0, [r2, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   423ba:	75a3      	strb	r3, [r4, #22]
   423bc:	75e3      	strb	r3, [r4, #23]
   423be:	e7dc      	b.n	4237a <lll_scan_prepare_connect_req+0xae>
   423c0:	f44f 72b0 	mov.w	r2, #352	; 0x160
   423c4:	e7be      	b.n	42344 <lll_scan_prepare_connect_req+0x78>
   423c6:	bf00      	nop
   423c8:	d1b71759 	.word	0xd1b71759

000423cc <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   423cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   423ce:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   423d0:	f7fe fc9e 	bl	40d10 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   423d4:	f7f5 fec0 	bl	38158 <ull_event_done_extra_get>
	LL_ASSERT(e);
   423d8:	4604      	mov	r4, r0
   423da:	b388      	cbz	r0, 42440 <isr_done+0x74>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   423dc:	4a1f      	ldr	r2, [pc, #124]	; (4245c <isr_done+0x90>)
	e->trx_cnt = trx_cnt;
   423de:	4b20      	ldr	r3, [pc, #128]	; (42460 <isr_done+0x94>)
	e->crc_valid = crc_valid;
   423e0:	7811      	ldrb	r1, [r2, #0]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   423e2:	4820      	ldr	r0, [pc, #128]	; (42464 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   423e4:	79a2      	ldrb	r2, [r4, #6]
	e->trx_cnt = trx_cnt;
   423e6:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   423e8:	7800      	ldrb	r0, [r0, #0]
	e->trx_cnt = trx_cnt;
   423ea:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = crc_valid;
   423ec:	f361 0200 	bfi	r2, r1, #0, #1
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   423f0:	2101      	movs	r1, #1
	e->crc_valid = crc_valid;
   423f2:	71a2      	strb	r2, [r4, #6]
	e->mic_state = mic_state;
   423f4:	71e0      	strb	r0, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   423f6:	7021      	strb	r1, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   423f8:	b1db      	cbz	r3, 42432 <isr_done+0x66>
		struct lll_conn *lll = param;

		if (lll->role) {
   423fa:	f995 301d 	ldrsb.w	r3, [r5, #29]
   423fe:	2b00      	cmp	r3, #0
   42400:	da17      	bge.n	42432 <isr_done+0x66>
			uint32_t preamble_to_addr_us;

#if defined(CONFIG_BT_CTLR_PHY)
			preamble_to_addr_us =
				addr_us_get(lll->phy_rx);
   42402:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   42406:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   4240a:	2b02      	cmp	r3, #2
   4240c:	d016      	beq.n	4243c <isr_done+0x70>
	default:
	case BIT(0):
		return 40;
   4240e:	2b04      	cmp	r3, #4
   42410:	bf0c      	ite	eq
   42412:	f44f 77bc 	moveq.w	r7, #376	; 0x178
   42416:	2728      	movne	r7, #40	; 0x28
			preamble_to_addr_us =
				addr_us_get(0);
#endif /* !CONFIG_BT_CTLR_PHY */

			e->drift.start_to_address_actual_us =
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   42418:	f001 fa72 	bl	43900 <radio_tmr_aa_restore>
   4241c:	4606      	mov	r6, r0
   4241e:	f001 fa75 	bl	4390c <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   42422:	6b2a      	ldr	r2, [r5, #48]	; 0x30
				lll->periph.window_widening_event_us;
			e->drift.preamble_to_addr_us = preamble_to_addr_us;

			/* Reset window widening, as anchor point sync-ed */
			lll->periph.window_widening_event_us = 0;
   42424:	2300      	movs	r3, #0
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   42426:	1a30      	subs	r0, r6, r0
			e->drift.start_to_address_actual_us =
   42428:	60a0      	str	r0, [r4, #8]
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   4242a:	e9c4 2703 	strd	r2, r7, [r4, #12]
			lll->periph.window_widening_event_us = 0;
   4242e:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   42430:	63ab      	str	r3, [r5, #56]	; 0x38
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   42432:	4628      	mov	r0, r5
}
   42434:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   42438:	f7fe bc78 	b.w	40d2c <lll_isr_cleanup>
	case BIT(1):
		return 24;
   4243c:	2718      	movs	r7, #24
   4243e:	e7eb      	b.n	42418 <isr_done+0x4c>
	LL_ASSERT(e);
   42440:	f240 3317 	movw	r3, #791	; 0x317
   42444:	4a08      	ldr	r2, [pc, #32]	; (42468 <isr_done+0x9c>)
   42446:	4909      	ldr	r1, [pc, #36]	; (4246c <isr_done+0xa0>)
   42448:	4809      	ldr	r0, [pc, #36]	; (42470 <isr_done+0xa4>)
   4244a:	f007 fe47 	bl	4a0dc <printk>
   4244e:	4040      	eors	r0, r0
   42450:	f380 8811 	msr	BASEPRI, r0
   42454:	f04f 0003 	mov.w	r0, #3
   42458:	df02      	svc	2
   4245a:	e7bf      	b.n	423dc <isr_done+0x10>
   4245c:	20006da1 	.word	0x20006da1
   42460:	20006c18 	.word	0x20006c18
   42464:	20006da2 	.word	0x20006da2
   42468:	000539ac 	.word	0x000539ac
   4246c:	00053114 	.word	0x00053114
   42470:	00052d50 	.word	0x00052d50

00042474 <lll_conn_init>:
{
   42474:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   42476:	f000 ffdb 	bl	43430 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   4247a:	7803      	ldrb	r3, [r0, #0]
   4247c:	2201      	movs	r2, #1
   4247e:	f362 0301 	bfi	r3, r2, #0, #2
   42482:	7003      	strb	r3, [r0, #0]
}
   42484:	2000      	movs	r0, #0
   42486:	bd08      	pop	{r3, pc}

00042488 <lll_conn_reset>:
}
   42488:	2000      	movs	r0, #0
   4248a:	4770      	bx	lr

0004248c <lll_conn_flush>:
}
   4248c:	4770      	bx	lr
   4248e:	bf00      	nop

00042490 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   42490:	4805      	ldr	r0, [pc, #20]	; (424a8 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   42492:	4906      	ldr	r1, [pc, #24]	; (424ac <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   42494:	4a06      	ldr	r2, [pc, #24]	; (424b0 <lll_conn_prepare_reset+0x20>)
{
   42496:	b410      	push	{r4}
	trx_cnt = 0U;
   42498:	2300      	movs	r3, #0
   4249a:	4c06      	ldr	r4, [pc, #24]	; (424b4 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   4249c:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   4249e:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   424a0:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   424a2:	8023      	strh	r3, [r4, #0]
}
   424a4:	bc10      	pop	{r4}
   424a6:	4770      	bx	lr
   424a8:	20006da1 	.word	0x20006da1
   424ac:	20006da0 	.word	0x20006da0
   424b0:	20006da2 	.word	0x20006da2
   424b4:	20006c18 	.word	0x20006c18

000424b8 <lll_conn_abort_cb>:
{
   424b8:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   424ba:	b1e8      	cbz	r0, 424f8 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   424bc:	460d      	mov	r5, r1
   424be:	4604      	mov	r4, r0
   424c0:	f7fe fdd2 	bl	41068 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   424c4:	2800      	cmp	r0, #0
   424c6:	db0a      	blt.n	424de <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   424c8:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   424ca:	8923      	ldrh	r3, [r4, #8]
   424cc:	8a51      	ldrh	r1, [r2, #18]
   424ce:	3301      	adds	r3, #1
   424d0:	440b      	add	r3, r1
	lll_done(param);
   424d2:	4628      	mov	r0, r5
	lll->latency_prepare += (prepare_param->lazy + 1);
   424d4:	8253      	strh	r3, [r2, #18]
}
   424d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   424da:	f7fe bb3f 	b.w	40b5c <lll_done>
	LL_ASSERT(err >= 0);
   424de:	23aa      	movs	r3, #170	; 0xaa
   424e0:	4a09      	ldr	r2, [pc, #36]	; (42508 <lll_conn_abort_cb+0x50>)
   424e2:	490a      	ldr	r1, [pc, #40]	; (4250c <lll_conn_abort_cb+0x54>)
   424e4:	480a      	ldr	r0, [pc, #40]	; (42510 <lll_conn_abort_cb+0x58>)
   424e6:	f007 fdf9 	bl	4a0dc <printk>
   424ea:	4040      	eors	r0, r0
   424ec:	f380 8811 	msr	BASEPRI, r0
   424f0:	f04f 0003 	mov.w	r0, #3
   424f4:	df02      	svc	2
   424f6:	e7e7      	b.n	424c8 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   424f8:	4806      	ldr	r0, [pc, #24]	; (42514 <lll_conn_abort_cb+0x5c>)
   424fa:	f000 fe45 	bl	43188 <radio_isr_set>
}
   424fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   42502:	f000 bf3d 	b.w	43380 <radio_disable>
   42506:	bf00      	nop
   42508:	000539ac 	.word	0x000539ac
   4250c:	0005375c 	.word	0x0005375c
   42510:	00052d50 	.word	0x00052d50
   42514:	000423cd 	.word	0x000423cd

00042518 <lll_conn_rx_pkt_set>:
{
   42518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4251a:	4607      	mov	r7, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   4251c:	2001      	movs	r0, #1
   4251e:	f7f5 fd11 	bl	37f44 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   42522:	4605      	mov	r5, r0
   42524:	b348      	cbz	r0, 4257a <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   42526:	f897 4045 	ldrb.w	r4, [r7, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   4252a:	8ffe      	ldrh	r6, [r7, #62]	; 0x3e
	phy = lll->phy_rx;
   4252c:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   42530:	2100      	movs	r1, #0
   42532:	4620      	mov	r0, r4
   42534:	f000 fe8e 	bl	43254 <radio_phy_set>
	} else if (lll->enc_rx) {
   42538:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
   4253c:	0062      	lsls	r2, r4, #1
   4253e:	071b      	lsls	r3, r3, #28
   42540:	f105 051c 	add.w	r5, r5, #28
   42544:	b2f1      	uxtb	r1, r6
   42546:	f042 0201 	orr.w	r2, r2, #1
   4254a:	d50e      	bpl.n	4256a <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   4254c:	3104      	adds	r1, #4
   4254e:	b2c9      	uxtb	r1, r1
   42550:	2008      	movs	r0, #8
   42552:	f000 fec7 	bl	432e4 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   42556:	462a      	mov	r2, r5
   42558:	4621      	mov	r1, r4
   4255a:	f107 005f 	add.w	r0, r7, #95	; 0x5f
   4255e:	f001 f9ef 	bl	43940 <radio_ccm_rx_pkt_set>
}
   42562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   42566:	f000 bee3 	b.w	43330 <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   4256a:	2008      	movs	r0, #8
   4256c:	f000 feba 	bl	432e4 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   42570:	4628      	mov	r0, r5
}
   42572:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   42576:	f000 bedb 	b.w	43330 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   4257a:	f240 235a 	movw	r3, #602	; 0x25a
   4257e:	4a06      	ldr	r2, [pc, #24]	; (42598 <lll_conn_rx_pkt_set+0x80>)
   42580:	4906      	ldr	r1, [pc, #24]	; (4259c <lll_conn_rx_pkt_set+0x84>)
   42582:	4807      	ldr	r0, [pc, #28]	; (425a0 <lll_conn_rx_pkt_set+0x88>)
   42584:	f007 fdaa 	bl	4a0dc <printk>
   42588:	4040      	eors	r0, r0
   4258a:	f380 8811 	msr	BASEPRI, r0
   4258e:	f04f 0003 	mov.w	r0, #3
   42592:	df02      	svc	2
   42594:	e7c7      	b.n	42526 <lll_conn_rx_pkt_set+0xe>
   42596:	bf00      	nop
   42598:	000539ac 	.word	0x000539ac
   4259c:	0005392c 	.word	0x0005392c
   425a0:	00052d50 	.word	0x00052d50

000425a4 <lll_conn_isr_tx>:
{
   425a4:	b538      	push	{r3, r4, r5, lr}
   425a6:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   425a8:	f7fe fba0 	bl	40cec <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   425ac:	2096      	movs	r0, #150	; 0x96
   425ae:	f001 f899 	bl	436e4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   425b2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   425b6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   425ba:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   425be:	f000 0007 	and.w	r0, r0, #7
   425c2:	f002 0207 	and.w	r2, r2, #7
   425c6:	2100      	movs	r1, #0
   425c8:	f000 fff8 	bl	435bc <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   425cc:	4620      	mov	r0, r4
   425ce:	f7ff ffa3 	bl	42518 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   425d2:	f000 fef9 	bl	433c8 <radio_is_ready>
   425d6:	bb58      	cbnz	r0, 42630 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   425d8:	f001 f9ac 	bl	43934 <radio_tmr_tifs_base_get>
   425dc:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   425de:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   425e2:	2101      	movs	r1, #1
   425e4:	f000 0007 	and.w	r0, r0, #7
   425e8:	f000 feb8 	bl	4335c <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   425ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   425f0:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   425f4:	4405      	add	r5, r0
	switch (phy) {
   425f6:	2b02      	cmp	r3, #2
   425f8:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   425fc:	d016      	beq.n	4262c <lll_conn_isr_tx+0x88>
		return 40;
   425fe:	2b04      	cmp	r3, #4
   42600:	bf0c      	ite	eq
   42602:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   42606:	2328      	movne	r3, #40	; 0x28
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   42608:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   4260c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   42610:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   42614:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   42616:	f000 fe9d 	bl	43354 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   4261a:	1a28      	subs	r0, r5, r0
   4261c:	f001 f942 	bl	438a4 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   42620:	4621      	mov	r1, r4
   42622:	480a      	ldr	r0, [pc, #40]	; (4264c <lll_conn_isr_tx+0xa8>)
}
   42624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   42628:	f000 bdae 	b.w	43188 <radio_isr_set>
		return 24;
   4262c:	2318      	movs	r3, #24
   4262e:	e7eb      	b.n	42608 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   42630:	f240 2313 	movw	r3, #531	; 0x213
   42634:	4a06      	ldr	r2, [pc, #24]	; (42650 <lll_conn_isr_tx+0xac>)
   42636:	4907      	ldr	r1, [pc, #28]	; (42654 <lll_conn_isr_tx+0xb0>)
   42638:	4807      	ldr	r0, [pc, #28]	; (42658 <lll_conn_isr_tx+0xb4>)
   4263a:	f007 fd4f 	bl	4a0dc <printk>
   4263e:	4040      	eors	r0, r0
   42640:	f380 8811 	msr	BASEPRI, r0
   42644:	f04f 0003 	mov.w	r0, #3
   42648:	df02      	svc	2
   4264a:	e7c5      	b.n	425d8 <lll_conn_isr_tx+0x34>
   4264c:	00042789 	.word	0x00042789
   42650:	000539ac 	.word	0x000539ac
   42654:	00053934 	.word	0x00053934
   42658:	00052d50 	.word	0x00052d50

0004265c <lll_conn_tx_pkt_set>:
{
   4265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4265e:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   42660:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   42664:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   42666:	f001 0407 	and.w	r4, r1, #7
{
   4266a:	4606      	mov	r6, r0
	radio_phy_set(phy, flags);
   4266c:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   42670:	4620      	mov	r0, r4
   42672:	f000 fdef 	bl	43254 <radio_phy_set>
	} else if (lll->enc_tx) {
   42676:	f896 305e 	ldrb.w	r3, [r6, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   4267a:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   4267c:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   4267e:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_tx) {
   42682:	b2e9      	uxtb	r1, r5
   42684:	d50d      	bpl.n	426a2 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   42686:	3104      	adds	r1, #4
   42688:	b2c9      	uxtb	r1, r1
   4268a:	2008      	movs	r0, #8
   4268c:	f000 fe2a 	bl	432e4 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   42690:	4639      	mov	r1, r7
   42692:	f106 0080 	add.w	r0, r6, #128	; 0x80
   42696:	f001 f993 	bl	439c0 <radio_ccm_tx_pkt_set>
}
   4269a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   4269e:	f000 be4d 	b.w	4333c <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   426a2:	2008      	movs	r0, #8
   426a4:	f000 fe1e 	bl	432e4 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   426a8:	4638      	mov	r0, r7
}
   426aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   426ae:	f000 be45 	b.w	4333c <radio_pkt_tx_set>
   426b2:	bf00      	nop

000426b4 <lll_conn_pdu_tx_prep>:
{
   426b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   426b8:	4604      	mov	r4, r0
   426ba:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   426bc:	aa01      	add	r2, sp, #4
{
   426be:	4688      	mov	r8, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   426c0:	6c80      	ldr	r0, [r0, #72]	; 0x48
   426c2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   426c4:	f7f1 fc2c 	bl	33f20 <memq_peek>
	if (lll->empty || !link) {
   426c8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   426cc:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   426ce:	4681      	mov	r9, r0
	if (lll->empty || !link) {
   426d0:	d42a      	bmi.n	42728 <lll_conn_pdu_tx_prep+0x74>
   426d2:	2800      	cmp	r0, #0
   426d4:	d047      	beq.n	42766 <lll_conn_pdu_tx_prep+0xb2>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   426d6:	9f01      	ldr	r7, [sp, #4]
   426d8:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
		if (!lll->packet_tx_head_len) {
   426dc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   426e0:	3704      	adds	r7, #4
   426e2:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   426e4:	b913      	cbnz	r3, 426ec <lll_conn_pdu_tx_prep+0x38>
			lll->packet_tx_head_len = p->len;
   426e6:	786b      	ldrb	r3, [r5, #1]
   426e8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   426ec:	b126      	cbz	r6, 426f8 <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   426ee:	5dba      	ldrb	r2, [r7, r6]
   426f0:	2101      	movs	r1, #1
   426f2:	f361 0201 	bfi	r2, r1, #0, #2
   426f6:	55ba      	strb	r2, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   426f8:	1b9b      	subs	r3, r3, r6
   426fa:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   426fc:	4620      	mov	r0, r4
   426fe:	f7fc f93b 	bl	3e978 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   42702:	786b      	ldrb	r3, [r5, #1]
   42704:	4283      	cmp	r3, r0
   42706:	d922      	bls.n	4274e <lll_conn_pdu_tx_prep+0x9a>
			p->len = max_tx_octets;
   42708:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   4270a:	5dbb      	ldrb	r3, [r7, r6]
   4270c:	f043 0310 	orr.w	r3, r3, #16
   42710:	55bb      	strb	r3, [r7, r6]
		p->rfu = 0U;
   42712:	5dbb      	ldrb	r3, [r7, r6]
		p->resv = 0U;
   42714:	2200      	movs	r2, #0
		p->rfu = 0U;
   42716:	f36f 1347 	bfc	r3, #5, #3
   4271a:	55bb      	strb	r3, [r7, r6]
		p->resv = 0U;
   4271c:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   4271e:	f8c8 5000 	str.w	r5, [r8]
}
   42722:	b003      	add	sp, #12
   42724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   42728:	f043 0304 	orr.w	r3, r3, #4
   4272c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   42730:	f000 fe7e 	bl	43430 <radio_pkt_empty_get>
   42734:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   42736:	f1b9 0f00 	cmp.w	r9, #0
   4273a:	d01b      	beq.n	42774 <lll_conn_pdu_tx_prep+0xc0>
			p->md = 1U;
   4273c:	7803      	ldrb	r3, [r0, #0]
   4273e:	f043 0310 	orr.w	r3, r3, #16
   42742:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   42744:	f8c8 5000 	str.w	r5, [r8]
}
   42748:	b003      	add	sp, #12
   4274a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   4274e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   42750:	f8d9 2000 	ldr.w	r2, [r9]
   42754:	429a      	cmp	r2, r3
			p->md = 1U;
   42756:	5dbb      	ldrb	r3, [r7, r6]
   42758:	bf14      	ite	ne
   4275a:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   4275e:	f36f 1304 	bfceq	r3, #4, #1
   42762:	55bb      	strb	r3, [r7, r6]
   42764:	e7d5      	b.n	42712 <lll_conn_pdu_tx_prep+0x5e>
		lll->empty = 1U;
   42766:	f043 0304 	orr.w	r3, r3, #4
   4276a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   4276e:	f000 fe5f 	bl	43430 <radio_pkt_empty_get>
   42772:	4605      	mov	r5, r0
			p->md = 0U;
   42774:	782b      	ldrb	r3, [r5, #0]
   42776:	f36f 1304 	bfc	r3, #4, #1
   4277a:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   4277c:	f8c8 5000 	str.w	r5, [r8]
}
   42780:	b003      	add	sp, #12
   42782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   42786:	bf00      	nop

00042788 <lll_conn_isr_rx>:
{
   42788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4278c:	b082      	sub	sp, #8
   4278e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   42790:	f000 fe24 	bl	433dc <radio_is_done>
	if (trx_done) {
   42794:	f010 0fff 	tst.w	r0, #255	; 0xff
   42798:	d10a      	bne.n	427b0 <lll_conn_isr_rx+0x28>
	lll_isr_rx_status_reset();
   4279a:	f7fe faaf 	bl	40cfc <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   4279e:	4621      	mov	r1, r4
   427a0:	48b7      	ldr	r0, [pc, #732]	; (42a80 <lll_conn_isr_rx+0x2f8>)
   427a2:	f000 fcf1 	bl	43188 <radio_isr_set>
		radio_disable();
   427a6:	f000 fdeb 	bl	43380 <radio_disable>
}
   427aa:	b002      	add	sp, #8
   427ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = radio_crc_is_valid();
   427b0:	f000 fe34 	bl	4341c <radio_crc_is_valid>
   427b4:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   427b6:	f000 ff3d 	bl	43634 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   427ba:	f7fe fa9f 	bl	40cfc <lll_isr_rx_status_reset>
	trx_cnt++;
   427be:	4ab1      	ldr	r2, [pc, #708]	; (42a84 <lll_conn_isr_rx+0x2fc>)
   427c0:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   427c2:	2001      	movs	r0, #1
	trx_cnt++;
   427c4:	4403      	add	r3, r0
   427c6:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   427c8:	f7f5 fbbc 	bl	37f44 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   427cc:	4607      	mov	r7, r0
   427ce:	2800      	cmp	r0, #0
   427d0:	f000 80dc 	beq.w	4298c <lll_conn_isr_rx+0x204>
	if (crc_ok) {
   427d4:	b9ed      	cbnz	r5, 42812 <lll_conn_isr_rx+0x8a>
		if (crc_expire == 0U) {
   427d6:	4aac      	ldr	r2, [pc, #688]	; (42a88 <lll_conn_isr_rx+0x300>)
   427d8:	7816      	ldrb	r6, [r2, #0]
   427da:	2e00      	cmp	r6, #0
   427dc:	d078      	beq.n	428d0 <lll_conn_isr_rx+0x148>
   427de:	3e01      	subs	r6, #1
	is_empty_pdu_tx_retry = lll->empty;
   427e0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   427e4:	b2f6      	uxtb	r6, r6
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   427e6:	a901      	add	r1, sp, #4
   427e8:	4620      	mov	r0, r4
		crc_expire--;
   427ea:	7016      	strb	r6, [r2, #0]
	is_empty_pdu_tx_retry = lll->empty;
   427ec:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   427f0:	f7ff ff60 	bl	426b4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   427f4:	2e00      	cmp	r6, #0
   427f6:	f040 8140 	bne.w	42a7a <lll_conn_isr_rx+0x2f2>
		radio_isr_set(isr_done, param);
   427fa:	4621      	mov	r1, r4
   427fc:	48a0      	ldr	r0, [pc, #640]	; (42a80 <lll_conn_isr_rx+0x2f8>)
   427fe:	f000 fcc3 	bl	43188 <radio_isr_set>
		} else if (!lll->role) {
   42802:	f994 301d 	ldrsb.w	r3, [r4, #29]
   42806:	2b00      	cmp	r3, #0
   42808:	f280 80b2 	bge.w	42970 <lll_conn_isr_rx+0x1e8>
			radio_switch_complete_and_disable();
   4280c:	f000 feea 	bl	435e4 <radio_switch_complete_and_disable>
   42810:	e073      	b.n	428fa <lll_conn_isr_rx+0x172>
	if (pdu_data_rx->nesn != lll->sn) {
   42812:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42816:	7f3a      	ldrb	r2, [r7, #28]
   42818:	f003 0101 	and.w	r1, r3, #1
   4281c:	f3c2 0080 	ubfx	r0, r2, #2, #1
   42820:	4288      	cmp	r0, r1
   42822:	f000 80c3 	beq.w	429ac <lll_conn_isr_rx+0x224>
		if (lll->role) {
   42826:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   4282a:	f081 0101 	eor.w	r1, r1, #1
   4282e:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   42832:	2a00      	cmp	r2, #0
		lll->sn++;
   42834:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   42838:	da05      	bge.n	42846 <lll_conn_isr_rx+0xbe>
			lll->periph.latency_enabled = 1;
   4283a:	f894 3020 	ldrb.w	r3, [r4, #32]
   4283e:	f043 0304 	orr.w	r3, r3, #4
   42842:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   42846:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   4284a:	f013 0804 	ands.w	r8, r3, #4
   4284e:	f040 80f2 	bne.w	42a36 <lll_conn_isr_rx+0x2ae>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   42852:	aa01      	add	r2, sp, #4
   42854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   42858:	f7f1 fb62 	bl	33f20 <memq_peek>
		if (link) {
   4285c:	4682      	mov	sl, r0
   4285e:	2800      	cmp	r0, #0
   42860:	f000 8100 	beq.w	42a64 <lll_conn_isr_rx+0x2dc>
			pdu_data_tx = (void *)(tx->pdu +
   42864:	9e01      	ldr	r6, [sp, #4]
					       lll->packet_tx_head_offset);
   42866:	f894 905d 	ldrb.w	r9, [r4, #93]	; 0x5d
			pdu_data_tx = (void *)(tx->pdu +
   4286a:	3604      	adds	r6, #4
   4286c:	eb06 0309 	add.w	r3, r6, r9
			pdu_data_tx_len = pdu_data_tx->len;
   42870:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   42872:	b152      	cbz	r2, 4288a <lll_conn_isr_rx+0x102>
				if (lll->enc_tx) {
   42874:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42878:	06d9      	lsls	r1, r3, #27
   4287a:	d506      	bpl.n	4288a <lll_conn_isr_rx+0x102>
					lll->ccm_tx.counter++;
   4287c:	e9d4 3124 	ldrd	r3, r1, [r4, #144]	; 0x90
   42880:	3301      	adds	r3, #1
   42882:	f141 0100 	adc.w	r1, r1, #0
   42886:	e9c4 3124 	strd	r3, r1, [r4, #144]	; 0x90
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   4288a:	444a      	add	r2, r9
			if (offset < lll->packet_tx_head_len) {
   4288c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   42890:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   42892:	429a      	cmp	r2, r3
   42894:	f0c0 80ed 	bcc.w	42a72 <lll_conn_isr_rx+0x2ea>
			} else if (offset == lll->packet_tx_head_len) {
   42898:	f000 8138 	beq.w	42b0c <lll_conn_isr_rx+0x384>
				LL_ASSERT(0);
   4289c:	f240 33a3 	movw	r3, #931	; 0x3a3
   428a0:	4a7a      	ldr	r2, [pc, #488]	; (42a8c <lll_conn_isr_rx+0x304>)
   428a2:	497b      	ldr	r1, [pc, #492]	; (42a90 <lll_conn_isr_rx+0x308>)
   428a4:	487b      	ldr	r0, [pc, #492]	; (42a94 <lll_conn_isr_rx+0x30c>)
   428a6:	f007 fc19 	bl	4a0dc <printk>
   428aa:	4040      	eors	r0, r0
   428ac:	f380 8811 	msr	BASEPRI, r0
   428b0:	f04f 0003 	mov.w	r0, #3
   428b4:	df02      	svc	2
	tx_release = NULL;
   428b6:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   428b8:	f994 301d 	ldrsb.w	r3, [r4, #29]
   428bc:	2b00      	cmp	r3, #0
   428be:	f2c0 8118 	blt.w	42af2 <lll_conn_isr_rx+0x36a>
			    !pdu_data_rx->md) {
   428c2:	7f3a      	ldrb	r2, [r7, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   428c4:	06d3      	lsls	r3, r2, #27
   428c6:	f140 8118 	bpl.w	42afa <lll_conn_isr_rx+0x372>
   428ca:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   428ce:	e070      	b.n	429b2 <lll_conn_isr_rx+0x22a>
		crc_expire--;
   428d0:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   428d2:	a901      	add	r1, sp, #4
   428d4:	4620      	mov	r0, r4
		crc_expire--;
   428d6:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   428d8:	f7ff feec 	bl	426b4 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   428dc:	2096      	movs	r0, #150	; 0x96
   428de:	f000 ff01 	bl	436e4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   428e2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   428e6:	f000 0007 	and.w	r0, r0, #7
   428ea:	f000 fe1d 	bl	43528 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   428ee:	4621      	mov	r1, r4
   428f0:	4869      	ldr	r0, [pc, #420]	; (42a98 <lll_conn_isr_rx+0x310>)
   428f2:	f000 fc49 	bl	43188 <radio_isr_set>
		radio_tmr_end_capture();
   428f6:	f001 f80f 	bl	43918 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   428fa:	9901      	ldr	r1, [sp, #4]
   428fc:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
   42900:	780b      	ldrb	r3, [r1, #0]
	pdu_data_tx->nesn = lll->nesn;
   42902:	4602      	mov	r2, r0
	pdu_data_tx->sn = lll->sn;
   42904:	f3c0 0000 	ubfx	r0, r0, #0, #1
   42908:	f360 03c3 	bfi	r3, r0, #3, #1
	pdu_data_tx->nesn = lll->nesn;
   4290c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   42910:	f362 0382 	bfi	r3, r2, #2, #1
   42914:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   42916:	4620      	mov	r0, r4
   42918:	f7ff fea0 	bl	4265c <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   4291c:	f000 fd54 	bl	433c8 <radio_is_ready>
   42920:	2800      	cmp	r0, #0
   42922:	d16b      	bne.n	429fc <lll_conn_isr_rx+0x274>
	if (!radio_tmr_aa_restore()) {
   42924:	f000 ffec 	bl	43900 <radio_tmr_aa_restore>
   42928:	b170      	cbz	r0, 42948 <lll_conn_isr_rx+0x1c0>
	if (tx_release) {
   4292a:	b19d      	cbz	r5, 42954 <lll_conn_isr_rx+0x1cc>
		LL_ASSERT(lll->handle != 0xFFFF);
   4292c:	89a0      	ldrh	r0, [r4, #12]
   4292e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   42932:	4298      	cmp	r0, r3
   42934:	d070      	beq.n	42a18 <lll_conn_isr_rx+0x290>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   42936:	4629      	mov	r1, r5
   42938:	f7fb fdd6 	bl	3e4e8 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   4293c:	b96e      	cbnz	r6, 4295a <lll_conn_isr_rx+0x1d2>
		ull_rx_sched();
   4293e:	f7f5 fb49 	bl	37fd4 <ull_rx_sched>
}
   42942:	b002      	add	sp, #8
   42944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   42948:	f000 ffce 	bl	438e8 <radio_tmr_aa_get>
   4294c:	f000 ffd2 	bl	438f4 <radio_tmr_aa_save>
	if (tx_release) {
   42950:	2d00      	cmp	r5, #0
   42952:	d1eb      	bne.n	4292c <lll_conn_isr_rx+0x1a4>
	if (is_rx_enqueue) {
   42954:	2e00      	cmp	r6, #0
   42956:	f43f af28 	beq.w	427aa <lll_conn_isr_rx+0x22>
		ull_pdu_rx_alloc();
   4295a:	f7f5 fb13 	bl	37f84 <ull_pdu_rx_alloc>
		node_rx->hdr.handle = lll->handle;
   4295e:	89a3      	ldrh	r3, [r4, #12]
   42960:	80fb      	strh	r3, [r7, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   42962:	2303      	movs	r3, #3
   42964:	713b      	strb	r3, [r7, #4]
		ull_rx_put(node_rx->hdr.link, node_rx);
   42966:	4639      	mov	r1, r7
   42968:	6838      	ldr	r0, [r7, #0]
   4296a:	f7f5 fb23 	bl	37fb4 <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   4296e:	e7e6      	b.n	4293e <lll_conn_isr_rx+0x1b6>
			radio_disable();
   42970:	f000 fd06 	bl	43380 <radio_disable>
			LL_ASSERT(!radio_is_ready());
   42974:	f000 fd28 	bl	433c8 <radio_is_ready>
   42978:	2800      	cmp	r0, #0
   4297a:	f040 80a9 	bne.w	42ad0 <lll_conn_isr_rx+0x348>
			lll->empty = is_empty_pdu_tx_retry;
   4297e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42982:	f369 0382 	bfi	r3, r9, #2, #1
   42986:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			goto lll_conn_isr_rx_exit;
   4298a:	e7cb      	b.n	42924 <lll_conn_isr_rx+0x19c>
	LL_ASSERT(node_rx);
   4298c:	23f2      	movs	r3, #242	; 0xf2
   4298e:	4a3f      	ldr	r2, [pc, #252]	; (42a8c <lll_conn_isr_rx+0x304>)
   42990:	4942      	ldr	r1, [pc, #264]	; (42a9c <lll_conn_isr_rx+0x314>)
   42992:	4840      	ldr	r0, [pc, #256]	; (42a94 <lll_conn_isr_rx+0x30c>)
   42994:	f007 fba2 	bl	4a0dc <printk>
   42998:	4040      	eors	r0, r0
   4299a:	f380 8811 	msr	BASEPRI, r0
   4299e:	f04f 0003 	mov.w	r0, #3
   429a2:	df02      	svc	2
	if (crc_ok) {
   429a4:	2d00      	cmp	r5, #0
   429a6:	f43f af16 	beq.w	427d6 <lll_conn_isr_rx+0x4e>
   429aa:	e732      	b.n	42812 <lll_conn_isr_rx+0x8a>
	is_done = 0U;
   429ac:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   429b0:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   429b2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   429b6:	f3c3 0140 	ubfx	r1, r3, #1, #1
   429ba:	428a      	cmp	r2, r1
   429bc:	d076      	beq.n	42aac <lll_conn_isr_rx+0x324>
	is_rx_enqueue = 0U;
   429be:	2600      	movs	r6, #0
		crc_expire = 0U;
   429c0:	4931      	ldr	r1, [pc, #196]	; (42a88 <lll_conn_isr_rx+0x300>)
		crc_valid = 1U;
   429c2:	4a37      	ldr	r2, [pc, #220]	; (42aa0 <lll_conn_isr_rx+0x318>)
		crc_expire = 0U;
   429c4:	2000      	movs	r0, #0
   429c6:	7008      	strb	r0, [r1, #0]
	is_empty_pdu_tx_retry = lll->empty;
   429c8:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   429cc:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   429ce:	2301      	movs	r3, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   429d0:	4620      	mov	r0, r4
		crc_valid = 1U;
   429d2:	7013      	strb	r3, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   429d4:	f7ff fe6e 	bl	426b4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   429d8:	f1b8 0f00 	cmp.w	r8, #0
   429dc:	f47f af0d 	bne.w	427fa <lll_conn_isr_rx+0x72>
   429e0:	7f3b      	ldrb	r3, [r7, #28]
   429e2:	06d9      	lsls	r1, r3, #27
   429e4:	f53f af7a 	bmi.w	428dc <lll_conn_isr_rx+0x154>
			      (pdu_data_tx->md == 0) &&
   429e8:	9b01      	ldr	r3, [sp, #4]
   429ea:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   429ec:	06d2      	lsls	r2, r2, #27
   429ee:	f53f af75 	bmi.w	428dc <lll_conn_isr_rx+0x154>
			      (pdu_data_tx->md == 0) &&
   429f2:	785b      	ldrb	r3, [r3, #1]
   429f4:	2b00      	cmp	r3, #0
   429f6:	f43f af00 	beq.w	427fa <lll_conn_isr_rx+0x72>
   429fa:	e76f      	b.n	428dc <lll_conn_isr_rx+0x154>
	LL_ASSERT(!radio_is_ready());
   429fc:	f240 1369 	movw	r3, #361	; 0x169
   42a00:	4a22      	ldr	r2, [pc, #136]	; (42a8c <lll_conn_isr_rx+0x304>)
   42a02:	4928      	ldr	r1, [pc, #160]	; (42aa4 <lll_conn_isr_rx+0x31c>)
   42a04:	4823      	ldr	r0, [pc, #140]	; (42a94 <lll_conn_isr_rx+0x30c>)
   42a06:	f007 fb69 	bl	4a0dc <printk>
   42a0a:	4040      	eors	r0, r0
   42a0c:	f380 8811 	msr	BASEPRI, r0
   42a10:	f04f 0003 	mov.w	r0, #3
   42a14:	df02      	svc	2
   42a16:	e785      	b.n	42924 <lll_conn_isr_rx+0x19c>
		LL_ASSERT(lll->handle != 0xFFFF);
   42a18:	f44f 73bc 	mov.w	r3, #376	; 0x178
   42a1c:	4a1b      	ldr	r2, [pc, #108]	; (42a8c <lll_conn_isr_rx+0x304>)
   42a1e:	4922      	ldr	r1, [pc, #136]	; (42aa8 <lll_conn_isr_rx+0x320>)
   42a20:	481c      	ldr	r0, [pc, #112]	; (42a94 <lll_conn_isr_rx+0x30c>)
   42a22:	f007 fb5b 	bl	4a0dc <printk>
   42a26:	4040      	eors	r0, r0
   42a28:	f380 8811 	msr	BASEPRI, r0
   42a2c:	f04f 0003 	mov.w	r0, #3
   42a30:	df02      	svc	2
   42a32:	89a0      	ldrh	r0, [r4, #12]
   42a34:	e77f      	b.n	42936 <lll_conn_isr_rx+0x1ae>
			lll->empty = 0;
   42a36:	f36f 0382 	bfc	r3, #2, #1
   42a3a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   42a3e:	f000 fcf7 	bl	43430 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   42a42:	f994 301d 	ldrsb.w	r3, [r4, #29]
   42a46:	2b00      	cmp	r3, #0
   42a48:	db0c      	blt.n	42a64 <lll_conn_isr_rx+0x2dc>
			    !pdu_data_rx->md) {
   42a4a:	7f3a      	ldrb	r2, [r7, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   42a4c:	f012 0510 	ands.w	r5, r2, #16
   42a50:	d109      	bne.n	42a66 <lll_conn_isr_rx+0x2de>
				*is_done = !pdu_data_tx->md;
   42a52:	f890 8000 	ldrb.w	r8, [r0]
   42a56:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42a5a:	f088 0810 	eor.w	r8, r8, #16
   42a5e:	f3c8 1800 	ubfx	r8, r8, #4, #1
   42a62:	e7a6      	b.n	429b2 <lll_conn_isr_rx+0x22a>
   42a64:	7f3a      	ldrb	r2, [r7, #28]
   42a66:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	is_done = 0U;
   42a6a:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   42a6e:	4645      	mov	r5, r8
   42a70:	e79f      	b.n	429b2 <lll_conn_isr_rx+0x22a>
				lll->packet_tx_head_offset = offset;
   42a72:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
	tx_release = NULL;
   42a76:	2500      	movs	r5, #0
   42a78:	e71e      	b.n	428b8 <lll_conn_isr_rx+0x130>
	is_rx_enqueue = 0U;
   42a7a:	462e      	mov	r6, r5
   42a7c:	e72e      	b.n	428dc <lll_conn_isr_rx+0x154>
   42a7e:	bf00      	nop
   42a80:	000423cd 	.word	0x000423cd
   42a84:	20006c18 	.word	0x20006c18
   42a88:	20006da0 	.word	0x20006da0
   42a8c:	000539ac 	.word	0x000539ac
   42a90:	00052dd8 	.word	0x00052dd8
   42a94:	00052d50 	.word	0x00052d50
   42a98:	000425a5 	.word	0x000425a5
   42a9c:	0005392c 	.word	0x0005392c
   42aa0:	20006da1 	.word	0x20006da1
   42aa4:	00053934 	.word	0x00053934
   42aa8:	00053a00 	.word	0x00053a00
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   42aac:	2003      	movs	r0, #3
   42aae:	f7f5 fa49 	bl	37f44 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   42ab2:	b1d8      	cbz	r0, 42aec <lll_conn_isr_rx+0x364>
		lll->nesn++;
   42ab4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42ab8:	f083 0302 	eor.w	r3, r3, #2
   42abc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   42ac0:	7f7b      	ldrb	r3, [r7, #29]
   42ac2:	b19b      	cbz	r3, 42aec <lll_conn_isr_rx+0x364>
			if (lll->enc_rx) {
   42ac4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42ac8:	0718      	lsls	r0, r3, #28
   42aca:	d42e      	bmi.n	42b2a <lll_conn_isr_rx+0x3a2>
			*is_rx_enqueue = 1U;
   42acc:	2601      	movs	r6, #1
   42ace:	e777      	b.n	429c0 <lll_conn_isr_rx+0x238>
			LL_ASSERT(!radio_is_ready());
   42ad0:	f44f 7398 	mov.w	r3, #304	; 0x130
   42ad4:	4a3d      	ldr	r2, [pc, #244]	; (42bcc <lll_conn_isr_rx+0x444>)
   42ad6:	493e      	ldr	r1, [pc, #248]	; (42bd0 <lll_conn_isr_rx+0x448>)
   42ad8:	483e      	ldr	r0, [pc, #248]	; (42bd4 <lll_conn_isr_rx+0x44c>)
   42ada:	f007 faff 	bl	4a0dc <printk>
   42ade:	4040      	eors	r0, r0
   42ae0:	f380 8811 	msr	BASEPRI, r0
   42ae4:	f04f 0003 	mov.w	r0, #3
   42ae8:	df02      	svc	2
   42aea:	e748      	b.n	4297e <lll_conn_isr_rx+0x1f6>
   42aec:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42af0:	e765      	b.n	429be <lll_conn_isr_rx+0x236>
   42af2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42af6:	7f3a      	ldrb	r2, [r7, #28]
   42af8:	e75b      	b.n	429b2 <lll_conn_isr_rx+0x22a>
				*is_done = !pdu_data_tx->md;
   42afa:	f816 8009 	ldrb.w	r8, [r6, r9]
   42afe:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42b02:	f088 0810 	eor.w	r8, r8, #16
   42b06:	f3c8 1800 	ubfx	r8, r8, #4, #1
   42b0a:	e752      	b.n	429b2 <lll_conn_isr_rx+0x22a>
				lll->packet_tx_head_len = 0;
   42b0c:	2200      	movs	r2, #0
   42b0e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   42b12:	f104 0148 	add.w	r1, r4, #72	; 0x48
   42b16:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   42b18:	f7f1 fa0a 	bl	33f30 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   42b1c:	9d01      	ldr	r5, [sp, #4]
   42b1e:	682b      	ldr	r3, [r5, #0]
   42b20:	f8ca 3000 	str.w	r3, [sl]
				tx->next = link;
   42b24:	f8c5 a000 	str.w	sl, [r5]
				FORCE_MD_CNT_SET();
   42b28:	e6c6      	b.n	428b8 <lll_conn_isr_rx+0x130>
				done = radio_ccm_is_done();
   42b2a:	f000 ff71 	bl	43a10 <radio_ccm_is_done>
				LL_ASSERT(done);
   42b2e:	b320      	cbz	r0, 42b7a <lll_conn_isr_rx+0x3f2>
				bool mic_failure = !radio_ccm_mic_is_valid();
   42b30:	f000 ff90 	bl	43a54 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   42b34:	b188      	cbz	r0, 42b5a <lll_conn_isr_rx+0x3d2>
   42b36:	f104 006f 	add.w	r0, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   42b3a:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   42b3e:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   42b42:	4925      	ldr	r1, [pc, #148]	; (42bd8 <lll_conn_isr_rx+0x450>)
				lll->ccm_rx.counter++;
   42b44:	3301      	adds	r3, #1
   42b46:	f142 0200 	adc.w	r2, r2, #0
   42b4a:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   42b4e:	2601      	movs	r6, #1
				lll->ccm_rx.counter++;
   42b50:	6042      	str	r2, [r0, #4]
				mic_state = LLL_CONN_MIC_PASS;
   42b52:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42b56:	700e      	strb	r6, [r1, #0]
		if (err) {
   42b58:	e732      	b.n	429c0 <lll_conn_isr_rx+0x238>
				    lll->ccm_rx.counter == 0 &&
   42b5a:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   42b5e:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   42b62:	4313      	orrs	r3, r2
   42b64:	d104      	bne.n	42b70 <lll_conn_isr_rx+0x3e8>
				    (pdu_data_rx->ll_id ==
   42b66:	7f3b      	ldrb	r3, [r7, #28]
				    lll->ccm_rx.counter == 0 &&
   42b68:	f003 0303 	and.w	r3, r3, #3
   42b6c:	2b03      	cmp	r3, #3
   42b6e:	d012      	beq.n	42b96 <lll_conn_isr_rx+0x40e>
					mic_state = LLL_CONN_MIC_FAIL;
   42b70:	4b19      	ldr	r3, [pc, #100]	; (42bd8 <lll_conn_isr_rx+0x450>)
   42b72:	2202      	movs	r2, #2
   42b74:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   42b76:	2600      	movs	r6, #0
   42b78:	e6d4      	b.n	42924 <lll_conn_isr_rx+0x19c>
				LL_ASSERT(done);
   42b7a:	f240 33be 	movw	r3, #958	; 0x3be
   42b7e:	4a13      	ldr	r2, [pc, #76]	; (42bcc <lll_conn_isr_rx+0x444>)
   42b80:	4916      	ldr	r1, [pc, #88]	; (42bdc <lll_conn_isr_rx+0x454>)
   42b82:	4814      	ldr	r0, [pc, #80]	; (42bd4 <lll_conn_isr_rx+0x44c>)
   42b84:	f007 faaa 	bl	4a0dc <printk>
   42b88:	4040      	eors	r0, r0
   42b8a:	f380 8811 	msr	BASEPRI, r0
   42b8e:	f04f 0003 	mov.w	r0, #3
   42b92:	df02      	svc	2
   42b94:	e7cc      	b.n	42b30 <lll_conn_isr_rx+0x3a8>
						radio_pkt_scratch_get();
   42b96:	f000 fc4f 	bl	43438 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   42b9a:	7842      	ldrb	r2, [r0, #1]
   42b9c:	2a27      	cmp	r2, #39	; 0x27
						radio_pkt_scratch_get();
   42b9e:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   42ba0:	d8e6      	bhi.n	42b70 <lll_conn_isr_rx+0x3e8>
						memcpy(pdu_data_rx,
   42ba2:	3203      	adds	r2, #3
   42ba4:	f107 001c 	add.w	r0, r7, #28
   42ba8:	f009 fba0 	bl	4c2ec <memcpy>
						lll->ccm_rx.counter--;
   42bac:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   42bb0:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   42bb4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   42bb8:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   42bbc:	f104 006f 	add.w	r0, r4, #111	; 0x6f
   42bc0:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   42bc4:	f8c4 2073 	str.w	r2, [r4, #115]	; 0x73
				if (mic_failure) {
   42bc8:	e7b7      	b.n	42b3a <lll_conn_isr_rx+0x3b2>
   42bca:	bf00      	nop
   42bcc:	000539ac 	.word	0x000539ac
   42bd0:	00053934 	.word	0x00053934
   42bd4:	00052d50 	.word	0x00052d50
   42bd8:	20006da2 	.word	0x20006da2
   42bdc:	000539f8 	.word	0x000539f8

00042be0 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   42be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   42be4:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   42be6:	89a2      	ldrh	r2, [r4, #12]
   42be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   42bec:	429a      	cmp	r2, r3
{
   42bee:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   42bf0:	f000 80d6 	beq.w	42da0 <prepare_cb+0x1c0>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   42bf4:	4605      	mov	r5, r0
   42bf6:	f7ff fc4b 	bl	42490 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   42bfa:	8929      	ldrh	r1, [r5, #8]
   42bfc:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   42bfe:	8ae0      	ldrh	r0, [r4, #22]
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   42c00:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   42c02:	440a      	add	r2, r1
   42c04:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   42c06:	4410      	add	r0, r2
	lll->latency_prepare = 0;
   42c08:	2100      	movs	r1, #0
	event_counter = lll->event_counter + lll->latency_event;
   42c0a:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   42c0c:	1c46      	adds	r6, r0, #1
	lll->latency_prepare = 0;
   42c0e:	8261      	strh	r1, [r4, #18]
	if (lll->data_chan_sel) {
   42c10:	0659      	lsls	r1, r3, #25
	lll->event_counter = (event_counter + 1);
   42c12:	82e6      	strh	r6, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   42c14:	82a2      	strh	r2, [r4, #20]
	if (lll->data_chan_sel) {
   42c16:	f104 0618 	add.w	r6, r4, #24
   42c1a:	f100 8093 	bmi.w	42d44 <prepare_cb+0x164>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   42c1e:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   42c22:	7fa1      	ldrb	r1, [r4, #30]
   42c24:	9000      	str	r0, [sp, #0]
   42c26:	4633      	mov	r3, r6
   42c28:	f104 001f 	add.w	r0, r4, #31
   42c2c:	f7fc fbb4 	bl	3f398 <lll_chan_sel_1>
   42c30:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   42c32:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
		lll->periph.window_widening_prepare_us;
	lll->periph.window_widening_prepare_us = 0;
	if (lll->periph.window_widening_event_us >
	    lll->periph.window_widening_max_us) {
   42c36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   42c38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	lll->periph.window_widening_event_us +=
   42c3a:	4401      	add	r1, r0
		lll->periph.window_widening_event_us =
   42c3c:	428a      	cmp	r2, r1
   42c3e:	bf28      	it	cs
   42c40:	460a      	movcs	r2, r1
   42c42:	6322      	str	r2, [r4, #48]	; 0x30
	lll->periph.window_size_event_us +=
   42c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   42c46:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	lll->periph.window_size_event_us +=
   42c4a:	440b      	add	r3, r1
	if (!lll->empty) {
   42c4c:	f012 0204 	ands.w	r2, r2, #4
	lll->periph.window_widening_prepare_us = 0;
   42c50:	f04f 0100 	mov.w	r1, #0
	lll->periph.window_size_event_us +=
   42c54:	63a3      	str	r3, [r4, #56]	; 0x38
	lll->periph.window_widening_prepare_us = 0;
   42c56:	62e1      	str	r1, [r4, #44]	; 0x2c
	lll->periph.window_size_prepare_us = 0;
   42c58:	6361      	str	r1, [r4, #52]	; 0x34
	if (!lll->empty) {
   42c5a:	f000 8093 	beq.w	42d84 <prepare_cb+0x1a4>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   42c5e:	f000 fad5 	bl	4320c <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   42c62:	2000      	movs	r0, #0
   42c64:	f000 fb06 	bl	43274 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   42c68:	4620      	mov	r0, r4
   42c6a:	f7ff fc55 	bl	42518 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   42c6e:	1d20      	adds	r0, r4, #4
   42c70:	f000 fb1e 	bl	432b0 <radio_aa_set>
	return ((uint16_t)src[1] << 8) | src[0];
   42c74:	7a62      	ldrb	r2, [r4, #9]
   42c76:	7a23      	ldrb	r3, [r4, #8]
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   42c78:	7aa1      	ldrb	r1, [r4, #10]
   42c7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   42c7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   42c82:	f240 605b 	movw	r0, #1627	; 0x65b
   42c86:	f000 fbbd 	bl	43404 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   42c8a:	4630      	mov	r0, r6
   42c8c:	f7fd ffe8 	bl	40c60 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   42c90:	4621      	mov	r1, r4
   42c92:	4847      	ldr	r0, [pc, #284]	; (42db0 <prepare_cb+0x1d0>)
   42c94:	f000 fa78 	bl	43188 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   42c98:	2096      	movs	r0, #150	; 0x96
   42c9a:	f000 fd23 	bl	436e4 <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   42c9e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   42ca2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42ca6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   42caa:	2100      	movs	r1, #0
   42cac:	f002 0207 	and.w	r2, r2, #7
   42cb0:	f000 0007 	and.w	r0, r0, #7
   42cb4:	f000 fc82 	bl	435bc <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   42cb8:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   42cba:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   42cbc:	4638      	mov	r0, r7
   42cbe:	f7fd ffb1 	bl	40c24 <lll_event_offset_get>
   42cc2:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   42cc4:	686a      	ldr	r2, [r5, #4]
   42cc6:	f106 0109 	add.w	r1, r6, #9
   42cca:	2000      	movs	r0, #0
   42ccc:	f000 fd16 	bl	436fc <radio_tmr_start>
   42cd0:	4680      	mov	r8, r0

	radio_tmr_aa_capture();
   42cd2:	f000 fdf5 	bl	438c0 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   42cd6:	2000      	movs	r0, #0
   42cd8:	f000 fe0c 	bl	438f4 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   42cdc:	6b25      	ldr	r5, [r4, #48]	; 0x30
	hcto = remainder_us +
   42cde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42ce0:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   42ce4:	3530      	adds	r5, #48	; 0x30
	hcto = remainder_us +
   42ce6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42cea:	f000 0007 	and.w	r0, r0, #7
   42cee:	2101      	movs	r1, #1
	hcto = remainder_us +
   42cf0:	eb03 0508 	add.w	r5, r3, r8
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42cf4:	f000 fb30 	bl	43358 <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   42cf8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   42cfc:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
   42d00:	2b02      	cmp	r3, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   42d02:	4405      	add	r5, r0
   42d04:	d03c      	beq.n	42d80 <prepare_cb+0x1a0>
		return 40;
   42d06:	2b04      	cmp	r3, #4
   42d08:	bf0c      	ite	eq
   42d0a:	f44f 72bc 	moveq.w	r2, #376	; 0x178
   42d0e:	2228      	movne	r2, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   42d10:	2101      	movs	r1, #1
   42d12:	4618      	mov	r0, r3
	hcto += addr_us_get(lll->phy_rx);
   42d14:	4415      	add	r5, r2
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   42d16:	f000 fb21 	bl	4335c <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   42d1a:	4428      	add	r0, r5
   42d1c:	f000 fdc2 	bl	438a4 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   42d20:	7b21      	ldrb	r1, [r4, #12]
   42d22:	3105      	adds	r1, #5
   42d24:	4632      	mov	r2, r6
   42d26:	4638      	mov	r0, r7
   42d28:	b2c9      	uxtb	r1, r1
   42d2a:	f7fd ff89 	bl	40c40 <lll_preempt_calc>
   42d2e:	b188      	cbz	r0, 42d54 <prepare_cb+0x174>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   42d30:	4621      	mov	r1, r4
   42d32:	4820      	ldr	r0, [pc, #128]	; (42db4 <prepare_cb+0x1d4>)
   42d34:	f000 fa28 	bl	43188 <radio_isr_set>
		radio_disable();
   42d38:	f000 fb22 	bl	43380 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   42d3c:	2000      	movs	r0, #0
   42d3e:	b002      	add	sp, #8
   42d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   42d44:	4632      	mov	r2, r6
   42d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   42d4a:	8be1      	ldrh	r1, [r4, #30]
   42d4c:	f7fc fb6e 	bl	3f42c <lll_chan_sel_2>
   42d50:	4606      	mov	r6, r0
   42d52:	e76e      	b.n	42c32 <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   42d54:	4620      	mov	r0, r4
   42d56:	f7fd feff 	bl	40b58 <lll_prepare_done>
		LL_ASSERT(!ret);
   42d5a:	2800      	cmp	r0, #0
   42d5c:	d0ee      	beq.n	42d3c <prepare_cb+0x15c>
   42d5e:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   42d62:	4a15      	ldr	r2, [pc, #84]	; (42db8 <prepare_cb+0x1d8>)
   42d64:	4915      	ldr	r1, [pc, #84]	; (42dbc <prepare_cb+0x1dc>)
   42d66:	4816      	ldr	r0, [pc, #88]	; (42dc0 <prepare_cb+0x1e0>)
   42d68:	f007 f9b8 	bl	4a0dc <printk>
   42d6c:	4040      	eors	r0, r0
   42d6e:	f380 8811 	msr	BASEPRI, r0
   42d72:	f04f 0003 	mov.w	r0, #3
   42d76:	df02      	svc	2
}
   42d78:	2000      	movs	r0, #0
   42d7a:	b002      	add	sp, #8
   42d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 24;
   42d80:	2218      	movs	r2, #24
   42d82:	e7c5      	b.n	42d10 <prepare_cb+0x130>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   42d84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   42d88:	f7f1 f8ca 	bl	33f20 <memq_peek>
		if (!link) {
   42d8c:	2800      	cmp	r0, #0
   42d8e:	f47f af66 	bne.w	42c5e <prepare_cb+0x7e>
			lll->empty = 1U;
   42d92:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   42d96:	f043 0304 	orr.w	r3, r3, #4
   42d9a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   42d9e:	e75e      	b.n	42c5e <prepare_cb+0x7e>
		radio_isr_set(lll_isr_early_abort, lll);
   42da0:	4621      	mov	r1, r4
   42da2:	4808      	ldr	r0, [pc, #32]	; (42dc4 <prepare_cb+0x1e4>)
   42da4:	f000 f9f0 	bl	43188 <radio_isr_set>
		radio_disable();
   42da8:	f000 faea 	bl	43380 <radio_disable>
		return 0;
   42dac:	e7c6      	b.n	42d3c <prepare_cb+0x15c>
   42dae:	bf00      	nop
   42db0:	00042789 	.word	0x00042789
   42db4:	00040d99 	.word	0x00040d99
   42db8:	00053a18 	.word	0x00053a18
   42dbc:	00052ed8 	.word	0x00052ed8
   42dc0:	00052d50 	.word	0x00052d50
   42dc4:	00040dad 	.word	0x00040dad

00042dc8 <lll_periph_prepare>:
{
   42dc8:	b530      	push	{r4, r5, lr}
   42dca:	b083      	sub	sp, #12
   42dcc:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   42dce:	f7fe f933 	bl	41038 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   42dd2:	2800      	cmp	r0, #0
   42dd4:	db25      	blt.n	42e22 <lll_periph_prepare+0x5a>
	lll = p->param;
   42dd6:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   42dd8:	8922      	ldrh	r2, [r4, #8]
   42dda:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	    lll->periph.window_widening_max_us) {
   42ddc:	e9d1 050a 	ldrd	r0, r5, [r1, #40]	; 0x28
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   42de0:	fb02 3203 	mla	r2, r2, r3, r3
	lll->periph.window_widening_prepare_us +=
   42de4:	1953      	adds	r3, r2, r5
		lll->periph.window_widening_prepare_us =
   42de6:	4283      	cmp	r3, r0
   42de8:	bf28      	it	cs
   42dea:	4603      	movcs	r3, r0
   42dec:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   42dee:	4a13      	ldr	r2, [pc, #76]	; (42e3c <lll_periph_prepare+0x74>)
   42df0:	9400      	str	r4, [sp, #0]
   42df2:	2300      	movs	r3, #0
   42df4:	4912      	ldr	r1, [pc, #72]	; (42e40 <lll_periph_prepare+0x78>)
   42df6:	4813      	ldr	r0, [pc, #76]	; (42e44 <lll_periph_prepare+0x7c>)
   42df8:	f7f5 fd38 	bl	3886c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   42dfc:	b108      	cbz	r0, 42e02 <lll_periph_prepare+0x3a>
   42dfe:	3077      	adds	r0, #119	; 0x77
   42e00:	d101      	bne.n	42e06 <lll_periph_prepare+0x3e>
}
   42e02:	b003      	add	sp, #12
   42e04:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   42e06:	235e      	movs	r3, #94	; 0x5e
   42e08:	4a0f      	ldr	r2, [pc, #60]	; (42e48 <lll_periph_prepare+0x80>)
   42e0a:	4910      	ldr	r1, [pc, #64]	; (42e4c <lll_periph_prepare+0x84>)
   42e0c:	4810      	ldr	r0, [pc, #64]	; (42e50 <lll_periph_prepare+0x88>)
   42e0e:	f007 f965 	bl	4a0dc <printk>
   42e12:	4040      	eors	r0, r0
   42e14:	f380 8811 	msr	BASEPRI, r0
   42e18:	f04f 0003 	mov.w	r0, #3
   42e1c:	df02      	svc	2
}
   42e1e:	b003      	add	sp, #12
   42e20:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(err >= 0);
   42e22:	234d      	movs	r3, #77	; 0x4d
   42e24:	4a08      	ldr	r2, [pc, #32]	; (42e48 <lll_periph_prepare+0x80>)
   42e26:	490b      	ldr	r1, [pc, #44]	; (42e54 <lll_periph_prepare+0x8c>)
   42e28:	4809      	ldr	r0, [pc, #36]	; (42e50 <lll_periph_prepare+0x88>)
   42e2a:	f007 f957 	bl	4a0dc <printk>
   42e2e:	4040      	eors	r0, r0
   42e30:	f380 8811 	msr	BASEPRI, r0
   42e34:	f04f 0003 	mov.w	r0, #3
   42e38:	df02      	svc	2
   42e3a:	e7cc      	b.n	42dd6 <lll_periph_prepare+0xe>
   42e3c:	00042be1 	.word	0x00042be1
   42e40:	000424b9 	.word	0x000424b9
   42e44:	00040c1d 	.word	0x00040c1d
   42e48:	00053a18 	.word	0x00053a18
   42e4c:	0005394c 	.word	0x0005394c
   42e50:	00052d50 	.word	0x00052d50
   42e54:	0005375c 	.word	0x0005375c

00042e58 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   42e58:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   42e5a:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   42e5c:	89a2      	ldrh	r2, [r4, #12]
   42e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   42e62:	429a      	cmp	r2, r3
{
   42e64:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   42e66:	f000 8092 	beq.w	42f8e <prepare_cb+0x136>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   42e6a:	4605      	mov	r5, r0
   42e6c:	f7ff fb10 	bl	42490 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   42e70:	8929      	ldrh	r1, [r5, #8]
   42e72:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   42e74:	8ae0      	ldrh	r0, [r4, #22]
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   42e76:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   42e78:	440a      	add	r2, r1
   42e7a:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   42e7c:	4410      	add	r0, r2
	lll->latency_prepare = 0;
   42e7e:	2100      	movs	r1, #0
	event_counter = lll->event_counter + lll->latency_event;
   42e80:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   42e82:	1c46      	adds	r6, r0, #1
	lll->latency_prepare = 0;
   42e84:	8261      	strh	r1, [r4, #18]
	if (lll->data_chan_sel) {
   42e86:	0659      	lsls	r1, r3, #25
	lll->event_counter = (event_counter + 1);
   42e88:	82e6      	strh	r6, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   42e8a:	82a2      	strh	r2, [r4, #20]
	if (lll->data_chan_sel) {
   42e8c:	f104 0618 	add.w	r6, r4, #24
   42e90:	d461      	bmi.n	42f56 <prepare_cb+0xfe>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   42e92:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   42e96:	7fa1      	ldrb	r1, [r4, #30]
   42e98:	9000      	str	r0, [sp, #0]
   42e9a:	4633      	mov	r3, r6
   42e9c:	f104 001f 	add.w	r0, r4, #31
   42ea0:	f7fc fa7a 	bl	3f398 <lll_chan_sel_1>
   42ea4:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   42ea6:	a903      	add	r1, sp, #12
   42ea8:	4620      	mov	r0, r4
   42eaa:	f7ff fc03 	bl	426b4 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   42eae:	9803      	ldr	r0, [sp, #12]
   42eb0:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
   42eb4:	7803      	ldrb	r3, [r0, #0]
	pdu_data_tx->nesn = lll->nesn;
   42eb6:	460a      	mov	r2, r1
	pdu_data_tx->sn = lll->sn;
   42eb8:	f3c1 0100 	ubfx	r1, r1, #0, #1
   42ebc:	f361 03c3 	bfi	r3, r1, #3, #1
	pdu_data_tx->nesn = lll->nesn;
   42ec0:	f3c2 0240 	ubfx	r2, r2, #1, #1
   42ec4:	f362 0382 	bfi	r3, r2, #2, #1
   42ec8:	7003      	strb	r3, [r0, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   42eca:	f000 f99f 	bl	4320c <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   42ece:	2000      	movs	r0, #0
   42ed0:	f000 f9d0 	bl	43274 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   42ed4:	1d20      	adds	r0, r4, #4
   42ed6:	f000 f9eb 	bl	432b0 <radio_aa_set>
	return ((uint16_t)src[1] << 8) | src[0];
   42eda:	7a62      	ldrb	r2, [r4, #9]
   42edc:	7a23      	ldrb	r3, [r4, #8]
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   42ede:	7aa1      	ldrb	r1, [r4, #10]
   42ee0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   42ee4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   42ee8:	f240 605b 	movw	r0, #1627	; 0x65b
   42eec:	f000 fa8a 	bl	43404 <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   42ef0:	4630      	mov	r0, r6
   42ef2:	f7fd feb5 	bl	40c60 <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   42ef6:	9903      	ldr	r1, [sp, #12]
   42ef8:	4620      	mov	r0, r4
   42efa:	f7ff fbaf 	bl	4265c <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   42efe:	4621      	mov	r1, r4
   42f00:	4826      	ldr	r0, [pc, #152]	; (42f9c <prepare_cb+0x144>)
   42f02:	f000 f941 	bl	43188 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   42f06:	2096      	movs	r0, #150	; 0x96
   42f08:	f000 fbec 	bl	436e4 <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   42f0c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   42f10:	f000 0007 	and.w	r0, r0, #7
   42f14:	f000 fb08 	bl	43528 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   42f18:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   42f1a:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   42f1c:	4638      	mov	r0, r7
   42f1e:	f7fd fe81 	bl	40c24 <lll_event_offset_get>
   42f22:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   42f24:	686a      	ldr	r2, [r5, #4]
   42f26:	f106 0109 	add.w	r1, r6, #9
   42f2a:	2001      	movs	r0, #1
   42f2c:	f000 fbe6 	bl	436fc <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   42f30:	f000 fcf2 	bl	43918 <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   42f34:	7b21      	ldrb	r1, [r4, #12]
   42f36:	3105      	adds	r1, #5
   42f38:	4632      	mov	r2, r6
   42f3a:	4638      	mov	r0, r7
   42f3c:	b2c9      	uxtb	r1, r1
   42f3e:	f7fd fe7f 	bl	40c40 <lll_preempt_calc>
   42f42:	b180      	cbz	r0, 42f66 <prepare_cb+0x10e>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   42f44:	4621      	mov	r1, r4
   42f46:	4816      	ldr	r0, [pc, #88]	; (42fa0 <prepare_cb+0x148>)
   42f48:	f000 f91e 	bl	43188 <radio_isr_set>
		radio_disable();
   42f4c:	f000 fa18 	bl	43380 <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   42f50:	2000      	movs	r0, #0
   42f52:	b005      	add	sp, #20
   42f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   42f56:	4632      	mov	r2, r6
   42f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   42f5c:	8be1      	ldrh	r1, [r4, #30]
   42f5e:	f7fc fa65 	bl	3f42c <lll_chan_sel_2>
   42f62:	4606      	mov	r6, r0
   42f64:	e79f      	b.n	42ea6 <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   42f66:	4620      	mov	r0, r4
   42f68:	f7fd fdf6 	bl	40b58 <lll_prepare_done>
		LL_ASSERT(!ret);
   42f6c:	2800      	cmp	r0, #0
   42f6e:	d0ef      	beq.n	42f50 <prepare_cb+0xf8>
   42f70:	23fd      	movs	r3, #253	; 0xfd
   42f72:	4a0c      	ldr	r2, [pc, #48]	; (42fa4 <prepare_cb+0x14c>)
   42f74:	490c      	ldr	r1, [pc, #48]	; (42fa8 <prepare_cb+0x150>)
   42f76:	480d      	ldr	r0, [pc, #52]	; (42fac <prepare_cb+0x154>)
   42f78:	f007 f8b0 	bl	4a0dc <printk>
   42f7c:	4040      	eors	r0, r0
   42f7e:	f380 8811 	msr	BASEPRI, r0
   42f82:	f04f 0003 	mov.w	r0, #3
   42f86:	df02      	svc	2
}
   42f88:	2000      	movs	r0, #0
   42f8a:	b005      	add	sp, #20
   42f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   42f8e:	4621      	mov	r1, r4
   42f90:	4807      	ldr	r0, [pc, #28]	; (42fb0 <prepare_cb+0x158>)
   42f92:	f000 f8f9 	bl	43188 <radio_isr_set>
		radio_disable();
   42f96:	f000 f9f3 	bl	43380 <radio_disable>
		return 0;
   42f9a:	e7d9      	b.n	42f50 <prepare_cb+0xf8>
   42f9c:	000425a5 	.word	0x000425a5
   42fa0:	00040d99 	.word	0x00040d99
   42fa4:	00053a6c 	.word	0x00053a6c
   42fa8:	00052ed8 	.word	0x00052ed8
   42fac:	00052d50 	.word	0x00052d50
   42fb0:	00040dad 	.word	0x00040dad

00042fb4 <lll_central_prepare>:
{
   42fb4:	b510      	push	{r4, lr}
   42fb6:	b082      	sub	sp, #8
   42fb8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   42fba:	f7fe f83d 	bl	41038 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   42fbe:	2800      	cmp	r0, #0
   42fc0:	db19      	blt.n	42ff6 <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   42fc2:	9400      	str	r4, [sp, #0]
   42fc4:	2300      	movs	r3, #0
   42fc6:	4a12      	ldr	r2, [pc, #72]	; (43010 <lll_central_prepare+0x5c>)
   42fc8:	4912      	ldr	r1, [pc, #72]	; (43014 <lll_central_prepare+0x60>)
   42fca:	4813      	ldr	r0, [pc, #76]	; (43018 <lll_central_prepare+0x64>)
   42fcc:	f7f5 fc4e 	bl	3886c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   42fd0:	b108      	cbz	r0, 42fd6 <lll_central_prepare+0x22>
   42fd2:	3077      	adds	r0, #119	; 0x77
   42fd4:	d101      	bne.n	42fda <lll_central_prepare+0x26>
}
   42fd6:	b002      	add	sp, #8
   42fd8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   42fda:	2351      	movs	r3, #81	; 0x51
   42fdc:	4a0f      	ldr	r2, [pc, #60]	; (4301c <lll_central_prepare+0x68>)
   42fde:	4910      	ldr	r1, [pc, #64]	; (43020 <lll_central_prepare+0x6c>)
   42fe0:	4810      	ldr	r0, [pc, #64]	; (43024 <lll_central_prepare+0x70>)
   42fe2:	f007 f87b 	bl	4a0dc <printk>
   42fe6:	4040      	eors	r0, r0
   42fe8:	f380 8811 	msr	BASEPRI, r0
   42fec:	f04f 0003 	mov.w	r0, #3
   42ff0:	df02      	svc	2
}
   42ff2:	b002      	add	sp, #8
   42ff4:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   42ff6:	234c      	movs	r3, #76	; 0x4c
   42ff8:	4a08      	ldr	r2, [pc, #32]	; (4301c <lll_central_prepare+0x68>)
   42ffa:	490b      	ldr	r1, [pc, #44]	; (43028 <lll_central_prepare+0x74>)
   42ffc:	4809      	ldr	r0, [pc, #36]	; (43024 <lll_central_prepare+0x70>)
   42ffe:	f007 f86d 	bl	4a0dc <printk>
   43002:	4040      	eors	r0, r0
   43004:	f380 8811 	msr	BASEPRI, r0
   43008:	f04f 0003 	mov.w	r0, #3
   4300c:	df02      	svc	2
   4300e:	e7d8      	b.n	42fc2 <lll_central_prepare+0xe>
   43010:	00042e59 	.word	0x00042e59
   43014:	000424b9 	.word	0x000424b9
   43018:	00040c1d 	.word	0x00040c1d
   4301c:	00053a6c 	.word	0x00053a6c
   43020:	0005394c 	.word	0x0005394c
   43024:	00052d50 	.word	0x00052d50
   43028:	0005375c 	.word	0x0005375c

0004302c <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   4302c:	4b05      	ldr	r3, [pc, #20]	; (43044 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   4302e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   43032:	2100      	movs	r1, #0
   43034:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   43038:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   4303c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   43040:	4770      	bx	lr
   43042:	bf00      	nop
   43044:	4000b000 	.word	0x4000b000

00043048 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   43048:	4b05      	ldr	r3, [pc, #20]	; (43060 <cntr_start+0x18>)
   4304a:	7818      	ldrb	r0, [r3, #0]
   4304c:	1c42      	adds	r2, r0, #1
   4304e:	701a      	strb	r2, [r3, #0]
   43050:	b918      	cbnz	r0, 4305a <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   43052:	4b04      	ldr	r3, [pc, #16]	; (43064 <cntr_start+0x1c>)
   43054:	2201      	movs	r2, #1
   43056:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   43058:	4770      	bx	lr
		return 1;
   4305a:	2001      	movs	r0, #1
}
   4305c:	4770      	bx	lr
   4305e:	bf00      	nop
   43060:	20006da3 	.word	0x20006da3
   43064:	4000b000 	.word	0x4000b000

00043068 <cntr_stop>:

uint32_t cntr_stop(void)
{
   43068:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   4306a:	4c0d      	ldr	r4, [pc, #52]	; (430a0 <cntr_stop+0x38>)
   4306c:	7820      	ldrb	r0, [r4, #0]
   4306e:	b148      	cbz	r0, 43084 <cntr_stop+0x1c>

	if (--_refcount) {
   43070:	3801      	subs	r0, #1
   43072:	b2c0      	uxtb	r0, r0
   43074:	7020      	strb	r0, [r4, #0]
   43076:	b918      	cbnz	r0, 43080 <cntr_stop+0x18>
   43078:	4b0a      	ldr	r3, [pc, #40]	; (430a4 <cntr_stop+0x3c>)
   4307a:	2201      	movs	r2, #1
   4307c:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   4307e:	bd10      	pop	{r4, pc}
		return 1;
   43080:	2001      	movs	r0, #1
}
   43082:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   43084:	232d      	movs	r3, #45	; 0x2d
   43086:	4a08      	ldr	r2, [pc, #32]	; (430a8 <cntr_stop+0x40>)
   43088:	4908      	ldr	r1, [pc, #32]	; (430ac <cntr_stop+0x44>)
   4308a:	4809      	ldr	r0, [pc, #36]	; (430b0 <cntr_stop+0x48>)
   4308c:	f007 f826 	bl	4a0dc <printk>
   43090:	4040      	eors	r0, r0
   43092:	f380 8811 	msr	BASEPRI, r0
   43096:	f04f 0003 	mov.w	r0, #3
   4309a:	df02      	svc	2
   4309c:	7820      	ldrb	r0, [r4, #0]
   4309e:	e7e7      	b.n	43070 <cntr_stop+0x8>
   430a0:	20006da3 	.word	0x20006da3
   430a4:	4000b004 	.word	0x4000b004
   430a8:	00053abc 	.word	0x00053abc
   430ac:	00053b08 	.word	0x00053b08
   430b0:	00052d50 	.word	0x00052d50

000430b4 <cntr_cnt_get>:
     return p_reg->COUNTER;
   430b4:	4b01      	ldr	r3, [pc, #4]	; (430bc <cntr_cnt_get+0x8>)
   430b6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   430ba:	4770      	bx	lr
   430bc:	4000b000 	.word	0x4000b000

000430c0 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   430c0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   430c4:	4b01      	ldr	r3, [pc, #4]	; (430cc <cntr_cmp_set+0xc>)
   430c6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   430ca:	4770      	bx	lr
   430cc:	4000b000 	.word	0x4000b000

000430d0 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   430d0:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   430d2:	4b12      	ldr	r3, [pc, #72]	; (4311c <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   430d4:	4d12      	ldr	r5, [pc, #72]	; (43120 <do_ecb+0x50>)
   430d6:	2601      	movs	r6, #1
   430d8:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   430da:	2100      	movs	r1, #0
   430dc:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   430de:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   430e2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   430e6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   430ea:	601c      	str	r4, [r3, #0]
   430ec:	e005      	b.n	430fa <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   430ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   430f2:	b932      	cbnz	r2, 43102 <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   430f4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   430f8:	b11a      	cbz	r2, 43102 <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   430fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   430fe:	2a00      	cmp	r2, #0
   43100:	d0f5      	beq.n	430ee <do_ecb+0x1e>
   43102:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   43104:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   43108:	2a00      	cmp	r2, #0
   4310a:	d1e7      	bne.n	430dc <do_ecb+0xc>
   4310c:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   43110:	2f00      	cmp	r7, #0
   43112:	d0e3      	beq.n	430dc <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
   43114:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   43118:	bcf0      	pop	{r4, r5, r6, r7}
   4311a:	4770      	bx	lr
   4311c:	4000e000 	.word	0x4000e000
   43120:	4000e004 	.word	0x4000e004

00043124 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   43124:	b570      	push	{r4, r5, r6, lr}
   43126:	b08c      	sub	sp, #48	; 0x30
   43128:	460e      	mov	r6, r1
   4312a:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   4312c:	4601      	mov	r1, r0
   4312e:	2210      	movs	r2, #16
   43130:	4668      	mov	r0, sp
{
   43132:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   43134:	f7f0 fec4 	bl	33ec0 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   43138:	2210      	movs	r2, #16
   4313a:	eb0d 0002 	add.w	r0, sp, r2
   4313e:	4631      	mov	r1, r6
   43140:	f7f0 febe 	bl	33ec0 <mem_rcopy>

	do_ecb(&ecb);
   43144:	4668      	mov	r0, sp
   43146:	f7ff ffc3 	bl	430d0 <do_ecb>

	if (cipher_text_le) {
   4314a:	b125      	cbz	r5, 43156 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   4314c:	4628      	mov	r0, r5
   4314e:	2210      	movs	r2, #16
   43150:	a908      	add	r1, sp, #32
   43152:	f7f0 feb5 	bl	33ec0 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   43156:	b124      	cbz	r4, 43162 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   43158:	4620      	mov	r0, r4
   4315a:	2210      	movs	r2, #16
   4315c:	a908      	add	r1, sp, #32
   4315e:	f009 f8c5 	bl	4c2ec <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   43162:	b00c      	add	sp, #48	; 0x30
   43164:	bd70      	pop	{r4, r5, r6, pc}
   43166:	bf00      	nop

00043168 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   43168:	4b04      	ldr	r3, [pc, #16]	; (4317c <isr_radio+0x14>)
   4316a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   4316e:	b123      	cbz	r3, 4317a <isr_radio+0x12>
		isr_cb(isr_cb_param);
   43170:	4a03      	ldr	r2, [pc, #12]	; (43180 <isr_radio+0x18>)
   43172:	4b04      	ldr	r3, [pc, #16]	; (43184 <isr_radio+0x1c>)
   43174:	6810      	ldr	r0, [r2, #0]
   43176:	681b      	ldr	r3, [r3, #0]
   43178:	4718      	bx	r3
}
   4317a:	4770      	bx	lr
   4317c:	40001000 	.word	0x40001000
   43180:	20005e44 	.word	0x20005e44
   43184:	20005e40 	.word	0x20005e40

00043188 <radio_isr_set>:
{
   43188:	b570      	push	{r4, r5, r6, lr}
   4318a:	4605      	mov	r5, r0
	irq_disable(RADIO_IRQn);
   4318c:	2001      	movs	r0, #1
{
   4318e:	460e      	mov	r6, r1
	irq_disable(RADIO_IRQn);
   43190:	f7e9 fc8c 	bl	2caac <arch_irq_disable>
	isr_cb_param = param;
   43194:	4a08      	ldr	r2, [pc, #32]	; (431b8 <radio_isr_set+0x30>)
	isr_cb = cb;
   43196:	4809      	ldr	r0, [pc, #36]	; (431bc <radio_isr_set+0x34>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   43198:	4c09      	ldr	r4, [pc, #36]	; (431c0 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   4319a:	4b0a      	ldr	r3, [pc, #40]	; (431c4 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   4319c:	6016      	str	r6, [r2, #0]
   4319e:	2110      	movs	r1, #16
   431a0:	2202      	movs	r2, #2
	isr_cb = cb;
   431a2:	6005      	str	r5, [r0, #0]
   431a4:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   431a8:	2001      	movs	r0, #1
   431aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   431ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	irq_enable(RADIO_IRQn);
   431b2:	f7e9 bc6b 	b.w	2ca8c <arch_irq_enable>
   431b6:	bf00      	nop
   431b8:	20005e44 	.word	0x20005e44
   431bc:	20005e40 	.word	0x20005e40
   431c0:	40001000 	.word	0x40001000
   431c4:	e000e100 	.word	0xe000e100

000431c8 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   431c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   431cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   431d0:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   431d2:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   431d6:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   431da:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   431de:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   431e2:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   431e6:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   431ea:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   431ee:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   431f2:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   431f6:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   431fa:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   431fe:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   43202:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   43206:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   4320a:	4770      	bx	lr

0004320c <radio_reset>:
{
   4320c:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   4320e:	2001      	movs	r0, #1
   43210:	f7e9 fc4c 	bl	2caac <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   43214:	4b0c      	ldr	r3, [pc, #48]	; (43248 <radio_reset+0x3c>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   43216:	490d      	ldr	r1, [pc, #52]	; (4324c <radio_reset+0x40>)
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   43218:	4a0d      	ldr	r2, [pc, #52]	; (43250 <radio_reset+0x44>)
   4321a:	2400      	movs	r4, #0
   4321c:	2001      	movs	r0, #1
   4321e:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
   43222:	f8c3 0ffc 	str.w	r0, [r3, #4092]	; 0xffc
   43226:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   43228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   4322c:	f023 0301 	bic.w	r3, r3, #1
   43230:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   43234:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   43238:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   4323c:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   4323e:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   43242:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   43246:	bd10      	pop	{r4, pc}
   43248:	40001000 	.word	0x40001000
   4324c:	40001774 	.word	0x40001774
   43250:	4001f000 	.word	0x4001f000

00043254 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   43254:	4b06      	ldr	r3, [pc, #24]	; (43270 <radio_phy_set+0x1c>)

static inline uint32_t hal_radio_phy_mode_get(uint8_t phy, uint8_t flags)
{
	uint32_t mode;

	switch (phy) {
   43256:	2802      	cmp	r0, #2
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   43258:	bf14      	ite	ne
   4325a:	2203      	movne	r2, #3
   4325c:	2204      	moveq	r2, #4
   4325e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   43262:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   43266:	f042 0201 	orr.w	r2, r2, #1
   4326a:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   4326e:	4770      	bx	lr
   43270:	40001000 	.word	0x40001000

00043274 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   43274:	4b01      	ldr	r3, [pc, #4]	; (4327c <radio_tx_power_set+0x8>)
   43276:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   4327a:	4770      	bx	lr
   4327c:	40001000 	.word	0x40001000

00043280 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   43280:	4b01      	ldr	r3, [pc, #4]	; (43288 <radio_freq_chan_set+0x8>)
   43282:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   43286:	4770      	bx	lr
   43288:	40001000 	.word	0x40001000

0004328c <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   4328c:	4b07      	ldr	r3, [pc, #28]	; (432ac <radio_whiten_iv_set+0x20>)
   4328e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   43292:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   43296:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   4329a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   4329e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   432a2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   432a6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   432aa:	4770      	bx	lr
   432ac:	40001000 	.word	0x40001000

000432b0 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   432b0:	4a0b      	ldr	r2, [pc, #44]	; (432e0 <radio_aa_set+0x30>)
   432b2:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   432b4:	2301      	movs	r3, #1
{
   432b6:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   432b8:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   432bc:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   432c0:	78c3      	ldrb	r3, [r0, #3]
   432c2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   432c6:	7843      	ldrb	r3, [r0, #1]
   432c8:	7884      	ldrb	r4, [r0, #2]
   432ca:	7801      	ldrb	r1, [r0, #0]
   432cc:	041b      	lsls	r3, r3, #16
   432ce:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   432d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   432d6:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   432da:	bc10      	pop	{r4}
   432dc:	4770      	bx	lr
   432de:	bf00      	nop
   432e0:	40001000 	.word	0x40001000

000432e4 <radio_pkt_configure>:
	switch (phy) {
   432e4:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   432e8:	2b02      	cmp	r3, #2
   432ea:	bf14      	ite	ne
   432ec:	2300      	movne	r3, #0
   432ee:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   432f2:	07d2      	lsls	r2, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   432f4:	bf48      	it	mi
   432f6:	f443 1380 	orrmi.w	r3, r3, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   432fa:	f000 000f 	and.w	r0, r0, #15
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   432fe:	4318      	orrs	r0, r3
	NRF_RADIO->PCNF0 =
   43300:	4b09      	ldr	r3, [pc, #36]	; (43328 <radio_pkt_configure+0x44>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   43302:	4a0a      	ldr	r2, [pc, #40]	; (4332c <radio_pkt_configure+0x48>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   43304:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   43308:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   4330c:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   43310:	4002      	ands	r2, r0
   43312:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   43316:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   4331a:	4311      	orrs	r1, r2
   4331c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   43320:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   43324:	4770      	bx	lr
   43326:	bf00      	nop
   43328:	40001000 	.word	0x40001000
   4332c:	fef80000 	.word	0xfef80000

00043330 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   43330:	4b01      	ldr	r3, [pc, #4]	; (43338 <radio_pkt_rx_set+0x8>)
   43332:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   43336:	4770      	bx	lr
   43338:	40001000 	.word	0x40001000

0004333c <radio_pkt_tx_set>:
   4333c:	4b01      	ldr	r3, [pc, #4]	; (43344 <radio_pkt_tx_set+0x8>)
   4333e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   43342:	4770      	bx	lr
   43344:	40001000 	.word	0x40001000

00043348 <radio_tx_ready_delay_get>:
	return RADIO_TXPOWER_TXPOWER_Neg40dBm;
}

static inline uint32_t hal_radio_tx_ready_delay_us_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   43348:	2802      	cmp	r0, #2
}
   4334a:	bf14      	ite	ne
   4334c:	2029      	movne	r0, #41	; 0x29
   4334e:	2028      	moveq	r0, #40	; 0x28
   43350:	4770      	bx	lr
   43352:	bf00      	nop

00043354 <radio_tx_chain_delay_get>:
}
   43354:	2001      	movs	r0, #1
   43356:	4770      	bx	lr

00043358 <radio_rx_ready_delay_get>:
}
   43358:	2029      	movs	r0, #41	; 0x29
   4335a:	4770      	bx	lr

0004335c <radio_rx_chain_delay_get>:
	}
}

static inline uint32_t hal_radio_rx_chain_delay_us_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   4335c:	2802      	cmp	r0, #2
}
   4335e:	bf14      	ite	ne
   43360:	200a      	movne	r0, #10
   43362:	2005      	moveq	r0, #5
   43364:	4770      	bx	lr
   43366:	bf00      	nop

00043368 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43368:	4b01      	ldr	r3, [pc, #4]	; (43370 <radio_rx_enable+0x8>)
   4336a:	2201      	movs	r2, #1
   4336c:	601a      	str	r2, [r3, #0]
}
   4336e:	4770      	bx	lr
   43370:	40001004 	.word	0x40001004

00043374 <radio_tx_enable>:
   43374:	4b01      	ldr	r3, [pc, #4]	; (4337c <radio_tx_enable+0x8>)
   43376:	2201      	movs	r2, #1
   43378:	601a      	str	r2, [r3, #0]
}
   4337a:	4770      	bx	lr
   4337c:	40001000 	.word	0x40001000

00043380 <radio_disable>:
{
   43380:	b430      	push	{r4, r5}
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   43382:	4a08      	ldr	r2, [pc, #32]	; (433a4 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   43384:	4808      	ldr	r0, [pc, #32]	; (433a8 <radio_disable+0x28>)
   43386:	4909      	ldr	r1, [pc, #36]	; (433ac <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   43388:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   4338a:	f44f 6510 	mov.w	r5, #2304	; 0x900
   4338e:	2400      	movs	r4, #0
   43390:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   43394:	6053      	str	r3, [r2, #4]
   43396:	60d3      	str	r3, [r2, #12]
   43398:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
   4339c:	600b      	str	r3, [r1, #0]
}
   4339e:	bc30      	pop	{r4, r5}
   433a0:	4770      	bx	lr
   433a2:	bf00      	nop
   433a4:	4001f000 	.word	0x4001f000
   433a8:	40001000 	.word	0x40001000
   433ac:	40001010 	.word	0x40001010

000433b0 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   433b0:	4b04      	ldr	r3, [pc, #16]	; (433c4 <radio_status_reset+0x14>)
   433b2:	2200      	movs	r2, #0
   433b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   433b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   433bc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   433c0:	4770      	bx	lr
   433c2:	bf00      	nop
   433c4:	40001000 	.word	0x40001000

000433c8 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   433c8:	4b03      	ldr	r3, [pc, #12]	; (433d8 <radio_is_ready+0x10>)
   433ca:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   433ce:	3000      	adds	r0, #0
   433d0:	bf18      	it	ne
   433d2:	2001      	movne	r0, #1
   433d4:	4770      	bx	lr
   433d6:	bf00      	nop
   433d8:	40001000 	.word	0x40001000

000433dc <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   433dc:	4b03      	ldr	r3, [pc, #12]	; (433ec <radio_is_done+0x10>)
   433de:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   433e2:	3000      	adds	r0, #0
   433e4:	bf18      	it	ne
   433e6:	2001      	movne	r0, #1
   433e8:	4770      	bx	lr
   433ea:	bf00      	nop
   433ec:	40001000 	.word	0x40001000

000433f0 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   433f0:	4b03      	ldr	r3, [pc, #12]	; (43400 <radio_is_idle+0x10>)
   433f2:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   433f6:	fab0 f080 	clz	r0, r0
   433fa:	0940      	lsrs	r0, r0, #5
   433fc:	4770      	bx	lr
   433fe:	bf00      	nop
   43400:	40001000 	.word	0x40001000

00043404 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   43404:	4b04      	ldr	r3, [pc, #16]	; (43418 <radio_crc_configure+0x14>)
   43406:	f240 1203 	movw	r2, #259	; 0x103
   4340a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   4340e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   43412:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   43416:	4770      	bx	lr
   43418:	40001000 	.word	0x40001000

0004341c <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   4341c:	4b03      	ldr	r3, [pc, #12]	; (4342c <radio_crc_is_valid+0x10>)
   4341e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   43422:	3000      	adds	r0, #0
   43424:	bf18      	it	ne
   43426:	2001      	movne	r0, #1
   43428:	4770      	bx	lr
   4342a:	bf00      	nop
   4342c:	40001000 	.word	0x40001000

00043430 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   43430:	4800      	ldr	r0, [pc, #0]	; (43434 <radio_pkt_empty_get+0x4>)
   43432:	4770      	bx	lr
   43434:	20005d38 	.word	0x20005d38

00043438 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   43438:	4800      	ldr	r0, [pc, #0]	; (4343c <radio_pkt_scratch_get+0x4>)
   4343a:	4770      	bx	lr
   4343c:	20005d3c 	.word	0x20005d3c

00043440 <sw_switch>:
 *                         direction to next direction.
 */
void sw_switch(uint8_t dir_curr, uint8_t dir_next, uint8_t phy_curr, uint8_t flags_curr,
	       uint8_t phy_next, uint8_t flags_next,
	       enum radio_end_evt_delay_state end_evt_delay_en)
{
   43440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   43444:	4e31      	ldr	r6, [pc, #196]	; (4350c <sw_switch+0xcc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43446:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 43518 <sw_switch+0xd8>
   4344a:	7837      	ldrb	r7, [r6, #0]
   4344c:	4b30      	ldr	r3, [pc, #192]	; (43510 <sw_switch+0xd0>)
{
   4344e:	f89d c018 	ldrb.w	ip, [sp, #24]
   43452:	f8ce 3568 	str.w	r3, [lr, #1384]	; 0x568
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   43456:	f107 040c 	add.w	r4, r7, #12
   4345a:	b2e4      	uxtb	r4, r4
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   4345c:	b23b      	sxth	r3, r7
   4345e:	00e4      	lsls	r4, r4, #3
   43460:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   43464:	00dd      	lsls	r5, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   43466:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 43524 <sw_switch+0xe4>
   4346a:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   4346e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   43472:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   43476:	eb08 0883 	add.w	r8, r8, r3, lsl #2

	/* NOTE: As constants are passed to dir_curr and dir_next, the
	 *       compiler should optimize out the redundant code path
	 *       during the optimization.
	 */
	if (dir_next == SW_SWITCH_TX) {
   4347a:	2901      	cmp	r1, #1
    p_reg->CH[(uint32_t) channel].TEP = tep;
   4347c:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43480:	f8c4 8510 	str.w	r8, [r4, #1296]	; 0x510
   43484:	d01d      	beq.n	434c2 <sw_switch+0x82>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43486:	4a23      	ldr	r2, [pc, #140]	; (43514 <sw_switch+0xd4>)
   43488:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	} else {
		/* RX */

		/* Calculate delay with respect to current and next PHY. */
		delay = HAL_RADIO_NS2US_CEIL(
   4348c:	222d      	movs	r2, #45	; 0x2d
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   4348e:	009b      	lsls	r3, r3, #2
   43490:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   43494:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
   43498:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
   4349c:	4291      	cmp	r1, r2
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   4349e:	bf8a      	itet	hi
   434a0:	f8d3 1540 	ldrhi.w	r1, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   434a4:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   434a6:	1a8a      	subhi	r2, r1, r2
   434a8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	 */
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X */
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   434ac:	1c7b      	adds	r3, r7, #1
    p_reg->CHENSET = mask;
   434ae:	4a1a      	ldr	r2, [pc, #104]	; (43518 <sw_switch+0xd8>)
	sw_tifs_toggle &= 1U;
   434b0:	f003 0301 	and.w	r3, r3, #1
   434b4:	f44f 6110 	mov.w	r1, #2304	; 0x900
   434b8:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
   434bc:	7033      	strb	r3, [r6, #0]
}
   434be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (dir_curr == SW_SWITCH_TX) {
   434c2:	2801      	cmp	r0, #1
   434c4:	d019      	beq.n	434fa <sw_switch+0xba>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   434c6:	f24a 10b8 	movw	r0, #41400	; 0xa1b8
   434ca:	f649 6534 	movw	r5, #40500	; 0x9e34
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   434ce:	f242 41b8 	movw	r1, #9400	; 0x24b8
	switch (phy) {
   434d2:	f1bc 0f02 	cmp.w	ip, #2
   434d6:	bf14      	ite	ne
   434d8:	4684      	movne	ip, r0
   434da:	46ac      	moveq	ip, r5
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   434dc:	f241 3088 	movw	r0, #5000	; 0x1388
   434e0:	2a02      	cmp	r2, #2
   434e2:	bf14      	ite	ne
   434e4:	460a      	movne	r2, r1
   434e6:	4602      	moveq	r2, r0
			delay = HAL_RADIO_NS2US_ROUND(
   434e8:	490c      	ldr	r1, [pc, #48]	; (4351c <sw_switch+0xdc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   434ea:	480d      	ldr	r0, [pc, #52]	; (43520 <sw_switch+0xe0>)
   434ec:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
   434f0:	4462      	add	r2, ip
   434f2:	fba1 1202 	umull	r1, r2, r1, r2
   434f6:	0992      	lsrs	r2, r2, #6
   434f8:	e7c9      	b.n	4348e <sw_switch+0x4e>
   434fa:	4a09      	ldr	r2, [pc, #36]	; (43520 <sw_switch+0xe0>)
   434fc:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
	switch (phy) {
   43500:	f1bc 0f02 	cmp.w	ip, #2
   43504:	bf14      	ite	ne
   43506:	222a      	movne	r2, #42	; 0x2a
   43508:	2229      	moveq	r2, #41	; 0x29
   4350a:	e7c0      	b.n	4348e <sw_switch+0x4e>
   4350c:	20006da4 	.word	0x20006da4
   43510:	4000110c 	.word	0x4000110c
   43514:	40001004 	.word	0x40001004
   43518:	4001f000 	.word	0x4001f000
   4351c:	10624dd3 	.word	0x10624dd3
   43520:	40001000 	.word	0x40001000
   43524:	40009140 	.word	0x40009140

00043528 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   43528:	4a1e      	ldr	r2, [pc, #120]	; (435a4 <radio_switch_complete_and_rx+0x7c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   4352a:	4b1f      	ldr	r3, [pc, #124]	; (435a8 <radio_switch_complete_and_rx+0x80>)
{
   4352c:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   4352e:	2103      	movs	r1, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   43530:	4e1e      	ldr	r6, [pc, #120]	; (435ac <radio_switch_complete_and_rx+0x84>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   43532:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   43536:	7832      	ldrb	r2, [r6, #0]
   43538:	4f1d      	ldr	r7, [pc, #116]	; (435b0 <radio_switch_complete_and_rx+0x88>)
   4353a:	4d1e      	ldr	r5, [pc, #120]	; (435b4 <radio_switch_complete_and_rx+0x8c>)
   4353c:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
   43540:	f102 030c 	add.w	r3, r2, #12
   43544:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   43546:	b210      	sxth	r0, r2
   43548:	408b      	lsls	r3, r1
   4354a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4354e:	fa00 f101 	lsl.w	r1, r0, r1
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   43552:	0080      	lsls	r0, r0, #2
   43554:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   43558:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   4355c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   43560:	f504 4410 	add.w	r4, r4, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   43564:	4405      	add	r5, r0
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   43566:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   4356a:	4813      	ldr	r0, [pc, #76]	; (435b8 <radio_switch_complete_and_rx+0x90>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   4356c:	f8c7 156c 	str.w	r1, [r7, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43570:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43574:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   43578:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
   4357c:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   4357e:	bf8a      	itet	hi
   43580:	f8d4 3540 	ldrhi.w	r3, [r4, #1344]	; 0x540
   43584:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   43586:	3b2d      	subhi	r3, #45	; 0x2d
   43588:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   4358c:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   4358e:	4b08      	ldr	r3, [pc, #32]	; (435b0 <radio_switch_complete_and_rx+0x88>)
	sw_tifs_toggle &= 1U;
   43590:	f002 0201 	and.w	r2, r2, #1
   43594:	f44f 6110 	mov.w	r1, #2304	; 0x900
   43598:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   4359c:	7032      	strb	r2, [r6, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   4359e:	bcf0      	pop	{r4, r5, r6, r7}
   435a0:	4770      	bx	lr
   435a2:	bf00      	nop
   435a4:	40001000 	.word	0x40001000
   435a8:	4000110c 	.word	0x4000110c
   435ac:	20006da4 	.word	0x20006da4
   435b0:	4001f000 	.word	0x4001f000
   435b4:	40009140 	.word	0x40009140
   435b8:	40001004 	.word	0x40001004

000435bc <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   435bc:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   435be:	4d08      	ldr	r5, [pc, #32]	; (435e0 <radio_switch_complete_and_tx+0x24>)
{
   435c0:	b084      	sub	sp, #16

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
   435c2:	2400      	movs	r4, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   435c4:	2603      	movs	r6, #3
   435c6:	f8c5 6200 	str.w	r6, [r5, #512]	; 0x200
	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
   435ca:	e9cd 2300 	strd	r2, r3, [sp]
   435ce:	9402      	str	r4, [sp, #8]
   435d0:	460b      	mov	r3, r1
   435d2:	4602      	mov	r2, r0
   435d4:	2101      	movs	r1, #1
   435d6:	4620      	mov	r0, r4
   435d8:	f7ff ff32 	bl	43440 <sw_switch>
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   435dc:	b004      	add	sp, #16
   435de:	bd70      	pop	{r4, r5, r6, pc}
   435e0:	40001000 	.word	0x40001000

000435e4 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   435e4:	4904      	ldr	r1, [pc, #16]	; (435f8 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   435e6:	4b05      	ldr	r3, [pc, #20]	; (435fc <radio_switch_complete_and_disable+0x18>)
   435e8:	2003      	movs	r0, #3
   435ea:	f44f 6210 	mov.w	r2, #2304	; 0x900
   435ee:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   435f2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   435f6:	4770      	bx	lr
   435f8:	40001000 	.word	0x40001000
   435fc:	4001f000 	.word	0x4001f000

00043600 <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   43600:	2000      	movs	r0, #0
   43602:	4770      	bx	lr

00043604 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   43604:	4a03      	ldr	r2, [pc, #12]	; (43614 <radio_rssi_measure+0x10>)
   43606:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   4360a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   4360e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   43612:	4770      	bx	lr
   43614:	40001000 	.word	0x40001000

00043618 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   43618:	4b01      	ldr	r3, [pc, #4]	; (43620 <radio_rssi_get+0x8>)
   4361a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   4361e:	4770      	bx	lr
   43620:	40001000 	.word	0x40001000

00043624 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   43624:	4b02      	ldr	r3, [pc, #8]	; (43630 <radio_rssi_status_reset+0xc>)
   43626:	2200      	movs	r2, #0
   43628:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   4362c:	4770      	bx	lr
   4362e:	bf00      	nop
   43630:	40001000 	.word	0x40001000

00043634 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   43634:	4b03      	ldr	r3, [pc, #12]	; (43644 <radio_rssi_is_ready+0x10>)
   43636:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   4363a:	3000      	adds	r0, #0
   4363c:	bf18      	it	ne
   4363e:	2001      	movne	r0, #1
   43640:	4770      	bx	lr
   43642:	bf00      	nop
   43644:	40001000 	.word	0x40001000

00043648 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   43648:	b430      	push	{r4, r5}
   4364a:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   4364c:	00a3      	lsls	r3, r4, #2
   4364e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   43652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   43656:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   43658:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   4365c:	3401      	adds	r4, #1
   4365e:	8895      	ldrh	r5, [r2, #4]
   43660:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   43664:	2c08      	cmp	r4, #8
		bdaddr += 6;
   43666:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   4366a:	d1ef      	bne.n	4364c <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   4366c:	4b03      	ldr	r3, [pc, #12]	; (4367c <radio_filter_configure+0x34>)
   4366e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   43672:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   43676:	bc30      	pop	{r4, r5}
   43678:	4770      	bx	lr
   4367a:	bf00      	nop
   4367c:	40001000 	.word	0x40001000

00043680 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   43680:	4a03      	ldr	r2, [pc, #12]	; (43690 <radio_filter_disable+0x10>)
   43682:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   43686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   4368a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   4368e:	4770      	bx	lr
   43690:	40001000 	.word	0x40001000

00043694 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   43694:	4b02      	ldr	r3, [pc, #8]	; (436a0 <radio_filter_status_reset+0xc>)
   43696:	2200      	movs	r2, #0
   43698:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   4369c:	4770      	bx	lr
   4369e:	bf00      	nop
   436a0:	40001000 	.word	0x40001000

000436a4 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   436a4:	4b03      	ldr	r3, [pc, #12]	; (436b4 <radio_filter_has_match+0x10>)
   436a6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   436aa:	3000      	adds	r0, #0
   436ac:	bf18      	it	ne
   436ae:	2001      	movne	r0, #1
   436b0:	4770      	bx	lr
   436b2:	bf00      	nop
   436b4:	40001000 	.word	0x40001000

000436b8 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   436b8:	4b01      	ldr	r3, [pc, #4]	; (436c0 <radio_filter_match_get+0x8>)
   436ba:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   436be:	4770      	bx	lr
   436c0:	40001000 	.word	0x40001000

000436c4 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   436c4:	4904      	ldr	r1, [pc, #16]	; (436d8 <radio_tmr_status_reset+0x14>)
   436c6:	4b05      	ldr	r3, [pc, #20]	; (436dc <radio_tmr_status_reset+0x18>)
   436c8:	4a05      	ldr	r2, [pc, #20]	; (436e0 <radio_tmr_status_reset+0x1c>)
   436ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   436ce:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   436d2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   436d6:	4770      	bx	lr
   436d8:	4000b000 	.word	0x4000b000
   436dc:	4001f000 	.word	0x4001f000
   436e0:	0e7000c0 	.word	0x0e7000c0

000436e4 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   436e4:	4b03      	ldr	r3, [pc, #12]	; (436f4 <radio_tmr_tifs_set+0x10>)
   436e6:	4a04      	ldr	r2, [pc, #16]	; (436f8 <radio_tmr_tifs_set+0x14>)
   436e8:	781b      	ldrb	r3, [r3, #0]
   436ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   436ee:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   436f2:	4770      	bx	lr
   436f4:	20006da4 	.word	0x20006da4
   436f8:	40009000 	.word	0x40009000

000436fc <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   436fc:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   436fe:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   43702:	4c31      	ldr	r4, [pc, #196]	; (437c8 <radio_tmr_start+0xcc>)
   43704:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   43708:	42a3      	cmp	r3, r4
   4370a:	d906      	bls.n	4371a <radio_tmr_start+0x1e>
		ticks_start--;
		remainder += 30517578UL;
   4370c:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   43710:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   43714:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   43718:	3901      	subs	r1, #1
	}
	remainder /= 1000000UL;
   4371a:	4d2c      	ldr	r5, [pc, #176]	; (437cc <radio_tmr_start+0xd0>)

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   4371c:	4b2c      	ldr	r3, [pc, #176]	; (437d0 <radio_tmr_start+0xd4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4371e:	4c2d      	ldr	r4, [pc, #180]	; (437d4 <radio_tmr_start+0xd8>)
	remainder /= 1000000UL;
   43720:	fba5 5202 	umull	r5, r2, r5, r2
	EVENT_TIMER->MODE = 0;
   43724:	2600      	movs	r6, #0
   43726:	2501      	movs	r5, #1
   43728:	6025      	str	r5, [r4, #0]
   4372a:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   4372e:	4d2a      	ldr	r5, [pc, #168]	; (437d8 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43730:	4c2a      	ldr	r4, [pc, #168]	; (437dc <radio_tmr_start+0xe0>)
	EVENT_TIMER->PRESCALER = 4;
   43732:	2604      	movs	r6, #4
   43734:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   43738:	0c92      	lsrs	r2, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   4373a:	2602      	movs	r6, #2
   4373c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CC[cc_channel] = cc_value;
   43740:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
   43744:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   43748:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   4374c:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   43750:	4923      	ldr	r1, [pc, #140]	; (437e0 <radio_tmr_start+0xe4>)
   43752:	f8c4 1540 	str.w	r1, [r4, #1344]	; 0x540
    p_reg->CHENSET = mask;
   43756:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43758:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->CHENSET = mask;
   4375c:	f8c4 1504 	str.w	r1, [r4, #1284]	; 0x504
	nrf_ppi_channels_disable(
   43760:	bb58      	cbnz	r0, 437ba <radio_tmr_start+0xbe>
    p_reg->CHENCLR = mask;
   43762:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   43766:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	nrf_ppi_channels_enable(
   4376a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   4376e:	4b1b      	ldr	r3, [pc, #108]	; (437dc <radio_tmr_start+0xe0>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   43770:	491c      	ldr	r1, [pc, #112]	; (437e4 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43772:	481d      	ldr	r0, [pc, #116]	; (437e8 <radio_tmr_start+0xec>)
   43774:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   43778:	2500      	movs	r5, #0
   4377a:	2401      	movs	r4, #1
	SW_SWITCH_TIMER->PRESCALER = 4;
   4377c:	2604      	movs	r6, #4
   4377e:	6004      	str	r4, [r0, #0]
	SW_SWITCH_TIMER->MODE = 0;
   43780:	f8c1 5504 	str.w	r5, [r1, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   43784:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   43788:	f8c1 5508 	str.w	r5, [r1, #1288]	; 0x508
   4378c:	600c      	str	r4, [r1, #0]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   4378e:	f501 31b0 	add.w	r1, r1, #90112	; 0x16000
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43792:	4f16      	ldr	r7, [pc, #88]	; (437ec <radio_tmr_start+0xf0>)
   43794:	4e16      	ldr	r6, [pc, #88]	; (437f0 <radio_tmr_start+0xf4>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43796:	4d17      	ldr	r5, [pc, #92]	; (437f4 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43798:	4c17      	ldr	r4, [pc, #92]	; (437f8 <radio_tmr_start+0xfc>)
   4379a:	f8c3 7550 	str.w	r7, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   4379e:	310c      	adds	r1, #12
   437a0:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   437a4:	f8c3 6558 	str.w	r6, [r3, #1368]	; 0x558
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   437a8:	4610      	mov	r0, r2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   437aa:	f8c3 555c 	str.w	r5, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   437ae:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   437b2:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
   437b6:	bcf0      	pop	{r4, r5, r6, r7}
   437b8:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   437ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   437be:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
   437c2:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   437c6:	e7d2      	b.n	4376e <radio_tmr_start+0x72>
   437c8:	7ff0bdbf 	.word	0x7ff0bdbf
   437cc:	431bde83 	.word	0x431bde83
   437d0:	40008000 	.word	0x40008000
   437d4:	4000800c 	.word	0x4000800c
   437d8:	4000b000 	.word	0x4000b000
   437dc:	4001f000 	.word	0x4001f000
   437e0:	4000b148 	.word	0x4000b148
   437e4:	40009000 	.word	0x40009000
   437e8:	4000900c 	.word	0x4000900c
   437ec:	4000110c 	.word	0x4000110c
   437f0:	40009140 	.word	0x40009140
   437f4:	4001f004 	.word	0x4001f004
   437f8:	40009144 	.word	0x40009144

000437fc <radio_tmr_start_tick>:

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   437fc:	b4f0      	push	{r4, r5, r6, r7}
    p_reg->CC[cc_channel] = cc_value;
   437fe:	4c16      	ldr	r4, [pc, #88]	; (43858 <radio_tmr_start_tick+0x5c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43800:	4f16      	ldr	r7, [pc, #88]	; (4385c <radio_tmr_start_tick+0x60>)
   43802:	4e17      	ldr	r6, [pc, #92]	; (43860 <radio_tmr_start_tick+0x64>)
    p_reg->CC[ch] = cc_val;
   43804:	4d17      	ldr	r5, [pc, #92]	; (43864 <radio_tmr_start_tick+0x68>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   43806:	4b18      	ldr	r3, [pc, #96]	; (43868 <radio_tmr_start_tick+0x6c>)
   43808:	2201      	movs	r2, #1
   4380a:	603a      	str	r2, [r7, #0]
   4380c:	6032      	str	r2, [r6, #0]
    p_reg->CC[cc_channel] = cc_value;
   4380e:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   43812:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    p_reg->CC[ch] = cc_val;
   43816:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   4381a:	f8c5 2344 	str.w	r2, [r5, #836]	; 0x344
   4381e:	4913      	ldr	r1, [pc, #76]	; (4386c <radio_tmr_start_tick+0x70>)
   43820:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   43824:	2240      	movs	r2, #64	; 0x40
    p_reg->CH[(uint32_t) channel].TEP = tep;
   43826:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   4382a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   4382e:	b158      	cbz	r0, 43848 <radio_tmr_start_tick+0x4c>
    p_reg->CHENCLR = mask;
   43830:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   43834:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   43838:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   4383c:	4a0a      	ldr	r2, [pc, #40]	; (43868 <radio_tmr_start_tick+0x6c>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   4383e:	2001      	movs	r0, #1
   43840:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   43844:	bcf0      	pop	{r4, r5, r6, r7}
   43846:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   43848:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   4384c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   43850:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   43854:	e7f2      	b.n	4383c <radio_tmr_start_tick+0x40>
   43856:	bf00      	nop
   43858:	40008000 	.word	0x40008000
   4385c:	40008004 	.word	0x40008004
   43860:	4000800c 	.word	0x4000800c
   43864:	4000b000 	.word	0x4000b000
   43868:	4001f000 	.word	0x4001f000
   4386c:	4000b148 	.word	0x4000b148

00043870 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   43870:	4b01      	ldr	r3, [pc, #4]	; (43878 <radio_tmr_start_get+0x8>)
   43872:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   43876:	4770      	bx	lr
   43878:	4000b000 	.word	0x4000b000

0004387c <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   4387c:	b410      	push	{r4}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4387e:	4805      	ldr	r0, [pc, #20]	; (43894 <radio_tmr_stop+0x18>)
   43880:	4c05      	ldr	r4, [pc, #20]	; (43898 <radio_tmr_stop+0x1c>)
   43882:	4906      	ldr	r1, [pc, #24]	; (4389c <radio_tmr_stop+0x20>)
   43884:	4a06      	ldr	r2, [pc, #24]	; (438a0 <radio_tmr_stop+0x24>)
   43886:	2301      	movs	r3, #1
   43888:	6023      	str	r3, [r4, #0]
   4388a:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   4388c:	bc10      	pop	{r4}
   4388e:	600b      	str	r3, [r1, #0]
   43890:	6013      	str	r3, [r2, #0]
   43892:	4770      	bx	lr
   43894:	40008010 	.word	0x40008010
   43898:	40008004 	.word	0x40008004
   4389c:	40009004 	.word	0x40009004
   438a0:	40009010 	.word	0x40009010

000438a4 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   438a4:	4904      	ldr	r1, [pc, #16]	; (438b8 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   438a6:	4b05      	ldr	r3, [pc, #20]	; (438bc <radio_tmr_hcto_configure+0x18>)
   438a8:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   438ac:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   438b0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   438b4:	4770      	bx	lr
   438b6:	bf00      	nop
   438b8:	40008000 	.word	0x40008000
   438bc:	4001f000 	.word	0x4001f000

000438c0 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   438c0:	4b05      	ldr	r3, [pc, #20]	; (438d8 <radio_tmr_aa_capture+0x18>)
   438c2:	4806      	ldr	r0, [pc, #24]	; (438dc <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   438c4:	4906      	ldr	r1, [pc, #24]	; (438e0 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   438c6:	4a07      	ldr	r2, [pc, #28]	; (438e4 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   438c8:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   438cc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   438d0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   438d4:	4770      	bx	lr
   438d6:	bf00      	nop
   438d8:	4001f000 	.word	0x4001f000
   438dc:	40001100 	.word	0x40001100
   438e0:	40008040 	.word	0x40008040
   438e4:	04000080 	.word	0x04000080

000438e8 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   438e8:	4b01      	ldr	r3, [pc, #4]	; (438f0 <radio_tmr_aa_get+0x8>)
   438ea:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   438ee:	4770      	bx	lr
   438f0:	40008000 	.word	0x40008000

000438f4 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   438f4:	4b01      	ldr	r3, [pc, #4]	; (438fc <radio_tmr_aa_save+0x8>)
   438f6:	6018      	str	r0, [r3, #0]
}
   438f8:	4770      	bx	lr
   438fa:	bf00      	nop
   438fc:	20005e48 	.word	0x20005e48

00043900 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   43900:	4b01      	ldr	r3, [pc, #4]	; (43908 <radio_tmr_aa_restore+0x8>)
}
   43902:	6818      	ldr	r0, [r3, #0]
   43904:	4770      	bx	lr
   43906:	bf00      	nop
   43908:	20005e48 	.word	0x20005e48

0004390c <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   4390c:	4b01      	ldr	r3, [pc, #4]	; (43914 <radio_tmr_ready_get+0x8>)
   4390e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   43912:	4770      	bx	lr
   43914:	40008000 	.word	0x40008000

00043918 <radio_tmr_end_capture>:
   43918:	4b02      	ldr	r3, [pc, #8]	; (43924 <radio_tmr_end_capture+0xc>)
   4391a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   4391e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   43922:	4770      	bx	lr
   43924:	4001f000 	.word	0x4001f000

00043928 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   43928:	4b01      	ldr	r3, [pc, #4]	; (43930 <radio_tmr_end_get+0x8>)
   4392a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   4392e:	4770      	bx	lr
   43930:	40008000 	.word	0x40008000

00043934 <radio_tmr_tifs_base_get>:
   43934:	4b01      	ldr	r3, [pc, #4]	; (4393c <radio_tmr_tifs_base_get+0x8>)
   43936:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   4393a:	4770      	bx	lr
   4393c:	40008000 	.word	0x40008000

00043940 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   43940:	4b18      	ldr	r3, [pc, #96]	; (439a4 <radio_ccm_rx_pkt_set+0x64>)
{
   43942:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   43944:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   43946:	2702      	movs	r7, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   43948:	4e17      	ldr	r6, [pc, #92]	; (439a8 <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   4394a:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   4394e:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   43952:	f8d6 6518 	ldr.w	r6, [r6, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   43956:	4d15      	ldr	r5, [pc, #84]	; (439ac <radio_ccm_rx_pkt_set+0x6c>)
   43958:	f8df e060 	ldr.w	lr, [pc, #96]	; 439bc <radio_ccm_rx_pkt_set+0x7c>
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   4395c:	4f14      	ldr	r7, [pc, #80]	; (439b0 <radio_ccm_rx_pkt_set+0x70>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   4395e:	2902      	cmp	r1, #2
   43960:	bf14      	ite	ne
   43962:	4629      	movne	r1, r5
   43964:	4671      	moveq	r1, lr
   43966:	b2f6      	uxtb	r6, r6
   43968:	4d12      	ldr	r5, [pc, #72]	; (439b4 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->MAXPACKETSIZE = max_len;
   4396a:	f8c3 6518 	str.w	r6, [r3, #1304]	; 0x518
{
   4396e:	4694      	mov	ip, r2
	NRF_CCM->MODE = mode;
   43970:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   43974:	4a10      	ldr	r2, [pc, #64]	; (439b8 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   43976:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   4397a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4397e:	2101      	movs	r1, #1
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   43980:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   43984:	4638      	mov	r0, r7
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   43986:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   4398a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   4398e:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   43992:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   43996:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   4399a:	f8c5 6504 	str.w	r6, [r5, #1284]	; 0x504
   4399e:	6019      	str	r1, [r3, #0]
}
   439a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   439a2:	bf00      	nop
   439a4:	4000f000 	.word	0x4000f000
   439a8:	40001000 	.word	0x40001000
   439ac:	01000001 	.word	0x01000001
   439b0:	20005d3c 	.word	0x20005d3c
   439b4:	4001f000 	.word	0x4001f000
   439b8:	20005c2c 	.word	0x20005c2c
   439bc:	01010001 	.word	0x01010001

000439c0 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   439c0:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   439c2:	4b0f      	ldr	r3, [pc, #60]	; (43a00 <radio_ccm_tx_pkt_set+0x40>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   439c4:	4d0f      	ldr	r5, [pc, #60]	; (43a04 <radio_ccm_tx_pkt_set+0x44>)
	NRF_CCM->MODE = mode;
   439c6:	4c10      	ldr	r4, [pc, #64]	; (43a08 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   439c8:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   439ca:	2602      	movs	r6, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   439cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   439d0:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   439d4:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   439d8:	4e0c      	ldr	r6, [pc, #48]	; (43a0c <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   439da:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   439de:	2401      	movs	r4, #1
	NRF_CCM->INPTR = (uint32_t)pkt;
   439e0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   439e4:	4628      	mov	r0, r5
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   439e6:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   439ea:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   439ee:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   439f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   439f6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   439fa:	601c      	str	r4, [r3, #0]
}
   439fc:	bc70      	pop	{r4, r5, r6}
   439fe:	4770      	bx	lr
   43a00:	4000f000 	.word	0x4000f000
   43a04:	20005d3c 	.word	0x20005d3c
   43a08:	01010000 	.word	0x01010000
   43a0c:	20005c2c 	.word	0x20005c2c

00043a10 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   43a10:	4a0e      	ldr	r2, [pc, #56]	; (43a4c <radio_ccm_is_done+0x3c>)
   43a12:	2302      	movs	r3, #2
   43a14:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   43a18:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   43a1c:	b933      	cbnz	r3, 43a2c <radio_ccm_is_done+0x1c>
		__WFE();
   43a1e:	bf20      	wfe
		__SEV();
   43a20:	bf40      	sev
		__WFE();
   43a22:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   43a24:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   43a28:	2b00      	cmp	r3, #0
   43a2a:	d0f8      	beq.n	43a1e <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   43a2c:	4b07      	ldr	r3, [pc, #28]	; (43a4c <radio_ccm_is_done+0x3c>)
   43a2e:	4a08      	ldr	r2, [pc, #32]	; (43a50 <radio_ccm_is_done+0x40>)
   43a30:	2002      	movs	r0, #2
   43a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   43a36:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   43a3a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   43a3e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   43a42:	fab0 f080 	clz	r0, r0
   43a46:	0940      	lsrs	r0, r0, #5
   43a48:	4770      	bx	lr
   43a4a:	bf00      	nop
   43a4c:	4000f000 	.word	0x4000f000
   43a50:	e000e100 	.word	0xe000e100

00043a54 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   43a54:	4b03      	ldr	r3, [pc, #12]	; (43a64 <radio_ccm_mic_is_valid+0x10>)
   43a56:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   43a5a:	3000      	adds	r0, #0
   43a5c:	bf18      	it	ne
   43a5e:	2001      	movne	r0, #1
   43a60:	4770      	bx	lr
   43a62:	bf00      	nop
   43a64:	4000f000 	.word	0x4000f000

00043a68 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   43a68:	4a14      	ldr	r2, [pc, #80]	; (43abc <radio_ar_configure+0x54>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   43a6a:	4b15      	ldr	r3, [pc, #84]	; (43ac0 <radio_ar_configure+0x58>)
{
   43a6c:	b470      	push	{r4, r5, r6}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   43a6e:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   43a72:	4e14      	ldr	r6, [pc, #80]	; (43ac4 <radio_ar_configure+0x5c>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   43a74:	2403      	movs	r4, #3
   43a76:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
		addrptr = NRF_RADIO->PACKETPTR - 1;
   43a7a:	3d01      	subs	r5, #1
	NRF_AAR->NIRK = nirk;
   43a7c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504

	NRF_AAR->EVENTS_END = 0;
   43a80:	2400      	movs	r4, #0
    p_reg->BCC = radio_bcc;
   43a82:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->IRKPTR = (uint32_t)irk;
   43a84:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = addrptr;
   43a88:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   43a8c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   43a90:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   43a94:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   43a98:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   43a9c:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   43aa0:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   43aa4:	4908      	ldr	r1, [pc, #32]	; (43ac8 <radio_ar_configure+0x60>)
   43aa6:	4303      	orrs	r3, r0
   43aa8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   43aac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   43ab0:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
   43ab4:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   43ab8:	bc70      	pop	{r4, r5, r6}
   43aba:	4770      	bx	lr
   43abc:	40001000 	.word	0x40001000
   43ac0:	4000f000 	.word	0x4000f000
   43ac4:	20005c28 	.word	0x20005c28
   43ac8:	4001f000 	.word	0x4001f000

00043acc <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   43acc:	4b01      	ldr	r3, [pc, #4]	; (43ad4 <radio_ar_match_get+0x8>)
   43ace:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   43ad2:	4770      	bx	lr
   43ad4:	4000f000 	.word	0x4000f000

00043ad8 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   43ad8:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   43ada:	4807      	ldr	r0, [pc, #28]	; (43af8 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   43adc:	4c07      	ldr	r4, [pc, #28]	; (43afc <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   43ade:	4a08      	ldr	r2, [pc, #32]	; (43b00 <radio_ar_status_reset+0x28>)
   43ae0:	2300      	movs	r3, #0
   43ae2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   43ae6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   43aea:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   43aee:	bc10      	pop	{r4}
   43af0:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   43af4:	4770      	bx	lr
   43af6:	bf00      	nop
   43af8:	4000f000 	.word	0x4000f000
   43afc:	40001000 	.word	0x40001000
   43b00:	4001f000 	.word	0x4001f000

00043b04 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   43b04:	4b08      	ldr	r3, [pc, #32]	; (43b28 <radio_ar_has_match+0x24>)
   43b06:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   43b0a:	b160      	cbz	r0, 43b26 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   43b0c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   43b10:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   43b14:	b138      	cbz	r0, 43b26 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   43b16:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   43b1a:	b120      	cbz	r0, 43b26 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   43b1c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   43b20:	fab0 f080 	clz	r0, r0
   43b24:	0940      	lsrs	r0, r0, #5
}
   43b26:	4770      	bx	lr
   43b28:	40001000 	.word	0x40001000

00043b2c <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   43b2c:	2902      	cmp	r1, #2
{
   43b2e:	b510      	push	{r4, lr}
   43b30:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   43b32:	d00b      	beq.n	43b4c <mayfly_enable_cb+0x20>
   43b34:	231e      	movs	r3, #30
   43b36:	4a0a      	ldr	r2, [pc, #40]	; (43b60 <mayfly_enable_cb+0x34>)
   43b38:	490a      	ldr	r1, [pc, #40]	; (43b64 <mayfly_enable_cb+0x38>)
   43b3a:	480b      	ldr	r0, [pc, #44]	; (43b68 <mayfly_enable_cb+0x3c>)
   43b3c:	f006 face 	bl	4a0dc <printk>
   43b40:	4040      	eors	r0, r0
   43b42:	f380 8811 	msr	BASEPRI, r0
   43b46:	f04f 0003 	mov.w	r0, #3
   43b4a:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   43b4c:	200b      	movs	r0, #11
	if (enable) {
   43b4e:	b11c      	cbz	r4, 43b58 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   43b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   43b54:	f7e8 bf9a 	b.w	2ca8c <arch_irq_enable>
}
   43b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   43b5c:	f7e8 bfa6 	b.w	2caac <arch_irq_disable>
   43b60:	00053b14 	.word	0x00053b14
   43b64:	00053b64 	.word	0x00053b64
   43b68:	00052d50 	.word	0x00052d50

00043b6c <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   43b6c:	2901      	cmp	r1, #1
   43b6e:	d011      	beq.n	43b94 <mayfly_is_enabled+0x28>
   43b70:	b199      	cbz	r1, 43b9a <mayfly_is_enabled+0x2e>
   43b72:	2902      	cmp	r1, #2
   43b74:	d00e      	beq.n	43b94 <mayfly_is_enabled+0x28>
{
   43b76:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   43b78:	4a09      	ldr	r2, [pc, #36]	; (43ba0 <mayfly_is_enabled+0x34>)
   43b7a:	490a      	ldr	r1, [pc, #40]	; (43ba4 <mayfly_is_enabled+0x38>)
   43b7c:	480a      	ldr	r0, [pc, #40]	; (43ba8 <mayfly_is_enabled+0x3c>)
   43b7e:	2336      	movs	r3, #54	; 0x36
   43b80:	f006 faac 	bl	4a0dc <printk>
   43b84:	4040      	eors	r0, r0
   43b86:	f380 8811 	msr	BASEPRI, r0
   43b8a:	f04f 0003 	mov.w	r0, #3
   43b8e:	df02      	svc	2
		break;
	}

	return 0;
}
   43b90:	2000      	movs	r0, #0
   43b92:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   43b94:	200b      	movs	r0, #11
   43b96:	f7e8 bf9d 	b.w	2cad4 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   43b9a:	2018      	movs	r0, #24
   43b9c:	f7e8 bf9a 	b.w	2cad4 <arch_irq_is_enabled>
   43ba0:	00053b14 	.word	0x00053b14
   43ba4:	00052dd8 	.word	0x00052dd8
   43ba8:	00052d50 	.word	0x00052d50

00043bac <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   43bac:	4288      	cmp	r0, r1
   43bae:	d00b      	beq.n	43bc8 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   43bb0:	2801      	cmp	r0, #1
   43bb2:	d003      	beq.n	43bbc <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   43bb4:	2802      	cmp	r0, #2
   43bb6:	d009      	beq.n	43bcc <mayfly_prio_is_equal+0x20>
   43bb8:	2000      	movs	r0, #0
#endif
	       0;
}
   43bba:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   43bbc:	f1a1 0002 	sub.w	r0, r1, #2
   43bc0:	fab0 f080 	clz	r0, r0
   43bc4:	0940      	lsrs	r0, r0, #5
   43bc6:	4770      	bx	lr
   43bc8:	2001      	movs	r0, #1
   43bca:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   43bcc:	f1a1 0001 	sub.w	r0, r1, #1
   43bd0:	fab0 f080 	clz	r0, r0
   43bd4:	0940      	lsrs	r0, r0, #5
   43bd6:	4770      	bx	lr

00043bd8 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   43bd8:	2901      	cmp	r1, #1
{
   43bda:	b508      	push	{r3, lr}
	switch (callee_id) {
   43bdc:	d00f      	beq.n	43bfe <mayfly_pend+0x26>
   43bde:	b1a1      	cbz	r1, 43c0a <mayfly_pend+0x32>
   43be0:	2902      	cmp	r1, #2
   43be2:	d00c      	beq.n	43bfe <mayfly_pend+0x26>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   43be4:	2367      	movs	r3, #103	; 0x67
   43be6:	4a0c      	ldr	r2, [pc, #48]	; (43c18 <mayfly_pend+0x40>)
   43be8:	490c      	ldr	r1, [pc, #48]	; (43c1c <mayfly_pend+0x44>)
   43bea:	480d      	ldr	r0, [pc, #52]	; (43c20 <mayfly_pend+0x48>)
   43bec:	f006 fa76 	bl	4a0dc <printk>
   43bf0:	4040      	eors	r0, r0
   43bf2:	f380 8811 	msr	BASEPRI, r0
   43bf6:	f04f 0003 	mov.w	r0, #3
   43bfa:	df02      	svc	2
		break;
	}
}
   43bfc:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   43bfe:	4b09      	ldr	r3, [pc, #36]	; (43c24 <mayfly_pend+0x4c>)
   43c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
   43c04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   43c08:	bd08      	pop	{r3, pc}
   43c0a:	4b06      	ldr	r3, [pc, #24]	; (43c24 <mayfly_pend+0x4c>)
   43c0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   43c10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   43c14:	bd08      	pop	{r3, pc}
   43c16:	bf00      	nop
   43c18:	00053b14 	.word	0x00053b14
   43c1c:	00052dd8 	.word	0x00052dd8
   43c20:	00052d50 	.word	0x00052d50
   43c24:	e000e100 	.word	0xe000e100

00043c28 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   43c28:	2803      	cmp	r0, #3
{
   43c2a:	b510      	push	{r4, lr}
   43c2c:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   43c2e:	d804      	bhi.n	43c3a <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   43c30:	4b11      	ldr	r3, [pc, #68]	; (43c78 <hal_ticker_instance0_caller_id_get+0x50>)
   43c32:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   43c34:	b18c      	cbz	r4, 43c5a <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   43c36:	4620      	mov	r0, r4
   43c38:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   43c3a:	232b      	movs	r3, #43	; 0x2b
   43c3c:	4a0f      	ldr	r2, [pc, #60]	; (43c7c <hal_ticker_instance0_caller_id_get+0x54>)
   43c3e:	4910      	ldr	r1, [pc, #64]	; (43c80 <hal_ticker_instance0_caller_id_get+0x58>)
   43c40:	4810      	ldr	r0, [pc, #64]	; (43c84 <hal_ticker_instance0_caller_id_get+0x5c>)
   43c42:	f006 fa4b 	bl	4a0dc <printk>
   43c46:	4040      	eors	r0, r0
   43c48:	f380 8811 	msr	BASEPRI, r0
   43c4c:	f04f 0003 	mov.w	r0, #3
   43c50:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   43c52:	4b09      	ldr	r3, [pc, #36]	; (43c78 <hal_ticker_instance0_caller_id_get+0x50>)
   43c54:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   43c56:	2c00      	cmp	r4, #0
   43c58:	d1ed      	bne.n	43c36 <hal_ticker_instance0_caller_id_get+0xe>
   43c5a:	232e      	movs	r3, #46	; 0x2e
   43c5c:	4a07      	ldr	r2, [pc, #28]	; (43c7c <hal_ticker_instance0_caller_id_get+0x54>)
   43c5e:	490a      	ldr	r1, [pc, #40]	; (43c88 <hal_ticker_instance0_caller_id_get+0x60>)
   43c60:	4808      	ldr	r0, [pc, #32]	; (43c84 <hal_ticker_instance0_caller_id_get+0x5c>)
   43c62:	f006 fa3b 	bl	4a0dc <printk>
   43c66:	4040      	eors	r0, r0
   43c68:	f380 8811 	msr	BASEPRI, r0
   43c6c:	f04f 0003 	mov.w	r0, #3
   43c70:	df02      	svc	2
}
   43c72:	4620      	mov	r0, r4
   43c74:	bd10      	pop	{r4, pc}
   43c76:	bf00      	nop
   43c78:	00053b74 	.word	0x00053b74
   43c7c:	00053b78 	.word	0x00053b78
   43c80:	00053bc8 	.word	0x00053bc8
   43c84:	00052d50 	.word	0x00052d50
   43c88:	00053be8 	.word	0x00053be8

00043c8c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   43c8c:	3801      	subs	r0, #1
{
   43c8e:	b570      	push	{r4, r5, r6, lr}
   43c90:	461c      	mov	r4, r3
	switch (caller_id) {
   43c92:	2804      	cmp	r0, #4
   43c94:	d855      	bhi.n	43d42 <hal_ticker_instance0_sched+0xb6>
   43c96:	e8df f000 	tbb	[pc, r0]
   43c9a:	1a12      	.short	0x1a12
   43c9c:	1e16      	.short	0x1e16
   43c9e:	03          	.byte	0x03
   43c9f:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   43ca0:	2904      	cmp	r1, #4
   43ca2:	d01e      	beq.n	43ce2 <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   43ca4:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   43ca6:	4a28      	ldr	r2, [pc, #160]	; (43d48 <hal_ticker_instance0_sched+0xbc>)
   43ca8:	4928      	ldr	r1, [pc, #160]	; (43d4c <hal_ticker_instance0_sched+0xc0>)
   43caa:	4829      	ldr	r0, [pc, #164]	; (43d50 <hal_ticker_instance0_sched+0xc4>)
   43cac:	f006 fa16 	bl	4a0dc <printk>
   43cb0:	4040      	eors	r0, r0
   43cb2:	f380 8811 	msr	BASEPRI, r0
   43cb6:	f04f 0003 	mov.w	r0, #3
   43cba:	df02      	svc	2
		break;
	}
}
   43cbc:	bd70      	pop	{r4, r5, r6, pc}
		switch (callee_id) {
   43cbe:	2904      	cmp	r1, #4
   43cc0:	d021      	beq.n	43d06 <hal_ticker_instance0_sched+0x7a>
			LL_ASSERT(0);
   43cc2:	234e      	movs	r3, #78	; 0x4e
   43cc4:	e7ef      	b.n	43ca6 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   43cc6:	2904      	cmp	r1, #4
   43cc8:	d014      	beq.n	43cf4 <hal_ticker_instance0_sched+0x68>
			LL_ASSERT(0);
   43cca:	237c      	movs	r3, #124	; 0x7c
   43ccc:	e7eb      	b.n	43ca6 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   43cce:	2903      	cmp	r1, #3
   43cd0:	d022      	beq.n	43d18 <hal_ticker_instance0_sched+0x8c>
			LL_ASSERT(0);
   43cd2:	2365      	movs	r3, #101	; 0x65
   43cd4:	e7e7      	b.n	43ca6 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   43cd6:	2903      	cmp	r1, #3
   43cd8:	d02a      	beq.n	43d30 <hal_ticker_instance0_sched+0xa4>
   43cda:	2904      	cmp	r1, #4
   43cdc:	d025      	beq.n	43d2a <hal_ticker_instance0_sched+0x9e>
			LL_ASSERT(0);
   43cde:	23a2      	movs	r3, #162	; 0xa2
   43ce0:	e7e1      	b.n	43ca6 <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   43ce2:	4d1c      	ldr	r5, [pc, #112]	; (43d54 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   43ce4:	2102      	movs	r1, #2
   43ce6:	462b      	mov	r3, r5
			m.param = instance;
   43ce8:	60ac      	str	r4, [r5, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   43cea:	2003      	movs	r0, #3
}
   43cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   43cf0:	f7f0 b982 	b.w	33ff8 <mayfly_enqueue>
			m.param = instance;
   43cf4:	4d18      	ldr	r5, [pc, #96]	; (43d58 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   43cf6:	2102      	movs	r1, #2
   43cf8:	462b      	mov	r3, r5
			m.param = instance;
   43cfa:	60ac      	str	r4, [r5, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   43cfc:	2001      	movs	r0, #1
}
   43cfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   43d02:	f7f0 b979 	b.w	33ff8 <mayfly_enqueue>
			m.param = instance;
   43d06:	4d15      	ldr	r5, [pc, #84]	; (43d5c <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   43d08:	2102      	movs	r1, #2
   43d0a:	462b      	mov	r3, r5
			m.param = instance;
   43d0c:	60ac      	str	r4, [r5, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   43d0e:	2000      	movs	r0, #0
}
   43d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   43d14:	f7f0 b970 	b.w	33ff8 <mayfly_enqueue>
			m.param = instance;
   43d18:	4d11      	ldr	r5, [pc, #68]	; (43d60 <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   43d1a:	2101      	movs	r1, #1
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d1c:	462b      	mov	r3, r5
			m.param = instance;
   43d1e:	60ac      	str	r4, [r5, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d20:	4608      	mov	r0, r1
}
   43d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d26:	f7f0 b967 	b.w	33ff8 <mayfly_enqueue>
			m.param = instance;
   43d2a:	4d0e      	ldr	r5, [pc, #56]	; (43d64 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d2c:	2102      	movs	r1, #2
   43d2e:	e7f5      	b.n	43d1c <hal_ticker_instance0_sched+0x90>
			m.param = instance;
   43d30:	4d0d      	ldr	r5, [pc, #52]	; (43d68 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d32:	2101      	movs	r1, #1
   43d34:	462b      	mov	r3, r5
			m.param = instance;
   43d36:	60ac      	str	r4, [r5, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d38:	2002      	movs	r0, #2
}
   43d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   43d3e:	f7f0 b95b 	b.w	33ff8 <mayfly_enqueue>
		LL_ASSERT(0);
   43d42:	23c0      	movs	r3, #192	; 0xc0
   43d44:	e7af      	b.n	43ca6 <hal_ticker_instance0_sched+0x1a>
   43d46:	bf00      	nop
   43d48:	00053b78 	.word	0x00053b78
   43d4c:	00052dd8 	.word	0x00052dd8
   43d50:	00052d50 	.word	0x00052d50
   43d54:	20000bac 	.word	0x20000bac
   43d58:	20000b7c 	.word	0x20000b7c
   43d5c:	20000b5c 	.word	0x20000b5c
   43d60:	20000b6c 	.word	0x20000b6c
   43d64:	20000b9c 	.word	0x20000b9c
   43d68:	20000b8c 	.word	0x20000b8c

00043d6c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
	cntr_cmp_set(0, value);
   43d6c:	4601      	mov	r1, r0
   43d6e:	2000      	movs	r0, #0
   43d70:	f7ff b9a6 	b.w	430c0 <cntr_cmp_set>

00043d74 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   43d74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43d78:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   43d7c:	3201      	adds	r2, #1
   43d7e:	d008      	beq.n	43d92 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   43d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   43d84:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   43d88:	f013 0301 	ands.w	r3, r3, #1
   43d8c:	d10f      	bne.n	43dae <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   43d8e:	2000      	movs	r0, #0
   43d90:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   43d92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   43d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
   43d9a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   43d9c:	4293      	cmp	r3, r2
   43d9e:	d0f6      	beq.n	43d8e <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   43da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   43da4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   43da8:	f013 0301 	ands.w	r3, r3, #1
   43dac:	d0ef      	beq.n	43d8e <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   43dae:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   43db2:	0c19      	lsrs	r1, r3, #16
{
   43db4:	b510      	push	{r4, lr}
	dst[0] = val;
   43db6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   43db8:	0a0c      	lsrs	r4, r1, #8
   43dba:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   43dbe:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   43dc0:	70c4      	strb	r4, [r0, #3]
   43dc2:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   43dc4:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   43dc8:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   43dca:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   43dce:	f063 033f 	orn	r3, r3, #63	; 0x3f
   43dd2:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   43dd4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   43dd8:	3301      	adds	r3, #1
   43dda:	d035      	beq.n	43e48 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   43ddc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   43de0:	3301      	adds	r3, #1
   43de2:	d031      	beq.n	43e48 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   43de4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   43de8:	3301      	adds	r3, #1
   43dea:	d02d      	beq.n	43e48 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   43dec:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   43df0:	3301      	adds	r3, #1
   43df2:	d029      	beq.n	43e48 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   43df4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   43df8:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   43dfa:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   43dfc:	0a0c      	lsrs	r4, r1, #8
   43dfe:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   43e02:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   43e04:	7244      	strb	r4, [r0, #9]
   43e06:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   43e08:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   43e0c:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   43e0e:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   43e10:	0a0c      	lsrs	r4, r1, #8
   43e12:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   43e16:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   43e18:	7344      	strb	r4, [r0, #13]
   43e1a:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   43e1c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   43e20:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   43e22:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   43e24:	0a0c      	lsrs	r4, r1, #8
   43e26:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   43e2a:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   43e2c:	7444      	strb	r4, [r0, #17]
   43e2e:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   43e30:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   43e34:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   43e36:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   43e38:	0a11      	lsrs	r1, r2, #8
   43e3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   43e3e:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   43e40:	7541      	strb	r1, [r0, #21]
   43e42:	74c3      	strb	r3, [r0, #19]
		return 1;
   43e44:	2001      	movs	r0, #1
}
   43e46:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   43e48:	2210      	movs	r2, #16
   43e4a:	2100      	movs	r1, #0
   43e4c:	3006      	adds	r0, #6
   43e4e:	f008 fa58 	bl	4c302 <memset>
		return 1;
   43e52:	2001      	movs	r0, #1
}
   43e54:	bd10      	pop	{r4, pc}
   43e56:	bf00      	nop

00043e58 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   43e58:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   43e5a:	2210      	movs	r2, #16
{
   43e5c:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   43e5e:	2100      	movs	r1, #0
   43e60:	f008 fa4f 	bl	4c302 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   43e64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   43e68:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   43e6c:	3201      	adds	r2, #1
   43e6e:	d034      	beq.n	43eda <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   43e70:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   43e74:	3201      	adds	r2, #1
   43e76:	d030      	beq.n	43eda <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   43e78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   43e7c:	3201      	adds	r2, #1
   43e7e:	d02c      	beq.n	43eda <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   43e80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   43e84:	3201      	adds	r2, #1
   43e86:	d028      	beq.n	43eda <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   43e88:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   43e8c:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   43e8e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   43e90:	0a08      	lsrs	r0, r1, #8
   43e92:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   43e96:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   43e98:	70e0      	strb	r0, [r4, #3]
   43e9a:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   43e9c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   43ea0:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   43ea2:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   43ea4:	0a08      	lsrs	r0, r1, #8
   43ea6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   43eaa:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   43eac:	71e0      	strb	r0, [r4, #7]
   43eae:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   43eb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   43eb4:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   43eb6:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   43eb8:	0a08      	lsrs	r0, r1, #8
   43eba:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   43ebe:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   43ec0:	7262      	strb	r2, [r4, #9]
   43ec2:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   43ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   43ec8:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   43eca:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   43ecc:	0a11      	lsrs	r1, r2, #8
   43ece:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   43ed2:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   43ed4:	73e1      	strb	r1, [r4, #15]
   43ed6:	7363      	strb	r3, [r4, #13]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   43ed8:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   43eda:	4620      	mov	r0, r4
   43edc:	2210      	movs	r2, #16
   43ede:	2100      	movs	r1, #0
}
   43ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   43ee4:	f008 ba0d 	b.w	4c302 <memset>

00043ee8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   43ee8:	4b02      	ldr	r3, [pc, #8]	; (43ef4 <net_buf_pool_get+0xc>)
   43eea:	222c      	movs	r2, #44	; 0x2c
   43eec:	fb02 3000 	mla	r0, r2, r0, r3
   43ef0:	4770      	bx	lr
   43ef2:	bf00      	nop
   43ef4:	200010a4 	.word	0x200010a4

00043ef8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   43ef8:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   43efa:	4a06      	ldr	r2, [pc, #24]	; (43f14 <net_buf_id+0x1c>)
   43efc:	212c      	movs	r1, #44	; 0x2c
   43efe:	fb01 2303 	mla	r3, r1, r3, r2
   43f02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   43f04:	7f1b      	ldrb	r3, [r3, #28]
   43f06:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   43f08:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   43f0a:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   43f0e:	fbb0 f0f3 	udiv	r0, r0, r3
   43f12:	4770      	bx	lr
   43f14:	200010a4 	.word	0x200010a4

00043f18 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   43f18:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   43f1a:	4a0a      	ldr	r2, [pc, #40]	; (43f44 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   43f1c:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   43f1e:	242c      	movs	r4, #44	; 0x2c
   43f20:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   43f24:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   43f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   43f28:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   43f2a:	6823      	ldr	r3, [r4, #0]
   43f2c:	429a      	cmp	r2, r3
   43f2e:	bf94      	ite	ls
   43f30:	600a      	strls	r2, [r1, #0]
   43f32:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   43f34:	f7ff ffe0 	bl	43ef8 <net_buf_id>
   43f38:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   43f3c:	fb02 3000 	mla	r0, r2, r0, r3
   43f40:	bd10      	pop	{r4, pc}
   43f42:	bf00      	nop
   43f44:	200010a4 	.word	0x200010a4

00043f48 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   43f48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   43f4c:	4605      	mov	r5, r0
   43f4e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   43f50:	4610      	mov	r0, r2
   43f52:	4619      	mov	r1, r3
{
   43f54:	4616      	mov	r6, r2
   43f56:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   43f58:	f00d fad9 	bl	5150e <sys_clock_timeout_end_calc>
   43f5c:	4680      	mov	r8, r0
   43f5e:	4689      	mov	r9, r1
	__asm__ volatile(
   43f60:	f04f 0320 	mov.w	r3, #32
   43f64:	f3ef 8a11 	mrs	sl, BASEPRI
   43f68:	f383 8812 	msr	BASEPRI_MAX, r3
   43f6c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   43f70:	8b6b      	ldrh	r3, [r5, #26]
   43f72:	2b00      	cmp	r3, #0
   43f74:	d059      	beq.n	4402a <net_buf_alloc_len+0xe2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   43f76:	8b2a      	ldrh	r2, [r5, #24]
   43f78:	429a      	cmp	r2, r3
   43f7a:	d93d      	bls.n	43ff8 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   43f7c:	2200      	movs	r2, #0
   43f7e:	2300      	movs	r3, #0
   43f80:	4628      	mov	r0, r5
   43f82:	f004 fc67 	bl	48854 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   43f86:	4604      	mov	r4, r0
   43f88:	2800      	cmp	r0, #0
   43f8a:	d035      	beq.n	43ff8 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   43f8c:	f38a 8811 	msr	BASEPRI, sl
   43f90:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   43f94:	9b01      	ldr	r3, [sp, #4]
   43f96:	2b00      	cmp	r3, #0
   43f98:	d057      	beq.n	4404a <net_buf_alloc_len+0x102>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   43f9a:	ea56 0307 	orrs.w	r3, r6, r7
   43f9e:	d010      	beq.n	43fc2 <net_buf_alloc_len+0x7a>
   43fa0:	1c7b      	adds	r3, r7, #1
   43fa2:	bf08      	it	eq
   43fa4:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   43fa8:	d00b      	beq.n	43fc2 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   43faa:	f005 fb5f 	bl	4966c <sys_clock_tick_get>
   43fae:	ebb8 0600 	subs.w	r6, r8, r0
   43fb2:	eb69 0701 	sbc.w	r7, r9, r1
   43fb6:	2e00      	cmp	r6, #0
   43fb8:	f177 0300 	sbcs.w	r3, r7, #0
   43fbc:	bfbc      	itt	lt
   43fbe:	2600      	movlt	r6, #0
   43fc0:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   43fc2:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   43fc4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 44060 <net_buf_alloc_len+0x118>
   43fc8:	f04f 092c 	mov.w	r9, #44	; 0x2c
   43fcc:	fb09 8303 	mla	r3, r9, r3, r8
   43fd0:	4632      	mov	r2, r6
   43fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   43fd4:	681b      	ldr	r3, [r3, #0]
   43fd6:	a901      	add	r1, sp, #4
   43fd8:	681d      	ldr	r5, [r3, #0]
   43fda:	4620      	mov	r0, r4
   43fdc:	463b      	mov	r3, r7
   43fde:	47a8      	blx	r5
   43fe0:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   43fe2:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   43fe4:	2800      	cmp	r0, #0
   43fe6:	d131      	bne.n	4404c <net_buf_alloc_len+0x104>
	k_lifo_put(&pool->free, buf);
   43fe8:	79a0      	ldrb	r0, [r4, #6]
   43fea:	4621      	mov	r1, r4
   43fec:	fb00 8009 	mla	r0, r0, r9, r8
   43ff0:	f00c fff7 	bl	50fe2 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   43ff4:	462c      	mov	r4, r5
   43ff6:	e024      	b.n	44042 <net_buf_alloc_len+0xfa>
		uninit_count = pool->uninit_count--;
   43ff8:	8b69      	ldrh	r1, [r5, #26]
   43ffa:	1e4b      	subs	r3, r1, #1
   43ffc:	836b      	strh	r3, [r5, #26]
   43ffe:	f38a 8811 	msr	BASEPRI, sl
   44002:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   44006:	7f2a      	ldrb	r2, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   44008:	8b2b      	ldrh	r3, [r5, #24]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   4400a:	f102 0417 	add.w	r4, r2, #23
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   4400e:	1a5b      	subs	r3, r3, r1
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   44010:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   44012:	f024 0403 	bic.w	r4, r4, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   44016:	fb03 1404 	mla	r4, r3, r4, r1
	return pool - _net_buf_pool_list;
   4401a:	4b11      	ldr	r3, [pc, #68]	; (44060 <net_buf_alloc_len+0x118>)
	buf->user_data_size = pool->user_data_size;
   4401c:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   4401e:	1aed      	subs	r5, r5, r3
   44020:	4b10      	ldr	r3, [pc, #64]	; (44064 <net_buf_alloc_len+0x11c>)
   44022:	10ad      	asrs	r5, r5, #2
   44024:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   44026:	71a5      	strb	r5, [r4, #6]
		goto success;
   44028:	e7b4      	b.n	43f94 <net_buf_alloc_len+0x4c>
   4402a:	f38a 8811 	msr	BASEPRI, sl
   4402e:	f3bf 8f6f 	isb	sy
   44032:	4632      	mov	r2, r6
   44034:	463b      	mov	r3, r7
   44036:	4628      	mov	r0, r5
   44038:	f004 fc0c 	bl	48854 <z_impl_k_queue_get>
	if (!buf) {
   4403c:	4604      	mov	r4, r0
   4403e:	2800      	cmp	r0, #0
   44040:	d1a8      	bne.n	43f94 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   44042:	4620      	mov	r0, r4
   44044:	b002      	add	sp, #8
   44046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   4404a:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   4404c:	2300      	movs	r3, #0
	buf->ref   = 1U;
   4404e:	2201      	movs	r2, #1
	buf->frags = NULL;
   44050:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   44052:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   44054:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   44056:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   44058:	6923      	ldr	r3, [r4, #16]
   4405a:	81e2      	strh	r2, [r4, #14]
   4405c:	60a3      	str	r3, [r4, #8]
	return buf;
   4405e:	e7f0      	b.n	44042 <net_buf_alloc_len+0xfa>
   44060:	200010a4 	.word	0x200010a4
   44064:	ba2e8ba3 	.word	0xba2e8ba3

00044068 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   44068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4406c:	4d16      	ldr	r5, [pc, #88]	; (440c8 <net_buf_unref+0x60>)
   4406e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   44070:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   44072:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   44074:	b90c      	cbnz	r4, 4407a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   44076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   4407a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   4407c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   44080:	3b01      	subs	r3, #1
   44082:	b2db      	uxtb	r3, r3
   44084:	7123      	strb	r3, [r4, #4]
   44086:	2b00      	cmp	r3, #0
   44088:	d1f5      	bne.n	44076 <net_buf_unref+0xe>
		if (buf->__buf) {
   4408a:	6921      	ldr	r1, [r4, #16]
   4408c:	b159      	cbz	r1, 440a6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   4408e:	7963      	ldrb	r3, [r4, #5]
   44090:	079b      	lsls	r3, r3, #30
   44092:	d407      	bmi.n	440a4 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   44094:	79a3      	ldrb	r3, [r4, #6]
   44096:	fb07 5303 	mla	r3, r7, r3, r5
   4409a:	4620      	mov	r0, r4
   4409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   4409e:	681b      	ldr	r3, [r3, #0]
   440a0:	689b      	ldr	r3, [r3, #8]
   440a2:	4798      	blx	r3
			buf->__buf = NULL;
   440a4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   440a6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   440a8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   440aa:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   440ae:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   440b0:	6a1b      	ldr	r3, [r3, #32]
   440b2:	b11b      	cbz	r3, 440bc <net_buf_unref+0x54>
			pool->destroy(buf);
   440b4:	4620      	mov	r0, r4
   440b6:	4798      	blx	r3
{
   440b8:	4644      	mov	r4, r8
   440ba:	e7db      	b.n	44074 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   440bc:	4621      	mov	r1, r4
   440be:	fb00 5007 	mla	r0, r0, r7, r5
   440c2:	f00c ff8e 	bl	50fe2 <k_queue_prepend>
   440c6:	e7f7      	b.n	440b8 <net_buf_unref+0x50>
   440c8:	200010a4 	.word	0x200010a4

000440cc <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   440cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   440d0:	4607      	mov	r7, r0
   440d2:	460e      	mov	r6, r1
   440d4:	4690      	mov	r8, r2
   440d6:	4604      	mov	r4, r0
	while (buf->frags) {
   440d8:	6825      	ldr	r5, [r4, #0]
   440da:	bb25      	cbnz	r5, 44126 <net_buf_append_bytes+0x5a>
	return &_net_buf_pool_list[id];
   440dc:	f8df b064 	ldr.w	fp, [pc, #100]	; 44144 <net_buf_append_bytes+0x78>
   440e0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	return net_buf_simple_tailroom(&buf->b);
   440e4:	3408      	adds	r4, #8
   440e6:	4620      	mov	r0, r4
   440e8:	f00c f8a2 	bl	50230 <net_buf_simple_tailroom>
	struct net_buf *frag = net_buf_frag_last(buf);
	size_t added_len = 0;
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   440ec:	4286      	cmp	r6, r0
   440ee:	bf2c      	ite	cs
   440f0:	fa1f f980 	uxthcs.w	r9, r0
   440f4:	fa1f f986 	uxthcc.w	r9, r6
	return net_buf_simple_add_mem(&buf->b, mem, len);
   440f8:	4641      	mov	r1, r8
   440fa:	464a      	mov	r2, r9
   440fc:	4620      	mov	r0, r4
   440fe:	f00c f850 	bl	501a2 <net_buf_simple_add_mem>
		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
		value8 += count;

		if (len == 0) {
   44102:	ebb6 0609 	subs.w	r6, r6, r9
		added_len += count;
   44106:	444d      	add	r5, r9
		value8 += count;
   44108:	44c8      	add	r8, r9
		if (len == 0) {
   4410a:	d017      	beq.n	4413c <net_buf_append_bytes+0x70>
			return added_len;
		}

		if (allocate_cb) {
   4410c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   4410e:	b163      	cbz	r3, 4412a <net_buf_append_bytes+0x5e>
			frag = allocate_cb(timeout, user_data);
   44110:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   44112:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   44116:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   44118:	4604      	mov	r4, r0
		}

		if (!frag) {
   4411a:	b178      	cbz	r0, 4413c <net_buf_append_bytes+0x70>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   4411c:	4601      	mov	r1, r0
   4411e:	4638      	mov	r0, r7
   44120:	f00c f81d 	bl	5015e <net_buf_frag_add>
	do {
   44124:	e7de      	b.n	440e4 <net_buf_append_bytes+0x18>
	while (buf->frags) {
   44126:	462c      	mov	r4, r5
   44128:	e7d6      	b.n	440d8 <net_buf_append_bytes+0xc>
	return &_net_buf_pool_list[id];
   4412a:	79b8      	ldrb	r0, [r7, #6]
			frag = net_buf_alloc_len(pool, len, timeout);
   4412c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   44130:	4631      	mov	r1, r6
   44132:	fb00 b00a 	mla	r0, r0, sl, fp
   44136:	f7ff ff07 	bl	43f48 <net_buf_alloc_len>
   4413a:	e7ed      	b.n	44118 <net_buf_append_bytes+0x4c>
	} while (1);

	/* Unreachable */
	return 0;
}
   4413c:	4628      	mov	r0, r5
   4413e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44142:	bf00      	nop
   44144:	200010a4 	.word	0x200010a4

00044148 <hid_int_in>:

	return -EINVAL;
}

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   44148:	b510      	push	{r4, lr}
   4414a:	460c      	mov	r4, r1
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
   4414c:	4601      	mov	r1, r0
   4414e:	4808      	ldr	r0, [pc, #32]	; (44170 <hid_int_in+0x28>)
   44150:	f006 fd95 	bl	4ac7e <usb_get_dev_data_by_ep>
	if (common == NULL) {
   44154:	b150      	cbz	r0, 4416c <hid_int_in+0x24>
		return;
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
   44156:	2c02      	cmp	r4, #2
   44158:	d108      	bne.n	4416c <hid_int_in+0x24>
   4415a:	f850 3c08 	ldr.w	r3, [r0, #-8]
   4415e:	b12b      	cbz	r3, 4416c <hid_int_in+0x24>
	    dev_data->ops->int_in_ready == NULL) {
   44160:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
   44162:	b11b      	cbz	r3, 4416c <hid_int_in+0x24>
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
   44164:	6800      	ldr	r0, [r0, #0]
}
   44166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	dev_data->ops->int_in_ready(common->dev);
   4416a:	4718      	bx	r3
}
   4416c:	bd10      	pop	{r4, pc}
   4416e:	bf00      	nop
   44170:	20005e94 	.word	0x20005e94

00044174 <hid_custom_handle_req>:
{
   44174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44176:	f990 3000 	ldrsb.w	r3, [r0]
	if (usb_reqtype_is_to_host(setup) &&
   4417a:	2b00      	cmp	r3, #0
{
   4417c:	4604      	mov	r4, r0
   4417e:	460f      	mov	r7, r1
   44180:	4616      	mov	r6, r2
	if (usb_reqtype_is_to_host(setup) &&
   44182:	db02      	blt.n	4418a <hid_custom_handle_req+0x16>
	return -EINVAL;
   44184:	f06f 0015 	mvn.w	r0, #21
}
   44188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
   4418a:	8803      	ldrh	r3, [r0, #0]
   4418c:	f240 6201 	movw	r2, #1537	; 0x601
   44190:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
   44194:	4293      	cmp	r3, r2
   44196:	d1f5      	bne.n	44184 <hid_custom_handle_req+0x10>
		uint8_t value = (uint8_t)(setup->wValue >> 8);
   44198:	8845      	ldrh	r5, [r0, #2]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
   4419a:	7901      	ldrb	r1, [r0, #4]
   4419c:	4811      	ldr	r0, [pc, #68]	; (441e4 <hid_custom_handle_req+0x70>)
		uint8_t value = (uint8_t)(setup->wValue >> 8);
   4419e:	0a2d      	lsrs	r5, r5, #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
   441a0:	f006 fd60 	bl	4ac64 <usb_get_dev_data_by_iface>
		if (common == NULL) {
   441a4:	2800      	cmp	r0, #0
   441a6:	d0ed      	beq.n	44184 <hid_custom_handle_req+0x10>
		switch (value) {
   441a8:	2d21      	cmp	r5, #33	; 0x21
   441aa:	d004      	beq.n	441b6 <hid_custom_handle_req+0x42>
   441ac:	2d22      	cmp	r5, #34	; 0x22
   441ae:	d00f      	beq.n	441d0 <hid_custom_handle_req+0x5c>
			return -ENOTSUP;
   441b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   441b4:	e7e8      	b.n	44188 <hid_custom_handle_req+0x14>
			cfg = common->dev->config;
   441b6:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
   441b8:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
   441ba:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
   441bc:	685b      	ldr	r3, [r3, #4]
   441be:	f813 2f09 	ldrb.w	r2, [r3, #9]!
   441c2:	4291      	cmp	r1, r2
   441c4:	bf94      	ite	ls
   441c6:	6039      	strls	r1, [r7, #0]
   441c8:	603a      	strhi	r2, [r7, #0]
			*data = (uint8_t *)dev_data->report_desc;
   441ca:	6033      	str	r3, [r6, #0]
		return 0;
   441cc:	2000      	movs	r0, #0
			break;
   441ce:	e7db      	b.n	44188 <hid_custom_handle_req+0x14>
			*len = MIN(setup->wLength, dev_data->report_size);
   441d0:	88e3      	ldrh	r3, [r4, #6]
   441d2:	f850 2c0c 	ldr.w	r2, [r0, #-12]
   441d6:	429a      	cmp	r2, r3
   441d8:	bf94      	ite	ls
   441da:	603a      	strls	r2, [r7, #0]
   441dc:	603b      	strhi	r3, [r7, #0]
			*data = (uint8_t *)dev_data->report_desc;
   441de:	f850 3c10 	ldr.w	r3, [r0, #-16]
   441e2:	e7f2      	b.n	441ca <hid_custom_handle_req+0x56>
   441e4:	20005e94 	.word	0x20005e94

000441e8 <hid_class_handle_req>:
{
   441e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   441ec:	4604      	mov	r4, r0
   441ee:	460e      	mov	r6, r1
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
   441f0:	7901      	ldrb	r1, [r0, #4]
   441f2:	4814      	ldr	r0, [pc, #80]	; (44244 <hid_class_handle_req+0x5c>)
{
   441f4:	4617      	mov	r7, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
   441f6:	f006 fd35 	bl	4ac64 <usb_get_dev_data_by_iface>
	if (common == NULL) {
   441fa:	4601      	mov	r1, r0
   441fc:	b1d0      	cbz	r0, 44234 <hid_class_handle_req+0x4c>
	dev = common->dev;
   441fe:	f994 2000 	ldrsb.w	r2, [r4]
   44202:	6800      	ldr	r0, [r0, #0]
   44204:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
   44206:	2a00      	cmp	r2, #0
   44208:	da0d      	bge.n	44226 <hid_class_handle_req+0x3e>
		switch (setup->bRequest) {
   4420a:	2b01      	cmp	r3, #1
   4420c:	d116      	bne.n	4423c <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->get_report) {
   4420e:	f851 3c08 	ldr.w	r3, [r1, #-8]
   44212:	b19b      	cbz	r3, 4423c <hid_class_handle_req+0x54>
   44214:	681d      	ldr	r5, [r3, #0]
			if (dev_data->ops && dev_data->ops->set_report) {
   44216:	b18d      	cbz	r5, 4423c <hid_class_handle_req+0x54>
				return dev_data->ops->set_report(dev, setup,
   44218:	463b      	mov	r3, r7
   4421a:	4632      	mov	r2, r6
   4421c:	4621      	mov	r1, r4
   4421e:	46ac      	mov	ip, r5
}
   44220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return dev_data->ops->set_report(dev, setup,
   44224:	4760      	bx	ip
		switch (setup->bRequest) {
   44226:	2b09      	cmp	r3, #9
   44228:	d108      	bne.n	4423c <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
   4422a:	f851 3c08 	ldr.w	r3, [r1, #-8]
   4422e:	b12b      	cbz	r3, 4423c <hid_class_handle_req+0x54>
   44230:	685d      	ldr	r5, [r3, #4]
   44232:	e7f0      	b.n	44216 <hid_class_handle_req+0x2e>
		return -ENODEV;
   44234:	f06f 0012 	mvn.w	r0, #18
}
   44238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return -ENOTSUP;
   4423c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   44240:	e7fa      	b.n	44238 <hid_class_handle_req+0x50>
   44242:	bf00      	nop
   44244:	20005e94 	.word	0x20005e94

00044248 <hid_status_cb>:
{
   44248:	b510      	push	{r4, lr}
   4424a:	460c      	mov	r4, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
   4424c:	4601      	mov	r1, r0
   4424e:	480f      	ldr	r0, [pc, #60]	; (4428c <hid_status_cb+0x44>)
   44250:	f006 fcfd 	bl	4ac4e <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   44254:	b150      	cbz	r0, 4426c <hid_status_cb+0x24>
	switch (status) {
   44256:	1e61      	subs	r1, r4, #1
   44258:	2905      	cmp	r1, #5
   4425a:	d807      	bhi.n	4426c <hid_status_cb+0x24>
   4425c:	e8df f001 	tbb	[pc, r1]
   44260:	07030607 	.word	0x07030607
   44264:	0f0d      	.short	0x0f0d
		dev_data->configured = true;
   44266:	2301      	movs	r3, #1
   44268:	f800 3c04 	strb.w	r3, [r0, #-4]
}
   4426c:	bd10      	pop	{r4, pc}
		dev_data->configured = false;
   4426e:	2300      	movs	r3, #0
   44270:	f800 3c04 	strb.w	r3, [r0, #-4]
			dev_data->suspended = false;
   44274:	f800 3c03 	strb.w	r3, [r0, #-3]
   44278:	e7f8      	b.n	4426c <hid_status_cb+0x24>
		dev_data->suspended = true;
   4427a:	2301      	movs	r3, #1
   4427c:	e7fa      	b.n	44274 <hid_status_cb+0x2c>
		if (dev_data->suspended) {
   4427e:	f810 3c03 	ldrb.w	r3, [r0, #-3]
   44282:	2b00      	cmp	r3, #0
   44284:	d0f2      	beq.n	4426c <hid_status_cb+0x24>
			dev_data->suspended = false;
   44286:	2300      	movs	r3, #0
   44288:	e7f4      	b.n	44274 <hid_status_cb+0x2c>
   4428a:	bf00      	nop
   4428c:	20005e94 	.word	0x20005e94

00044290 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
   44290:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
   44292:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;

	dev_data->ops = ops;
   44294:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   44296:	2300      	movs	r3, #0
   44298:	6163      	str	r3, [r4, #20]
Z_GENLIST_APPEND(slist, snode)
   4429a:	4b07      	ldr	r3, [pc, #28]	; (442b8 <usb_hid_register_device+0x28>)
	dev_data->common.dev = dev;
   4429c:	6120      	str	r0, [r4, #16]
	dev_data->report_size = size;
   4429e:	e9c4 1200 	strd	r1, r2, [r4]
   442a2:	6859      	ldr	r1, [r3, #4]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
   442a4:	f104 0214 	add.w	r2, r4, #20
   442a8:	b911      	cbnz	r1, 442b0 <usb_hid_register_device+0x20>
	list->head = node;
   442aa:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
   442ae:	bd10      	pop	{r4, pc}
	parent->next = child;
   442b0:	600a      	str	r2, [r1, #0]
	list->tail = node;
   442b2:	605a      	str	r2, [r3, #4]
   442b4:	e7fb      	b.n	442ae <usb_hid_register_device+0x1e>
   442b6:	bf00      	nop
   442b8:	20005e94 	.word	0x20005e94

000442bc <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   442bc:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   442c0:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
   442c2:	b241      	sxtb	r1, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   442c4:	d004      	beq.n	442d0 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
   442c6:	f010 0f78 	tst.w	r0, #120	; 0x78
   442ca:	d001      	beq.n	442d0 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
   442cc:	2000      	movs	r0, #0
   442ce:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
   442d0:	2900      	cmp	r1, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
   442d2:	f000 020f 	and.w	r2, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
   442d6:	f000 0008 	and.w	r0, r0, #8
   442da:	da05      	bge.n	442e8 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   442dc:	b958      	cbnz	r0, 442f6 <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
   442de:	4808      	ldr	r0, [pc, #32]	; (44300 <endpoint_ctx+0x44>)
   442e0:	eb00 1042 	add.w	r0, r0, r2, lsl #5
   442e4:	304c      	adds	r0, #76	; 0x4c
   442e6:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   442e8:	b938      	cbnz	r0, 442fa <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   442ea:	4805      	ldr	r0, [pc, #20]	; (44300 <endpoint_ctx+0x44>)
   442ec:	eb00 1042 	add.w	r0, r0, r2, lsl #5
   442f0:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
   442f4:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   442f6:	4803      	ldr	r0, [pc, #12]	; (44304 <endpoint_ctx+0x48>)
   442f8:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   442fa:	4803      	ldr	r0, [pc, #12]	; (44308 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
   442fc:	4770      	bx	lr
   442fe:	bf00      	nop
   44300:	2000649c 	.word	0x2000649c
   44304:	200065e8 	.word	0x200065e8
   44308:	20006708 	.word	0x20006708

0004430c <usbd_evt_put>:
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
	k_fifo_put(&usbd_evt_fifo, ev);
   4430c:	4601      	mov	r1, r0
   4430e:	4801      	ldr	r0, [pc, #4]	; (44314 <usbd_evt_put+0x8>)
   44310:	f00c be5c 	b.w	50fcc <k_queue_append>
   44314:	2000108c 	.word	0x2000108c

00044318 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   44318:	4901      	ldr	r1, [pc, #4]	; (44320 <usbd_work_schedule+0x8>)
   4431a:	4802      	ldr	r0, [pc, #8]	; (44324 <usbd_work_schedule+0xc>)
   4431c:	f00c bf30 	b.w	51180 <k_work_submit_to_queue>
   44320:	200064c4 	.word	0x200064c4
   44324:	20003948 	.word	0x20003948

00044328 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   44328:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   4432a:	480b      	ldr	r0, [pc, #44]	; (44358 <usb_init+0x30>)
   4432c:	f002 fdb8 	bl	46ea0 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
   44330:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
   44332:	480a      	ldr	r0, [pc, #40]	; (4435c <usb_init+0x34>)
   44334:	f002 fdf6 	bl	46f24 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
   44338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4433c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   44340:	9400      	str	r4, [sp, #0]
   44342:	4907      	ldr	r1, [pc, #28]	; (44360 <usb_init+0x38>)
   44344:	4807      	ldr	r0, [pc, #28]	; (44364 <usb_init+0x3c>)
   44346:	f004 fc29 	bl	48b9c <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   4434a:	4907      	ldr	r1, [pc, #28]	; (44368 <usb_init+0x40>)
   4434c:	4807      	ldr	r0, [pc, #28]	; (4436c <usb_init+0x44>)
   4434e:	f00c ff0f 	bl	51170 <k_work_init>

	return 0;
}
   44352:	4620      	mov	r0, r4
   44354:	b002      	add	sp, #8
   44356:	bd10      	pop	{r4, pc}
   44358:	0005452a 	.word	0x0005452a
   4435c:	00053c08 	.word	0x00053c08
   44360:	20008c30 	.word	0x20008c30
   44364:	20003948 	.word	0x20003948
   44368:	00044681 	.word	0x00044681
   4436c:	200064c4 	.word	0x200064c4

00044370 <hfxo_stop.constprop.12>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
   44370:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   44372:	4911      	ldr	r1, [pc, #68]	; (443b8 <hfxo_stop.constprop.12+0x48>)
   44374:	f3bf 8f5b 	dmb	ish
   44378:	f101 0320 	add.w	r3, r1, #32
   4437c:	2200      	movs	r2, #0
   4437e:	e853 0f00 	ldrex	r0, [r3]
   44382:	2801      	cmp	r0, #1
   44384:	d103      	bne.n	4438e <hfxo_stop.constprop.12+0x1e>
   44386:	e843 2400 	strex	r4, r2, [r3]
   4438a:	2c00      	cmp	r4, #0
   4438c:	d1f7      	bne.n	4437e <hfxo_stop.constprop.12+0xe>
   4438e:	f3bf 8f5b 	dmb	ish
   44392:	bf0c      	ite	eq
   44394:	2001      	moveq	r0, #1
   44396:	4610      	movne	r0, r2
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   44398:	b160      	cbz	r0, 443b4 <hfxo_stop.constprop.12+0x44>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   4439a:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   4439c:	310c      	adds	r1, #12
   4439e:	4620      	mov	r0, r4
   443a0:	f005 ff86 	bl	4a2b0 <onoff_cancel>

	if (rv == -EALREADY) {
   443a4:	f110 0f78 	cmn.w	r0, #120	; 0x78
   443a8:	d104      	bne.n	443b4 <hfxo_stop.constprop.12+0x44>
		rv = onoff_release(mgr);
   443aa:	4620      	mov	r0, r4
}
   443ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   443b0:	f005 bf59 	b.w	4a266 <onoff_release>
   443b4:	bd10      	pop	{r4, pc}
   443b6:	bf00      	nop
   443b8:	2000649c 	.word	0x2000649c

000443bc <usbd_evt_flush>:
{
   443bc:	b538      	push	{r3, r4, r5, lr}
   443be:	4d07      	ldr	r5, [pc, #28]	; (443dc <usbd_evt_flush+0x20>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   443c0:	4c07      	ldr	r4, [pc, #28]	; (443e0 <usbd_evt_flush+0x24>)
   443c2:	2200      	movs	r2, #0
   443c4:	2300      	movs	r3, #0
   443c6:	4628      	mov	r0, r5
   443c8:	f004 fa44 	bl	48854 <z_impl_k_queue_get>
		if (ev) {
   443cc:	b120      	cbz	r0, 443d8 <usbd_evt_flush+0x1c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   443ce:	1d01      	adds	r1, r0, #4
   443d0:	4620      	mov	r0, r4
   443d2:	f00c fd3d 	bl	50e50 <k_mem_slab_free>
   443d6:	e7f4      	b.n	443c2 <usbd_evt_flush+0x6>
}
   443d8:	bd38      	pop	{r3, r4, r5, pc}
   443da:	bf00      	nop
   443dc:	2000108c 	.word	0x2000108c
   443e0:	20000e98 	.word	0x20000e98

000443e4 <usbd_evt_alloc>:
{
   443e4:	b513      	push	{r0, r1, r4, lr}
	if (k_mem_slab_alloc(&fifo_elem_slab,
   443e6:	2200      	movs	r2, #0
   443e8:	2300      	movs	r3, #0
   443ea:	a901      	add	r1, sp, #4
   443ec:	480d      	ldr	r0, [pc, #52]	; (44424 <usbd_evt_alloc+0x40>)
   443ee:	f003 ffb9 	bl	48364 <k_mem_slab_alloc>
   443f2:	b190      	cbz	r0, 4441a <usbd_evt_alloc+0x36>
		usbd_evt_flush();
   443f4:	f7ff ffe2 	bl	443bc <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   443f8:	2200      	movs	r2, #0
   443fa:	2300      	movs	r3, #0
   443fc:	a901      	add	r1, sp, #4
   443fe:	4809      	ldr	r0, [pc, #36]	; (44424 <usbd_evt_alloc+0x40>)
   44400:	f003 ffb0 	bl	48364 <k_mem_slab_alloc>
   44404:	b938      	cbnz	r0, 44416 <usbd_evt_alloc+0x32>
		ev = (struct usbd_event *)block.data;
   44406:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
   44408:	2304      	movs	r3, #4
		ev->block = block;
   4440a:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
   4440c:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
   4440e:	f7ff ff7d 	bl	4430c <usbd_evt_put>
		usbd_work_schedule();
   44412:	f7ff ff81 	bl	44318 <usbd_work_schedule>
			return NULL;
   44416:	2000      	movs	r0, #0
   44418:	e001      	b.n	4441e <usbd_evt_alloc+0x3a>
	ev = (struct usbd_event *)block.data;
   4441a:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
   4441c:	6040      	str	r0, [r0, #4]
}
   4441e:	b002      	add	sp, #8
   44420:	bd10      	pop	{r4, pc}
   44422:	bf00      	nop
   44424:	20000e98 	.word	0x20000e98

00044428 <usbd_event_transfer_data>:
{
   44428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		endpoint_ctx(p_event->data.eptransfer.ep);
   4442a:	7887      	ldrb	r7, [r0, #2]
{
   4442c:	4606      	mov	r6, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   4442e:	4638      	mov	r0, r7
   44430:	f7ff ff44 	bl	442bc <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   44434:	063b      	lsls	r3, r7, #24
		endpoint_ctx(p_event->data.eptransfer.ep);
   44436:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   44438:	78f4      	ldrb	r4, [r6, #3]
   4443a:	d512      	bpl.n	44462 <usbd_event_transfer_data+0x3a>
		switch (p_event->data.eptransfer.status) {
   4443c:	2c00      	cmp	r4, #0
   4443e:	d143      	bne.n	444c8 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   44440:	f7ff ffd0 	bl	443e4 <usbd_evt_alloc>
			if (!ev) {
   44444:	4603      	mov	r3, r0
   44446:	2800      	cmp	r0, #0
   44448:	d03e      	beq.n	444c8 <usbd_event_transfer_data+0xa0>
			ev->evt_type = USBD_EVT_EP;
   4444a:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   4444c:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   4444e:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   44450:	2203      	movs	r2, #3
   44452:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   44454:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
   44456:	f7ff ff59 	bl	4430c <usbd_evt_put>
}
   4445a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			usbd_work_schedule();
   4445e:	f7ff bf5b 	b.w	44318 <usbd_work_schedule>
		switch (p_event->data.eptransfer.status) {
   44462:	b14c      	cbz	r4, 44478 <usbd_event_transfer_data+0x50>
   44464:	2c01      	cmp	r4, #1
   44466:	d12f      	bne.n	444c8 <usbd_event_transfer_data+0xa0>
			struct usbd_event *ev = usbd_evt_alloc();
   44468:	f7ff ffbc 	bl	443e4 <usbd_evt_alloc>
			if (!ev) {
   4446c:	4603      	mov	r3, r0
   4446e:	b358      	cbz	r0, 444c8 <usbd_event_transfer_data+0xa0>
			ep_ctx->read_pending = true;
   44470:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   44472:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   44474:	7304      	strb	r4, [r0, #12]
   44476:	e7ed      	b.n	44454 <usbd_event_transfer_data+0x2c>
			struct usbd_event *ev = usbd_evt_alloc();
   44478:	f7ff ffb4 	bl	443e4 <usbd_evt_alloc>
			if (!ev) {
   4447c:	b320      	cbz	r0, 444c8 <usbd_event_transfer_data+0xa0>
				p_event->data.eptransfer.ep);
   4447e:	78b3      	ldrb	r3, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   44480:	4a12      	ldr	r2, [pc, #72]	; (444cc <usbd_event_transfer_data+0xa4>)
   44482:	f013 0f80 	tst.w	r3, #128	; 0x80
   44486:	f003 0108 	and.w	r1, r3, #8
   4448a:	d011      	beq.n	444b0 <usbd_event_transfer_data+0x88>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   4448c:	b141      	cbz	r1, 444a0 <usbd_event_transfer_data+0x78>
        {
            ret = p_reg->ISOIN.AMOUNT;
   4448e:	f8d2 36a8 	ldr.w	r3, [r2, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   44492:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
   44494:	2301      	movs	r3, #1
   44496:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   44498:	2302      	movs	r3, #2
   4449a:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   4449c:	6085      	str	r5, [r0, #8]
   4449e:	e7da      	b.n	44456 <usbd_event_transfer_data+0x2e>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
   444a0:	f003 030f 	and.w	r3, r3, #15
   444a4:	2114      	movs	r1, #20
   444a6:	fb01 2303 	mla	r3, r1, r3, r2
   444aa:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   444ae:	e7f0      	b.n	44492 <usbd_event_transfer_data+0x6a>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   444b0:	b111      	cbz	r1, 444b8 <usbd_event_transfer_data+0x90>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   444b2:	f8d2 37a8 	ldr.w	r3, [r2, #1960]	; 0x7a8
   444b6:	e7ec      	b.n	44492 <usbd_event_transfer_data+0x6a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
   444b8:	f003 030f 	and.w	r3, r3, #15
   444bc:	2114      	movs	r1, #20
   444be:	fb01 2303 	mla	r3, r1, r3, r2
   444c2:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   444c6:	e7e4      	b.n	44492 <usbd_event_transfer_data+0x6a>
}
   444c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   444ca:	bf00      	nop
   444cc:	40027000 	.word	0x40027000

000444d0 <usbd_event_handler>:
{
   444d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   444d2:	4606      	mov	r6, r0
   444d4:	b089      	sub	sp, #36	; 0x24
	struct usbd_event evt = {0};
   444d6:	2214      	movs	r2, #20
   444d8:	2100      	movs	r1, #0
   444da:	a803      	add	r0, sp, #12
   444dc:	f007 ff11 	bl	4c302 <memset>
	switch (p_event->type) {
   444e0:	7833      	ldrb	r3, [r6, #0]
   444e2:	3b01      	subs	r3, #1
   444e4:	2b05      	cmp	r3, #5
   444e6:	d820      	bhi.n	4452a <usbd_event_handler+0x5a>
   444e8:	e8df f003 	tbb	[pc, r3]
   444ec:	14140375 	.word	0x14140375
   444f0:	1665      	.short	0x1665
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   444f2:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
   444f4:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.evt_type = USBD_EVT_POWER;
   444f8:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
   444fa:	f7ff ff73 	bl	443e4 <usbd_evt_alloc>
		if (!ev) {
   444fe:	4603      	mov	r3, r0
   44500:	b198      	cbz	r0, 4452a <usbd_event_handler+0x5a>
		ev->evt = evt.evt;
   44502:	a905      	add	r1, sp, #20
		ev->evt_type = evt.evt_type;
   44504:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
   44506:	f100 0208 	add.w	r2, r0, #8
   4450a:	c903      	ldmia	r1, {r0, r1}
   4450c:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
   44510:	4618      	mov	r0, r3
   44512:	e01c      	b.n	4454e <usbd_event_handler+0x7e>
		evt.evt.pwr_evt.state = USBD_RESUMED;
   44514:	2304      	movs	r3, #4
   44516:	e7ed      	b.n	444f4 <usbd_event_handler+0x24>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   44518:	78b7      	ldrb	r7, [r6, #2]
   4451a:	4638      	mov	r0, r7
   4451c:	f7ff fece 	bl	442bc <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   44520:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   44522:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
   44524:	b11b      	cbz	r3, 4452e <usbd_event_handler+0x5e>
   44526:	2b03      	cmp	r3, #3
   44528:	d941      	bls.n	445ae <usbd_event_handler+0xde>
}
   4452a:	b009      	add	sp, #36	; 0x24
   4452c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   4452e:	063b      	lsls	r3, r7, #24
   44530:	78f4      	ldrb	r4, [r6, #3]
   44532:	d511      	bpl.n	44558 <usbd_event_handler+0x88>
		switch (p_event->data.eptransfer.status) {
   44534:	2c00      	cmp	r4, #0
   44536:	d1f8      	bne.n	4452a <usbd_event_handler+0x5a>
			struct usbd_event *ev = usbd_evt_alloc();
   44538:	f7ff ff54 	bl	443e4 <usbd_evt_alloc>
			if (!ev) {
   4453c:	4603      	mov	r3, r0
   4453e:	2800      	cmp	r0, #0
   44540:	d0f3      	beq.n	4452a <usbd_event_handler+0x5a>
			ev->evt_type = USBD_EVT_EP;
   44542:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
   44544:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   44546:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   44548:	2203      	movs	r2, #3
   4454a:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   4454c:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
   4454e:	f7ff fedd 	bl	4430c <usbd_evt_put>
		usbd_work_schedule();
   44552:	f7ff fee1 	bl	44318 <usbd_work_schedule>
   44556:	e7e8      	b.n	4452a <usbd_event_handler+0x5a>
		switch (p_event->data.eptransfer.status) {
   44558:	b154      	cbz	r4, 44570 <usbd_event_handler+0xa0>
   4455a:	2c01      	cmp	r4, #1
   4455c:	d1e5      	bne.n	4452a <usbd_event_handler+0x5a>
			struct usbd_event *ev = usbd_evt_alloc();
   4455e:	f7ff ff41 	bl	443e4 <usbd_evt_alloc>
			if (!ev) {
   44562:	4603      	mov	r3, r0
   44564:	2800      	cmp	r0, #0
   44566:	d0e0      	beq.n	4452a <usbd_event_handler+0x5a>
			ep_ctx->read_pending = true;
   44568:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   4456a:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   4456c:	7304      	strb	r4, [r0, #12]
   4456e:	e7ed      	b.n	4454c <usbd_event_handler+0x7c>
			struct usbd_event *ev = usbd_evt_alloc();
   44570:	f7ff ff38 	bl	443e4 <usbd_evt_alloc>
			if (!ev) {
   44574:	4607      	mov	r7, r0
   44576:	2800      	cmp	r0, #0
   44578:	d0d7      	beq.n	4452a <usbd_event_handler+0x5a>
			ev->evt_type = USBD_EVT_EP;
   4457a:	2301      	movs	r3, #1
   4457c:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   4457e:	2302      	movs	r3, #2
   44580:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   44582:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
   44584:	f105 010c 	add.w	r1, r5, #12
   44588:	78b0      	ldrb	r0, [r6, #2]
   4458a:	f00c f981 	bl	50890 <nrfx_usbd_ep_status_get>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   4458e:	4a13      	ldr	r2, [pc, #76]	; (445dc <usbd_event_handler+0x10c>)
   44590:	68e9      	ldr	r1, [r5, #12]
   44592:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
   44596:	428b      	cmp	r3, r1
   44598:	d906      	bls.n	445a8 <usbd_event_handler+0xd8>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   4459a:	1a5b      	subs	r3, r3, r1
   4459c:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   445a0:	f003 fa4a 	bl	47a38 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
   445a4:	4638      	mov	r0, r7
   445a6:	e7d2      	b.n	4454e <usbd_event_handler+0x7e>
				ctx->ctrl_read_len = 0U;
   445a8:	f8a2 428c 	strh.w	r4, [r2, #652]	; 0x28c
   445ac:	e7fa      	b.n	445a4 <usbd_event_handler+0xd4>
			usbd_event_transfer_data(p_event);
   445ae:	4630      	mov	r0, r6
   445b0:	f7ff ff3a 	bl	44428 <usbd_event_transfer_data>
	if (put_evt) {
   445b4:	e7b9      	b.n	4452a <usbd_event_handler+0x5a>
		nrfx_usbd_setup_get(&drv_setup);
   445b6:	a801      	add	r0, sp, #4
   445b8:	f003 fa18 	bl	479ec <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   445bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
   445c0:	2b05      	cmp	r3, #5
   445c2:	d104      	bne.n	445ce <usbd_event_handler+0xfe>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   445c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   445c8:	f013 0f60 	tst.w	r3, #96	; 0x60
   445cc:	d0ad      	beq.n	4452a <usbd_event_handler+0x5a>
			evt.evt.ep_evt.ep = ep_ctx;
   445ce:	4b04      	ldr	r3, [pc, #16]	; (445e0 <usbd_event_handler+0x110>)
   445d0:	9305      	str	r3, [sp, #20]
			evt.evt_type = USBD_EVT_EP;
   445d2:	2401      	movs	r4, #1
   445d4:	e791      	b.n	444fa <usbd_event_handler+0x2a>
		evt.evt_type = USBD_EVT_RESET;
   445d6:	2402      	movs	r4, #2
   445d8:	e78f      	b.n	444fa <usbd_event_handler+0x2a>
   445da:	bf00      	nop
   445dc:	2000649c 	.word	0x2000649c
   445e0:	20006608 	.word	0x20006608

000445e4 <usb_dc_power_event_handler>:
	switch (event) {
   445e4:	2802      	cmp	r0, #2
{
   445e6:	b510      	push	{r4, lr}
   445e8:	d811      	bhi.n	4460e <usb_dc_power_event_handler+0x2a>
   445ea:	4b09      	ldr	r3, [pc, #36]	; (44610 <usb_dc_power_event_handler+0x2c>)
   445ec:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
   445ee:	f7ff fef9 	bl	443e4 <usbd_evt_alloc>
	if (!ev) {
   445f2:	b160      	cbz	r0, 4460e <usb_dc_power_event_handler+0x2a>
	ev->evt_type = USBD_EVT_POWER;
   445f4:	2200      	movs	r2, #0
   445f6:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
   445f8:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
   445fa:	f7ff fe87 	bl	4430c <usbd_evt_put>
	if (usbd_ctx.attached) {
   445fe:	4b05      	ldr	r3, [pc, #20]	; (44614 <usb_dc_power_event_handler+0x30>)
   44600:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   44604:	b11b      	cbz	r3, 4460e <usb_dc_power_event_handler+0x2a>
}
   44606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usbd_work_schedule();
   4460a:	f7ff be85 	b.w	44318 <usbd_work_schedule>
}
   4460e:	bd10      	pop	{r4, pc}
   44610:	00054527 	.word	0x00054527
   44614:	2000649c 	.word	0x2000649c

00044618 <eps_ctx_init>:
{
   44618:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   4461a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   4461c:	f064 007f 	orn	r0, r4, #127	; 0x7f
   44620:	b2c0      	uxtb	r0, r0
   44622:	f7ff fe4b 	bl	442bc <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   44626:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   44628:	f00b fe28 	bl	5027c <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   4462c:	2c08      	cmp	r4, #8
   4462e:	d1f5      	bne.n	4461c <eps_ctx_init+0x4>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   44630:	4d0f      	ldr	r5, [pc, #60]	; (44670 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   44632:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   44634:	b2e0      	uxtb	r0, r4
   44636:	f7ff fe41 	bl	442bc <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   4463a:	6903      	ldr	r3, [r0, #16]
   4463c:	b913      	cbnz	r3, 44644 <eps_ctx_init+0x2c>
			ep_ctx->buf.block.data = ep_out_bufs[i];
   4463e:	eb05 1384 	add.w	r3, r5, r4, lsl #6
   44642:	6103      	str	r3, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   44644:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
   44646:	f00b fe19 	bl	5027c <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   4464a:	2c08      	cmp	r4, #8
   4464c:	d1f2      	bne.n	44634 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
   4464e:	4c09      	ldr	r4, [pc, #36]	; (44674 <eps_ctx_init+0x5c>)
   44650:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   44654:	f00b fe12 	bl	5027c <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
   44658:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
   4465c:	b913      	cbnz	r3, 44664 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   4465e:	4b06      	ldr	r3, [pc, #24]	; (44678 <eps_ctx_init+0x60>)
   44660:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
   44664:	4805      	ldr	r0, [pc, #20]	; (4467c <eps_ctx_init+0x64>)
   44666:	f00b fe09 	bl	5027c <ep_ctx_reset>
}
   4466a:	2000      	movs	r0, #0
   4466c:	bd38      	pop	{r3, r4, r5, pc}
   4466e:	bf00      	nop
   44670:	2000629c 	.word	0x2000629c
   44674:	2000649c 	.word	0x2000649c
   44678:	20005e9c 	.word	0x20005e9c
   4467c:	20006708 	.word	0x20006708

00044680 <usbd_work_handler>:
{
   44680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   44684:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 4496c <usbd_work_handler+0x2ec>
	return get_usbd_ctx()->ready;
   44688:	4cb0      	ldr	r4, [pc, #704]	; (4494c <usbd_work_handler+0x2cc>)
{
   4468a:	b085      	sub	sp, #20
   4468c:	4607      	mov	r7, r0
   4468e:	2200      	movs	r2, #0
   44690:	2300      	movs	r3, #0
   44692:	4648      	mov	r0, r9
   44694:	f004 f8de 	bl	48854 <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
   44698:	b910      	cbnz	r0, 446a0 <usbd_work_handler+0x20>
}
   4469a:	b005      	add	sp, #20
   4469c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return get_usbd_ctx()->ready;
   446a0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   446a4:	7c02      	ldrb	r2, [r0, #16]
   446a6:	f100 0804 	add.w	r8, r0, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   446aa:	b93b      	cbnz	r3, 446bc <usbd_work_handler+0x3c>
   446ac:	2a00      	cmp	r2, #0
   446ae:	f000 8086 	beq.w	447be <usbd_work_handler+0x13e>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   446b2:	4641      	mov	r1, r8
   446b4:	48a6      	ldr	r0, [pc, #664]	; (44950 <usbd_work_handler+0x2d0>)
   446b6:	f00c fbcb 	bl	50e50 <k_mem_slab_free>
   446ba:	e7e8      	b.n	4468e <usbd_work_handler+0xe>
		switch (ev->evt_type) {
   446bc:	2a04      	cmp	r2, #4
   446be:	d8f8      	bhi.n	446b2 <usbd_work_handler+0x32>
   446c0:	e8df f012 	tbh	[pc, r2, lsl #1]
   446c4:	0005007d 	.word	0x0005007d
   446c8:	01190103 	.word	0x01190103
   446cc:	0134      	.short	0x0134
	switch (ep_evt->evt_type) {
   446ce:	7b03      	ldrb	r3, [r0, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   446d0:	6885      	ldr	r5, [r0, #8]
	switch (ep_evt->evt_type) {
   446d2:	2b03      	cmp	r3, #3
   446d4:	d8ed      	bhi.n	446b2 <usbd_work_handler+0x32>
   446d6:	e8df f003 	tbb	[pc, r3]
   446da:	3d02      	.short	0x3d02
   446dc:	5f5a      	.short	0x5f5a
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   446de:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   446e0:	2208      	movs	r2, #8
   446e2:	2100      	movs	r1, #0
   446e4:	4630      	mov	r0, r6
   446e6:	f007 fe0c 	bl	4c302 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   446ea:	4b9a      	ldr	r3, [pc, #616]	; (44954 <usbd_work_handler+0x2d4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   446ec:	489a      	ldr	r0, [pc, #616]	; (44958 <usbd_work_handler+0x2d8>)
   446ee:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   446f2:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
   446f4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   446f8:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
   446fa:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   446fe:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   44702:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   44706:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
   44708:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   4470c:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   44710:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   44714:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
   44716:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   4471a:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   4471e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   44722:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   44724:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   44726:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   44728:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   4472a:	f007 fddf 	bl	4c2ec <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   4472e:	682b      	ldr	r3, [r5, #0]
   44730:	7a68      	ldrb	r0, [r5, #9]
   44732:	2100      	movs	r1, #0
   44734:	4798      	blx	r3
 * @param setup Pointer to USB Setup packet
 * @return true If transfer direction is to device
 */
static inline bool usb_reqtype_is_to_device(struct usb_setup_packet *setup)
{
	return setup->RequestType.direction == USB_REQTYPE_DIR_TO_DEVICE;
   44736:	f996 3000 	ldrsb.w	r3, [r6]
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   4473a:	2b00      	cmp	r3, #0
   4473c:	db06      	blt.n	4474c <usbd_work_handler+0xcc>
   4473e:	88f3      	ldrh	r3, [r6, #6]
   44740:	b123      	cbz	r3, 4474c <usbd_work_handler+0xcc>
		ctx->ctrl_read_len = usbd_setup->wLength;
   44742:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   44746:	f003 f977 	bl	47a38 <nrfx_usbd_setup_data_clear>
   4474a:	e7b2      	b.n	446b2 <usbd_work_handler+0x32>
		ctx->ctrl_read_len = 0U;
   4474c:	2300      	movs	r3, #0
   4474e:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
   44752:	e7ae      	b.n	446b2 <usbd_work_handler+0x32>
	if (!ep_ctx->read_pending) {
   44754:	7f6b      	ldrb	r3, [r5, #29]
   44756:	2b00      	cmp	r3, #0
   44758:	d0ab      	beq.n	446b2 <usbd_work_handler+0x32>
	if (!ep_ctx->read_complete) {
   4475a:	7f2b      	ldrb	r3, [r5, #28]
   4475c:	2b00      	cmp	r3, #0
   4475e:	d0a8      	beq.n	446b2 <usbd_work_handler+0x32>
	ep_ctx->read_pending = false;
   44760:	2600      	movs	r6, #0
   44762:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	ep_ctx->read_complete = false;
   44768:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   4476a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4476e:	487b      	ldr	r0, [pc, #492]	; (4495c <usbd_work_handler+0x2dc>)
   44770:	f00b fd99 	bl	502a6 <k_mutex_lock.constprop.7>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   44774:	696b      	ldr	r3, [r5, #20]
   44776:	9301      	str	r3, [sp, #4]
   44778:	686b      	ldr	r3, [r5, #4]
   4477a:	e9cd 3602 	strd	r3, r6, [sp, #8]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   4477e:	a901      	add	r1, sp, #4
   44780:	7a68      	ldrb	r0, [r5, #9]
   44782:	f002 ff5b 	bl	4763c <nrfx_usbd_ep_transfer>
	k_mutex_unlock(&ctx->drv_lock);
   44786:	4875      	ldr	r0, [pc, #468]	; (4495c <usbd_work_handler+0x2dc>)
   44788:	f00b fd8b 	bl	502a2 <k_mutex_unlock>
   4478c:	e791      	b.n	446b2 <usbd_work_handler+0x32>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   4478e:	682b      	ldr	r3, [r5, #0]
   44790:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   44792:	7a68      	ldrb	r0, [r5, #9]
   44794:	4798      	blx	r3
		break;
   44796:	e78c      	b.n	446b2 <usbd_work_handler+0x32>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   44798:	7aab      	ldrb	r3, [r5, #10]
   4479a:	b96b      	cbnz	r3, 447b8 <usbd_work_handler+0x138>
   4479c:	7feb      	ldrb	r3, [r5, #31]
   4479e:	b95b      	cbnz	r3, 447b8 <usbd_work_handler+0x138>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   447a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   447a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   447a8:	486c      	ldr	r0, [pc, #432]	; (4495c <usbd_work_handler+0x2dc>)
   447aa:	f00b fd7c 	bl	502a6 <k_mutex_lock.constprop.7>
			nrfx_usbd_setup_clear();
   447ae:	f003 f96f 	bl	47a90 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
   447b2:	486a      	ldr	r0, [pc, #424]	; (4495c <usbd_work_handler+0x2dc>)
   447b4:	f00b fd75 	bl	502a2 <k_mutex_unlock>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   447b8:	682b      	ldr	r3, [r5, #0]
   447ba:	2102      	movs	r1, #2
   447bc:	e7e9      	b.n	44792 <usbd_work_handler+0x112>
	switch (pwr_evt->state) {
   447be:	7a02      	ldrb	r2, [r0, #8]
   447c0:	2a04      	cmp	r2, #4
   447c2:	f63f af76 	bhi.w	446b2 <usbd_work_handler+0x32>
   447c6:	e8df f002 	tbb	[pc, r2]
   447ca:	035b      	.short	0x035b
   447cc:	6925      	.short	0x6925
   447ce:	75          	.byte	0x75
   447cf:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   447d0:	f002 feac 	bl	4752c <nrfx_usbd_is_enabled>
   447d4:	4605      	mov	r5, r0
   447d6:	2800      	cmp	r0, #0
   447d8:	f47f af6b 	bne.w	446b2 <usbd_work_handler+0x32>
			nrfx_usbd_enable();
   447dc:	f002 fdf0 	bl	473c0 <nrfx_usbd_enable>
   447e0:	f3bf 8f5b 	dmb	ish
   447e4:	495e      	ldr	r1, [pc, #376]	; (44960 <usbd_work_handler+0x2e0>)
   447e6:	2301      	movs	r3, #1
   447e8:	e851 2f00 	ldrex	r2, [r1]
   447ec:	2a00      	cmp	r2, #0
   447ee:	d103      	bne.n	447f8 <usbd_work_handler+0x178>
   447f0:	e841 3000 	strex	r0, r3, [r1]
   447f4:	2800      	cmp	r0, #0
   447f6:	d1f7      	bne.n	447e8 <usbd_work_handler+0x168>
   447f8:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   447fc:	f47f af59 	bne.w	446b2 <usbd_work_handler+0x32>
   44800:	f841 5c10 	str.w	r5, [r1, #-16]
   44804:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   44808:	69e0      	ldr	r0, [r4, #28]
   4480a:	6163      	str	r3, [r4, #20]
   4480c:	3914      	subs	r1, #20
   4480e:	f005 fce1 	bl	4a1d4 <onoff_request>
   44812:	e74e      	b.n	446b2 <usbd_work_handler+0x32>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   44814:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   44816:	f065 007f 	orn	r0, r5, #127	; 0x7f
   4481a:	b2c0      	uxtb	r0, r0
   4481c:	f7ff fd4e 	bl	442bc <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   44820:	7a03      	ldrb	r3, [r0, #8]
   44822:	b113      	cbz	r3, 4482a <usbd_work_handler+0x1aa>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   44824:	7a40      	ldrb	r0, [r0, #9]
   44826:	f003 fb15 	bl	47e54 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   4482a:	3501      	adds	r5, #1
   4482c:	2d08      	cmp	r5, #8
   4482e:	d1f2      	bne.n	44816 <usbd_work_handler+0x196>
		if (ep_ctx->cfg.en) {
   44830:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   44834:	b11b      	cbz	r3, 4483e <usbd_work_handler+0x1be>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   44836:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
   4483a:	f003 fb0b 	bl	47e54 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   4483e:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   44840:	b2e8      	uxtb	r0, r5
   44842:	f7ff fd3b 	bl	442bc <endpoint_ctx>
		if (ep_ctx->cfg.en) {
   44846:	7a03      	ldrb	r3, [r0, #8]
   44848:	b113      	cbz	r3, 44850 <usbd_work_handler+0x1d0>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   4484a:	7a40      	ldrb	r0, [r0, #9]
   4484c:	f003 fb02 	bl	47e54 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   44850:	3501      	adds	r5, #1
   44852:	2d08      	cmp	r5, #8
   44854:	d1f4      	bne.n	44840 <usbd_work_handler+0x1c0>
		if (ep_ctx->cfg.en) {
   44856:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   4485a:	b11b      	cbz	r3, 44864 <usbd_work_handler+0x1e4>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   4485c:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
   44860:	f003 faf8 	bl	47e54 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
   44864:	2001      	movs	r0, #1
   44866:	f002 fe43 	bl	474f0 <nrfx_usbd_start>
		ctx->ready = true;
   4486a:	2301      	movs	r3, #1
   4486c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
   44870:	6823      	ldr	r3, [r4, #0]
   44872:	2b00      	cmp	r3, #0
   44874:	f43f af1d 	beq.w	446b2 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   44878:	2100      	movs	r1, #0
   4487a:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_SOF, NULL);
   4487c:	4798      	blx	r3
   4487e:	e718      	b.n	446b2 <usbd_work_handler+0x32>
		ctx->ready = false;
   44880:	2500      	movs	r5, #0
   44882:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
   44886:	f003 fa71 	bl	47d6c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   4488a:	f7ff fd71 	bl	44370 <hfxo_stop.constprop.12>
		if (ctx->status_cb) {
   4488e:	6823      	ldr	r3, [r4, #0]
   44890:	2b00      	cmp	r3, #0
   44892:	f43f af0e 	beq.w	446b2 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   44896:	4629      	mov	r1, r5
   44898:	2004      	movs	r0, #4
   4489a:	e7ef      	b.n	4487c <usbd_work_handler+0x1fc>
		if (dev_ready()) {
   4489c:	2b00      	cmp	r3, #0
   4489e:	f43f af08 	beq.w	446b2 <usbd_work_handler+0x32>
			nrfx_usbd_suspend();
   448a2:	f003 fa7b 	bl	47d9c <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   448a6:	6823      	ldr	r3, [r4, #0]
   448a8:	2b00      	cmp	r3, #0
   448aa:	f43f af02 	beq.w	446b2 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   448ae:	2100      	movs	r1, #0
   448b0:	2005      	movs	r0, #5
   448b2:	e7e3      	b.n	4487c <usbd_work_handler+0x1fc>
		if (ctx->status_cb && dev_ready()) {
   448b4:	6822      	ldr	r2, [r4, #0]
   448b6:	2a00      	cmp	r2, #0
   448b8:	f43f aefb 	beq.w	446b2 <usbd_work_handler+0x32>
   448bc:	2b00      	cmp	r3, #0
   448be:	f43f aef8 	beq.w	446b2 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_RESUME, NULL);
   448c2:	2100      	movs	r1, #0
   448c4:	2006      	movs	r0, #6
   448c6:	4790      	blx	r2
   448c8:	e6f3      	b.n	446b2 <usbd_work_handler+0x32>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   448ca:	f107 0510 	add.w	r5, r7, #16
   448ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   448d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   448d6:	4628      	mov	r0, r5
   448d8:	f00b fce5 	bl	502a6 <k_mutex_lock.constprop.7>
			eps_ctx_init();
   448dc:	f7ff fe9c 	bl	44618 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
   448e0:	4628      	mov	r0, r5
   448e2:	f00b fcde 	bl	502a2 <k_mutex_unlock>
			if (ctx->status_cb) {
   448e6:	f857 3c28 	ldr.w	r3, [r7, #-40]
   448ea:	2b00      	cmp	r3, #0
   448ec:	f43f aee1 	beq.w	446b2 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_RESET, NULL);
   448f0:	2100      	movs	r1, #0
   448f2:	2001      	movs	r0, #1
   448f4:	e7c2      	b.n	4487c <usbd_work_handler+0x1fc>
	if (ep_ctx->cfg.en) {
   448f6:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
   448fa:	b17b      	cbz	r3, 4491c <usbd_work_handler+0x29c>
		ep_ctx->read_pending = true;
   448fc:	2501      	movs	r5, #1
   448fe:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
   44902:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
   44906:	f7ff fd6d 	bl	443e4 <usbd_evt_alloc>
		if (!ev) {
   4490a:	b138      	cbz	r0, 4491c <usbd_work_handler+0x29c>
		ev->evt.ep_evt.ep = ep_ctx;
   4490c:	4a15      	ldr	r2, [pc, #84]	; (44964 <usbd_work_handler+0x2e4>)
		ev->evt_type = USBD_EVT_EP;
   4490e:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   44910:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   44912:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
   44914:	f7ff fcfa 	bl	4430c <usbd_evt_put>
		usbd_work_schedule();
   44918:	f7ff fcfe 	bl	44318 <usbd_work_schedule>
			if (ctx->status_cb) {
   4491c:	f857 3c28 	ldr.w	r3, [r7, #-40]
   44920:	2b00      	cmp	r3, #0
   44922:	f43f aec6 	beq.w	446b2 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SOF, NULL);
   44926:	2100      	movs	r1, #0
   44928:	200a      	movs	r0, #10
   4492a:	e7a7      	b.n	4487c <usbd_work_handler+0x1fc>
	nrfx_power_usbevt_disable();
   4492c:	f00b ff26 	bl	5077c <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   44930:	f003 fa1c 	bl	47d6c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   44934:	f002 fd3a 	bl	473ac <nrfx_usbd_uninit>
	usbd_evt_flush();
   44938:	f7ff fd40 	bl	443bc <usbd_evt_flush>
	ret = eps_ctx_init();
   4493c:	f7ff fe6c 	bl	44618 <eps_ctx_init>
	nrfx_power_usbevt_enable();
   44940:	f00b ff15 	bl	5076e <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   44944:	4808      	ldr	r0, [pc, #32]	; (44968 <usbd_work_handler+0x2e8>)
   44946:	f002 fe33 	bl	475b0 <nrfx_usbd_init>
		__ASSERT_NO_MSG(0);
   4494a:	e6b2      	b.n	446b2 <usbd_work_handler+0x32>
   4494c:	2000649c 	.word	0x2000649c
   44950:	20000e98 	.word	0x20000e98
   44954:	40027000 	.word	0x40027000
   44958:	200064a0 	.word	0x200064a0
   4495c:	200064d4 	.word	0x200064d4
   44960:	200064bc 	.word	0x200064bc
   44964:	20006708 	.word	0x20006708
   44968:	000444d1 	.word	0x000444d1
   4496c:	2000108c 	.word	0x2000108c

00044970 <usb_dc_attach>:
{
   44970:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
   44972:	4d1a      	ldr	r5, [pc, #104]	; (449dc <usb_dc_attach+0x6c>)
   44974:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
   44978:	bb5c      	cbnz	r4, 449d2 <usb_dc_attach+0x62>
	return z_impl_k_mutex_init(mutex);
   4497a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   4497e:	f00c faa2 	bl	50ec6 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   44982:	4620      	mov	r0, r4
   44984:	f000 fd48 	bl	45418 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   44988:	4622      	mov	r2, r4
	ctx->hfxo_mgr =
   4498a:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   4498c:	2101      	movs	r1, #1
   4498e:	2027      	movs	r0, #39	; 0x27
   44990:	f7e8 f8ae 	bl	2caf0 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   44994:	4812      	ldr	r0, [pc, #72]	; (449e0 <usb_dc_attach+0x70>)
   44996:	f002 fe0b 	bl	475b0 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   4499a:	4b12      	ldr	r3, [pc, #72]	; (449e4 <usb_dc_attach+0x74>)
   4499c:	4298      	cmp	r0, r3
   4499e:	d11a      	bne.n	449d6 <usb_dc_attach+0x66>
	nrfx_power_usbevt_enable();
   449a0:	f00b fee5 	bl	5076e <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   449a4:	f7ff fe38 	bl	44618 <eps_ctx_init>
	if (ret == 0) {
   449a8:	4604      	mov	r4, r0
   449aa:	b910      	cbnz	r0, 449b2 <usb_dc_attach+0x42>
		ctx->attached = true;
   449ac:	2301      	movs	r3, #1
   449ae:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   449b2:	4b0d      	ldr	r3, [pc, #52]	; (449e8 <usb_dc_attach+0x78>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   449b4:	681b      	ldr	r3, [r3, #0]
   449b6:	b10b      	cbz	r3, 449bc <usb_dc_attach+0x4c>
		usbd_work_schedule();
   449b8:	f7ff fcae 	bl	44318 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   449bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   449c0:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   449c4:	07db      	lsls	r3, r3, #31
   449c6:	d502      	bpl.n	449ce <usb_dc_attach+0x5e>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   449c8:	2000      	movs	r0, #0
   449ca:	f7ff fe0b 	bl	445e4 <usb_dc_power_event_handler>
}
   449ce:	4620      	mov	r0, r4
   449d0:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   449d2:	2400      	movs	r4, #0
   449d4:	e7fb      	b.n	449ce <usb_dc_attach+0x5e>
		return -EIO;
   449d6:	f06f 0404 	mvn.w	r4, #4
   449da:	e7f8      	b.n	449ce <usb_dc_attach+0x5e>
   449dc:	2000649c 	.word	0x2000649c
   449e0:	000444d1 	.word	0x000444d1
   449e4:	0bad0000 	.word	0x0bad0000
   449e8:	2000108c 	.word	0x2000108c

000449ec <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   449ec:	4b07      	ldr	r3, [pc, #28]	; (44a0c <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
   449ee:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   449f2:	b13a      	cbz	r2, 44a04 <usb_dc_set_address+0x18>
   449f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   449f8:	2b00      	cmp	r3, #0
	return 0;
   449fa:	bf0c      	ite	eq
   449fc:	f06f 0012 	mvneq.w	r0, #18
   44a00:	2000      	movne	r0, #0
   44a02:	4770      	bx	lr
		return -ENODEV;
   44a04:	f06f 0012 	mvn.w	r0, #18
}
   44a08:	4770      	bx	lr
   44a0a:	bf00      	nop
   44a0c:	2000649c 	.word	0x2000649c

00044a10 <usb_dc_ep_configure>:
{
   44a10:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   44a12:	4b0f      	ldr	r3, [pc, #60]	; (44a50 <usb_dc_ep_configure+0x40>)
	if (!dev_attached()) {
   44a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   44a18:	4605      	mov	r5, r0
	if (!dev_attached()) {
   44a1a:	b1b3      	cbz	r3, 44a4a <usb_dc_ep_configure+0x3a>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   44a1c:	7804      	ldrb	r4, [r0, #0]
   44a1e:	4620      	mov	r0, r4
   44a20:	f7ff fc4c 	bl	442bc <endpoint_ctx>
	if (!ep_ctx) {
   44a24:	b910      	cbnz	r0, 44a2c <usb_dc_ep_configure+0x1c>
		return -EINVAL;
   44a26:	f06f 0015 	mvn.w	r0, #21
}
   44a2a:	bd38      	pop	{r3, r4, r5, pc}
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   44a2c:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   44a2e:	792b      	ldrb	r3, [r5, #4]
   44a30:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   44a32:	8869      	ldrh	r1, [r5, #2]
   44a34:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   44a36:	0723      	lsls	r3, r4, #28
   44a38:	d402      	bmi.n	44a40 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   44a3a:	1e4b      	subs	r3, r1, #1
   44a3c:	420b      	tst	r3, r1
   44a3e:	d1f2      	bne.n	44a26 <usb_dc_ep_configure+0x16>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   44a40:	4620      	mov	r0, r4
   44a42:	f00b ff20 	bl	50886 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   44a46:	2000      	movs	r0, #0
   44a48:	e7ef      	b.n	44a2a <usb_dc_ep_configure+0x1a>
		return -ENODEV;
   44a4a:	f06f 0012 	mvn.w	r0, #18
   44a4e:	e7ec      	b.n	44a2a <usb_dc_ep_configure+0x1a>
   44a50:	2000649c 	.word	0x2000649c

00044a54 <usb_dc_ep_set_stall>:
{
   44a54:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   44a56:	4b12      	ldr	r3, [pc, #72]	; (44aa0 <usb_dc_ep_set_stall+0x4c>)
	if (!dev_attached() || !dev_ready()) {
   44a58:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44a5c:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   44a5e:	b1c2      	cbz	r2, 44a92 <usb_dc_ep_set_stall+0x3e>
   44a60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44a64:	b1ab      	cbz	r3, 44a92 <usb_dc_ep_set_stall+0x3e>
	ep_ctx = endpoint_ctx(ep);
   44a66:	f7ff fc29 	bl	442bc <endpoint_ctx>
	if (!ep_ctx) {
   44a6a:	4604      	mov	r4, r0
   44a6c:	b1a0      	cbz	r0, 44a98 <usb_dc_ep_set_stall+0x44>
	switch (ep_ctx->cfg.type) {
   44a6e:	7a83      	ldrb	r3, [r0, #10]
   44a70:	2b03      	cmp	r3, #3
   44a72:	d805      	bhi.n	44a80 <usb_dc_ep_set_stall+0x2c>
   44a74:	e8df f003 	tbb	[pc, r3]
   44a78:	09091002 	.word	0x09091002
		nrfx_usbd_setup_stall();
   44a7c:	f003 f810 	bl	47aa0 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
   44a80:	2000      	movs	r0, #0
	ep_ctx->buf.curr = ep_ctx->buf.data;
   44a82:	6963      	ldr	r3, [r4, #20]
	ep_ctx->buf.len = 0U;
   44a84:	60e0      	str	r0, [r4, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   44a86:	61a3      	str	r3, [r4, #24]
}
   44a88:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   44a8a:	4628      	mov	r0, r5
   44a8c:	f002 ff80 	bl	47990 <nrfx_usbd_ep_stall>
		break;
   44a90:	e7f6      	b.n	44a80 <usb_dc_ep_set_stall+0x2c>
		return -ENODEV;
   44a92:	f06f 0012 	mvn.w	r0, #18
   44a96:	e7f7      	b.n	44a88 <usb_dc_ep_set_stall+0x34>
		return -EINVAL;
   44a98:	f06f 0015 	mvn.w	r0, #21
   44a9c:	e7f4      	b.n	44a88 <usb_dc_ep_set_stall+0x34>
   44a9e:	bf00      	nop
   44aa0:	2000649c 	.word	0x2000649c

00044aa4 <usb_dc_ep_clear_stall>:
{
   44aa4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   44aa6:	4b0e      	ldr	r3, [pc, #56]	; (44ae0 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
   44aa8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44aac:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
   44aae:	b182      	cbz	r2, 44ad2 <usb_dc_ep_clear_stall+0x2e>
   44ab0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44ab4:	b16b      	cbz	r3, 44ad2 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
   44ab6:	f7ff fc01 	bl	442bc <endpoint_ctx>
	if (!ep_ctx) {
   44aba:	b168      	cbz	r0, 44ad8 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   44abc:	f015 0408 	ands.w	r4, r5, #8
   44ac0:	d10a      	bne.n	44ad8 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   44ac2:	4628      	mov	r0, r5
   44ac4:	f002 ff86 	bl	479d4 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   44ac8:	4628      	mov	r0, r5
   44aca:	f003 fa15 	bl	47ef8 <nrfx_usbd_ep_stall_clear>
	return 0;
   44ace:	4620      	mov	r0, r4
}
   44ad0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   44ad2:	f06f 0012 	mvn.w	r0, #18
   44ad6:	e7fb      	b.n	44ad0 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
   44ad8:	f06f 0015 	mvn.w	r0, #21
   44adc:	e7f8      	b.n	44ad0 <usb_dc_ep_clear_stall+0x2c>
   44ade:	bf00      	nop
   44ae0:	2000649c 	.word	0x2000649c

00044ae4 <usb_dc_ep_is_stalled>:
{
   44ae4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   44ae6:	4b0c      	ldr	r3, [pc, #48]	; (44b18 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
   44ae8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44aec:	4605      	mov	r5, r0
   44aee:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
   44af0:	b162      	cbz	r2, 44b0c <usb_dc_ep_is_stalled+0x28>
   44af2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44af6:	b14b      	cbz	r3, 44b0c <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
   44af8:	f7ff fbe0 	bl	442bc <endpoint_ctx>
	if (!ep_ctx) {
   44afc:	b148      	cbz	r0, 44b12 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
   44afe:	b144      	cbz	r4, 44b12 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   44b00:	4628      	mov	r0, r5
   44b02:	f002 ff4d 	bl	479a0 <nrfx_usbd_ep_stall_check>
   44b06:	7020      	strb	r0, [r4, #0]
	return 0;
   44b08:	2000      	movs	r0, #0
}
   44b0a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   44b0c:	f06f 0012 	mvn.w	r0, #18
   44b10:	e7fb      	b.n	44b0a <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
   44b12:	f06f 0015 	mvn.w	r0, #21
   44b16:	e7f8      	b.n	44b0a <usb_dc_ep_is_stalled+0x26>
   44b18:	2000649c 	.word	0x2000649c

00044b1c <usb_dc_ep_enable>:
{
   44b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
   44b1e:	4d13      	ldr	r5, [pc, #76]	; (44b6c <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
   44b20:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   44b24:	4604      	mov	r4, r0
	if (!dev_attached()) {
   44b26:	b1ba      	cbz	r2, 44b58 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   44b28:	f7ff fbc8 	bl	442bc <endpoint_ctx>
	if (!ep_ctx) {
   44b2c:	4606      	mov	r6, r0
   44b2e:	b1b0      	cbz	r0, 44b5e <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   44b30:	0723      	lsls	r3, r4, #28
   44b32:	d405      	bmi.n	44b40 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   44b34:	4620      	mov	r0, r4
   44b36:	f002 ff4d 	bl	479d4 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   44b3a:	4620      	mov	r0, r4
   44b3c:	f003 f9dc 	bl	47ef8 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
   44b40:	7a37      	ldrb	r7, [r6, #8]
   44b42:	b97f      	cbnz	r7, 44b64 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
   44b44:	f895 0025 	ldrb.w	r0, [r5, #37]	; 0x25
	ep_ctx->cfg.en = true;
   44b48:	2301      	movs	r3, #1
   44b4a:	7233      	strb	r3, [r6, #8]
	if (dev_ready()) {
   44b4c:	b118      	cbz	r0, 44b56 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   44b4e:	4620      	mov	r0, r4
   44b50:	f003 f980 	bl	47e54 <nrfx_usbd_ep_enable>
	return 0;
   44b54:	4638      	mov	r0, r7
}
   44b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
   44b58:	f06f 0012 	mvn.w	r0, #18
   44b5c:	e7fb      	b.n	44b56 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
   44b5e:	f06f 0015 	mvn.w	r0, #21
   44b62:	e7f8      	b.n	44b56 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
   44b64:	f06f 0077 	mvn.w	r0, #119	; 0x77
   44b68:	e7f5      	b.n	44b56 <usb_dc_ep_enable+0x3a>
   44b6a:	bf00      	nop
   44b6c:	2000649c 	.word	0x2000649c

00044b70 <usb_dc_ep_disable>:
{
   44b70:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   44b72:	4b11      	ldr	r3, [pc, #68]	; (44bb8 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
   44b74:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44b78:	4604      	mov	r4, r0
	if (!dev_attached() || !dev_ready()) {
   44b7a:	b19a      	cbz	r2, 44ba4 <usb_dc_ep_disable+0x34>
   44b7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44b80:	b183      	cbz	r3, 44ba4 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
   44b82:	f7ff fb9b 	bl	442bc <endpoint_ctx>
	if (!ep_ctx) {
   44b86:	4605      	mov	r5, r0
   44b88:	b178      	cbz	r0, 44baa <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
   44b8a:	7a03      	ldrb	r3, [r0, #8]
   44b8c:	b183      	cbz	r3, 44bb0 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   44b8e:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
   44b90:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   44b92:	f003 f933 	bl	47dfc <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
   44b96:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
   44b98:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   44b9a:	f00b fb6f 	bl	5027c <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   44b9e:	722c      	strb	r4, [r5, #8]
	return 0;
   44ba0:	4620      	mov	r0, r4
}
   44ba2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   44ba4:	f06f 0012 	mvn.w	r0, #18
   44ba8:	e7fb      	b.n	44ba2 <usb_dc_ep_disable+0x32>
		return -EINVAL;
   44baa:	f06f 0015 	mvn.w	r0, #21
   44bae:	e7f8      	b.n	44ba2 <usb_dc_ep_disable+0x32>
		return -EALREADY;
   44bb0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   44bb4:	e7f5      	b.n	44ba2 <usb_dc_ep_disable+0x32>
   44bb6:	bf00      	nop
   44bb8:	2000649c 	.word	0x2000649c

00044bbc <usb_dc_ep_write>:
{
   44bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
   44bc0:	4f35      	ldr	r7, [pc, #212]	; (44c98 <usb_dc_ep_write+0xdc>)
{
   44bc2:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
   44bc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
   44bc8:	4680      	mov	r8, r0
   44bca:	4689      	mov	r9, r1
   44bcc:	4616      	mov	r6, r2
   44bce:	46ba      	mov	sl, r7
	if (!dev_attached() || !dev_ready()) {
   44bd0:	2b00      	cmp	r3, #0
   44bd2:	d05a      	beq.n	44c8a <usb_dc_ep_write+0xce>
   44bd4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   44bd8:	2b00      	cmp	r3, #0
   44bda:	d056      	beq.n	44c8a <usb_dc_ep_write+0xce>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   44bdc:	f010 0f80 	tst.w	r0, #128	; 0x80
   44be0:	d056      	beq.n	44c90 <usb_dc_ep_write+0xd4>
	ep_ctx = endpoint_ctx(ep);
   44be2:	f7ff fb6b 	bl	442bc <endpoint_ctx>
	if (!ep_ctx) {
   44be6:	4605      	mov	r5, r0
   44be8:	2800      	cmp	r0, #0
   44bea:	d051      	beq.n	44c90 <usb_dc_ep_write+0xd4>
	if (!ep_ctx->cfg.en) {
   44bec:	7a03      	ldrb	r3, [r0, #8]
   44bee:	2b00      	cmp	r3, #0
   44bf0:	d04e      	beq.n	44c90 <usb_dc_ep_write+0xd4>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44bf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44bfa:	f107 0038 	add.w	r0, r7, #56	; 0x38
   44bfe:	f00b fb52 	bl	502a6 <k_mutex_lock.constprop.7>
	if (ep_ctx->write_in_progress) {
   44c02:	7fab      	ldrb	r3, [r5, #30]
   44c04:	b14b      	cbz	r3, 44c1a <usb_dc_ep_write+0x5e>
		k_mutex_unlock(&ctx->drv_lock);
   44c06:	f107 0038 	add.w	r0, r7, #56	; 0x38
   44c0a:	f00b fb4a 	bl	502a2 <k_mutex_unlock>
		return -EAGAIN;
   44c0e:	f06f 040a 	mvn.w	r4, #10
}
   44c12:	4620      	mov	r0, r4
   44c14:	b004      	add	sp, #16
   44c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!data_len && ep_ctx->trans_zlp) {
   44c1a:	b916      	cbnz	r6, 44c22 <usb_dc_ep_write+0x66>
   44c1c:	7feb      	ldrb	r3, [r5, #31]
   44c1e:	b103      	cbz	r3, 44c22 <usb_dc_ep_write+0x66>
		ep_ctx->trans_zlp = false;
   44c20:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   44c22:	7aab      	ldrb	r3, [r5, #10]
   44c24:	b9bb      	cbnz	r3, 44c56 <usb_dc_ep_write+0x9a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   44c26:	b15e      	cbz	r6, 44c40 <usb_dc_ep_write+0x84>
   44c28:	f8ba 300a 	ldrh.w	r3, [sl, #10]
   44c2c:	42b3      	cmp	r3, r6
   44c2e:	d907      	bls.n	44c40 <usb_dc_ep_write+0x84>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   44c30:	686a      	ldr	r2, [r5, #4]
   44c32:	fbb6 f3f2 	udiv	r3, r6, r2
   44c36:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   44c3a:	b90b      	cbnz	r3, 44c40 <usb_dc_ep_write+0x84>
			ep_ctx->trans_zlp = true;
   44c3c:	2301      	movs	r3, #1
   44c3e:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   44c40:	f002 ff36 	bl	47ab0 <nrfx_usbd_last_setup_dir_get>
   44c44:	4540      	cmp	r0, r8
   44c46:	d006      	beq.n	44c56 <usb_dc_ep_write+0x9a>
		nrfx_usbd_setup_clear();
   44c48:	f002 ff22 	bl	47a90 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
   44c4c:	4813      	ldr	r0, [pc, #76]	; (44c9c <usb_dc_ep_write+0xe0>)
   44c4e:	f00b fb28 	bl	502a2 <k_mutex_unlock>
		return 0;
   44c52:	2400      	movs	r4, #0
   44c54:	e7dd      	b.n	44c12 <usb_dc_ep_write+0x56>
	ep_ctx->write_in_progress = true;
   44c56:	2301      	movs	r3, #1
   44c58:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   44c5a:	2700      	movs	r7, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   44c5c:	a901      	add	r1, sp, #4
   44c5e:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   44c60:	e9cd 9601 	strd	r9, r6, [sp, #4]
   44c64:	9703      	str	r7, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   44c66:	f002 fce9 	bl	4763c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
   44c6a:	4b0d      	ldr	r3, [pc, #52]	; (44ca0 <usb_dc_ep_write+0xe4>)
   44c6c:	4298      	cmp	r0, r3
   44c6e:	d005      	beq.n	44c7c <usb_dc_ep_write+0xc0>
		ep_ctx->write_in_progress = false;
   44c70:	77af      	strb	r7, [r5, #30]
		if (ret_bytes) {
   44c72:	b104      	cbz	r4, 44c76 <usb_dc_ep_write+0xba>
			*ret_bytes = 0;
   44c74:	6027      	str	r7, [r4, #0]
		result = -EIO;
   44c76:	f06f 0404 	mvn.w	r4, #4
   44c7a:	e002      	b.n	44c82 <usb_dc_ep_write+0xc6>
		if (ret_bytes) {
   44c7c:	b10c      	cbz	r4, 44c82 <usb_dc_ep_write+0xc6>
			*ret_bytes = data_len;
   44c7e:	6026      	str	r6, [r4, #0]
	int result = 0;
   44c80:	463c      	mov	r4, r7
	k_mutex_unlock(&ctx->drv_lock);
   44c82:	4806      	ldr	r0, [pc, #24]	; (44c9c <usb_dc_ep_write+0xe0>)
   44c84:	f00b fb0d 	bl	502a2 <k_mutex_unlock>
	return result;
   44c88:	e7c3      	b.n	44c12 <usb_dc_ep_write+0x56>
		return -ENODEV;
   44c8a:	f06f 0412 	mvn.w	r4, #18
   44c8e:	e7c0      	b.n	44c12 <usb_dc_ep_write+0x56>
		return -EINVAL;
   44c90:	f06f 0415 	mvn.w	r4, #21
   44c94:	e7bd      	b.n	44c12 <usb_dc_ep_write+0x56>
   44c96:	bf00      	nop
   44c98:	2000649c 	.word	0x2000649c
   44c9c:	200064d4 	.word	0x200064d4
   44ca0:	0bad0000 	.word	0x0bad0000

00044ca4 <usb_dc_ep_read_wait>:
{
   44ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44ca8:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
   44caa:	4b22      	ldr	r3, [pc, #136]	; (44d34 <usb_dc_ep_read_wait+0x90>)
{
   44cac:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
   44cae:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
   44cb2:	460f      	mov	r7, r1
	if (!dev_attached() || !dev_ready()) {
   44cb4:	2a00      	cmp	r2, #0
   44cb6:	d036      	beq.n	44d26 <usb_dc_ep_read_wait+0x82>
   44cb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   44cbc:	2b00      	cmp	r3, #0
   44cbe:	d032      	beq.n	44d26 <usb_dc_ep_read_wait+0x82>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   44cc0:	0603      	lsls	r3, r0, #24
   44cc2:	d433      	bmi.n	44d2c <usb_dc_ep_read_wait+0x88>
	if (!data && max_data_len) {
   44cc4:	b911      	cbnz	r1, 44ccc <usb_dc_ep_read_wait+0x28>
   44cc6:	f1b8 0f00 	cmp.w	r8, #0
   44cca:	d12f      	bne.n	44d2c <usb_dc_ep_read_wait+0x88>
	ep_ctx = endpoint_ctx(ep);
   44ccc:	f7ff faf6 	bl	442bc <endpoint_ctx>
	if (!ep_ctx) {
   44cd0:	4604      	mov	r4, r0
   44cd2:	b358      	cbz	r0, 44d2c <usb_dc_ep_read_wait+0x88>
	if (!ep_ctx->cfg.en) {
   44cd4:	7a03      	ldrb	r3, [r0, #8]
   44cd6:	b34b      	cbz	r3, 44d2c <usb_dc_ep_read_wait+0x88>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44ce0:	4815      	ldr	r0, [pc, #84]	; (44d38 <usb_dc_ep_read_wait+0x94>)
   44ce2:	f00b fae0 	bl	502a6 <k_mutex_lock.constprop.7>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   44ce6:	68e3      	ldr	r3, [r4, #12]
   44ce8:	4598      	cmp	r8, r3
   44cea:	4646      	mov	r6, r8
   44cec:	bf28      	it	cs
   44cee:	461e      	movcs	r6, r3
	if (!data && !max_data_len) {
   44cf0:	b957      	cbnz	r7, 44d08 <usb_dc_ep_read_wait+0x64>
   44cf2:	f1b8 0f00 	cmp.w	r8, #0
   44cf6:	d107      	bne.n	44d08 <usb_dc_ep_read_wait+0x64>
		if (read_bytes) {
   44cf8:	b105      	cbz	r5, 44cfc <usb_dc_ep_read_wait+0x58>
			*read_bytes = ep_ctx->buf.len;
   44cfa:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
   44cfc:	480e      	ldr	r0, [pc, #56]	; (44d38 <usb_dc_ep_read_wait+0x94>)
   44cfe:	f00b fad0 	bl	502a2 <k_mutex_unlock>
		return 0;
   44d02:	2000      	movs	r0, #0
}
   44d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   44d08:	4632      	mov	r2, r6
   44d0a:	69a1      	ldr	r1, [r4, #24]
   44d0c:	4638      	mov	r0, r7
   44d0e:	f007 faed 	bl	4c2ec <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   44d12:	69a3      	ldr	r3, [r4, #24]
   44d14:	4433      	add	r3, r6
   44d16:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   44d18:	68e3      	ldr	r3, [r4, #12]
   44d1a:	1b9b      	subs	r3, r3, r6
   44d1c:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   44d1e:	2d00      	cmp	r5, #0
   44d20:	d0ec      	beq.n	44cfc <usb_dc_ep_read_wait+0x58>
		*read_bytes = bytes_to_copy;
   44d22:	602e      	str	r6, [r5, #0]
   44d24:	e7ea      	b.n	44cfc <usb_dc_ep_read_wait+0x58>
		return -ENODEV;
   44d26:	f06f 0012 	mvn.w	r0, #18
   44d2a:	e7eb      	b.n	44d04 <usb_dc_ep_read_wait+0x60>
		return -EINVAL;
   44d2c:	f06f 0015 	mvn.w	r0, #21
   44d30:	e7e8      	b.n	44d04 <usb_dc_ep_read_wait+0x60>
   44d32:	bf00      	nop
   44d34:	2000649c 	.word	0x2000649c
   44d38:	200064d4 	.word	0x200064d4

00044d3c <usb_dc_ep_read_continue>:
{
   44d3c:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
   44d3e:	4d1e      	ldr	r5, [pc, #120]	; (44db8 <usb_dc_ep_read_continue+0x7c>)
	if (!dev_attached() || !dev_ready()) {
   44d40:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
{
   44d44:	4603      	mov	r3, r0
	if (!dev_attached() || !dev_ready()) {
   44d46:	b382      	cbz	r2, 44daa <usb_dc_ep_read_continue+0x6e>
   44d48:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   44d4c:	b36a      	cbz	r2, 44daa <usb_dc_ep_read_continue+0x6e>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   44d4e:	061b      	lsls	r3, r3, #24
   44d50:	d42e      	bmi.n	44db0 <usb_dc_ep_read_continue+0x74>
	ep_ctx = endpoint_ctx(ep);
   44d52:	f7ff fab3 	bl	442bc <endpoint_ctx>
	if (!ep_ctx) {
   44d56:	4604      	mov	r4, r0
   44d58:	b350      	cbz	r0, 44db0 <usb_dc_ep_read_continue+0x74>
	if (!ep_ctx->cfg.en) {
   44d5a:	7a03      	ldrb	r3, [r0, #8]
   44d5c:	b343      	cbz	r3, 44db0 <usb_dc_ep_read_continue+0x74>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   44d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44d66:	f105 0038 	add.w	r0, r5, #56	; 0x38
   44d6a:	f00b fa9c 	bl	502a6 <k_mutex_lock.constprop.7>
	if (!ep_ctx->buf.len) {
   44d6e:	68e3      	ldr	r3, [r4, #12]
   44d70:	b9b3      	cbnz	r3, 44da0 <usb_dc_ep_read_continue+0x64>
		ep_ctx->read_complete = true;
   44d72:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
   44d74:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
   44d76:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
   44d78:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
   44d7a:	7f63      	ldrb	r3, [r4, #29]
   44d7c:	b183      	cbz	r3, 44da0 <usb_dc_ep_read_continue+0x64>
			struct usbd_event *ev = usbd_evt_alloc();
   44d7e:	f7ff fb31 	bl	443e4 <usbd_evt_alloc>
			if (!ev) {
   44d82:	b930      	cbnz	r0, 44d92 <usb_dc_ep_read_continue+0x56>
				k_mutex_unlock(&ctx->drv_lock);
   44d84:	f105 0038 	add.w	r0, r5, #56	; 0x38
   44d88:	f00b fa8b 	bl	502a2 <k_mutex_unlock>
				return -ENOMEM;
   44d8c:	f06f 000b 	mvn.w	r0, #11
}
   44d90:	bd70      	pop	{r4, r5, r6, pc}
			ev->evt_type = USBD_EVT_EP;
   44d92:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   44d94:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   44d96:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
   44d98:	f7ff fab8 	bl	4430c <usbd_evt_put>
			usbd_work_schedule();
   44d9c:	f7ff fabc 	bl	44318 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
   44da0:	4806      	ldr	r0, [pc, #24]	; (44dbc <usb_dc_ep_read_continue+0x80>)
   44da2:	f00b fa7e 	bl	502a2 <k_mutex_unlock>
	return 0;
   44da6:	2000      	movs	r0, #0
   44da8:	e7f2      	b.n	44d90 <usb_dc_ep_read_continue+0x54>
		return -ENODEV;
   44daa:	f06f 0012 	mvn.w	r0, #18
   44dae:	e7ef      	b.n	44d90 <usb_dc_ep_read_continue+0x54>
		return -EINVAL;
   44db0:	f06f 0015 	mvn.w	r0, #21
   44db4:	e7ec      	b.n	44d90 <usb_dc_ep_read_continue+0x54>
   44db6:	bf00      	nop
   44db8:	2000649c 	.word	0x2000649c
   44dbc:	200064d4 	.word	0x200064d4

00044dc0 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
   44dc0:	4b08      	ldr	r3, [pc, #32]	; (44de4 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
   44dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
   44dc6:	b510      	push	{r4, lr}
   44dc8:	460c      	mov	r4, r1
	if (!dev_attached()) {
   44dca:	b12b      	cbz	r3, 44dd8 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
   44dcc:	f7ff fa76 	bl	442bc <endpoint_ctx>
	if (!ep_ctx) {
   44dd0:	b128      	cbz	r0, 44dde <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   44dd2:	6004      	str	r4, [r0, #0]
	return 0;
   44dd4:	2000      	movs	r0, #0
}
   44dd6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   44dd8:	f06f 0012 	mvn.w	r0, #18
   44ddc:	e7fb      	b.n	44dd6 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
   44dde:	f06f 0015 	mvn.w	r0, #21
   44de2:	e7f8      	b.n	44dd6 <usb_dc_ep_set_callback+0x16>
   44de4:	2000649c 	.word	0x2000649c

00044de8 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   44de8:	4b01      	ldr	r3, [pc, #4]	; (44df0 <usb_dc_set_status_callback+0x8>)
   44dea:	6018      	str	r0, [r3, #0]
}
   44dec:	4770      	bx	lr
   44dee:	bf00      	nop
   44df0:	2000649c 	.word	0x2000649c

00044df4 <usb_dc_ep_mps>:
{
   44df4:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   44df6:	4b07      	ldr	r3, [pc, #28]	; (44e14 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
   44df8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   44dfc:	b123      	cbz	r3, 44e08 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   44dfe:	f7ff fa5d 	bl	442bc <endpoint_ctx>
	if (!ep_ctx) {
   44e02:	b120      	cbz	r0, 44e0e <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   44e04:	6840      	ldr	r0, [r0, #4]
}
   44e06:	bd08      	pop	{r3, pc}
		return -ENODEV;
   44e08:	f06f 0012 	mvn.w	r0, #18
   44e0c:	e7fb      	b.n	44e06 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   44e0e:	f06f 0015 	mvn.w	r0, #21
   44e12:	e7f8      	b.n	44e06 <usb_dc_ep_mps+0x12>
   44e14:	2000649c 	.word	0x2000649c

00044e18 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   44e18:	2811      	cmp	r0, #17
{
   44e1a:	b510      	push	{r4, lr}
	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   44e1c:	d80e      	bhi.n	44e3c <adc_gain_invert+0x24>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   44e1e:	4a09      	ldr	r2, [pc, #36]	; (44e44 <adc_gain_invert+0x2c>)
   44e20:	f812 4010 	ldrb.w	r4, [r2, r0, lsl #1]
   44e24:	b154      	cbz	r4, 44e3c <adc_gain_invert+0x24>
   44e26:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   44e2a:	7852      	ldrb	r2, [r2, #1]
   44e2c:	b132      	cbz	r2, 44e3c <adc_gain_invert+0x24>
			*value = (gdp->mul * *value) / gdp->div;
   44e2e:	680b      	ldr	r3, [r1, #0]
			rv = 0;
   44e30:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   44e32:	4363      	muls	r3, r4
   44e34:	fb93 f3f2 	sdiv	r3, r3, r2
   44e38:	600b      	str	r3, [r1, #0]
		}
	}

	return rv;
}
   44e3a:	bd10      	pop	{r4, pc}
	int rv = -EINVAL;
   44e3c:	f06f 0015 	mvn.w	r0, #21
	return rv;
   44e40:	e7fb      	b.n	44e3a <adc_gain_invert+0x22>
   44e42:	bf00      	nop
   44e44:	0005452b 	.word	0x0005452b

00044e48 <adc_context_start_sampling.isra.1>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   44e48:	4a05      	ldr	r2, [pc, #20]	; (44e60 <adc_context_start_sampling.isra.1+0x18>)
   44e4a:	2301      	movs	r3, #1
   44e4c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   44e50:	b108      	cbz	r0, 44e56 <adc_context_start_sampling.isra.1+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44e52:	60d3      	str	r3, [r2, #12]
   44e54:	4770      	bx	lr
   44e56:	6013      	str	r3, [r2, #0]
   44e58:	4a02      	ldr	r2, [pc, #8]	; (44e64 <adc_context_start_sampling.isra.1+0x1c>)
   44e5a:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   44e5c:	4770      	bx	lr
   44e5e:	bf00      	nop
   44e60:	40007000 	.word	0x40007000
   44e64:	40007004 	.word	0x40007004

00044e68 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
   44e68:	7908      	ldrb	r0, [r1, #4]
{
   44e6a:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   44e6c:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   44e70:	2c07      	cmp	r4, #7
   44e72:	d81f      	bhi.n	44eb4 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
   44e74:	780b      	ldrb	r3, [r1, #0]
   44e76:	2b09      	cmp	r3, #9
   44e78:	d81c      	bhi.n	44eb4 <adc_nrfx_channel_setup+0x4c>
   44e7a:	e8df f003 	tbb	[pc, r3]
   44e7e:	0606      	.short	0x0606
   44e80:	1b060606 	.word	0x1b060606
   44e84:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
   44e88:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
   44e8a:	784a      	ldrb	r2, [r1, #1]
   44e8c:	2a03      	cmp	r2, #3
   44e8e:	d018      	beq.n	44ec2 <adc_nrfx_channel_setup+0x5a>
   44e90:	2a04      	cmp	r2, #4
   44e92:	d10f      	bne.n	44eb4 <adc_nrfx_channel_setup+0x4c>
	nrf_saadc_channel_config_t config = {
   44e94:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
   44e96:	884a      	ldrh	r2, [r1, #2]
   44e98:	f244 060a 	movw	r6, #16394	; 0x400a
   44e9c:	42b2      	cmp	r2, r6
   44e9e:	d044      	beq.n	44f2a <adc_nrfx_channel_setup+0xc2>
   44ea0:	d811      	bhi.n	44ec6 <adc_nrfx_channel_setup+0x5e>
   44ea2:	f244 0603 	movw	r6, #16387	; 0x4003
   44ea6:	42b2      	cmp	r2, r6
   44ea8:	d03b      	beq.n	44f22 <adc_nrfx_channel_setup+0xba>
   44eaa:	f244 0605 	movw	r6, #16389	; 0x4005
   44eae:	42b2      	cmp	r2, r6
   44eb0:	d039      	beq.n	44f26 <adc_nrfx_channel_setup+0xbe>
   44eb2:	b3d2      	cbz	r2, 44f2a <adc_nrfx_channel_setup+0xc2>
		return -EINVAL;
   44eb4:	f06f 0015 	mvn.w	r0, #21
   44eb8:	e032      	b.n	44f20 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   44eba:	2306      	movs	r3, #6
		break;
   44ebc:	e7e5      	b.n	44e8a <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   44ebe:	2307      	movs	r3, #7
		break;
   44ec0:	e7e3      	b.n	44e8a <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
   44ec2:	2501      	movs	r5, #1
   44ec4:	e7e7      	b.n	44e96 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   44ec6:	f244 0614 	movw	r6, #16404	; 0x4014
   44eca:	42b2      	cmp	r2, r6
   44ecc:	d02f      	beq.n	44f2e <adc_nrfx_channel_setup+0xc6>
   44ece:	f244 0628 	movw	r6, #16424	; 0x4028
   44ed2:	42b2      	cmp	r2, r6
   44ed4:	d02d      	beq.n	44f32 <adc_nrfx_channel_setup+0xca>
   44ed6:	f244 060f 	movw	r6, #16399	; 0x400f
   44eda:	42b2      	cmp	r2, r6
   44edc:	d1ea      	bne.n	44eb4 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   44ede:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   44ee0:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   44ee4:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   44ee6:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   44eea:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   44eee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   44ef2:	0122      	lsls	r2, r4, #4
   44ef4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   44ef8:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   44efc:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   44efe:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   44f02:	0123      	lsls	r3, r4, #4
   44f04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   44f08:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   44f0c:	798a      	ldrb	r2, [r1, #6]
   44f0e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   44f12:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   44f16:	4b08      	ldr	r3, [pc, #32]	; (44f38 <adc_nrfx_channel_setup+0xd0>)
   44f18:	441c      	add	r4, r3
   44f1a:	794b      	ldrb	r3, [r1, #5]
   44f1c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
}
   44f20:	bd70      	pop	{r4, r5, r6, pc}
	nrf_saadc_channel_config_t config = {
   44f22:	2200      	movs	r2, #0
   44f24:	e7dc      	b.n	44ee0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
   44f26:	2201      	movs	r2, #1
   44f28:	e7da      	b.n	44ee0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   44f2a:	2202      	movs	r2, #2
   44f2c:	e7d8      	b.n	44ee0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   44f2e:	2204      	movs	r2, #4
   44f30:	e7d6      	b.n	44ee0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   44f32:	2205      	movs	r2, #5
   44f34:	e7d4      	b.n	44ee0 <adc_nrfx_channel_setup+0x78>
   44f36:	bf00      	nop
   44f38:	20000168 	.word	0x20000168

00044f3c <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   44f3c:	4b2f      	ldr	r3, [pc, #188]	; (44ffc <saadc_irq_handler+0xc0>)
   44f3e:	681a      	ldr	r2, [r3, #0]
	return error;
}
#endif /* CONFIG_ADC_ASYNC */

static void saadc_irq_handler(const struct device *dev)
{
   44f40:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   44f42:	2a00      	cmp	r2, #0
   44f44:	d04b      	beq.n	44fde <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44f46:	2200      	movs	r2, #0
   44f48:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   44f4a:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   44f4c:	4c2c      	ldr	r4, [pc, #176]	; (45000 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44f4e:	4b2d      	ldr	r3, [pc, #180]	; (45004 <saadc_irq_handler+0xc8>)
   44f50:	2101      	movs	r1, #1
   44f52:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   44f54:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
   44f58:	6f63      	ldr	r3, [r4, #116]	; 0x74
   44f5a:	b3db      	cbz	r3, 44fd4 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
   44f5c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   44f60:	b143      	cbz	r3, 44f74 <saadc_irq_handler+0x38>
			action = callback(dev,
   44f62:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
   44f66:	f104 0174 	add.w	r1, r4, #116	; 0x74
   44f6a:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   44f6c:	2801      	cmp	r0, #1
   44f6e:	d014      	beq.n	44f9a <saadc_irq_handler+0x5e>
   44f70:	2802      	cmp	r0, #2
   44f72:	d029      	beq.n	44fc8 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   44f74:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   44f78:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   44f7c:	429a      	cmp	r2, r3
   44f7e:	d923      	bls.n	44fc8 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   44f80:	3301      	adds	r3, #1
   44f82:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   44f86:	4b20      	ldr	r3, [pc, #128]	; (45008 <saadc_irq_handler+0xcc>)
   44f88:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   44f8c:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   44f90:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   44f92:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   44f96:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   44f9a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   44f9e:	b92b      	cbnz	r3, 44fac <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   44fa0:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
		 */
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_STOP);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   44fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   44fa8:	f7ff bf4e 	b.w	44e48 <adc_context_start_sampling.isra.1>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   44fac:	f3bf 8f5b 	dmb	ish
   44fb0:	e854 3f00 	ldrex	r3, [r4]
   44fb4:	1e5a      	subs	r2, r3, #1
   44fb6:	e844 2100 	strex	r1, r2, [r4]
   44fba:	2900      	cmp	r1, #0
   44fbc:	d1f8      	bne.n	44fb0 <saadc_irq_handler+0x74>
   44fbe:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   44fc2:	2b01      	cmp	r3, #1
   44fc4:	dcec      	bgt.n	44fa0 <saadc_irq_handler+0x64>
   44fc6:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   44fc8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   44fcc:	b113      	cbz	r3, 44fd4 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
   44fce:	480f      	ldr	r0, [pc, #60]	; (4500c <saadc_irq_handler+0xd0>)
   44fd0:	f00c fac6 	bl	51560 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   44fd4:	480e      	ldr	r0, [pc, #56]	; (45010 <saadc_irq_handler+0xd4>)
   44fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   44fda:	f003 bc6d 	b.w	488b8 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   44fde:	4b0d      	ldr	r3, [pc, #52]	; (45014 <saadc_irq_handler+0xd8>)
   44fe0:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
   44fe2:	2900      	cmp	r1, #0
   44fe4:	d0ef      	beq.n	44fc6 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   44fe6:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   44fe8:	4a06      	ldr	r2, [pc, #24]	; (45004 <saadc_irq_handler+0xc8>)
   44fea:	681b      	ldr	r3, [r3, #0]
   44fec:	2301      	movs	r3, #1
   44fee:	6013      	str	r3, [r2, #0]
   44ff0:	f842 3c08 	str.w	r3, [r2, #-8]
   44ff4:	f842 3c04 	str.w	r3, [r2, #-4]
}
   44ff8:	e7e5      	b.n	44fc6 <saadc_irq_handler+0x8a>
   44ffa:	bf00      	nop
   44ffc:	40007104 	.word	0x40007104
   45000:	20000168 	.word	0x20000168
   45004:	40007008 	.word	0x40007008
   45008:	40007000 	.word	0x40007000
   4500c:	20000170 	.word	0x20000170
   45010:	200001c0 	.word	0x200001c0
   45014:	40007110 	.word	0x40007110

00045018 <adc_nrfx_read>:
{
   45018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4501a:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   4501c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   45020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45024:	485c      	ldr	r0, [pc, #368]	; (45198 <adc_nrfx_read+0x180>)
   45026:	f003 fc6d 	bl	48904 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   4502a:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
   4502c:	b910      	cbnz	r0, 45034 <adc_nrfx_read+0x1c>
		return -EINVAL;
   4502e:	f06f 0415 	mvn.w	r4, #21
   45032:	e09a      	b.n	4516a <adc_nrfx_read+0x152>
	if (!selected_channels ||
   45034:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
   45038:	d1f9      	bne.n	4502e <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
   4503a:	4c58      	ldr	r4, [pc, #352]	; (4519c <adc_nrfx_read+0x184>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   4503c:	4f58      	ldr	r7, [pc, #352]	; (451a0 <adc_nrfx_read+0x188>)
	active_channels = 0U;
   4503e:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
   45040:	fa20 f302 	lsr.w	r3, r0, r2
   45044:	f013 0301 	ands.w	r3, r3, #1
   45048:	d032      	beq.n	450b0 <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
   4504a:	18bb      	adds	r3, r7, r2
   4504c:	f893 c0a0 	ldrb.w	ip, [r3, #160]	; 0xa0
   45050:	f1bc 0f00 	cmp.w	ip, #0
   45054:	d0eb      	beq.n	4502e <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   45056:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   4505a:	7c6e      	ldrb	r6, [r5, #17]
   4505c:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
   45060:	3600      	adds	r6, #0
   45062:	bf18      	it	ne
   45064:	2601      	movne	r6, #1
   45066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   4506a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   4506e:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   45072:	f102 0351 	add.w	r3, r2, #81	; 0x51
   45076:	011b      	lsls	r3, r3, #4
			++active_channels;
   45078:	3101      	adds	r1, #1
   4507a:	f844 c003 	str.w	ip, [r4, r3]
   4507e:	b2c9      	uxtb	r1, r1
   45080:	3201      	adds	r2, #1
	} while (++channel_id < SAADC_CH_NUM);
   45082:	2a08      	cmp	r2, #8
   45084:	d1dc      	bne.n	45040 <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
   45086:	7c2b      	ldrb	r3, [r5, #16]
   45088:	3b08      	subs	r3, #8
   4508a:	2b06      	cmp	r3, #6
   4508c:	d8cf      	bhi.n	4502e <adc_nrfx_read+0x16>
   4508e:	a201      	add	r2, pc, #4	; (adr r2, 45094 <adc_nrfx_read+0x7c>)
   45090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   45094:	0004517f 	.word	0x0004517f
   45098:	0004502f 	.word	0x0004502f
   4509c:	000450bb 	.word	0x000450bb
   450a0:	0004502f 	.word	0x0004502f
   450a4:	00045177 	.word	0x00045177
   450a8:	0004502f 	.word	0x0004502f
   450ac:	0004517b 	.word	0x0004517b
   450b0:	f102 0651 	add.w	r6, r2, #81	; 0x51
   450b4:	0136      	lsls	r6, r6, #4
   450b6:	51a3      	str	r3, [r4, r6]
   450b8:	e7e2      	b.n	45080 <adc_nrfx_read+0x68>
		nrf_resolution = NRF_SAADC_RESOLUTION_10BIT;
   450ba:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
   450bc:	4b37      	ldr	r3, [pc, #220]	; (4519c <adc_nrfx_read+0x184>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   450be:	2901      	cmp	r1, #1
   450c0:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   450c4:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   450c6:	d95c      	bls.n	45182 <adc_nrfx_read+0x16a>
   450c8:	2a00      	cmp	r2, #0
   450ca:	d1b0      	bne.n	4502e <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
   450cc:	4835      	ldr	r0, [pc, #212]	; (451a4 <adc_nrfx_read+0x18c>)
   450ce:	5c82      	ldrb	r2, [r0, r2]
   450d0:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
   450d4:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   450d6:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
   450d8:	b112      	cbz	r2, 450e0 <adc_nrfx_read+0xc8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   450da:	8992      	ldrh	r2, [r2, #12]
   450dc:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   450e0:	68ea      	ldr	r2, [r5, #12]
   450e2:	429a      	cmp	r2, r3
   450e4:	d355      	bcc.n	45192 <adc_nrfx_read+0x17a>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   450e6:	4b2d      	ldr	r3, [pc, #180]	; (4519c <adc_nrfx_read+0x184>)
   450e8:	68aa      	ldr	r2, [r5, #8]
   450ea:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
	ctx->sequence = *sequence;
   450ee:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   450f0:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
   450f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   450f6:	4c2a      	ldr	r4, [pc, #168]	; (451a0 <adc_nrfx_read+0x188>)
   450f8:	f104 0674 	add.w	r6, r4, #116	; 0x74
   450fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   450fe:	683b      	ldr	r3, [r7, #0]
   45100:	6033      	str	r3, [r6, #0]
	if (sequence->options) {
   45102:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
   45104:	2600      	movs	r6, #0
   45106:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   45108:	2b00      	cmp	r3, #0
   4510a:	d03d      	beq.n	45188 <adc_nrfx_read+0x170>
		ctx->options = *sequence->options;
   4510c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   4510e:	f104 0588 	add.w	r5, r4, #136	; 0x88
   45112:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   45116:	6765      	str	r5, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   45118:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		if (ctx->options.interval_us != 0U) {
   4511c:	b3a0      	cbz	r0, 45188 <adc_nrfx_read+0x170>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4511e:	f3bf 8f5b 	dmb	ish
   45122:	e854 3f00 	ldrex	r3, [r4]
   45126:	e844 6200 	strex	r2, r6, [r4]
   4512a:	2a00      	cmp	r2, #0
   4512c:	d1f9      	bne.n	45122 <adc_nrfx_read+0x10a>
   4512e:	f3bf 8f5b 	dmb	ish
   45132:	481d      	ldr	r0, [pc, #116]	; (451a8 <adc_nrfx_read+0x190>)
   45134:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
   45138:	4a1c      	ldr	r2, [pc, #112]	; (451ac <adc_nrfx_read+0x194>)
   4513a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   4513e:	2100      	movs	r1, #0
   45140:	2300      	movs	r3, #0
   45142:	fbe5 0106 	umlal	r0, r1, r5, r6
   45146:	f7e0 ffdb 	bl	26100 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   4514a:	2200      	movs	r2, #0
   4514c:	e9cd 0100 	strd	r0, r1, [sp]
   45150:	2300      	movs	r3, #0
   45152:	f104 0008 	add.w	r0, r4, #8
   45156:	f004 faeb 	bl	49730 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   4515a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4515e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45162:	4813      	ldr	r0, [pc, #76]	; (451b0 <adc_nrfx_read+0x198>)
   45164:	f003 fbce 	bl	48904 <z_impl_k_sem_take>
	return ctx->status;
   45168:	6f24      	ldr	r4, [r4, #112]	; 0x70
	z_impl_k_sem_give(sem);
   4516a:	480b      	ldr	r0, [pc, #44]	; (45198 <adc_nrfx_read+0x180>)
   4516c:	f003 fba4 	bl	488b8 <z_impl_k_sem_give>
}
   45170:	4620      	mov	r0, r4
   45172:	b003      	add	sp, #12
   45174:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   45176:	2202      	movs	r2, #2
   45178:	e7a0      	b.n	450bc <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   4517a:	2203      	movs	r2, #3
   4517c:	e79e      	b.n	450bc <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   4517e:	2200      	movs	r2, #0
   45180:	e79c      	b.n	450bc <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
   45182:	2a08      	cmp	r2, #8
   45184:	d9a2      	bls.n	450cc <adc_nrfx_read+0xb4>
   45186:	e752      	b.n	4502e <adc_nrfx_read+0x16>
	adc_context_start_sampling(ctx);
   45188:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   4518c:	f7ff fe5c 	bl	44e48 <adc_context_start_sampling.isra.1>
   45190:	e7e3      	b.n	4515a <adc_nrfx_read+0x142>
		return -ENOMEM;
   45192:	f06f 040b 	mvn.w	r4, #11
   45196:	e7e8      	b.n	4516a <adc_nrfx_read+0x152>
   45198:	200001a8 	.word	0x200001a8
   4519c:	40007000 	.word	0x40007000
   451a0:	20000168 	.word	0x20000168
   451a4:	0005454f 	.word	0x0005454f
   451a8:	000f423f 	.word	0x000f423f
   451ac:	000f4240 	.word	0x000f4240
   451b0:	200001c0 	.word	0x200001c0

000451b4 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   451b4:	4b0d      	ldr	r3, [pc, #52]	; (451ec <init_saadc+0x38>)

static int init_saadc(const struct device *dev)
{
   451b6:	b510      	push	{r4, lr}
   451b8:	2400      	movs	r4, #0
   451ba:	601c      	str	r4, [r3, #0]
   451bc:	681b      	ldr	r3, [r3, #0]
   451be:	4b0c      	ldr	r3, [pc, #48]	; (451f0 <init_saadc+0x3c>)
   451c0:	601c      	str	r4, [r3, #0]
   451c2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   451c4:	4b0b      	ldr	r3, [pc, #44]	; (451f4 <init_saadc+0x40>)
   451c6:	2212      	movs	r2, #18
   451c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   451cc:	2007      	movs	r0, #7
   451ce:	f7e7 fc5d 	bl	2ca8c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   451d2:	4622      	mov	r2, r4
   451d4:	2101      	movs	r1, #1
   451d6:	2007      	movs	r0, #7
   451d8:	f7e7 fc8a 	bl	2caf0 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
   451dc:	4806      	ldr	r0, [pc, #24]	; (451f8 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
   451de:	6c83      	ldr	r3, [r0, #72]	; 0x48
   451e0:	b913      	cbnz	r3, 451e8 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
   451e2:	3040      	adds	r0, #64	; 0x40
   451e4:	f003 fb68 	bl	488b8 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   451e8:	2000      	movs	r0, #0
   451ea:	bd10      	pop	{r4, pc}
   451ec:	40007104 	.word	0x40007104
   451f0:	40007110 	.word	0x40007110
   451f4:	40007000 	.word	0x40007000
   451f8:	20000168 	.word	0x20000168

000451fc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   451fc:	4a0e      	ldr	r2, [pc, #56]	; (45238 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   451fe:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   45200:	1a84      	subs	r4, r0, r2
   45202:	10a3      	asrs	r3, r4, #2
   45204:	4c0d      	ldr	r4, [pc, #52]	; (4523c <onoff_stop+0x40>)
   45206:	435c      	muls	r4, r3
{
   45208:	4605      	mov	r5, r0
   4520a:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   4520c:	200c      	movs	r0, #12
   4520e:	fb00 2004 	mla	r0, r0, r4, r2
{
   45212:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   45214:	2140      	movs	r1, #64	; 0x40
   45216:	4408      	add	r0, r1
   45218:	f00b f897 	bl	5034a <set_off_state>
	if (err < 0) {
   4521c:	1e01      	subs	r1, r0, #0
   4521e:	db05      	blt.n	4522c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   45220:	4b07      	ldr	r3, [pc, #28]	; (45240 <onoff_stop+0x44>)
   45222:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   45226:	6863      	ldr	r3, [r4, #4]
   45228:	4798      	blx	r3
	return 0;
   4522a:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   4522c:	4628      	mov	r0, r5
   4522e:	4633      	mov	r3, r6
}
   45230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   45234:	4718      	bx	r3
   45236:	bf00      	nop
   45238:	2000673c 	.word	0x2000673c
   4523c:	b6db6db7 	.word	0xb6db6db7
   45240:	00053c30 	.word	0x00053c30

00045244 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   45244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   45248:	4e10      	ldr	r6, [pc, #64]	; (4528c <onoff_start+0x48>)
   4524a:	1b84      	subs	r4, r0, r6
   4524c:	10a3      	asrs	r3, r4, #2
   4524e:	4c10      	ldr	r4, [pc, #64]	; (45290 <onoff_start+0x4c>)
   45250:	435c      	muls	r4, r3
   45252:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   45254:	250c      	movs	r5, #12
   45256:	4365      	muls	r5, r4
{
   45258:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
   4525a:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   4525e:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
   45260:	4430      	add	r0, r6
   45262:	2140      	movs	r1, #64	; 0x40
   45264:	f00b f88a 	bl	5037c <set_starting_state>
	if (err < 0) {
   45268:	1e01      	subs	r1, r0, #0
   4526a:	db09      	blt.n	45280 <onoff_start+0x3c>
	subdata->cb = cb;
   4526c:	4a09      	ldr	r2, [pc, #36]	; (45294 <onoff_start+0x50>)
   4526e:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
   45270:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   45274:	4b08      	ldr	r3, [pc, #32]	; (45298 <onoff_start+0x54>)
   45276:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   4527a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   4527e:	4718      	bx	r3
		notify(mgr, err);
   45280:	4640      	mov	r0, r8
   45282:	463b      	mov	r3, r7
}
   45284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   45288:	4718      	bx	r3
   4528a:	bf00      	nop
   4528c:	2000673c 	.word	0x2000673c
   45290:	b6db6db7 	.word	0xb6db6db7
   45294:	000503df 	.word	0x000503df
   45298:	00053c30 	.word	0x00053c30

0004529c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   4529c:	2200      	movs	r2, #0
{
   4529e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   452a0:	2101      	movs	r1, #1
{
   452a2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   452a4:	4610      	mov	r0, r2
   452a6:	f7e7 fc23 	bl	2caf0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   452aa:	2000      	movs	r0, #0
   452ac:	f7e7 fbee 	bl	2ca8c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   452b0:	480f      	ldr	r0, [pc, #60]	; (452f0 <clk_init+0x54>)
   452b2:	f001 f9a7 	bl	46604 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   452b6:	4b0f      	ldr	r3, [pc, #60]	; (452f4 <clk_init+0x58>)
   452b8:	4298      	cmp	r0, r3
   452ba:	d115      	bne.n	452e8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   452bc:	f001 f9b2 	bl	46624 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   452c0:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   452c2:	490d      	ldr	r1, [pc, #52]	; (452f8 <clk_init+0x5c>)
   452c4:	4630      	mov	r0, r6
   452c6:	f004 ff72 	bl	4a1ae <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   452ca:	2800      	cmp	r0, #0
   452cc:	db0b      	blt.n	452e6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   452ce:	2501      	movs	r5, #1
   452d0:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   452d2:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   452d4:	4908      	ldr	r1, [pc, #32]	; (452f8 <clk_init+0x5c>)
   452d6:	f104 001c 	add.w	r0, r4, #28
   452da:	f004 ff68 	bl	4a1ae <onoff_manager_init>
		if (err < 0) {
   452de:	2800      	cmp	r0, #0
   452e0:	db01      	blt.n	452e6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   452e2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   452e4:	2000      	movs	r0, #0
}
   452e6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   452e8:	f06f 0004 	mvn.w	r0, #4
   452ec:	e7fb      	b.n	452e6 <clk_init+0x4a>
   452ee:	bf00      	nop
   452f0:	00045395 	.word	0x00045395
   452f4:	0bad0000 	.word	0x0bad0000
   452f8:	00053c40 	.word	0x00053c40

000452fc <clkstarted_handle.constprop.10>:
static void clkstarted_handle(const struct device *dev,
   452fc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   452fe:	230c      	movs	r3, #12
   45300:	4809      	ldr	r0, [pc, #36]	; (45328 <clkstarted_handle.constprop.10+0x2c>)
   45302:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   45304:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   45306:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   45308:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   4530c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   4530e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   45310:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   45312:	4418      	add	r0, r3
   45314:	f00b f850 	bl	503b8 <set_on_state>
	if (callback) {
   45318:	b12d      	cbz	r5, 45326 <clkstarted_handle.constprop.10+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   4531a:	4632      	mov	r2, r6
   4531c:	462b      	mov	r3, r5
   4531e:	4803      	ldr	r0, [pc, #12]	; (4532c <clkstarted_handle.constprop.10+0x30>)
}
   45320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   45324:	4718      	bx	r3
}
   45326:	bd70      	pop	{r4, r5, r6, pc}
   45328:	2000673c 	.word	0x2000673c
   4532c:	00051948 	.word	0x00051948

00045330 <generic_hfclk_start>:
{
   45330:	b508      	push	{r3, lr}
	__asm__ volatile(
   45332:	f04f 0320 	mov.w	r3, #32
   45336:	f3ef 8111 	mrs	r1, BASEPRI
   4533a:	f383 8812 	msr	BASEPRI_MAX, r3
   4533e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   45342:	4a12      	ldr	r2, [pc, #72]	; (4538c <generic_hfclk_start+0x5c>)
   45344:	6813      	ldr	r3, [r2, #0]
   45346:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   4534a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   4534e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   45350:	d00c      	beq.n	4536c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   45352:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   45356:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   4535a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   4535e:	f013 0301 	ands.w	r3, r3, #1
   45362:	d003      	beq.n	4536c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   45364:	480a      	ldr	r0, [pc, #40]	; (45390 <generic_hfclk_start+0x60>)
   45366:	f00b f827 	bl	503b8 <set_on_state>
			already_started = true;
   4536a:	2301      	movs	r3, #1
	__asm__ volatile(
   4536c:	f381 8811 	msr	BASEPRI, r1
   45370:	f3bf 8f6f 	isb	sy
	if (already_started) {
   45374:	b123      	cbz	r3, 45380 <generic_hfclk_start+0x50>
		clkstarted_handle(CLOCK_DEVICE,
   45376:	2000      	movs	r0, #0
}
   45378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   4537c:	f7ff bfbe 	b.w	452fc <clkstarted_handle.constprop.10>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   45380:	2001      	movs	r0, #1
}
   45382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   45386:	f001 b95b 	b.w	46640 <nrfx_clock_start>
   4538a:	bf00      	nop
   4538c:	2000678c 	.word	0x2000678c
   45390:	2000677c 	.word	0x2000677c

00045394 <clock_event_handler>:
	switch (event) {
   45394:	b110      	cbz	r0, 4539c <clock_event_handler+0x8>
   45396:	2801      	cmp	r0, #1
   45398:	d004      	beq.n	453a4 <clock_event_handler+0x10>
   4539a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   4539c:	4b03      	ldr	r3, [pc, #12]	; (453ac <clock_event_handler+0x18>)
   4539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   453a0:	075b      	lsls	r3, r3, #29
   453a2:	d101      	bne.n	453a8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   453a4:	f7ff bfaa 	b.w	452fc <clkstarted_handle.constprop.10>
}
   453a8:	4770      	bx	lr
   453aa:	bf00      	nop
   453ac:	2000673c 	.word	0x2000673c

000453b0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   453b0:	4b09      	ldr	r3, [pc, #36]	; (453d8 <generic_hfclk_stop+0x28>)
   453b2:	f3bf 8f5b 	dmb	ish
   453b6:	e853 2f00 	ldrex	r2, [r3]
   453ba:	f022 0102 	bic.w	r1, r2, #2
   453be:	e843 1000 	strex	r0, r1, [r3]
   453c2:	2800      	cmp	r0, #0
   453c4:	d1f7      	bne.n	453b6 <generic_hfclk_stop+0x6>
   453c6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   453ca:	07d3      	lsls	r3, r2, #31
   453cc:	d402      	bmi.n	453d4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   453ce:	2001      	movs	r0, #1
   453d0:	f001 b968 	b.w	466a4 <nrfx_clock_stop>
}
   453d4:	4770      	bx	lr
   453d6:	bf00      	nop
   453d8:	2000678c 	.word	0x2000678c

000453dc <api_blocking_start>:
{
   453dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   453de:	2200      	movs	r2, #0
   453e0:	2301      	movs	r3, #1
   453e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   453e6:	ab04      	add	r3, sp, #16
   453e8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   453ec:	4a09      	ldr	r2, [pc, #36]	; (45414 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   453ee:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   453f2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   453f4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   453f8:	f00b f817 	bl	5042a <api_start>
	if (err < 0) {
   453fc:	2800      	cmp	r0, #0
   453fe:	db05      	blt.n	4540c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   45400:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   45404:	2300      	movs	r3, #0
   45406:	4668      	mov	r0, sp
   45408:	f003 fa7c 	bl	48904 <z_impl_k_sem_take>
}
   4540c:	b007      	add	sp, #28
   4540e:	f85d fb04 	ldr.w	pc, [sp], #4
   45412:	bf00      	nop
   45414:	000503fd 	.word	0x000503fd

00045418 <z_nrf_clock_control_get_onoff>:
}
   45418:	4b02      	ldr	r3, [pc, #8]	; (45424 <z_nrf_clock_control_get_onoff+0xc>)
   4541a:	221c      	movs	r2, #28
	return &data->mgr[type];
   4541c:	b2c0      	uxtb	r0, r0
}
   4541e:	fb00 3002 	mla	r0, r0, r2, r3
   45422:	4770      	bx	lr
   45424:	2000673c 	.word	0x2000673c

00045428 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45428:	4b09      	ldr	r3, [pc, #36]	; (45450 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   4542a:	f3bf 8f5b 	dmb	ish
   4542e:	e853 2f00 	ldrex	r2, [r3]
   45432:	f042 0101 	orr.w	r1, r2, #1
   45436:	e843 1000 	strex	r0, r1, [r3]
   4543a:	2800      	cmp	r0, #0
   4543c:	d1f7      	bne.n	4542e <z_nrf_clock_bt_ctlr_hf_request+0x6>
   4543e:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   45442:	0793      	lsls	r3, r2, #30
   45444:	d402      	bmi.n	4544c <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   45446:	2001      	movs	r0, #1
   45448:	f001 b8fa 	b.w	46640 <nrfx_clock_start>
}
   4544c:	4770      	bx	lr
   4544e:	bf00      	nop
   45450:	2000678c 	.word	0x2000678c

00045454 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45454:	4b09      	ldr	r3, [pc, #36]	; (4547c <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   45456:	f3bf 8f5b 	dmb	ish
   4545a:	e853 2f00 	ldrex	r2, [r3]
   4545e:	f022 0101 	bic.w	r1, r2, #1
   45462:	e843 1000 	strex	r0, r1, [r3]
   45466:	2800      	cmp	r0, #0
   45468:	d1f7      	bne.n	4545a <z_nrf_clock_bt_ctlr_hf_release+0x6>
   4546a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   4546e:	0793      	lsls	r3, r2, #30
   45470:	d402      	bmi.n	45478 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   45472:	2001      	movs	r0, #1
   45474:	f001 b916 	b.w	466a4 <nrfx_clock_stop>
}
   45478:	4770      	bx	lr
   4547a:	bf00      	nop
   4547c:	2000678c 	.word	0x2000678c

00045480 <z_nrf_clock_control_lf_on>:
{
   45480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   45484:	493a      	ldr	r1, [pc, #232]	; (45570 <z_nrf_clock_control_lf_on+0xf0>)
   45486:	f3bf 8f5b 	dmb	ish
   4548a:	4605      	mov	r5, r0
   4548c:	2201      	movs	r2, #1
   4548e:	e851 3f00 	ldrex	r3, [r1]
   45492:	e841 2000 	strex	r0, r2, [r1]
   45496:	2800      	cmp	r0, #0
   45498:	d1f9      	bne.n	4548e <z_nrf_clock_control_lf_on+0xe>
   4549a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   4549e:	b933      	cbnz	r3, 454ae <z_nrf_clock_control_lf_on+0x2e>
   454a0:	4934      	ldr	r1, [pc, #208]	; (45574 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   454a2:	4835      	ldr	r0, [pc, #212]	; (45578 <z_nrf_clock_control_lf_on+0xf8>)
   454a4:	604b      	str	r3, [r1, #4]
   454a6:	60cb      	str	r3, [r1, #12]
   454a8:	608a      	str	r2, [r1, #8]
   454aa:	f004 fe93 	bl	4a1d4 <onoff_request>
	switch (start_mode) {
   454ae:	1e6b      	subs	r3, r5, #1
   454b0:	2b01      	cmp	r3, #1
   454b2:	d830      	bhi.n	45516 <z_nrf_clock_control_lf_on+0x96>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   454b4:	2d01      	cmp	r5, #1
   454b6:	d107      	bne.n	454c8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   454b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   454bc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   454c0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   454c4:	2b01      	cmp	r3, #1
   454c6:	d026      	beq.n	45516 <z_nrf_clock_control_lf_on+0x96>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   454c8:	f00b fceb 	bl	50ea2 <k_is_in_isr>
   454cc:	b918      	cbnz	r0, 454d6 <z_nrf_clock_control_lf_on+0x56>
	return !z_sys_post_kernel;
   454ce:	4b2b      	ldr	r3, [pc, #172]	; (4557c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   454d0:	781b      	ldrb	r3, [r3, #0]
   454d2:	2b00      	cmp	r3, #0
   454d4:	d143      	bne.n	4555e <z_nrf_clock_control_lf_on+0xde>
	__asm__ volatile(
   454d6:	f04f 0320 	mov.w	r3, #32
   454da:	f3ef 8911 	mrs	r9, BASEPRI
   454de:	f383 8812 	msr	BASEPRI_MAX, r3
   454e2:	f3bf 8f6f 	isb	sy
   454e6:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   454e8:	4e25      	ldr	r6, [pc, #148]	; (45580 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   454ea:	4f26      	ldr	r7, [pc, #152]	; (45584 <z_nrf_clock_control_lf_on+0x104>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   454ec:	f8df 8098 	ldr.w	r8, [pc, #152]	; 45588 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   454f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   454f4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   454f8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   454fc:	03d2      	lsls	r2, r2, #15
   454fe:	d50c      	bpl.n	4551a <z_nrf_clock_control_lf_on+0x9a>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   45500:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   45504:	2b01      	cmp	r3, #1
   45506:	d001      	beq.n	4550c <z_nrf_clock_control_lf_on+0x8c>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   45508:	2d01      	cmp	r5, #1
   4550a:	d106      	bne.n	4551a <z_nrf_clock_control_lf_on+0x9a>
	if (isr_mode) {
   4550c:	b30c      	cbz	r4, 45552 <z_nrf_clock_control_lf_on+0xd2>
	__asm__ volatile(
   4550e:	f389 8811 	msr	BASEPRI, r9
   45512:	f3bf 8f6f 	isb	sy
}
   45516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   4551a:	b1ac      	cbz	r4, 45548 <z_nrf_clock_control_lf_on+0xc8>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   4551c:	4648      	mov	r0, r9
   4551e:	f7e7 faab 	bl	2ca78 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   45522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   45526:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   4552a:	2b00      	cmp	r3, #0
   4552c:	d1e0      	bne.n	454f0 <z_nrf_clock_control_lf_on+0x70>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   4552e:	6831      	ldr	r1, [r6, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   45530:	2900      	cmp	r1, #0
   45532:	d0dd      	beq.n	454f0 <z_nrf_clock_control_lf_on+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   45534:	6033      	str	r3, [r6, #0]
   45536:	6833      	ldr	r3, [r6, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   45538:	2301      	movs	r3, #1
   4553a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   4553e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   45542:	f8c8 3000 	str.w	r3, [r8]
   45546:	e7d3      	b.n	454f0 <z_nrf_clock_control_lf_on+0x70>
	return z_impl_k_sleep(timeout);
   45548:	2100      	movs	r1, #0
   4554a:	2021      	movs	r0, #33	; 0x21
   4554c:	f003 fe9a 	bl	49284 <z_impl_k_sleep>
   45550:	e7e7      	b.n	45522 <z_nrf_clock_control_lf_on+0xa2>
    p_reg->INTENSET = mask;
   45552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   45556:	2202      	movs	r2, #2
   45558:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		__ASSERT_NO_MSG(false);
   4555c:	e7db      	b.n	45516 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENCLR = mask;
   4555e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   45562:	2202      	movs	r2, #2
   45564:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   45568:	4604      	mov	r4, r0
	int key = isr_mode ? irq_lock() : 0;
   4556a:	4681      	mov	r9, r0
   4556c:	e7bc      	b.n	454e8 <z_nrf_clock_control_lf_on+0x68>
   4556e:	bf00      	nop
   45570:	20006790 	.word	0x20006790
   45574:	2000672c 	.word	0x2000672c
   45578:	20006758 	.word	0x20006758
   4557c:	20006dac 	.word	0x20006dac
   45580:	40000104 	.word	0x40000104
   45584:	e000e100 	.word	0xe000e100
   45588:	40000008 	.word	0x40000008

0004558c <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   4558c:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   4558e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   45590:	d002      	beq.n	45598 <nrfx_gpio_handler+0xc>
   45592:	2b01      	cmp	r3, #1
   45594:	d015      	beq.n	455c2 <nrfx_gpio_handler+0x36>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
   45596:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   45598:	4e0b      	ldr	r6, [pc, #44]	; (455c8 <nrfx_gpio_handler+0x3c>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   4559a:	6933      	ldr	r3, [r6, #16]
   4559c:	6859      	ldr	r1, [r3, #4]
   4559e:	2900      	cmp	r1, #0
   455a0:	d0f9      	beq.n	45596 <nrfx_gpio_handler+0xa>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   455a2:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
   455a6:	2501      	movs	r5, #1
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   455a8:	680c      	ldr	r4, [r1, #0]
   455aa:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
   455ac:	688a      	ldr	r2, [r1, #8]
   455ae:	402a      	ands	r2, r5
   455b0:	d002      	beq.n	455b8 <nrfx_gpio_handler+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   455b2:	684b      	ldr	r3, [r1, #4]
   455b4:	4630      	mov	r0, r6
   455b6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   455b8:	2c00      	cmp	r4, #0
   455ba:	d0ec      	beq.n	45596 <nrfx_gpio_handler+0xa>
   455bc:	4621      	mov	r1, r4
   455be:	6824      	ldr	r4, [r4, #0]
   455c0:	e7f4      	b.n	455ac <nrfx_gpio_handler+0x20>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   455c2:	4e02      	ldr	r6, [pc, #8]	; (455cc <nrfx_gpio_handler+0x40>)
   455c4:	e7e9      	b.n	4559a <nrfx_gpio_handler+0xe>
   455c6:	bf00      	nop
   455c8:	00051964 	.word	0x00051964
   455cc:	00051980 	.word	0x00051980

000455d0 <gpio_nrfx_pin_interrupt_configure>:
{
   455d0:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   455d2:	6840      	ldr	r0, [r0, #4]
   455d4:	7b04      	ldrb	r4, [r0, #12]
   455d6:	f001 051f 	and.w	r5, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   455da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   455de:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   455e2:	b085      	sub	sp, #20
   455e4:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   455e8:	d104      	bne.n	455f4 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   455ea:	4628      	mov	r0, r5
   455ec:	f001 fafc 	bl	46be8 <nrfx_gpiote_trigger_disable>
	return 0;
   455f0:	2000      	movs	r0, #0
   455f2:	e031      	b.n	45658 <gpio_nrfx_pin_interrupt_configure+0x88>
	if (mode == GPIO_INT_MODE_LEVEL) {
   455f4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   455f8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   455fc:	d12e      	bne.n	4565c <gpio_nrfx_pin_interrupt_configure+0x8c>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   455fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   45602:	bf0c      	ite	eq
   45604:	2304      	moveq	r3, #4
   45606:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   45608:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   4560c:	6883      	ldr	r3, [r0, #8]
   4560e:	40cb      	lsrs	r3, r1
   45610:	07d9      	lsls	r1, r3, #31
   45612:	d42f      	bmi.n	45674 <gpio_nrfx_pin_interrupt_configure+0xa4>
   45614:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   45618:	d12c      	bne.n	45674 <gpio_nrfx_pin_interrupt_configure+0xa4>

    return pin_number >> 5;
   4561a:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   4561c:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   4561e:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   45622:	4a1d      	ldr	r2, [pc, #116]	; (45698 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   45624:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   45628:	bf18      	it	ne
   4562a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   4562e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   45632:	07db      	lsls	r3, r3, #31
   45634:	d41e      	bmi.n	45674 <gpio_nrfx_pin_interrupt_configure+0xa4>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   45636:	f10d 0407 	add.w	r4, sp, #7
   4563a:	4621      	mov	r1, r4
   4563c:	4628      	mov	r0, r5
   4563e:	f001 fa41 	bl	46ac4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   45642:	4b16      	ldr	r3, [pc, #88]	; (4569c <gpio_nrfx_pin_interrupt_configure+0xcc>)
   45644:	4298      	cmp	r0, r3
   45646:	d114      	bne.n	45672 <gpio_nrfx_pin_interrupt_configure+0xa2>
			err = nrfx_gpiote_channel_alloc(&ch);
   45648:	4620      	mov	r0, r4
   4564a:	f001 fa85 	bl	46b58 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   4564e:	4b14      	ldr	r3, [pc, #80]	; (456a0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   45650:	4298      	cmp	r0, r3
   45652:	d00e      	beq.n	45672 <gpio_nrfx_pin_interrupt_configure+0xa2>
				return -ENOMEM;
   45654:	f06f 000b 	mvn.w	r0, #11
}
   45658:	b005      	add	sp, #20
   4565a:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   4565c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   45660:	d005      	beq.n	4566e <gpio_nrfx_pin_interrupt_configure+0x9e>
   45662:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   45666:	bf0c      	ite	eq
   45668:	2302      	moveq	r3, #2
   4566a:	2301      	movne	r3, #1
   4566c:	e7cc      	b.n	45608 <gpio_nrfx_pin_interrupt_configure+0x38>
   4566e:	2303      	movs	r3, #3
   45670:	e7ca      	b.n	45608 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   45672:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   45674:	2300      	movs	r3, #0
   45676:	4619      	mov	r1, r3
   45678:	aa02      	add	r2, sp, #8
   4567a:	4628      	mov	r0, r5
   4567c:	f001 f8fc 	bl	46878 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   45680:	4b07      	ldr	r3, [pc, #28]	; (456a0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   45682:	4298      	cmp	r0, r3
   45684:	d104      	bne.n	45690 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   45686:	2101      	movs	r1, #1
   45688:	4628      	mov	r0, r5
   4568a:	f001 fa6b 	bl	46b64 <nrfx_gpiote_trigger_enable>
   4568e:	e7af      	b.n	455f0 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   45690:	f06f 0004 	mvn.w	r0, #4
   45694:	e7e0      	b.n	45658 <gpio_nrfx_pin_interrupt_configure+0x88>
   45696:	bf00      	nop
   45698:	50000300 	.word	0x50000300
   4569c:	0bad0004 	.word	0x0bad0004
   456a0:	0bad0000 	.word	0x0bad0000

000456a4 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   456a4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   456a6:	f001 fa47 	bl	46b38 <nrfx_gpiote_is_init>
   456aa:	4604      	mov	r4, r0
   456ac:	b968      	cbnz	r0, 456ca <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   456ae:	f001 fa1b 	bl	46ae8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   456b2:	4b08      	ldr	r3, [pc, #32]	; (456d4 <gpio_nrfx_init+0x30>)
   456b4:	4298      	cmp	r0, r3
   456b6:	d10a      	bne.n	456ce <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   456b8:	4621      	mov	r1, r4
   456ba:	4807      	ldr	r0, [pc, #28]	; (456d8 <gpio_nrfx_init+0x34>)
   456bc:	f001 f9fc 	bl	46ab8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   456c0:	4622      	mov	r2, r4
   456c2:	2105      	movs	r1, #5
   456c4:	2006      	movs	r0, #6
   456c6:	f7e7 fa13 	bl	2caf0 <z_arm_irq_priority_set>
		return 0;
   456ca:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   456cc:	bd10      	pop	{r4, pc}
		return -EIO;
   456ce:	f06f 0004 	mvn.w	r0, #4
   456d2:	e7fb      	b.n	456cc <gpio_nrfx_init+0x28>
   456d4:	0bad0000 	.word	0x0bad0000
   456d8:	0004558d 	.word	0x0004558d

000456dc <gpio_nrfx_pin_configure>:
{
   456dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   456e0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   456e2:	7b3b      	ldrb	r3, [r7, #12]
   456e4:	f001 051f 	and.w	r5, r1, #31
{
   456e8:	b085      	sub	sp, #20
   456ea:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   456ec:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   456f0:	4614      	mov	r4, r2
   456f2:	b9ca      	cbnz	r2, 45728 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   456f4:	a902      	add	r1, sp, #8
   456f6:	4628      	mov	r0, r5
   456f8:	f001 f9e4 	bl	46ac4 <nrfx_gpiote_channel_get>
   456fc:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   456fe:	4628      	mov	r0, r5
   45700:	f001 fa94 	bl	46c2c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   45704:	4b49      	ldr	r3, [pc, #292]	; (4582c <gpio_nrfx_pin_configure+0x150>)
   45706:	4298      	cmp	r0, r3
   45708:	d004      	beq.n	45714 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   4570a:	f06f 0004 	mvn.w	r0, #4
}
   4570e:	b005      	add	sp, #20
   45710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   45714:	4284      	cmp	r4, r0
   45716:	d105      	bne.n	45724 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   45718:	f89d 0008 	ldrb.w	r0, [sp, #8]
   4571c:	f001 fa16 	bl	46b4c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   45720:	42a0      	cmp	r0, r4
   45722:	d1f2      	bne.n	4570a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   45724:	2000      	movs	r0, #0
   45726:	e7f2      	b.n	4570e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   45728:	f04f 0800 	mov.w	r8, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   4572c:	f10d 0103 	add.w	r1, sp, #3
   45730:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   45732:	e9cd 8802 	strd	r8, r8, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   45736:	f001 f9c5 	bl	46ac4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   4573a:	4643      	mov	r3, r8
	err = nrfx_gpiote_channel_get(pin, &ch);
   4573c:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   4573e:	aa02      	add	r2, sp, #8
   45740:	4641      	mov	r1, r8
   45742:	4628      	mov	r0, r5
   45744:	f001 f898 	bl	46878 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   45748:	4b38      	ldr	r3, [pc, #224]	; (4582c <gpio_nrfx_pin_configure+0x150>)
   4574a:	4298      	cmp	r0, r3
   4574c:	d002      	beq.n	45754 <gpio_nrfx_pin_configure+0x78>
		err = -EINVAL;
   4574e:	f06f 0015 	mvn.w	r0, #21
   45752:	e7dc      	b.n	4570e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   45754:	4581      	cmp	r9, r0
   45756:	d103      	bne.n	45760 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   45758:	f89d 0003 	ldrb.w	r0, [sp, #3]
   4575c:	f001 f9f6 	bl	46b4c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   45760:	05a3      	lsls	r3, r4, #22
   45762:	d550      	bpl.n	45806 <gpio_nrfx_pin_configure+0x12a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   45764:	4b32      	ldr	r3, [pc, #200]	; (45830 <gpio_nrfx_pin_configure+0x154>)
   45766:	4023      	ands	r3, r4
   45768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   4576c:	d03a      	beq.n	457e4 <gpio_nrfx_pin_configure+0x108>
   4576e:	d828      	bhi.n	457c2 <gpio_nrfx_pin_configure+0xe6>
   45770:	2b02      	cmp	r3, #2
   45772:	d039      	beq.n	457e8 <gpio_nrfx_pin_configure+0x10c>
   45774:	2b06      	cmp	r3, #6
   45776:	d001      	beq.n	4577c <gpio_nrfx_pin_configure+0xa0>
   45778:	2b00      	cmp	r3, #0
   4577a:	d1e8      	bne.n	4574e <gpio_nrfx_pin_configure+0x72>
		nrfx_gpiote_output_config_t output_config = {
   4577c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   45780:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   45784:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   45788:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   4578a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   4578e:	bf54      	ite	pl
   45790:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   45794:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   45796:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   45798:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   4579c:	d52a      	bpl.n	457f4 <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   4579e:	687a      	ldr	r2, [r7, #4]
   457a0:	2301      	movs	r3, #1
   457a2:	fa03 f606 	lsl.w	r6, r3, r6
    p_reg->OUTSET = set_mask;
   457a6:	f8c2 6508 	str.w	r6, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   457aa:	2200      	movs	r2, #0
   457ac:	a901      	add	r1, sp, #4
   457ae:	4628      	mov	r0, r5
   457b0:	f001 f90e 	bl	469d0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   457b4:	4b1d      	ldr	r3, [pc, #116]	; (4582c <gpio_nrfx_pin_configure+0x150>)
   457b6:	4298      	cmp	r0, r3
   457b8:	bf14      	ite	ne
   457ba:	f06f 0015 	mvnne.w	r0, #21
   457be:	2000      	moveq	r0, #0
   457c0:	e7a5      	b.n	4570e <gpio_nrfx_pin_configure+0x32>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   457c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   457c6:	d011      	beq.n	457ec <gpio_nrfx_pin_configure+0x110>
   457c8:	d804      	bhi.n	457d4 <gpio_nrfx_pin_configure+0xf8>
   457ca:	4a1a      	ldr	r2, [pc, #104]	; (45834 <gpio_nrfx_pin_configure+0x158>)
   457cc:	4293      	cmp	r3, r2
   457ce:	d1be      	bne.n	4574e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0D1;
   457d0:	2307      	movs	r3, #7
   457d2:	e7d3      	b.n	4577c <gpio_nrfx_pin_configure+0xa0>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   457d4:	4a18      	ldr	r2, [pc, #96]	; (45838 <gpio_nrfx_pin_configure+0x15c>)
   457d6:	4293      	cmp	r3, r2
   457d8:	d00a      	beq.n	457f0 <gpio_nrfx_pin_configure+0x114>
   457da:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   457de:	d1b6      	bne.n	4574e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0H1;
   457e0:	2303      	movs	r3, #3
   457e2:	e7cb      	b.n	4577c <gpio_nrfx_pin_configure+0xa0>
		*drive = NRF_GPIO_PIN_H0S1;
   457e4:	2301      	movs	r3, #1
   457e6:	e7c9      	b.n	4577c <gpio_nrfx_pin_configure+0xa0>
		*drive = NRF_GPIO_PIN_D0S1;
   457e8:	2304      	movs	r3, #4
   457ea:	e7c7      	b.n	4577c <gpio_nrfx_pin_configure+0xa0>
		*drive = NRF_GPIO_PIN_S0H1;
   457ec:	2302      	movs	r3, #2
   457ee:	e7c5      	b.n	4577c <gpio_nrfx_pin_configure+0xa0>
		*drive = NRF_GPIO_PIN_D0H1;
   457f0:	2305      	movs	r3, #5
   457f2:	e7c3      	b.n	4577c <gpio_nrfx_pin_configure+0xa0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   457f4:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   457f6:	bf41      	itttt	mi
   457f8:	687a      	ldrmi	r2, [r7, #4]
   457fa:	2301      	movmi	r3, #1
   457fc:	fa03 f606 	lslmi.w	r6, r3, r6
    p_reg->OUTCLR = clr_mask;
   45800:	f8c2 650c 	strmi.w	r6, [r2, #1292]	; 0x50c
   45804:	e7d1      	b.n	457aa <gpio_nrfx_pin_configure+0xce>
	if (flags & GPIO_PULL_UP) {
   45806:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   45808:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   4580c:	bf54      	ite	pl
   4580e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   45812:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   45814:	461a      	mov	r2, r3
   45816:	a901      	add	r1, sp, #4
   45818:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   4581a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   4581e:	f001 f82b 	bl	46878 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   45822:	4b02      	ldr	r3, [pc, #8]	; (4582c <gpio_nrfx_pin_configure+0x150>)
   45824:	4298      	cmp	r0, r3
   45826:	f43f af7d 	beq.w	45724 <gpio_nrfx_pin_configure+0x48>
   4582a:	e790      	b.n	4574e <gpio_nrfx_pin_configure+0x72>
   4582c:	0bad0000 	.word	0x0bad0000
   45830:	00f00006 	.word	0x00f00006
   45834:	00100006 	.word	0x00100006
   45838:	00400002 	.word	0x00400002

0004583c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   4583c:	4b02      	ldr	r3, [pc, #8]	; (45848 <flash_nrf_pages_layout+0xc>)
   4583e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   45840:	2301      	movs	r3, #1
   45842:	6013      	str	r3, [r2, #0]
}
   45844:	4770      	bx	lr
   45846:	bf00      	nop
   45848:	200067ac 	.word	0x200067ac

0004584c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   4584c:	4800      	ldr	r0, [pc, #0]	; (45850 <flash_nrf_get_parameters+0x4>)
   4584e:	4770      	bx	lr
   45850:	00053ca4 	.word	0x00053ca4

00045854 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   45854:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   45856:	2201      	movs	r2, #1
   45858:	4611      	mov	r1, r2
   4585a:	4807      	ldr	r0, [pc, #28]	; (45878 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   4585c:	4c07      	ldr	r4, [pc, #28]	; (4587c <nrf_flash_init+0x28>)
   4585e:	f00b fc06 	bl	5106e <z_impl_k_sem_init>
	nrf_flash_sync_init();
   45862:	f000 f9cf 	bl	45c04 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   45866:	f00a ff72 	bl	5074e <nrfx_nvmc_flash_page_count_get>
   4586a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   4586c:	f00a ff6b 	bl	50746 <nrfx_nvmc_flash_page_size_get>
   45870:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   45872:	2000      	movs	r0, #0
   45874:	bd10      	pop	{r4, pc}
   45876:	bf00      	nop
   45878:	200067b4 	.word	0x200067b4
   4587c:	200067ac 	.word	0x200067ac

00045880 <restore_pofwarn.part.2>:
    uint32_t pofcon = p_reg->POFCON;
   45880:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   45884:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   45888:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   4588c:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   45890:	f023 031f 	bic.w	r3, r3, #31
   45894:	430b      	orrs	r3, r1
    pofcon |=
   45896:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   4589a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   4589e:	4b02      	ldr	r3, [pc, #8]	; (458a8 <restore_pofwarn.part.2+0x28>)
   458a0:	2200      	movs	r2, #0
   458a2:	701a      	strb	r2, [r3, #0]
	}
}
   458a4:	4770      	bx	lr
   458a6:	bf00      	nop
   458a8:	20006da5 	.word	0x20006da5

000458ac <suspend_pofwarn.part.1>:
    uint32_t pofcon = p_reg->POFCON;
   458ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   458b0:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
	if (enabled) {
   458b4:	f012 0001 	ands.w	r0, r2, #1
   458b8:	d01a      	beq.n	458f0 <suspend_pofwarn.part.1+0x44>
    uint32_t pofcon = p_reg->POFCON;
   458ba:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   458be:	4b0d      	ldr	r3, [pc, #52]	; (458f4 <suspend_pofwarn.part.1+0x48>)
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   458c0:	f020 001f 	bic.w	r0, r0, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   458c4:	f002 021e 	and.w	r2, r2, #30
    pofcon |=
   458c8:	4310      	orrs	r0, r2
    p_reg->POFCON = pofcon;
   458ca:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   458ce:	6818      	ldr	r0, [r3, #0]
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   458d0:	b158      	cbz	r0, 458ea <suspend_pofwarn.part.1+0x3e>
    uint32_t pofcon = p_reg->POFCON;
   458d2:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   458d6:	f023 031f 	bic.w	r3, r3, #31
   458da:	4313      	orrs	r3, r2
    pofcon |=
   458dc:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   458e0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			return -ECANCELED;
   458e4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   458e8:	4770      	bx	lr
		pofcon_enabled = enabled;
   458ea:	4b03      	ldr	r3, [pc, #12]	; (458f8 <suspend_pofwarn.part.1+0x4c>)
   458ec:	2201      	movs	r2, #1
   458ee:	701a      	strb	r2, [r3, #0]
}
   458f0:	4770      	bx	lr
   458f2:	bf00      	nop
   458f4:	40000108 	.word	0x40000108
   458f8:	20006da5 	.word	0x20006da5

000458fc <erase_op>:
{
   458fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45900:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   45902:	f00a ff20 	bl	50746 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   45906:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   45908:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
   4590a:	b10b      	cbz	r3, 45910 <erase_op+0x14>
		nrf_flash_sync_get_timestamp_begin();
   4590c:	f000 f98c 	bl	45c28 <nrf_flash_sync_get_timestamp_begin>
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   45910:	4f16      	ldr	r7, [pc, #88]	; (4596c <erase_op+0x70>)
	if (pofcon_enabled) {
   45912:	f8df 805c 	ldr.w	r8, [pc, #92]	; 45970 <erase_op+0x74>
{
   45916:	2500      	movs	r5, #0
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   45918:	683b      	ldr	r3, [r7, #0]
   4591a:	2b08      	cmp	r3, #8
   4591c:	d019      	beq.n	45952 <erase_op+0x56>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   4591e:	6860      	ldr	r0, [r4, #4]
   45920:	f001 fa90 	bl	46e44 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   45924:	68a3      	ldr	r3, [r4, #8]
   45926:	1b9b      	subs	r3, r3, r6
   45928:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   4592a:	6863      	ldr	r3, [r4, #4]
   4592c:	4433      	add	r3, r6
   4592e:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   45930:	f898 3000 	ldrb.w	r3, [r8]
   45934:	b10b      	cbz	r3, 4593a <erase_op+0x3e>
   45936:	f7ff ffa3 	bl	45880 <restore_pofwarn.part.2>
		if (e_ctx->enable_time_limit) {
   4593a:	7b23      	ldrb	r3, [r4, #12]
		i++;
   4593c:	3501      	adds	r5, #1
		if (e_ctx->enable_time_limit) {
   4593e:	b97b      	cbnz	r3, 45960 <erase_op+0x64>
	} while (e_ctx->len > 0);
   45940:	68a3      	ldr	r3, [r4, #8]
   45942:	2b00      	cmp	r3, #0
   45944:	d1e8      	bne.n	45918 <erase_op+0x1c>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   45946:	68a0      	ldr	r0, [r4, #8]
   45948:	3000      	adds	r0, #0
   4594a:	bf18      	it	ne
   4594c:	2001      	movne	r0, #1
}
   4594e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            {
                switch(var2)
   45952:	f7ff ffab 	bl	458ac <suspend_pofwarn.part.1>
		if (SUSPEND_POFWARN()) {
   45956:	2800      	cmp	r0, #0
   45958:	d0e1      	beq.n	4591e <erase_op+0x22>
			return -ECANCELED;
   4595a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   4595e:	e7f6      	b.n	4594e <erase_op+0x52>
			if (nrf_flash_sync_check_time_limit(i)) {
   45960:	4628      	mov	r0, r5
   45962:	f7e3 fa4d 	bl	28e00 <nrf_flash_sync_check_time_limit>
   45966:	2800      	cmp	r0, #0
   45968:	d0ea      	beq.n	45940 <erase_op+0x44>
   4596a:	e7ec      	b.n	45946 <erase_op+0x4a>
   4596c:	10000130 	.word	0x10000130
   45970:	20006da5 	.word	0x20006da5

00045974 <flash_nrf_erase>:
{
   45974:	b5f0      	push	{r4, r5, r6, r7, lr}
   45976:	b087      	sub	sp, #28
   45978:	460e      	mov	r6, r1
   4597a:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   4597c:	f00a fee3 	bl	50746 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   45980:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   45982:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   45984:	4630      	mov	r0, r6
   45986:	f00a fded 	bl	50564 <is_regular_addr_valid>
   4598a:	b3c8      	cbz	r0, 45a00 <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   4598c:	fbb6 f3f7 	udiv	r3, r6, r7
   45990:	fb07 6313 	mls	r3, r7, r3, r6
   45994:	bba3      	cbnz	r3, 45a00 <flash_nrf_erase+0x8c>
   45996:	fbb5 f4f7 	udiv	r4, r5, r7
   4599a:	fb07 5414 	mls	r4, r7, r4, r5
   4599e:	bb7c      	cbnz	r4, 45a00 <flash_nrf_erase+0x8c>
		if (!n_pages) {
   459a0:	42bd      	cmp	r5, r7
   459a2:	d322      	bcc.n	459ea <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   459a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   459a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   459ac:	4816      	ldr	r0, [pc, #88]	; (45a08 <flash_nrf_erase+0x94>)
   459ae:	f002 ffa9 	bl	48904 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   459b2:	f00a fdfe 	bl	505b2 <nrf_flash_sync_is_required>
   459b6:	ab02      	add	r3, sp, #8
   459b8:	4601      	mov	r1, r0
	struct flash_context context = {
   459ba:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   459bc:	b1c0      	cbz	r0, 459f0 <flash_nrf_erase+0x7c>
	struct flash_context context = {
   459be:	4621      	mov	r1, r4
   459c0:	4618      	mov	r0, r3
   459c2:	f006 fc9e 	bl	4c302 <memset>
   459c6:	2201      	movs	r2, #1
   459c8:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   459cc:	4a0f      	ldr	r2, [pc, #60]	; (45a0c <flash_nrf_erase+0x98>)
   459ce:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   459d2:	480f      	ldr	r0, [pc, #60]	; (45a10 <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   459d4:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   459d8:	f000 f91e 	bl	45c18 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   459dc:	4668      	mov	r0, sp
   459de:	f7e3 f98f 	bl	28d00 <nrf_flash_sync_exe>
	return	erase_op(&context);
   459e2:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   459e4:	4808      	ldr	r0, [pc, #32]	; (45a08 <flash_nrf_erase+0x94>)
   459e6:	f002 ff67 	bl	488b8 <z_impl_k_sem_give>
}
   459ea:	4620      	mov	r0, r4
   459ec:	b007      	add	sp, #28
   459ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   459f0:	4618      	mov	r0, r3
   459f2:	f006 fc86 	bl	4c302 <memset>
   459f6:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   459fa:	f7ff ff7f 	bl	458fc <erase_op>
   459fe:	e7f0      	b.n	459e2 <flash_nrf_erase+0x6e>
		return -EINVAL;
   45a00:	f06f 0415 	mvn.w	r4, #21
   45a04:	e7f1      	b.n	459ea <flash_nrf_erase+0x76>
   45a06:	bf00      	nop
   45a08:	200067b4 	.word	0x200067b4
   45a0c:	000458fd 	.word	0x000458fd
   45a10:	00015e64 	.word	0x00015e64

00045a14 <write_op>:
{
   45a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (w_ctx->enable_time_limit) {
   45a16:	7b03      	ldrb	r3, [r0, #12]
{
   45a18:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   45a1a:	b10b      	cbz	r3, 45a20 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   45a1c:	f000 f904 	bl	45c28 <nrf_flash_sync_get_timestamp_begin>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   45a20:	4e1c      	ldr	r6, [pc, #112]	; (45a94 <write_op+0x80>)
	if (pofcon_enabled) {
   45a22:	4f1d      	ldr	r7, [pc, #116]	; (45a98 <write_op+0x84>)
{
   45a24:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   45a26:	68a3      	ldr	r3, [r4, #8]
   45a28:	2b03      	cmp	r3, #3
   45a2a:	d806      	bhi.n	45a3a <write_op+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   45a2c:	4a1b      	ldr	r2, [pc, #108]	; (45a9c <write_op+0x88>)
   45a2e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   45a32:	07db      	lsls	r3, r3, #31
   45a34:	d5fb      	bpl.n	45a2e <write_op+0x1a>
	return FLASH_OP_DONE;
   45a36:	2000      	movs	r0, #0
}
   45a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (var1 == 0x08)
   45a3a:	6833      	ldr	r3, [r6, #0]
   45a3c:	2b08      	cmp	r3, #8
   45a3e:	d021      	beq.n	45a84 <write_op+0x70>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   45a40:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   45a42:	6860      	ldr	r0, [r4, #4]
   45a44:	6819      	ldr	r1, [r3, #0]
   45a46:	f001 fa1d 	bl	46e84 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   45a4a:	783b      	ldrb	r3, [r7, #0]
   45a4c:	b10b      	cbz	r3, 45a52 <write_op+0x3e>
   45a4e:	f7ff ff17 	bl	45880 <restore_pofwarn.part.2>
	w_ctx->flash_addr += shift;
   45a52:	6863      	ldr	r3, [r4, #4]
   45a54:	3304      	adds	r3, #4
   45a56:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   45a58:	6823      	ldr	r3, [r4, #0]
   45a5a:	3304      	adds	r3, #4
   45a5c:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   45a5e:	68a3      	ldr	r3, [r4, #8]
   45a60:	3b04      	subs	r3, #4
   45a62:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   45a64:	7b23      	ldrb	r3, [r4, #12]
		i++;
   45a66:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   45a68:	2b00      	cmp	r3, #0
   45a6a:	d0dc      	beq.n	45a26 <write_op+0x12>
			if (nrf_flash_sync_check_time_limit(i)) {
   45a6c:	4628      	mov	r0, r5
   45a6e:	f7e3 f9c7 	bl	28e00 <nrf_flash_sync_check_time_limit>
   45a72:	2800      	cmp	r0, #0
   45a74:	d0d7      	beq.n	45a26 <write_op+0x12>
   45a76:	4a09      	ldr	r2, [pc, #36]	; (45a9c <write_op+0x88>)
   45a78:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   45a7c:	07d9      	lsls	r1, r3, #31
   45a7e:	d5fb      	bpl.n	45a78 <write_op+0x64>
				return FLASH_OP_ONGOING;
   45a80:	2001      	movs	r0, #1
   45a82:	e7d9      	b.n	45a38 <write_op+0x24>
                switch(var2)
   45a84:	f7ff ff12 	bl	458ac <suspend_pofwarn.part.1>
		if (SUSPEND_POFWARN()) {
   45a88:	2800      	cmp	r0, #0
   45a8a:	d0d9      	beq.n	45a40 <write_op+0x2c>
			return -ECANCELED;
   45a8c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   45a90:	e7d2      	b.n	45a38 <write_op+0x24>
   45a92:	bf00      	nop
   45a94:	10000130 	.word	0x10000130
   45a98:	20006da5 	.word	0x20006da5
   45a9c:	4001e000 	.word	0x4001e000

00045aa0 <flash_nrf_write>:
{
   45aa0:	b570      	push	{r4, r5, r6, lr}
   45aa2:	460d      	mov	r5, r1
   45aa4:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   45aa6:	4619      	mov	r1, r3
   45aa8:	4628      	mov	r0, r5
{
   45aaa:	4616      	mov	r6, r2
   45aac:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   45aae:	f00a fd59 	bl	50564 <is_regular_addr_valid>
   45ab2:	b360      	cbz	r0, 45b0e <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   45ab4:	ea44 0305 	orr.w	r3, r4, r5
   45ab8:	079b      	lsls	r3, r3, #30
   45aba:	d128      	bne.n	45b0e <flash_nrf_write+0x6e>
	if (!len) {
   45abc:	b1f4      	cbz	r4, 45afc <flash_nrf_write+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   45abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45ac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   45ac6:	4813      	ldr	r0, [pc, #76]	; (45b14 <flash_nrf_write+0x74>)
   45ac8:	f002 ff1c 	bl	48904 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   45acc:	f00a fd71 	bl	505b2 <nrf_flash_sync_is_required>
   45ad0:	ab02      	add	r3, sp, #8
	struct flash_context context = {
   45ad2:	e9cd 6502 	strd	r6, r5, [sp, #8]
   45ad6:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   45ad8:	b198      	cbz	r0, 45b02 <flash_nrf_write+0x62>
	struct flash_context context = {
   45ada:	2201      	movs	r2, #1
   45adc:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   45ae0:	4a0d      	ldr	r2, [pc, #52]	; (45b18 <flash_nrf_write+0x78>)
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   45ae2:	f641 504c 	movw	r0, #7500	; 0x1d4c
	struct flash_op_desc flash_op_desc = {
   45ae6:	e9cd 2300 	strd	r2, r3, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   45aea:	f000 f895 	bl	45c18 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   45aee:	4668      	mov	r0, sp
   45af0:	f7e3 f906 	bl	28d00 <nrf_flash_sync_exe>
	return write_op(&context);
   45af4:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   45af6:	4807      	ldr	r0, [pc, #28]	; (45b14 <flash_nrf_write+0x74>)
   45af8:	f002 fede 	bl	488b8 <z_impl_k_sem_give>
}
   45afc:	4620      	mov	r0, r4
   45afe:	b006      	add	sp, #24
   45b00:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   45b02:	f88d 0014 	strb.w	r0, [sp, #20]
	return write_op(&context);
   45b06:	4618      	mov	r0, r3
   45b08:	f7ff ff84 	bl	45a14 <write_op>
   45b0c:	e7f2      	b.n	45af4 <flash_nrf_write+0x54>
		return -EINVAL;
   45b0e:	f06f 0415 	mvn.w	r4, #21
   45b12:	e7f3      	b.n	45afc <flash_nrf_write+0x5c>
   45b14:	200067b4 	.word	0x200067b4
   45b18:	00045a15 	.word	0x00045a15

00045b1c <time_slot_callback_work>:
{
   45b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   45b1e:	9b07      	ldr	r3, [sp, #28]
	rc = op_desc->handler(op_desc->context);
   45b20:	e9d3 2000 	ldrd	r2, r0, [r3]
   45b24:	4790      	blx	r2
	if (rc != FLASH_OP_ONGOING) {
   45b26:	2801      	cmp	r0, #1
	rc = op_desc->handler(op_desc->context);
   45b28:	4604      	mov	r4, r0
	if (rc != FLASH_OP_ONGOING) {
   45b2a:	d013      	beq.n	45b54 <time_slot_callback_work+0x38>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   45b2c:	f10d 010f 	add.w	r1, sp, #15
   45b30:	f10d 000e 	add.w	r0, sp, #14
   45b34:	f7f2 f8f8 	bl	37d28 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   45b38:	2300      	movs	r3, #0
   45b3a:	9300      	str	r3, [sp, #0]
   45b3c:	4619      	mov	r1, r3
   45b3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   45b42:	f89d 000e 	ldrb.w	r0, [sp, #14]
   45b46:	f7ef fe15 	bl	35774 <ticker_stop>
		_ticker_sync_context.result = (rc == FLASH_OP_DONE) ? 0 : rc;
   45b4a:	4b03      	ldr	r3, [pc, #12]	; (45b58 <time_slot_callback_work+0x3c>)
   45b4c:	60dc      	str	r4, [r3, #12]
   45b4e:	4803      	ldr	r0, [pc, #12]	; (45b5c <time_slot_callback_work+0x40>)
   45b50:	f002 feb2 	bl	488b8 <z_impl_k_sem_give>
}
   45b54:	b004      	add	sp, #16
   45b56:	bd10      	pop	{r4, pc}
   45b58:	200067cc 	.word	0x200067cc
   45b5c:	200067dc 	.word	0x200067dc

00045b60 <time_slot_delay>:
{
   45b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45b64:	b08c      	sub	sp, #48	; 0x30
   45b66:	4605      	mov	r5, r0
   45b68:	460e      	mov	r6, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   45b6a:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   45b6e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   45b72:	4617      	mov	r7, r2
   45b74:	4698      	mov	r8, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   45b76:	f7f2 f8d7 	bl	37d28 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index, /* Radio instance ticker */
   45b7a:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   45b7e:	9600      	str	r6, [sp, #0]
   45b80:	2400      	movs	r4, #0
   45b82:	3101      	adds	r1, #1
   45b84:	462b      	mov	r3, r5
   45b86:	b2ca      	uxtb	r2, r1
   45b88:	e9cd 4407 	strd	r4, r4, [sp, #28]
   45b8c:	e9cd 7805 	strd	r7, r8, [sp, #20]
   45b90:	e9cd 4403 	strd	r4, r4, [sp, #12]
   45b94:	e9cd 4401 	strd	r4, r4, [sp, #4]
   45b98:	2101      	movs	r1, #1
   45b9a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   45b9e:	f7ef fd5f 	bl	35660 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   45ba2:	f030 0302 	bics.w	r3, r0, #2
   45ba6:	d00d      	beq.n	45bc4 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   45ba8:	4b08      	ldr	r3, [pc, #32]	; (45bcc <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   45baa:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   45bae:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   45bb0:	4621      	mov	r1, r4
   45bb2:	9400      	str	r4, [sp, #0]
   45bb4:	4623      	mov	r3, r4
   45bb6:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   45bba:	f7ef fddb 	bl	35774 <ticker_stop>
   45bbe:	4804      	ldr	r0, [pc, #16]	; (45bd0 <time_slot_delay+0x70>)
   45bc0:	f002 fe7a 	bl	488b8 <z_impl_k_sem_give>
}
   45bc4:	b00c      	add	sp, #48	; 0x30
   45bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   45bca:	bf00      	nop
   45bcc:	200067cc 	.word	0x200067cc
   45bd0:	200067dc 	.word	0x200067dc

00045bd4 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   45bd4:	9b01      	ldr	r3, [sp, #4]
   45bd6:	4a02      	ldr	r2, [pc, #8]	; (45be0 <time_slot_callback_prepare+0xc>)
   45bd8:	2131      	movs	r1, #49	; 0x31
   45bda:	f7ff bfc1 	b.w	45b60 <time_slot_delay>
   45bde:	bf00      	nop
   45be0:	00045be5 	.word	0x00045be5

00045be4 <time_slot_callback_abort>:
{
   45be4:	b570      	push	{r4, r5, r6, lr}
   45be6:	9d05      	ldr	r5, [sp, #20]
   45be8:	4604      	mov	r4, r0
	ll_radio_state_abort();
   45bea:	f7f2 f8a3 	bl	37d34 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   45bee:	462b      	mov	r3, r5
   45bf0:	4620      	mov	r0, r4
   45bf2:	4a03      	ldr	r2, [pc, #12]	; (45c00 <time_slot_callback_abort+0x1c>)
   45bf4:	2106      	movs	r1, #6
}
   45bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   45bfa:	f7ff bfb1 	b.w	45b60 <time_slot_delay>
   45bfe:	bf00      	nop
   45c00:	00045b1d 	.word	0x00045b1d

00045c04 <nrf_flash_sync_init>:
{
   45c04:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   45c06:	2201      	movs	r2, #1
   45c08:	2100      	movs	r1, #0
   45c0a:	4802      	ldr	r0, [pc, #8]	; (45c14 <nrf_flash_sync_init+0x10>)
   45c0c:	f00b fa2f 	bl	5106e <z_impl_k_sem_init>
}
   45c10:	2000      	movs	r0, #0
   45c12:	bd08      	pop	{r3, pc}
   45c14:	200067dc 	.word	0x200067dc

00045c18 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   45c18:	4b02      	ldr	r3, [pc, #8]	; (45c24 <nrf_flash_sync_set_context+0xc>)
   45c1a:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   45c1e:	e9c3 2000 	strd	r2, r0, [r3]
}
   45c22:	4770      	bx	lr
   45c24:	200067cc 	.word	0x200067cc

00045c28 <nrf_flash_sync_get_timestamp_begin>:
{
   45c28:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   45c2a:	f7ef fe4b 	bl	358c4 <ticker_ticks_now_get>
   45c2e:	4b01      	ldr	r3, [pc, #4]	; (45c34 <nrf_flash_sync_get_timestamp_begin+0xc>)
   45c30:	6098      	str	r0, [r3, #8]
}
   45c32:	bd08      	pop	{r3, pc}
   45c34:	200067cc 	.word	0x200067cc

00045c38 <random_byte_get>:
	__asm__ volatile(
   45c38:	f04f 0320 	mov.w	r3, #32
   45c3c:	f3ef 8211 	mrs	r2, BASEPRI
   45c40:	f383 8812 	msr	BASEPRI_MAX, r3
   45c44:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   45c48:	4b08      	ldr	r3, [pc, #32]	; (45c6c <random_byte_get+0x34>)
   45c4a:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   45c4c:	b159      	cbz	r1, 45c66 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   45c4e:	4908      	ldr	r1, [pc, #32]	; (45c70 <random_byte_get+0x38>)
   45c50:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45c54:	2100      	movs	r1, #0
   45c56:	6019      	str	r1, [r3, #0]
   45c58:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   45c5a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   45c5c:	f382 8811 	msr	BASEPRI, r2
   45c60:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   45c64:	4770      	bx	lr
	int retval = -EAGAIN;
   45c66:	f06f 000a 	mvn.w	r0, #10
   45c6a:	e7f7      	b.n	45c5c <random_byte_get+0x24>
   45c6c:	4000d100 	.word	0x4000d100
   45c70:	4000d000 	.word	0x4000d000

00045c74 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   45c74:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t last  = rngp->last;
   45c76:	7883      	ldrb	r3, [r0, #2]
	uint32_t mask  = rngp->mask;
   45c78:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   45c7a:	f04f 0420 	mov.w	r4, #32
   45c7e:	f3ef 8e11 	mrs	lr, BASEPRI
   45c82:	f384 8812 	msr	BASEPRI_MAX, r4
   45c86:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   45c8a:	7806      	ldrb	r6, [r0, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   45c8c:	f890 c001 	ldrb.w	ip, [r0, #1]

	available = (last - first) & mask;
   45c90:	1b9b      	subs	r3, r3, r6
   45c92:	403b      	ands	r3, r7
	if (available < len) {
   45c94:	429a      	cmp	r2, r3
		len = available;
   45c96:	bf88      	it	hi
   45c98:	b29a      	uxthhi	r2, r3

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   45c9a:	18b4      	adds	r4, r6, r2
   45c9c:	403c      	ands	r4, r7
	first = rngp->first_alloc;
   45c9e:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   45ca0:	7004      	strb	r4, [r0, #0]
	__asm__ volatile(
   45ca2:	f38e 8811 	msr	BASEPRI, lr
   45ca6:	f3bf 8f6f 	isb	sy
   45caa:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   45cac:	460c      	mov	r4, r1
	irq_unlock(key);

	while (likely(len--)) {
   45cae:	42a2      	cmp	r2, r4
   45cb0:	d11a      	bne.n	45ce8 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   45cb2:	4566      	cmp	r6, ip
   45cb4:	d10d      	bne.n	45cd2 <rng_pool_get+0x5e>
	__asm__ volatile(
   45cb6:	f04f 0520 	mov.w	r5, #32
   45cba:	f3ef 8211 	mrs	r2, BASEPRI
   45cbe:	f385 8812 	msr	BASEPRI_MAX, r5
   45cc2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   45cc6:	7805      	ldrb	r5, [r0, #0]
   45cc8:	7045      	strb	r5, [r0, #1]
	__asm__ volatile(
   45cca:	f382 8811 	msr	BASEPRI, r2
   45cce:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   45cd2:	1a64      	subs	r4, r4, r1
   45cd4:	b2a2      	uxth	r2, r4
	available = available - len;
	if (available <= rngp->threshold) {
   45cd6:	7901      	ldrb	r1, [r0, #4]
	available = available - len;
   45cd8:	1a9c      	subs	r4, r3, r2
	if (available <= rngp->threshold) {
   45cda:	42a1      	cmp	r1, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   45cdc:	bf22      	ittt	cs
   45cde:	4b07      	ldrcs	r3, [pc, #28]	; (45cfc <rng_pool_get+0x88>)
   45ce0:	2101      	movcs	r1, #1
   45ce2:	6019      	strcs	r1, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   45ce4:	4610      	mov	r0, r2
   45ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   45ce8:	eb00 0e05 	add.w	lr, r0, r5
		first = (first + 1) & mask;
   45cec:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   45cee:	f89e e005 	ldrb.w	lr, [lr, #5]
   45cf2:	f804 eb01 	strb.w	lr, [r4], #1
		first = (first + 1) & mask;
   45cf6:	403d      	ands	r5, r7
   45cf8:	e7d9      	b.n	45cae <rng_pool_get+0x3a>
   45cfa:	bf00      	nop
   45cfc:	4000d000 	.word	0x4000d000

00045d00 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   45d00:	07db      	lsls	r3, r3, #31
{
   45d02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   45d06:	4689      	mov	r9, r1
   45d08:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   45d0a:	d404      	bmi.n	45d16 <entropy_nrf5_get_entropy_isr+0x16>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   45d0c:	4822      	ldr	r0, [pc, #136]	; (45d98 <entropy_nrf5_get_entropy_isr+0x98>)
   45d0e:	f7ff ffb1 	bl	45c74 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   45d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   45d16:	2a00      	cmp	r2, #0
   45d18:	d035      	beq.n	45d86 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   45d1a:	f04f 0320 	mov.w	r3, #32
   45d1e:	f3ef 8511 	mrs	r5, BASEPRI
   45d22:	f383 8812 	msr	BASEPRI_MAX, r3
   45d26:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   45d2a:	200d      	movs	r0, #13
   45d2c:	f7e6 fed2 	bl	2cad4 <arch_irq_is_enabled>
   45d30:	4680      	mov	r8, r0
		irq_disable(IRQN);
   45d32:	200d      	movs	r0, #13
   45d34:	f7e6 feba 	bl	2caac <arch_irq_disable>
	__asm__ volatile(
   45d38:	f385 8811 	msr	BASEPRI, r5
   45d3c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45d40:	4916      	ldr	r1, [pc, #88]	; (45d9c <entropy_nrf5_get_entropy_isr+0x9c>)
   45d42:	4e17      	ldr	r6, [pc, #92]	; (45da0 <entropy_nrf5_get_entropy_isr+0xa0>)
   45d44:	2300      	movs	r3, #0
   45d46:	600b      	str	r3, [r1, #0]
   45d48:	680b      	ldr	r3, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   45d4a:	4b16      	ldr	r3, [pc, #88]	; (45da4 <entropy_nrf5_get_entropy_isr+0xa4>)
   45d4c:	2201      	movs	r2, #1
   45d4e:	f44f 5700 	mov.w	r7, #8192	; 0x2000
   45d52:	601a      	str	r2, [r3, #0]
   45d54:	4625      	mov	r5, r4
   45d56:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   45d5a:	468a      	mov	sl, r1
   45d5c:	f8da 3000 	ldr.w	r3, [sl]
			while (!nrf_rng_event_check(NRF_RNG,
   45d60:	b19b      	cbz	r3, 45d8a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   45d62:	f7ff ff69 	bl	45c38 <random_byte_get>
			if (byte < 0) {
   45d66:	2800      	cmp	r0, #0
   45d68:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
   45d6c:	dbf6      	blt.n	45d5c <entropy_nrf5_get_entropy_isr+0x5c>
   45d6e:	3d01      	subs	r5, #1
   45d70:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   45d72:	f809 0005 	strb.w	r0, [r9, r5]
		} while (len);
   45d76:	2d00      	cmp	r5, #0
   45d78:	d1f0      	bne.n	45d5c <entropy_nrf5_get_entropy_isr+0x5c>
		if (irq_enabled) {
   45d7a:	f1b8 0f00 	cmp.w	r8, #0
   45d7e:	d002      	beq.n	45d86 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   45d80:	200d      	movs	r0, #13
   45d82:	f7e6 fe83 	bl	2ca8c <arch_irq_enable>
	return cnt;
   45d86:	4620      	mov	r0, r4
   45d88:	e7c3      	b.n	45d12 <entropy_nrf5_get_entropy_isr+0x12>
   45d8a:	f3bf 8f4f 	dsb	sy
				__WFE();
   45d8e:	bf20      	wfe
				__SEV();
   45d90:	bf40      	sev
				__WFE();
   45d92:	bf20      	wfe
   45d94:	e7e2      	b.n	45d5c <entropy_nrf5_get_entropy_isr+0x5c>
   45d96:	bf00      	nop
   45d98:	20006824 	.word	0x20006824
   45d9c:	4000d100 	.word	0x4000d100
   45da0:	e000e100 	.word	0xe000e100
   45da4:	4000d000 	.word	0x4000d000

00045da8 <entropy_nrf5_get_entropy>:
{
   45da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   45dac:	4d13      	ldr	r5, [pc, #76]	; (45dfc <entropy_nrf5_get_entropy+0x54>)
   45dae:	460e      	mov	r6, r1
   45db0:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   45db2:	f105 0845 	add.w	r8, r5, #69	; 0x45
   45db6:	f105 0918 	add.w	r9, r5, #24
	while (len) {
   45dba:	b914      	cbnz	r4, 45dc2 <entropy_nrf5_get_entropy+0x1a>
}
   45dbc:	4620      	mov	r0, r4
   45dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   45dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   45dca:	4628      	mov	r0, r5
   45dcc:	f002 fd9a 	bl	48904 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   45dd0:	4622      	mov	r2, r4
   45dd2:	4631      	mov	r1, r6
   45dd4:	4640      	mov	r0, r8
   45dd6:	f7ff ff4d 	bl	45c74 <rng_pool_get>
   45dda:	4607      	mov	r7, r0
	z_impl_k_sem_give(sem);
   45ddc:	4628      	mov	r0, r5
   45dde:	f002 fd6b 	bl	488b8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   45de2:	b93f      	cbnz	r7, 45df4 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   45de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   45de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   45dec:	4648      	mov	r0, r9
   45dee:	f002 fd89 	bl	48904 <z_impl_k_sem_take>
			continue;
   45df2:	e7e2      	b.n	45dba <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   45df4:	1be4      	subs	r4, r4, r7
   45df6:	b2a4      	uxth	r4, r4
		buf += bytes;
   45df8:	443e      	add	r6, r7
   45dfa:	e7de      	b.n	45dba <entropy_nrf5_get_entropy+0x12>
   45dfc:	200067f4 	.word	0x200067f4

00045e00 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   45e00:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   45e02:	4c19      	ldr	r4, [pc, #100]	; (45e68 <entropy_nrf5_init+0x68>)
   45e04:	2201      	movs	r2, #1
   45e06:	4611      	mov	r1, r2
   45e08:	4620      	mov	r0, r4
   45e0a:	f00b f930 	bl	5106e <z_impl_k_sem_init>
   45e0e:	2201      	movs	r2, #1
   45e10:	2100      	movs	r1, #0
   45e12:	f104 0018 	add.w	r0, r4, #24
   45e16:	f00b f92a 	bl	5106e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   45e1a:	f240 4307 	movw	r3, #1031	; 0x407
   45e1e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   45e22:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   45e26:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   45e28:	230c      	movs	r3, #12
   45e2a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   45e2e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   45e30:	4b0e      	ldr	r3, [pc, #56]	; (45e6c <entropy_nrf5_init+0x6c>)
   45e32:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   45e36:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   45e3a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   45e3e:	f042 0201 	orr.w	r2, r2, #1
   45e42:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45e46:	4a0a      	ldr	r2, [pc, #40]	; (45e70 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   45e48:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   45e4a:	6015      	str	r5, [r2, #0]
   45e4c:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   45e4e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   45e52:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   45e54:	6019      	str	r1, [r3, #0]
   45e56:	200d      	movs	r0, #13
   45e58:	f7e6 fe4a 	bl	2caf0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   45e5c:	200d      	movs	r0, #13
   45e5e:	f7e6 fe15 	bl	2ca8c <arch_irq_enable>

	return 0;
}
   45e62:	4628      	mov	r0, r5
   45e64:	bd38      	pop	{r3, r4, r5, pc}
   45e66:	bf00      	nop
   45e68:	200067f4 	.word	0x200067f4
   45e6c:	4000d000 	.word	0x4000d000
   45e70:	4000d100 	.word	0x4000d100

00045e74 <isr>:
{
   45e74:	b510      	push	{r4, lr}
	byte = random_byte_get();
   45e76:	f7ff fedf 	bl	45c38 <random_byte_get>
	if (byte < 0) {
   45e7a:	2800      	cmp	r0, #0
   45e7c:	db20      	blt.n	45ec0 <isr+0x4c>
	uint8_t last  = rngp->last;
   45e7e:	4b17      	ldr	r3, [pc, #92]	; (45edc <isr+0x68>)
   45e80:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   45e84:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   45e88:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   45e8c:	1a51      	subs	r1, r2, r1
   45e8e:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   45e92:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   45e94:	d10d      	bne.n	45eb2 <isr+0x3e>
	uint8_t last  = rngp->last;
   45e96:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   45e9a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   45e9e:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   45ea2:	1a51      	subs	r1, r2, r1
   45ea4:	ea34 0101 	bics.w	r1, r4, r1
   45ea8:	d10b      	bne.n	45ec2 <isr+0x4e>
   45eaa:	4b0d      	ldr	r3, [pc, #52]	; (45ee0 <isr+0x6c>)
   45eac:	2201      	movs	r2, #1
   45eae:	601a      	str	r2, [r3, #0]
   45eb0:	e00e      	b.n	45ed0 <isr+0x5c>
	rngp->buffer[last] = byte;
   45eb2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   45eb4:	3201      	adds	r2, #1
   45eb6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   45eb8:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   45ebc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   45ec0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   45ec2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   45ec4:	3201      	adds	r2, #1
   45ec6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   45ec8:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   45ecc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   45ed0:	4804      	ldr	r0, [pc, #16]	; (45ee4 <isr+0x70>)
}
   45ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   45ed6:	f002 bcef 	b.w	488b8 <z_impl_k_sem_give>
   45eda:	bf00      	nop
   45edc:	200067f4 	.word	0x200067f4
   45ee0:	4000d004 	.word	0x4000d004
   45ee4:	2000680c 	.word	0x2000680c

00045ee8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   45ee8:	491d      	ldr	r1, [pc, #116]	; (45f60 <sys_clock_timeout_handler+0x78>)
{
   45eea:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
   45eee:	4605      	mov	r5, r0
	return absolute_time & COUNTER_MAX;
   45ef0:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   45ef4:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   45ef6:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   45efa:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   45efe:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   45f00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   45f04:	f04f 0400 	mov.w	r4, #0
   45f08:	d20d      	bcs.n	45f26 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   45f0a:	4b16      	ldr	r3, [pc, #88]	; (45f64 <sys_clock_timeout_handler+0x7c>)
   45f0c:	6819      	ldr	r1, [r3, #0]
   45f0e:	ea4f 6b01 	mov.w	fp, r1, lsl #24
   45f12:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   45f16:	eb1b 0206 	adds.w	r2, fp, r6
   45f1a:	4913      	ldr	r1, [pc, #76]	; (45f68 <sys_clock_timeout_handler+0x80>)
   45f1c:	f14c 0300 	adc.w	r3, ip, #0
   45f20:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   45f24:	2401      	movs	r4, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   45f26:	f003 fb31 	bl	4958c <sys_clock_announce>
   45f2a:	00ab      	lsls	r3, r5, #2
   45f2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   45f30:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   45f34:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   45f38:	42b2      	cmp	r2, r6
   45f3a:	d10e      	bne.n	45f5a <sys_clock_timeout_handler+0x72>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   45f3c:	b91c      	cbnz	r4, 45f46 <sys_clock_timeout_handler+0x5e>
    p_reg->CC[ch] = cc_val;
   45f3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   45f42:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   45f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   45f4a:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->EVTENSET = mask;
   45f4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   45f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   45f56:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   45f5a:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
   45f5e:	bf00      	nop
   45f60:	20003a00 	.word	0x20003a00
   45f64:	20006850 	.word	0x20006850
   45f68:	200039e8 	.word	0x200039e8

00045f6c <compare_int_lock>:
{
   45f6c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   45f6e:	2301      	movs	r3, #1
   45f70:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   45f72:	490f      	ldr	r1, [pc, #60]	; (45fb0 <compare_int_lock+0x44>)
   45f74:	f3bf 8f5b 	dmb	ish
   45f78:	43da      	mvns	r2, r3
   45f7a:	e851 4f00 	ldrex	r4, [r1]
   45f7e:	ea04 0c02 	and.w	ip, r4, r2
   45f82:	e841 ce00 	strex	lr, ip, [r1]
   45f86:	f1be 0f00 	cmp.w	lr, #0
   45f8a:	d1f6      	bne.n	45f7a <compare_int_lock+0xe>
   45f8c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
   45f90:	4908      	ldr	r1, [pc, #32]	; (45fb4 <compare_int_lock+0x48>)
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   45f92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   45f96:	4082      	lsls	r2, r0
   45f98:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   45f9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   45fa0:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   45fa4:	4223      	tst	r3, r4
}
   45fa6:	bf14      	ite	ne
   45fa8:	2001      	movne	r0, #1
   45faa:	2000      	moveq	r0, #0
   45fac:	bd10      	pop	{r4, pc}
   45fae:	bf00      	nop
   45fb0:	2000684c 	.word	0x2000684c
   45fb4:	40011000 	.word	0x40011000

00045fb8 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   45fb8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45fba:	4a11      	ldr	r2, [pc, #68]	; (46000 <compare_int_unlock.part.0+0x48>)
   45fbc:	f3bf 8f5b 	dmb	ish
   45fc0:	4083      	lsls	r3, r0
   45fc2:	e852 1f00 	ldrex	r1, [r2]
   45fc6:	4319      	orrs	r1, r3
   45fc8:	e842 1c00 	strex	ip, r1, [r2]
   45fcc:	f1bc 0f00 	cmp.w	ip, #0
   45fd0:	d1f7      	bne.n	45fc2 <compare_int_unlock.part.0+0xa>
   45fd2:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   45fd6:	4a0b      	ldr	r2, [pc, #44]	; (46004 <compare_int_unlock.part.0+0x4c>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   45fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   45fdc:	4083      	lsls	r3, r0
   45fde:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   45fe2:	4b09      	ldr	r3, [pc, #36]	; (46008 <compare_int_unlock.part.0+0x50>)
   45fe4:	f3bf 8f5b 	dmb	ish
   45fe8:	681b      	ldr	r3, [r3, #0]
   45fea:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   45fee:	40c3      	lsrs	r3, r0
   45ff0:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   45ff2:	bf42      	ittt	mi
   45ff4:	4b05      	ldrmi	r3, [pc, #20]	; (4600c <compare_int_unlock.part.0+0x54>)
   45ff6:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   45ffa:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   45ffe:	4770      	bx	lr
   46000:	2000684c 	.word	0x2000684c
   46004:	40011000 	.word	0x40011000
   46008:	20006848 	.word	0x20006848
   4600c:	e000e100 	.word	0xe000e100

00046010 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   46010:	4b10      	ldr	r3, [pc, #64]	; (46054 <z_nrf_rtc_timer_read+0x44>)
   46012:	681b      	ldr	r3, [r3, #0]
{
   46014:	e92d 4800 	stmdb	sp!, {fp, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   46018:	0a19      	lsrs	r1, r3, #8
   4601a:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   4601c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   46020:	4b0d      	ldr	r3, [pc, #52]	; (46058 <z_nrf_rtc_timer_read+0x48>)
   46022:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   46026:	eb10 0b03 	adds.w	fp, r0, r3
   4602a:	f141 0c00 	adc.w	ip, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   4602e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   46032:	d20a      	bcs.n	4604a <z_nrf_rtc_timer_read+0x3a>
		if (val < anchor) {
   46034:	4b09      	ldr	r3, [pc, #36]	; (4605c <z_nrf_rtc_timer_read+0x4c>)
   46036:	e9d3 2300 	ldrd	r2, r3, [r3]
   4603a:	459c      	cmp	ip, r3
   4603c:	bf08      	it	eq
   4603e:	4593      	cmpeq	fp, r2
   46040:	d203      	bcs.n	4604a <z_nrf_rtc_timer_read+0x3a>
			val += COUNTER_SPAN;
   46042:	f11b 7b80 	adds.w	fp, fp, #16777216	; 0x1000000
   46046:	f14c 0c00 	adc.w	ip, ip, #0
}
   4604a:	4658      	mov	r0, fp
   4604c:	4661      	mov	r1, ip
   4604e:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
   46052:	bf00      	nop
   46054:	20006850 	.word	0x20006850
   46058:	40011000 	.word	0x40011000
   4605c:	200039e8 	.word	0x200039e8

00046060 <compare_set>:
{
   46060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46064:	4616      	mov	r6, r2
   46066:	461f      	mov	r7, r3
   46068:	4680      	mov	r8, r0
	key = compare_int_lock(chan);
   4606a:	f7ff ff7f 	bl	45f6c <compare_int_lock>
   4606e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   46070:	f7ff ffce 	bl	46010 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   46074:	42b9      	cmp	r1, r7
   46076:	bf08      	it	eq
   46078:	42b0      	cmpeq	r0, r6
   4607a:	d27a      	bcs.n	46172 <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
   4607c:	1a34      	subs	r4, r6, r0
   4607e:	eb67 0501 	sbc.w	r5, r7, r1
   46082:	2300      	movs	r3, #0
   46084:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   46088:	42ab      	cmp	r3, r5
   4608a:	bf08      	it	eq
   4608c:	42a2      	cmpeq	r2, r4
   4608e:	f0c0 8082 	bcc.w	46196 <compare_set+0x136>
		if (target_time != cc_data[chan].target_time) {
   46092:	4b42      	ldr	r3, [pc, #264]	; (4619c <compare_set+0x13c>)
   46094:	eb03 1308 	add.w	r3, r3, r8, lsl #4
   46098:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   4609c:	429f      	cmp	r7, r3
   4609e:	bf08      	it	eq
   460a0:	4296      	cmpeq	r6, r2
   460a2:	d052      	beq.n	4614a <compare_set+0xea>
   460a4:	ea4f 0a88 	mov.w	sl, r8, lsl #2
   460a8:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   460ac:	f108 0550 	add.w	r5, r8, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   460b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   460b4:	fa02 f208 	lsl.w	r2, r2, r8
   460b8:	f50a 3a88 	add.w	sl, sl, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   460bc:	00ad      	lsls	r5, r5, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   460be:	b2ad      	uxth	r5, r5
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   460c0:	9201      	str	r2, [sp, #4]
     return p_reg->COUNTER;
   460c2:	4a37      	ldr	r2, [pc, #220]	; (461a0 <compare_set+0x140>)
    return p_reg->CC[ch];
   460c4:	f8da 3540 	ldr.w	r3, [sl, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   460c8:	f026 497f 	bic.w	r9, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   460cc:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   460d0:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   460d4:	464c      	mov	r4, r9
   460d6:	4611      	mov	r1, r2
     return p_reg->COUNTER;
   460d8:	f8d2 b504 	ldr.w	fp, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   460dc:	eba3 0c0b 	sub.w	ip, r3, fp
   460e0:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   460e4:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   460e8:	f1bc 0f01 	cmp.w	ip, #1
    p_reg->CC[ch] = cc_val;
   460ec:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
   460f0:	d104      	bne.n	460fc <compare_set+0x9c>
	z_impl_k_busy_wait(usec_to_wait);
   460f2:	2013      	movs	r0, #19
   460f4:	f00b fa07 	bl	51506 <z_impl_k_busy_wait>
   460f8:	4929      	ldr	r1, [pc, #164]	; (461a0 <compare_set+0x140>)
   460fa:	460a      	mov	r2, r1
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   460fc:	f10b 0c02 	add.w	ip, fp, #2
	return (a - b) & COUNTER_MAX;
   46100:	eba4 000c 	sub.w	r0, r4, ip
			cc_val = now + 2;
   46104:	4b27      	ldr	r3, [pc, #156]	; (461a4 <compare_set+0x144>)
	return (a - b) & COUNTER_MAX;
   46106:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   4610a:	4298      	cmp	r0, r3
   4610c:	bf28      	it	cs
   4610e:	4664      	movcs	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   46110:	2000      	movs	r0, #0
   46112:	6028      	str	r0, [r5, #0]
   46114:	6828      	ldr	r0, [r5, #0]
    p_reg->EVTENSET = mask;
   46116:	9b01      	ldr	r3, [sp, #4]
   46118:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   4611c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   46120:	f8ca 0540 	str.w	r0, [sl, #1344]	; 0x540
     return p_reg->COUNTER;
   46124:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   46128:	4583      	cmp	fp, r0
   4612a:	d007      	beq.n	4613c <compare_set+0xdc>
	return (a - b) & COUNTER_MAX;
   4612c:	1a20      	subs	r0, r4, r0
   4612e:	3802      	subs	r0, #2
   46130:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   46134:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   46138:	4623      	mov	r3, r4
   4613a:	d8cd      	bhi.n	460d8 <compare_set+0x78>
	return (a - b) & COUNTER_MAX;
   4613c:	eba4 0409 	sub.w	r4, r4, r9
   46140:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   46144:	1932      	adds	r2, r6, r4
   46146:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   4614a:	4c14      	ldr	r4, [pc, #80]	; (4619c <compare_set+0x13c>)
   4614c:	ea4f 1008 	mov.w	r0, r8, lsl #4
   46150:	1821      	adds	r1, r4, r0
   46152:	e9c1 2302 	strd	r2, r3, [r1, #8]
	cc_data[chan].callback = handler;
   46156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   46158:	5023      	str	r3, [r4, r0]
	cc_data[chan].user_context = user_data;
   4615a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   4615c:	604b      	str	r3, [r1, #4]
	return ret;
   4615e:	2400      	movs	r4, #0
	if (key) {
   46160:	9b00      	ldr	r3, [sp, #0]
   46162:	b113      	cbz	r3, 4616a <compare_set+0x10a>
   46164:	4640      	mov	r0, r8
   46166:	f7ff ff27 	bl	45fb8 <compare_int_unlock.part.0>
}
   4616a:	4620      	mov	r0, r4
   4616c:	b003      	add	sp, #12
   4616e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		atomic_or(&force_isr_mask, BIT(chan));
   46172:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   46174:	4a0c      	ldr	r2, [pc, #48]	; (461a8 <compare_set+0x148>)
   46176:	f3bf 8f5b 	dmb	ish
   4617a:	fa03 f308 	lsl.w	r3, r3, r8
   4617e:	e852 1f00 	ldrex	r1, [r2]
   46182:	4319      	orrs	r1, r3
   46184:	e842 1000 	strex	r0, r1, [r2]
   46188:	2800      	cmp	r0, #0
   4618a:	d1f8      	bne.n	4617e <compare_set+0x11e>
   4618c:	f3bf 8f5b 	dmb	ish
   46190:	4632      	mov	r2, r6
   46192:	463b      	mov	r3, r7
   46194:	e7d9      	b.n	4614a <compare_set+0xea>
			return -EINVAL;
   46196:	f06f 0415 	mvn.w	r4, #21
   4619a:	e7e1      	b.n	46160 <compare_set+0x100>
   4619c:	200039f0 	.word	0x200039f0
   461a0:	40011000 	.word	0x40011000
   461a4:	00800001 	.word	0x00800001
   461a8:	20006848 	.word	0x20006848

000461ac <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   461ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   461ae:	4b19      	ldr	r3, [pc, #100]	; (46214 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   461b0:	4d19      	ldr	r5, [pc, #100]	; (46218 <sys_clock_driver_init+0x6c>)
   461b2:	2400      	movs	r4, #0
   461b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   461b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   461bc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   461c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   461c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   461c8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   461cc:	4b13      	ldr	r3, [pc, #76]	; (4621c <sys_clock_driver_init+0x70>)
   461ce:	2602      	movs	r6, #2
   461d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   461d4:	2101      	movs	r1, #1
   461d6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   461da:	2011      	movs	r0, #17
   461dc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   461e0:	4622      	mov	r2, r4
   461e2:	f7e6 fc85 	bl	2caf0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   461e6:	2011      	movs	r0, #17
   461e8:	f7e6 fc50 	bl	2ca8c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   461ec:	4a0c      	ldr	r2, [pc, #48]	; (46220 <sys_clock_driver_init+0x74>)
   461ee:	2301      	movs	r3, #1
   461f0:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   461f2:	4a0c      	ldr	r2, [pc, #48]	; (46224 <sys_clock_driver_init+0x78>)
   461f4:	602b      	str	r3, [r5, #0]
   461f6:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   461f8:	4b0b      	ldr	r3, [pc, #44]	; (46228 <sys_clock_driver_init+0x7c>)
   461fa:	9300      	str	r3, [sp, #0]
   461fc:	4a0b      	ldr	r2, [pc, #44]	; (4622c <sys_clock_driver_init+0x80>)
   461fe:	9401      	str	r4, [sp, #4]
   46200:	2300      	movs	r3, #0
   46202:	4620      	mov	r0, r4
   46204:	f7ff ff2c 	bl	46060 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   46208:	4630      	mov	r0, r6
   4620a:	f7ff f939 	bl	45480 <z_nrf_clock_control_lf_on>

	return 0;
}
   4620e:	4620      	mov	r0, r4
   46210:	b002      	add	sp, #8
   46212:	bd70      	pop	{r4, r5, r6, pc}
   46214:	200039f0 	.word	0x200039f0
   46218:	40011000 	.word	0x40011000
   4621c:	e000e100 	.word	0xe000e100
   46220:	40011008 	.word	0x40011008
   46224:	2000684c 	.word	0x2000684c
   46228:	00045ee9 	.word	0x00045ee9
   4622c:	007fffff 	.word	0x007fffff

00046230 <rtc_nrf_isr>:
{
   46230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   46234:	4c33      	ldr	r4, [pc, #204]	; (46304 <rtc_nrf_isr+0xd4>)
   46236:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   4623a:	079a      	lsls	r2, r3, #30
   4623c:	d509      	bpl.n	46252 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4623e:	4b32      	ldr	r3, [pc, #200]	; (46308 <rtc_nrf_isr+0xd8>)
   46240:	681a      	ldr	r2, [r3, #0]
   46242:	b132      	cbz	r2, 46252 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   46244:	2200      	movs	r2, #0
   46246:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   46248:	4a30      	ldr	r2, [pc, #192]	; (4630c <rtc_nrf_isr+0xdc>)
   4624a:	681b      	ldr	r3, [r3, #0]
   4624c:	6813      	ldr	r3, [r2, #0]
   4624e:	3301      	adds	r3, #1
   46250:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   46252:	f04f 0320 	mov.w	r3, #32
   46256:	f3ef 8211 	mrs	r2, BASEPRI
   4625a:	f383 8812 	msr	BASEPRI_MAX, r3
   4625e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   46262:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   46266:	03db      	lsls	r3, r3, #15
   46268:	d512      	bpl.n	46290 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4626a:	f3bf 8f5b 	dmb	ish
   4626e:	4b28      	ldr	r3, [pc, #160]	; (46310 <rtc_nrf_isr+0xe0>)
   46270:	e853 1f00 	ldrex	r1, [r3]
   46274:	f021 0001 	bic.w	r0, r1, #1
   46278:	e843 0600 	strex	r6, r0, [r3]
   4627c:	2e00      	cmp	r6, #0
   4627e:	d1f7      	bne.n	46270 <rtc_nrf_isr+0x40>
   46280:	f3bf 8f5b 	dmb	ish
   46284:	4b23      	ldr	r3, [pc, #140]	; (46314 <rtc_nrf_isr+0xe4>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   46286:	2900      	cmp	r1, #0
   46288:	d135      	bne.n	462f6 <rtc_nrf_isr+0xc6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   4628a:	6819      	ldr	r1, [r3, #0]
		if (result) {
   4628c:	2900      	cmp	r1, #0
   4628e:	d132      	bne.n	462f6 <rtc_nrf_isr+0xc6>
{
   46290:	2300      	movs	r3, #0
	__asm__ volatile(
   46292:	f382 8811 	msr	BASEPRI, r2
   46296:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   4629a:	b34b      	cbz	r3, 462f0 <rtc_nrf_isr+0xc0>
		curr_time = z_nrf_rtc_timer_read();
   4629c:	f7ff feb8 	bl	46010 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   462a0:	f04f 0320 	mov.w	r3, #32
   462a4:	f3ef 8c11 	mrs	ip, BASEPRI
   462a8:	f383 8812 	msr	BASEPRI_MAX, r3
   462ac:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   462b0:	4b19      	ldr	r3, [pc, #100]	; (46318 <rtc_nrf_isr+0xe8>)
   462b2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   462b6:	42b9      	cmp	r1, r7
   462b8:	bf08      	it	eq
   462ba:	42b0      	cmpeq	r0, r6
   462bc:	f04f 0200 	mov.w	r2, #0
   462c0:	d31e      	bcc.n	46300 <rtc_nrf_isr+0xd0>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   462c2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   462c6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   462ca:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   462ce:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   462d2:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   462d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   462d8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   462dc:	f38c 8811 	msr	BASEPRI, ip
   462e0:	f3bf 8f6f 	isb	sy
		if (handler) {
   462e4:	b121      	cbz	r1, 462f0 <rtc_nrf_isr+0xc0>
			handler(chan, expire_time, user_context);
   462e6:	9500      	str	r5, [sp, #0]
   462e8:	4632      	mov	r2, r6
   462ea:	463b      	mov	r3, r7
   462ec:	2000      	movs	r0, #0
   462ee:	4788      	blx	r1
}
   462f0:	b003      	add	sp, #12
   462f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   462f6:	2100      	movs	r1, #0
   462f8:	6019      	str	r1, [r3, #0]
   462fa:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   462fc:	2301      	movs	r3, #1
   462fe:	e7c8      	b.n	46292 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   46300:	4611      	mov	r1, r2
   46302:	e7eb      	b.n	462dc <rtc_nrf_isr+0xac>
   46304:	40011000 	.word	0x40011000
   46308:	40011104 	.word	0x40011104
   4630c:	20006850 	.word	0x20006850
   46310:	20006848 	.word	0x20006848
   46314:	40011140 	.word	0x40011140
   46318:	200039f0 	.word	0x200039f0

0004631c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   4631c:	1c43      	adds	r3, r0, #1
{
   4631e:	e92d 4817 	stmdb	sp!, {r0, r1, r2, r4, fp, lr}
   46322:	4c14      	ldr	r4, [pc, #80]	; (46374 <sys_clock_set_timeout+0x58>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   46324:	d022      	beq.n	4636c <sys_clock_set_timeout+0x50>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   46326:	2801      	cmp	r0, #1
   46328:	dd22      	ble.n	46370 <sys_clock_set_timeout+0x54>
   4632a:	42a0      	cmp	r0, r4
   4632c:	dc00      	bgt.n	46330 <sys_clock_set_timeout+0x14>
   4632e:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   46330:	f7ff fe6e 	bl	46010 <z_nrf_rtc_timer_read>
   46334:	4b10      	ldr	r3, [pc, #64]	; (46378 <sys_clock_set_timeout+0x5c>)
	if (unannounced >= COUNTER_HALF_SPAN) {
   46336:	490f      	ldr	r1, [pc, #60]	; (46374 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   46338:	e9d3 bc00 	ldrd	fp, ip, [r3]
   4633c:	eba0 000b 	sub.w	r0, r0, fp
		ticks = 0;
   46340:	4288      	cmp	r0, r1
   46342:	bf88      	it	hi
   46344:	2400      	movhi	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   46346:	3001      	adds	r0, #1
   46348:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   4634a:	428c      	cmp	r4, r1
   4634c:	bf28      	it	cs
   4634e:	460c      	movcs	r4, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   46350:	eb1b 0204 	adds.w	r2, fp, r4
   46354:	4909      	ldr	r1, [pc, #36]	; (4637c <sys_clock_set_timeout+0x60>)
   46356:	9100      	str	r1, [sp, #0]
   46358:	f04f 0000 	mov.w	r0, #0
   4635c:	9001      	str	r0, [sp, #4]
   4635e:	f14c 0300 	adc.w	r3, ip, #0
   46362:	f7ff fe7d 	bl	46060 <compare_set>
}
   46366:	b003      	add	sp, #12
   46368:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   4636c:	4620      	mov	r0, r4
   4636e:	e7de      	b.n	4632e <sys_clock_set_timeout+0x12>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   46370:	2400      	movs	r4, #0
   46372:	e7dd      	b.n	46330 <sys_clock_set_timeout+0x14>
   46374:	007fffff 	.word	0x007fffff
   46378:	20003a00 	.word	0x20003a00
   4637c:	00045ee9 	.word	0x00045ee9

00046380 <sys_clock_elapsed>:
{
   46380:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   46382:	f7ff fe45 	bl	46010 <z_nrf_rtc_timer_read>
   46386:	4b02      	ldr	r3, [pc, #8]	; (46390 <sys_clock_elapsed+0x10>)
   46388:	681b      	ldr	r3, [r3, #0]
}
   4638a:	1ac0      	subs	r0, r0, r3
   4638c:	bd08      	pop	{r3, pc}
   4638e:	bf00      	nop
   46390:	20003a00 	.word	0x20003a00

00046394 <nrf52_errata_103>:
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   46394:	4b05      	ldr	r3, [pc, #20]	; (463ac <nrf52_errata_103+0x18>)
   46396:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46398:	3b04      	subs	r3, #4
            if (var1 == 0x08)
   4639a:	681b      	ldr	r3, [r3, #0]
   4639c:	2b08      	cmp	r3, #8
                switch(var2)
   4639e:	bf06      	itte	eq
   463a0:	fab0 f080 	clzeq	r0, r0
   463a4:	0940      	lsreq	r0, r0, #5
        return false;
   463a6:	2000      	movne	r0, #0
}
   463a8:	4770      	bx	lr
   463aa:	bf00      	nop
   463ac:	10000134 	.word	0x10000134

000463b0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   463b0:	4a02      	ldr	r2, [pc, #8]	; (463bc <nvmc_wait+0xc>)
   463b2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   463b6:	2b00      	cmp	r3, #0
   463b8:	d0fb      	beq.n	463b2 <nvmc_wait+0x2>
}
   463ba:	4770      	bx	lr
   463bc:	4001e000 	.word	0x4001e000

000463c0 <SystemInit>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   463c0:	4b60      	ldr	r3, [pc, #384]	; (46544 <SystemInit+0x184>)
            if (var1 == 0x08)
   463c2:	681b      	ldr	r3, [r3, #0]
   463c4:	2b08      	cmp	r3, #8
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   463c6:	b510      	push	{r4, lr}
   463c8:	d150      	bne.n	4646c <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   463ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   463ce:	2200      	movs	r2, #0
   463d0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   463d4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   463d8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   463dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   463e0:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
   463e4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   463e8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   463ec:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   463f0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   463f4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   463f8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   463fc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   46400:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   46404:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   46408:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   4640c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   46410:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   46414:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   46418:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   4641c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   46420:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   46424:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   46428:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   4642c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   46430:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   46434:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   46438:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   4643c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   46440:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   46444:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   46448:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   4644c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   46450:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   46454:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   46458:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   4645c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   46460:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   46464:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   46468:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   4646c:	f7ff ff92 	bl	46394 <nrf52_errata_103>
   46470:	b110      	cbz	r0, 46478 <SystemInit+0xb8>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   46472:	4b35      	ldr	r3, [pc, #212]	; (46548 <SystemInit+0x188>)
   46474:	4a35      	ldr	r2, [pc, #212]	; (4654c <SystemInit+0x18c>)
   46476:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   46478:	f7ff ff8c 	bl	46394 <nrf52_errata_103>
   4647c:	b118      	cbz	r0, 46486 <SystemInit+0xc6>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   4647e:	4b34      	ldr	r3, [pc, #208]	; (46550 <SystemInit+0x190>)
   46480:	22fb      	movs	r2, #251	; 0xfb
   46482:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   46486:	f7ff ff85 	bl	46394 <nrf52_errata_103>
   4648a:	b148      	cbz	r0, 464a0 <SystemInit+0xe0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   4648c:	4931      	ldr	r1, [pc, #196]	; (46554 <SystemInit+0x194>)
   4648e:	4b32      	ldr	r3, [pc, #200]	; (46558 <SystemInit+0x198>)
   46490:	680a      	ldr	r2, [r1, #0]
   46492:	681b      	ldr	r3, [r3, #0]
   46494:	f022 020f 	bic.w	r2, r2, #15
   46498:	f003 030f 	and.w	r3, r3, #15
   4649c:	4313      	orrs	r3, r2
   4649e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   464a0:	f7ff ff78 	bl	46394 <nrf52_errata_103>
   464a4:	b118      	cbz	r0, 464ae <SystemInit+0xee>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   464a6:	4b2d      	ldr	r3, [pc, #180]	; (4655c <SystemInit+0x19c>)
   464a8:	f44f 7200 	mov.w	r2, #512	; 0x200
   464ac:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   464ae:	4b25      	ldr	r3, [pc, #148]	; (46544 <SystemInit+0x184>)
            if (var1 == 0x08)
   464b0:	681b      	ldr	r3, [r3, #0]
   464b2:	2b08      	cmp	r3, #8
   464b4:	d115      	bne.n	464e2 <SystemInit+0x122>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   464b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   464ba:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   464be:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   464c0:	bf44      	itt	mi
   464c2:	f06f 0201 	mvnmi.w	r2, #1
   464c6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   464ca:	4b25      	ldr	r3, [pc, #148]	; (46560 <SystemInit+0x1a0>)
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   464cc:	681b      	ldr	r3, [r3, #0]
   464ce:	2b04      	cmp	r3, #4
        #else
            if (nrf52_configuration_249())
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   464d0:	bf81      	itttt	hi
   464d2:	f04f 2310 	movhi.w	r3, #268439552	; 0x10001000
   464d6:	f8d3 2208 	ldrhi.w	r2, [r3, #520]	; 0x208
   464da:	f04f 4380 	movhi.w	r3, #1073741824	; 0x40000000
   464de:	f8c3 2558 	strhi.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   464e2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   464e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   464ea:	2a00      	cmp	r2, #0
   464ec:	db03      	blt.n	464f6 <SystemInit+0x136>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   464ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   464f2:	2b00      	cmp	r3, #0
   464f4:	da22      	bge.n	4653c <SystemInit+0x17c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   464f6:	491b      	ldr	r1, [pc, #108]	; (46564 <SystemInit+0x1a4>)
   464f8:	2301      	movs	r3, #1
   464fa:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   464fe:	f7ff ff57 	bl	463b0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   46502:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   46506:	2412      	movs	r4, #18
   46508:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   4650c:	f7ff ff50 	bl	463b0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   46510:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   46514:	f7ff ff4c 	bl	463b0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   46518:	2300      	movs	r3, #0
   4651a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   4651e:	f7ff ff47 	bl	463b0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   46522:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   46526:	4910      	ldr	r1, [pc, #64]	; (46568 <SystemInit+0x1a8>)
   46528:	4b10      	ldr	r3, [pc, #64]	; (4656c <SystemInit+0x1ac>)
   4652a:	68ca      	ldr	r2, [r1, #12]
   4652c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   46530:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   46532:	60cb      	str	r3, [r1, #12]
   46534:	f3bf 8f4f 	dsb	sy
    __NOP();
   46538:	bf00      	nop
   4653a:	e7fd      	b.n	46538 <SystemInit+0x178>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   4653c:	4b0c      	ldr	r3, [pc, #48]	; (46570 <SystemInit+0x1b0>)
   4653e:	4a0d      	ldr	r2, [pc, #52]	; (46574 <SystemInit+0x1b4>)
   46540:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   46542:	bd10      	pop	{r4, pc}
   46544:	10000130 	.word	0x10000130
   46548:	4000568c 	.word	0x4000568c
   4654c:	00038148 	.word	0x00038148
   46550:	4000f000 	.word	0x4000f000
   46554:	40000ee4 	.word	0x40000ee4
   46558:	10000258 	.word	0x10000258
   4655c:	40029640 	.word	0x40029640
   46560:	10000134 	.word	0x10000134
   46564:	4001e000 	.word	0x4001e000
   46568:	e000ed00 	.word	0xe000ed00
   4656c:	05fa0004 	.word	0x05fa0004
   46570:	20000bc4 	.word	0x20000bc4
   46574:	03d09000 	.word	0x03d09000

00046578 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   46578:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   4657a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   4657c:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   4657e:	fab4 f384 	clz	r3, r4
   46582:	f1c3 031f 	rsb	r3, r3, #31
   46586:	b2db      	uxtb	r3, r3
   46588:	b25a      	sxtb	r2, r3
        if (idx < 0) {
   4658a:	1c56      	adds	r6, r2, #1
   4658c:	d014      	beq.n	465b8 <nrfx_flag32_alloc+0x40>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   4658e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   46592:	fa05 f202 	lsl.w	r2, r5, r2
   46596:	ea24 0202 	bic.w	r2, r4, r2
   4659a:	e850 6f00 	ldrex	r6, [r0]
   4659e:	42a6      	cmp	r6, r4
   465a0:	d104      	bne.n	465ac <nrfx_flag32_alloc+0x34>
   465a2:	e840 2c00 	strex	ip, r2, [r0]
   465a6:	f1bc 0f00 	cmp.w	ip, #0
   465aa:	d1f6      	bne.n	4659a <nrfx_flag32_alloc+0x22>
   465ac:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   465b0:	d1e4      	bne.n	4657c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   465b2:	4802      	ldr	r0, [pc, #8]	; (465bc <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   465b4:	700b      	strb	r3, [r1, #0]
}
   465b6:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   465b8:	4801      	ldr	r0, [pc, #4]	; (465c0 <nrfx_flag32_alloc+0x48>)
   465ba:	e7fc      	b.n	465b6 <nrfx_flag32_alloc+0x3e>
   465bc:	0bad0000 	.word	0x0bad0000
   465c0:	0bad0002 	.word	0x0bad0002

000465c4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   465c4:	6802      	ldr	r2, [r0, #0]
   465c6:	40ca      	lsrs	r2, r1
   465c8:	07d3      	lsls	r3, r2, #31
{
   465ca:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   465cc:	d414      	bmi.n	465f8 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   465ce:	2301      	movs	r3, #1
   465d0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   465d2:	6802      	ldr	r2, [r0, #0]
   465d4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   465d8:	ea43 0102 	orr.w	r1, r3, r2
   465dc:	e850 4f00 	ldrex	r4, [r0]
   465e0:	4294      	cmp	r4, r2
   465e2:	d104      	bne.n	465ee <nrfx_flag32_free+0x2a>
   465e4:	e840 1c00 	strex	ip, r1, [r0]
   465e8:	f1bc 0f00 	cmp.w	ip, #0
   465ec:	d1f6      	bne.n	465dc <nrfx_flag32_free+0x18>
   465ee:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   465f2:	d1ee      	bne.n	465d2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   465f4:	4801      	ldr	r0, [pc, #4]	; (465fc <nrfx_flag32_free+0x38>)
}
   465f6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   465f8:	4801      	ldr	r0, [pc, #4]	; (46600 <nrfx_flag32_free+0x3c>)
   465fa:	e7fc      	b.n	465f6 <nrfx_flag32_free+0x32>
   465fc:	0bad0000 	.word	0x0bad0000
   46600:	0bad0004 	.word	0x0bad0004

00046604 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   46604:	4b04      	ldr	r3, [pc, #16]	; (46618 <nrfx_clock_init+0x14>)
   46606:	791a      	ldrb	r2, [r3, #4]
   46608:	b922      	cbnz	r2, 46614 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   4660a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   4660c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   4660e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   46610:	4802      	ldr	r0, [pc, #8]	; (4661c <nrfx_clock_init+0x18>)
   46612:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   46614:	4802      	ldr	r0, [pc, #8]	; (46620 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   46616:	4770      	bx	lr
   46618:	20006854 	.word	0x20006854
   4661c:	0bad0000 	.word	0x0bad0000
   46620:	0bad000c 	.word	0x0bad000c

00046624 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   46624:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   46626:	2000      	movs	r0, #0
   46628:	f7e6 fa54 	bl	2cad4 <arch_irq_is_enabled>
   4662c:	b908      	cbnz	r0, 46632 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   4662e:	f7e6 fa2d 	bl	2ca8c <arch_irq_enable>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
   46632:	4b02      	ldr	r3, [pc, #8]	; (4663c <nrfx_clock_enable+0x18>)
   46634:	2201      	movs	r2, #1
   46636:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   46638:	bd08      	pop	{r3, pc}
   4663a:	bf00      	nop
   4663c:	20006da6 	.word	0x20006da6

00046640 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   46640:	b110      	cbz	r0, 46648 <nrfx_clock_start+0x8>
   46642:	2801      	cmp	r0, #1
   46644:	d020      	beq.n	46688 <nrfx_clock_start+0x48>
   46646:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   46648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4664c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   46650:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   46654:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   46658:	4619      	mov	r1, r3
   4665a:	d011      	beq.n	46680 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   4665c:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   46660:	2a01      	cmp	r2, #1
   46662:	d10d      	bne.n	46680 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
   46664:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   46668:	4b0c      	ldr	r3, [pc, #48]	; (4669c <nrfx_clock_start+0x5c>)
   4666a:	2200      	movs	r2, #0
   4666c:	601a      	str	r2, [r3, #0]
   4666e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   46670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   46674:	2202      	movs	r2, #2
   46676:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   4667a:	2201      	movs	r2, #1
   4667c:	609a      	str	r2, [r3, #8]
   4667e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   46680:	2300      	movs	r3, #0
   46682:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
   46686:	e7ef      	b.n	46668 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   46688:	4b05      	ldr	r3, [pc, #20]	; (466a0 <nrfx_clock_start+0x60>)
   4668a:	2200      	movs	r2, #0
   4668c:	601a      	str	r2, [r3, #0]
   4668e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   46690:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   46694:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46698:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   4669a:	4770      	bx	lr
   4669c:	40000104 	.word	0x40000104
   466a0:	40000100 	.word	0x40000100

000466a4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   466a4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   466a6:	b110      	cbz	r0, 466ae <nrfx_clock_stop+0xa>
   466a8:	2801      	cmp	r0, #1
   466aa:	d018      	beq.n	466de <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   466ac:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   466ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   466b2:	2202      	movs	r2, #2
   466b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   466b8:	4a18      	ldr	r2, [pc, #96]	; (4671c <nrfx_clock_stop+0x78>)
   466ba:	6010      	str	r0, [r2, #0]
   466bc:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   466be:	4a18      	ldr	r2, [pc, #96]	; (46720 <nrfx_clock_stop+0x7c>)
   466c0:	2101      	movs	r1, #1
   466c2:	6011      	str	r1, [r2, #0]
   466c4:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   466c8:	461c      	mov	r4, r3
   466ca:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   466ce:	03db      	lsls	r3, r3, #15
   466d0:	d5ec      	bpl.n	466ac <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   466d2:	2001      	movs	r0, #1
   466d4:	f009 ffd8 	bl	50688 <nrfx_busy_wait>
   466d8:	3d01      	subs	r5, #1
   466da:	d1f6      	bne.n	466ca <nrfx_clock_stop+0x26>
   466dc:	e7e6      	b.n	466ac <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   466de:	4b11      	ldr	r3, [pc, #68]	; (46724 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   466e0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   466e4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   466e6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   466ea:	601a      	str	r2, [r3, #0]
   466ec:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   466ee:	4b0e      	ldr	r3, [pc, #56]	; (46728 <nrfx_clock_stop+0x84>)
   466f0:	f242 7510 	movw	r5, #10000	; 0x2710
   466f4:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   466f6:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   466fa:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   466fe:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   46700:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   46704:	d505      	bpl.n	46712 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   46706:	b123      	cbz	r3, 46712 <nrfx_clock_stop+0x6e>
   46708:	2001      	movs	r0, #1
   4670a:	f009 ffbd 	bl	50688 <nrfx_busy_wait>
   4670e:	3d01      	subs	r5, #1
   46710:	d1f1      	bne.n	466f6 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   46712:	4b06      	ldr	r3, [pc, #24]	; (4672c <nrfx_clock_stop+0x88>)
   46714:	2200      	movs	r2, #0
   46716:	715a      	strb	r2, [r3, #5]
   46718:	e7c8      	b.n	466ac <nrfx_clock_stop+0x8>
   4671a:	bf00      	nop
   4671c:	40000104 	.word	0x40000104
   46720:	4000000c 	.word	0x4000000c
   46724:	40000100 	.word	0x40000100
   46728:	40000004 	.word	0x40000004
   4672c:	20006854 	.word	0x20006854

00046730 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   46730:	4b16      	ldr	r3, [pc, #88]	; (4678c <nrfx_clock_irq_handler+0x5c>)
   46732:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   46734:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   46736:	b16a      	cbz	r2, 46754 <nrfx_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   46738:	2200      	movs	r2, #0
   4673a:	601a      	str	r2, [r3, #0]
   4673c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   4673e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   46742:	2201      	movs	r2, #1
   46744:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   46748:	4b11      	ldr	r3, [pc, #68]	; (46790 <nrfx_clock_irq_handler+0x60>)
   4674a:	7958      	ldrb	r0, [r3, #5]
   4674c:	b910      	cbnz	r0, 46754 <nrfx_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   4674e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   46750:	681b      	ldr	r3, [r3, #0]
   46752:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   46754:	4b0f      	ldr	r3, [pc, #60]	; (46794 <nrfx_clock_irq_handler+0x64>)
   46756:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   46758:	b172      	cbz	r2, 46778 <nrfx_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   4675a:	2200      	movs	r2, #0
   4675c:	601a      	str	r2, [r3, #0]
   4675e:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   46760:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   46764:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   46768:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   4676c:	0792      	lsls	r2, r2, #30
   4676e:	d104      	bne.n	4677a <nrfx_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   46770:	2201      	movs	r2, #1
   46772:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46776:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   46778:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   4677a:	2202      	movs	r2, #2
   4677c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   46780:	4b03      	ldr	r3, [pc, #12]	; (46790 <nrfx_clock_irq_handler+0x60>)
   46782:	2001      	movs	r0, #1
   46784:	681b      	ldr	r3, [r3, #0]
}
   46786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   4678a:	4718      	bx	r3
   4678c:	40000100 	.word	0x40000100
   46790:	20006854 	.word	0x20006854
   46794:	40000104 	.word	0x40000104

00046798 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   46798:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   4679a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   4679e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   467a0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   467a2:	6002      	str	r2, [r0, #0]
}
   467a4:	4802      	ldr	r0, [pc, #8]	; (467b0 <nrf_gpio_pin_port_decode+0x18>)
   467a6:	bf18      	it	ne
   467a8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   467ac:	4770      	bx	lr
   467ae:	bf00      	nop
   467b0:	50000300 	.word	0x50000300

000467b4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   467b4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   467b6:	f100 0308 	add.w	r3, r0, #8
   467ba:	4c0c      	ldr	r4, [pc, #48]	; (467ec <call_handler+0x38>)
   467bc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   467c0:	05da      	lsls	r2, r3, #23
{
   467c2:	4605      	mov	r5, r0
   467c4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   467c6:	d507      	bpl.n	467d8 <call_handler+0x24>
   467c8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   467cc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   467d0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   467d4:	6852      	ldr	r2, [r2, #4]
   467d6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   467d8:	68a3      	ldr	r3, [r4, #8]
   467da:	b12b      	cbz	r3, 467e8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   467dc:	68e2      	ldr	r2, [r4, #12]
   467de:	4631      	mov	r1, r6
   467e0:	4628      	mov	r0, r5
    }
}
   467e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   467e6:	4718      	bx	r3
}
   467e8:	bd70      	pop	{r4, r5, r6, pc}
   467ea:	bf00      	nop
   467ec:	20000bc8 	.word	0x20000bc8

000467f0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   467f0:	4b12      	ldr	r3, [pc, #72]	; (4683c <release_handler+0x4c>)
   467f2:	3008      	adds	r0, #8
{
   467f4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   467f6:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   467fa:	05d1      	lsls	r1, r2, #23
   467fc:	d51b      	bpl.n	46836 <release_handler+0x46>
   467fe:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   46802:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   46806:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   4680a:	f103 0410 	add.w	r4, r3, #16
   4680e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   46810:	f834 2b02 	ldrh.w	r2, [r4], #2
   46814:	f412 7f80 	tst.w	r2, #256	; 0x100
   46818:	d003      	beq.n	46822 <release_handler+0x32>
   4681a:	f3c2 2243 	ubfx	r2, r2, #9, #4
   4681e:	4291      	cmp	r1, r2
   46820:	d009      	beq.n	46836 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   46822:	3001      	adds	r0, #1
   46824:	2830      	cmp	r0, #48	; 0x30
   46826:	d1f3      	bne.n	46810 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   46828:	2200      	movs	r2, #0
   4682a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   4682e:	4804      	ldr	r0, [pc, #16]	; (46840 <release_handler+0x50>)
}
   46830:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   46832:	f7ff bec7 	b.w	465c4 <nrfx_flag32_free>
}
   46836:	bc10      	pop	{r4}
   46838:	4770      	bx	lr
   4683a:	bf00      	nop
   4683c:	20000bc8 	.word	0x20000bc8
   46840:	20000c3c 	.word	0x20000c3c

00046844 <pin_handler_trigger_uninit>:
{
   46844:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   46846:	4c0a      	ldr	r4, [pc, #40]	; (46870 <pin_handler_trigger_uninit+0x2c>)
   46848:	f100 0508 	add.w	r5, r0, #8
   4684c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   46850:	069a      	lsls	r2, r3, #26
   46852:	d506      	bpl.n	46862 <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   46854:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   46856:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   4685a:	4a06      	ldr	r2, [pc, #24]	; (46874 <pin_handler_trigger_uninit+0x30>)
   4685c:	2100      	movs	r1, #0
   4685e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   46862:	f7ff ffc5 	bl	467f0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   46866:	2300      	movs	r3, #0
   46868:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   4686c:	bd38      	pop	{r3, r4, r5, pc}
   4686e:	bf00      	nop
   46870:	20000bc8 	.word	0x20000bc8
   46874:	40006000 	.word	0x40006000

00046878 <nrfx_gpiote_input_configure>:
{
   46878:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   4687c:	461c      	mov	r4, r3
   4687e:	4605      	mov	r5, r0
   46880:	4617      	mov	r7, r2
    if (p_input_config)
   46882:	460b      	mov	r3, r1
   46884:	b309      	cbz	r1, 468ca <nrfx_gpiote_input_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   46886:	4e4d      	ldr	r6, [pc, #308]	; (469bc <nrfx_gpiote_input_configure+0x144>)
   46888:	f100 0808 	add.w	r8, r0, #8
        if (pin_is_task_output(pin))
   4688c:	f836 2018 	ldrh.w	r2, [r6, r8, lsl #1]
   46890:	f002 0222 	and.w	r2, r2, #34	; 0x22
   46894:	2a22      	cmp	r2, #34	; 0x22
   46896:	d103      	bne.n	468a0 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   46898:	4849      	ldr	r0, [pc, #292]	; (469c0 <nrfx_gpiote_input_configure+0x148>)
}
   4689a:	b004      	add	sp, #16
   4689c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   468a0:	2200      	movs	r2, #0
   468a2:	f88d 200e 	strb.w	r2, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   468a6:	f88d 200f 	strb.w	r2, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   468aa:	e9cd 2200 	strd	r2, r2, [sp]
   468ae:	f10d 010e 	add.w	r1, sp, #14
   468b2:	f10d 020f 	add.w	r2, sp, #15
   468b6:	f009 fee9 	bl	5068c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   468ba:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   468be:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   468c2:	f043 0301 	orr.w	r3, r3, #1
   468c6:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   468ca:	b197      	cbz	r7, 468f2 <nrfx_gpiote_input_configure+0x7a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   468cc:	493b      	ldr	r1, [pc, #236]	; (469bc <nrfx_gpiote_input_configure+0x144>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   468ce:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   468d0:	687b      	ldr	r3, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   468d2:	f105 0008 	add.w	r0, r5, #8
   468d6:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
        if (pin_is_output(pin))
   468da:	0797      	lsls	r7, r2, #30
   468dc:	d50c      	bpl.n	468f8 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
   468de:	2b00      	cmp	r3, #0
   468e0:	d1da      	bne.n	46898 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   468e2:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   468e6:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   468ea:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   468ee:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    if (p_handler_config)
   468f2:	bbcc      	cbnz	r4, 46968 <nrfx_gpiote_input_configure+0xf0>
    return NRFX_SUCCESS;
   468f4:	4833      	ldr	r0, [pc, #204]	; (469c4 <nrfx_gpiote_input_configure+0x14c>)
   468f6:	e7d0      	b.n	4689a <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   468f8:	f022 0220 	bic.w	r2, r2, #32
   468fc:	04d2      	lsls	r2, r2, #19
   468fe:	0cd2      	lsrs	r2, r2, #19
   46900:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            if (use_evt)
   46904:	2b00      	cmp	r3, #0
   46906:	d0ec      	beq.n	468e2 <nrfx_gpiote_input_configure+0x6a>
                if (!edge)
   46908:	2e03      	cmp	r6, #3
   4690a:	d8c5      	bhi.n	46898 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   4690c:	781f      	ldrb	r7, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   4690e:	b92e      	cbnz	r6, 4691c <nrfx_gpiote_input_configure+0xa4>
   46910:	f507 72a2 	add.w	r2, r7, #324	; 0x144
   46914:	4b2c      	ldr	r3, [pc, #176]	; (469c8 <nrfx_gpiote_input_configure+0x150>)
   46916:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   4691a:	e7e2      	b.n	468e2 <nrfx_gpiote_input_configure+0x6a>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   4691c:	00bb      	lsls	r3, r7, #2
   4691e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   46922:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   46926:	ea42 3247 	orr.w	r2, r2, r7, lsl #13
   4692a:	f8d3 c510 	ldr.w	ip, [r3, #1296]	; 0x510
   4692e:	f02c 0c03 	bic.w	ip, ip, #3
   46932:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   46936:	f8d3 c510 	ldr.w	ip, [r3, #1296]	; 0x510
   4693a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   4693e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   46942:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   46946:	f8d3 e510 	ldr.w	lr, [r3, #1296]	; 0x510
   4694a:	ea4f 2c05 	mov.w	ip, r5, lsl #8
   4694e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   46952:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   46956:	ea4c 0c0e 	orr.w	ip, ip, lr
   4695a:	f042 0220 	orr.w	r2, r2, #32
   4695e:	f8c3 c510 	str.w	ip, [r3, #1296]	; 0x510
   46962:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
   46966:	e7bc      	b.n	468e2 <nrfx_gpiote_input_configure+0x6a>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   46968:	e9d4 6700 	ldrd	r6, r7, [r4]
    release_handler(pin);
   4696c:	4628      	mov	r0, r5
   4696e:	f7ff ff3f 	bl	467f0 <release_handler>
    if (!handler)
   46972:	2e00      	cmp	r6, #0
   46974:	d0be      	beq.n	468f4 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   46976:	4c11      	ldr	r4, [pc, #68]	; (469bc <nrfx_gpiote_input_configure+0x144>)
   46978:	6823      	ldr	r3, [r4, #0]
   4697a:	429e      	cmp	r6, r3
   4697c:	d104      	bne.n	46988 <nrfx_gpiote_input_configure+0x110>
   4697e:	6863      	ldr	r3, [r4, #4]
   46980:	429f      	cmp	r7, r3
   46982:	d101      	bne.n	46988 <nrfx_gpiote_input_configure+0x110>
   46984:	2200      	movs	r2, #0
   46986:	e009      	b.n	4699c <nrfx_gpiote_input_configure+0x124>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   46988:	f10d 010f 	add.w	r1, sp, #15
   4698c:	480f      	ldr	r0, [pc, #60]	; (469cc <nrfx_gpiote_input_configure+0x154>)
   4698e:	f7ff fdf3 	bl	46578 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   46992:	4b0c      	ldr	r3, [pc, #48]	; (469c4 <nrfx_gpiote_input_configure+0x14c>)
   46994:	4298      	cmp	r0, r3
   46996:	d180      	bne.n	4689a <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   46998:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   4699c:	f844 6032 	str.w	r6, [r4, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   469a0:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   469a4:	3508      	adds	r5, #8
    m_cb.handlers[handler_id].p_context = p_context;
   469a6:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   469a8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
   469ac:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   469b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   469b4:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
   469b8:	e79c      	b.n	468f4 <nrfx_gpiote_input_configure+0x7c>
   469ba:	bf00      	nop
   469bc:	20000bc8 	.word	0x20000bc8
   469c0:	0bad0004 	.word	0x0bad0004
   469c4:	0bad0000 	.word	0x0bad0000
   469c8:	40006000 	.word	0x40006000
   469cc:	20000c3c 	.word	0x20000c3c

000469d0 <nrfx_gpiote_output_configure>:
{
   469d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   469d4:	4604      	mov	r4, r0
   469d6:	4690      	mov	r8, r2
    if (p_config)
   469d8:	b309      	cbz	r1, 46a1e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   469da:	f100 0608 	add.w	r6, r0, #8
   469de:	4d33      	ldr	r5, [pc, #204]	; (46aac <nrfx_gpiote_output_configure+0xdc>)
   469e0:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   469e4:	0798      	lsls	r0, r3, #30
   469e6:	d401      	bmi.n	469ec <nrfx_gpiote_output_configure+0x1c>
   469e8:	069a      	lsls	r2, r3, #26
   469ea:	d45d      	bmi.n	46aa8 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   469ec:	f013 0f1c 	tst.w	r3, #28
   469f0:	d002      	beq.n	469f8 <nrfx_gpiote_output_configure+0x28>
   469f2:	784b      	ldrb	r3, [r1, #1]
   469f4:	2b01      	cmp	r3, #1
   469f6:	d057      	beq.n	46aa8 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   469f8:	2301      	movs	r3, #1
   469fa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   469fe:	2300      	movs	r3, #0
   46a00:	e9cd 1300 	strd	r1, r3, [sp]
   46a04:	1c4a      	adds	r2, r1, #1
   46a06:	1c8b      	adds	r3, r1, #2
   46a08:	4620      	mov	r0, r4
   46a0a:	f10d 010f 	add.w	r1, sp, #15
   46a0e:	f009 fe3d 	bl	5068c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   46a12:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
   46a16:	f043 0303 	orr.w	r3, r3, #3
   46a1a:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
    if (p_task_config)
   46a1e:	f1b8 0f00 	cmp.w	r8, #0
   46a22:	d103      	bne.n	46a2c <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   46a24:	4822      	ldr	r0, [pc, #136]	; (46ab0 <nrfx_gpiote_output_configure+0xe0>)
}
   46a26:	b004      	add	sp, #16
   46a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   46a2c:	4d1f      	ldr	r5, [pc, #124]	; (46aac <nrfx_gpiote_output_configure+0xdc>)
   46a2e:	f104 0608 	add.w	r6, r4, #8
   46a32:	f835 2016 	ldrh.w	r2, [r5, r6, lsl #1]
        if (pin_is_input(pin))
   46a36:	0793      	lsls	r3, r2, #30
   46a38:	d536      	bpl.n	46aa8 <nrfx_gpiote_output_configure+0xd8>
        uint32_t ch = p_task_config->task_ch;
   46a3a:	f898 7000 	ldrb.w	r7, [r8]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   46a3e:	f898 0001 	ldrb.w	r0, [r8, #1]
   46a42:	00b9      	lsls	r1, r7, #2
   46a44:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   46a48:	f022 0220 	bic.w	r2, r2, #32
   46a4c:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   46a50:	04d2      	lsls	r2, r2, #19
    p_reg->CONFIG[idx] = 0;
   46a52:	2300      	movs	r3, #0
   46a54:	0cd2      	lsrs	r2, r2, #19
   46a56:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   46a5a:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   46a5e:	2800      	cmp	r0, #0
   46a60:	d0e0      	beq.n	46a24 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   46a62:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   46a66:	f898 c002 	ldrb.w	ip, [r8, #2]
   46a6a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   46a6e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   46a72:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   46a76:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   46a7a:	0223      	lsls	r3, r4, #8
   46a7c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   46a80:	0400      	lsls	r0, r0, #16
   46a82:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   46a86:	ea43 030e 	orr.w	r3, r3, lr
   46a8a:	4303      	orrs	r3, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   46a8c:	ea4f 500c 	mov.w	r0, ip, lsl #20
   46a90:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   46a94:	ea42 3247 	orr.w	r2, r2, r7, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   46a98:	4303      	orrs	r3, r0
   46a9a:	f042 0220 	orr.w	r2, r2, #32
   46a9e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   46aa2:	f825 2016 	strh.w	r2, [r5, r6, lsl #1]
   46aa6:	e7bd      	b.n	46a24 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   46aa8:	4802      	ldr	r0, [pc, #8]	; (46ab4 <nrfx_gpiote_output_configure+0xe4>)
   46aaa:	e7bc      	b.n	46a26 <nrfx_gpiote_output_configure+0x56>
   46aac:	20000bc8 	.word	0x20000bc8
   46ab0:	0bad0000 	.word	0x0bad0000
   46ab4:	0bad0004 	.word	0x0bad0004

00046ab8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   46ab8:	4b01      	ldr	r3, [pc, #4]	; (46ac0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   46aba:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   46abe:	4770      	bx	lr
   46ac0:	20000bc8 	.word	0x20000bc8

00046ac4 <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   46ac4:	3008      	adds	r0, #8
   46ac6:	4b05      	ldr	r3, [pc, #20]	; (46adc <nrfx_gpiote_channel_get+0x18>)
   46ac8:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
   46acc:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   46ace:	bf43      	ittte	mi
   46ad0:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
   46ad2:	4803      	ldrmi	r0, [pc, #12]	; (46ae0 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   46ad4:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
   46ad6:	4803      	ldrpl	r0, [pc, #12]	; (46ae4 <nrfx_gpiote_channel_get+0x20>)
}
   46ad8:	4770      	bx	lr
   46ada:	bf00      	nop
   46adc:	20000bc8 	.word	0x20000bc8
   46ae0:	0bad0000 	.word	0x0bad0000
   46ae4:	0bad0004 	.word	0x0bad0004

00046ae8 <nrfx_gpiote_init>:
{
   46ae8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   46aea:	4c0e      	ldr	r4, [pc, #56]	; (46b24 <nrfx_gpiote_init+0x3c>)
   46aec:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   46af0:	b9b5      	cbnz	r5, 46b20 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   46af2:	2260      	movs	r2, #96	; 0x60
   46af4:	4629      	mov	r1, r5
   46af6:	f104 0010 	add.w	r0, r4, #16
   46afa:	f005 fc02 	bl	4c302 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   46afe:	2006      	movs	r0, #6
   46b00:	f7e5 ffc4 	bl	2ca8c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46b04:	4b08      	ldr	r3, [pc, #32]	; (46b28 <nrfx_gpiote_init+0x40>)
    return err_code;
   46b06:	4809      	ldr	r0, [pc, #36]	; (46b2c <nrfx_gpiote_init+0x44>)
   46b08:	601d      	str	r5, [r3, #0]
   46b0a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   46b0c:	4b08      	ldr	r3, [pc, #32]	; (46b30 <nrfx_gpiote_init+0x48>)
   46b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   46b12:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   46b16:	2301      	movs	r3, #1
   46b18:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   46b1c:	6763      	str	r3, [r4, #116]	; 0x74
}
   46b1e:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   46b20:	4804      	ldr	r0, [pc, #16]	; (46b34 <nrfx_gpiote_init+0x4c>)
   46b22:	e7fc      	b.n	46b1e <nrfx_gpiote_init+0x36>
   46b24:	20000bc8 	.word	0x20000bc8
   46b28:	4000617c 	.word	0x4000617c
   46b2c:	0bad0000 	.word	0x0bad0000
   46b30:	40006000 	.word	0x40006000
   46b34:	0bad0005 	.word	0x0bad0005

00046b38 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   46b38:	4b03      	ldr	r3, [pc, #12]	; (46b48 <nrfx_gpiote_is_init+0x10>)
   46b3a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   46b3e:	3000      	adds	r0, #0
   46b40:	bf18      	it	ne
   46b42:	2001      	movne	r0, #1
   46b44:	4770      	bx	lr
   46b46:	bf00      	nop
   46b48:	20000bc8 	.word	0x20000bc8

00046b4c <nrfx_gpiote_channel_free>:
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   46b4c:	4601      	mov	r1, r0
   46b4e:	4801      	ldr	r0, [pc, #4]	; (46b54 <nrfx_gpiote_channel_free+0x8>)
   46b50:	f7ff bd38 	b.w	465c4 <nrfx_flag32_free>
   46b54:	20000c38 	.word	0x20000c38

00046b58 <nrfx_gpiote_channel_alloc>:
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   46b58:	4601      	mov	r1, r0
   46b5a:	4801      	ldr	r0, [pc, #4]	; (46b60 <nrfx_gpiote_channel_alloc+0x8>)
   46b5c:	f7ff bd0c 	b.w	46578 <nrfx_flag32_alloc>
   46b60:	20000c38 	.word	0x20000c38

00046b64 <nrfx_gpiote_trigger_enable>:
{
   46b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   46b66:	4b1e      	ldr	r3, [pc, #120]	; (46be0 <nrfx_gpiote_trigger_enable+0x7c>)
   46b68:	f100 0208 	add.w	r2, r0, #8
{
   46b6c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   46b6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   46b72:	069a      	lsls	r2, r3, #26
   46b74:	d51d      	bpl.n	46bb2 <nrfx_gpiote_trigger_enable+0x4e>
   46b76:	f013 0502 	ands.w	r5, r3, #2
   46b7a:	d11a      	bne.n	46bb2 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   46b7c:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   46b7e:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   46b80:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   46b84:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   46b88:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   46b8c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46b90:	6005      	str	r5, [r0, #0]
   46b92:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   46b94:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   46b98:	f040 0001 	orr.w	r0, r0, #1
   46b9c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   46ba0:	b129      	cbz	r1, 46bae <nrfx_gpiote_trigger_enable+0x4a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   46ba2:	2201      	movs	r2, #1
   46ba4:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   46ba8:	4a0e      	ldr	r2, [pc, #56]	; (46be4 <nrfx_gpiote_trigger_enable+0x80>)
   46baa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   46bae:	b003      	add	sp, #12
   46bb0:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   46bb2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   46bb6:	2b04      	cmp	r3, #4
   46bb8:	d104      	bne.n	46bc4 <nrfx_gpiote_trigger_enable+0x60>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   46bba:	2103      	movs	r1, #3
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   46bbc:	4620      	mov	r0, r4
   46bbe:	f009 fdad 	bl	5071c <nrf_gpio_cfg_sense_set>
}
   46bc2:	e7f4      	b.n	46bae <nrfx_gpiote_trigger_enable+0x4a>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   46bc4:	2b05      	cmp	r3, #5
   46bc6:	d009      	beq.n	46bdc <nrfx_gpiote_trigger_enable+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46bc8:	a801      	add	r0, sp, #4
   46bca:	9401      	str	r4, [sp, #4]
   46bcc:	f7ff fde4 	bl	46798 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   46bd0:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   46bd2:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   46bd6:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   46bd8:	07db      	lsls	r3, r3, #31
   46bda:	d4ee      	bmi.n	46bba <nrfx_gpiote_trigger_enable+0x56>
   46bdc:	2102      	movs	r1, #2
   46bde:	e7ed      	b.n	46bbc <nrfx_gpiote_trigger_enable+0x58>
   46be0:	20000bc8 	.word	0x20000bc8
   46be4:	40006000 	.word	0x40006000

00046be8 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   46be8:	f100 0208 	add.w	r2, r0, #8
   46bec:	4b0d      	ldr	r3, [pc, #52]	; (46c24 <nrfx_gpiote_trigger_disable+0x3c>)
   46bee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   46bf2:	0699      	lsls	r1, r3, #26
   46bf4:	d513      	bpl.n	46c1e <nrfx_gpiote_trigger_disable+0x36>
   46bf6:	079a      	lsls	r2, r3, #30
   46bf8:	d411      	bmi.n	46c1e <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   46bfa:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   46bfc:	2201      	movs	r2, #1
   46bfe:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   46c00:	009b      	lsls	r3, r3, #2
   46c02:	4909      	ldr	r1, [pc, #36]	; (46c28 <nrfx_gpiote_trigger_disable+0x40>)
   46c04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   46c08:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   46c0c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   46c10:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   46c14:	f022 0203 	bic.w	r2, r2, #3
   46c18:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   46c1c:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   46c1e:	2100      	movs	r1, #0
   46c20:	f009 bd7c 	b.w	5071c <nrf_gpio_cfg_sense_set>
   46c24:	20000bc8 	.word	0x20000bc8
   46c28:	40006000 	.word	0x40006000

00046c2c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   46c2c:	f100 0208 	add.w	r2, r0, #8
    if (!pin_in_use(pin))
   46c30:	4b0d      	ldr	r3, [pc, #52]	; (46c68 <nrfx_gpiote_pin_uninit+0x3c>)
   46c32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   46c36:	07db      	lsls	r3, r3, #31
{
   46c38:	b513      	push	{r0, r1, r4, lr}
   46c3a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   46c3c:	d511      	bpl.n	46c62 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   46c3e:	f7ff ffd3 	bl	46be8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   46c42:	4620      	mov	r0, r4
   46c44:	f7ff fdfe 	bl	46844 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46c48:	a801      	add	r0, sp, #4
   46c4a:	9401      	str	r4, [sp, #4]
   46c4c:	f7ff fda4 	bl	46798 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   46c50:	9b01      	ldr	r3, [sp, #4]
   46c52:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   46c56:	2202      	movs	r2, #2
   46c58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   46c5c:	4803      	ldr	r0, [pc, #12]	; (46c6c <nrfx_gpiote_pin_uninit+0x40>)
}
   46c5e:	b002      	add	sp, #8
   46c60:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   46c62:	4803      	ldr	r0, [pc, #12]	; (46c70 <nrfx_gpiote_pin_uninit+0x44>)
   46c64:	e7fb      	b.n	46c5e <nrfx_gpiote_pin_uninit+0x32>
   46c66:	bf00      	nop
   46c68:	20000bc8 	.word	0x20000bc8
   46c6c:	0bad0000 	.word	0x0bad0000
   46c70:	0bad0004 	.word	0x0bad0004

00046c74 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   46c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46c78:	4b67      	ldr	r3, [pc, #412]	; (46e18 <nrfx_gpiote_irq_handler+0x1a4>)
    return p_reg->INTENSET & mask;
   46c7a:	4868      	ldr	r0, [pc, #416]	; (46e1c <nrfx_gpiote_irq_handler+0x1a8>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46c7c:	4968      	ldr	r1, [pc, #416]	; (46e20 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t status = 0;
   46c7e:	2600      	movs	r6, #0
{
   46c80:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   46c82:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46c84:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46c86:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   46c88:	b135      	cbz	r5, 46c98 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   46c8a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   46c8e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46c90:	bf1e      	ittt	ne
   46c92:	601c      	strne	r4, [r3, #0]
   46c94:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   46c96:	4316      	orrne	r6, r2
        }
        mask <<= 1;
   46c98:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46c9a:	428b      	cmp	r3, r1
        mask <<= 1;
   46c9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   46ca0:	d1f1      	bne.n	46c86 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46ca2:	4f60      	ldr	r7, [pc, #384]	; (46e24 <nrfx_gpiote_irq_handler+0x1b0>)
   46ca4:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   46ca6:	b383      	cbz	r3, 46d0a <nrfx_gpiote_irq_handler+0x96>
        *p_masks = gpio_regs[i]->LATCH;
   46ca8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   46cac:	f503 7340 	add.w	r3, r3, #768	; 0x300
   46cb0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   46cb4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   46cb6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        *p_masks = gpio_regs[i]->LATCH;
   46cba:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   46cbe:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   46cc0:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   46cc4:	9300      	str	r3, [sp, #0]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   46cc6:	f10d 0910 	add.w	r9, sp, #16
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   46cca:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   46cce:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
   46cd2:	f8d9 4000 	ldr.w	r4, [r9]
   46cd6:	b9f4      	cbnz	r4, 46d16 <nrfx_gpiote_irq_handler+0xa2>
   46cd8:	f108 0820 	add.w	r8, r8, #32
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   46cdc:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
   46ce0:	f109 0904 	add.w	r9, r9, #4
   46ce4:	d1f5      	bne.n	46cd2 <nrfx_gpiote_irq_handler+0x5e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   46ce6:	603c      	str	r4, [r7, #0]
   46ce8:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
   46cea:	9900      	ldr	r1, [sp, #0]
        *p_masks = gpio_regs[i]->LATCH;
   46cec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   46cf0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   46cf4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   46cf6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   46cfa:	9b00      	ldr	r3, [sp, #0]
   46cfc:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   46d00:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   46d02:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   46d06:	4313      	orrs	r3, r2
   46d08:	d1dd      	bne.n	46cc6 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
   46d0a:	2401      	movs	r4, #1
    while (mask)
   46d0c:	2e00      	cmp	r6, #0
   46d0e:	d16a      	bne.n	46de6 <nrfx_gpiote_irq_handler+0x172>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   46d10:	b007      	add	sp, #28
   46d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   46d16:	fa94 f4a4 	rbit	r4, r4
   46d1a:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   46d1e:	4444      	add	r4, r8
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   46d20:	f104 0308 	add.w	r3, r4, #8
   46d24:	4a40      	ldr	r2, [pc, #256]	; (46e28 <nrfx_gpiote_irq_handler+0x1b4>)
   46d26:	9403      	str	r4, [sp, #12]
   46d28:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   46d2c:	f004 0307 	and.w	r3, r4, #7
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   46d30:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
    p_mask8[byte_idx] &= ~(1 << bit);
   46d34:	fa0b f003 	lsl.w	r0, fp, r3
   46d38:	ab04      	add	r3, sp, #16
   46d3a:	aa04      	add	r2, sp, #16
   46d3c:	f813 300c 	ldrb.w	r3, [r3, ip]
   46d40:	ea23 0300 	bic.w	r3, r3, r0
   46d44:	0889      	lsrs	r1, r1, #2
   46d46:	f802 300c 	strb.w	r3, [r2, ip]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46d4a:	a803      	add	r0, sp, #12
   46d4c:	f001 0507 	and.w	r5, r1, #7
   46d50:	f7ff fd22 	bl	46798 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   46d54:	9b03      	ldr	r3, [sp, #12]
   46d56:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    if (is_level(trigger))
   46d5a:	074a      	lsls	r2, r1, #29
   46d5c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   46d60:	fa5f fa85 	uxtb.w	sl, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   46d64:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   46d68:	d523      	bpl.n	46db2 <nrfx_gpiote_irq_handler+0x13e>
        call_handler(pin, trigger);
   46d6a:	4651      	mov	r1, sl
   46d6c:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   46d6e:	b2dd      	uxtb	r5, r3
   46d70:	f7ff fd20 	bl	467b4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46d74:	a803      	add	r0, sp, #12
   46d76:	9403      	str	r4, [sp, #12]
   46d78:	f7ff fd0e 	bl	46798 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   46d7c:	9b03      	ldr	r3, [sp, #12]
   46d7e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   46d82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   46d86:	f3c3 4301 	ubfx	r3, r3, #16, #2
   46d8a:	429d      	cmp	r5, r3
   46d8c:	d107      	bne.n	46d9e <nrfx_gpiote_irq_handler+0x12a>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   46d8e:	2100      	movs	r1, #0
   46d90:	4620      	mov	r0, r4
   46d92:	f009 fcc3 	bl	5071c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   46d96:	4629      	mov	r1, r5
   46d98:	4620      	mov	r0, r4
   46d9a:	f009 fcbf 	bl	5071c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46d9e:	a803      	add	r0, sp, #12
   46da0:	9403      	str	r4, [sp, #12]
   46da2:	f7ff fcf9 	bl	46798 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   46da6:	9b03      	ldr	r3, [sp, #12]
   46da8:	fa0b f303 	lsl.w	r3, fp, r3
   46dac:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   46db0:	e78f      	b.n	46cd2 <nrfx_gpiote_irq_handler+0x5e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   46db2:	2b02      	cmp	r3, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   46db4:	bf0c      	ite	eq
   46db6:	2103      	moveq	r1, #3
   46db8:	2102      	movne	r1, #2
   46dba:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   46dbc:	9301      	str	r3, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   46dbe:	f009 fcad 	bl	5071c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   46dc2:	2d03      	cmp	r5, #3
   46dc4:	d005      	beq.n	46dd2 <nrfx_gpiote_irq_handler+0x15e>
   46dc6:	9b01      	ldr	r3, [sp, #4]
   46dc8:	2b02      	cmp	r3, #2
   46dca:	d107      	bne.n	46ddc <nrfx_gpiote_irq_handler+0x168>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   46dcc:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   46dd0:	d1e5      	bne.n	46d9e <nrfx_gpiote_irq_handler+0x12a>
            call_handler(pin, trigger);
   46dd2:	4651      	mov	r1, sl
   46dd4:	4620      	mov	r0, r4
   46dd6:	f7ff fced 	bl	467b4 <call_handler>
   46dda:	e7e0      	b.n	46d9e <nrfx_gpiote_irq_handler+0x12a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   46ddc:	2b03      	cmp	r3, #3
   46dde:	d1de      	bne.n	46d9e <nrfx_gpiote_irq_handler+0x12a>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   46de0:	f1ba 0f02 	cmp.w	sl, #2
   46de4:	e7f4      	b.n	46dd0 <nrfx_gpiote_irq_handler+0x15c>
        uint32_t ch = NRF_CTZ(mask);
   46de6:	fa96 f3a6 	rbit	r3, r6
   46dea:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   46dee:	fa04 f203 	lsl.w	r2, r4, r3
   46df2:	009b      	lsls	r3, r3, #2
   46df4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   46df8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   46dfc:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   46e00:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   46e04:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   46e08:	f3c0 2005 	ubfx	r0, r0, #8, #6
   46e0c:	f3c1 4101 	ubfx	r1, r1, #16, #2
   46e10:	f7ff fcd0 	bl	467b4 <call_handler>
   46e14:	e77a      	b.n	46d0c <nrfx_gpiote_irq_handler+0x98>
   46e16:	bf00      	nop
   46e18:	40006100 	.word	0x40006100
   46e1c:	40006000 	.word	0x40006000
   46e20:	40006120 	.word	0x40006120
   46e24:	4000617c 	.word	0x4000617c
   46e28:	20000bc8 	.word	0x20000bc8

00046e2c <nvmc_word_write>:
   46e2c:	4a04      	ldr	r2, [pc, #16]	; (46e40 <nvmc_word_write+0x14>)
   46e2e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   46e32:	07db      	lsls	r3, r3, #31
   46e34:	d5fb      	bpl.n	46e2e <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   46e36:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   46e38:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   46e3c:	4770      	bx	lr
   46e3e:	bf00      	nop
   46e40:	4001e000 	.word	0x4001e000

00046e44 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   46e44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   46e48:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   46e4a:	fbb0 f3f2 	udiv	r3, r0, r2
   46e4e:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   46e52:	b973      	cbnz	r3, 46e72 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   46e54:	4b08      	ldr	r3, [pc, #32]	; (46e78 <nrfx_nvmc_page_erase+0x34>)
   46e56:	2202      	movs	r2, #2
   46e58:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   46e5c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   46e60:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   46e64:	07d2      	lsls	r2, r2, #31
   46e66:	d5fb      	bpl.n	46e60 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   46e68:	2200      	movs	r2, #0
   46e6a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   46e6e:	4803      	ldr	r0, [pc, #12]	; (46e7c <nrfx_nvmc_page_erase+0x38>)
   46e70:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   46e72:	4803      	ldr	r0, [pc, #12]	; (46e80 <nrfx_nvmc_page_erase+0x3c>)
}
   46e74:	4770      	bx	lr
   46e76:	bf00      	nop
   46e78:	4001e000 	.word	0x4001e000
   46e7c:	0bad0000 	.word	0x0bad0000
   46e80:	0bad000a 	.word	0x0bad000a

00046e84 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   46e84:	b510      	push	{r4, lr}
   46e86:	4c05      	ldr	r4, [pc, #20]	; (46e9c <nrfx_nvmc_word_write+0x18>)
   46e88:	2301      	movs	r3, #1
   46e8a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   46e8e:	f7ff ffcd 	bl	46e2c <nvmc_word_write>
   46e92:	2300      	movs	r3, #0
   46e94:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   46e98:	bd10      	pop	{r4, pc}
   46e9a:	bf00      	nop
   46e9c:	4001e000 	.word	0x4001e000

00046ea0 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   46ea0:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   46ea2:	4c14      	ldr	r4, [pc, #80]	; (46ef4 <nrfx_power_init+0x54>)
   46ea4:	7822      	ldrb	r2, [r4, #0]
   46ea6:	bb1a      	cbnz	r2, 46ef0 <nrfx_power_init+0x50>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   46ea8:	7802      	ldrb	r2, [r0, #0]
    if (enable && nrf52_errata_197())
   46eaa:	f3c2 0340 	ubfx	r3, r2, #1, #1
   46eae:	b15b      	cbz	r3, 46ec8 <nrfx_power_init+0x28>
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46eb0:	4b11      	ldr	r3, [pc, #68]	; (46ef8 <nrfx_power_init+0x58>)
            if (var1 == 0x08)
   46eb2:	681b      	ldr	r3, [r3, #0]
   46eb4:	2b08      	cmp	r3, #8
   46eb6:	d119      	bne.n	46eec <nrfx_power_init+0x4c>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   46eb8:	4b10      	ldr	r3, [pc, #64]	; (46efc <nrfx_power_init+0x5c>)
                switch(var2)
   46eba:	681b      	ldr	r3, [r3, #0]
   46ebc:	2b02      	cmp	r3, #2
   46ebe:	f04f 0301 	mov.w	r3, #1
   46ec2:	d101      	bne.n	46ec8 <nrfx_power_init+0x28>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   46ec4:	490e      	ldr	r1, [pc, #56]	; (46f00 <nrfx_power_init+0x60>)
   46ec6:	600b      	str	r3, [r1, #0]
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   46ec8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   46ecc:	f002 0201 	and.w	r2, r2, #1
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   46ed0:	f8c1 3580 	str.w	r3, [r1, #1408]	; 0x580
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   46ed4:	2000      	movs	r0, #0
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   46ed6:	f8c1 2578 	str.w	r2, [r1, #1400]	; 0x578
   46eda:	f7e5 fdfb 	bl	2cad4 <arch_irq_is_enabled>
   46ede:	b908      	cbnz	r0, 46ee4 <nrfx_power_init+0x44>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   46ee0:	f7e5 fdd4 	bl	2ca8c <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   46ee4:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
   46ee6:	4807      	ldr	r0, [pc, #28]	; (46f04 <nrfx_power_init+0x64>)
    m_initialized = true;
   46ee8:	7023      	strb	r3, [r4, #0]
}
   46eea:	bd10      	pop	{r4, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   46eec:	2301      	movs	r3, #1
   46eee:	e7eb      	b.n	46ec8 <nrfx_power_init+0x28>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   46ef0:	4805      	ldr	r0, [pc, #20]	; (46f08 <nrfx_power_init+0x68>)
   46ef2:	e7fa      	b.n	46eea <nrfx_power_init+0x4a>
   46ef4:	20006da7 	.word	0x20006da7
   46ef8:	10000130 	.word	0x10000130
   46efc:	10000134 	.word	0x10000134
   46f00:	40000638 	.word	0x40000638
   46f04:	0bad0000 	.word	0x0bad0000
   46f08:	0bad000c 	.word	0x0bad000c

00046f0c <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
   46f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   46f10:	f44f 7260 	mov.w	r2, #896	; 0x380
   46f14:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
   46f18:	4b01      	ldr	r3, [pc, #4]	; (46f20 <nrfx_power_usbevt_uninit+0x14>)
   46f1a:	2200      	movs	r2, #0
   46f1c:	601a      	str	r2, [r3, #0]
}
   46f1e:	4770      	bx	lr
   46f20:	20006864 	.word	0x20006864

00046f24 <nrfx_power_usbevt_init>:
{
   46f24:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
   46f26:	f7ff fff1 	bl	46f0c <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   46f2a:	6803      	ldr	r3, [r0, #0]
   46f2c:	b10b      	cbz	r3, 46f32 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
   46f2e:	4a01      	ldr	r2, [pc, #4]	; (46f34 <nrfx_power_usbevt_init+0x10>)
   46f30:	6013      	str	r3, [r2, #0]
}
   46f32:	bd08      	pop	{r3, pc}
   46f34:	20006864 	.word	0x20006864

00046f38 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
   46f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   46f3c:	b510      	push	{r4, lr}
   46f3e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   46f42:	0762      	lsls	r2, r4, #29
   46f44:	d507      	bpl.n	46f56 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
   46f46:	f44f 7084 	mov.w	r0, #264	; 0x108
   46f4a:	f009 fc04 	bl	50756 <nrf_power_event_get_and_clear.constprop.3>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   46f4e:	b110      	cbz	r0, 46f56 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   46f50:	4b1e      	ldr	r3, [pc, #120]	; (46fcc <nrfx_power_irq_handler+0x94>)
   46f52:	681b      	ldr	r3, [r3, #0]
   46f54:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   46f56:	06a3      	lsls	r3, r4, #26
   46f58:	d508      	bpl.n	46f6c <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
   46f5a:	f44f 708a 	mov.w	r0, #276	; 0x114
   46f5e:	f009 fbfa 	bl	50756 <nrf_power_event_get_and_clear.constprop.3>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   46f62:	b118      	cbz	r0, 46f6c <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   46f64:	4b1a      	ldr	r3, [pc, #104]	; (46fd0 <nrfx_power_irq_handler+0x98>)
   46f66:	2000      	movs	r0, #0
   46f68:	681b      	ldr	r3, [r3, #0]
   46f6a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   46f6c:	0660      	lsls	r0, r4, #25
   46f6e:	d508      	bpl.n	46f82 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
   46f70:	f44f 708c 	mov.w	r0, #280	; 0x118
   46f74:	f009 fbef 	bl	50756 <nrf_power_event_get_and_clear.constprop.3>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   46f78:	b118      	cbz	r0, 46f82 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   46f7a:	4b15      	ldr	r3, [pc, #84]	; (46fd0 <nrfx_power_irq_handler+0x98>)
   46f7c:	2001      	movs	r0, #1
   46f7e:	681b      	ldr	r3, [r3, #0]
   46f80:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   46f82:	0621      	lsls	r1, r4, #24
   46f84:	d508      	bpl.n	46f98 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
   46f86:	f44f 708e 	mov.w	r0, #284	; 0x11c
   46f8a:	f009 fbe4 	bl	50756 <nrf_power_event_get_and_clear.constprop.3>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   46f8e:	b118      	cbz	r0, 46f98 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   46f90:	4b10      	ldr	r3, [pc, #64]	; (46fd4 <nrfx_power_irq_handler+0x9c>)
   46f92:	2000      	movs	r0, #0
   46f94:	681b      	ldr	r3, [r3, #0]
   46f96:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   46f98:	05e2      	lsls	r2, r4, #23
   46f9a:	d508      	bpl.n	46fae <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
   46f9c:	f44f 7090 	mov.w	r0, #288	; 0x120
   46fa0:	f009 fbd9 	bl	50756 <nrf_power_event_get_and_clear.constprop.3>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   46fa4:	b118      	cbz	r0, 46fae <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   46fa6:	4b0b      	ldr	r3, [pc, #44]	; (46fd4 <nrfx_power_irq_handler+0x9c>)
   46fa8:	2001      	movs	r0, #1
   46faa:	681b      	ldr	r3, [r3, #0]
   46fac:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   46fae:	05a3      	lsls	r3, r4, #22
   46fb0:	d50a      	bpl.n	46fc8 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
   46fb2:	f44f 7092 	mov.w	r0, #292	; 0x124
   46fb6:	f009 fbce 	bl	50756 <nrf_power_event_get_and_clear.constprop.3>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   46fba:	b128      	cbz	r0, 46fc8 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   46fbc:	4b05      	ldr	r3, [pc, #20]	; (46fd4 <nrfx_power_irq_handler+0x9c>)
   46fbe:	2002      	movs	r0, #2
   46fc0:	681b      	ldr	r3, [r3, #0]
    }
#endif
}
   46fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   46fc6:	4718      	bx	r3
}
   46fc8:	bd10      	pop	{r4, pc}
   46fca:	bf00      	nop
   46fcc:	2000685c 	.word	0x2000685c
   46fd0:	20006860 	.word	0x20006860
   46fd4:	20006864 	.word	0x20006864

00046fd8 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46fd8:	4b03      	ldr	r3, [pc, #12]	; (46fe8 <nrf52_errata_166+0x10>)
            if (var1 == 0x08)
   46fda:	6818      	ldr	r0, [r3, #0]
}
   46fdc:	f1a0 0308 	sub.w	r3, r0, #8
   46fe0:	4258      	negs	r0, r3
   46fe2:	4158      	adcs	r0, r3
   46fe4:	4770      	bx	lr
   46fe6:	bf00      	nop
   46fe8:	10000130 	.word	0x10000130

00046fec <nrf52_errata_187>:
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   46fec:	4b05      	ldr	r3, [pc, #20]	; (47004 <nrf52_errata_187+0x18>)
   46fee:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   46ff0:	3b04      	subs	r3, #4
            if (var1 == 0x08)
   46ff2:	681b      	ldr	r3, [r3, #0]
   46ff4:	2b08      	cmp	r3, #8
   46ff6:	d103      	bne.n	47000 <nrf52_errata_187+0x14>
                switch(var2)
   46ff8:	3000      	adds	r0, #0
   46ffa:	bf18      	it	ne
   46ffc:	2001      	movne	r0, #1
   46ffe:	4770      	bx	lr
        return false;
   47000:	2000      	movs	r0, #0
}
   47002:	4770      	bx	lr
   47004:	10000134 	.word	0x10000134

00047008 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   47008:	4b05      	ldr	r3, [pc, #20]	; (47020 <ep_state_access+0x18>)
   4700a:	f010 0f80 	tst.w	r0, #128	; 0x80
   4700e:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
   47012:	bf08      	it	eq
   47014:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
   47016:	f000 000f 	and.w	r0, r0, #15
}
   4701a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   4701e:	4770      	bx	lr
   47020:	200069d8 	.word	0x200069d8

00047024 <usbd_dma_pending_clear>:
 *
 * Internal function to clear the flag informing about EasyDMA transfer pending.
 * This function is called always just after the finished EasyDMA transfer is detected.
 */
static inline void usbd_dma_pending_clear(void)
{
   47024:	b508      	push	{r3, lr}
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   47026:	f7ff ffd7 	bl	46fd8 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   4702a:	b110      	cbz	r0, 47032 <usbd_dma_pending_clear+0xe>
    {
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   4702c:	4b03      	ldr	r3, [pc, #12]	; (4703c <usbd_dma_pending_clear+0x18>)
   4702e:	2200      	movs	r2, #0
   47030:	601a      	str	r2, [r3, #0]
    }
    m_dma_pending = false;
   47032:	4b03      	ldr	r3, [pc, #12]	; (47040 <usbd_dma_pending_clear+0x1c>)
   47034:	2200      	movs	r2, #0
   47036:	701a      	strb	r2, [r3, #0]
}
   47038:	bd08      	pop	{r3, pc}
   4703a:	bf00      	nop
   4703c:	40027c1c 	.word	0x40027c1c
   47040:	20006da9 	.word	0x20006da9

00047044 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   47044:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
   47046:	4a08      	ldr	r2, [pc, #32]	; (47068 <ev_usbreset_handler+0x24>)
   47048:	2300      	movs	r3, #0
   4704a:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   4704c:	4a07      	ldr	r2, [pc, #28]	; (4706c <ev_usbreset_handler+0x28>)

    const nrfx_usbd_evt_t evt = {
   4704e:	9301      	str	r3, [sp, #4]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   47050:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   47052:	2301      	movs	r3, #1
   47054:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   47058:	4b05      	ldr	r3, [pc, #20]	; (47070 <ev_usbreset_handler+0x2c>)
   4705a:	a801      	add	r0, sp, #4
   4705c:	681b      	ldr	r3, [r3, #0]
   4705e:	4798      	blx	r3
}
   47060:	b003      	add	sp, #12
   47062:	f85d fb04 	ldr.w	pc, [sp], #4
   47066:	bf00      	nop
   47068:	20006da8 	.word	0x20006da8
   4706c:	20006dab 	.word	0x20006dab
   47070:	20006a68 	.word	0x20006a68

00047074 <usbd_errata_187_211_begin>:

/**
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
   47074:	b510      	push	{r4, lr}
	__asm__ volatile(
   47076:	f04f 0320 	mov.w	r3, #32
   4707a:	f3ef 8411 	mrs	r4, BASEPRI
   4707e:	f383 8812 	msr	BASEPRI_MAX, r3
   47082:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   47086:	4b08      	ldr	r3, [pc, #32]	; (470a8 <usbd_errata_187_211_begin+0x34>)
   47088:	4a08      	ldr	r2, [pc, #32]	; (470ac <usbd_errata_187_211_begin+0x38>)
   4708a:	6818      	ldr	r0, [r3, #0]
   4708c:	2103      	movs	r1, #3
   4708e:	b948      	cbnz	r0, 470a4 <usbd_errata_187_211_begin+0x30>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   47090:	f249 3075 	movw	r0, #37749	; 0x9375
   47094:	6018      	str	r0, [r3, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   47096:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   47098:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
   4709a:	f384 8811 	msr	BASEPRI, r4
   4709e:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   470a2:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   470a4:	6011      	str	r1, [r2, #0]
   470a6:	e7f8      	b.n	4709a <usbd_errata_187_211_begin+0x26>
   470a8:	4006ec00 	.word	0x4006ec00
   470ac:	4006ed14 	.word	0x4006ed14

000470b0 <usbd_errata_187_211_end>:

/**
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
   470b0:	b510      	push	{r4, lr}
	__asm__ volatile(
   470b2:	f04f 0320 	mov.w	r3, #32
   470b6:	f3ef 8411 	mrs	r4, BASEPRI
   470ba:	f383 8812 	msr	BASEPRI_MAX, r3
   470be:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   470c2:	4b08      	ldr	r3, [pc, #32]	; (470e4 <usbd_errata_187_211_end+0x34>)
   470c4:	4a08      	ldr	r2, [pc, #32]	; (470e8 <usbd_errata_187_211_end+0x38>)
   470c6:	6818      	ldr	r0, [r3, #0]
   470c8:	b948      	cbnz	r0, 470de <usbd_errata_187_211_end+0x2e>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   470ca:	f249 3175 	movw	r1, #37749	; 0x9375
   470ce:	6019      	str	r1, [r3, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   470d0:	6010      	str	r0, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   470d2:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
   470d4:	f384 8811 	msr	BASEPRI, r4
   470d8:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   470dc:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   470de:	2300      	movs	r3, #0
   470e0:	6013      	str	r3, [r2, #0]
   470e2:	e7f7      	b.n	470d4 <usbd_errata_187_211_end+0x24>
   470e4:	4006ec00 	.word	0x4006ec00
   470e8:	4006ed14 	.word	0x4006ed14

000470ec <nrfx_usbd_feeder_flash>:
{
   470ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   470ee:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   470f0:	4f0b      	ldr	r7, [pc, #44]	; (47120 <nrfx_usbd_feeder_flash+0x34>)
   470f2:	4295      	cmp	r5, r2
   470f4:	bf28      	it	cs
   470f6:	4615      	movcs	r5, r2
{
   470f8:	460c      	mov	r4, r1
   470fa:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   470fc:	462a      	mov	r2, r5
   470fe:	6809      	ldr	r1, [r1, #0]
   47100:	4638      	mov	r0, r7
   47102:	f005 f8f3 	bl	4c2ec <memcpy>
    p_transfer->size -= tx_size;
   47106:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   47108:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
   4710a:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
   4710c:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
   47110:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   47112:	441d      	add	r5, r3
}
   47114:	3000      	adds	r0, #0
    p_transfer->p_data.addr += tx_size;
   47116:	6025      	str	r5, [r4, #0]
}
   47118:	bf18      	it	ne
   4711a:	2001      	movne	r0, #1
   4711c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4711e:	bf00      	nop
   47120:	20006a6c 	.word	0x20006a6c

00047124 <nrfx_usbd_feeder_flash_zlp>:
{
   47124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
   47126:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   47128:	4294      	cmp	r4, r2
   4712a:	bf28      	it	cs
   4712c:	4614      	movcs	r4, r2
{
   4712e:	4606      	mov	r6, r0
   47130:	460d      	mov	r5, r1
    if (tx_size != 0)
   47132:	b18c      	cbz	r4, 47158 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   47134:	4f09      	ldr	r7, [pc, #36]	; (4715c <nrfx_usbd_feeder_flash_zlp+0x38>)
   47136:	6809      	ldr	r1, [r1, #0]
   47138:	4622      	mov	r2, r4
   4713a:	4638      	mov	r0, r7
   4713c:	f005 f8d6 	bl	4c2ec <memcpy>
        p_next->p_data.tx = p_buffer;
   47140:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
   47142:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
   47144:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   47146:	1b1b      	subs	r3, r3, r4
   47148:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   4714a:	682b      	ldr	r3, [r5, #0]
}
   4714c:	1c20      	adds	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
   4714e:	4423      	add	r3, r4
   47150:	602b      	str	r3, [r5, #0]
}
   47152:	bf18      	it	ne
   47154:	2001      	movne	r0, #1
   47156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
   47158:	6004      	str	r4, [r0, #0]
   4715a:	e7f2      	b.n	47142 <nrfx_usbd_feeder_flash_zlp+0x1e>
   4715c:	20006a6c 	.word	0x20006a6c

00047160 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
   47160:	4b1d      	ldr	r3, [pc, #116]	; (471d8 <ev_usbevent_handler+0x78>)
{
   47162:	b513      	push	{r0, r1, r4, lr}
   47164:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   47168:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   4716c:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
   4716e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   47172:	d50b      	bpl.n	4718c <ev_usbevent_handler+0x2c>
        m_bus_suspend = true;
   47174:	4b19      	ldr	r3, [pc, #100]	; (471dc <ev_usbevent_handler+0x7c>)
   47176:	2201      	movs	r2, #1
   47178:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   4717a:	2300      	movs	r3, #0
   4717c:	9301      	str	r3, [sp, #4]
   4717e:	2302      	movs	r3, #2
   47180:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   47184:	4b16      	ldr	r3, [pc, #88]	; (471e0 <ev_usbevent_handler+0x80>)
   47186:	a801      	add	r0, sp, #4
   47188:	681b      	ldr	r3, [r3, #0]
   4718a:	4798      	blx	r3
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   4718c:	05a2      	lsls	r2, r4, #22
   4718e:	d50a      	bpl.n	471a6 <ev_usbevent_handler+0x46>
        m_bus_suspend = false;
   47190:	4a12      	ldr	r2, [pc, #72]	; (471dc <ev_usbevent_handler+0x7c>)
   47192:	2300      	movs	r3, #0
        const nrfx_usbd_evt_t evt = {
   47194:	9301      	str	r3, [sp, #4]
        m_bus_suspend = false;
   47196:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   47198:	2303      	movs	r3, #3
   4719a:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   4719e:	4b10      	ldr	r3, [pc, #64]	; (471e0 <ev_usbevent_handler+0x80>)
   471a0:	a801      	add	r0, sp, #4
   471a2:	681b      	ldr	r3, [r3, #0]
   471a4:	4798      	blx	r3
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   471a6:	0563      	lsls	r3, r4, #21
   471a8:	d513      	bpl.n	471d2 <ev_usbevent_handler+0x72>
        if (m_bus_suspend)
   471aa:	4a0c      	ldr	r2, [pc, #48]	; (471dc <ev_usbevent_handler+0x7c>)
   471ac:	7813      	ldrb	r3, [r2, #0]
   471ae:	b183      	cbz	r3, 471d2 <ev_usbevent_handler+0x72>
            m_bus_suspend = false;
   471b0:	2300      	movs	r3, #0
   471b2:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   471b4:	4a08      	ldr	r2, [pc, #32]	; (471d8 <ev_usbevent_handler+0x78>)
   471b6:	2101      	movs	r1, #1
   471b8:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   471bc:	6591      	str	r1, [r2, #88]	; 0x58
   471be:	3258      	adds	r2, #88	; 0x58
            m_event_handler(&evt);
   471c0:	a801      	add	r0, sp, #4
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   471c2:	6812      	ldr	r2, [r2, #0]
            const nrfx_usbd_evt_t evt = {
   471c4:	9301      	str	r3, [sp, #4]
   471c6:	2304      	movs	r3, #4
   471c8:	f88d 3004 	strb.w	r3, [sp, #4]
            m_event_handler(&evt);
   471cc:	4b04      	ldr	r3, [pc, #16]	; (471e0 <ev_usbevent_handler+0x80>)
   471ce:	681b      	ldr	r3, [r3, #0]
   471d0:	4798      	blx	r3
}
   471d2:	b002      	add	sp, #8
   471d4:	bd10      	pop	{r4, pc}
   471d6:	bf00      	nop
   471d8:	40027000 	.word	0x40027000
   471dc:	20006da8 	.word	0x20006da8
   471e0:	20006a68 	.word	0x20006a68

000471e4 <ev_sof_handler>:
{
   471e4:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
   471e6:	2300      	movs	r3, #0
   471e8:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   471ec:	4b0b      	ldr	r3, [pc, #44]	; (4721c <ev_sof_handler+0x38>)
   471ee:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
   471f2:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   471f6:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
   471fa:	4a09      	ldr	r2, [pc, #36]	; (47220 <ev_sof_handler+0x3c>)
    if (size_isoout == 0)
   471fc:	2b00      	cmp	r3, #0
   471fe:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   47200:	bf0c      	ite	eq
   47202:	f44f 7180 	moveq.w	r1, #256	; 0x100
   47206:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
   4720a:	430b      	orrs	r3, r1
   4720c:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
   4720e:	4b05      	ldr	r3, [pc, #20]	; (47224 <ev_sof_handler+0x40>)
   47210:	a801      	add	r0, sp, #4
   47212:	681b      	ldr	r3, [r3, #0]
   47214:	4798      	blx	r3
}
   47216:	b003      	add	sp, #12
   47218:	f85d fb04 	ldr.w	pc, [sp], #4
   4721c:	40027000 	.word	0x40027000
   47220:	20006944 	.word	0x20006944
   47224:	20006a68 	.word	0x20006a68

00047228 <atomic_and.constprop.17>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   47228:	4b07      	ldr	r3, [pc, #28]	; (47248 <atomic_and.constprop.17+0x20>)
}
   4722a:	f3bf 8f5b 	dmb	ish
   4722e:	4602      	mov	r2, r0
   47230:	e853 0f00 	ldrex	r0, [r3]
   47234:	ea00 0102 	and.w	r1, r0, r2
   47238:	e843 1c00 	strex	ip, r1, [r3]
   4723c:	f1bc 0f00 	cmp.w	ip, #0
   47240:	d1f6      	bne.n	47230 <atomic_and.constprop.17+0x8>
   47242:	f3bf 8f5b 	dmb	ish
   47246:	4770      	bx	lr
   47248:	200068d4 	.word	0x200068d4

0004724c <nrf_usbd_ep0in_dma_handler>:
{
   4724c:	b508      	push	{r3, lr}
    usbd_dma_pending_clear();
   4724e:	f7ff fee9 	bl	47024 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   47252:	4b08      	ldr	r3, [pc, #32]	; (47274 <nrf_usbd_ep0in_dma_handler+0x28>)
   47254:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
   47258:	2a03      	cmp	r2, #3
   4725a:	d105      	bne.n	47268 <nrf_usbd_ep0in_dma_handler+0x1c>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   4725c:	f06f 0001 	mvn.w	r0, #1
}
   47260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47264:	f7ff bfe0 	b.w	47228 <atomic_and.constprop.17>
    else if (p_state->handler.feeder == NULL)
   47268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   4726c:	2b00      	cmp	r3, #0
   4726e:	d0f5      	beq.n	4725c <nrf_usbd_ep0in_dma_handler+0x10>
}
   47270:	bd08      	pop	{r3, pc}
   47272:	bf00      	nop
   47274:	20006948 	.word	0x20006948

00047278 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
   47278:	2201      	movs	r2, #1
{
   4727a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
   4727c:	fa02 f501 	lsl.w	r5, r2, r1
   47280:	491c      	ldr	r1, [pc, #112]	; (472f4 <usbd_ep_data_handler+0x7c>)
   47282:	4e1d      	ldr	r6, [pc, #116]	; (472f8 <usbd_ep_data_handler+0x80>)
   47284:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   47286:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
   4728a:	ea43 0305 	orr.w	r3, r3, r5
{
   4728e:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
   47290:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   47292:	d024      	beq.n	472de <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   47294:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   47298:	4b18      	ldr	r3, [pc, #96]	; (472fc <usbd_ep_data_handler+0x84>)
   4729a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   4729e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   472a2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   472a6:	681a      	ldr	r2, [r3, #0]
    if (ret)
   472a8:	b132      	cbz	r2, 472b8 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   472aa:	2200      	movs	r2, #0
   472ac:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
   472ae:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   472b0:	681b      	ldr	r3, [r3, #0]
   472b2:	d011      	beq.n	472d8 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
   472b4:	f009 fab9 	bl	5082a <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   472b8:	6831      	ldr	r1, [r6, #0]
   472ba:	4029      	ands	r1, r5
   472bc:	d10a      	bne.n	472d4 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   472be:	2306      	movs	r3, #6
   472c0:	f88d 3004 	strb.w	r3, [sp, #4]
   472c4:	f88d 4006 	strb.w	r4, [sp, #6]
   472c8:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
   472cc:	4b0c      	ldr	r3, [pc, #48]	; (47300 <usbd_ep_data_handler+0x88>)
   472ce:	a801      	add	r0, sp, #4
   472d0:	681b      	ldr	r3, [r3, #0]
   472d2:	4798      	blx	r3
}
   472d4:	b002      	add	sp, #8
   472d6:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
   472d8:	f7ff ffb8 	bl	4724c <nrf_usbd_ep0in_dma_handler>
   472dc:	e7ec      	b.n	472b8 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   472de:	6833      	ldr	r3, [r6, #0]
   472e0:	421d      	tst	r5, r3
   472e2:	d1f7      	bne.n	472d4 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   472e4:	2306      	movs	r3, #6
   472e6:	f88d 3004 	strb.w	r3, [sp, #4]
   472ea:	f88d 0006 	strb.w	r0, [sp, #6]
   472ee:	f88d 2007 	strb.w	r2, [sp, #7]
   472f2:	e7eb      	b.n	472cc <usbd_ep_data_handler+0x54>
   472f4:	20006944 	.word	0x20006944
   472f8:	200068d4 	.word	0x200068d4
   472fc:	00053db0 	.word	0x00053db0
   47300:	20006a68 	.word	0x20006a68

00047304 <ev_setup_data_handler>:
{
   47304:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   47306:	4b05      	ldr	r3, [pc, #20]	; (4731c <ev_setup_data_handler+0x18>)
   47308:	781a      	ldrb	r2, [r3, #0]
   4730a:	4610      	mov	r0, r2
   4730c:	f009 fa81 	bl	50812 <ep2bit>
}
   47310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   47314:	4601      	mov	r1, r0
   47316:	4610      	mov	r0, r2
   47318:	f7ff bfae 	b.w	47278 <usbd_ep_data_handler>
   4731c:	20006dab 	.word	0x20006dab

00047320 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   47320:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   47322:	f7ff fe7f 	bl	47024 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   47326:	4b0f      	ldr	r3, [pc, #60]	; (47364 <ev_dma_epin8_handler+0x44>)
   47328:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
   4732c:	2a03      	cmp	r2, #3
   4732e:	d106      	bne.n	4733e <ev_dma_epin8_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47330:	f46f 7080 	mvn.w	r0, #256	; 0x100
   47334:	f7ff ff78 	bl	47228 <atomic_and.constprop.17>
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   47338:	b003      	add	sp, #12
   4733a:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (p_state->handler.feeder == NULL)
   4733e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   47342:	2b00      	cmp	r3, #0
   47344:	d1f8      	bne.n	47338 <ev_dma_epin8_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47346:	f46f 7080 	mvn.w	r0, #256	; 0x100
   4734a:	f7ff ff6d 	bl	47228 <atomic_and.constprop.17>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   4734e:	2306      	movs	r3, #6
   47350:	f88d 3004 	strb.w	r3, [sp, #4]
   47354:	2388      	movs	r3, #136	; 0x88
   47356:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   4735a:	4b03      	ldr	r3, [pc, #12]	; (47368 <ev_dma_epin8_handler+0x48>)
   4735c:	a801      	add	r0, sp, #4
   4735e:	681b      	ldr	r3, [r3, #0]
   47360:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   47362:	e7e9      	b.n	47338 <ev_dma_epin8_handler+0x18>
   47364:	20006948 	.word	0x20006948
   47368:	20006a68 	.word	0x20006a68

0004736c <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   4736c:	b507      	push	{r0, r1, r2, lr}
    usbd_dma_pending_clear();
   4736e:	f7ff fe59 	bl	47024 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   47372:	4b0c      	ldr	r3, [pc, #48]	; (473a4 <ev_dma_epout8_handler+0x38>)
   47374:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
   47378:	2a03      	cmp	r2, #3
   4737a:	d010      	beq.n	4739e <ev_dma_epout8_handler+0x32>
    else if (p_state->handler.consumer == NULL)
   4737c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   47380:	b96b      	cbnz	r3, 4739e <ev_dma_epout8_handler+0x32>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47382:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   47386:	f7ff ff4f 	bl	47228 <atomic_and.constprop.17>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   4738a:	2306      	movs	r3, #6
   4738c:	f88d 3004 	strb.w	r3, [sp, #4]
   47390:	2308      	movs	r3, #8
   47392:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
   47396:	4b04      	ldr	r3, [pc, #16]	; (473a8 <ev_dma_epout8_handler+0x3c>)
   47398:	a801      	add	r0, sp, #4
   4739a:	681b      	ldr	r3, [r3, #0]
   4739c:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   4739e:	b003      	add	sp, #12
   473a0:	f85d fb04 	ldr.w	pc, [sp], #4
   473a4:	20006948 	.word	0x20006948
   473a8:	20006a68 	.word	0x20006a68

000473ac <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   473ac:	4a02      	ldr	r2, [pc, #8]	; (473b8 <nrfx_usbd_uninit+0xc>)
   473ae:	2300      	movs	r3, #0
   473b0:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   473b2:	4a02      	ldr	r2, [pc, #8]	; (473bc <nrfx_usbd_uninit+0x10>)
   473b4:	7013      	strb	r3, [r2, #0]
    return;
}
   473b6:	4770      	bx	lr
   473b8:	20006a68 	.word	0x20006a68
   473bc:	20006daa 	.word	0x20006daa

000473c0 <nrfx_usbd_enable>:
    p_reg->EVENTCAUSE = flags;
   473c0:	4b43      	ldr	r3, [pc, #268]	; (474d0 <nrfx_usbd_enable+0x110>)
   473c2:	f44f 6200 	mov.w	r2, #2048	; 0x800


void nrfx_usbd_enable(void)
{
   473c6:	b510      	push	{r4, lr}
   473c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   473cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   473d0:	f7ff fe0c 	bl	46fec <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   473d4:	b108      	cbz	r0, 473da <nrfx_usbd_enable+0x1a>
        usbd_errata_187_211_begin();
   473d6:	f7ff fe4d 	bl	47074 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   473da:	f7ff fdfd 	bl	46fd8 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   473de:	b1b0      	cbz	r0, 4740e <nrfx_usbd_enable+0x4e>
	__asm__ volatile(
   473e0:	f04f 0320 	mov.w	r3, #32
   473e4:	f3ef 8411 	mrs	r4, BASEPRI
   473e8:	f383 8812 	msr	BASEPRI_MAX, r3
   473ec:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   473f0:	4b38      	ldr	r3, [pc, #224]	; (474d4 <nrfx_usbd_enable+0x114>)
   473f2:	4a39      	ldr	r2, [pc, #228]	; (474d8 <nrfx_usbd_enable+0x118>)
   473f4:	6818      	ldr	r0, [r3, #0]
   473f6:	21c0      	movs	r1, #192	; 0xc0
   473f8:	2800      	cmp	r0, #0
   473fa:	d163      	bne.n	474c4 <nrfx_usbd_enable+0x104>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   473fc:	f249 3075 	movw	r0, #37749	; 0x9375
   47400:	6018      	str	r0, [r3, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   47402:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   47404:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
   47406:	f384 8811 	msr	BASEPRI, r4
   4740a:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   4740e:	4b30      	ldr	r3, [pc, #192]	; (474d0 <nrfx_usbd_enable+0x110>)
   47410:	2201      	movs	r2, #1
   47412:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   47416:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   4741a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   4741e:	0512      	lsls	r2, r2, #20
   47420:	d5fb      	bpl.n	4741a <nrfx_usbd_enable+0x5a>
    p_reg->EVENTCAUSE = flags;
   47422:	f44f 6200 	mov.w	r2, #2048	; 0x800
   47426:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   4742a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   4742e:	f7ff fdd3 	bl	46fd8 <nrf52_errata_166>
    if (nrfx_usbd_errata_171())
   47432:	b1a8      	cbz	r0, 47460 <nrfx_usbd_enable+0xa0>
	__asm__ volatile(
   47434:	f04f 0320 	mov.w	r3, #32
   47438:	f3ef 8411 	mrs	r4, BASEPRI
   4743c:	f383 8812 	msr	BASEPRI_MAX, r3
   47440:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   47444:	4b23      	ldr	r3, [pc, #140]	; (474d4 <nrfx_usbd_enable+0x114>)
   47446:	4a24      	ldr	r2, [pc, #144]	; (474d8 <nrfx_usbd_enable+0x118>)
   47448:	6818      	ldr	r0, [r3, #0]
   4744a:	2800      	cmp	r0, #0
   4744c:	d13c      	bne.n	474c8 <nrfx_usbd_enable+0x108>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   4744e:	f249 3175 	movw	r1, #37749	; 0x9375
   47452:	6019      	str	r1, [r3, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   47454:	6010      	str	r0, [r2, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   47456:	6019      	str	r1, [r3, #0]
	__asm__ volatile(
   47458:	f384 8811 	msr	BASEPRI, r4
   4745c:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   47460:	f7ff fdc4 	bl	46fec <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   47464:	b130      	cbz	r0, 47474 <nrfx_usbd_enable+0xb4>
        usbd_errata_187_211_end();
   47466:	f7ff fe23 	bl	470b0 <usbd_errata_187_211_end>
   4746a:	f7ff fdbf 	bl	46fec <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   4746e:	b108      	cbz	r0, 47474 <nrfx_usbd_enable+0xb4>
#endif
    {
        usbd_errata_187_211_begin();
   47470:	f7ff fe00 	bl	47074 <usbd_errata_187_211_begin>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   47474:	f7ff fdb0 	bl	46fd8 <nrf52_errata_166>
    }

    if (nrfx_usbd_errata_166())
   47478:	b148      	cbz	r0, 4748e <nrfx_usbd_enable+0xce>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   4747a:	4b18      	ldr	r3, [pc, #96]	; (474dc <nrfx_usbd_enable+0x11c>)
   4747c:	f240 72e3 	movw	r2, #2019	; 0x7e3
   47480:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   47482:	2240      	movs	r2, #64	; 0x40
   47484:	605a      	str	r2, [r3, #4]
  __ASM volatile ("isb 0xF":::"memory");
   47486:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   4748a:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   4748e:	4b10      	ldr	r3, [pc, #64]	; (474d0 <nrfx_usbd_enable+0x110>)
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   47490:	2100      	movs	r1, #0
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   47492:	2280      	movs	r2, #128	; 0x80
   47494:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   47498:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   4749c:	4b10      	ldr	r3, [pc, #64]	; (474e0 <nrfx_usbd_enable+0x120>)
   4749e:	f240 12ff 	movw	r2, #511	; 0x1ff
   474a2:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   474a4:	4b0f      	ldr	r3, [pc, #60]	; (474e4 <nrfx_usbd_enable+0x124>)
   474a6:	6019      	str	r1, [r3, #0]
    usbd_dma_pending_clear();
   474a8:	f7ff fdbc 	bl	47024 <usbd_dma_pending_clear>
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   474ac:	4b0e      	ldr	r3, [pc, #56]	; (474e8 <nrfx_usbd_enable+0x128>)
   474ae:	7019      	strb	r1, [r3, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   474b0:	4b0e      	ldr	r3, [pc, #56]	; (474ec <nrfx_usbd_enable+0x12c>)
   474b2:	2202      	movs	r2, #2
   474b4:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   474b6:	f7ff fd99 	bl	46fec <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   474ba:	b140      	cbz	r0, 474ce <nrfx_usbd_enable+0x10e>
#endif
    {
        usbd_errata_187_211_end();
    }
}
   474bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        usbd_errata_187_211_end();
   474c0:	f7ff bdf6 	b.w	470b0 <usbd_errata_187_211_end>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   474c4:	6011      	str	r1, [r2, #0]
   474c6:	e79e      	b.n	47406 <nrfx_usbd_enable+0x46>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   474c8:	2300      	movs	r3, #0
   474ca:	6013      	str	r3, [r2, #0]
   474cc:	e7c4      	b.n	47458 <nrfx_usbd_enable+0x98>
}
   474ce:	bd10      	pop	{r4, pc}
   474d0:	40027000 	.word	0x40027000
   474d4:	4006ec00 	.word	0x4006ec00
   474d8:	4006ec14 	.word	0x4006ec14
   474dc:	40027800 	.word	0x40027800
   474e0:	20006944 	.word	0x20006944
   474e4:	200068d4 	.word	0x200068d4
   474e8:	20006dab 	.word	0x20006dab
   474ec:	20006daa 	.word	0x20006daa

000474f0 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   474f0:	4b0a      	ldr	r3, [pc, #40]	; (4751c <nrfx_usbd_start+0x2c>)
   474f2:	2200      	movs	r2, #0
{
   474f4:	b510      	push	{r4, lr}
    m_bus_suspend = false;
   474f6:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   474f8:	4b09      	ldr	r3, [pc, #36]	; (47520 <nrfx_usbd_start+0x30>)
   474fa:	4a0a      	ldr	r2, [pc, #40]	; (47524 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
   474fc:	4c0a      	ldr	r4, [pc, #40]	; (47528 <nrfx_usbd_start+0x38>)
   474fe:	2800      	cmp	r0, #0
   47500:	bf0c      	ite	eq
   47502:	4618      	moveq	r0, r3
   47504:	4610      	movne	r0, r2
   47506:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   4750a:	2027      	movs	r0, #39	; 0x27
   4750c:	f7e5 fabe 	bl	2ca8c <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   47510:	2301      	movs	r3, #1
   47512:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   47516:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   4751a:	bd10      	pop	{r4, pc}
   4751c:	20006da8 	.word	0x20006da8
   47520:	01c01407 	.word	0x01c01407
   47524:	01e01407 	.word	0x01e01407
   47528:	40027000 	.word	0x40027000

0004752c <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   4752c:	4b03      	ldr	r3, [pc, #12]	; (4753c <nrfx_usbd_is_enabled+0x10>)
   4752e:	7818      	ldrb	r0, [r3, #0]
}
   47530:	2801      	cmp	r0, #1
   47532:	bf94      	ite	ls
   47534:	2000      	movls	r0, #0
   47536:	2001      	movhi	r0, #1
   47538:	4770      	bx	lr
   4753a:	bf00      	nop
   4753c:	20006daa 	.word	0x20006daa

00047540 <nrfx_usbd_wakeup_req>:

    return suspended;
}

bool nrfx_usbd_wakeup_req(void)
{
   47540:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   47542:	f04f 0320 	mov.w	r3, #32
   47546:	f3ef 8511 	mrs	r5, BASEPRI
   4754a:	f383 8812 	msr	BASEPRI_MAX, r3
   4754e:	f3bf 8f6f 	isb	sy
    bool started = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend && nrf_usbd_lowpower_check(NRF_USBD))
   47552:	4b13      	ldr	r3, [pc, #76]	; (475a0 <nrfx_usbd_wakeup_req+0x60>)
   47554:	781b      	ldrb	r3, [r3, #0]
   47556:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   4755a:	b1b3      	cbz	r3, 4758a <nrfx_usbd_wakeup_req+0x4a>
    return (p_reg->LOWPOWER != (USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos));
   4755c:	4b11      	ldr	r3, [pc, #68]	; (475a4 <nrfx_usbd_wakeup_req+0x64>)
   4755e:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
   47562:	b1d1      	cbz	r1, 4759a <nrfx_usbd_wakeup_req+0x5a>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   47564:	2100      	movs	r1, #0
   47566:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   4756a:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   4756e:	f7ff fd33 	bl	46fd8 <nrf52_errata_166>
    {
        nrf_usbd_lowpower_disable(NRF_USBD);
        started = true;

        if (nrfx_usbd_errata_171())
   47572:	b150      	cbz	r0, 4758a <nrfx_usbd_wakeup_req+0x4a>
        {
            if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   47574:	4b0c      	ldr	r3, [pc, #48]	; (475a8 <nrfx_usbd_wakeup_req+0x68>)
   47576:	4a0d      	ldr	r2, [pc, #52]	; (475ac <nrfx_usbd_wakeup_req+0x6c>)
   47578:	681c      	ldr	r4, [r3, #0]
   4757a:	21c0      	movs	r1, #192	; 0xc0
   4757c:	b95c      	cbnz	r4, 47596 <nrfx_usbd_wakeup_req+0x56>
            {
                *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   4757e:	f249 3475 	movw	r4, #37749	; 0x9375
   47582:	601c      	str	r4, [r3, #0]
                *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   47584:	6011      	str	r1, [r2, #0]
                *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   47586:	601c      	str	r4, [r3, #0]
        started = true;
   47588:	4602      	mov	r2, r0
	__asm__ volatile(
   4758a:	f385 8811 	msr	BASEPRI, r5
   4758e:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return started;
}
   47592:	4610      	mov	r0, r2
   47594:	bd38      	pop	{r3, r4, r5, pc}
                *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   47596:	6011      	str	r1, [r2, #0]
   47598:	e7f6      	b.n	47588 <nrfx_usbd_wakeup_req+0x48>
    bool started = false;
   4759a:	460a      	mov	r2, r1
   4759c:	e7f5      	b.n	4758a <nrfx_usbd_wakeup_req+0x4a>
   4759e:	bf00      	nop
   475a0:	20006da8 	.word	0x20006da8
   475a4:	40027000 	.word	0x40027000
   475a8:	4006ec00 	.word	0x4006ec00
   475ac:	4006ec14 	.word	0x4006ec14

000475b0 <nrfx_usbd_init>:
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   475b0:	4b1e      	ldr	r3, [pc, #120]	; (4762c <nrfx_usbd_init+0x7c>)
{
   475b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   475b6:	781c      	ldrb	r4, [r3, #0]
   475b8:	2c00      	cmp	r4, #0
   475ba:	d135      	bne.n	47628 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
   475bc:	4a1c      	ldr	r2, [pc, #112]	; (47630 <nrfx_usbd_init+0x80>)
   475be:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   475c0:	2201      	movs	r2, #1
   475c2:	701a      	strb	r2, [r3, #0]
   475c4:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   475c6:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
   475ca:	4626      	mov	r6, r4
   475cc:	b2eb      	uxtb	r3, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   475ce:	f013 0f08 	tst.w	r3, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   475d2:	f043 0780 	orr.w	r7, r3, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   475d6:	bf14      	ite	ne
   475d8:	4641      	movne	r1, r8
   475da:	2140      	moveq	r1, #64	; 0x40
   475dc:	4638      	mov	r0, r7
   475de:	f009 f952 	bl	50886 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   475e2:	4638      	mov	r0, r7
   475e4:	f7ff fd10 	bl	47008 <ep_state_access>
        p_state->status = NRFX_USBD_EP_OK;
   475e8:	3501      	adds	r5, #1
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   475ea:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
   475ec:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
   475ee:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
   475f0:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   475f2:	d1eb      	bne.n	475cc <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   475f4:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
   475f6:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   475f8:	f240 16ff 	movw	r6, #511	; 0x1ff
   475fc:	4620      	mov	r0, r4
   475fe:	f009 f942 	bl	50886 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
   47602:	4620      	mov	r0, r4
   47604:	f7ff fd00 	bl	47008 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   47608:	3401      	adds	r4, #1
   4760a:	b2e4      	uxtb	r4, r4
   4760c:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
   4760e:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
   47610:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
   47612:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   47614:	d102      	bne.n	4761c <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
   47616:	4807      	ldr	r0, [pc, #28]	; (47634 <nrfx_usbd_init+0x84>)
}
   47618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   4761c:	f014 0f08 	tst.w	r4, #8
   47620:	bf14      	ite	ne
   47622:	4631      	movne	r1, r6
   47624:	2140      	moveq	r1, #64	; 0x40
   47626:	e7e9      	b.n	475fc <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
   47628:	4803      	ldr	r0, [pc, #12]	; (47638 <nrfx_usbd_init+0x88>)
   4762a:	e7f5      	b.n	47618 <nrfx_usbd_init+0x68>
   4762c:	20006daa 	.word	0x20006daa
   47630:	20006a68 	.word	0x20006a68
   47634:	0bad0000 	.word	0x0bad0000
   47638:	0bad0005 	.word	0x0bad0005

0004763c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   4763c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   47640:	4604      	mov	r4, r0
	__asm__ volatile(
   47642:	f04f 0320 	mov.w	r3, #32
   47646:	f3ef 8611 	mrs	r6, BASEPRI
   4764a:	f383 8812 	msr	BASEPRI_MAX, r3
   4764e:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   47652:	f010 070f 	ands.w	r7, r0, #15
   47656:	d103      	bne.n	47660 <nrfx_usbd_ep_transfer+0x24>
   47658:	4b2b      	ldr	r3, [pc, #172]	; (47708 <nrfx_usbd_ep_transfer+0xcc>)
   4765a:	781b      	ldrb	r3, [r3, #0]
   4765c:	4283      	cmp	r3, r0
   4765e:	d14e      	bne.n	476fe <nrfx_usbd_ep_transfer+0xc2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   47660:	4b2a      	ldr	r3, [pc, #168]	; (4770c <nrfx_usbd_ep_transfer+0xd0>)
   47662:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 4773c <nrfx_usbd_ep_transfer+0x100>
   47666:	681a      	ldr	r2, [r3, #0]
   47668:	f8d8 5000 	ldr.w	r5, [r8]
   4766c:	43d2      	mvns	r2, r2
   4766e:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
   47670:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   47672:	432a      	orrs	r2, r5
    const uint8_t ep_bitpos = ep2bit(ep);
   47674:	f009 f8cd 	bl	50812 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   47678:	f04f 0901 	mov.w	r9, #1
   4767c:	fa09 f900 	lsl.w	r9, r9, r0
   47680:	ea12 0f09 	tst.w	r2, r9
   47684:	d13d      	bne.n	47702 <nrfx_usbd_ep_transfer+0xc6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   47686:	4620      	mov	r0, r4
   47688:	f7ff fcbe 	bl	47008 <ep_state_access>
   4768c:	230c      	movs	r3, #12
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
   4768e:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
   47690:	4684      	mov	ip, r0
        if (NRF_USBD_EPIN_CHECK(ep))
   47692:	fb03 f307 	mul.w	r3, r3, r7
   47696:	d52e      	bpl.n	476f6 <nrfx_usbd_ep_transfer+0xba>
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   47698:	4a1d      	ldr	r2, [pc, #116]	; (47710 <nrfx_usbd_ep_transfer+0xd4>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   4769a:	6808      	ldr	r0, [r1, #0]
   4769c:	4413      	add	r3, r2
   4769e:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
   476a2:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   476a4:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   476a8:	f002 0201 	and.w	r2, r2, #1
   476ac:	d11e      	bne.n	476ec <nrfx_usbd_ep_transfer+0xb0>
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   476ae:	b9da      	cbnz	r2, 476e8 <nrfx_usbd_ep_transfer+0xac>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   476b0:	4a18      	ldr	r2, [pc, #96]	; (47714 <nrfx_usbd_ep_transfer+0xd8>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   476b2:	f8cc 2000 	str.w	r2, [ip]
        }
        *p_context = *p_transfer;
   476b6:	c907      	ldmia	r1, {r0, r1, r2}
   476b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   476bc:	f8cc 3004 	str.w	r3, [ip, #4]

        p_state->transfer_cnt = 0;
   476c0:	2300      	movs	r3, #0
   476c2:	f8cc 3008 	str.w	r3, [ip, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   476c6:	f88c 300e 	strb.w	r3, [ip, #14]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   476ca:	4b13      	ldr	r3, [pc, #76]	; (47718 <nrfx_usbd_ep_transfer+0xdc>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
   476cc:	4813      	ldr	r0, [pc, #76]	; (4771c <nrfx_usbd_ep_transfer+0xe0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   476ce:	ea45 0509 	orr.w	r5, r5, r9
   476d2:	2280      	movs	r2, #128	; 0x80
   476d4:	f8c8 5000 	str.w	r5, [r8]
   476d8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
   476dc:	f386 8811 	msr	BASEPRI, r6
   476e0:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   476e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   476e8:	4a0d      	ldr	r2, [pc, #52]	; (47720 <nrfx_usbd_ep_transfer+0xe4>)
   476ea:	e7e2      	b.n	476b2 <nrfx_usbd_ep_transfer+0x76>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   476ec:	b90a      	cbnz	r2, 476f2 <nrfx_usbd_ep_transfer+0xb6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   476ee:	4a0d      	ldr	r2, [pc, #52]	; (47724 <nrfx_usbd_ep_transfer+0xe8>)
   476f0:	e7df      	b.n	476b2 <nrfx_usbd_ep_transfer+0x76>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   476f2:	4a0d      	ldr	r2, [pc, #52]	; (47728 <nrfx_usbd_ep_transfer+0xec>)
   476f4:	e7dd      	b.n	476b2 <nrfx_usbd_ep_transfer+0x76>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   476f6:	4a0d      	ldr	r2, [pc, #52]	; (4772c <nrfx_usbd_ep_transfer+0xf0>)
   476f8:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
   476fa:	4a0d      	ldr	r2, [pc, #52]	; (47730 <nrfx_usbd_ep_transfer+0xf4>)
   476fc:	e7d9      	b.n	476b2 <nrfx_usbd_ep_transfer+0x76>
        ret = NRFX_ERROR_INVALID_ADDR;
   476fe:	480d      	ldr	r0, [pc, #52]	; (47734 <nrfx_usbd_ep_transfer+0xf8>)
   47700:	e7ec      	b.n	476dc <nrfx_usbd_ep_transfer+0xa0>
        ret = NRFX_ERROR_BUSY;
   47702:	480d      	ldr	r0, [pc, #52]	; (47738 <nrfx_usbd_ep_transfer+0xfc>)
   47704:	e7ea      	b.n	476dc <nrfx_usbd_ep_transfer+0xa0>
   47706:	bf00      	nop
   47708:	20006dab 	.word	0x20006dab
   4770c:	20006944 	.word	0x20006944
   47710:	200068d8 	.word	0x200068d8
   47714:	000507c7 	.word	0x000507c7
   47718:	e000e100 	.word	0xe000e100
   4771c:	0bad0000 	.word	0x0bad0000
   47720:	000507e9 	.word	0x000507e9
   47724:	000470ed 	.word	0x000470ed
   47728:	00047125 	.word	0x00047125
   4772c:	20006868 	.word	0x20006868
   47730:	00050799 	.word	0x00050799
   47734:	0bad000a 	.word	0x0bad000a
   47738:	0bad000b 	.word	0x0bad000b
   4773c:	200068d4 	.word	0x200068d4

00047740 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   47740:	f010 0f08 	tst.w	r0, #8
   47744:	4b07      	ldr	r3, [pc, #28]	; (47764 <nrfx_usbd_epout_size_get+0x24>)
   47746:	d006      	beq.n	47756 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   47748:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
   4774c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
            size_isoout = 0;
   47750:	bf18      	it	ne
   47752:	2000      	movne	r0, #0
   47754:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   47756:	f000 000f 	and.w	r0, r0, #15
   4775a:	f500 7094 	add.w	r0, r0, #296	; 0x128
   4775e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   47762:	4770      	bx	lr
   47764:	40027000 	.word	0x40027000

00047768 <usbd_dmareq_process>:
{
   47768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
   4776c:	4b55      	ldr	r3, [pc, #340]	; (478c4 <usbd_dmareq_process+0x15c>)
{
   4776e:	b087      	sub	sp, #28
    if (!m_dma_pending)
   47770:	781a      	ldrb	r2, [r3, #0]
   47772:	9301      	str	r3, [sp, #4]
   47774:	2a00      	cmp	r2, #0
   47776:	d169      	bne.n	4784c <usbd_dmareq_process+0xe4>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   47778:	f8df 9168 	ldr.w	r9, [pc, #360]	; 478e4 <usbd_dmareq_process+0x17c>
   4777c:	46ca      	mov	sl, r9
   4777e:	4b52      	ldr	r3, [pc, #328]	; (478c8 <usbd_dmareq_process+0x160>)
   47780:	f8d9 6000 	ldr.w	r6, [r9]
   47784:	6819      	ldr	r1, [r3, #0]
   47786:	4031      	ands	r1, r6
   47788:	d060      	beq.n	4784c <usbd_dmareq_process+0xe4>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   4778a:	f011 2601 	ands.w	r6, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
   4778e:	bf14      	ite	ne
   47790:	fa96 f1a6 	rbitne	r1, r6
   47794:	fa91 f1a1 	rbiteq	r1, r1
   47798:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   4779c:	290f      	cmp	r1, #15
   4779e:	bf86      	itte	hi
   477a0:	f1a1 0410 	subhi.w	r4, r1, #16
   477a4:	b2e4      	uxtbhi	r4, r4
   477a6:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
   477aa:	4620      	mov	r0, r4
   477ac:	f7ff fc2c 	bl	47008 <ep_state_access>
            if (NRF_USBD_EPIN_CHECK(ep))
   477b0:	fa4f f884 	sxtb.w	r8, r4
   477b4:	2601      	movs	r6, #1
   477b6:	408e      	lsls	r6, r1
   477b8:	f1b8 0f00 	cmp.w	r8, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
   477bc:	4605      	mov	r5, r0
            if (NRF_USBD_EPIN_CHECK(ep))
   477be:	ea6f 0606 	mvn.w	r6, r6
   477c2:	da46      	bge.n	47852 <usbd_dmareq_process+0xea>
                continue_transfer = p_state->handler.feeder(
   477c4:	6803      	ldr	r3, [r0, #0]
   477c6:	8982      	ldrh	r2, [r0, #12]
   477c8:	6841      	ldr	r1, [r0, #4]
   477ca:	a804      	add	r0, sp, #16
   477cc:	4798      	blx	r3
                if (!continue_transfer)
   477ce:	b900      	cbnz	r0, 477d2 <usbd_dmareq_process+0x6a>
                    p_state->handler.consumer = NULL;
   477d0:	6028      	str	r0, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   477d2:	f7ff fc01 	bl	46fd8 <nrf52_errata_166>
    if (nrfx_usbd_errata_199())
   477d6:	b110      	cbz	r0, 477de <usbd_dmareq_process+0x76>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   477d8:	4b3c      	ldr	r3, [pc, #240]	; (478cc <usbd_dmareq_process+0x164>)
   477da:	2282      	movs	r2, #130	; 0x82
   477dc:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
   477de:	9a01      	ldr	r2, [sp, #4]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   477e0:	9804      	ldr	r0, [sp, #16]
    m_dma_pending = true;
   477e2:	2301      	movs	r3, #1
   477e4:	7013      	strb	r3, [r2, #0]
            m_ep_ready &= ~(1U << pos);
   477e6:	f8da 3000 	ldr.w	r3, [sl]
            p_state->transfer_cnt += transfer.size;
   477ea:	9a05      	ldr	r2, [sp, #20]
            m_ep_ready &= ~(1U << pos);
   477ec:	401e      	ands	r6, r3
            p_state->transfer_cnt += transfer.size;
   477ee:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
   477f0:	f8ca 6000 	str.w	r6, [sl]
            p_state->transfer_cnt += transfer.size;
   477f4:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
   477f6:	f1b8 0f00 	cmp.w	r8, #0
   477fa:	60ab      	str	r3, [r5, #8]
   477fc:	f004 0108 	and.w	r1, r4, #8
   47800:	4b33      	ldr	r3, [pc, #204]	; (478d0 <usbd_dmareq_process+0x168>)
   47802:	f004 040f 	and.w	r4, r4, #15
   47806:	da4d      	bge.n	478a4 <usbd_dmareq_process+0x13c>
        if (NRF_USBD_EPISO_CHECK(ep))
   47808:	2900      	cmp	r1, #0
   4780a:	d043      	beq.n	47894 <usbd_dmareq_process+0x12c>
            p_reg->ISOIN.PTR    = ptr;
   4780c:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   47810:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
   47814:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   47816:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   4781a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4781e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   47822:	2201      	movs	r2, #1
   47824:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   47826:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   47828:	4a2a      	ldr	r2, [pc, #168]	; (478d4 <usbd_dmareq_process+0x16c>)
   4782a:	4b2b      	ldr	r3, [pc, #172]	; (478d8 <usbd_dmareq_process+0x170>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   4782c:	492b      	ldr	r1, [pc, #172]	; (478dc <usbd_dmareq_process+0x174>)
   4782e:	ea13 0828 	ands.w	r8, r3, r8, asr #32
   47832:	bf38      	it	cc
   47834:	4690      	movcc	r8, r2
   47836:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   4783a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   4783e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   47842:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   47844:	b912      	cbnz	r2, 4784c <usbd_dmareq_process+0xe4>
   47846:	680a      	ldr	r2, [r1, #0]
   47848:	2a00      	cmp	r2, #0
   4784a:	d0fa      	beq.n	47842 <usbd_dmareq_process+0xda>
}
   4784c:	b007      	add	sp, #28
   4784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   47852:	4620      	mov	r0, r4
   47854:	f7ff ff74 	bl	47740 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   47858:	682f      	ldr	r7, [r5, #0]
   4785a:	89aa      	ldrh	r2, [r5, #12]
   4785c:	6869      	ldr	r1, [r5, #4]
   4785e:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   47860:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
   47862:	a804      	add	r0, sp, #16
   47864:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
   47866:	9b04      	ldr	r3, [sp, #16]
   47868:	2b00      	cmp	r3, #0
   4786a:	d0b0      	beq.n	477ce <usbd_dmareq_process+0x66>
                else if (transfer.size < rx_size)
   4786c:	9b05      	ldr	r3, [sp, #20]
   4786e:	459b      	cmp	fp, r3
   47870:	d9ad      	bls.n	477ce <usbd_dmareq_process+0x66>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   47872:	2702      	movs	r7, #2
   47874:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   47876:	4630      	mov	r0, r6
   47878:	f7ff fcd6 	bl	47228 <atomic_and.constprop.17>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   4787c:	2306      	movs	r3, #6
   4787e:	f88d 300c 	strb.w	r3, [sp, #12]
                    m_event_handler(&evt);
   47882:	4b17      	ldr	r3, [pc, #92]	; (478e0 <usbd_dmareq_process+0x178>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   47884:	f88d 400e 	strb.w	r4, [sp, #14]
   47888:	f88d 700f 	strb.w	r7, [sp, #15]
                    m_event_handler(&evt);
   4788c:	681b      	ldr	r3, [r3, #0]
   4788e:	a803      	add	r0, sp, #12
   47890:	4798      	blx	r3
                    continue;
   47892:	e774      	b.n	4777e <usbd_dmareq_process+0x16>
            p_reg->EPIN[epnr].PTR    = ptr;
   47894:	2114      	movs	r1, #20
   47896:	fb01 3304 	mla	r3, r1, r4, r3
   4789a:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   4789e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
   478a2:	e7b7      	b.n	47814 <usbd_dmareq_process+0xac>
        if (NRF_USBD_EPISO_CHECK(ep))
   478a4:	b129      	cbz	r1, 478b2 <usbd_dmareq_process+0x14a>
            p_reg->ISOOUT.PTR    = ptr;
   478a6:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   478aa:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   478ae:	2328      	movs	r3, #40	; 0x28
   478b0:	e7b1      	b.n	47816 <usbd_dmareq_process+0xae>
            p_reg->EPOUT[epnr].PTR    = ptr;
   478b2:	2114      	movs	r1, #20
   478b4:	fb01 3304 	mla	r3, r1, r4, r3
   478b8:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   478bc:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
   478c0:	e7f5      	b.n	478ae <usbd_dmareq_process+0x146>
   478c2:	bf00      	nop
   478c4:	20006da9 	.word	0x20006da9
   478c8:	200068d4 	.word	0x200068d4
   478cc:	40027c1c 	.word	0x40027c1c
   478d0:	40027000 	.word	0x40027000
   478d4:	00053dc2 	.word	0x00053dc2
   478d8:	00053db0 	.word	0x00053db0
   478dc:	40027100 	.word	0x40027100
   478e0:	20006a68 	.word	0x20006a68
   478e4:	20006944 	.word	0x20006944

000478e8 <ev_epdata_handler>:
{
   478e8:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
   478ea:	4b0f      	ldr	r3, [pc, #60]	; (47928 <ev_epdata_handler+0x40>)
   478ec:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   478f0:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
   478f4:	2501      	movs	r5, #1
    while (dataepstatus)
   478f6:	b91c      	cbnz	r4, 47900 <ev_epdata_handler+0x18>
}
   478f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
   478fc:	f7ff bf34 	b.w	47768 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   47900:	fa94 f3a4 	rbit	r3, r4
   47904:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   47908:	2b0f      	cmp	r3, #15
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
   4790a:	b2d9      	uxtb	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   4790c:	bfc8      	it	gt
   4790e:	f1a1 0010 	subgt.w	r0, r1, #16
        dataepstatus &= ~(1UL << bitpos);
   47912:	fa05 f303 	lsl.w	r3, r5, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   47916:	bfcc      	ite	gt
   47918:	b2c0      	uxtbgt	r0, r0
   4791a:	f041 0080 	orrle.w	r0, r1, #128	; 0x80
        dataepstatus &= ~(1UL << bitpos);
   4791e:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   47922:	f7ff fca9 	bl	47278 <usbd_ep_data_handler>
   47926:	e7e6      	b.n	478f6 <ev_epdata_handler+0xe>
   47928:	40027000 	.word	0x40027000

0004792c <nrf_usbd_epout_dma_handler>:
{
   4792c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4792e:	4604      	mov	r4, r0
    usbd_dma_pending_clear();
   47930:	f7ff fb78 	bl	47024 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   47934:	4620      	mov	r0, r4
   47936:	f7ff fb67 	bl	47008 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   4793a:	7b83      	ldrb	r3, [r0, #14]
   4793c:	2b03      	cmp	r3, #3
   4793e:	d10c      	bne.n	4795a <nrf_usbd_epout_dma_handler+0x2e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47940:	4620      	mov	r0, r4
   47942:	f008 ff66 	bl	50812 <ep2bit>
   47946:	2301      	movs	r3, #1
   47948:	fa03 f000 	lsl.w	r0, r3, r0
   4794c:	43c0      	mvns	r0, r0
   4794e:	f7ff fc6b 	bl	47228 <atomic_and.constprop.17>
    usbd_dmareq_process();
   47952:	f7ff ff09 	bl	47768 <usbd_dmareq_process>
}
   47956:	b003      	add	sp, #12
   47958:	bd30      	pop	{r4, r5, pc}
    else if (p_state->handler.consumer == NULL)
   4795a:	6805      	ldr	r5, [r0, #0]
   4795c:	2d00      	cmp	r5, #0
   4795e:	d1f8      	bne.n	47952 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47960:	4620      	mov	r0, r4
   47962:	f008 ff56 	bl	50812 <ep2bit>
   47966:	2301      	movs	r3, #1
   47968:	fa03 f000 	lsl.w	r0, r3, r0
   4796c:	43c0      	mvns	r0, r0
   4796e:	f7ff fc5b 	bl	47228 <atomic_and.constprop.17>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47972:	2306      	movs	r3, #6
   47974:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   47978:	4b04      	ldr	r3, [pc, #16]	; (4798c <nrf_usbd_epout_dma_handler+0x60>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   4797a:	f88d 4006 	strb.w	r4, [sp, #6]
   4797e:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
   47982:	681b      	ldr	r3, [r3, #0]
   47984:	a801      	add	r0, sp, #4
   47986:	4798      	blx	r3
   47988:	e7e3      	b.n	47952 <nrf_usbd_epout_dma_handler+0x26>
   4798a:	bf00      	nop
   4798c:	20006a68 	.word	0x20006a68

00047990 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   47990:	4b02      	ldr	r3, [pc, #8]	; (4799c <nrfx_usbd_ep_stall+0xc>)
   47992:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   47996:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   4799a:	4770      	bx	lr
   4799c:	40027000 	.word	0x40027000

000479a0 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   479a0:	0702      	lsls	r2, r0, #28
   479a2:	d413      	bmi.n	479cc <nrfx_usbd_ep_stall_check+0x2c>
    if (NRF_USBD_EPIN_CHECK(ep))
   479a4:	f000 030f 	and.w	r3, r0, #15
   479a8:	f010 0f80 	tst.w	r0, #128	; 0x80
   479ac:	4a08      	ldr	r2, [pc, #32]	; (479d0 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
   479ae:	bf0b      	itete	eq
   479b0:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
   479b4:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
   479b8:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
   479bc:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
   479c0:	bf08      	it	eq
   479c2:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   479c4:	1e43      	subs	r3, r0, #1
   479c6:	4258      	negs	r0, r3
   479c8:	4158      	adcs	r0, r3
   479ca:	4770      	bx	lr
        return false;
   479cc:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   479ce:	4770      	bx	lr
   479d0:	40027000 	.word	0x40027000

000479d4 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   479d4:	4b04      	ldr	r3, [pc, #16]	; (479e8 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   479d6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   479da:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   479de:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   479e2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   479e6:	4770      	bx	lr
   479e8:	40027000 	.word	0x40027000

000479ec <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   479ec:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   479ee:	2208      	movs	r2, #8
   479f0:	2100      	movs	r1, #0
{
   479f2:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   479f4:	f004 fc85 	bl	4c302 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   479f8:	4b0e      	ldr	r3, [pc, #56]	; (47a34 <nrfx_usbd_setup_get+0x48>)
   479fa:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
   479fe:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   47a00:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
   47a04:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   47a06:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   47a0a:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   47a0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   47a12:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   47a14:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   47a18:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   47a1c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   47a20:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   47a22:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   47a26:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   47a2a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   47a2e:	80e3      	strh	r3, [r4, #6]
}
   47a30:	bd10      	pop	{r4, pc}
   47a32:	bf00      	nop
   47a34:	40027000 	.word	0x40027000

00047a38 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   47a38:	4b02      	ldr	r3, [pc, #8]	; (47a44 <nrfx_usbd_setup_data_clear+0xc>)
   47a3a:	2201      	movs	r2, #1
   47a3c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   47a3e:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   47a40:	4770      	bx	lr
   47a42:	bf00      	nop
   47a44:	4002704c 	.word	0x4002704c

00047a48 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   47a48:	b513      	push	{r0, r1, r4, lr}
    usbd_dma_pending_clear();
   47a4a:	f7ff faeb 	bl	47024 <usbd_dma_pending_clear>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   47a4e:	4b0e      	ldr	r3, [pc, #56]	; (47a88 <ev_dma_epout0_handler+0x40>)
   47a50:	7b9a      	ldrb	r2, [r3, #14]
   47a52:	2a03      	cmp	r2, #3
   47a54:	d105      	bne.n	47a62 <ev_dma_epout0_handler+0x1a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47a56:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   47a5a:	f7ff fbe5 	bl	47228 <atomic_and.constprop.17>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   47a5e:	b002      	add	sp, #8
   47a60:	bd10      	pop	{r4, pc}
    else if (p_state->handler.consumer == NULL)
   47a62:	681c      	ldr	r4, [r3, #0]
   47a64:	b96c      	cbnz	r4, 47a82 <ev_dma_epout0_handler+0x3a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   47a66:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
   47a6a:	f7ff fbdd 	bl	47228 <atomic_and.constprop.17>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47a6e:	2306      	movs	r3, #6
   47a70:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
   47a74:	4b05      	ldr	r3, [pc, #20]	; (47a8c <ev_dma_epout0_handler+0x44>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   47a76:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
   47a7a:	681b      	ldr	r3, [r3, #0]
   47a7c:	a801      	add	r0, sp, #4
   47a7e:	4798      	blx	r3
   47a80:	e7ed      	b.n	47a5e <ev_dma_epout0_handler+0x16>
        nrfx_usbd_setup_data_clear();
   47a82:	f7ff ffd9 	bl	47a38 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   47a86:	e7ea      	b.n	47a5e <ev_dma_epout0_handler+0x16>
   47a88:	20006948 	.word	0x20006948
   47a8c:	20006a68 	.word	0x20006a68

00047a90 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   47a90:	4b02      	ldr	r3, [pc, #8]	; (47a9c <nrfx_usbd_setup_clear+0xc>)
   47a92:	2201      	movs	r2, #1
   47a94:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   47a96:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   47a98:	4770      	bx	lr
   47a9a:	bf00      	nop
   47a9c:	40027050 	.word	0x40027050

00047aa0 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   47aa0:	4b02      	ldr	r3, [pc, #8]	; (47aac <nrfx_usbd_setup_stall+0xc>)
   47aa2:	2201      	movs	r2, #1
   47aa4:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   47aa6:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   47aa8:	4770      	bx	lr
   47aaa:	bf00      	nop
   47aac:	40027054 	.word	0x40027054

00047ab0 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   47ab0:	4b01      	ldr	r3, [pc, #4]	; (47ab8 <nrfx_usbd_last_setup_dir_get+0x8>)
   47ab2:	7818      	ldrb	r0, [r3, #0]
   47ab4:	4770      	bx	lr
   47ab6:	bf00      	nop
   47ab8:	20006dab 	.word	0x20006dab

00047abc <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   47abc:	b510      	push	{r4, lr}
   47abe:	4602      	mov	r2, r0
	__asm__ volatile(
   47ac0:	f04f 0320 	mov.w	r3, #32
   47ac4:	f3ef 8411 	mrs	r4, BASEPRI
   47ac8:	f383 8812 	msr	BASEPRI_MAX, r3
   47acc:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   47ad0:	f008 fe9f 	bl	50812 <ep2bit>
   47ad4:	490d      	ldr	r1, [pc, #52]	; (47b0c <nrfx_usbd_transfer_out_drop+0x50>)
   47ad6:	2301      	movs	r3, #1
   47ad8:	fa03 f000 	lsl.w	r0, r3, r0
   47adc:	680b      	ldr	r3, [r1, #0]
   47ade:	ea23 0300 	bic.w	r3, r3, r0
   47ae2:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   47ae4:	f012 0108 	ands.w	r1, r2, #8
   47ae8:	d10a      	bne.n	47b00 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   47aea:	f002 030f 	and.w	r3, r2, #15
   47aee:	009b      	lsls	r3, r3, #2
   47af0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   47af4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   47af8:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   47afc:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
   47b00:	f384 8811 	msr	BASEPRI, r4
   47b04:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   47b08:	bd10      	pop	{r4, pc}
   47b0a:	bf00      	nop
   47b0c:	20006944 	.word	0x20006944

00047b10 <usbd_ep_abort>:
{
   47b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   47b12:	4601      	mov	r1, r0
	__asm__ volatile(
   47b14:	f04f 0320 	mov.w	r3, #32
   47b18:	f3ef 8411 	mrs	r4, BASEPRI
   47b1c:	f383 8812 	msr	BASEPRI_MAX, r3
   47b20:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
   47b24:	f7ff fa70 	bl	47008 <ep_state_access>
   47b28:	4605      	mov	r5, r0
    if (NRF_USBD_EPOUT_CHECK(ep))
   47b2a:	4608      	mov	r0, r1
   47b2c:	f008 fe71 	bl	50812 <ep2bit>
   47b30:	2301      	movs	r3, #1
   47b32:	f011 0f80 	tst.w	r1, #128	; 0x80
   47b36:	fa03 f000 	lsl.w	r0, r3, r0
   47b3a:	4e2a      	ldr	r6, [pc, #168]	; (47be4 <usbd_ep_abort+0xd4>)
   47b3c:	d117      	bne.n	47b6e <usbd_ep_abort+0x5e>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   47b3e:	6833      	ldr	r3, [r6, #0]
   47b40:	ea30 0203 	bics.w	r2, r0, r3
   47b44:	d00a      	beq.n	47b5c <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
   47b46:	4608      	mov	r0, r1
   47b48:	f7ff ffb8 	bl	47abc <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   47b4c:	2303      	movs	r3, #3
   47b4e:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
   47b50:	f384 8811 	msr	BASEPRI, r4
   47b54:	f3bf 8f6f 	isb	sy
}
   47b58:	b003      	add	sp, #12
   47b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
   47b5c:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47b5e:	43c0      	mvns	r0, r0
            m_ep_ready &= ~(1U << ep2bit(ep));
   47b60:	4a21      	ldr	r2, [pc, #132]	; (47be8 <usbd_ep_abort+0xd8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47b62:	4003      	ands	r3, r0
   47b64:	6033      	str	r3, [r6, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   47b66:	6813      	ldr	r3, [r2, #0]
   47b68:	4003      	ands	r3, r0
   47b6a:	6013      	str	r3, [r2, #0]
   47b6c:	e7ee      	b.n	47b4c <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   47b6e:	070b      	lsls	r3, r1, #28
   47b70:	d411      	bmi.n	47b96 <usbd_ep_abort+0x86>
            if(ep != NRFX_USBD_EPIN0)
   47b72:	2980      	cmp	r1, #128	; 0x80
   47b74:	4f1d      	ldr	r7, [pc, #116]	; (47bec <usbd_ep_abort+0xdc>)
   47b76:	4b1e      	ldr	r3, [pc, #120]	; (47bf0 <usbd_ep_abort+0xe0>)
   47b78:	d02a      	beq.n	47bd0 <usbd_ep_abort+0xc0>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   47b7a:	f001 020f 	and.w	r2, r1, #15
   47b7e:	f202 32da 	addw	r2, r2, #986	; 0x3da
   47b82:	0052      	lsls	r2, r2, #1
   47b84:	603a      	str	r2, [r7, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   47b86:	681a      	ldr	r2, [r3, #0]
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47b88:	681f      	ldr	r7, [r3, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   47b8a:	b2d2      	uxtb	r2, r2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47b8c:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47b90:	433a      	orrs	r2, r7
   47b92:	601a      	str	r2, [r3, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   47b94:	681b      	ldr	r3, [r3, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   47b96:	4f14      	ldr	r7, [pc, #80]	; (47be8 <usbd_ep_abort+0xd8>)
   47b98:	6832      	ldr	r2, [r6, #0]
   47b9a:	683b      	ldr	r3, [r7, #0]
   47b9c:	ea62 0c03 	orn	ip, r2, r3
   47ba0:	ea1c 0f00 	tst.w	ip, r0
   47ba4:	d0d4      	beq.n	47b50 <usbd_ep_abort+0x40>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47ba6:	ea22 0200 	bic.w	r2, r2, r0
            m_ep_ready       |=   1U << ep2bit(ep) ;
   47baa:	4318      	orrs	r0, r3
            p_state->handler.feeder = NULL;
   47bac:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47bae:	6032      	str	r2, [r6, #0]
            p_state->handler.feeder = NULL;
   47bb0:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   47bb2:	2303      	movs	r3, #3
   47bb4:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   47bb6:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   47bba:	4b0e      	ldr	r3, [pc, #56]	; (47bf4 <usbd_ep_abort+0xe4>)
            m_ep_ready       |=   1U << ep2bit(ep) ;
   47bbc:	6038      	str	r0, [r7, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   47bbe:	2206      	movs	r2, #6
   47bc0:	f88d 2004 	strb.w	r2, [sp, #4]
   47bc4:	f88d 1006 	strb.w	r1, [sp, #6]
            m_event_handler(&evt);
   47bc8:	681b      	ldr	r3, [r3, #0]
   47bca:	a801      	add	r0, sp, #4
   47bcc:	4798      	blx	r3
   47bce:	e7bf      	b.n	47b50 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   47bd0:	f240 72b4 	movw	r2, #1972	; 0x7b4
   47bd4:	603a      	str	r2, [r7, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   47bd6:	681a      	ldr	r2, [r3, #0]
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47bd8:	681f      	ldr	r7, [r3, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   47bda:	b2d2      	uxtb	r2, r2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   47bdc:	f042 0204 	orr.w	r2, r2, #4
   47be0:	e7d6      	b.n	47b90 <usbd_ep_abort+0x80>
   47be2:	bf00      	nop
   47be4:	200068d4 	.word	0x200068d4
   47be8:	20006944 	.word	0x20006944
   47bec:	40027800 	.word	0x40027800
   47bf0:	40027804 	.word	0x40027804
   47bf4:	20006a68 	.word	0x20006a68

00047bf8 <ev_setup_handler>:
{
   47bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   47bfa:	4b16      	ldr	r3, [pc, #88]	; (47c54 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47bfc:	4c16      	ldr	r4, [pc, #88]	; (47c58 <ev_setup_handler+0x60>)
   47bfe:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
   47c02:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
   47c04:	4d15      	ldr	r5, [pc, #84]	; (47c5c <ev_setup_handler+0x64>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47c06:	43da      	mvns	r2, r3
   47c08:	4b15      	ldr	r3, [pc, #84]	; (47c60 <ev_setup_handler+0x68>)
        & (1U <<ep2bit(m_last_setup_dir)))
   47c0a:	782f      	ldrb	r7, [r5, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47c0c:	681b      	ldr	r3, [r3, #0]
   47c0e:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   47c10:	4638      	mov	r0, r7
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47c12:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
   47c14:	f008 fdfd 	bl	50812 <ep2bit>
   47c18:	2301      	movs	r3, #1
   47c1a:	fa03 f000 	lsl.w	r0, r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   47c1e:	4210      	tst	r0, r2
   47c20:	d002      	beq.n	47c28 <ev_setup_handler+0x30>
        usbd_ep_abort(m_last_setup_dir);
   47c22:	4638      	mov	r0, r7
   47c24:	f7ff ff74 	bl	47b10 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   47c28:	f006 0680 	and.w	r6, r6, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
   47c2c:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
   47c30:	702e      	strb	r6, [r5, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
   47c32:	f7ff faf9 	bl	47228 <atomic_and.constprop.17>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   47c36:	6823      	ldr	r3, [r4, #0]
   47c38:	f043 0301 	orr.w	r3, r3, #1
   47c3c:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
   47c3e:	2300      	movs	r3, #0
   47c40:	9301      	str	r3, [sp, #4]
   47c42:	2305      	movs	r3, #5
   47c44:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   47c48:	4b06      	ldr	r3, [pc, #24]	; (47c64 <ev_setup_handler+0x6c>)
   47c4a:	a801      	add	r0, sp, #4
   47c4c:	681b      	ldr	r3, [r3, #0]
   47c4e:	4798      	blx	r3
}
   47c50:	b003      	add	sp, #12
   47c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   47c54:	40027000 	.word	0x40027000
   47c58:	20006944 	.word	0x20006944
   47c5c:	20006dab 	.word	0x20006dab
   47c60:	200068d4 	.word	0x200068d4
   47c64:	20006a68 	.word	0x20006a68

00047c68 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
   47c68:	4b1b      	ldr	r3, [pc, #108]	; (47cd8 <nrfx_usbd_irq_handler+0x70>)
   47c6a:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
   47c6e:	2300      	movs	r3, #0
{
   47c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   47c74:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   47c76:	461d      	mov	r5, r3
    while (to_process)
   47c78:	b970      	cbnz	r0, 47c98 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
   47c7a:	4f18      	ldr	r7, [pc, #96]	; (47cdc <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   47c7c:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   47c80:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
   47c84:	f04f 0801 	mov.w	r8, #1
    while (active)
   47c88:	b9bc      	cbnz	r4, 47cba <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
   47c8a:	f7ff fd6d 	bl	47768 <usbd_dmareq_process>
    if (setup_active)
   47c8e:	b306      	cbz	r6, 47cd2 <nrfx_usbd_irq_handler+0x6a>
}
   47c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   47c94:	f7ff bfb0 	b.w	47bf8 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
   47c98:	fa90 f2a0 	rbit	r2, r0
   47c9c:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   47ca0:	490f      	ldr	r1, [pc, #60]	; (47ce0 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   47ca2:	0096      	lsls	r6, r2, #2
   47ca4:	4431      	add	r1, r6
   47ca6:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   47caa:	680e      	ldr	r6, [r1, #0]
    if (ret)
   47cac:	b116      	cbz	r6, 47cb4 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   47cae:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   47cb0:	6809      	ldr	r1, [r1, #0]
            active |= 1UL << event_nr;
   47cb2:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
   47cb4:	ea20 0002 	bic.w	r0, r0, r2
   47cb8:	e7de      	b.n	47c78 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
   47cba:	fa94 f5a4 	rbit	r5, r4
   47cbe:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
   47cc2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
   47cc6:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
   47cca:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   47ccc:	ea24 0405 	bic.w	r4, r4, r5
   47cd0:	e7da      	b.n	47c88 <nrfx_usbd_irq_handler+0x20>
}
   47cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   47cd6:	bf00      	nop
   47cd8:	40027000 	.word	0x40027000
   47cdc:	00053cb4 	.word	0x00053cb4
   47ce0:	40027100 	.word	0x40027100

00047ce4 <usbd_ep_abort_all>:
{
   47ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   47ce6:	4e10      	ldr	r6, [pc, #64]	; (47d28 <usbd_ep_abort_all+0x44>)
   47ce8:	4a10      	ldr	r2, [pc, #64]	; (47d2c <usbd_ep_abort_all+0x48>)
   47cea:	6834      	ldr	r4, [r6, #0]
   47cec:	6812      	ldr	r2, [r2, #0]
   47cee:	0c24      	lsrs	r4, r4, #16
   47cf0:	0424      	lsls	r4, r4, #16
   47cf2:	4314      	orrs	r4, r2
        ep_waiting &= ~(1U << bitpos);
   47cf4:	2701      	movs	r7, #1
    while (0 != ep_waiting)
   47cf6:	b91c      	cbnz	r4, 47d00 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   47cf8:	f240 13ff 	movw	r3, #511	; 0x1ff
   47cfc:	6033      	str	r3, [r6, #0]
}
   47cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
   47d00:	fa94 f5a4 	rbit	r5, r4
   47d04:	fab5 f585 	clz	r5, r5
   47d08:	b2e8      	uxtb	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   47d0a:	2d0f      	cmp	r5, #15
   47d0c:	bfc6      	itte	gt
   47d0e:	3810      	subgt	r0, #16
   47d10:	b2c0      	uxtbgt	r0, r0
   47d12:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   47d16:	0703      	lsls	r3, r0, #28
   47d18:	d401      	bmi.n	47d1e <usbd_ep_abort_all+0x3a>
            usbd_ep_abort(bit2ep(bitpos));
   47d1a:	f7ff fef9 	bl	47b10 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
   47d1e:	fa07 f505 	lsl.w	r5, r7, r5
   47d22:	ea24 0405 	bic.w	r4, r4, r5
   47d26:	e7e6      	b.n	47cf6 <usbd_ep_abort_all+0x12>
   47d28:	20006944 	.word	0x20006944
   47d2c:	200068d4 	.word	0x200068d4

00047d30 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   47d30:	4b0c      	ldr	r3, [pc, #48]	; (47d64 <nrfx_usbd_stop+0x34>)
   47d32:	2280      	movs	r2, #128	; 0x80
{
   47d34:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   47d36:	2027      	movs	r0, #39	; 0x27
   47d38:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   47d3c:	f7e4 feca 	bl	2cad4 <arch_irq_is_enabled>
   47d40:	b170      	cbz	r0, 47d60 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   47d42:	4c09      	ldr	r4, [pc, #36]	; (47d68 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
   47d44:	f7ff ffce 	bl	47ce4 <usbd_ep_abort_all>
   47d48:	2300      	movs	r3, #0
   47d4a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   47d4e:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
   47d50:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
   47d54:	f7e4 feaa 	bl	2caac <arch_irq_disable>
    p_reg->INTENCLR = mask;
   47d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   47d5c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   47d60:	bd10      	pop	{r4, pc}
   47d62:	bf00      	nop
   47d64:	e000e100 	.word	0xe000e100
   47d68:	40027000 	.word	0x40027000

00047d6c <nrfx_usbd_disable>:
{
   47d6c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   47d6e:	f7ff ffdf 	bl	47d30 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   47d72:	4b08      	ldr	r3, [pc, #32]	; (47d94 <nrfx_usbd_disable+0x28>)
   47d74:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   47d78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   47d7c:	2200      	movs	r2, #0
   47d7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   47d82:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    usbd_dma_pending_clear();
   47d86:	f7ff f94d 	bl	47024 <usbd_dma_pending_clear>
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   47d8a:	4b03      	ldr	r3, [pc, #12]	; (47d98 <nrfx_usbd_disable+0x2c>)
   47d8c:	2201      	movs	r2, #1
   47d8e:	701a      	strb	r2, [r3, #0]
}
   47d90:	bd08      	pop	{r3, pc}
   47d92:	bf00      	nop
   47d94:	40027000 	.word	0x40027000
   47d98:	20006daa 	.word	0x20006daa

00047d9c <nrfx_usbd_suspend>:
{
   47d9c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   47d9e:	f04f 0320 	mov.w	r3, #32
   47da2:	f3ef 8511 	mrs	r5, BASEPRI
   47da6:	f383 8812 	msr	BASEPRI_MAX, r3
   47daa:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   47dae:	4b11      	ldr	r3, [pc, #68]	; (47df4 <nrfx_usbd_suspend+0x58>)
   47db0:	781b      	ldrb	r3, [r3, #0]
   47db2:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   47db6:	b933      	cbnz	r3, 47dc6 <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
   47db8:	2400      	movs	r4, #0
	__asm__ volatile(
   47dba:	f385 8811 	msr	BASEPRI, r5
   47dbe:	f3bf 8f6f 	isb	sy
}
   47dc2:	4620      	mov	r0, r4
   47dc4:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   47dc6:	f7ff ff8d 	bl	47ce4 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   47dca:	4b0b      	ldr	r3, [pc, #44]	; (47df8 <nrfx_usbd_suspend+0x5c>)
   47dcc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   47dd0:	f412 7200 	ands.w	r2, r2, #512	; 0x200
   47dd4:	d1f0      	bne.n	47db8 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   47dd6:	2101      	movs	r1, #1
   47dd8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   47ddc:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   47de0:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   47de4:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   47de6:	bf42      	ittt	mi
   47de8:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   47dec:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
   47df0:	4614      	movmi	r4, r2
   47df2:	e7e2      	b.n	47dba <nrfx_usbd_suspend+0x1e>
   47df4:	20006da8 	.word	0x20006da8
   47df8:	40027000 	.word	0x40027000

00047dfc <nrfx_usbd_ep_disable>:
{
   47dfc:	b510      	push	{r4, lr}
   47dfe:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
   47e00:	f7ff fe86 	bl	47b10 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   47e04:	4a10      	ldr	r2, [pc, #64]	; (47e48 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
   47e06:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   47e0a:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
   47e0e:	f04f 0301 	mov.w	r3, #1
   47e12:	bf14      	ite	ne
   47e14:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   47e18:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
   47e1c:	fa03 f300 	lsl.w	r3, r3, r0
   47e20:	ea6f 0303 	mvn.w	r3, r3
        p_reg->EPINEN &= ~(1UL << epnr);
   47e24:	bf15      	itete	ne
   47e26:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
   47e28:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
   47e2a:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
   47e2e:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   47e32:	bf14      	ite	ne
   47e34:	4b05      	ldrne	r3, [pc, #20]	; (47e4c <nrfx_usbd_ep_disable+0x50>)
   47e36:	4b06      	ldreq	r3, [pc, #24]	; (47e50 <nrfx_usbd_ep_disable+0x54>)
   47e38:	5c1a      	ldrb	r2, [r3, r0]
   47e3a:	2301      	movs	r3, #1
   47e3c:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   47e3e:	4a02      	ldr	r2, [pc, #8]	; (47e48 <nrfx_usbd_ep_disable+0x4c>)
   47e40:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   47e44:	bd10      	pop	{r4, pc}
   47e46:	bf00      	nop
   47e48:	40027000 	.word	0x40027000
   47e4c:	0005456f 	.word	0x0005456f
   47e50:	00054578 	.word	0x00054578

00047e54 <nrfx_usbd_ep_enable>:
{
   47e54:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   47e56:	b243      	sxtb	r3, r0
   47e58:	2b00      	cmp	r3, #0
   47e5a:	4b23      	ldr	r3, [pc, #140]	; (47ee8 <nrfx_usbd_ep_enable+0x94>)
   47e5c:	4a23      	ldr	r2, [pc, #140]	; (47eec <nrfx_usbd_ep_enable+0x98>)
   47e5e:	bfa8      	it	ge
   47e60:	461a      	movge	r2, r3
   47e62:	f000 030f 	and.w	r3, r0, #15
   47e66:	f04f 0401 	mov.w	r4, #1
   47e6a:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
   47e6c:	4a20      	ldr	r2, [pc, #128]	; (47ef0 <nrfx_usbd_ep_enable+0x9c>)
   47e6e:	fa04 f101 	lsl.w	r1, r4, r1
{
   47e72:	4605      	mov	r5, r0
   47e74:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   47e78:	da0c      	bge.n	47e94 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   47e7a:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
   47e7e:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   47e80:	07c8      	lsls	r0, r1, #31
   47e82:	d406      	bmi.n	47e92 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
   47e84:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   47e88:	fa04 f303 	lsl.w	r3, r4, r3
   47e8c:	4303      	orrs	r3, r0
   47e8e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   47e92:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   47e94:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
   47e98:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   47e9a:	07c9      	lsls	r1, r1, #31
   47e9c:	d4f9      	bmi.n	47e92 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
   47e9e:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
   47ea2:	fa04 f103 	lsl.w	r1, r4, r3
   47ea6:	4331      	orrs	r1, r6
   47ea8:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   47eac:	2b00      	cmp	r3, #0
   47eae:	d0f0      	beq.n	47e92 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
   47eb0:	0703      	lsls	r3, r0, #28
   47eb2:	d4ee      	bmi.n	47e92 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
   47eb4:	f04f 0320 	mov.w	r3, #32
   47eb8:	f3ef 8611 	mrs	r6, BASEPRI
   47ebc:	f383 8812 	msr	BASEPRI_MAX, r3
   47ec0:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   47ec4:	f7ff fdfa 	bl	47abc <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   47ec8:	4628      	mov	r0, r5
   47eca:	f008 fca2 	bl	50812 <ep2bit>
   47ece:	4a09      	ldr	r2, [pc, #36]	; (47ef4 <nrfx_usbd_ep_enable+0xa0>)
   47ed0:	6813      	ldr	r3, [r2, #0]
   47ed2:	fa04 f000 	lsl.w	r0, r4, r0
   47ed6:	ea23 0000 	bic.w	r0, r3, r0
   47eda:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
   47edc:	f386 8811 	msr	BASEPRI, r6
   47ee0:	f3bf 8f6f 	isb	sy
        NRFX_CRITICAL_SECTION_EXIT();
   47ee4:	e7d5      	b.n	47e92 <nrfx_usbd_ep_enable+0x3e>
   47ee6:	bf00      	nop
   47ee8:	00054578 	.word	0x00054578
   47eec:	0005456f 	.word	0x0005456f
   47ef0:	40027000 	.word	0x40027000
   47ef4:	200068d4 	.word	0x200068d4

00047ef8 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   47ef8:	0603      	lsls	r3, r0, #24
{
   47efa:	b510      	push	{r4, lr}
   47efc:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   47efe:	d405      	bmi.n	47f0c <nrfx_usbd_ep_stall_clear+0x14>
   47f00:	f7ff fd4e 	bl	479a0 <nrfx_usbd_ep_stall_check>
   47f04:	b110      	cbz	r0, 47f0c <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
   47f06:	4620      	mov	r0, r4
   47f08:	f7ff fdd8 	bl	47abc <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   47f0c:	4b01      	ldr	r3, [pc, #4]	; (47f14 <nrfx_usbd_ep_stall_clear+0x1c>)
   47f0e:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   47f12:	bd10      	pop	{r4, pc}
   47f14:	40027000 	.word	0x40027000

00047f18 <kscan_matrix_init>:
    }

    return 0;
}

static int kscan_matrix_init(const struct device *dev) {
   47f18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_matrix_data *data = dev->data;
   47f1c:	6907      	ldr	r7, [r0, #16]
    const struct kscan_matrix_config *config = dev->config;
   47f1e:	f8d0 8004 	ldr.w	r8, [r0, #4]

    data->dev = dev;
   47f22:	6038      	str	r0, [r7, #0]
static int kscan_matrix_init(const struct device *dev) {
   47f24:	4604      	mov	r4, r0
    for (int i = 0; i < config->inputs.len; i++) {
   47f26:	2500      	movs	r5, #0
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->pin));
   47f28:	f04f 0a01 	mov.w	sl, #1
    for (int i = 0; i < config->inputs.len; i++) {
   47f2c:	f8d8 3014 	ldr.w	r3, [r8, #20]
   47f30:	42ab      	cmp	r3, r5
   47f32:	d90a      	bls.n	47f4a <kscan_matrix_init+0x32>
        const struct kscan_gpio_dt_spec *gpio = &config->inputs.gpios[i];
   47f34:	f8d8 6010 	ldr.w	r6, [r8, #16]
   47f38:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   47f3c:	eb06 0b09 	add.w	fp, r6, r9
    if (!device_is_ready(gpio->port)) {
   47f40:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   47f44:	f008 fee7 	bl	50d16 <z_device_is_ready>
   47f48:	b990      	cbnz	r0, 47f70 <kscan_matrix_init+0x58>

    kscan_matrix_init_inputs(dev);
    kscan_matrix_init_outputs(dev);
   47f4a:	f8d4 8004 	ldr.w	r8, [r4, #4]
    for (int i = 0; i < config->outputs.len; i++) {
   47f4e:	2500      	movs	r5, #0
   47f50:	f8d8 301c 	ldr.w	r3, [r8, #28]
   47f54:	42ab      	cmp	r3, r5
   47f56:	d830      	bhi.n	47fba <kscan_matrix_init+0xa2>
    kscan_matrix_set_all_outputs(dev, 0);
   47f58:	2100      	movs	r1, #0
   47f5a:	6860      	ldr	r0, [r4, #4]
   47f5c:	f008 fd3c 	bl	509d8 <kscan_matrix_set_all_outputs.isra.1>

    k_work_init_delayable(&data->work, kscan_matrix_work_handler);
   47f60:	f107 0008 	add.w	r0, r7, #8
   47f64:	4921      	ldr	r1, [pc, #132]	; (47fec <kscan_matrix_init+0xd4>)
   47f66:	f009 f928 	bl	511ba <k_work_init_delayable>

    return 0;
}
   47f6a:	2000      	movs	r0, #0
   47f6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int err = gpio_pin_configure(gpio->port, gpio->pin, GPIO_INPUT | gpio->dt_flags);
   47f70:	f89b 2005 	ldrb.w	r2, [fp, #5]
   47f74:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
   47f78:	f89b 1004 	ldrb.w	r1, [fp, #4]
   47f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   47f80:	f008 fcf8 	bl	50974 <z_impl_gpio_pin_configure>
    if (err) {
   47f84:	2800      	cmp	r0, #0
   47f86:	d1e0      	bne.n	47f4a <kscan_matrix_init+0x32>
    struct kscan_matrix_irq_callback *irq = &data->irqs[index];
   47f88:	6921      	ldr	r1, [r4, #16]
   47f8a:	012a      	lsls	r2, r5, #4
   47f8c:	6b89      	ldr	r1, [r1, #56]	; 0x38
    irq->dev = dev;
   47f8e:	508c      	str	r4, [r1, r2]
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->pin));
   47f90:	f89b 3004 	ldrb.w	r3, [fp, #4]
    struct kscan_matrix_irq_callback *irq = &data->irqs[index];
   47f94:	1888      	adds	r0, r1, r2
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   47f96:	4a16      	ldr	r2, [pc, #88]	; (47ff0 <kscan_matrix_init+0xd8>)
    gpio_init_callback(&irq->callback, kscan_matrix_irq_callback_handler, BIT(gpio->pin));
   47f98:	fa0a f303 	lsl.w	r3, sl, r3
	callback->pin_mask = pin_mask;
   47f9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   47fa0:	1d01      	adds	r1, r0, #4
    err = gpio_add_callback(gpio->port, &irq->callback);
   47fa2:	f856 0009 	ldr.w	r0, [r6, r9]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   47fa6:	6883      	ldr	r3, [r0, #8]
   47fa8:	69db      	ldr	r3, [r3, #28]
   47faa:	2b00      	cmp	r3, #0
   47fac:	d0cd      	beq.n	47f4a <kscan_matrix_init+0x32>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   47fae:	2201      	movs	r2, #1
   47fb0:	4798      	blx	r3
    if (err) {
   47fb2:	2800      	cmp	r0, #0
   47fb4:	d1c9      	bne.n	47f4a <kscan_matrix_init+0x32>
    for (int i = 0; i < config->inputs.len; i++) {
   47fb6:	3501      	adds	r5, #1
   47fb8:	e7b8      	b.n	47f2c <kscan_matrix_init+0x14>
        const struct kscan_gpio_dt_spec *gpio = &config->outputs.gpios[i];
   47fba:	f8d8 6018 	ldr.w	r6, [r8, #24]
   47fbe:	eb06 09c5 	add.w	r9, r6, r5, lsl #3
    if (!device_is_ready(gpio->port)) {
   47fc2:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
   47fc6:	f008 fea6 	bl	50d16 <z_device_is_ready>
   47fca:	2800      	cmp	r0, #0
   47fcc:	d0c4      	beq.n	47f58 <kscan_matrix_init+0x40>
    int err = gpio_pin_configure(gpio->port, gpio->pin, GPIO_OUTPUT | gpio->dt_flags);
   47fce:	f899 2005 	ldrb.w	r2, [r9, #5]
   47fd2:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
   47fd6:	f899 1004 	ldrb.w	r1, [r9, #4]
   47fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   47fde:	f008 fcc9 	bl	50974 <z_impl_gpio_pin_configure>
    if (err) {
   47fe2:	2800      	cmp	r0, #0
   47fe4:	d1b8      	bne.n	47f58 <kscan_matrix_init+0x40>
    for (int i = 0; i < config->outputs.len; i++) {
   47fe6:	3501      	adds	r5, #1
   47fe8:	e7b2      	b.n	47f50 <kscan_matrix_init+0x38>
   47fea:	bf00      	nop
   47fec:	00050c07 	.word	0x00050c07
   47ff0:	00050c2d 	.word	0x00050c2d

00047ff4 <vddh_sample_fetch>:
    struct adc_channel_cfg acc;
    struct adc_sequence as;
    struct battery_value value;
};

static int vddh_sample_fetch(const struct device *dev, enum sensor_channel chan) {
   47ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    // Make sure selected channel is supported
    if (chan != SENSOR_CHAN_GAUGE_VOLTAGE && chan != SENSOR_CHAN_GAUGE_STATE_OF_CHARGE &&
   47ff6:	3927      	subs	r1, #39	; 0x27
   47ff8:	b28b      	uxth	r3, r1
   47ffa:	2b12      	cmp	r3, #18
   47ffc:	d828      	bhi.n	48050 <vddh_sample_fetch+0x5c>
   47ffe:	4916      	ldr	r1, [pc, #88]	; (48058 <vddh_sample_fetch+0x64>)
   48000:	40d9      	lsrs	r1, r3
   48002:	43c9      	mvns	r1, r1
   48004:	f011 0401 	ands.w	r4, r1, #1
   48008:	d122      	bne.n	48050 <vddh_sample_fetch+0x5c>
        chan != SENSOR_CHAN_ALL) {
        LOG_DBG("Selected channel is not supported: %d.", chan);
        return -ENOTSUP;
    }

    struct vddh_data *drv_data = dev->data;
   4800a:	6905      	ldr	r5, [r0, #16]
		       const struct adc_sequence *sequence);

static inline int z_impl_adc_read(const struct device *dev,
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
   4800c:	4813      	ldr	r0, [pc, #76]	; (4805c <vddh_sample_fetch+0x68>)
   4800e:	6886      	ldr	r6, [r0, #8]
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
   48010:	f105 0108 	add.w	r1, r5, #8
   48014:	6873      	ldr	r3, [r6, #4]
   48016:	4798      	blx	r3
    struct adc_sequence *as = &drv_data->as;

    int rc = adc_read(adc, as);
    as->calibrate = false;
   48018:	76ac      	strb	r4, [r5, #26]

    if (rc != 0) {
   4801a:	4604      	mov	r4, r0
   4801c:	b9a8      	cbnz	r0, 4804a <vddh_sample_fetch+0x56>
        LOG_ERR("Failed to read ADC: %d", rc);
        return rc;
    }

    int32_t val = drv_data->value.adc_raw;
   4801e:	8baa      	ldrh	r2, [r5, #28]
    rc = adc_raw_to_millivolts(adc_ref_internal(adc), drv_data->acc.gain, as->resolution, &val);
   48020:	8933      	ldrh	r3, [r6, #8]
   48022:	7828      	ldrb	r0, [r5, #0]
   48024:	7e2f      	ldrb	r7, [r5, #24]
	int32_t adc_mv = *valp * ref_mv;
   48026:	4353      	muls	r3, r2
	int ret = adc_gain_invert(gain, &adc_mv);
   48028:	a901      	add	r1, sp, #4
	int32_t adc_mv = *valp * ref_mv;
   4802a:	9301      	str	r3, [sp, #4]
	int ret = adc_gain_invert(gain, &adc_mv);
   4802c:	f7fc fef4 	bl	44e18 <adc_gain_invert>
	if (ret == 0) {
   48030:	4604      	mov	r4, r0
   48032:	b950      	cbnz	r0, 4804a <vddh_sample_fetch+0x56>
		*valp = (adc_mv >> resolution);
   48034:	9801      	ldr	r0, [sp, #4]
   48036:	4138      	asrs	r0, r7
    if (rc != 0) {
        LOG_ERR("Failed to convert raw ADC to mV: %d", rc);
        return rc;
    }

    drv_data->value.millivolts = val * VDDHDIV;
   48038:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   4803c:	b280      	uxth	r0, r0
   4803e:	83e8      	strh	r0, [r5, #30]
    drv_data->value.state_of_charge = lithium_ion_mv_to_pct(drv_data->value.millivolts);
   48040:	b200      	sxth	r0, r0
   48042:	f008 fe50 	bl	50ce6 <lithium_ion_mv_to_pct>
   48046:	f885 0020 	strb.w	r0, [r5, #32]

    LOG_DBG("ADC raw %d ~ %d mV => %d%%", drv_data->value.adc_raw, drv_data->value.millivolts,
            drv_data->value.state_of_charge);

    return rc;
}
   4804a:	4620      	mov	r0, r4
   4804c:	b003      	add	sp, #12
   4804e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -ENOTSUP;
   48050:	f06f 0485 	mvn.w	r4, #133	; 0x85
   48054:	e7f9      	b.n	4804a <vddh_sample_fetch+0x56>
   48056:	bf00      	nop
   48058:	00040021 	.word	0x00040021
   4805c:	000519d4 	.word	0x000519d4

00048060 <vddh_init>:
static const struct sensor_driver_api vddh_api = {
    .sample_fetch = vddh_sample_fetch,
    .channel_get = vddh_channel_get,
};

static int vddh_init(const struct device *dev) {
   48060:	b570      	push	{r4, r5, r6, lr}
    struct vddh_data *drv_data = dev->data;
   48062:	6904      	ldr	r4, [r0, #16]
   48064:	4d12      	ldr	r5, [pc, #72]	; (480b0 <vddh_init+0x50>)
   48066:	4628      	mov	r0, r5
   48068:	f008 fe55 	bl	50d16 <z_device_is_ready>

    if (!device_is_ready(adc)) {
   4806c:	b1e8      	cbz	r0, 480aa <vddh_init+0x4a>
        LOG_ERR("ADC device is not ready %s", adc->name);
        return -ENODEV;
    }

    drv_data->as = (struct adc_sequence){
   4806e:	2214      	movs	r2, #20
   48070:	2100      	movs	r1, #0
   48072:	f104 0008 	add.w	r0, r4, #8
   48076:	f004 f944 	bl	4c302 <memset>
        .channels = BIT(0),
        .buffer = &drv_data->value.adc_raw,
   4807a:	f104 021c 	add.w	r2, r4, #28
    drv_data->as = (struct adc_sequence){
   4807e:	6122      	str	r2, [r4, #16]
        .oversampling = 4,
        .calibrate = true,
    };

#ifdef CONFIG_ADC_NRFX_SAADC
    drv_data->acc = (struct adc_channel_cfg){
   48080:	4a0c      	ldr	r2, [pc, #48]	; (480b4 <vddh_init+0x54>)
   48082:	2100      	movs	r1, #0
   48084:	e9c4 2100 	strd	r2, r1, [r4]
   48088:	220d      	movs	r2, #13
   4808a:	7162      	strb	r2, [r4, #5]
    drv_data->as = (struct adc_sequence){
   4808c:	2202      	movs	r2, #2
   4808e:	2301      	movs	r3, #1
   48090:	6162      	str	r2, [r4, #20]
        .reference = ADC_REF_INTERNAL,
        .acquisition_time = ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40),
        .input_positive = SAADC_CH_PSELN_PSELN_VDDHDIV5,
    };

    drv_data->as.resolution = 12;
   48092:	f240 420c 	movw	r2, #1036	; 0x40c
    drv_data->as = (struct adc_sequence){
   48096:	60e3      	str	r3, [r4, #12]
    drv_data->as.resolution = 12;
   48098:	8322      	strh	r2, [r4, #24]
    drv_data->as = (struct adc_sequence){
   4809a:	76a3      	strb	r3, [r4, #26]
	return api->channel_setup(dev, channel_cfg);
   4809c:	68ab      	ldr	r3, [r5, #8]
   4809e:	4621      	mov	r1, r4
   480a0:	4628      	mov	r0, r5
   480a2:	681b      	ldr	r3, [r3, #0]

    const int rc = adc_channel_setup(adc, &drv_data->acc);
    LOG_DBG("VDDHDIV5 setup returned %d", rc);

    return rc;
}
   480a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   480a8:	4718      	bx	r3
   480aa:	f06f 0012 	mvn.w	r0, #18
   480ae:	bd70      	pop	{r4, r5, r6, pc}
   480b0:	000519d4 	.word	0x000519d4
   480b4:	40280401 	.word	0x40280401

000480b8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   480b8:	4b0e      	ldr	r3, [pc, #56]	; (480f4 <z_sys_init_run_level+0x3c>)
{
   480ba:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   480bc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   480c0:	3001      	adds	r0, #1
   480c2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   480c6:	42a6      	cmp	r6, r4
   480c8:	d800      	bhi.n	480cc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   480ca:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   480cc:	e9d4 3500 	ldrd	r3, r5, [r4]
   480d0:	4628      	mov	r0, r5
   480d2:	4798      	blx	r3
		if (dev != NULL) {
   480d4:	b165      	cbz	r5, 480f0 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   480d6:	68eb      	ldr	r3, [r5, #12]
   480d8:	b130      	cbz	r0, 480e8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   480da:	2800      	cmp	r0, #0
   480dc:	bfb8      	it	lt
   480de:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   480e0:	28ff      	cmp	r0, #255	; 0xff
   480e2:	bfa8      	it	ge
   480e4:	20ff      	movge	r0, #255	; 0xff
   480e6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   480e8:	785a      	ldrb	r2, [r3, #1]
   480ea:	f042 0201 	orr.w	r2, r2, #1
   480ee:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   480f0:	3408      	adds	r4, #8
   480f2:	e7e8      	b.n	480c6 <z_sys_init_run_level+0xe>
   480f4:	00053d98 	.word	0x00053d98

000480f8 <z_device_get_all_static>:
#include <syscalls/device_is_ready_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   480f8:	4a03      	ldr	r2, [pc, #12]	; (48108 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   480fa:	4b04      	ldr	r3, [pc, #16]	; (4810c <z_device_get_all_static+0x14>)
	*devices = __device_start;
   480fc:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   480fe:	1a9b      	subs	r3, r3, r2
}
   48100:	4803      	ldr	r0, [pc, #12]	; (48110 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   48102:	109b      	asrs	r3, r3, #2
}
   48104:	4358      	muls	r0, r3
   48106:	4770      	bx	lr
   48108:	00051948 	.word	0x00051948
   4810c:	00051aec 	.word	0x00051aec
   48110:	b6db6db7 	.word	0xb6db6db7

00048114 <z_impl_device_get_binding>:
{
   48114:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   48116:	4605      	mov	r5, r0
   48118:	b910      	cbnz	r0, 48120 <z_impl_device_get_binding+0xc>
		return NULL;
   4811a:	2400      	movs	r4, #0
}
   4811c:	4620      	mov	r0, r4
   4811e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   48120:	7803      	ldrb	r3, [r0, #0]
   48122:	2b00      	cmp	r3, #0
   48124:	d0f9      	beq.n	4811a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   48126:	4a0f      	ldr	r2, [pc, #60]	; (48164 <z_impl_device_get_binding+0x50>)
   48128:	4c0f      	ldr	r4, [pc, #60]	; (48168 <z_impl_device_get_binding+0x54>)
   4812a:	4616      	mov	r6, r2
   4812c:	4294      	cmp	r4, r2
   4812e:	d108      	bne.n	48142 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   48130:	4c0d      	ldr	r4, [pc, #52]	; (48168 <z_impl_device_get_binding+0x54>)
   48132:	42b4      	cmp	r4, r6
   48134:	d0f1      	beq.n	4811a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   48136:	4620      	mov	r0, r4
   48138:	f008 fded 	bl	50d16 <z_device_is_ready>
   4813c:	b950      	cbnz	r0, 48154 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   4813e:	341c      	adds	r4, #28
   48140:	e7f7      	b.n	48132 <z_impl_device_get_binding+0x1e>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   48142:	4620      	mov	r0, r4
   48144:	f008 fde7 	bl	50d16 <z_device_is_ready>
   48148:	b110      	cbz	r0, 48150 <z_impl_device_get_binding+0x3c>
   4814a:	6823      	ldr	r3, [r4, #0]
   4814c:	42ab      	cmp	r3, r5
   4814e:	d0e5      	beq.n	4811c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   48150:	341c      	adds	r4, #28
   48152:	e7eb      	b.n	4812c <z_impl_device_get_binding+0x18>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   48154:	6821      	ldr	r1, [r4, #0]
   48156:	4628      	mov	r0, r5
   48158:	f004 f89d 	bl	4c296 <strcmp>
   4815c:	2800      	cmp	r0, #0
   4815e:	d1ee      	bne.n	4813e <z_impl_device_get_binding+0x2a>
   48160:	e7dc      	b.n	4811c <z_impl_device_get_binding+0x8>
   48162:	bf00      	nop
   48164:	00051aec 	.word	0x00051aec
   48168:	00051948 	.word	0x00051948

0004816c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   4816c:	4b01      	ldr	r3, [pc, #4]	; (48174 <z_impl_z_errno+0x8>)
   4816e:	6898      	ldr	r0, [r3, #8]
}
   48170:	3064      	adds	r0, #100	; 0x64
   48172:	4770      	bx	lr
   48174:	20006b30 	.word	0x20006b30

00048178 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   48178:	b510      	push	{r4, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   4817a:	2300      	movs	r3, #0
{
   4817c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   4817e:	2201      	movs	r2, #1
   48180:	e9cd 2304 	strd	r2, r3, [sp, #16]
   48184:	220f      	movs	r2, #15
   48186:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   4818a:	4c0c      	ldr	r4, [pc, #48]	; (481bc <init_idle_thread+0x44>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   4818c:	4a0c      	ldr	r2, [pc, #48]	; (481c0 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
   4818e:	9301      	str	r3, [sp, #4]
   48190:	490c      	ldr	r1, [pc, #48]	; (481c4 <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   48192:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   48194:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   48198:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   4819c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   481a0:	9300      	str	r3, [sp, #0]
   481a2:	fb02 1100 	mla	r1, r2, r0, r1
   481a6:	4b08      	ldr	r3, [pc, #32]	; (481c8 <init_idle_thread+0x50>)
   481a8:	4620      	mov	r0, r4
   481aa:	f000 f90b 	bl	483c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   481ae:	7b63      	ldrb	r3, [r4, #13]
   481b0:	f023 0304 	bic.w	r3, r3, #4
   481b4:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   481b6:	b006      	add	sp, #24
   481b8:	bd10      	pop	{r4, pc}
   481ba:	bf00      	nop
   481bc:	20003a08 	.word	0x20003a08
   481c0:	20006b30 	.word	0x20006b30
   481c4:	20009430 	.word	0x20009430
   481c8:	00048535 	.word	0x00048535

000481cc <bg_thread_main>:
{
   481cc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   481ce:	4b0a      	ldr	r3, [pc, #40]	; (481f8 <bg_thread_main+0x2c>)
   481d0:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   481d2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   481d4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   481d6:	f7ff ff6f 	bl	480b8 <z_sys_init_run_level>
	boot_banner();
   481da:	f009 fb32 	bl	51842 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   481de:	2003      	movs	r0, #3
   481e0:	f7ff ff6a 	bl	480b8 <z_sys_init_run_level>
	z_init_static_threads();
   481e4:	f000 f948 	bl	48478 <z_init_static_threads>
	main();
   481e8:	f7e2 fa56 	bl	2a698 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   481ec:	4a03      	ldr	r2, [pc, #12]	; (481fc <bg_thread_main+0x30>)
   481ee:	7b13      	ldrb	r3, [r2, #12]
   481f0:	f023 0301 	bic.w	r3, r3, #1
   481f4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   481f6:	bd08      	pop	{r3, pc}
   481f8:	20006dac 	.word	0x20006dac
   481fc:	20003a88 	.word	0x20003a88

00048200 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   48200:	4802      	ldr	r0, [pc, #8]	; (4820c <z_bss_zero+0xc>)
   48202:	4a03      	ldr	r2, [pc, #12]	; (48210 <z_bss_zero+0x10>)
   48204:	2100      	movs	r1, #0
   48206:	1a12      	subs	r2, r2, r0
   48208:	f004 b87b 	b.w	4c302 <memset>
   4820c:	20001260 	.word	0x20001260
   48210:	20006db0 	.word	0x20006db0

00048214 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   48214:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   48216:	4f31      	ldr	r7, [pc, #196]	; (482dc <z_cstart+0xc8>)
   48218:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   4821a:	f387 8808 	msr	MSP, r7
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   4821e:	4d30      	ldr	r5, [pc, #192]	; (482e0 <z_cstart+0xcc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   48220:	4e30      	ldr	r6, [pc, #192]	; (482e4 <z_cstart+0xd0>)
   48222:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   48224:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 482f8 <z_cstart+0xe4>
   48228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   4822c:	2400      	movs	r4, #0
   4822e:	616b      	str	r3, [r5, #20]
   48230:	23e0      	movs	r3, #224	; 0xe0
   48232:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   48236:	77ec      	strb	r4, [r5, #31]
   48238:	762c      	strb	r4, [r5, #24]
   4823a:	766c      	strb	r4, [r5, #25]
   4823c:	76ac      	strb	r4, [r5, #26]
   4823e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   48242:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   48244:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   48248:	626b      	str	r3, [r5, #36]	; 0x24
   4824a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   4824e:	f7e4 fe1b 	bl	2ce88 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   48252:	f7e4 fbfd 	bl	2ca50 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   48256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4825a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   4825c:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   4825e:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   48260:	f7e4 fec2 	bl	2cfe8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   48264:	f7e4 fe58 	bl	2cf18 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   48268:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   4826c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   4826e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   48272:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   48276:	f001 fb57 	bl	49928 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   4827a:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   4827c:	f008 fd4a 	bl	50d14 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   48280:	4620      	mov	r0, r4
   48282:	f7ff ff19 	bl	480b8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   48286:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   48288:	4d17      	ldr	r5, [pc, #92]	; (482e8 <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   4828a:	f7ff ff15 	bl	480b8 <z_sys_init_run_level>
	z_sched_init();
   4828e:	f000 ff61 	bl	49154 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   48292:	4b16      	ldr	r3, [pc, #88]	; (482ec <z_cstart+0xd8>)
   48294:	9305      	str	r3, [sp, #20]
   48296:	2301      	movs	r3, #1
   48298:	f44f 6280 	mov.w	r2, #1024	; 0x400
   4829c:	4914      	ldr	r1, [pc, #80]	; (482f0 <z_cstart+0xdc>)
   4829e:	9400      	str	r4, [sp, #0]
   482a0:	e9cd 4303 	strd	r4, r3, [sp, #12]
   482a4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   482a8:	4643      	mov	r3, r8
   482aa:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   482ac:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   482ae:	f000 f889 	bl	483c4 <z_setup_new_thread>
   482b2:	7b6b      	ldrb	r3, [r5, #13]
   482b4:	f023 0304 	bic.w	r3, r3, #4
   482b8:	736b      	strb	r3, [r5, #13]
   482ba:	4681      	mov	r9, r0
	z_ready_thread(&z_main_thread);
   482bc:	4628      	mov	r0, r5
   482be:	f009 f823 	bl	51308 <z_ready_thread>
		init_idle_thread(i);
   482c2:	4620      	mov	r0, r4
   482c4:	f7ff ff58 	bl	48178 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   482c8:	4b0a      	ldr	r3, [pc, #40]	; (482f4 <z_cstart+0xe0>)
   482ca:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   482cc:	4642      	mov	r2, r8
   482ce:	4649      	mov	r1, r9
   482d0:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   482d2:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   482d4:	6077      	str	r7, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   482d6:	f7e4 fcc3 	bl	2cc60 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   482da:	bf00      	nop
   482dc:	20009d70 	.word	0x20009d70
   482e0:	e000ed00 	.word	0xe000ed00
   482e4:	20006b30 	.word	0x20006b30
   482e8:	20003a88 	.word	0x20003a88
   482ec:	00054581 	.word	0x00054581
   482f0:	20009030 	.word	0x20009030
   482f4:	20003a08 	.word	0x20003a08
   482f8:	000481cd 	.word	0x000481cd

000482fc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   482fc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   482fe:	4c06      	ldr	r4, [pc, #24]	; (48318 <statics_init+0x1c>)
   48300:	4d06      	ldr	r5, [pc, #24]	; (4831c <statics_init+0x20>)
   48302:	42ac      	cmp	r4, r5
   48304:	d301      	bcc.n	4830a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   48306:	2000      	movs	r0, #0
   48308:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   4830a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   4830e:	4620      	mov	r0, r4
   48310:	f008 fd32 	bl	50d78 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   48314:	3414      	adds	r4, #20
   48316:	e7f4      	b.n	48302 <statics_init+0x6>
   48318:	20000ed0 	.word	0x20000ed0
   4831c:	20000ee4 	.word	0x20000ee4

00048320 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   48320:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   48322:	4b0e      	ldr	r3, [pc, #56]	; (4835c <init_mem_slab_module+0x3c>)
   48324:	4c0e      	ldr	r4, [pc, #56]	; (48360 <init_mem_slab_module+0x40>)
   48326:	42a3      	cmp	r3, r4
   48328:	d301      	bcc.n	4832e <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   4832a:	2000      	movs	r0, #0
	return rc;
}
   4832c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   4832e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   48332:	ea41 0200 	orr.w	r2, r1, r0
   48336:	f012 0203 	ands.w	r2, r2, #3
   4833a:	d10b      	bne.n	48354 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   4833c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   4833e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   48340:	42aa      	cmp	r2, r5
   48342:	d101      	bne.n	48348 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   48344:	331c      	adds	r3, #28
   48346:	e7ee      	b.n	48326 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   48348:	695e      	ldr	r6, [r3, #20]
   4834a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   4834c:	3201      	adds	r2, #1
		slab->free_list = p;
   4834e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   48350:	4401      	add	r1, r0
   48352:	e7f5      	b.n	48340 <init_mem_slab_module+0x20>
		return -EINVAL;
   48354:	f06f 0015 	mvn.w	r0, #21
	return rc;
   48358:	e7e8      	b.n	4832c <init_mem_slab_module+0xc>
   4835a:	bf00      	nop
   4835c:	20000e60 	.word	0x20000e60
   48360:	20000ed0 	.word	0x20000ed0

00048364 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   48364:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   48366:	460c      	mov	r4, r1
   48368:	4616      	mov	r6, r2
   4836a:	461f      	mov	r7, r3
	__asm__ volatile(
   4836c:	f04f 0320 	mov.w	r3, #32
   48370:	f3ef 8111 	mrs	r1, BASEPRI
   48374:	f383 8812 	msr	BASEPRI_MAX, r3
   48378:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   4837c:	6943      	ldr	r3, [r0, #20]
   4837e:	b15b      	cbz	r3, 48398 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   48380:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   48382:	681b      	ldr	r3, [r3, #0]
   48384:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   48386:	6983      	ldr	r3, [r0, #24]
   48388:	3301      	adds	r3, #1
   4838a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   4838c:	2000      	movs	r0, #0
	__asm__ volatile(
   4838e:	f381 8811 	msr	BASEPRI, r1
   48392:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   48396:	e011      	b.n	483bc <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   48398:	ea56 0207 	orrs.w	r2, r6, r7
   4839c:	d103      	bne.n	483a6 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   4839e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   483a0:	f06f 000b 	mvn.w	r0, #11
   483a4:	e7f3      	b.n	4838e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   483a6:	4602      	mov	r2, r0
   483a8:	e9cd 6700 	strd	r6, r7, [sp]
   483ac:	3008      	adds	r0, #8
   483ae:	f000 fe29 	bl	49004 <z_pend_curr>
		if (result == 0) {
   483b2:	b918      	cbnz	r0, 483bc <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   483b4:	4b02      	ldr	r3, [pc, #8]	; (483c0 <k_mem_slab_alloc+0x5c>)
   483b6:	689b      	ldr	r3, [r3, #8]
   483b8:	695b      	ldr	r3, [r3, #20]
   483ba:	6023      	str	r3, [r4, #0]
}
   483bc:	b002      	add	sp, #8
   483be:	bdd0      	pop	{r4, r6, r7, pc}
   483c0:	20006b30 	.word	0x20006b30

000483c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   483c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   483c6:	b085      	sub	sp, #20
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   483c8:	3207      	adds	r2, #7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   483ca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   483cc:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   483ce:	2604      	movs	r6, #4
   483d0:	7346      	strb	r6, [r0, #13]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   483d2:	f100 0558 	add.w	r5, r0, #88	; 0x58

	thread_base->prio = priority;
   483d6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   483d8:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   483da:	f022 0207 	bic.w	r2, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   483de:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	new_thread->stack_info.size = stack_buf_size;
   483e2:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   483e6:	2500      	movs	r5, #0
	stack_ptr = (char *)stack + stack_obj_size;
   483e8:	188e      	adds	r6, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   483ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   483ec:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   483ee:	73c5      	strb	r5, [r0, #15]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   483f0:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.delta = delta;
   483f4:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   483f6:	9202      	str	r2, [sp, #8]
   483f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   483fa:	9201      	str	r2, [sp, #4]
   483fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   483fe:	9200      	str	r2, [sp, #0]
   48400:	4632      	mov	r2, r6
{
   48402:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   48404:	f7e4 fc10 	bl	2cc28 <arch_new_thread>
	if (!_current) {
   48408:	4b04      	ldr	r3, [pc, #16]	; (4841c <z_setup_new_thread+0x58>)
	new_thread->init_data = NULL;
   4840a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   4840c:	689b      	ldr	r3, [r3, #8]
   4840e:	b103      	cbz	r3, 48412 <z_setup_new_thread+0x4e>
	new_thread->resource_pool = _current->resource_pool;
   48410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   48412:	6763      	str	r3, [r4, #116]	; 0x74
}
   48414:	4630      	mov	r0, r6
   48416:	b005      	add	sp, #20
   48418:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4841a:	bf00      	nop
   4841c:	20006b30 	.word	0x20006b30

00048420 <z_impl_k_thread_create>:
{
   48420:	b5f0      	push	{r4, r5, r6, r7, lr}
   48422:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   48424:	2500      	movs	r5, #0
   48426:	9505      	str	r5, [sp, #20]
   48428:	9d10      	ldr	r5, [sp, #64]	; 0x40
   4842a:	9504      	str	r5, [sp, #16]
   4842c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   4842e:	9503      	str	r5, [sp, #12]
   48430:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   48432:	9502      	str	r5, [sp, #8]
{
   48434:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   48438:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   4843a:	9501      	str	r5, [sp, #4]
   4843c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   4843e:	9500      	str	r5, [sp, #0]
{
   48440:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   48442:	f7ff ffbf 	bl	483c4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   48446:	1c7b      	adds	r3, r7, #1
   48448:	bf08      	it	eq
   4844a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   4844e:	d005      	beq.n	4845c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   48450:	ea56 0307 	orrs.w	r3, r6, r7
   48454:	d105      	bne.n	48462 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   48456:	4620      	mov	r0, r4
   48458:	f000 fd7a 	bl	48f50 <z_sched_start>
}
   4845c:	4620      	mov	r0, r4
   4845e:	b007      	add	sp, #28
   48460:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   48462:	4632      	mov	r2, r6
   48464:	463b      	mov	r3, r7
   48466:	4903      	ldr	r1, [pc, #12]	; (48474 <z_impl_k_thread_create+0x54>)
   48468:	f104 0018 	add.w	r0, r4, #24
   4846c:	f001 f804 	bl	49478 <z_add_timeout>
   48470:	e7f4      	b.n	4845c <z_impl_k_thread_create+0x3c>
   48472:	bf00      	nop
   48474:	00051329 	.word	0x00051329

00048478 <z_init_static_threads>:
{
   48478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   4847c:	4e2a      	ldr	r6, [pc, #168]	; (48528 <z_init_static_threads+0xb0>)
   4847e:	4d2b      	ldr	r5, [pc, #172]	; (4852c <z_init_static_threads+0xb4>)
{
   48480:	b086      	sub	sp, #24
   48482:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   48484:	42b5      	cmp	r5, r6
   48486:	f105 0430 	add.w	r4, r5, #48	; 0x30
   4848a:	d310      	bcc.n	484ae <z_init_static_threads+0x36>
	k_sched_lock();
   4848c:	f000 fc7e 	bl	48d8c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   48490:	4c26      	ldr	r4, [pc, #152]	; (4852c <z_init_static_threads+0xb4>)
   48492:	f8df a09c 	ldr.w	sl, [pc, #156]	; 48530 <z_init_static_threads+0xb8>
   48496:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   4849a:	f240 36e7 	movw	r6, #999	; 0x3e7
   4849e:	2700      	movs	r7, #0
   484a0:	4544      	cmp	r4, r8
   484a2:	d321      	bcc.n	484e8 <z_init_static_threads+0x70>
}
   484a4:	b006      	add	sp, #24
   484a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   484aa:	f000 be37 	b.w	4911c <k_sched_unlock>
		z_setup_new_thread(
   484ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   484b2:	9305      	str	r3, [sp, #20]
   484b4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   484b8:	9304      	str	r3, [sp, #16]
   484ba:	f854 3c14 	ldr.w	r3, [r4, #-20]
   484be:	9303      	str	r3, [sp, #12]
   484c0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   484c4:	9302      	str	r3, [sp, #8]
   484c6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   484ca:	9301      	str	r3, [sp, #4]
   484cc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   484d0:	9300      	str	r3, [sp, #0]
   484d2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   484d6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   484da:	f7ff ff73 	bl	483c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   484de:	f854 3c30 	ldr.w	r3, [r4, #-48]
   484e2:	655d      	str	r5, [r3, #84]	; 0x54
   484e4:	4625      	mov	r5, r4
   484e6:	e7cd      	b.n	48484 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   484e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   484ea:	1c5a      	adds	r2, r3, #1
   484ec:	d00d      	beq.n	4850a <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   484ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   484f2:	4630      	mov	r0, r6
   484f4:	4639      	mov	r1, r7
   484f6:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   484fa:	42b9      	cmp	r1, r7
   484fc:	bf08      	it	eq
   484fe:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   48500:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   48502:	d104      	bne.n	4850e <z_init_static_threads+0x96>
	z_sched_start(thread);
   48504:	4628      	mov	r0, r5
   48506:	f000 fd23 	bl	48f50 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   4850a:	3430      	adds	r4, #48	; 0x30
   4850c:	e7c8      	b.n	484a0 <z_init_static_threads+0x28>
   4850e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48512:	2300      	movs	r3, #0
   48514:	f7dd fdf4 	bl	26100 <__aeabi_uldivmod>
   48518:	4602      	mov	r2, r0
   4851a:	460b      	mov	r3, r1
   4851c:	f105 0018 	add.w	r0, r5, #24
   48520:	4651      	mov	r1, sl
   48522:	f000 ffa9 	bl	49478 <z_add_timeout>
   48526:	e7f0      	b.n	4850a <z_init_static_threads+0x92>
   48528:	20000df0 	.word	0x20000df0
   4852c:	20000df0 	.word	0x20000df0
   48530:	00051329 	.word	0x00051329

00048534 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   48534:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   48536:	4c0b      	ldr	r4, [pc, #44]	; (48564 <idle+0x30>)
	return !z_sys_post_kernel;
   48538:	4d0b      	ldr	r5, [pc, #44]	; (48568 <idle+0x34>)
	__asm__ volatile(
   4853a:	f04f 0220 	mov.w	r2, #32
   4853e:	f3ef 8311 	mrs	r3, BASEPRI
   48542:	f382 8812 	msr	BASEPRI_MAX, r2
   48546:	f3bf 8f6f 	isb	sy
   4854a:	f008 ffac 	bl	514a6 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   4854e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   48550:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   48552:	b913      	cbnz	r3, 4855a <idle+0x26>
	arch_cpu_idle();
   48554:	f7e4 fa82 	bl	2ca5c <arch_cpu_idle>
   48558:	e7ef      	b.n	4853a <idle+0x6>
   4855a:	f7e3 ff97 	bl	2c48c <pm_system_suspend>
   4855e:	2800      	cmp	r0, #0
   48560:	d1eb      	bne.n	4853a <idle+0x6>
   48562:	e7f7      	b.n	48554 <idle+0x20>
   48564:	20006b30 	.word	0x20006b30
   48568:	20006dac 	.word	0x20006dac

0004856c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   4856c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   48570:	4604      	mov	r4, r0
   48572:	4688      	mov	r8, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   48574:	f100 0708 	add.w	r7, r0, #8
   48578:	f04f 0120 	mov.w	r1, #32
   4857c:	f3ef 8611 	mrs	r6, BASEPRI
   48580:	f381 8812 	msr	BASEPRI_MAX, r1
   48584:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   48588:	68c5      	ldr	r5, [r0, #12]
   4858a:	6a01      	ldr	r1, [r0, #32]
   4858c:	42a9      	cmp	r1, r5
   4858e:	d22f      	bcs.n	485f0 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   48590:	f008 ff2e 	bl	513f0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   48594:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   48596:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   48598:	4641      	mov	r1, r8
		if (pending_thread != NULL) {
   4859a:	b178      	cbz	r0, 485bc <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   4859c:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   4859e:	6940      	ldr	r0, [r0, #20]
   485a0:	f003 fea4 	bl	4c2ec <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   485a4:	4628      	mov	r0, r5
   485a6:	67ec      	str	r4, [r5, #124]	; 0x7c
   485a8:	f008 feae 	bl	51308 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   485ac:	4638      	mov	r0, r7
   485ae:	4631      	mov	r1, r6
   485b0:	f000 fbda 	bl	48d68 <z_reschedule>
			return 0;
   485b4:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   485b6:	b002      	add	sp, #8
   485b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   485bc:	69e0      	ldr	r0, [r4, #28]
   485be:	f003 fe95 	bl	4c2ec <memcpy>
			msgq->write_ptr += msgq->msg_size;
   485c2:	69e3      	ldr	r3, [r4, #28]
   485c4:	68a2      	ldr	r2, [r4, #8]
   485c6:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   485c8:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   485ca:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   485cc:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   485ce:	bf04      	itt	eq
   485d0:	6923      	ldreq	r3, [r4, #16]
   485d2:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   485d4:	6a23      	ldr	r3, [r4, #32]
   485d6:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   485d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   485dc:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   485de:	2110      	movs	r1, #16
   485e0:	f009 f903 	bl	517ea <z_handle_obj_poll_events>
		result = 0;
   485e4:	2000      	movs	r0, #0
	__asm__ volatile(
   485e6:	f386 8811 	msr	BASEPRI, r6
   485ea:	f3bf 8f6f 	isb	sy
	return result;
   485ee:	e7e2      	b.n	485b6 <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   485f0:	ea52 0103 	orrs.w	r1, r2, r3
   485f4:	d00b      	beq.n	4860e <z_impl_k_msgq_put+0xa2>
		_current->base.swap_data = (void *) data;
   485f6:	4907      	ldr	r1, [pc, #28]	; (48614 <z_impl_k_msgq_put+0xa8>)
   485f8:	6889      	ldr	r1, [r1, #8]
   485fa:	f8c1 8014 	str.w	r8, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   485fe:	e9cd 2300 	strd	r2, r3, [sp]
   48602:	4631      	mov	r1, r6
   48604:	4602      	mov	r2, r0
   48606:	4638      	mov	r0, r7
   48608:	f000 fcfc 	bl	49004 <z_pend_curr>
		return result;
   4860c:	e7d3      	b.n	485b6 <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   4860e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   48612:	e7e8      	b.n	485e6 <z_impl_k_msgq_put+0x7a>
   48614:	20006b30 	.word	0x20006b30

00048618 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   48618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4861a:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   4861c:	f104 0708 	add.w	r7, r4, #8
{
   48620:	4608      	mov	r0, r1
	__asm__ volatile(
   48622:	f04f 0120 	mov.w	r1, #32
   48626:	f3ef 8611 	mrs	r6, BASEPRI
   4862a:	f381 8812 	msr	BASEPRI_MAX, r1
   4862e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   48632:	6a21      	ldr	r1, [r4, #32]
   48634:	2900      	cmp	r1, #0
   48636:	d031      	beq.n	4869c <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   48638:	68a2      	ldr	r2, [r4, #8]
   4863a:	69a1      	ldr	r1, [r4, #24]
   4863c:	f003 fe56 	bl	4c2ec <memcpy>
		msgq->read_ptr += msgq->msg_size;
   48640:	69a3      	ldr	r3, [r4, #24]
   48642:	68a2      	ldr	r2, [r4, #8]
   48644:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   48646:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   48648:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   4864a:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   4864c:	bf04      	itt	eq
   4864e:	6923      	ldreq	r3, [r4, #16]
   48650:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   48652:	6a23      	ldr	r3, [r4, #32]
   48654:	3b01      	subs	r3, #1
   48656:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   48658:	4620      	mov	r0, r4
   4865a:	f008 fec9 	bl	513f0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   4865e:	4605      	mov	r5, r0
   48660:	b360      	cbz	r0, 486bc <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   48662:	6941      	ldr	r1, [r0, #20]
   48664:	68a2      	ldr	r2, [r4, #8]
   48666:	69e0      	ldr	r0, [r4, #28]
   48668:	f003 fe40 	bl	4c2ec <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   4866c:	69e3      	ldr	r3, [r4, #28]
   4866e:	68a2      	ldr	r2, [r4, #8]
   48670:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   48672:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   48674:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   48676:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   48678:	bf04      	itt	eq
   4867a:	6923      	ldreq	r3, [r4, #16]
   4867c:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   4867e:	6a23      	ldr	r3, [r4, #32]
   48680:	3301      	adds	r3, #1
   48682:	6223      	str	r3, [r4, #32]
   48684:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   48686:	4628      	mov	r0, r5
   48688:	67ec      	str	r4, [r5, #124]	; 0x7c
   4868a:	f008 fe3d 	bl	51308 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   4868e:	4638      	mov	r0, r7
   48690:	4631      	mov	r1, r6
   48692:	f000 fb69 	bl	48d68 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   48696:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   48698:	b003      	add	sp, #12
   4869a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   4869c:	ea52 0103 	orrs.w	r1, r2, r3
   486a0:	d00a      	beq.n	486b8 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   486a2:	4909      	ldr	r1, [pc, #36]	; (486c8 <z_impl_k_msgq_get+0xb0>)
   486a4:	6889      	ldr	r1, [r1, #8]
   486a6:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   486a8:	e9cd 2300 	strd	r2, r3, [sp]
   486ac:	4631      	mov	r1, r6
   486ae:	4622      	mov	r2, r4
   486b0:	4638      	mov	r0, r7
   486b2:	f000 fca7 	bl	49004 <z_pend_curr>
		return result;
   486b6:	e7ef      	b.n	48698 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   486b8:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   486bc:	f386 8811 	msr	BASEPRI, r6
   486c0:	f3bf 8f6f 	isb	sy
	return result;
   486c4:	e7e8      	b.n	48698 <z_impl_k_msgq_get+0x80>
   486c6:	bf00      	nop
   486c8:	20006b30 	.word	0x20006b30

000486cc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   486cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   486d0:	4604      	mov	r4, r0
   486d2:	4616      	mov	r6, r2
   486d4:	461f      	mov	r7, r3
	__asm__ volatile(
   486d6:	f04f 0320 	mov.w	r3, #32
   486da:	f3ef 8811 	mrs	r8, BASEPRI
   486de:	f383 8812 	msr	BASEPRI_MAX, r3
   486e2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   486e6:	68c3      	ldr	r3, [r0, #12]
   486e8:	4a35      	ldr	r2, [pc, #212]	; (487c0 <z_impl_k_mutex_lock+0xf4>)
   486ea:	b16b      	cbz	r3, 48708 <z_impl_k_mutex_lock+0x3c>
   486ec:	6880      	ldr	r0, [r0, #8]
   486ee:	6891      	ldr	r1, [r2, #8]
   486f0:	4288      	cmp	r0, r1
   486f2:	d019      	beq.n	48728 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   486f4:	ea56 0307 	orrs.w	r3, r6, r7
   486f8:	d118      	bne.n	4872c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   486fa:	f388 8811 	msr	BASEPRI, r8
   486fe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   48702:	f06f 000f 	mvn.w	r0, #15
   48706:	e00c      	b.n	48722 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   48708:	6891      	ldr	r1, [r2, #8]
   4870a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   4870e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   48710:	3301      	adds	r3, #1
   48712:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   48714:	6893      	ldr	r3, [r2, #8]
   48716:	60a3      	str	r3, [r4, #8]
   48718:	f388 8811 	msr	BASEPRI, r8
   4871c:	f3bf 8f6f 	isb	sy
		return 0;
   48720:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   48722:	b002      	add	sp, #8
   48724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   48728:	6921      	ldr	r1, [r4, #16]
   4872a:	e7f0      	b.n	4870e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   4872c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   48730:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio1 >= prio2;
}

static inline bool z_is_prio1_higher_than_prio2(int prio1, int prio2)
{
	return prio1 < prio2;
   48734:	4299      	cmp	r1, r3
   48736:	bfa8      	it	ge
   48738:	4619      	movge	r1, r3
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   4873a:	f111 0f80 	cmn.w	r1, #128	; 0x80
   4873e:	bf08      	it	eq
   48740:	f06f 017e 	mvneq.w	r1, #126	; 0x7e
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   48744:	428b      	cmp	r3, r1
   48746:	dd2f      	ble.n	487a8 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   48748:	f000 fc70 	bl	4902c <z_set_prio>
   4874c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   4874e:	e9cd 6700 	strd	r6, r7, [sp]
   48752:	4622      	mov	r2, r4
   48754:	4641      	mov	r1, r8
   48756:	481b      	ldr	r0, [pc, #108]	; (487c4 <z_impl_k_mutex_lock+0xf8>)
   48758:	f000 fc54 	bl	49004 <z_pend_curr>
	if (got_mutex == 0) {
   4875c:	2800      	cmp	r0, #0
   4875e:	d0e0      	beq.n	48722 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   48760:	f04f 0320 	mov.w	r3, #32
   48764:	f3ef 8611 	mrs	r6, BASEPRI
   48768:	f383 8812 	msr	BASEPRI_MAX, r3
   4876c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   48770:	6823      	ldr	r3, [r4, #0]
   48772:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48774:	429c      	cmp	r4, r3
   48776:	d00a      	beq.n	4878e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   48778:	b14b      	cbz	r3, 4878e <z_impl_k_mutex_lock+0xc2>
   4877a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   4877e:	4299      	cmp	r1, r3
   48780:	bfa8      	it	ge
   48782:	4619      	movge	r1, r3
   48784:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   48788:	4299      	cmp	r1, r3
   4878a:	bfb8      	it	lt
   4878c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   4878e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   48790:	f990 300e 	ldrsb.w	r3, [r0, #14]
   48794:	4299      	cmp	r1, r3
   48796:	d109      	bne.n	487ac <z_impl_k_mutex_lock+0xe0>
	if (resched) {
   48798:	b16d      	cbz	r5, 487b6 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
   4879a:	4631      	mov	r1, r6
   4879c:	4809      	ldr	r0, [pc, #36]	; (487c4 <z_impl_k_mutex_lock+0xf8>)
   4879e:	f000 fae3 	bl	48d68 <z_reschedule>
	return -EAGAIN;
   487a2:	f06f 000a 	mvn.w	r0, #10
   487a6:	e7bc      	b.n	48722 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   487a8:	2500      	movs	r5, #0
   487aa:	e7d0      	b.n	4874e <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
   487ac:	f000 fc3e 	bl	4902c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   487b0:	2800      	cmp	r0, #0
   487b2:	d1f2      	bne.n	4879a <z_impl_k_mutex_lock+0xce>
   487b4:	e7f0      	b.n	48798 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   487b6:	f386 8811 	msr	BASEPRI, r6
   487ba:	f3bf 8f6f 	isb	sy
   487be:	e7f0      	b.n	487a2 <z_impl_k_mutex_lock+0xd6>
   487c0:	20006b30 	.word	0x20006b30
   487c4:	20006dad 	.word	0x20006dad

000487c8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   487c8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   487ca:	6883      	ldr	r3, [r0, #8]
{
   487cc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   487ce:	2b00      	cmp	r3, #0
   487d0:	d036      	beq.n	48840 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   487d2:	4a1e      	ldr	r2, [pc, #120]	; (4884c <z_impl_k_mutex_unlock+0x84>)
   487d4:	6892      	ldr	r2, [r2, #8]
   487d6:	4293      	cmp	r3, r2
   487d8:	d135      	bne.n	48846 <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   487da:	7bda      	ldrb	r2, [r3, #15]
   487dc:	3a01      	subs	r2, #1
   487de:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   487e0:	68c3      	ldr	r3, [r0, #12]
   487e2:	2b01      	cmp	r3, #1
   487e4:	d905      	bls.n	487f2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   487e6:	3b01      	subs	r3, #1
   487e8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   487ea:	f000 fc97 	bl	4911c <k_sched_unlock>

	return 0;
   487ee:	2000      	movs	r0, #0
}
   487f0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   487f2:	f04f 0320 	mov.w	r3, #32
   487f6:	f3ef 8511 	mrs	r5, BASEPRI
   487fa:	f383 8812 	msr	BASEPRI_MAX, r3
   487fe:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   48802:	6901      	ldr	r1, [r0, #16]
   48804:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   48806:	f990 300e 	ldrsb.w	r3, [r0, #14]
   4880a:	4299      	cmp	r1, r3
   4880c:	d001      	beq.n	48812 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   4880e:	f000 fc0d 	bl	4902c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   48812:	4620      	mov	r0, r4
   48814:	f008 fdec 	bl	513f0 <z_unpend_first_thread>
	mutex->owner = new_owner;
   48818:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   4881a:	b158      	cbz	r0, 48834 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   4881c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   48820:	6122      	str	r2, [r4, #16]
   48822:	2200      	movs	r2, #0
   48824:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   48826:	f008 fd6f 	bl	51308 <z_ready_thread>
		z_reschedule(&lock, key);
   4882a:	4629      	mov	r1, r5
   4882c:	4808      	ldr	r0, [pc, #32]	; (48850 <z_impl_k_mutex_unlock+0x88>)
   4882e:	f000 fa9b 	bl	48d68 <z_reschedule>
   48832:	e7da      	b.n	487ea <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   48834:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   48836:	f385 8811 	msr	BASEPRI, r5
   4883a:	f3bf 8f6f 	isb	sy
   4883e:	e7d4      	b.n	487ea <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   48840:	f06f 0015 	mvn.w	r0, #21
   48844:	e7d4      	b.n	487f0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   48846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4884a:	e7d1      	b.n	487f0 <z_impl_k_mutex_unlock+0x28>
   4884c:	20006b30 	.word	0x20006b30
   48850:	20006dad 	.word	0x20006dad

00048854 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   48854:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__asm__ volatile(
   48856:	f04f 0120 	mov.w	r1, #32
   4885a:	f3ef 8511 	mrs	r5, BASEPRI
   4885e:	f381 8812 	msr	BASEPRI_MAX, r1
   48862:	f3bf 8f6f 	isb	sy
   48866:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   48868:	b19c      	cbz	r4, 48892 <z_impl_k_queue_get+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   4886a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   4886c:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   4886e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   48872:	4294      	cmp	r4, r2
	list->head = node;
   48874:	6003      	str	r3, [r0, #0]
	list->tail = node;
   48876:	bf08      	it	eq
   48878:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   4887a:	2101      	movs	r1, #1
   4887c:	4620      	mov	r0, r4
   4887e:	f008 fb8d 	bl	50f9c <z_queue_node_peek>
   48882:	4604      	mov	r4, r0
	__asm__ volatile(
   48884:	f385 8811 	msr	BASEPRI, r5
   48888:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   4888c:	4620      	mov	r0, r4
   4888e:	b003      	add	sp, #12
   48890:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   48892:	ea52 0103 	orrs.w	r1, r2, r3
   48896:	d0f5      	beq.n	48884 <z_impl_k_queue_get+0x30>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   48898:	3008      	adds	r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   4889a:	e9cd 2300 	strd	r2, r3, [sp]
   4889e:	4629      	mov	r1, r5
   488a0:	4602      	mov	r2, r0
   488a2:	f000 fbaf 	bl	49004 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   488a6:	2800      	cmp	r0, #0
   488a8:	d1f0      	bne.n	4888c <z_impl_k_queue_get+0x38>
   488aa:	4b02      	ldr	r3, [pc, #8]	; (488b4 <z_impl_k_queue_get+0x60>)
   488ac:	689b      	ldr	r3, [r3, #8]
   488ae:	695c      	ldr	r4, [r3, #20]
   488b0:	e7ec      	b.n	4888c <z_impl_k_queue_get+0x38>
   488b2:	bf00      	nop
   488b4:	20006b30 	.word	0x20006b30

000488b8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   488b8:	b538      	push	{r3, r4, r5, lr}
   488ba:	4604      	mov	r4, r0
	__asm__ volatile(
   488bc:	f04f 0320 	mov.w	r3, #32
   488c0:	f3ef 8511 	mrs	r5, BASEPRI
   488c4:	f383 8812 	msr	BASEPRI_MAX, r3
   488c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   488cc:	f008 fd90 	bl	513f0 <z_unpend_first_thread>

	if (thread != NULL) {
   488d0:	b148      	cbz	r0, 488e6 <z_impl_k_sem_give+0x2e>
   488d2:	2200      	movs	r2, #0
   488d4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   488d6:	f008 fd17 	bl	51308 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   488da:	4629      	mov	r1, r5
   488dc:	4808      	ldr	r0, [pc, #32]	; (48900 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   488de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   488e2:	f000 ba41 	b.w	48d68 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   488e6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   488ea:	429a      	cmp	r2, r3
   488ec:	bf18      	it	ne
   488ee:	3301      	addne	r3, #1
   488f0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   488f2:	2102      	movs	r1, #2
   488f4:	f104 0010 	add.w	r0, r4, #16
   488f8:	f008 ff77 	bl	517ea <z_handle_obj_poll_events>
   488fc:	e7ed      	b.n	488da <z_impl_k_sem_give+0x22>
   488fe:	bf00      	nop
   48900:	20006dad 	.word	0x20006dad

00048904 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   48904:	b537      	push	{r0, r1, r2, r4, r5, lr}
   48906:	4614      	mov	r4, r2
   48908:	461d      	mov	r5, r3
   4890a:	f04f 0320 	mov.w	r3, #32
   4890e:	f3ef 8111 	mrs	r1, BASEPRI
   48912:	f383 8812 	msr	BASEPRI_MAX, r3
   48916:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   4891a:	6883      	ldr	r3, [r0, #8]
   4891c:	b143      	cbz	r3, 48930 <z_impl_k_sem_take+0x2c>
		sem->count--;
   4891e:	3b01      	subs	r3, #1
   48920:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   48922:	f381 8811 	msr	BASEPRI, r1
   48926:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   4892a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   4892c:	b003      	add	sp, #12
   4892e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   48930:	ea54 0305 	orrs.w	r3, r4, r5
   48934:	d106      	bne.n	48944 <z_impl_k_sem_take+0x40>
   48936:	f381 8811 	msr	BASEPRI, r1
   4893a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   4893e:	f06f 000f 	mvn.w	r0, #15
		goto out;
   48942:	e7f3      	b.n	4892c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   48944:	4602      	mov	r2, r0
   48946:	e9cd 4500 	strd	r4, r5, [sp]
   4894a:	4802      	ldr	r0, [pc, #8]	; (48954 <z_impl_k_sem_take+0x50>)
   4894c:	f000 fb5a 	bl	49004 <z_pend_curr>
	return ret;
   48950:	e7ec      	b.n	4892c <z_impl_k_sem_take+0x28>
   48952:	bf00      	nop
   48954:	20006dad 	.word	0x20006dad

00048958 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   48958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   4895a:	4b09      	ldr	r3, [pc, #36]	; (48980 <k_sys_work_q_init+0x28>)
   4895c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   4895e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   48960:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   48962:	9300      	str	r3, [sp, #0]
   48964:	f44f 6200 	mov.w	r2, #2048	; 0x800
   48968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4896c:	4905      	ldr	r1, [pc, #20]	; (48984 <k_sys_work_q_init+0x2c>)
   4896e:	4806      	ldr	r0, [pc, #24]	; (48988 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   48970:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   48974:	f000 f912 	bl	48b9c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   48978:	4620      	mov	r0, r4
   4897a:	b004      	add	sp, #16
   4897c:	bd10      	pop	{r4, pc}
   4897e:	bf00      	nop
   48980:	00054586 	.word	0x00054586
   48984:	20009d70 	.word	0x20009d70
   48988:	20003b08 	.word	0x20003b08

0004898c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   4898c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   48990:	4e47      	ldr	r6, [pc, #284]	; (48ab0 <work_queue_main+0x124>)
{
   48992:	b085      	sub	sp, #20
   48994:	4605      	mov	r5, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   48996:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   4899a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   4899e:	f04f 0320 	mov.w	r3, #32
   489a2:	f3ef 8711 	mrs	r7, BASEPRI
   489a6:	f383 8812 	msr	BASEPRI_MAX, r3
   489aa:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   489ae:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   489b2:	b98c      	cbnz	r4, 489d8 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   489b4:	2102      	movs	r1, #2
   489b6:	f105 0098 	add.w	r0, r5, #152	; 0x98
   489ba:	f008 fb68 	bl	5108e <flag_test_and_clear>
   489be:	2800      	cmp	r0, #0
   489c0:	d135      	bne.n	48a2e <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   489c2:	2300      	movs	r3, #0
   489c4:	9302      	str	r3, [sp, #8]
   489c6:	e9cd 8900 	strd	r8, r9, [sp]
   489ca:	f105 0288 	add.w	r2, r5, #136	; 0x88
   489ce:	4639      	mov	r1, r7
   489d0:	4838      	ldr	r0, [pc, #224]	; (48ab4 <work_queue_main+0x128>)
   489d2:	f000 fcd9 	bl	49388 <z_sched_wait>
			continue;
   489d6:	e7e2      	b.n	4899e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   489d8:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   489dc:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   489de:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   489e2:	4294      	cmp	r4, r2
   489e4:	d101      	bne.n	489ea <work_queue_main+0x5e>
	list->tail = node;
   489e6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	*flagp |= BIT(bit);
   489ea:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   489ee:	f043 0302 	orr.w	r3, r3, #2
   489f2:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
   489f6:	68e3      	ldr	r3, [r4, #12]
   489f8:	f023 0304 	bic.w	r3, r3, #4
   489fc:	f043 0301 	orr.w	r3, r3, #1
   48a00:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   48a02:	6863      	ldr	r3, [r4, #4]
	__asm__ volatile(
   48a04:	f387 8811 	msr	BASEPRI, r7
   48a08:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   48a0c:	4620      	mov	r0, r4
   48a0e:	4798      	blx	r3
	__asm__ volatile(
   48a10:	f04f 0320 	mov.w	r3, #32
   48a14:	f3ef 8b11 	mrs	fp, BASEPRI
   48a18:	f383 8812 	msr	BASEPRI_MAX, r3
   48a1c:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   48a20:	68e3      	ldr	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48a22:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   48a24:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48a28:	d40b      	bmi.n	48a42 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   48a2a:	60e2      	str	r2, [r4, #12]
   48a2c:	e00e      	b.n	48a4c <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   48a2e:	f105 0490 	add.w	r4, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   48a32:	2200      	movs	r2, #0
   48a34:	2101      	movs	r1, #1
   48a36:	4620      	mov	r0, r4
   48a38:	f008 fd02 	bl	51440 <z_sched_wake>
   48a3c:	2800      	cmp	r0, #0
   48a3e:	d1f8      	bne.n	48a32 <work_queue_main+0xa6>
   48a40:	e7bf      	b.n	489c2 <work_queue_main+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   48a42:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   48a44:	f023 0303 	bic.w	r3, r3, #3
   48a48:	60e3      	str	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   48a4a:	b970      	cbnz	r0, 48a6a <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   48a4c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   48a50:	f023 0202 	bic.w	r2, r3, #2
   48a54:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
	__asm__ volatile(
   48a58:	f38b 8811 	msr	BASEPRI, fp
   48a5c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   48a60:	05d8      	lsls	r0, r3, #23
   48a62:	d49c      	bmi.n	4899e <work_queue_main+0x12>
	z_impl_k_yield();
   48a64:	f000 fb82 	bl	4916c <z_impl_k_yield>
   48a68:	e799      	b.n	4899e <work_queue_main+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   48a6a:	2700      	movs	r7, #0
   48a6c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   48a70:	463b      	mov	r3, r7
		if (wc->work == work) {
   48a72:	6842      	ldr	r2, [r0, #4]
   48a74:	4294      	cmp	r4, r2
   48a76:	4601      	mov	r1, r0
   48a78:	d10c      	bne.n	48a94 <work_queue_main+0x108>
Z_GENLIST_REMOVE(slist, snode)
   48a7a:	6801      	ldr	r1, [r0, #0]
   48a7c:	b997      	cbnz	r7, 48aa4 <work_queue_main+0x118>
   48a7e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   48a80:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   48a82:	4290      	cmp	r0, r2
   48a84:	d100      	bne.n	48a88 <work_queue_main+0xfc>
	list->tail = node;
   48a86:	6071      	str	r1, [r6, #4]
	parent->next = child;
   48a88:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   48a8c:	f7ff ff14 	bl	488b8 <z_impl_k_sem_give>
   48a90:	4639      	mov	r1, r7
   48a92:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   48a94:	f1ba 0f00 	cmp.w	sl, #0
   48a98:	d0d8      	beq.n	48a4c <work_queue_main+0xc0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   48a9a:	4650      	mov	r0, sl
   48a9c:	460f      	mov	r7, r1
   48a9e:	f8da a000 	ldr.w	sl, [sl]
   48aa2:	e7e6      	b.n	48a72 <work_queue_main+0xe6>
	parent->next = child;
   48aa4:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   48aa6:	6872      	ldr	r2, [r6, #4]
   48aa8:	4290      	cmp	r0, r2
	list->tail = node;
   48aaa:	bf08      	it	eq
   48aac:	6077      	streq	r7, [r6, #4]
   48aae:	e7eb      	b.n	48a88 <work_queue_main+0xfc>
   48ab0:	20006b58 	.word	0x20006b58
   48ab4:	20006dad 	.word	0x20006dad

00048ab8 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   48ab8:	68c3      	ldr	r3, [r0, #12]
   48aba:	f3c3 0340 	ubfx	r3, r3, #1, #1
{
   48abe:	b570      	push	{r4, r5, r6, lr}
   48ac0:	4605      	mov	r5, r0
   48ac2:	460c      	mov	r4, r1
	return (*flagp & BIT(bit)) != 0U;
   48ac4:	b2de      	uxtb	r6, r3
	if (ret) {
   48ac6:	b16b      	cbz	r3, 48ae4 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   48ac8:	2201      	movs	r2, #1
   48aca:	2100      	movs	r1, #0
   48acc:	f104 0008 	add.w	r0, r4, #8
   48ad0:	f008 facd 	bl	5106e <z_impl_k_sem_init>
	parent->next = child;
   48ad4:	2300      	movs	r3, #0
   48ad6:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   48ad8:	4b05      	ldr	r3, [pc, #20]	; (48af0 <cancel_sync_locked+0x38>)
	canceler->work = work;
   48ada:	6065      	str	r5, [r4, #4]
   48adc:	685a      	ldr	r2, [r3, #4]
   48ade:	b91a      	cbnz	r2, 48ae8 <cancel_sync_locked+0x30>
	list->head = node;
   48ae0:	e9c3 4400 	strd	r4, r4, [r3]
}
   48ae4:	4630      	mov	r0, r6
   48ae6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   48ae8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   48aea:	605c      	str	r4, [r3, #4]
   48aec:	e7fa      	b.n	48ae4 <cancel_sync_locked+0x2c>
   48aee:	bf00      	nop
   48af0:	20006b58 	.word	0x20006b58

00048af4 <submit_to_queue_locked>:
{
   48af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48af6:	68c3      	ldr	r3, [r0, #12]
	return (*flagp & BIT(bit)) != 0U;
   48af8:	f3c3 0540 	ubfx	r5, r3, #1, #1
{
   48afc:	4604      	mov	r4, r0
   48afe:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   48b00:	b9fd      	cbnz	r5, 48b42 <submit_to_queue_locked+0x4e>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   48b02:	075e      	lsls	r6, r3, #29
   48b04:	d41f      	bmi.n	48b46 <submit_to_queue_locked+0x52>
		if (*queuep == NULL) {
   48b06:	680a      	ldr	r2, [r1, #0]
   48b08:	b90a      	cbnz	r2, 48b0e <submit_to_queue_locked+0x1a>
			*queuep = work->queue;
   48b0a:	6882      	ldr	r2, [r0, #8]
   48b0c:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   48b0e:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   48b10:	bf44      	itt	mi
   48b12:	68a3      	ldrmi	r3, [r4, #8]
   48b14:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   48b16:	683e      	ldr	r6, [r7, #0]
			ret = 2;
   48b18:	bf4c      	ite	mi
   48b1a:	2502      	movmi	r5, #2
		ret = 1;
   48b1c:	2501      	movpl	r5, #1
	if (queue == NULL) {
   48b1e:	b37e      	cbz	r6, 48b80 <submit_to_queue_locked+0x8c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   48b20:	4b1a      	ldr	r3, [pc, #104]	; (48b8c <submit_to_queue_locked+0x98>)
   48b22:	689b      	ldr	r3, [r3, #8]
   48b24:	42b3      	cmp	r3, r6
   48b26:	d111      	bne.n	48b4c <submit_to_queue_locked+0x58>
   48b28:	f008 f9bb 	bl	50ea2 <k_is_in_isr>
   48b2c:	f080 0001 	eor.w	r0, r0, #1
   48b30:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   48b32:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   48b36:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   48b38:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   48b3c:	d523      	bpl.n	48b86 <submit_to_queue_locked+0x92>
	} else if (draining && !chained) {
   48b3e:	b13a      	cbz	r2, 48b50 <submit_to_queue_locked+0x5c>
   48b40:	b940      	cbnz	r0, 48b54 <submit_to_queue_locked+0x60>
		ret = -EBUSY;
   48b42:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   48b46:	2300      	movs	r3, #0
   48b48:	603b      	str	r3, [r7, #0]
	return ret;
   48b4a:	e013      	b.n	48b74 <submit_to_queue_locked+0x80>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   48b4c:	2000      	movs	r0, #0
   48b4e:	e7f0      	b.n	48b32 <submit_to_queue_locked+0x3e>
	} else if (plugged && !draining) {
   48b50:	071b      	lsls	r3, r3, #28
   48b52:	d4f6      	bmi.n	48b42 <submit_to_queue_locked+0x4e>
	parent->next = child;
   48b54:	2300      	movs	r3, #0
   48b56:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   48b58:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
   48b5c:	b963      	cbnz	r3, 48b78 <submit_to_queue_locked+0x84>
	list->head = node;
   48b5e:	e9c6 4420 	strd	r4, r4, [r6, #128]	; 0x80
		(void)notify_queue_locked(queue);
   48b62:	4630      	mov	r0, r6
   48b64:	f008 fade 	bl	51124 <notify_queue_locked>
	*flagp |= BIT(bit);
   48b68:	68e3      	ldr	r3, [r4, #12]
   48b6a:	f043 0304 	orr.w	r3, r3, #4
   48b6e:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   48b70:	683b      	ldr	r3, [r7, #0]
   48b72:	60a3      	str	r3, [r4, #8]
}
   48b74:	4628      	mov	r0, r5
   48b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   48b78:	601c      	str	r4, [r3, #0]
	list->tail = node;
   48b7a:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
   48b7e:	e7f0      	b.n	48b62 <submit_to_queue_locked+0x6e>
		return -EINVAL;
   48b80:	f06f 0515 	mvn.w	r5, #21
   48b84:	e7df      	b.n	48b46 <submit_to_queue_locked+0x52>
		ret = -ENODEV;
   48b86:	f06f 0512 	mvn.w	r5, #18
   48b8a:	e7dc      	b.n	48b46 <submit_to_queue_locked+0x52>
   48b8c:	20006b30 	.word	0x20006b30

00048b90 <k_work_submit>:
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   48b90:	4601      	mov	r1, r0
   48b92:	4801      	ldr	r0, [pc, #4]	; (48b98 <k_work_submit+0x8>)
   48b94:	f008 baf4 	b.w	51180 <k_work_submit_to_queue>
   48b98:	20003b08 	.word	0x20003b08

00048b9c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   48b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   48b9e:	b089      	sub	sp, #36	; 0x24
   48ba0:	4604      	mov	r4, r0
	list->head = NULL;
   48ba2:	2000      	movs	r0, #0
	list->tail = NULL;
   48ba4:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   48ba8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   48baa:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   48bae:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   48bb2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   48bb6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   48bba:	b31d      	cbz	r5, 48c04 <k_work_queue_start+0x68>
   48bbc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   48bbe:	2800      	cmp	r0, #0
   48bc0:	f240 1001 	movw	r0, #257	; 0x101
   48bc4:	bf08      	it	eq
   48bc6:	2001      	moveq	r0, #1
	*flagp = flags;
   48bc8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   48bcc:	2000      	movs	r0, #0
   48bce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   48bd2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   48bd6:	e9cd 3003 	strd	r3, r0, [sp, #12]
   48bda:	e9cd 0001 	strd	r0, r0, [sp, #4]
   48bde:	e9cd 6706 	strd	r6, r7, [sp, #24]
   48be2:	9400      	str	r4, [sp, #0]
   48be4:	4b08      	ldr	r3, [pc, #32]	; (48c08 <k_work_queue_start+0x6c>)
   48be6:	4620      	mov	r0, r4
   48be8:	f7ff fc1a 	bl	48420 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   48bec:	b125      	cbz	r5, 48bf8 <k_work_queue_start+0x5c>
   48bee:	6829      	ldr	r1, [r5, #0]
   48bf0:	b111      	cbz	r1, 48bf8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   48bf2:	4620      	mov	r0, r4
   48bf4:	f008 f95b 	bl	50eae <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   48bf8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   48bfa:	b009      	add	sp, #36	; 0x24
   48bfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   48c00:	f008 b958 	b.w	50eb4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   48c04:	2001      	movs	r0, #1
   48c06:	e7df      	b.n	48bc8 <k_work_queue_start+0x2c>
   48c08:	0004898d 	.word	0x0004898d

00048c0c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   48c0c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   48c0e:	4616      	mov	r6, r2
   48c10:	9001      	str	r0, [sp, #4]
   48c12:	461f      	mov	r7, r3
   48c14:	4608      	mov	r0, r1
	__asm__ volatile(
   48c16:	f04f 0120 	mov.w	r1, #32
   48c1a:	f3ef 8411 	mrs	r4, BASEPRI
   48c1e:	f381 8812 	msr	BASEPRI_MAX, r1
   48c22:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   48c26:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   48c28:	f011 0f0e 	tst.w	r1, #14
   48c2c:	d115      	bne.n	48c5a <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   48c2e:	433e      	orrs	r6, r7
   48c30:	d108      	bne.n	48c44 <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   48c32:	a901      	add	r1, sp, #4
   48c34:	f7ff ff5e 	bl	48af4 <submit_to_queue_locked>
	__asm__ volatile(
   48c38:	f384 8811 	msr	BASEPRI, r4
   48c3c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   48c40:	b002      	add	sp, #8
   48c42:	bdd0      	pop	{r4, r6, r7, pc}
	*flagp |= BIT(bit);
   48c44:	f041 0108 	orr.w	r1, r1, #8
   48c48:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   48c4a:	9901      	ldr	r1, [sp, #4]
   48c4c:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   48c4e:	3010      	adds	r0, #16
   48c50:	4903      	ldr	r1, [pc, #12]	; (48c60 <k_work_schedule_for_queue+0x54>)
   48c52:	f000 fc11 	bl	49478 <z_add_timeout>
	return ret;
   48c56:	2001      	movs	r0, #1
   48c58:	e7ee      	b.n	48c38 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   48c5a:	2000      	movs	r0, #0
   48c5c:	e7ec      	b.n	48c38 <k_work_schedule_for_queue+0x2c>
   48c5e:	bf00      	nop
   48c60:	00051133 	.word	0x00051133

00048c64 <k_work_schedule>:
int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   48c64:	4601      	mov	r1, r0
   48c66:	4801      	ldr	r0, [pc, #4]	; (48c6c <k_work_schedule+0x8>)
   48c68:	f7ff bfd0 	b.w	48c0c <k_work_schedule_for_queue>
   48c6c:	20003b08 	.word	0x20003b08

00048c70 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   48c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   48c72:	460c      	mov	r4, r1
   48c74:	9001      	str	r0, [sp, #4]
   48c76:	4616      	mov	r6, r2
   48c78:	461f      	mov	r7, r3
	__asm__ volatile(
   48c7a:	f04f 0320 	mov.w	r3, #32
   48c7e:	f3ef 8511 	mrs	r5, BASEPRI
   48c82:	f383 8812 	msr	BASEPRI_MAX, r3
   48c86:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   48c8a:	4608      	mov	r0, r1
   48c8c:	f008 fa3c 	bl	51108 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   48c90:	ea56 0307 	orrs.w	r3, r6, r7
   48c94:	d109      	bne.n	48caa <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   48c96:	a901      	add	r1, sp, #4
   48c98:	4620      	mov	r0, r4
   48c9a:	f7ff ff2b 	bl	48af4 <submit_to_queue_locked>
	__asm__ volatile(
   48c9e:	f385 8811 	msr	BASEPRI, r5
   48ca2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   48ca6:	b003      	add	sp, #12
   48ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   48caa:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   48cac:	4906      	ldr	r1, [pc, #24]	; (48cc8 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   48cae:	f043 0308 	orr.w	r3, r3, #8
   48cb2:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   48cb4:	9b01      	ldr	r3, [sp, #4]
   48cb6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   48cb8:	f104 0010 	add.w	r0, r4, #16
   48cbc:	4632      	mov	r2, r6
   48cbe:	463b      	mov	r3, r7
   48cc0:	f000 fbda 	bl	49478 <z_add_timeout>
	return ret;
   48cc4:	2001      	movs	r0, #1
   48cc6:	e7ea      	b.n	48c9e <k_work_reschedule_for_queue+0x2e>
   48cc8:	00051133 	.word	0x00051133

00048ccc <k_work_reschedule>:
int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   48ccc:	4601      	mov	r1, r0
   48cce:	4801      	ldr	r0, [pc, #4]	; (48cd4 <k_work_reschedule+0x8>)
   48cd0:	f7ff bfce 	b.w	48c70 <k_work_reschedule_for_queue>
   48cd4:	20003b08 	.word	0x20003b08

00048cd8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   48cd8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   48cda:	4c08      	ldr	r4, [pc, #32]	; (48cfc <z_reset_time_slice+0x24>)
   48cdc:	6823      	ldr	r3, [r4, #0]
   48cde:	b15b      	cbz	r3, 48cf8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   48ce0:	f7fd fb4e 	bl	46380 <sys_clock_elapsed>
   48ce4:	6823      	ldr	r3, [r4, #0]
   48ce6:	4a06      	ldr	r2, [pc, #24]	; (48d00 <z_reset_time_slice+0x28>)
   48ce8:	4418      	add	r0, r3
   48cea:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   48cec:	2100      	movs	r1, #0
   48cee:	4618      	mov	r0, r3
	}
}
   48cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   48cf4:	f008 bbe7 	b.w	514c6 <z_set_timeout_expiry>
}
   48cf8:	bd10      	pop	{r4, pc}
   48cfa:	bf00      	nop
   48cfc:	20006b68 	.word	0x20006b68
   48d00:	20006b30 	.word	0x20006b30

00048d04 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   48d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48d06:	4604      	mov	r4, r0
   48d08:	460e      	mov	r6, r1
	__asm__ volatile(
   48d0a:	f04f 0320 	mov.w	r3, #32
   48d0e:	f3ef 8511 	mrs	r5, BASEPRI
   48d12:	f383 8812 	msr	BASEPRI_MAX, r3
   48d16:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   48d1a:	4b10      	ldr	r3, [pc, #64]	; (48d5c <k_sched_time_slice_set+0x58>)
   48d1c:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   48d1e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   48d22:	f240 30e7 	movw	r0, #999	; 0x3e7
   48d26:	2100      	movs	r1, #0
   48d28:	611a      	str	r2, [r3, #16]
   48d2a:	fbe7 0104 	umlal	r0, r1, r7, r4
   48d2e:	2300      	movs	r3, #0
   48d30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   48d34:	f7dd f9e4 	bl	26100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   48d38:	2c00      	cmp	r4, #0
   48d3a:	4b09      	ldr	r3, [pc, #36]	; (48d60 <k_sched_time_slice_set+0x5c>)
   48d3c:	dc09      	bgt.n	48d52 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   48d3e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   48d40:	4b08      	ldr	r3, [pc, #32]	; (48d64 <k_sched_time_slice_set+0x60>)
   48d42:	601e      	str	r6, [r3, #0]
		z_reset_time_slice();
   48d44:	f7ff ffc8 	bl	48cd8 <z_reset_time_slice>
	__asm__ volatile(
   48d48:	f385 8811 	msr	BASEPRI, r5
   48d4c:	f3bf 8f6f 	isb	sy
	}
}
   48d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   48d52:	2802      	cmp	r0, #2
   48d54:	bfb8      	it	lt
   48d56:	2002      	movlt	r0, #2
   48d58:	e7f1      	b.n	48d3e <k_sched_time_slice_set+0x3a>
   48d5a:	bf00      	nop
   48d5c:	20006b30 	.word	0x20006b30
   48d60:	20006b68 	.word	0x20006b68
   48d64:	20006b64 	.word	0x20006b64

00048d68 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   48d68:	b949      	cbnz	r1, 48d7e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   48d6a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   48d6e:	b930      	cbnz	r0, 48d7e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   48d70:	4b05      	ldr	r3, [pc, #20]	; (48d88 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   48d72:	69da      	ldr	r2, [r3, #28]
   48d74:	689b      	ldr	r3, [r3, #8]
   48d76:	429a      	cmp	r2, r3
   48d78:	d001      	beq.n	48d7e <z_reschedule+0x16>
	ret = arch_swap(key);
   48d7a:	f7e3 bf07 	b.w	2cb8c <arch_swap>
   48d7e:	f381 8811 	msr	BASEPRI, r1
   48d82:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   48d86:	4770      	bx	lr
   48d88:	20006b30 	.word	0x20006b30

00048d8c <k_sched_lock>:
	__asm__ volatile(
   48d8c:	f04f 0320 	mov.w	r3, #32
   48d90:	f3ef 8111 	mrs	r1, BASEPRI
   48d94:	f383 8812 	msr	BASEPRI_MAX, r3
   48d98:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   48d9c:	4b04      	ldr	r3, [pc, #16]	; (48db0 <k_sched_lock+0x24>)
   48d9e:	689a      	ldr	r2, [r3, #8]
   48da0:	7bd3      	ldrb	r3, [r2, #15]
   48da2:	3b01      	subs	r3, #1
   48da4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   48da6:	f381 8811 	msr	BASEPRI, r1
   48daa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   48dae:	4770      	bx	lr
   48db0:	20006b30 	.word	0x20006b30

00048db4 <update_cache>:
{
   48db4:	b538      	push	{r3, r4, r5, lr}
   48db6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   48db8:	480c      	ldr	r0, [pc, #48]	; (48dec <update_cache+0x38>)
   48dba:	4d0d      	ldr	r5, [pc, #52]	; (48df0 <update_cache+0x3c>)
   48dbc:	f008 fa9e 	bl	512fc <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   48dc0:	4604      	mov	r4, r0
   48dc2:	b900      	cbnz	r0, 48dc6 <update_cache+0x12>
   48dc4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   48dc6:	68ab      	ldr	r3, [r5, #8]
   48dc8:	b94a      	cbnz	r2, 48dde <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   48dca:	7b5a      	ldrb	r2, [r3, #13]
   48dcc:	06d2      	lsls	r2, r2, #27
   48dce:	d106      	bne.n	48dde <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   48dd0:	69a2      	ldr	r2, [r4, #24]
   48dd2:	b922      	cbnz	r2, 48dde <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   48dd4:	89da      	ldrh	r2, [r3, #14]
   48dd6:	2a7f      	cmp	r2, #127	; 0x7f
   48dd8:	d901      	bls.n	48dde <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   48dda:	61eb      	str	r3, [r5, #28]
}
   48ddc:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   48dde:	429c      	cmp	r4, r3
   48de0:	d001      	beq.n	48de6 <update_cache+0x32>
			z_reset_time_slice();
   48de2:	f7ff ff79 	bl	48cd8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   48de6:	61ec      	str	r4, [r5, #28]
}
   48de8:	e7f8      	b.n	48ddc <update_cache+0x28>
   48dea:	bf00      	nop
   48dec:	20006b50 	.word	0x20006b50
   48df0:	20006b30 	.word	0x20006b30

00048df4 <move_thread_to_end_of_prio_q>:
{
   48df4:	b570      	push	{r4, r5, r6, lr}
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   48df6:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
   48df8:	061a      	lsls	r2, r3, #24
{
   48dfa:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   48dfc:	d504      	bpl.n	48e08 <move_thread_to_end_of_prio_q+0x14>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   48dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   48e02:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   48e04:	f008 fa25 	bl	51252 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   48e08:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   48e0a:	4a15      	ldr	r2, [pc, #84]	; (48e60 <move_thread_to_end_of_prio_q+0x6c>)
   48e0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   48e10:	734b      	strb	r3, [r1, #13]
   48e12:	e9d2 3508 	ldrd	r3, r5, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48e16:	f102 0020 	add.w	r0, r2, #32
   48e1a:	4283      	cmp	r3, r0
   48e1c:	d01b      	beq.n	48e56 <move_thread_to_end_of_prio_q+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48e1e:	b1d3      	cbz	r3, 48e56 <move_thread_to_end_of_prio_q+0x62>
	int32_t b1 = thread_1->base.prio;
   48e20:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   48e24:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   48e28:	42a6      	cmp	r6, r4
   48e2a:	d00f      	beq.n	48e4c <move_thread_to_end_of_prio_q+0x58>
		return b2 - b1;
   48e2c:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   48e2e:	2c00      	cmp	r4, #0
   48e30:	dd0c      	ble.n	48e4c <move_thread_to_end_of_prio_q+0x58>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   48e32:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   48e34:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   48e38:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   48e3a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   48e3c:	6890      	ldr	r0, [r2, #8]
   48e3e:	1a43      	subs	r3, r0, r1
   48e40:	4258      	negs	r0, r3
   48e42:	4158      	adcs	r0, r3
}
   48e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   48e48:	f7ff bfb4 	b.w	48db4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   48e4c:	42ab      	cmp	r3, r5
   48e4e:	d002      	beq.n	48e56 <move_thread_to_end_of_prio_q+0x62>
   48e50:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48e52:	2b00      	cmp	r3, #0
   48e54:	d1e6      	bne.n	48e24 <move_thread_to_end_of_prio_q+0x30>
	node->prev = tail;
   48e56:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   48e5a:	6029      	str	r1, [r5, #0]
	list->tail = node;
   48e5c:	6251      	str	r1, [r2, #36]	; 0x24
   48e5e:	e7ed      	b.n	48e3c <move_thread_to_end_of_prio_q+0x48>
   48e60:	20006b30 	.word	0x20006b30

00048e64 <z_time_slice>:
{
   48e64:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   48e66:	f04f 0320 	mov.w	r3, #32
   48e6a:	f3ef 8411 	mrs	r4, BASEPRI
   48e6e:	f383 8812 	msr	BASEPRI_MAX, r3
   48e72:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   48e76:	4a17      	ldr	r2, [pc, #92]	; (48ed4 <z_time_slice+0x70>)
   48e78:	4917      	ldr	r1, [pc, #92]	; (48ed8 <z_time_slice+0x74>)
   48e7a:	6893      	ldr	r3, [r2, #8]
   48e7c:	680d      	ldr	r5, [r1, #0]
   48e7e:	42ab      	cmp	r3, r5
   48e80:	4615      	mov	r5, r2
   48e82:	d106      	bne.n	48e92 <z_time_slice+0x2e>
			z_reset_time_slice();
   48e84:	f7ff ff28 	bl	48cd8 <z_reset_time_slice>
	__asm__ volatile(
   48e88:	f384 8811 	msr	BASEPRI, r4
   48e8c:	f3bf 8f6f 	isb	sy
}
   48e90:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   48e92:	2600      	movs	r6, #0
   48e94:	600e      	str	r6, [r1, #0]
	if (slice_time && sliceable(_current)) {
   48e96:	4911      	ldr	r1, [pc, #68]	; (48edc <z_time_slice+0x78>)
   48e98:	6809      	ldr	r1, [r1, #0]
   48e9a:	b1c1      	cbz	r1, 48ece <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   48e9c:	89d9      	ldrh	r1, [r3, #14]
   48e9e:	297f      	cmp	r1, #127	; 0x7f
   48ea0:	d815      	bhi.n	48ece <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   48ea2:	7b59      	ldrb	r1, [r3, #13]
   48ea4:	06c9      	lsls	r1, r1, #27
   48ea6:	d112      	bne.n	48ece <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   48ea8:	490d      	ldr	r1, [pc, #52]	; (48ee0 <z_time_slice+0x7c>)
   48eaa:	f993 600e 	ldrsb.w	r6, [r3, #14]
   48eae:	6809      	ldr	r1, [r1, #0]
   48eb0:	428e      	cmp	r6, r1
   48eb2:	db0c      	blt.n	48ece <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   48eb4:	490b      	ldr	r1, [pc, #44]	; (48ee4 <z_time_slice+0x80>)
   48eb6:	428b      	cmp	r3, r1
   48eb8:	d009      	beq.n	48ece <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   48eba:	6911      	ldr	r1, [r2, #16]
   48ebc:	4281      	cmp	r1, r0
   48ebe:	dc03      	bgt.n	48ec8 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   48ec0:	4618      	mov	r0, r3
   48ec2:	f7ff ff97 	bl	48df4 <move_thread_to_end_of_prio_q>
   48ec6:	e7dd      	b.n	48e84 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   48ec8:	1a09      	subs	r1, r1, r0
   48eca:	6111      	str	r1, [r2, #16]
   48ecc:	e7dc      	b.n	48e88 <z_time_slice+0x24>
		_current_cpu->slice_ticks = 0;
   48ece:	2300      	movs	r3, #0
   48ed0:	612b      	str	r3, [r5, #16]
   48ed2:	e7d9      	b.n	48e88 <z_time_slice+0x24>
   48ed4:	20006b30 	.word	0x20006b30
   48ed8:	20006b60 	.word	0x20006b60
   48edc:	20006b68 	.word	0x20006b68
   48ee0:	20006b64 	.word	0x20006b64
   48ee4:	20003a08 	.word	0x20003a08

00048ee8 <ready_thread>:
{
   48ee8:	b470      	push	{r4, r5, r6}
   48eea:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   48eec:	0619      	lsls	r1, r3, #24
   48eee:	d42a      	bmi.n	48f46 <ready_thread+0x5e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   48ef0:	06da      	lsls	r2, r3, #27
   48ef2:	d128      	bne.n	48f46 <ready_thread+0x5e>
   48ef4:	6982      	ldr	r2, [r0, #24]
   48ef6:	bb32      	cbnz	r2, 48f46 <ready_thread+0x5e>
	thread->base.thread_state |= _THREAD_QUEUED;
   48ef8:	f063 037f 	orn	r3, r3, #127	; 0x7f
	return list->head == list;
   48efc:	4a13      	ldr	r2, [pc, #76]	; (48f4c <ready_thread+0x64>)
   48efe:	7343      	strb	r3, [r0, #13]
   48f00:	e9d2 3508 	ldrd	r3, r5, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   48f04:	f102 0120 	add.w	r1, r2, #32
   48f08:	428b      	cmp	r3, r1
   48f0a:	d017      	beq.n	48f3c <ready_thread+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48f0c:	b1b3      	cbz	r3, 48f3c <ready_thread+0x54>
	int32_t b1 = thread_1->base.prio;
   48f0e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   48f12:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   48f16:	42a6      	cmp	r6, r4
   48f18:	d00b      	beq.n	48f32 <ready_thread+0x4a>
		return b2 - b1;
   48f1a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   48f1c:	2c00      	cmp	r4, #0
   48f1e:	dd08      	ble.n	48f32 <ready_thread+0x4a>
	sys_dnode_t *const prev = successor->prev;
   48f20:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   48f22:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   48f26:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   48f28:	6058      	str	r0, [r3, #4]
		update_cache(0);
   48f2a:	2000      	movs	r0, #0
}
   48f2c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   48f2e:	f7ff bf41 	b.w	48db4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   48f32:	42ab      	cmp	r3, r5
   48f34:	d002      	beq.n	48f3c <ready_thread+0x54>
   48f36:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   48f38:	2b00      	cmp	r3, #0
   48f3a:	d1ea      	bne.n	48f12 <ready_thread+0x2a>
	node->prev = tail;
   48f3c:	e9c0 1500 	strd	r1, r5, [r0]
	tail->next = node;
   48f40:	6028      	str	r0, [r5, #0]
	list->tail = node;
   48f42:	6250      	str	r0, [r2, #36]	; 0x24
   48f44:	e7f1      	b.n	48f2a <ready_thread+0x42>
}
   48f46:	bc70      	pop	{r4, r5, r6}
   48f48:	4770      	bx	lr
   48f4a:	bf00      	nop
   48f4c:	20006b30 	.word	0x20006b30

00048f50 <z_sched_start>:
{
   48f50:	b510      	push	{r4, lr}
	__asm__ volatile(
   48f52:	f04f 0320 	mov.w	r3, #32
   48f56:	f3ef 8411 	mrs	r4, BASEPRI
   48f5a:	f383 8812 	msr	BASEPRI_MAX, r3
   48f5e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   48f62:	7b43      	ldrb	r3, [r0, #13]
   48f64:	0759      	lsls	r1, r3, #29
   48f66:	d404      	bmi.n	48f72 <z_sched_start+0x22>
	__asm__ volatile(
   48f68:	f384 8811 	msr	BASEPRI, r4
   48f6c:	f3bf 8f6f 	isb	sy
}
   48f70:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   48f72:	f023 0304 	bic.w	r3, r3, #4
   48f76:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   48f78:	f7ff ffb6 	bl	48ee8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   48f7c:	4621      	mov	r1, r4
   48f7e:	4802      	ldr	r0, [pc, #8]	; (48f88 <z_sched_start+0x38>)
}
   48f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   48f84:	f7ff bef0 	b.w	48d68 <z_reschedule>
   48f88:	20006dad 	.word	0x20006dad

00048f8c <unready_thread>:
{
   48f8c:	b508      	push	{r3, lr}
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   48f8e:	7b43      	ldrb	r3, [r0, #13]
	if (z_is_thread_queued(thread)) {
   48f90:	061a      	lsls	r2, r3, #24
{
   48f92:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   48f94:	d504      	bpl.n	48fa0 <unready_thread+0x14>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   48f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   48f9a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   48f9c:	f008 f959 	bl	51252 <sys_dlist_remove>
	update_cache(thread == _current);
   48fa0:	4b04      	ldr	r3, [pc, #16]	; (48fb4 <unready_thread+0x28>)
   48fa2:	6898      	ldr	r0, [r3, #8]
   48fa4:	1a43      	subs	r3, r0, r1
   48fa6:	4258      	negs	r0, r3
   48fa8:	4158      	adcs	r0, r3
}
   48faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   48fae:	f7ff bf01 	b.w	48db4 <update_cache>
   48fb2:	bf00      	nop
   48fb4:	20006b30 	.word	0x20006b30

00048fb8 <pend>:
{
   48fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   48fbc:	4606      	mov	r6, r0
   48fbe:	4614      	mov	r4, r2
   48fc0:	461d      	mov	r5, r3
	__asm__ volatile(
   48fc2:	f04f 0320 	mov.w	r3, #32
   48fc6:	f3ef 8711 	mrs	r7, BASEPRI
   48fca:	f383 8812 	msr	BASEPRI_MAX, r3
   48fce:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   48fd2:	f008 f9ce 	bl	51372 <add_to_waitq_locked>
	__asm__ volatile(
   48fd6:	f387 8811 	msr	BASEPRI, r7
   48fda:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   48fde:	1c6b      	adds	r3, r5, #1
   48fe0:	bf08      	it	eq
   48fe2:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   48fe6:	d008      	beq.n	48ffa <pend+0x42>
   48fe8:	4622      	mov	r2, r4
   48fea:	462b      	mov	r3, r5
   48fec:	f106 0018 	add.w	r0, r6, #24
   48ff0:	4903      	ldr	r1, [pc, #12]	; (49000 <pend+0x48>)
}
   48ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   48ff6:	f000 ba3f 	b.w	49478 <z_add_timeout>
   48ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   48ffe:	bf00      	nop
   49000:	00051329 	.word	0x00051329

00049004 <z_pend_curr>:
{
   49004:	b510      	push	{r4, lr}
	pending_current = _current;
   49006:	4b07      	ldr	r3, [pc, #28]	; (49024 <z_pend_curr+0x20>)
   49008:	6898      	ldr	r0, [r3, #8]
   4900a:	4b07      	ldr	r3, [pc, #28]	; (49028 <z_pend_curr+0x24>)
{
   4900c:	460c      	mov	r4, r1
	pending_current = _current;
   4900e:	6018      	str	r0, [r3, #0]
{
   49010:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   49012:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   49016:	f7ff ffcf 	bl	48fb8 <pend>
   4901a:	4620      	mov	r0, r4
}
   4901c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   49020:	f7e3 bdb4 	b.w	2cb8c <arch_swap>
   49024:	20006b30 	.word	0x20006b30
   49028:	20006b60 	.word	0x20006b60

0004902c <z_set_prio>:
{
   4902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4902e:	4604      	mov	r4, r0
	__asm__ volatile(
   49030:	f04f 0320 	mov.w	r3, #32
   49034:	f3ef 8511 	mrs	r5, BASEPRI
   49038:	f383 8812 	msr	BASEPRI_MAX, r3
   4903c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   49040:	7b43      	ldrb	r3, [r0, #13]
   49042:	06da      	lsls	r2, r3, #27
   49044:	b249      	sxtb	r1, r1
   49046:	d133      	bne.n	490b0 <z_set_prio+0x84>
		if (need_sched) {
   49048:	6982      	ldr	r2, [r0, #24]
   4904a:	bb8a      	cbnz	r2, 490b0 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4904c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   49050:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   49052:	f008 f8fe 	bl	51252 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   49056:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   49058:	4a17      	ldr	r2, [pc, #92]	; (490b8 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   4905a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   4905c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   49060:	7343      	strb	r3, [r0, #13]
   49062:	4610      	mov	r0, r2
   49064:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   49068:	4283      	cmp	r3, r0
   4906a:	d01b      	beq.n	490a4 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   4906c:	b1d3      	cbz	r3, 490a4 <z_set_prio+0x78>
   4906e:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   49070:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   49074:	42b1      	cmp	r1, r6
   49076:	d010      	beq.n	4909a <z_set_prio+0x6e>
		return b2 - b1;
   49078:	1a76      	subs	r6, r6, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   4907a:	2e00      	cmp	r6, #0
   4907c:	dd0d      	ble.n	4909a <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   4907e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   49080:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   49084:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   49086:	605c      	str	r4, [r3, #4]
			update_cache(1);
   49088:	2001      	movs	r0, #1
   4908a:	f7ff fe93 	bl	48db4 <update_cache>
   4908e:	2001      	movs	r0, #1
	__asm__ volatile(
   49090:	f385 8811 	msr	BASEPRI, r5
   49094:	f3bf 8f6f 	isb	sy
}
   49098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   4909a:	429f      	cmp	r7, r3
   4909c:	d002      	beq.n	490a4 <z_set_prio+0x78>
   4909e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   490a0:	2b00      	cmp	r3, #0
   490a2:	d1e5      	bne.n	49070 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   490a4:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   490a6:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   490aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   490ac:	6254      	str	r4, [r2, #36]	; 0x24
   490ae:	e7eb      	b.n	49088 <z_set_prio+0x5c>
			thread->base.prio = prio;
   490b0:	73a1      	strb	r1, [r4, #14]
   490b2:	2000      	movs	r0, #0
   490b4:	e7ec      	b.n	49090 <z_set_prio+0x64>
   490b6:	bf00      	nop
   490b8:	20006b30 	.word	0x20006b30

000490bc <z_impl_k_thread_suspend>:
{
   490bc:	b570      	push	{r4, r5, r6, lr}
   490be:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   490c0:	3018      	adds	r0, #24
   490c2:	f008 f9da 	bl	5147a <z_abort_timeout>
	__asm__ volatile(
   490c6:	f04f 0320 	mov.w	r3, #32
   490ca:	f3ef 8611 	mrs	r6, BASEPRI
   490ce:	f383 8812 	msr	BASEPRI_MAX, r3
   490d2:	f3bf 8f6f 	isb	sy
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   490d6:	7b63      	ldrb	r3, [r4, #13]
		if (z_is_thread_queued(thread)) {
   490d8:	061a      	lsls	r2, r3, #24
   490da:	d505      	bpl.n	490e8 <z_impl_k_thread_suspend+0x2c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   490dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   490e0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   490e2:	4620      	mov	r0, r4
   490e4:	f008 f8b5 	bl	51252 <sys_dlist_remove>
		update_cache(thread == _current);
   490e8:	4d0b      	ldr	r5, [pc, #44]	; (49118 <z_impl_k_thread_suspend+0x5c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   490ea:	7b63      	ldrb	r3, [r4, #13]
   490ec:	68a8      	ldr	r0, [r5, #8]
   490ee:	f043 0310 	orr.w	r3, r3, #16
   490f2:	7363      	strb	r3, [r4, #13]
   490f4:	1b03      	subs	r3, r0, r4
   490f6:	4258      	negs	r0, r3
   490f8:	4158      	adcs	r0, r3
   490fa:	f7ff fe5b 	bl	48db4 <update_cache>
	__asm__ volatile(
   490fe:	f386 8811 	msr	BASEPRI, r6
   49102:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   49106:	68ab      	ldr	r3, [r5, #8]
   49108:	42a3      	cmp	r3, r4
   4910a:	d103      	bne.n	49114 <z_impl_k_thread_suspend+0x58>
}
   4910c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   49110:	f008 b8ea 	b.w	512e8 <z_reschedule_unlocked>
}
   49114:	bd70      	pop	{r4, r5, r6, pc}
   49116:	bf00      	nop
   49118:	20006b30 	.word	0x20006b30

0004911c <k_sched_unlock>:
{
   4911c:	b510      	push	{r4, lr}
	__asm__ volatile(
   4911e:	f04f 0320 	mov.w	r3, #32
   49122:	f3ef 8411 	mrs	r4, BASEPRI
   49126:	f383 8812 	msr	BASEPRI_MAX, r3
   4912a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   4912e:	4b08      	ldr	r3, [pc, #32]	; (49150 <k_sched_unlock+0x34>)
   49130:	689a      	ldr	r2, [r3, #8]
   49132:	7bd3      	ldrb	r3, [r2, #15]
   49134:	3301      	adds	r3, #1
   49136:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   49138:	2000      	movs	r0, #0
   4913a:	f7ff fe3b 	bl	48db4 <update_cache>
	__asm__ volatile(
   4913e:	f384 8811 	msr	BASEPRI, r4
   49142:	f3bf 8f6f 	isb	sy
}
   49146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   4914a:	f008 b8cd 	b.w	512e8 <z_reschedule_unlocked>
   4914e:	bf00      	nop
   49150:	20006b30 	.word	0x20006b30

00049154 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   49154:	4b04      	ldr	r3, [pc, #16]	; (49168 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   49156:	2100      	movs	r1, #0
   49158:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   4915c:	e9c3 2208 	strd	r2, r2, [r3, #32]
   49160:	4608      	mov	r0, r1
   49162:	f7ff bdcf 	b.w	48d04 <k_sched_time_slice_set>
   49166:	bf00      	nop
   49168:	20006b30 	.word	0x20006b30

0004916c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   4916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   4916e:	f04f 0320 	mov.w	r3, #32
   49172:	f3ef 8511 	mrs	r5, BASEPRI
   49176:	f383 8812 	msr	BASEPRI_MAX, r3
   4917a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   4917e:	491a      	ldr	r1, [pc, #104]	; (491e8 <z_impl_k_yield+0x7c>)
   49180:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   49182:	7b43      	ldrb	r3, [r0, #13]
   49184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   49188:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   4918a:	f008 f862 	bl	51252 <sys_dlist_remove>
	}
	queue_thread(_current);
   4918e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   49190:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   49192:	4608      	mov	r0, r1
   49194:	f062 027f 	orn	r2, r2, #127	; 0x7f
   49198:	735a      	strb	r2, [r3, #13]
   4919a:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4919e:	4282      	cmp	r2, r0
   491a0:	d01c      	beq.n	491dc <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   491a2:	b1da      	cbz	r2, 491dc <z_impl_k_yield+0x70>
   491a4:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   491a6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   491aa:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   491ae:	42a6      	cmp	r6, r4
   491b0:	d00f      	beq.n	491d2 <z_impl_k_yield+0x66>
		return b2 - b1;
   491b2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   491b4:	2c00      	cmp	r4, #0
   491b6:	dd0c      	ble.n	491d2 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   491b8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   491ba:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   491be:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   491c0:	6053      	str	r3, [r2, #4]
	update_cache(1);
   491c2:	2001      	movs	r0, #1
   491c4:	f7ff fdf6 	bl	48db4 <update_cache>
   491c8:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   491ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   491ce:	f7e3 bcdd 	b.w	2cb8c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   491d2:	42ba      	cmp	r2, r7
   491d4:	d002      	beq.n	491dc <z_impl_k_yield+0x70>
   491d6:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   491d8:	2a00      	cmp	r2, #0
   491da:	d1e6      	bne.n	491aa <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   491dc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   491de:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   491e2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   491e4:	624b      	str	r3, [r1, #36]	; 0x24
   491e6:	e7ec      	b.n	491c2 <z_impl_k_yield+0x56>
   491e8:	20006b30 	.word	0x20006b30

000491ec <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   491ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   491f0:	4606      	mov	r6, r0
   491f2:	460f      	mov	r7, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   491f4:	ea56 0107 	orrs.w	r1, r6, r7
   491f8:	d104      	bne.n	49204 <z_tick_sleep+0x18>
	z_impl_k_yield();
   491fa:	f7ff ffb7 	bl	4916c <z_impl_k_yield>
		k_yield();
		return 0;
   491fe:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   49200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   49204:	f06f 0101 	mvn.w	r1, #1
   49208:	1a0a      	subs	r2, r1, r0
   4920a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   4920e:	eb61 0307 	sbc.w	r3, r1, r7
   49212:	2a01      	cmp	r2, #1
   49214:	f173 0300 	sbcs.w	r3, r3, #0
   49218:	da2a      	bge.n	49270 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   4921a:	f008 f96e 	bl	514fa <sys_clock_tick_get_32>
   4921e:	1984      	adds	r4, r0, r6
   49220:	f04f 0320 	mov.w	r3, #32
   49224:	f3ef 8811 	mrs	r8, BASEPRI
   49228:	f383 8812 	msr	BASEPRI_MAX, r3
   4922c:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   49230:	4d11      	ldr	r5, [pc, #68]	; (49278 <z_tick_sleep+0x8c>)
   49232:	4b12      	ldr	r3, [pc, #72]	; (4927c <z_tick_sleep+0x90>)
   49234:	68a8      	ldr	r0, [r5, #8]
   49236:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   49238:	f7ff fea8 	bl	48f8c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   4923c:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   4923e:	4910      	ldr	r1, [pc, #64]	; (49280 <z_tick_sleep+0x94>)
   49240:	4632      	mov	r2, r6
   49242:	463b      	mov	r3, r7
   49244:	3018      	adds	r0, #24
   49246:	f000 f917 	bl	49478 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   4924a:	68aa      	ldr	r2, [r5, #8]
   4924c:	7b53      	ldrb	r3, [r2, #13]
   4924e:	f043 0310 	orr.w	r3, r3, #16
   49252:	7353      	strb	r3, [r2, #13]
   49254:	4640      	mov	r0, r8
   49256:	f7e3 fc99 	bl	2cb8c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   4925a:	f008 f94e 	bl	514fa <sys_clock_tick_get_32>
   4925e:	1a20      	subs	r0, r4, r0
   49260:	eb64 0104 	sbc.w	r1, r4, r4
	if (ticks > 0) {
   49264:	2801      	cmp	r0, #1
   49266:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
   4926a:	bfb8      	it	lt
   4926c:	2000      	movlt	r0, #0
   4926e:	e7c7      	b.n	49200 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   49270:	f06f 0401 	mvn.w	r4, #1
   49274:	1a24      	subs	r4, r4, r0
   49276:	e7d3      	b.n	49220 <z_tick_sleep+0x34>
   49278:	20006b30 	.word	0x20006b30
   4927c:	20006b60 	.word	0x20006b60
   49280:	00051329 	.word	0x00051329

00049284 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   49284:	b508      	push	{r3, lr}
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   49286:	1c4b      	adds	r3, r1, #1
   49288:	bf08      	it	eq
   4928a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   4928e:	d106      	bne.n	4929e <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
   49290:	4b08      	ldr	r3, [pc, #32]	; (492b4 <z_impl_k_sleep+0x30>)
   49292:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   49294:	f7ff ff12 	bl	490bc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   49298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   4929c:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   4929e:	f7ff ffa5 	bl	491ec <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   492a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   492a6:	fb80 2303 	smull	r2, r3, r0, r3
   492aa:	0bd0      	lsrs	r0, r2, #15
   492ac:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   492b0:	e7f4      	b.n	4929c <z_impl_k_sleep+0x18>
   492b2:	bf00      	nop
   492b4:	20006b30 	.word	0x20006b30

000492b8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   492b8:	4b01      	ldr	r3, [pc, #4]	; (492c0 <z_impl_z_current_get+0x8>)
   492ba:	6898      	ldr	r0, [r3, #8]
   492bc:	4770      	bx	lr
   492be:	bf00      	nop
   492c0:	20006b30 	.word	0x20006b30

000492c4 <z_impl_k_is_preempt_thread>:
   492c4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   492c8:	b93b      	cbnz	r3, 492da <z_impl_k_is_preempt_thread+0x16>
   492ca:	4b05      	ldr	r3, [pc, #20]	; (492e0 <z_impl_k_is_preempt_thread+0x1c>)
   492cc:	689b      	ldr	r3, [r3, #8]
   492ce:	89d8      	ldrh	r0, [r3, #14]
   492d0:	287f      	cmp	r0, #127	; 0x7f
   492d2:	bf8c      	ite	hi
   492d4:	2000      	movhi	r0, #0
   492d6:	2001      	movls	r0, #1
   492d8:	4770      	bx	lr
   492da:	2000      	movs	r0, #0
}
   492dc:	4770      	bx	lr
   492de:	bf00      	nop
   492e0:	20006b30 	.word	0x20006b30

000492e4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   492e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   492e8:	4604      	mov	r4, r0
   492ea:	f04f 0320 	mov.w	r3, #32
   492ee:	f3ef 8611 	mrs	r6, BASEPRI
   492f2:	f383 8812 	msr	BASEPRI_MAX, r3
   492f6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   492fa:	7b43      	ldrb	r3, [r0, #13]
   492fc:	071d      	lsls	r5, r3, #28
   492fe:	d505      	bpl.n	4930c <z_thread_abort+0x28>
	__asm__ volatile(
   49300:	f386 8811 	msr	BASEPRI, r6
   49304:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   49308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   4930c:	f023 0220 	bic.w	r2, r3, #32
   49310:	f042 0208 	orr.w	r2, r2, #8
		if (z_is_thread_queued(thread)) {
   49314:	0611      	lsls	r1, r2, #24
   49316:	d420      	bmi.n	4935a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   49318:	7342      	strb	r2, [r0, #13]
		if (thread->base.pended_on != NULL) {
   4931a:	68a3      	ldr	r3, [r4, #8]
   4931c:	b113      	cbz	r3, 49324 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   4931e:	4620      	mov	r0, r4
   49320:	f007 ff9f 	bl	51262 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   49324:	f104 0018 	add.w	r0, r4, #24
   49328:	f008 f8a7 	bl	5147a <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   4932c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   49330:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   49334:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   49336:	42bd      	cmp	r5, r7
   49338:	d000      	beq.n	4933c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   4933a:	b9b5      	cbnz	r5, 4936a <z_thread_abort+0x86>
		update_cache(1);
   4933c:	2001      	movs	r0, #1
   4933e:	f7ff fd39 	bl	48db4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   49342:	4b10      	ldr	r3, [pc, #64]	; (49384 <z_thread_abort+0xa0>)
   49344:	689b      	ldr	r3, [r3, #8]
   49346:	42a3      	cmp	r3, r4
   49348:	d1da      	bne.n	49300 <z_thread_abort+0x1c>
   4934a:	f3ef 8305 	mrs	r3, IPSR
   4934e:	2b00      	cmp	r3, #0
   49350:	d1d6      	bne.n	49300 <z_thread_abort+0x1c>
   49352:	4630      	mov	r0, r6
   49354:	f7e3 fc1a 	bl	2cb8c <arch_swap>
	return ret;
   49358:	e7d2      	b.n	49300 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   4935a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   4935e:	f043 0308 	orr.w	r3, r3, #8
   49362:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   49364:	f007 ff75 	bl	51252 <sys_dlist_remove>
   49368:	e7d7      	b.n	4931a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   4936a:	4628      	mov	r0, r5
   4936c:	f007 ff79 	bl	51262 <unpend_thread_no_timeout>
   49370:	f105 0018 	add.w	r0, r5, #24
   49374:	f008 f881 	bl	5147a <z_abort_timeout>
   49378:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   4937c:	4628      	mov	r0, r5
   4937e:	f7ff fdb3 	bl	48ee8 <ready_thread>
   49382:	e7d7      	b.n	49334 <z_thread_abort+0x50>
   49384:	20006b30 	.word	0x20006b30

00049388 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   49388:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   4938a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   4938e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   49390:	e9cd 6700 	strd	r6, r7, [sp]
   49394:	f7ff fe36 	bl	49004 <z_pend_curr>

	if (data != NULL) {
   49398:	b11c      	cbz	r4, 493a2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   4939a:	4b03      	ldr	r3, [pc, #12]	; (493a8 <z_sched_wait+0x20>)
   4939c:	689b      	ldr	r3, [r3, #8]
   4939e:	695b      	ldr	r3, [r3, #20]
   493a0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   493a2:	b002      	add	sp, #8
   493a4:	bdd0      	pop	{r4, r6, r7, pc}
   493a6:	bf00      	nop
   493a8:	20006b30 	.word	0x20006b30

000493ac <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   493ac:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   493ae:	4806      	ldr	r0, [pc, #24]	; (493c8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   493b0:	4a06      	ldr	r2, [pc, #24]	; (493cc <z_data_copy+0x20>)
   493b2:	4907      	ldr	r1, [pc, #28]	; (493d0 <z_data_copy+0x24>)
   493b4:	1a12      	subs	r2, r2, r0
   493b6:	f002 ff99 	bl	4c2ec <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   493ba:	4a06      	ldr	r2, [pc, #24]	; (493d4 <z_data_copy+0x28>)
   493bc:	4906      	ldr	r1, [pc, #24]	; (493d8 <z_data_copy+0x2c>)
   493be:	4807      	ldr	r0, [pc, #28]	; (493dc <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   493c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   493c4:	f002 bf92 	b.w	4c2ec <memcpy>
   493c8:	20000000 	.word	0x20000000
   493cc:	2000125c 	.word	0x2000125c
   493d0:	000545e8 	.word	0x000545e8
   493d4:	00000000 	.word	0x00000000
   493d8:	000545e8 	.word	0x000545e8
   493dc:	20000000 	.word	0x20000000

000493e0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   493e0:	4b03      	ldr	r3, [pc, #12]	; (493f0 <elapsed+0x10>)
   493e2:	681b      	ldr	r3, [r3, #0]
   493e4:	b90b      	cbnz	r3, 493ea <elapsed+0xa>
   493e6:	f7fc bfcb 	b.w	46380 <sys_clock_elapsed>
}
   493ea:	2000      	movs	r0, #0
   493ec:	4770      	bx	lr
   493ee:	bf00      	nop
   493f0:	20006b6c 	.word	0x20006b6c

000493f4 <remove_timeout>:
{
   493f4:	b530      	push	{r4, r5, lr}
   493f6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   493f8:	b168      	cbz	r0, 49416 <remove_timeout+0x22>
   493fa:	4a0a      	ldr	r2, [pc, #40]	; (49424 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   493fc:	6852      	ldr	r2, [r2, #4]
   493fe:	4290      	cmp	r0, r2
   49400:	d009      	beq.n	49416 <remove_timeout+0x22>
	if (next(t) != NULL) {
   49402:	b143      	cbz	r3, 49416 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   49404:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   49408:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   4940c:	1912      	adds	r2, r2, r4
   4940e:	eb45 0101 	adc.w	r1, r5, r1
   49412:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   49416:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   49418:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   4941a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   4941c:	2300      	movs	r3, #0
	node->prev = NULL;
   4941e:	e9c0 3300 	strd	r3, r3, [r0]
}
   49422:	bd30      	pop	{r4, r5, pc}
   49424:	20000c78 	.word	0x20000c78

00049428 <next_timeout>:

static int32_t next_timeout(void)
{
   49428:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   4942a:	4b11      	ldr	r3, [pc, #68]	; (49470 <next_timeout+0x48>)
   4942c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4942e:	429c      	cmp	r4, r3
   49430:	bf08      	it	eq
   49432:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   49434:	f7ff ffd4 	bl	493e0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   49438:	b1b4      	cbz	r4, 49468 <next_timeout+0x40>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   4943a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   4943e:	1a14      	subs	r4, r2, r0
   49440:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	if ((to == NULL) ||
   49444:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   49448:	f175 0300 	sbcs.w	r3, r5, #0
   4944c:	da0c      	bge.n	49468 <next_timeout+0x40>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   4944e:	2c00      	cmp	r4, #0
   49450:	f175 0300 	sbcs.w	r3, r5, #0
   49454:	4620      	mov	r0, r4
   49456:	da00      	bge.n	4945a <next_timeout+0x32>
   49458:	2000      	movs	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   4945a:	4b06      	ldr	r3, [pc, #24]	; (49474 <next_timeout+0x4c>)
   4945c:	691b      	ldr	r3, [r3, #16]
   4945e:	b113      	cbz	r3, 49466 <next_timeout+0x3e>
   49460:	4298      	cmp	r0, r3
   49462:	bfa8      	it	ge
   49464:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   49466:	bd38      	pop	{r3, r4, r5, pc}
		ret = MAX_WAIT;
   49468:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   4946c:	e7f5      	b.n	4945a <next_timeout+0x32>
   4946e:	bf00      	nop
   49470:	20000c78 	.word	0x20000c78
   49474:	20006b30 	.word	0x20006b30

00049478 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   49478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   4947c:	bf08      	it	eq
   4947e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   49482:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49486:	4604      	mov	r4, r0
   49488:	4692      	mov	sl, r2
   4948a:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4948c:	d075      	beq.n	4957a <z_add_timeout+0x102>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   4948e:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   49490:	f04f 0320 	mov.w	r3, #32
   49494:	f3ef 8511 	mrs	r5, BASEPRI
   49498:	f383 8812 	msr	BASEPRI_MAX, r3
   4949c:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   494a0:	f06f 0301 	mvn.w	r3, #1
   494a4:	ebb3 080a 	subs.w	r8, r3, sl
   494a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   494ac:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   494b0:	f1b8 0f00 	cmp.w	r8, #0
   494b4:	f179 0100 	sbcs.w	r1, r9, #0
   494b8:	db1c      	blt.n	494f4 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   494ba:	4831      	ldr	r0, [pc, #196]	; (49580 <z_add_timeout+0x108>)
   494bc:	e9d0 1000 	ldrd	r1, r0, [r0]
   494c0:	1a5b      	subs	r3, r3, r1
   494c2:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   494c6:	ebb3 060a 	subs.w	r6, r3, sl
   494ca:	eb62 070b 	sbc.w	r7, r2, fp
   494ce:	2e01      	cmp	r6, #1
   494d0:	f177 0300 	sbcs.w	r3, r7, #0
   494d4:	bfbc      	itt	lt
   494d6:	2601      	movlt	r6, #1
   494d8:	2700      	movlt	r7, #0
   494da:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   494de:	4a29      	ldr	r2, [pc, #164]	; (49584 <z_add_timeout+0x10c>)
   494e0:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   494e4:	4293      	cmp	r3, r2
   494e6:	d120      	bne.n	4952a <z_add_timeout+0xb2>
	node->prev = tail;
   494e8:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   494ec:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   494f0:	6054      	str	r4, [r2, #4]
   494f2:	e02f      	b.n	49554 <z_add_timeout+0xdc>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   494f4:	f7ff ff74 	bl	493e0 <elapsed>
   494f8:	f11a 0301 	adds.w	r3, sl, #1
   494fc:	9300      	str	r3, [sp, #0]
   494fe:	f14b 0300 	adc.w	r3, fp, #0
   49502:	9301      	str	r3, [sp, #4]
   49504:	e9dd 2300 	ldrd	r2, r3, [sp]
   49508:	1812      	adds	r2, r2, r0
   4950a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   4950e:	4619      	mov	r1, r3
   49510:	4610      	mov	r0, r2
   49512:	e9c4 0104 	strd	r0, r1, [r4, #16]
   49516:	e7e2      	b.n	494de <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   49518:	ebb6 0008 	subs.w	r0, r6, r8
   4951c:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   49520:	4563      	cmp	r3, ip
   49522:	e9c4 0104 	strd	r0, r1, [r4, #16]
   49526:	d0df      	beq.n	494e8 <z_add_timeout+0x70>
   49528:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   4952a:	2b00      	cmp	r3, #0
   4952c:	d0dc      	beq.n	494e8 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   4952e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   49532:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   49536:	4546      	cmp	r6, r8
   49538:	eb77 0109 	sbcs.w	r1, r7, r9
   4953c:	daec      	bge.n	49518 <z_add_timeout+0xa0>
				t->dticks -= to->dticks;
   4953e:	ebb8 0006 	subs.w	r0, r8, r6
   49542:	eb69 0107 	sbc.w	r1, r9, r7
   49546:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   4954a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   4954c:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   49550:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   49552:	605c      	str	r4, [r3, #4]
	return list->head == list;
   49554:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   49556:	4293      	cmp	r3, r2
   49558:	d00b      	beq.n	49572 <z_add_timeout+0xfa>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   4955a:	429c      	cmp	r4, r3
   4955c:	d109      	bne.n	49572 <z_add_timeout+0xfa>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   4955e:	f7ff ff63 	bl	49428 <next_timeout>

			if (next_time == 0 ||
   49562:	b118      	cbz	r0, 4956c <z_add_timeout+0xf4>
			    _current_cpu->slice_ticks != next_time) {
   49564:	4b08      	ldr	r3, [pc, #32]	; (49588 <z_add_timeout+0x110>)
			if (next_time == 0 ||
   49566:	691b      	ldr	r3, [r3, #16]
   49568:	4283      	cmp	r3, r0
   4956a:	d002      	beq.n	49572 <z_add_timeout+0xfa>
				sys_clock_set_timeout(next_time, false);
   4956c:	2100      	movs	r1, #0
   4956e:	f7fc fed5 	bl	4631c <sys_clock_set_timeout>
	__asm__ volatile(
   49572:	f385 8811 	msr	BASEPRI, r5
   49576:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   4957a:	b003      	add	sp, #12
   4957c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49580:	20003ba8 	.word	0x20003ba8
   49584:	20000c78 	.word	0x20000c78
   49588:	20006b30 	.word	0x20006b30

0004958c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   4958c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49590:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   49592:	f7ff fc67 	bl	48e64 <z_time_slice>
	__asm__ volatile(
   49596:	f04f 0320 	mov.w	r3, #32
   4959a:	f3ef 8511 	mrs	r5, BASEPRI
   4959e:	f383 8812 	msr	BASEPRI_MAX, r3
   495a2:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   495a6:	4b2e      	ldr	r3, [pc, #184]	; (49660 <sys_clock_announce+0xd4>)
   495a8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 49664 <sys_clock_announce+0xd8>
	return list->head == list;
   495ac:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 49668 <sys_clock_announce+0xdc>
   495b0:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   495b2:	4698      	mov	r8, r3
   495b4:	46cb      	mov	fp, r9
   495b6:	f8da 4000 	ldr.w	r4, [sl]
   495ba:	f8d8 c000 	ldr.w	ip, [r8]
   495be:	e9d9 2300 	ldrd	r2, r3, [r9]
   495c2:	4666      	mov	r6, ip
	return sys_dlist_is_empty(list) ? NULL : list->head;
   495c4:	4554      	cmp	r4, sl
   495c6:	e9cd 2300 	strd	r2, r3, [sp]
   495ca:	ea4f 77e6 	mov.w	r7, r6, asr #31
   495ce:	d00c      	beq.n	495ea <sys_clock_announce+0x5e>
   495d0:	b15c      	cbz	r4, 495ea <sys_clock_announce+0x5e>
   495d2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   495d6:	458c      	cmp	ip, r1
   495d8:	eb77 0302 	sbcs.w	r3, r7, r2
   495dc:	da1c      	bge.n	49618 <sys_clock_announce+0x8c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   495de:	ebb1 000c 	subs.w	r0, r1, ip
   495e2:	eb62 0107 	sbc.w	r1, r2, r7
   495e6:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   495ea:	9b00      	ldr	r3, [sp, #0]
   495ec:	18f2      	adds	r2, r6, r3
   495ee:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   495f0:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
   495f4:	eb47 0303 	adc.w	r3, r7, r3
   495f8:	e9cb 2300 	strd	r2, r3, [fp]
	announce_remaining = 0;
   495fc:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   49600:	f7ff ff12 	bl	49428 <next_timeout>
   49604:	4621      	mov	r1, r4
   49606:	f7fc fe89 	bl	4631c <sys_clock_set_timeout>
	__asm__ volatile(
   4960a:	f385 8811 	msr	BASEPRI, r5
   4960e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   49612:	b003      	add	sp, #12
   49614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   49618:	e9dd 6700 	ldrd	r6, r7, [sp]
		announce_remaining -= dt;
   4961c:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   49620:	1876      	adds	r6, r6, r1
		t->dticks = 0;
   49622:	f04f 0200 	mov.w	r2, #0
   49626:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   4962a:	eb47 77e1 	adc.w	r7, r7, r1, asr #31
		announce_remaining -= dt;
   4962e:	f8c8 0000 	str.w	r0, [r8]
		t->dticks = 0;
   49632:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   49636:	4620      	mov	r0, r4
		curr_tick += dt;
   49638:	e9c9 6700 	strd	r6, r7, [r9]
		remove_timeout(t);
   4963c:	f7ff feda 	bl	493f4 <remove_timeout>
   49640:	f385 8811 	msr	BASEPRI, r5
   49644:	f3bf 8f6f 	isb	sy
		t->fn(t);
   49648:	68a3      	ldr	r3, [r4, #8]
   4964a:	4798      	blx	r3
	__asm__ volatile(
   4964c:	f04f 0320 	mov.w	r3, #32
   49650:	f3ef 8511 	mrs	r5, BASEPRI
   49654:	f383 8812 	msr	BASEPRI_MAX, r3
   49658:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   4965c:	e7ab      	b.n	495b6 <sys_clock_announce+0x2a>
   4965e:	bf00      	nop
   49660:	20006b6c 	.word	0x20006b6c
   49664:	20003ba8 	.word	0x20003ba8
   49668:	20000c78 	.word	0x20000c78

0004966c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   4966c:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
   49670:	f04f 0320 	mov.w	r3, #32
   49674:	f3ef 8411 	mrs	r4, BASEPRI
   49678:	f383 8812 	msr	BASEPRI_MAX, r3
   4967c:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   49680:	f7fc fe7e 	bl	46380 <sys_clock_elapsed>
   49684:	4b07      	ldr	r3, [pc, #28]	; (496a4 <sys_clock_tick_get+0x38>)
   49686:	e9d3 2300 	ldrd	r2, r3, [r3]
   4968a:	eb12 0b00 	adds.w	fp, r2, r0
   4968e:	f143 0c00 	adc.w	ip, r3, #0
   49692:	4658      	mov	r0, fp
   49694:	4661      	mov	r1, ip
	__asm__ volatile(
   49696:	f384 8811 	msr	BASEPRI, r4
   4969a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   4969e:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
   496a2:	bf00      	nop
   496a4:	20003ba8 	.word	0x20003ba8

000496a8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   496a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   496aa:	4604      	mov	r4, r0
	__asm__ volatile(
   496ac:	f04f 0320 	mov.w	r3, #32
   496b0:	f3ef 8511 	mrs	r5, BASEPRI
   496b4:	f383 8812 	msr	BASEPRI_MAX, r3
   496b8:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   496bc:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   496c0:	1c56      	adds	r6, r2, #1
   496c2:	f143 0700 	adc.w	r7, r3, #0
   496c6:	2f00      	cmp	r7, #0
   496c8:	bf08      	it	eq
   496ca:	2e02      	cmpeq	r6, #2
   496cc:	d302      	bcc.n	496d4 <z_timer_expiration_handler+0x2c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   496ce:	4917      	ldr	r1, [pc, #92]	; (4972c <z_timer_expiration_handler+0x84>)
   496d0:	f7ff fed2 	bl	49478 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   496d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   496d6:	3301      	adds	r3, #1
   496d8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   496da:	6a23      	ldr	r3, [r4, #32]
   496dc:	b173      	cbz	r3, 496fc <z_timer_expiration_handler+0x54>
	__asm__ volatile(
   496de:	f385 8811 	msr	BASEPRI, r5
   496e2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   496e6:	6a23      	ldr	r3, [r4, #32]
   496e8:	4620      	mov	r0, r4
   496ea:	4798      	blx	r3
	__asm__ volatile(
   496ec:	f04f 0320 	mov.w	r3, #32
   496f0:	f3ef 8511 	mrs	r5, BASEPRI
   496f4:	f383 8812 	msr	BASEPRI_MAX, r3
   496f8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   496fc:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   49700:	42a6      	cmp	r6, r4
   49702:	d000      	beq.n	49706 <z_timer_expiration_handler+0x5e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   49704:	b926      	cbnz	r6, 49710 <z_timer_expiration_handler+0x68>
	__asm__ volatile(
   49706:	f385 8811 	msr	BASEPRI, r5
   4970a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   4970e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   49710:	4630      	mov	r0, r6
   49712:	f007 fdb9 	bl	51288 <z_unpend_thread_no_timeout>
   49716:	2300      	movs	r3, #0
   49718:	67f3      	str	r3, [r6, #124]	; 0x7c
   4971a:	f385 8811 	msr	BASEPRI, r5
   4971e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   49722:	4630      	mov	r0, r6
}
   49724:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   49728:	f007 bdee 	b.w	51308 <z_ready_thread>
   4972c:	000496a9 	.word	0x000496a9

00049730 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   49730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   49734:	1c5f      	adds	r7, r3, #1
   49736:	bf08      	it	eq
   49738:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   4973c:	4604      	mov	r4, r0
   4973e:	4693      	mov	fp, r2
   49740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   49744:	469a      	mov	sl, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   49746:	d047      	beq.n	497d8 <z_impl_k_timer_start+0xa8>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   49748:	1c4e      	adds	r6, r1, #1
   4974a:	bf08      	it	eq
   4974c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   49750:	9001      	str	r0, [sp, #4]
   49752:	460d      	mov	r5, r1
   49754:	d01a      	beq.n	4978c <z_impl_k_timer_start+0x5c>
   49756:	ea50 0c01 	orrs.w	ip, r0, r1
   4975a:	d017      	beq.n	4978c <z_impl_k_timer_start+0x5c>
	    Z_TICK_ABS(period.ticks) < 0) {
   4975c:	f06f 0c01 	mvn.w	ip, #1
   49760:	ebbc 0800 	subs.w	r8, ip, r0
   49764:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   49768:	eb6c 0901 	sbc.w	r9, ip, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   4976c:	f1b8 0f00 	cmp.w	r8, #0
   49770:	f179 0c00 	sbcs.w	ip, r9, #0
   49774:	da0a      	bge.n	4978c <z_impl_k_timer_start+0x5c>
		period.ticks = MAX(period.ticks - 1, 1);
   49776:	2802      	cmp	r0, #2
   49778:	f171 0500 	sbcs.w	r5, r1, #0
   4977c:	bfbc      	itt	lt
   4977e:	2002      	movlt	r0, #2
   49780:	2100      	movlt	r1, #0
   49782:	f110 35ff 	adds.w	r5, r0, #4294967295	; 0xffffffff
   49786:	9501      	str	r5, [sp, #4]
   49788:	f141 35ff 	adc.w	r5, r1, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   4978c:	f06f 0101 	mvn.w	r1, #1
   49790:	1a8e      	subs	r6, r1, r2
   49792:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   49796:	eb61 0703 	sbc.w	r7, r1, r3
   4979a:	2e00      	cmp	r6, #0
   4979c:	f177 0100 	sbcs.w	r1, r7, #0
   497a0:	da09      	bge.n	497b6 <z_impl_k_timer_start+0x86>
		duration.ticks = MAX(duration.ticks - 1, 0);
   497a2:	2a01      	cmp	r2, #1
   497a4:	f173 0100 	sbcs.w	r1, r3, #0
   497a8:	bfbc      	itt	lt
   497aa:	2201      	movlt	r2, #1
   497ac:	2300      	movlt	r3, #0
   497ae:	f112 3bff 	adds.w	fp, r2, #4294967295	; 0xffffffff
   497b2:	f143 3aff 	adc.w	sl, r3, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   497b6:	4620      	mov	r0, r4
   497b8:	f007 fe5f 	bl	5147a <z_abort_timeout>
	timer->period = period;
   497bc:	9b01      	ldr	r3, [sp, #4]
	timer->status = 0U;

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   497be:	4908      	ldr	r1, [pc, #32]	; (497e0 <z_impl_k_timer_start+0xb0>)
	timer->period = period;
   497c0:	e9c4 350a 	strd	r3, r5, [r4, #40]	; 0x28
	timer->status = 0U;
   497c4:	2300      	movs	r3, #0
   497c6:	6323      	str	r3, [r4, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   497c8:	465a      	mov	r2, fp
   497ca:	4653      	mov	r3, sl
   497cc:	4620      	mov	r0, r4
		     duration);
}
   497ce:	b003      	add	sp, #12
   497d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   497d4:	f7ff be50 	b.w	49478 <z_add_timeout>
}
   497d8:	b003      	add	sp, #12
   497da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   497de:	bf00      	nop
   497e0:	000496a9 	.word	0x000496a9

000497e4 <k_poll_event_init>:
static int signal_poller(struct k_poll_event *event, uint32_t state);
static int signal_triggered_work(struct k_poll_event *event, uint32_t status);

void k_poll_event_init(struct k_poll_event *event, uint32_t type,
		       int mode, void *obj)
{
   497e4:	b510      	push	{r4, lr}
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
	__ASSERT(obj != NULL, "must provide an object\n");

	event->poller = NULL;
	/* event->tag is left uninitialized: the user will set it if needed */
	event->type = type;
   497e6:	7b44      	ldrb	r4, [r0, #13]
   497e8:	f361 0404 	bfi	r4, r1, #0, #5
	event->state = K_POLL_STATE_NOT_READY;
	event->mode = mode;
   497ec:	7b81      	ldrb	r1, [r0, #14]
	event->type = type;
   497ee:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   497f0:	f362 01c3 	bfi	r1, r2, #3, #1
   497f4:	7381      	strb	r1, [r0, #14]
	event->poller = NULL;
   497f6:	2200      	movs	r2, #0
	event->state = K_POLL_STATE_NOT_READY;
   497f8:	68c1      	ldr	r1, [r0, #12]
	event->poller = NULL;
   497fa:	6082      	str	r2, [r0, #8]
	event->state = K_POLL_STATE_NOT_READY;
   497fc:	4a02      	ldr	r2, [pc, #8]	; (49808 <k_poll_event_init+0x24>)
   497fe:	400a      	ands	r2, r1
	event->unused = 0U;
	event->obj = obj;
   49800:	e9c0 2303 	strd	r2, r3, [r0, #12]

	SYS_PORT_TRACING_FUNC(k_poll_api, event_init, event);
}
   49804:	bd10      	pop	{r4, pc}
   49806:	bf00      	nop
   49808:	00081fff 	.word	0x00081fff

0004980c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   4980c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   49810:	4699      	mov	r9, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   49812:	4b29      	ldr	r3, [pc, #164]	; (498b8 <z_impl_k_poll+0xac>)
   49814:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   49816:	2301      	movs	r3, #1
   49818:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   4981c:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   49820:	ea52 0309 	orrs.w	r3, r2, r9
{
   49824:	4690      	mov	r8, r2
	events_registered = register_events(events, num_events, poller,
   49826:	bf0c      	ite	eq
   49828:	2301      	moveq	r3, #1
   4982a:	2300      	movne	r3, #0
   4982c:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   49830:	4607      	mov	r7, r0
	events_registered = register_events(events, num_events, poller,
   49832:	f007 ff11 	bl	51658 <register_events>
   49836:	4682      	mov	sl, r0
	__asm__ volatile(
   49838:	f04f 0320 	mov.w	r3, #32
   4983c:	f3ef 8611 	mrs	r6, BASEPRI
   49840:	f383 8812 	msr	BASEPRI_MAX, r3
   49844:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   49848:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   4984c:	b964      	cbnz	r4, 49868 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   4984e:	4601      	mov	r1, r0
   49850:	4632      	mov	r2, r6
   49852:	4638      	mov	r0, r7
   49854:	f007 fea1 	bl	5159a <clear_event_registrations>
	__asm__ volatile(
   49858:	f386 8811 	msr	BASEPRI, r6
   4985c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   49860:	4620      	mov	r0, r4
   49862:	b002      	add	sp, #8
   49864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   49868:	2300      	movs	r3, #0
   4986a:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   4986e:	ea58 0309 	orrs.w	r3, r8, r9
   49872:	d106      	bne.n	49882 <z_impl_k_poll+0x76>
   49874:	f386 8811 	msr	BASEPRI, r6
   49878:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   4987c:	f06f 040a 	mvn.w	r4, #10
   49880:	e7ee      	b.n	49860 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   49882:	e9cd 8900 	strd	r8, r9, [sp]
   49886:	4a0d      	ldr	r2, [pc, #52]	; (498bc <z_impl_k_poll+0xb0>)
   49888:	480d      	ldr	r0, [pc, #52]	; (498c0 <z_impl_k_poll+0xb4>)
   4988a:	4631      	mov	r1, r6
   4988c:	f7ff fbba 	bl	49004 <z_pend_curr>
   49890:	4604      	mov	r4, r0
	__asm__ volatile(
   49892:	f04f 0320 	mov.w	r3, #32
   49896:	f3ef 8511 	mrs	r5, BASEPRI
   4989a:	f383 8812 	msr	BASEPRI_MAX, r3
   4989e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   498a2:	462a      	mov	r2, r5
   498a4:	4651      	mov	r1, sl
   498a6:	4638      	mov	r0, r7
   498a8:	f007 fe77 	bl	5159a <clear_event_registrations>
	__asm__ volatile(
   498ac:	f385 8811 	msr	BASEPRI, r5
   498b0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   498b4:	e7d4      	b.n	49860 <z_impl_k_poll+0x54>
   498b6:	bf00      	nop
   498b8:	20006b30 	.word	0x20006b30
   498bc:	20000c80 	.word	0x20000c80
   498c0:	20006dad 	.word	0x20006dad

000498c4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   498c4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   498c6:	f04f 0320 	mov.w	r3, #32
   498ca:	f3ef 8511 	mrs	r5, BASEPRI
   498ce:	f383 8812 	msr	BASEPRI_MAX, r3
   498d2:	f3bf 8f6f 	isb	sy
	return list->head == list;
   498d6:	6803      	ldr	r3, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   498d8:	60c1      	str	r1, [r0, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   498da:	4298      	cmp	r0, r3
	sig->signaled = 1U;
   498dc:	f04f 0101 	mov.w	r1, #1
   498e0:	6081      	str	r1, [r0, #8]
   498e2:	d106      	bne.n	498f2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   498e4:	f385 8811 	msr	BASEPRI, r5
   498e8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   498ec:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   498ee:	4620      	mov	r0, r4
   498f0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   498f2:	e9d3 2000 	ldrd	r2, r0, [r3]
	prev->next = next;
   498f6:	6002      	str	r2, [r0, #0]
	next->prev = prev;
   498f8:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   498fa:	2200      	movs	r2, #0
	node->prev = NULL;
   498fc:	e9c3 2200 	strd	r2, r2, [r3]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   49900:	4618      	mov	r0, r3
   49902:	f007 ff16 	bl	51732 <signal_poll_event>
	z_reschedule(&lock, key);
   49906:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   49908:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   4990a:	4802      	ldr	r0, [pc, #8]	; (49914 <z_impl_k_poll_signal_raise+0x50>)
   4990c:	f7ff fa2c 	bl	48d68 <z_reschedule>
	return rc;
   49910:	e7ed      	b.n	498ee <z_impl_k_poll_signal_raise+0x2a>
   49912:	bf00      	nop
   49914:	20006dad 	.word	0x20006dad

00049918 <k_aligned_alloc>:
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   49918:	460a      	mov	r2, r1
   4991a:	4601      	mov	r1, r0
   4991c:	4801      	ldr	r0, [pc, #4]	; (49924 <k_aligned_alloc+0xc>)
   4991e:	f007 bf72 	b.w	51806 <z_heap_aligned_alloc>
   49922:	bf00      	nop
   49924:	20000ed0 	.word	0x20000ed0

00049928 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   49928:	4b01      	ldr	r3, [pc, #4]	; (49930 <k_thread_system_pool_assign+0x8>)
   4992a:	6743      	str	r3, [r0, #116]	; 0x74
}
   4992c:	4770      	bx	lr
   4992e:	bf00      	nop
   49930:	20000ed0 	.word	0x20000ed0

00049934 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   49934:	b538      	push	{r3, r4, r5, lr}
   49936:	4604      	mov	r4, r0
   49938:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   4993a:	f007 fab2 	bl	50ea2 <k_is_in_isr>
   4993e:	b950      	cbnz	r0, 49956 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   49940:	4b06      	ldr	r3, [pc, #24]	; (4995c <z_thread_aligned_alloc+0x28>)
   49942:	689b      	ldr	r3, [r3, #8]
   49944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   49946:	b143      	cbz	r3, 4995a <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   49948:	462a      	mov	r2, r5
   4994a:	4621      	mov	r1, r4
   4994c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   4994e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   49952:	f007 bf58 	b.w	51806 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   49956:	4b02      	ldr	r3, [pc, #8]	; (49960 <z_thread_aligned_alloc+0x2c>)
   49958:	e7f6      	b.n	49948 <z_thread_aligned_alloc+0x14>
}
   4995a:	bd38      	pop	{r3, r4, r5, pc}
   4995c:	20006b30 	.word	0x20006b30
   49960:	20000ed0 	.word	0x20000ed0

00049964 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   49964:	4770      	bx	lr

00049966 <strlcpy>:
 *
 * Nathan Myers <ncm-nospam@cantrip.org>, 2003/06/03
 * Placed in the public domain.
 */

size_t strlcpy(char *dst, const char *src, size_t size) {
   49966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   49968:	4606      	mov	r6, r0
    const size_t len = strlen(src);
   4996a:	4608      	mov	r0, r1
size_t strlcpy(char *dst, const char *src, size_t size) {
   4996c:	460f      	mov	r7, r1
   4996e:	4614      	mov	r4, r2
    const size_t len = strlen(src);
   49970:	f002 fc8a 	bl	4c288 <strlen>
   49974:	4605      	mov	r5, r0
    if (size != 0) {
   49976:	b154      	cbz	r4, 4998e <strlcpy+0x28>
        memcpy(dst, src, (len > size - 1) ? size - 1 : len);
   49978:	3c01      	subs	r4, #1
   4997a:	4284      	cmp	r4, r0
   4997c:	4622      	mov	r2, r4
   4997e:	4639      	mov	r1, r7
   49980:	bf28      	it	cs
   49982:	4602      	movcs	r2, r0
   49984:	4630      	mov	r0, r6
   49986:	f002 fcb1 	bl	4c2ec <memcpy>
        dst[size - 1] = 0;
   4998a:	2300      	movs	r3, #0
   4998c:	5533      	strb	r3, [r6, r4]
    }
    return len;
}
   4998e:	4628      	mov	r0, r5
   49990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00049992 <zmk_hid_register_mods>:
int zmk_hid_register_mods(zmk_mod_flags_t modifiers) {
   49992:	2100      	movs	r1, #0
   49994:	b538      	push	{r3, r4, r5, lr}
   49996:	4605      	mov	r5, r0
    int ret = 0;
   49998:	460c      	mov	r4, r1
        if (modifiers & (1 << i)) {
   4999a:	fa45 f301 	asr.w	r3, r5, r1
   4999e:	07db      	lsls	r3, r3, #31
   499a0:	b2c8      	uxtb	r0, r1
   499a2:	d502      	bpl.n	499aa <zmk_hid_register_mods+0x18>
            ret += zmk_hid_register_mod(i);
   499a4:	f7df fb58 	bl	29058 <zmk_hid_register_mod>
   499a8:	4404      	add	r4, r0
   499aa:	3101      	adds	r1, #1
    for (zmk_mod_t i = 0; i < 8; i++) {
   499ac:	2908      	cmp	r1, #8
   499ae:	d1f4      	bne.n	4999a <zmk_hid_register_mods+0x8>
}
   499b0:	4620      	mov	r0, r4
   499b2:	bd38      	pop	{r3, r4, r5, pc}

000499b4 <zmk_hid_unregister_mods>:
int zmk_hid_unregister_mods(zmk_mod_flags_t modifiers) {
   499b4:	b570      	push	{r4, r5, r6, lr}
   499b6:	2400      	movs	r4, #0
   499b8:	4606      	mov	r6, r0
    int ret = 0;
   499ba:	4625      	mov	r5, r4
        if (modifiers & (1 << i)) {
   499bc:	fa46 f304 	asr.w	r3, r6, r4
   499c0:	07db      	lsls	r3, r3, #31
   499c2:	b2e0      	uxtb	r0, r4
   499c4:	d502      	bpl.n	499cc <zmk_hid_unregister_mods+0x18>
            ret += zmk_hid_unregister_mod(i);
   499c6:	f7df fb63 	bl	29090 <zmk_hid_unregister_mod>
   499ca:	4405      	add	r5, r0
   499cc:	3401      	adds	r4, #1
    for (zmk_mod_t i = 0; i < 8; i++) {
   499ce:	2c08      	cmp	r4, #8
   499d0:	d1f4      	bne.n	499bc <zmk_hid_unregister_mods+0x8>
}
   499d2:	4628      	mov	r0, r5
   499d4:	bd70      	pop	{r4, r5, r6, pc}

000499d6 <zmk_event_manager_raise>:

int zmk_event_manager_raise(zmk_event_t *event) { return zmk_event_manager_handle_from(event, 0); }
   499d6:	2100      	movs	r1, #0
   499d8:	f7df bc0a 	b.w	291f0 <zmk_event_manager_handle_from>

000499dc <gpio_pin_set_raw>:
	if (value != 0)	{
   499dc:	2301      	movs	r3, #1
{
   499de:	b410      	push	{r4}
   499e0:	fa03 f101 	lsl.w	r1, r3, r1
	if (value != 0)	{
   499e4:	b11a      	cbz	r2, 499ee <gpio_pin_set_raw+0x12>
	return api->port_set_bits_raw(port, pins);
   499e6:	6883      	ldr	r3, [r0, #8]
   499e8:	68db      	ldr	r3, [r3, #12]
}
   499ea:	bc10      	pop	{r4}
	return api->port_clear_bits_raw(port, pins);
   499ec:	4718      	bx	r3
   499ee:	6883      	ldr	r3, [r0, #8]
   499f0:	691b      	ldr	r3, [r3, #16]
   499f2:	e7fa      	b.n	499ea <gpio_pin_set_raw+0xe>

000499f4 <ext_power_generic_get>:
    return data->status;
   499f4:	6903      	ldr	r3, [r0, #16]
}
   499f6:	7918      	ldrb	r0, [r3, #4]
   499f8:	4770      	bx	lr

000499fa <ext_power_generic_enable>:
static int ext_power_generic_enable(const struct device *dev) {
   499fa:	b538      	push	{r3, r4, r5, lr}
    struct ext_power_generic_data *data = dev->data;
   499fc:	6904      	ldr	r4, [r0, #16]
    if (gpio_pin_set(data->gpio, config->pin, 1)) {
   499fe:	6842      	ldr	r2, [r0, #4]
   49a00:	6823      	ldr	r3, [r4, #0]
   49a02:	7911      	ldrb	r1, [r2, #4]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   49a04:	691a      	ldr	r2, [r3, #16]
   49a06:	2501      	movs	r5, #1
   49a08:	6812      	ldr	r2, [r2, #0]
   49a0a:	fa05 f001 	lsl.w	r0, r5, r1
   49a0e:	4210      	tst	r0, r2
	return gpio_pin_set_raw(port, pin, value);
   49a10:	bf0c      	ite	eq
   49a12:	462a      	moveq	r2, r5
   49a14:	2200      	movne	r2, #0
   49a16:	4618      	mov	r0, r3
   49a18:	f7ff ffe0 	bl	499dc <gpio_pin_set_raw>
   49a1c:	b920      	cbnz	r0, 49a28 <ext_power_generic_enable+0x2e>
    data->status = true;
   49a1e:	7125      	strb	r5, [r4, #4]
}
   49a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return ext_power_save_state();
   49a24:	f7df bc90 	b.w	29348 <ext_power_save_state>
}
   49a28:	f06f 0004 	mvn.w	r0, #4
   49a2c:	bd38      	pop	{r3, r4, r5, pc}

00049a2e <ext_power_generic_disable>:
static int ext_power_generic_disable(const struct device *dev) {
   49a2e:	b510      	push	{r4, lr}
    struct ext_power_generic_data *data = dev->data;
   49a30:	6904      	ldr	r4, [r0, #16]
static int ext_power_generic_disable(const struct device *dev) {
   49a32:	4603      	mov	r3, r0
    if (gpio_pin_set(data->gpio, config->pin, 0)) {
   49a34:	6820      	ldr	r0, [r4, #0]
   49a36:	685b      	ldr	r3, [r3, #4]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   49a38:	6902      	ldr	r2, [r0, #16]
   49a3a:	7919      	ldrb	r1, [r3, #4]
   49a3c:	6812      	ldr	r2, [r2, #0]
   49a3e:	2301      	movs	r3, #1
   49a40:	408b      	lsls	r3, r1
   49a42:	4213      	tst	r3, r2
	return gpio_pin_set_raw(port, pin, value);
   49a44:	bf14      	ite	ne
   49a46:	2201      	movne	r2, #1
   49a48:	2200      	moveq	r2, #0
   49a4a:	f7ff ffc7 	bl	499dc <gpio_pin_set_raw>
   49a4e:	b920      	cbnz	r0, 49a5a <ext_power_generic_disable+0x2c>
    data->status = false;
   49a50:	7120      	strb	r0, [r4, #4]
}
   49a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return ext_power_save_state();
   49a56:	f7df bc77 	b.w	29348 <ext_power_save_state>
}
   49a5a:	f06f 0004 	mvn.w	r0, #4
   49a5e:	bd10      	pop	{r4, pc}

00049a60 <ext_power_generic_pm_action>:

#ifdef CONFIG_PM_DEVICE
static int ext_power_generic_pm_action(const struct device *dev, enum pm_device_action action) {
    switch (action) {
   49a60:	2902      	cmp	r1, #2
static int ext_power_generic_pm_action(const struct device *dev, enum pm_device_action action) {
   49a62:	b508      	push	{r3, lr}
    switch (action) {
   49a64:	d005      	beq.n	49a72 <ext_power_generic_pm_action+0x12>
   49a66:	2903      	cmp	r1, #3
   49a68:	d106      	bne.n	49a78 <ext_power_generic_pm_action+0x18>
    case PM_DEVICE_ACTION_TURN_ON:
        ext_power_generic_enable(dev);
   49a6a:	f7ff ffc6 	bl	499fa <ext_power_generic_enable>
        return 0;
    case PM_DEVICE_ACTION_TURN_OFF:
        ext_power_generic_disable(dev);
        return 0;
   49a6e:	2000      	movs	r0, #0
    default:
        return -ENOTSUP;
    }
}
   49a70:	bd08      	pop	{r3, pc}
        ext_power_generic_disable(dev);
   49a72:	f7ff ffdc 	bl	49a2e <ext_power_generic_disable>
   49a76:	e7fa      	b.n	49a6e <ext_power_generic_pm_action+0xe>
        return -ENOTSUP;
   49a78:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49a7c:	e7f8      	b.n	49a70 <ext_power_generic_pm_action+0x10>

00049a7e <behavior_reset_init>:
#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)
struct behavior_reset_config {
    int type;
};

static int behavior_reset_init(const struct device *dev) { return 0; };
   49a7e:	2000      	movs	r0, #0
   49a80:	4770      	bx	lr

00049a82 <on_keymap_binding_pressed>:

static int on_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                     struct zmk_behavior_binding_event event) {
   49a82:	b082      	sub	sp, #8
   49a84:	b508      	push	{r3, lr}
   49a86:	a902      	add	r1, sp, #8
   49a88:	e881 000c 	stmia.w	r1, {r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49a8c:	6800      	ldr	r0, [r0, #0]
   49a8e:	f7fe fb41 	bl	48114 <z_impl_device_get_binding>
    const struct behavior_reset_config *cfg = dev->config;

    // TODO: Correct magic code for going into DFU?
    // See
    // https://github.com/adafruit/Adafruit_nRF52_Bootloader/blob/d6b28e66053eea467166f44875e3c7ec741cb471/src/main.c#L107
    sys_reboot(cfg->type);
   49a92:	6843      	ldr	r3, [r0, #4]
   49a94:	6818      	ldr	r0, [r3, #0]
   49a96:	f7e1 f8ff 	bl	2ac98 <sys_reboot>

00049a9a <ext_power_enable>:
    if (api->enable == NULL) {
   49a9a:	6883      	ldr	r3, [r0, #8]
   49a9c:	681b      	ldr	r3, [r3, #0]
   49a9e:	b103      	cbz	r3, 49aa2 <ext_power_enable+0x8>
    return api->enable(dev);
   49aa0:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_enable(dev);
}
   49aa2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49aa6:	4770      	bx	lr

00049aa8 <ext_power_disable>:
__syscall int ext_power_disable(const struct device *dev);

static inline int z_impl_ext_power_disable(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->disable == NULL) {
   49aa8:	6883      	ldr	r3, [r0, #8]
   49aaa:	685b      	ldr	r3, [r3, #4]
   49aac:	b103      	cbz	r3, 49ab0 <ext_power_disable+0x8>
        return -ENOTSUP;
    }

    return api->disable(dev);
   49aae:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_DISABLE);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_disable(dev);
}
   49ab0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49ab4:	4770      	bx	lr

00049ab6 <ext_power_get>:
__syscall int ext_power_get(const struct device *dev);

static inline int z_impl_ext_power_get(const struct device *dev) {
    const struct ext_power_api *api = (const struct ext_power_api *)dev->api;

    if (api->get == NULL) {
   49ab6:	6883      	ldr	r3, [r0, #8]
   49ab8:	689b      	ldr	r3, [r3, #8]
   49aba:	b103      	cbz	r3, 49abe <ext_power_get+0x8>
        return -ENOTSUP;
    }

    return api->get(dev);
   49abc:	4718      	bx	r3
		return (int) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_EXT_POWER_GET);
	}
#endif
	compiler_barrier();
	return z_impl_ext_power_get(dev);
}
   49abe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49ac2:	4770      	bx	lr

00049ac4 <on_keymap_binding_released>:

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   49ac4:	b082      	sub	sp, #8
   49ac6:	e88d 000c 	stmia.w	sp, {r2, r3}
    return ZMK_BEHAVIOR_OPAQUE;
}
   49aca:	2000      	movs	r0, #0
   49acc:	b002      	add	sp, #8
   49ace:	4770      	bx	lr

00049ad0 <behavior_ext_power_init>:

static int behavior_ext_power_init(const struct device *dev) { return 0; };
   49ad0:	2000      	movs	r0, #0
   49ad2:	4770      	bx	lr

00049ad4 <behavior_key_press_init>:
#include <zmk/events/keycode_state_changed.h>
#include <zmk/behavior.h>

LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

static int behavior_key_press_init(const struct device *dev) { return 0; };
   49ad4:	2000      	movs	r0, #0
   49ad6:	4770      	bx	lr

00049ad8 <zmk_keycode_state_changed_from_encoded>:
};

ZMK_EVENT_DECLARE(zmk_keycode_state_changed);

static inline struct zmk_keycode_state_changed_event *
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   49ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
   49ada:	b285      	uxth	r5, r0
   49adc:	461f      	mov	r7, r3
    uint16_t page = ZMK_HID_USAGE_PAGE(encoded) & 0xFF;
   49ade:	f3c0 4307 	ubfx	r3, r0, #16, #8
    uint16_t id = ZMK_HID_USAGE_ID(encoded);
    uint8_t implicit_modifiers = 0x00;
    uint8_t explicit_modifiers = 0x00;

    if (!page) {
   49ae2:	2b00      	cmp	r3, #0
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   49ae4:	4616      	mov	r6, r2
    zmk_key_t key;
    bool pressed;
};

static inline bool is_mod(uint8_t usage_page, uint32_t keycode) {
    return (keycode >= HID_USAGE_KEY_KEYBOARD_LEFTCONTROL &&
   49ae6:	f1a5 02e0 	sub.w	r2, r5, #224	; 0xe0
        page = HID_USAGE_KEY;
   49aea:	bf08      	it	eq
   49aec:	2307      	moveq	r3, #7
            keycode <= HID_USAGE_KEY_KEYBOARD_RIGHT_GUI && usage_page == HID_USAGE_KEY);
   49aee:	2a07      	cmp	r2, #7
zmk_keycode_state_changed_from_encoded(uint32_t encoded, bool pressed, int64_t timestamp) {
   49af0:	b089      	sub	sp, #36	; 0x24
   49af2:	ea4f 6010 	mov.w	r0, r0, lsr #24
   49af6:	d801      	bhi.n	49afc <zmk_keycode_state_changed_from_encoded+0x24>
    }

    if (is_mod(page, id)) {
   49af8:	2b07      	cmp	r3, #7
   49afa:	d016      	beq.n	49b2a <zmk_keycode_state_changed_from_encoded+0x52>
    uint8_t explicit_modifiers = 0x00;
   49afc:	2400      	movs	r4, #0
    } else {
        implicit_modifiers = SELECT_MODS(encoded);
    }

    return new_zmk_keycode_state_changed(
        (struct zmk_keycode_state_changed){.usage_page = page,
   49afe:	e9cd 6706 	strd	r6, r7, [sp, #24]
   49b02:	f8ad 3008 	strh.w	r3, [sp, #8]
    return new_zmk_keycode_state_changed(
   49b06:	ab08      	add	r3, sp, #32
        (struct zmk_keycode_state_changed){.usage_page = page,
   49b08:	f88d 0010 	strb.w	r0, [sp, #16]
   49b0c:	f88d 1012 	strb.w	r1, [sp, #18]
    return new_zmk_keycode_state_changed(
   49b10:	e913 0003 	ldmdb	r3, {r0, r1}
   49b14:	e88d 0003 	stmia.w	sp, {r0, r1}
        (struct zmk_keycode_state_changed){.usage_page = page,
   49b18:	9503      	str	r5, [sp, #12]
   49b1a:	f88d 4011 	strb.w	r4, [sp, #17]
    return new_zmk_keycode_state_changed(
   49b1e:	ab02      	add	r3, sp, #8
   49b20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   49b22:	f7df fc95 	bl	29450 <new_zmk_keycode_state_changed>
                                           .keycode = id,
                                           .implicit_modifiers = implicit_modifiers,
                                           .explicit_modifiers = explicit_modifiers,
                                           .state = pressed,
                                           .timestamp = timestamp});
}
   49b26:	b009      	add	sp, #36	; 0x24
   49b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        explicit_modifiers = SELECT_MODS(encoded);
   49b2a:	4604      	mov	r4, r0
    uint8_t implicit_modifiers = 0x00;
   49b2c:	2000      	movs	r0, #0
   49b2e:	e7e6      	b.n	49afe <zmk_keycode_state_changed_from_encoded+0x26>

00049b30 <on_keymap_binding_released>:
    return ZMK_EVENT_RAISE(
        zmk_keycode_state_changed_from_encoded(binding->param1, true, event.timestamp));
}

static int on_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   49b30:	b082      	sub	sp, #8
   49b32:	b508      	push	{r3, lr}
   49b34:	a902      	add	r1, sp, #8
   49b36:	e881 000c 	stmia.w	r1, {r2, r3}
    LOG_DBG("position %d keycode 0x%02X", event.position, binding->param1);
    return ZMK_EVENT_RAISE(
   49b3a:	6840      	ldr	r0, [r0, #4]
   49b3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   49b40:	2100      	movs	r1, #0
   49b42:	f7ff ffc9 	bl	49ad8 <zmk_keycode_state_changed_from_encoded>
        zmk_keycode_state_changed_from_encoded(binding->param1, false, event.timestamp));
}
   49b46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   49b4a:	b002      	add	sp, #8
    return ZMK_EVENT_RAISE(
   49b4c:	f7ff bf43 	b.w	499d6 <zmk_event_manager_raise>

00049b50 <on_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   49b50:	b082      	sub	sp, #8
   49b52:	b508      	push	{r3, lr}
   49b54:	a902      	add	r1, sp, #8
   49b56:	e881 000c 	stmia.w	r1, {r2, r3}
    return ZMK_EVENT_RAISE(
   49b5a:	6840      	ldr	r0, [r0, #4]
   49b5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   49b60:	2101      	movs	r1, #1
   49b62:	f7ff ffb9 	bl	49ad8 <zmk_keycode_state_changed_from_encoded>
}
   49b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   49b6a:	b002      	add	sp, #8
    return ZMK_EVENT_RAISE(
   49b6c:	f7ff bf33 	b.w	499d6 <zmk_event_manager_raise>

00049b70 <behavior_mo_init>:
LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);

struct behavior_mo_config {};
struct behavior_mo_data {};

static int behavior_mo_init(const struct device *dev) { return 0; };
   49b70:	2000      	movs	r0, #0
   49b72:	4770      	bx	lr

00049b74 <mo_keymap_binding_released>:
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return zmk_keymap_layer_activate(binding->param1);
}

static int mo_keymap_binding_released(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
   49b74:	b082      	sub	sp, #8
   49b76:	e88d 000c 	stmia.w	sp, {r2, r3}
    LOG_DBG("position %d layer %d", event.position, binding->param1);
    return zmk_keymap_layer_deactivate(binding->param1);
   49b7a:	7900      	ldrb	r0, [r0, #4]
}
   49b7c:	b002      	add	sp, #8
    return zmk_keymap_layer_deactivate(binding->param1);
   49b7e:	f7df bd29 	b.w	295d4 <zmk_keymap_layer_deactivate>

00049b82 <mo_keymap_binding_pressed>:
                                     struct zmk_behavior_binding_event event) {
   49b82:	b082      	sub	sp, #8
   49b84:	e88d 000c 	stmia.w	sp, {r2, r3}
    return zmk_keymap_layer_activate(binding->param1);
   49b88:	7900      	ldrb	r0, [r0, #4]
}
   49b8a:	b002      	add	sp, #8
    return zmk_keymap_layer_activate(binding->param1);
   49b8c:	f7df bd0a 	b.w	295a4 <zmk_keymap_layer_activate>

00049b90 <create_layer_state_changed>:
};

ZMK_EVENT_DECLARE(zmk_layer_state_changed);

static inline struct zmk_layer_state_changed_event *create_layer_state_changed(uint8_t layer,
                                                                               bool state) {
   49b90:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   49b94:	b085      	sub	sp, #20
    return new_zmk_layer_state_changed((struct zmk_layer_state_changed){
   49b96:	f88d 0000 	strb.w	r0, [sp]
   49b9a:	f88d 1001 	strb.w	r1, [sp, #1]
	return z_impl_k_uptime_ticks();
   49b9e:	f007 fcb0 	bl	51502 <z_impl_k_uptime_ticks>
   49ba2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   49ba6:	fba0 bc04 	umull	fp, ip, r0, r4
   49baa:	fb04 cc01 	mla	ip, r4, r1, ip
   49bae:	ea4f 32db 	mov.w	r2, fp, lsr #15
   49bb2:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
   49bb6:	ea4f 33dc 	mov.w	r3, ip, lsr #15
   49bba:	e9cd 2302 	strd	r2, r3, [sp, #8]
   49bbe:	ab04      	add	r3, sp, #16
   49bc0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
        .layer = layer, .state = state, .timestamp = k_uptime_get()});
}
   49bc4:	b005      	add	sp, #20
   49bc6:	e8bd 4810 	ldmia.w	sp!, {r4, fp, lr}
    return new_zmk_layer_state_changed((struct zmk_layer_state_changed){
   49bca:	f7df bc2b 	b.w	29424 <new_zmk_layer_state_changed>

00049bce <zmk_keymap_layer_active_with_state>:
    return (state_to_test & (BIT(layer))) == (BIT(layer)) || layer == _zmk_keymap_layer_default;
   49bce:	2301      	movs	r3, #1
   49bd0:	fa03 f200 	lsl.w	r2, r3, r0
   49bd4:	438a      	bics	r2, r1
   49bd6:	bf1a      	itte	ne
   49bd8:	fab0 f080 	clzne	r0, r0
   49bdc:	0940      	lsrne	r0, r0, #5
   49bde:	4618      	moveq	r0, r3
};
   49be0:	4770      	bx	lr

00049be2 <invoke_locally>:
                   bool pressed) {
   49be2:	b082      	sub	sp, #8
   49be4:	b570      	push	{r4, r5, r6, lr}
   49be6:	b088      	sub	sp, #32
   49be8:	a90c      	add	r1, sp, #48	; 0x30
   49bea:	e881 000c 	stmia.w	r1, {r2, r3}
   49bee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   49bf2:	4606      	mov	r6, r0
   49bf4:	466c      	mov	r4, sp
   49bf6:	ad04      	add	r5, sp, #16
    if (pressed) {
   49bf8:	b1e3      	cbz	r3, 49c34 <invoke_locally+0x52>
        return behavior_keymap_binding_pressed(binding, event);
   49bfa:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   49bfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_PRESSED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_pressed(binding, event);
   49c00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   49c04:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
__syscall int behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                              struct zmk_behavior_binding_event event);

static inline int z_impl_behavior_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                                         struct zmk_behavior_binding_event event) {
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49c08:	6830      	ldr	r0, [r6, #0]
   49c0a:	f7fe fa83 	bl	48114 <z_impl_device_get_binding>

    if (dev == NULL) {
   49c0e:	b300      	cbz	r0, 49c52 <invoke_locally+0x70>
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_pressed == NULL) {
   49c10:	6883      	ldr	r3, [r0, #8]
   49c12:	689c      	ldr	r4, [r3, #8]
        return -EINVAL;
    }

    const struct behavior_driver_api *api = (const struct behavior_driver_api *)dev->api;

    if (api->binding_released == NULL) {
   49c14:	b324      	cbz	r4, 49c60 <invoke_locally+0x7e>
        return -ENOTSUP;
    }

    return api->binding_released(binding, event);
   49c16:	aa08      	add	r2, sp, #32
   49c18:	e912 0003 	ldmdb	r2, {r0, r1}
   49c1c:	ab0e      	add	r3, sp, #56	; 0x38
   49c1e:	e883 0003 	stmia.w	r3, {r0, r1}
   49c22:	e895 000c 	ldmia.w	r5, {r2, r3}
   49c26:	4630      	mov	r0, r6
   49c28:	4621      	mov	r1, r4
}
   49c2a:	b008      	add	sp, #32
   49c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   49c30:	b002      	add	sp, #8
   49c32:	4708      	bx	r1
        return behavior_keymap_binding_released(binding, event);
   49c34:	ab0c      	add	r3, sp, #48	; 0x30
   49c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   49c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&binding, *(uintptr_t *)&event, K_SYSCALL_BEHAVIOR_KEYMAP_BINDING_RELEASED);
	}
#endif
	compiler_barrier();
	return z_impl_behavior_keymap_binding_released(binding, event);
   49c3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   49c40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    const struct device *dev = device_get_binding(binding->behavior_dev);
   49c44:	6830      	ldr	r0, [r6, #0]
   49c46:	f7fe fa65 	bl	48114 <z_impl_device_get_binding>
    if (dev == NULL) {
   49c4a:	b110      	cbz	r0, 49c52 <invoke_locally+0x70>
    if (api->binding_released == NULL) {
   49c4c:	6883      	ldr	r3, [r0, #8]
   49c4e:	68dc      	ldr	r4, [r3, #12]
   49c50:	e7e0      	b.n	49c14 <invoke_locally+0x32>
        return -EINVAL;
   49c52:	f06f 0015 	mvn.w	r0, #21
}
   49c56:	b008      	add	sp, #32
   49c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   49c5c:	b002      	add	sp, #8
   49c5e:	4770      	bx	lr
        return -ENOTSUP;
   49c60:	f06f 0085 	mvn.w	r0, #133	; 0x85
        return behavior_keymap_binding_released(binding, event);
   49c64:	e7f7      	b.n	49c56 <invoke_locally+0x74>

00049c66 <keymap_listener>:
    return -ENOTSUP;
}

#endif /* ZMK_KEYMAP_HAS_SENSORS */

int keymap_listener(const zmk_event_t *eh) {
   49c66:	b537      	push	{r0, r1, r2, r4, r5, lr}
    const struct zmk_position_state_changed *pos_ev;
    if ((pos_ev = as_zmk_position_state_changed(eh)) != NULL) {
   49c68:	f7df fbd2 	bl	29410 <as_zmk_position_state_changed>
   49c6c:	4603      	mov	r3, r0
   49c6e:	b150      	cbz	r0, 49c86 <keymap_listener+0x20>
        return zmk_keymap_position_state_changed(pos_ev->source, pos_ev->position, pos_ev->state,
   49c70:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
   49c74:	7a02      	ldrb	r2, [r0, #8]
   49c76:	7800      	ldrb	r0, [r0, #0]
   49c78:	e9cd 4500 	strd	r4, r5, [sp]
   49c7c:	6859      	ldr	r1, [r3, #4]
   49c7e:	f7df fd43 	bl	29708 <zmk_keymap_position_state_changed>
                                           sensor_ev->timestamp);
    }
#endif /* ZMK_KEYMAP_HAS_SENSORS */

    return -ENOTSUP;
}
   49c82:	b003      	add	sp, #12
   49c84:	bd30      	pop	{r4, r5, pc}
    return -ENOTSUP;
   49c86:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49c8a:	e7fa      	b.n	49c82 <keymap_listener+0x1c>

00049c8c <raise_profile_changed_event_callback>:
    raise_profile_changed_event();
   49c8c:	f7df bd68 	b.w	29760 <raise_profile_changed_event>

00049c90 <le_param_updated>:
                             uint16_t timeout) {
   49c90:	b500      	push	{lr}
   49c92:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   49c94:	f003 fb9f 	bl	4d3d6 <bt_conn_get_dst>
   49c98:	4669      	mov	r1, sp
   49c9a:	f7df fd83 	bl	297a4 <bt_addr_le_to_str.constprop.5>
}
   49c9e:	b009      	add	sp, #36	; 0x24
   49ca0:	f85d fb04 	ldr.w	pc, [sp], #4

00049ca4 <security_changed>:
static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
   49ca4:	b500      	push	{lr}
   49ca6:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   49ca8:	f003 fb95 	bl	4d3d6 <bt_conn_get_dst>
   49cac:	4669      	mov	r1, sp
   49cae:	f7df fd79 	bl	297a4 <bt_addr_le_to_str.constprop.5>
}
   49cb2:	b009      	add	sp, #36	; 0x24
   49cb4:	f85d fb04 	ldr.w	pc, [sp], #4

00049cb8 <auth_cancel>:
static void auth_cancel(struct bt_conn *conn) {
   49cb8:	b500      	push	{lr}
   49cba:	b089      	sub	sp, #36	; 0x24
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   49cbc:	f003 fb8b 	bl	4d3d6 <bt_conn_get_dst>
   49cc0:	4669      	mov	r1, sp
   49cc2:	f7df fd6f 	bl	297a4 <bt_addr_le_to_str.constprop.5>
}
   49cc6:	b009      	add	sp, #36	; 0x24
   49cc8:	f85d fb04 	ldr.w	pc, [sp], #4

00049ccc <auth_pairing_accept>:
                                                const struct bt_conn_pairing_feat *const feat) {
   49ccc:	b500      	push	{lr}
   49cce:	b089      	sub	sp, #36	; 0x24
    bt_conn_get_info(conn, &info);
   49cd0:	4669      	mov	r1, sp
   49cd2:	f7e6 f957 	bl	2ff84 <bt_conn_get_info>
    if (info.role == BT_CONN_ROLE_PERIPHERAL && !zmk_ble_active_profile_is_open()) {
   49cd6:	f89d 3001 	ldrb.w	r3, [sp, #1]
   49cda:	2b01      	cmp	r3, #1
   49cdc:	d003      	beq.n	49ce6 <auth_pairing_accept+0x1a>
    return BT_SECURITY_ERR_SUCCESS;
   49cde:	2000      	movs	r0, #0
};
   49ce0:	b009      	add	sp, #36	; 0x24
   49ce2:	f85d fb04 	ldr.w	pc, [sp], #4
    if (info.role == BT_CONN_ROLE_PERIPHERAL && !zmk_ble_active_profile_is_open()) {
   49ce6:	f7df fe2d 	bl	29944 <zmk_ble_active_profile_is_open>
   49cea:	2800      	cmp	r0, #0
   49cec:	d1f7      	bne.n	49cde <auth_pairing_accept+0x12>
        return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   49cee:	2006      	movs	r0, #6
   49cf0:	e7f6      	b.n	49ce0 <auth_pairing_accept+0x14>

00049cf2 <update_advertising_callback>:
static void update_advertising_callback(struct k_work *work) { update_advertising(); }
   49cf2:	f7df be8f 	b.w	29a14 <update_advertising>

00049cf6 <release_peripheral_slot_for_conn>:
int release_peripheral_slot_for_conn(struct bt_conn *conn) {
   49cf6:	b508      	push	{r3, lr}
   49cf8:	f7df fff6 	bl	29ce8 <peripheral_slot_index_for_conn.part.0>
    if (idx < 0) {
   49cfc:	2800      	cmp	r0, #0
   49cfe:	db03      	blt.n	49d08 <release_peripheral_slot_for_conn+0x12>
}
   49d00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return release_peripheral_slot(idx);
   49d04:	f7e0 ba12 	b.w	2a12c <release_peripheral_slot>
}
   49d08:	bd08      	pop	{r3, pc}

00049d0a <split_central_disconnected>:
static void split_central_disconnected(struct bt_conn *conn, uint8_t reason) {
   49d0a:	b510      	push	{r4, lr}
   49d0c:	b088      	sub	sp, #32
   49d0e:	4604      	mov	r4, r0
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   49d10:	f003 fb61 	bl	4d3d6 <bt_conn_get_dst>
   49d14:	4669      	mov	r1, sp
   49d16:	f7df fff1 	bl	29cfc <bt_addr_le_to_str.constprop.7>
    err = release_peripheral_slot_for_conn(conn);
   49d1a:	4620      	mov	r0, r4
   49d1c:	f7ff ffeb 	bl	49cf6 <release_peripheral_slot_for_conn>
    if (err < 0) {
   49d20:	2800      	cmp	r0, #0
   49d22:	db01      	blt.n	49d28 <split_central_disconnected+0x1e>
    start_scan();
   49d24:	f7df ffb6 	bl	29c94 <start_scan>
}
   49d28:	b008      	add	sp, #32
   49d2a:	bd10      	pop	{r4, pc}

00049d2c <split_central_connected>:
static void split_central_connected(struct bt_conn *conn, uint8_t conn_err) {
   49d2c:	b530      	push	{r4, r5, lr}
   49d2e:	b091      	sub	sp, #68	; 0x44
   49d30:	4604      	mov	r4, r0
   49d32:	460d      	mov	r5, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   49d34:	f003 fb4f 	bl	4d3d6 <bt_conn_get_dst>
   49d38:	4669      	mov	r1, sp
   49d3a:	f7df ffdf 	bl	29cfc <bt_addr_le_to_str.constprop.7>
    bt_conn_get_info(conn, &info);
   49d3e:	a908      	add	r1, sp, #32
   49d40:	4620      	mov	r0, r4
   49d42:	f7e6 f91f 	bl	2ff84 <bt_conn_get_info>
    if (info.role != BT_CONN_ROLE_CENTRAL) {
   49d46:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   49d4a:	b92b      	cbnz	r3, 49d58 <split_central_connected+0x2c>
        release_peripheral_slot_for_conn(conn);
   49d4c:	4620      	mov	r0, r4
    if (conn_err) {
   49d4e:	b12d      	cbz	r5, 49d5c <split_central_connected+0x30>
        release_peripheral_slot_for_conn(conn);
   49d50:	f7ff ffd1 	bl	49cf6 <release_peripheral_slot_for_conn>
        start_scan();
   49d54:	f7df ff9e 	bl	29c94 <start_scan>
}
   49d58:	b011      	add	sp, #68	; 0x44
   49d5a:	bd30      	pop	{r4, r5, pc}
    confirm_peripheral_slot_conn(conn);
   49d5c:	f7e0 fab4 	bl	2a2c8 <confirm_peripheral_slot_conn>
    split_central_process_connection(conn);
   49d60:	4620      	mov	r0, r4
   49d62:	f7e0 f89b 	bl	29e9c <split_central_process_connection>
   49d66:	e7f7      	b.n	49d58 <split_central_connected+0x2c>

00049d68 <zmk_split_bt_invoke_behavior>:
                                 struct zmk_behavior_binding_event event, bool state) {
   49d68:	b082      	sub	sp, #8
   49d6a:	b530      	push	{r4, r5, lr}
   49d6c:	b08d      	sub	sp, #52	; 0x34
   49d6e:	4604      	mov	r4, r0
   49d70:	a810      	add	r0, sp, #64	; 0x40
   49d72:	e880 000c 	stmia.w	r0, {r2, r3}
    struct zmk_split_run_behavior_payload payload = {.data = {
   49d76:	2300      	movs	r3, #0
   49d78:	f8cd 3012 	str.w	r3, [sp, #18]
   49d7c:	f8cd 3016 	str.w	r3, [sp, #22]
   49d80:	f88d 301a 	strb.w	r3, [sp, #26]
   49d84:	9b11      	ldr	r3, [sp, #68]	; 0x44
   49d86:	f88d 3008 	strb.w	r3, [sp, #8]
   49d8a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   49d8e:	f88d 3009 	strb.w	r3, [sp, #9]
   49d92:	684b      	ldr	r3, [r1, #4]
   49d94:	f8cd 300a 	str.w	r3, [sp, #10]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   49d98:	2209      	movs	r2, #9
    struct zmk_split_run_behavior_payload payload = {.data = {
   49d9a:	688b      	ldr	r3, [r1, #8]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   49d9c:	6809      	ldr	r1, [r1, #0]
    struct zmk_split_run_behavior_payload payload = {.data = {
   49d9e:	f8cd 300e 	str.w	r3, [sp, #14]
    if (strlcpy(payload.behavior_dev, binding->behavior_dev, payload_dev_size) >=
   49da2:	f10d 0012 	add.w	r0, sp, #18
   49da6:	f7ff fdde 	bl	49966 <strlcpy>
    struct zmk_split_run_behavior_payload_wrapper wrapper = {.source = source, .payload = payload};
   49daa:	ad06      	add	r5, sp, #24
   49dac:	f88d 401c 	strb.w	r4, [sp, #28]
   49db0:	aa02      	add	r2, sp, #8
   49db2:	f10d 031d 	add.w	r3, sp, #29
   49db6:	4614      	mov	r4, r2
   49db8:	cc03      	ldmia	r4!, {r0, r1}
   49dba:	42ac      	cmp	r4, r5
   49dbc:	6018      	str	r0, [r3, #0]
   49dbe:	6059      	str	r1, [r3, #4]
   49dc0:	4622      	mov	r2, r4
   49dc2:	f103 0308 	add.w	r3, r3, #8
   49dc6:	d1f6      	bne.n	49db6 <zmk_split_bt_invoke_behavior+0x4e>
   49dc8:	8821      	ldrh	r1, [r4, #0]
   49dca:	78a2      	ldrb	r2, [r4, #2]
   49dcc:	709a      	strb	r2, [r3, #2]
   49dce:	8019      	strh	r1, [r3, #0]
    return split_bt_invoke_behavior_payload(wrapper);
   49dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   49dd2:	9300      	str	r3, [sp, #0]
   49dd4:	ab07      	add	r3, sp, #28
   49dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   49dd8:	f7df ffe0 	bl	29d9c <split_bt_invoke_behavior_payload>
}
   49ddc:	b00d      	add	sp, #52	; 0x34
   49dde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   49de2:	b002      	add	sp, #8
   49de4:	4770      	bx	lr

00049de6 <raise_usb_status_changed_event>:
static void raise_usb_status_changed_event(struct k_work *_work) {
   49de6:	b508      	push	{r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   49de8:	f7e0 fadc 	bl	2a3a4 <zmk_usb_get_conn_state>
   49dec:	f7df fb84 	bl	294f8 <new_zmk_usb_conn_state_changed>
}
   49df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ZMK_EVENT_RAISE(new_zmk_usb_conn_state_changed(
   49df4:	f7ff bdef 	b.w	499d6 <zmk_event_manager_raise>

00049df8 <input_ccc_changed>:
}
   49df8:	4770      	bx	lr

00049dfa <write_ctrl_point>:
                                const void *buf, uint16_t len, uint16_t offset, uint8_t flags) {
   49dfa:	b570      	push	{r4, r5, r6, lr}
   49dfc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    uint8_t *value = attr->user_data;
   49e00:	68cd      	ldr	r5, [r1, #12]
    if (offset + len > sizeof(ctrl_point)) {
   49e02:	461c      	mov	r4, r3
   49e04:	18c3      	adds	r3, r0, r3
   49e06:	2b01      	cmp	r3, #1
                                const void *buf, uint16_t len, uint16_t offset, uint8_t flags) {
   49e08:	4616      	mov	r6, r2
    if (offset + len > sizeof(ctrl_point)) {
   49e0a:	dc06      	bgt.n	49e1a <write_ctrl_point+0x20>
    memcpy(value + offset, buf, len);
   49e0c:	4622      	mov	r2, r4
   49e0e:	4631      	mov	r1, r6
   49e10:	4428      	add	r0, r5
   49e12:	f002 fa6b 	bl	4c2ec <memcpy>
}
   49e16:	4620      	mov	r0, r4
   49e18:	bd70      	pop	{r4, r5, r6, pc}
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   49e1a:	f06f 0406 	mvn.w	r4, #6
   49e1e:	e7fa      	b.n	49e16 <write_ctrl_point+0x1c>

00049e20 <read_hids_consumer_input_report>:
                                               uint16_t len, uint16_t offset) {
   49e20:	b5f0      	push	{r4, r5, r6, r7, lr}
   49e22:	b085      	sub	sp, #20
   49e24:	461f      	mov	r7, r3
   49e26:	4604      	mov	r4, r0
   49e28:	460d      	mov	r5, r1
   49e2a:	4616      	mov	r6, r2
    struct zmk_hid_consumer_report_body *report_body = &zmk_hid_get_consumer_report()->body;
   49e2c:	f7df f9dc 	bl	291e8 <zmk_hid_get_consumer_report>
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   49e30:	230c      	movs	r3, #12
   49e32:	9302      	str	r3, [sp, #8]
    struct zmk_hid_consumer_report_body *report_body = &zmk_hid_get_consumer_report()->body;
   49e34:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   49e36:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   49e3a:	9001      	str	r0, [sp, #4]
   49e3c:	9300      	str	r3, [sp, #0]
   49e3e:	4632      	mov	r2, r6
   49e40:	463b      	mov	r3, r7
   49e42:	4629      	mov	r1, r5
   49e44:	4620      	mov	r0, r4
   49e46:	f004 fdf1 	bl	4ea2c <bt_gatt_attr_read>
}
   49e4a:	b005      	add	sp, #20
   49e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00049e4e <read_hids_report_ref>:
                                    void *buf, uint16_t len, uint16_t offset) {
   49e4e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   49e50:	2402      	movs	r4, #2
   49e52:	9402      	str	r4, [sp, #8]
   49e54:	68cc      	ldr	r4, [r1, #12]
   49e56:	9401      	str	r4, [sp, #4]
   49e58:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   49e5c:	9400      	str	r4, [sp, #0]
   49e5e:	f004 fde5 	bl	4ea2c <bt_gatt_attr_read>
}
   49e62:	b004      	add	sp, #16
   49e64:	bd10      	pop	{r4, pc}

00049e66 <read_hids_info>:
                              uint16_t len, uint16_t offset) {
   49e66:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   49e68:	2404      	movs	r4, #4
   49e6a:	9402      	str	r4, [sp, #8]
   49e6c:	68cc      	ldr	r4, [r1, #12]
   49e6e:	9401      	str	r4, [sp, #4]
   49e70:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   49e74:	9400      	str	r4, [sp, #0]
   49e76:	f004 fdd9 	bl	4ea2c <bt_gatt_attr_read>
}
   49e7a:	b004      	add	sp, #16
   49e7c:	bd10      	pop	{r4, pc}

00049e7e <read_hids_input_report>:
                                      void *buf, uint16_t len, uint16_t offset) {
   49e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
   49e80:	b085      	sub	sp, #20
   49e82:	461f      	mov	r7, r3
   49e84:	4604      	mov	r4, r0
   49e86:	460d      	mov	r5, r1
   49e88:	4616      	mov	r6, r2
    struct zmk_hid_keyboard_report_body *report_body = &zmk_hid_get_keyboard_report()->body;
   49e8a:	f7df f9a9 	bl	291e0 <zmk_hid_get_keyboard_report>
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   49e8e:	2308      	movs	r3, #8
   49e90:	9302      	str	r3, [sp, #8]
    struct zmk_hid_keyboard_report_body *report_body = &zmk_hid_get_keyboard_report()->body;
   49e92:	3001      	adds	r0, #1
    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
   49e94:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   49e98:	9001      	str	r0, [sp, #4]
   49e9a:	9300      	str	r3, [sp, #0]
   49e9c:	4632      	mov	r2, r6
   49e9e:	463b      	mov	r3, r7
   49ea0:	4629      	mov	r1, r5
   49ea2:	4620      	mov	r0, r4
   49ea4:	f004 fdc2 	bl	4ea2c <bt_gatt_attr_read>
}
   49ea8:	b005      	add	sp, #20
   49eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00049eac <destination_connection>:
struct bt_conn *destination_connection() {
   49eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
   49eae:	f7df fe85 	bl	29bbc <zmk_ble_active_profile_addr>
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   49eb2:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   49eb4:	2207      	movs	r2, #7
   49eb6:	4669      	mov	r1, sp
   49eb8:	9400      	str	r4, [sp, #0]
    bt_addr_le_t *addr = zmk_ble_active_profile_addr();
   49eba:	4605      	mov	r5, r0
    if (!bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   49ebc:	f8cd 4003 	str.w	r4, [sp, #3]
   49ec0:	f002 fa04 	bl	4c2cc <memcmp>
   49ec4:	b118      	cbz	r0, 49ece <destination_connection+0x22>
    } else if ((conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr)) == NULL) {
   49ec6:	4629      	mov	r1, r5
   49ec8:	4620      	mov	r0, r4
   49eca:	f003 fa82 	bl	4d3d2 <bt_conn_lookup_addr_le>
}
   49ece:	b003      	add	sp, #12
   49ed0:	bd30      	pop	{r4, r5, pc}

00049ed2 <endpoint_listener>:

static int endpoint_listener(const zmk_event_t *eh) {
   49ed2:	b508      	push	{r3, lr}
    update_current_endpoint();
   49ed4:	f7e0 fb98 	bl	2a608 <update_current_endpoint>
    return 0;
}
   49ed8:	2000      	movs	r0, #0
   49eda:	bd08      	pop	{r3, pc}

00049edc <zmk_endpoints_send_report>:
    switch (usage_page) {
   49edc:	2807      	cmp	r0, #7
   49ede:	d004      	beq.n	49eea <zmk_endpoints_send_report+0xe>
   49ee0:	280c      	cmp	r0, #12
   49ee2:	d004      	beq.n	49eee <zmk_endpoints_send_report+0x12>
}
   49ee4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   49ee8:	4770      	bx	lr
        return send_keyboard_report();
   49eea:	f7e0 bb39 	b.w	2a560 <send_keyboard_report>
        return send_consumer_report();
   49eee:	f7e0 bb4f 	b.w	2a590 <send_consumer_report>

00049ef2 <hid_listener>:
        }
    }
    return zmk_endpoints_send_report(ev->usage_page);
}

int hid_listener(const zmk_event_t *eh) {
   49ef2:	b538      	push	{r3, r4, r5, lr}
    const struct zmk_keycode_state_changed *ev = as_zmk_keycode_state_changed(eh);
   49ef4:	f7df fac8 	bl	29488 <as_zmk_keycode_state_changed>
    if (ev) {
   49ef8:	4604      	mov	r4, r0
   49efa:	b300      	cbz	r0, 49f3e <hid_listener+0x4c>
        if (ev->state) {
   49efc:	7a82      	ldrb	r2, [r0, #10]
   49efe:	8803      	ldrh	r3, [r0, #0]
   49f00:	b31a      	cbz	r2, 49f4a <hid_listener+0x58>
    switch (ev->usage_page) {
   49f02:	2b07      	cmp	r3, #7
   49f04:	d016      	beq.n	49f34 <hid_listener+0x42>
   49f06:	2b0c      	cmp	r3, #12
   49f08:	d01b      	beq.n	49f42 <hid_listener+0x50>
    explicit_mods_changed = zmk_hid_register_mods(ev->explicit_modifiers);
   49f0a:	7a60      	ldrb	r0, [r4, #9]
   49f0c:	f7ff fd41 	bl	49992 <zmk_hid_register_mods>
   49f10:	4605      	mov	r5, r0
    implicit_mods_changed = zmk_hid_implicit_modifiers_press(ev->implicit_modifiers);
   49f12:	7a20      	ldrb	r0, [r4, #8]
   49f14:	f7df f8de 	bl	290d4 <zmk_hid_implicit_modifiers_press>
    if (ev->usage_page != HID_USAGE_KEY &&
   49f18:	8823      	ldrh	r3, [r4, #0]
   49f1a:	2b07      	cmp	r3, #7
   49f1c:	d006      	beq.n	49f2c <hid_listener+0x3a>
   49f1e:	2d00      	cmp	r5, #0
   49f20:	dc01      	bgt.n	49f26 <hid_listener+0x34>
        (explicit_mods_changed > 0 || implicit_mods_changed > 0)) {
   49f22:	2800      	cmp	r0, #0
   49f24:	dd02      	ble.n	49f2c <hid_listener+0x3a>
        err = zmk_endpoints_send_report(HID_USAGE_KEY);
   49f26:	2007      	movs	r0, #7
   49f28:	f7ff ffd8 	bl	49edc <zmk_endpoints_send_report>
    return zmk_endpoints_send_report(ev->usage_page);
   49f2c:	8820      	ldrh	r0, [r4, #0]
   49f2e:	f7ff ffd5 	bl	49edc <zmk_endpoints_send_report>
   49f32:	e004      	b.n	49f3e <hid_listener+0x4c>
        err = zmk_hid_keyboard_press(ev->keycode);
   49f34:	6840      	ldr	r0, [r0, #4]
   49f36:	f7df f8e9 	bl	2910c <zmk_hid_keyboard_press>
        if (err < 0) {
   49f3a:	2800      	cmp	r0, #0
   49f3c:	dae5      	bge.n	49f0a <hid_listener+0x18>
        } else {
            hid_listener_keycode_released(ev);
        }
    }
    return 0;
}
   49f3e:	2000      	movs	r0, #0
   49f40:	bd38      	pop	{r3, r4, r5, pc}
        err = zmk_hid_consumer_press(ev->keycode);
   49f42:	6840      	ldr	r0, [r0, #4]
   49f44:	f7df f91c 	bl	29180 <zmk_hid_consumer_press>
   49f48:	e7f7      	b.n	49f3a <hid_listener+0x48>
    switch (ev->usage_page) {
   49f4a:	2b07      	cmp	r3, #7
   49f4c:	d008      	beq.n	49f60 <hid_listener+0x6e>
   49f4e:	2b0c      	cmp	r3, #12
   49f50:	d00c      	beq.n	49f6c <hid_listener+0x7a>
    explicit_mods_changed = zmk_hid_unregister_mods(ev->explicit_modifiers);
   49f52:	7a60      	ldrb	r0, [r4, #9]
   49f54:	f7ff fd2e 	bl	499b4 <zmk_hid_unregister_mods>
   49f58:	4605      	mov	r5, r0
    implicit_mods_changed = zmk_hid_implicit_modifiers_release();
   49f5a:	f7df f8c9 	bl	290f0 <zmk_hid_implicit_modifiers_release>
   49f5e:	e7db      	b.n	49f18 <hid_listener+0x26>
        err = zmk_hid_keyboard_release(ev->keycode);
   49f60:	6840      	ldr	r0, [r0, #4]
   49f62:	f7df f8eb 	bl	2913c <zmk_hid_keyboard_release>
        if (err < 0) {
   49f66:	2800      	cmp	r0, #0
   49f68:	daf3      	bge.n	49f52 <hid_listener+0x60>
   49f6a:	e7e8      	b.n	49f3e <hid_listener+0x4c>
        err = zmk_hid_consumer_release(ev->keycode);
   49f6c:	6840      	ldr	r0, [r0, #4]
   49f6e:	f7df f91b 	bl	291a8 <zmk_hid_consumer_release>
   49f72:	e7f8      	b.n	49f66 <hid_listener+0x74>

00049f74 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   49f74:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
	uint8_t num_digits = 0;
   49f76:	2300      	movs	r3, #0
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   49f78:	2504      	movs	r5, #4
	uint8_t divisor = 100;
   49f7a:	2464      	movs	r4, #100	; 0x64
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   49f7c:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   49f80:	b111      	cbz	r1, 49f88 <u8_to_dec+0x14>
   49f82:	3d01      	subs	r5, #1
   49f84:	d102      	bne.n	49f8c <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   49f86:	7005      	strb	r5, [r0, #0]
	}

	return num_digits;
}
   49f88:	4618      	mov	r0, r3
   49f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   49f8c:	42a2      	cmp	r2, r4
		digit = value / divisor;
   49f8e:	fbb2 f7f4 	udiv	r7, r2, r4
   49f92:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   49f94:	d202      	bcs.n	49f9c <u8_to_dec+0x28>
   49f96:	2c01      	cmp	r4, #1
   49f98:	d000      	beq.n	49f9c <u8_to_dec+0x28>
   49f9a:	b133      	cbz	r3, 49faa <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   49f9c:	3630      	adds	r6, #48	; 0x30
			buflen--;
   49f9e:	3901      	subs	r1, #1
			num_digits++;
   49fa0:	3301      	adds	r3, #1
			*buf = (char)digit + '0';
   49fa2:	f800 6b01 	strb.w	r6, [r0], #1
			buflen--;
   49fa6:	b2c9      	uxtb	r1, r1
			num_digits++;
   49fa8:	b2db      	uxtb	r3, r3
		value -= digit * divisor;
   49faa:	fb04 2217 	mls	r2, r4, r7, r2
   49fae:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   49fb0:	fbb4 f4fc 	udiv	r4, r4, ip
   49fb4:	e7e4      	b.n	49f80 <u8_to_dec+0xc>

00049fb6 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   49fb6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   49fba:	b2db      	uxtb	r3, r3
   49fbc:	2b09      	cmp	r3, #9
   49fbe:	d802      	bhi.n	49fc6 <char2hex+0x10>
		*x = c - '0';
   49fc0:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   49fc2:	2000      	movs	r0, #0
   49fc4:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   49fc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   49fca:	2b05      	cmp	r3, #5
   49fcc:	d802      	bhi.n	49fd4 <char2hex+0x1e>
		*x = c - 'a' + 10;
   49fce:	3857      	subs	r0, #87	; 0x57
   49fd0:	7008      	strb	r0, [r1, #0]
   49fd2:	e7f6      	b.n	49fc2 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   49fd4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   49fd8:	2b05      	cmp	r3, #5
   49fda:	d801      	bhi.n	49fe0 <char2hex+0x2a>
		*x = c - 'A' + 10;
   49fdc:	3837      	subs	r0, #55	; 0x37
   49fde:	e7f7      	b.n	49fd0 <char2hex+0x1a>
		return -EINVAL;
   49fe0:	f06f 0015 	mvn.w	r0, #21
}
   49fe4:	4770      	bx	lr

00049fe6 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   49fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   49fe8:	084d      	lsrs	r5, r1, #1
   49fea:	f001 0101 	and.w	r1, r1, #1
   49fee:	186e      	adds	r6, r5, r1
   49ff0:	429e      	cmp	r6, r3
{
   49ff2:	4604      	mov	r4, r0
	if (buflen < hexlen / 2 + hexlen % 2) {
   49ff4:	d903      	bls.n	49ffe <hex2bin+0x18>
		return 0;
   49ff6:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   49ff8:	4630      	mov	r0, r6
   49ffa:	b002      	add	sp, #8
   49ffc:	bd70      	pop	{r4, r5, r6, pc}
	if (hexlen % 2) {
   49ffe:	b159      	cbz	r1, 4a018 <hex2bin+0x32>
		if (char2hex(hex[0], &dec) < 0) {
   4a000:	f10d 0107 	add.w	r1, sp, #7
   4a004:	7800      	ldrb	r0, [r0, #0]
   4a006:	f7ff ffd6 	bl	49fb6 <char2hex>
   4a00a:	2800      	cmp	r0, #0
   4a00c:	dbf3      	blt.n	49ff6 <hex2bin+0x10>
		buf[0] = dec;
   4a00e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   4a012:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   4a016:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   4a018:	3a01      	subs	r2, #1
   4a01a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   4a01e:	42ac      	cmp	r4, r5
   4a020:	d0ea      	beq.n	49ff8 <hex2bin+0x12>
		if (char2hex(hex[2 * i], &dec) < 0) {
   4a022:	f10d 0107 	add.w	r1, sp, #7
   4a026:	7820      	ldrb	r0, [r4, #0]
   4a028:	f7ff ffc5 	bl	49fb6 <char2hex>
   4a02c:	2800      	cmp	r0, #0
   4a02e:	dbe2      	blt.n	49ff6 <hex2bin+0x10>
		buf[i] = dec << 4;
   4a030:	f89d 3007 	ldrb.w	r3, [sp, #7]
   4a034:	011b      	lsls	r3, r3, #4
   4a036:	7053      	strb	r3, [r2, #1]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   4a038:	7860      	ldrb	r0, [r4, #1]
   4a03a:	f10d 0107 	add.w	r1, sp, #7
   4a03e:	f7ff ffba 	bl	49fb6 <char2hex>
   4a042:	2800      	cmp	r0, #0
   4a044:	f104 0402 	add.w	r4, r4, #2
   4a048:	dbd5      	blt.n	49ff6 <hex2bin+0x10>
		buf[i] += dec;
   4a04a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   4a04e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   4a052:	440b      	add	r3, r1
   4a054:	7013      	strb	r3, [r2, #0]
   4a056:	e7e2      	b.n	4a01e <hex2bin+0x38>

0004a058 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   4a058:	b140      	cbz	r0, 4a06c <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   4a05a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   4a05c:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   4a060:	2b02      	cmp	r3, #2
   4a062:	d006      	beq.n	4a072 <sys_notify_validate+0x1a>
   4a064:	2b03      	cmp	r3, #3
   4a066:	d004      	beq.n	4a072 <sys_notify_validate+0x1a>
   4a068:	2b01      	cmp	r3, #1
   4a06a:	d005      	beq.n	4a078 <sys_notify_validate+0x20>
		return -EINVAL;
   4a06c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   4a070:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   4a072:	6803      	ldr	r3, [r0, #0]
   4a074:	2b00      	cmp	r3, #0
   4a076:	d0f9      	beq.n	4a06c <sys_notify_validate+0x14>
		notify->result = 0;
   4a078:	2300      	movs	r3, #0
   4a07a:	6083      	str	r3, [r0, #8]
   4a07c:	4618      	mov	r0, r3
   4a07e:	4770      	bx	lr

0004a080 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   4a080:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   4a082:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   4a086:	2a02      	cmp	r2, #2
{
   4a088:	b510      	push	{r4, lr}
   4a08a:	4603      	mov	r3, r0
	notify->result = res;
   4a08c:	6081      	str	r1, [r0, #8]
	switch (method) {
   4a08e:	d00a      	beq.n	4a0a6 <sys_notify_finalize+0x26>
   4a090:	2a03      	cmp	r2, #3
   4a092:	d10b      	bne.n	4a0ac <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   4a094:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   4a096:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   4a098:	2200      	movs	r2, #0
   4a09a:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   4a09c:	b108      	cbz	r0, 4a0a2 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   4a09e:	f7ff fc11 	bl	498c4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   4a0a2:	4620      	mov	r0, r4
   4a0a4:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   4a0a6:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   4a0a8:	2400      	movs	r4, #0
		break;
   4a0aa:	e7f5      	b.n	4a098 <sys_notify_finalize+0x18>
	sys_notify_generic_callback rv = NULL;
   4a0ac:	2400      	movs	r4, #0
	struct k_poll_signal *sig = NULL;
   4a0ae:	4620      	mov	r0, r4
   4a0b0:	e7f2      	b.n	4a098 <sys_notify_finalize+0x18>

0004a0b2 <arch_printk_char_out>:
}
   4a0b2:	2000      	movs	r0, #0
   4a0b4:	4770      	bx	lr

0004a0b6 <str_out>:
{
   4a0b6:	b530      	push	{r4, r5, lr}
   4a0b8:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   4a0ba:	680c      	ldr	r4, [r1, #0]
   4a0bc:	1c55      	adds	r5, r2, #1
   4a0be:	b114      	cbz	r4, 4a0c6 <str_out+0x10>
   4a0c0:	684b      	ldr	r3, [r1, #4]
   4a0c2:	4293      	cmp	r3, r2
   4a0c4:	dc01      	bgt.n	4a0ca <str_out+0x14>
		ctx->count++;
   4a0c6:	608d      	str	r5, [r1, #8]
}
   4a0c8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   4a0ca:	3b01      	subs	r3, #1
   4a0cc:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   4a0ce:	bf08      	it	eq
   4a0d0:	2200      	moveq	r2, #0
   4a0d2:	608d      	str	r5, [r1, #8]
   4a0d4:	bf0c      	ite	eq
   4a0d6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   4a0d8:	54a0      	strbne	r0, [r4, r2]
   4a0da:	e7f5      	b.n	4a0c8 <str_out+0x12>

0004a0dc <printk>:
{
   4a0dc:	b40f      	push	{r0, r1, r2, r3}
   4a0de:	b507      	push	{r0, r1, r2, lr}
   4a0e0:	a904      	add	r1, sp, #16
   4a0e2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   4a0e6:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   4a0e8:	f7e0 fafa 	bl	2a6e0 <vprintk>
}
   4a0ec:	b003      	add	sp, #12
   4a0ee:	f85d eb04 	ldr.w	lr, [sp], #4
   4a0f2:	b004      	add	sp, #16
   4a0f4:	4770      	bx	lr

0004a0f6 <snprintk>:
{
   4a0f6:	b40c      	push	{r2, r3}
   4a0f8:	b507      	push	{r0, r1, r2, lr}
   4a0fa:	ab04      	add	r3, sp, #16
   4a0fc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   4a100:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   4a102:	f7e0 fafb 	bl	2a6fc <vsnprintk>
}
   4a106:	b003      	add	sp, #12
   4a108:	f85d eb04 	ldr.w	lr, [sp], #4
   4a10c:	b002      	add	sp, #8
   4a10e:	4770      	bx	lr

0004a110 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4a110:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   4a112:	f013 0307 	ands.w	r3, r3, #7
   4a116:	d105      	bne.n	4a124 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   4a118:	6803      	ldr	r3, [r0, #0]
   4a11a:	2b00      	cmp	r3, #0
		evt = EVT_START;
   4a11c:	bf0c      	ite	eq
   4a11e:	2000      	moveq	r0, #0
   4a120:	2003      	movne	r0, #3
   4a122:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   4a124:	2b02      	cmp	r3, #2
   4a126:	d105      	bne.n	4a134 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   4a128:	8b43      	ldrh	r3, [r0, #26]
   4a12a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   4a12c:	bf14      	ite	ne
   4a12e:	2000      	movne	r0, #0
   4a130:	2004      	moveq	r0, #4
   4a132:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   4a134:	2b01      	cmp	r3, #1
   4a136:	d105      	bne.n	4a144 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   4a138:	6803      	ldr	r3, [r0, #0]
   4a13a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   4a13c:	bf0c      	ite	eq
   4a13e:	2000      	moveq	r0, #0
   4a140:	2005      	movne	r0, #5
   4a142:	4770      	bx	lr
	int evt = EVT_NOP;
   4a144:	2000      	movs	r0, #0
}
   4a146:	4770      	bx	lr

0004a148 <notify_one>:
{
   4a148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4a14c:	460d      	mov	r5, r1
   4a14e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   4a150:	4619      	mov	r1, r3
   4a152:	1d28      	adds	r0, r5, #4
{
   4a154:	4690      	mov	r8, r2
   4a156:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   4a158:	f7ff ff92 	bl	4a080 <sys_notify_finalize>
	if (cb) {
   4a15c:	4604      	mov	r4, r0
   4a15e:	b138      	cbz	r0, 4a170 <notify_one+0x28>
		cb(mgr, cli, state, res);
   4a160:	4633      	mov	r3, r6
   4a162:	4642      	mov	r2, r8
   4a164:	4629      	mov	r1, r5
   4a166:	4638      	mov	r0, r7
   4a168:	46a4      	mov	ip, r4
}
   4a16a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   4a16e:	4760      	bx	ip
}
   4a170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004a174 <transition_complete>:
{
   4a174:	b410      	push	{r4}
	__asm__ volatile(
   4a176:	f04f 0420 	mov.w	r4, #32
   4a17a:	f3ef 8211 	mrs	r2, BASEPRI
   4a17e:	f384 8812 	msr	BASEPRI_MAX, r4
   4a182:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   4a186:	6141      	str	r1, [r0, #20]
}
   4a188:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   4a18a:	2101      	movs	r1, #1
   4a18c:	f7e0 baca 	b.w	2a724 <process_event>

0004a190 <validate_args>:
{
   4a190:	b510      	push	{r4, lr}
   4a192:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   4a194:	b140      	cbz	r0, 4a1a8 <validate_args+0x18>
   4a196:	b139      	cbz	r1, 4a1a8 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   4a198:	1d08      	adds	r0, r1, #4
   4a19a:	f7ff ff5d 	bl	4a058 <sys_notify_validate>
	if ((rv == 0)
   4a19e:	b928      	cbnz	r0, 4a1ac <validate_args+0x1c>
	    && ((cli->notify.flags
   4a1a0:	68a3      	ldr	r3, [r4, #8]
   4a1a2:	f033 0303 	bics.w	r3, r3, #3
   4a1a6:	d001      	beq.n	4a1ac <validate_args+0x1c>
		rv = -EINVAL;
   4a1a8:	f06f 0015 	mvn.w	r0, #21
}
   4a1ac:	bd10      	pop	{r4, pc}

0004a1ae <onoff_manager_init>:
{
   4a1ae:	b538      	push	{r3, r4, r5, lr}
   4a1b0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   4a1b2:	4605      	mov	r5, r0
   4a1b4:	b158      	cbz	r0, 4a1ce <onoff_manager_init+0x20>
	    || (transitions == NULL)
   4a1b6:	b151      	cbz	r1, 4a1ce <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   4a1b8:	680b      	ldr	r3, [r1, #0]
   4a1ba:	b143      	cbz	r3, 4a1ce <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   4a1bc:	684b      	ldr	r3, [r1, #4]
   4a1be:	b133      	cbz	r3, 4a1ce <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   4a1c0:	221c      	movs	r2, #28
   4a1c2:	2100      	movs	r1, #0
   4a1c4:	f002 f89d 	bl	4c302 <memset>
   4a1c8:	612c      	str	r4, [r5, #16]
	return 0;
   4a1ca:	2000      	movs	r0, #0
}
   4a1cc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   4a1ce:	f06f 0015 	mvn.w	r0, #21
   4a1d2:	e7fb      	b.n	4a1cc <onoff_manager_init+0x1e>

0004a1d4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   4a1d4:	b570      	push	{r4, r5, r6, lr}
   4a1d6:	4604      	mov	r4, r0
   4a1d8:	460d      	mov	r5, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   4a1da:	f7ff ffd9 	bl	4a190 <validate_args>

	if (rv < 0) {
   4a1de:	1e06      	subs	r6, r0, #0
   4a1e0:	db31      	blt.n	4a246 <onoff_request+0x72>
   4a1e2:	f04f 0320 	mov.w	r3, #32
   4a1e6:	f3ef 8111 	mrs	r1, BASEPRI
   4a1ea:	f383 8812 	msr	BASEPRI_MAX, r3
   4a1ee:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   4a1f2:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4a1f4:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   4a1f6:	f64f 76ff 	movw	r6, #65535	; 0xffff
   4a1fa:	42b3      	cmp	r3, r6
   4a1fc:	f000 0207 	and.w	r2, r0, #7
   4a200:	d02e      	beq.n	4a260 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   4a202:	2a02      	cmp	r2, #2
   4a204:	d10e      	bne.n	4a224 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   4a206:	3301      	adds	r3, #1
   4a208:	8363      	strh	r3, [r4, #26]
	rv = state;
   4a20a:	4616      	mov	r6, r2
		notify = true;
   4a20c:	2301      	movs	r3, #1
	__asm__ volatile(
   4a20e:	f381 8811 	msr	BASEPRI, r1
   4a212:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   4a216:	b1b3      	cbz	r3, 4a246 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   4a218:	2300      	movs	r3, #0
   4a21a:	4629      	mov	r1, r5
   4a21c:	4620      	mov	r0, r4
   4a21e:	f7ff ff93 	bl	4a148 <notify_one>
   4a222:	e010      	b.n	4a246 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   4a224:	0783      	lsls	r3, r0, #30
   4a226:	d001      	beq.n	4a22c <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   4a228:	2a06      	cmp	r2, #6
   4a22a:	d10e      	bne.n	4a24a <onoff_request+0x76>
	parent->next = child;
   4a22c:	2300      	movs	r3, #0
   4a22e:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   4a230:	6863      	ldr	r3, [r4, #4]
   4a232:	b993      	cbnz	r3, 4a25a <onoff_request+0x86>
	list->head = node;
   4a234:	e9c4 5500 	strd	r5, r5, [r4]
	if (start) {
   4a238:	4616      	mov	r6, r2
   4a23a:	b962      	cbnz	r2, 4a256 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   4a23c:	460a      	mov	r2, r1
   4a23e:	4620      	mov	r0, r4
   4a240:	2102      	movs	r1, #2
   4a242:	f7e0 fa6f 	bl	2a724 <process_event>
		}
	}

	return rv;
}
   4a246:	4630      	mov	r0, r6
   4a248:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   4a24a:	2a05      	cmp	r2, #5
   4a24c:	bf0c      	ite	eq
   4a24e:	f06f 0685 	mvneq.w	r6, #133	; 0x85
   4a252:	f06f 0604 	mvnne.w	r6, #4
   4a256:	2300      	movs	r3, #0
   4a258:	e7d9      	b.n	4a20e <onoff_request+0x3a>
	parent->next = child;
   4a25a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   4a25c:	6065      	str	r5, [r4, #4]
   4a25e:	e7eb      	b.n	4a238 <onoff_request+0x64>
		rv = -EAGAIN;
   4a260:	f06f 060a 	mvn.w	r6, #10
   4a264:	e7f7      	b.n	4a256 <onoff_request+0x82>

0004a266 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   4a266:	b510      	push	{r4, lr}
	__asm__ volatile(
   4a268:	f04f 0320 	mov.w	r3, #32
   4a26c:	f3ef 8211 	mrs	r2, BASEPRI
   4a270:	f383 8812 	msr	BASEPRI_MAX, r3
   4a274:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4a278:	8b04      	ldrh	r4, [r0, #24]
   4a27a:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   4a27e:	2c02      	cmp	r4, #2
   4a280:	d00a      	beq.n	4a298 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   4a282:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   4a284:	bf0c      	ite	eq
   4a286:	f06f 0004 	mvneq.w	r0, #4
   4a28a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   4a28e:	f382 8811 	msr	BASEPRI, r2
   4a292:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   4a296:	e008      	b.n	4a2aa <onoff_release+0x44>
	mgr->refs -= 1U;
   4a298:	8b43      	ldrh	r3, [r0, #26]
   4a29a:	3b01      	subs	r3, #1
   4a29c:	b29b      	uxth	r3, r3
   4a29e:	8343      	strh	r3, [r0, #26]
	if (stop) {
   4a2a0:	b923      	cbnz	r3, 4a2ac <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   4a2a2:	4621      	mov	r1, r4
   4a2a4:	f7e0 fa3e 	bl	2a724 <process_event>
	int rv = state;
   4a2a8:	4620      	mov	r0, r4
}
   4a2aa:	bd10      	pop	{r4, pc}
	int rv = state;
   4a2ac:	4620      	mov	r0, r4
   4a2ae:	e7ee      	b.n	4a28e <onoff_release+0x28>

0004a2b0 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
   4a2b0:	b530      	push	{r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
   4a2b2:	b350      	cbz	r0, 4a30a <onoff_cancel+0x5a>
   4a2b4:	b349      	cbz	r1, 4a30a <onoff_cancel+0x5a>
	__asm__ volatile(
   4a2b6:	f04f 0320 	mov.w	r3, #32
   4a2ba:	f3ef 8511 	mrs	r5, BASEPRI
   4a2be:	f383 8812 	msr	BASEPRI_MAX, r3
   4a2c2:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4a2c6:	6803      	ldr	r3, [r0, #0]
   4a2c8:	2200      	movs	r2, #0
   4a2ca:	b913      	cbnz	r3, 4a2d2 <onoff_cancel+0x22>
		return -EINVAL;
	}

	int rv = -EALREADY;
   4a2cc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   4a2d0:	e00d      	b.n	4a2ee <onoff_cancel+0x3e>
   4a2d2:	4299      	cmp	r1, r3
   4a2d4:	d116      	bne.n	4a304 <onoff_cancel+0x54>
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   4a2d6:	8b03      	ldrh	r3, [r0, #24]
Z_GENLIST_REMOVE(slist, snode)
   4a2d8:	680c      	ldr	r4, [r1, #0]
   4a2da:	b96a      	cbnz	r2, 4a2f8 <onoff_cancel+0x48>
   4a2dc:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   4a2de:	6004      	str	r4, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   4a2e0:	4291      	cmp	r1, r2
   4a2e2:	d100      	bne.n	4a2e6 <onoff_cancel+0x36>
	list->tail = node;
   4a2e4:	6044      	str	r4, [r0, #4]
	parent->next = child;
   4a2e6:	2200      	movs	r2, #0
   4a2e8:	600a      	str	r2, [r1, #0]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   4a2ea:	f003 0007 	and.w	r0, r3, #7
	__asm__ volatile(
   4a2ee:	f385 8811 	msr	BASEPRI, r5
   4a2f2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   4a2f6:	bd30      	pop	{r4, r5, pc}
   4a2f8:	6014      	str	r4, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   4a2fa:	6844      	ldr	r4, [r0, #4]
   4a2fc:	42a1      	cmp	r1, r4
	list->tail = node;
   4a2fe:	bf08      	it	eq
   4a300:	6042      	streq	r2, [r0, #4]
   4a302:	e7f0      	b.n	4a2e6 <onoff_cancel+0x36>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4a304:	461a      	mov	r2, r3
   4a306:	681b      	ldr	r3, [r3, #0]
   4a308:	e7df      	b.n	4a2ca <onoff_cancel+0x1a>
		return -EINVAL;
   4a30a:	f06f 0015 	mvn.w	r0, #21
   4a30e:	e7f2      	b.n	4a2f6 <onoff_cancel+0x46>

0004a310 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   4a310:	4604      	mov	r4, r0
   4a312:	b508      	push	{r3, lr}
   4a314:	4608      	mov	r0, r1
   4a316:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   4a318:	461a      	mov	r2, r3
   4a31a:	47a0      	blx	r4
	return z_impl_z_current_get();
   4a31c:	f7fe ffcc 	bl	492b8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   4a320:	f7e2 fde8 	bl	2cef4 <z_impl_k_thread_abort>

0004a324 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   4a324:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   4a328:	8848      	ldrh	r0, [r1, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   4a32a:	0840      	lsrs	r0, r0, #1
   4a32c:	4770      	bx	lr

0004a32e <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   4a32e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4a330:	460e      	mov	r6, r1
   4a332:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   4a334:	f7ff fff6 	bl	4a324 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   4a338:	fab0 f080 	clz	r0, r0
   4a33c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   4a340:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   4a344:	00f2      	lsls	r2, r6, #3
   4a346:	f8dc 5010 	ldr.w	r5, [ip, #16]
   4a34a:	1d17      	adds	r7, r2, #4
   4a34c:	b2b4      	uxth	r4, r6
   4a34e:	3206      	adds	r2, #6
   4a350:	b955      	cbnz	r5, 4a368 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   4a352:	2101      	movs	r1, #1
   4a354:	fa01 f000 	lsl.w	r0, r1, r0
   4a358:	68d9      	ldr	r1, [r3, #12]
   4a35a:	4301      	orrs	r1, r0
   4a35c:	60d9      	str	r1, [r3, #12]
		b->next = c;
   4a35e:	f8cc 6010 	str.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   4a362:	53dc      	strh	r4, [r3, r7]
   4a364:	529c      	strh	r4, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   4a366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   4a368:	00e9      	lsls	r1, r5, #3
		return ((uint16_t *)cmem)[f];
   4a36a:	3104      	adds	r1, #4
   4a36c:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   4a36e:	53d8      	strh	r0, [r3, r7]
   4a370:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   4a374:	529d      	strh	r5, [r3, r2]
   4a376:	80c4      	strh	r4, [r0, #6]
   4a378:	525c      	strh	r4, [r3, r1]
   4a37a:	e7f4      	b.n	4a366 <free_list_add+0x38>

0004a37c <free_list_remove_bidx>:
{
   4a37c:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   4a37e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   4a382:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   4a384:	4299      	cmp	r1, r3
   4a386:	f102 0104 	add.w	r1, r2, #4
   4a38a:	d10a      	bne.n	4a3a2 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   4a38c:	2301      	movs	r3, #1
   4a38e:	fa03 f202 	lsl.w	r2, r3, r2
   4a392:	68c3      	ldr	r3, [r0, #12]
   4a394:	ea23 0302 	bic.w	r3, r3, r2
   4a398:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   4a39a:	2300      	movs	r3, #0
   4a39c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   4a3a0:	bd10      	pop	{r4, pc}
   4a3a2:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   4a3a4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   4a3a8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   4a3ac:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   4a3b0:	80cb      	strh	r3, [r1, #6]
   4a3b2:	8082      	strh	r2, [r0, #4]
}
   4a3b4:	e7f4      	b.n	4a3a0 <free_list_remove_bidx+0x24>

0004a3b6 <free_list_remove>:
{
   4a3b6:	b510      	push	{r4, lr}
   4a3b8:	4603      	mov	r3, r0
   4a3ba:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   4a3bc:	f7ff ffb2 	bl	4a324 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   4a3c0:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   4a3c4:	4621      	mov	r1, r4
   4a3c6:	f1c2 021f 	rsb	r2, r2, #31
   4a3ca:	4618      	mov	r0, r3
}
   4a3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   4a3d0:	f7ff bfd4 	b.w	4a37c <free_list_remove_bidx>

0004a3d4 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   4a3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4a3d8:	fab1 f581 	clz	r5, r1
   4a3dc:	f1c5 081f 	rsb	r8, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   4a3e0:	eb00 0688 	add.w	r6, r0, r8, lsl #2
{
   4a3e4:	4603      	mov	r3, r0
	if (b->next) {
   4a3e6:	6932      	ldr	r2, [r6, #16]
{
   4a3e8:	4689      	mov	r9, r1
	if (b->next) {
   4a3ea:	b1ba      	cbz	r2, 4a41c <alloc_chunk+0x48>
   4a3ec:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   4a3ee:	6934      	ldr	r4, [r6, #16]
			if (chunk_size(h, c) >= sz) {
   4a3f0:	4618      	mov	r0, r3
   4a3f2:	4621      	mov	r1, r4
   4a3f4:	f7ff ff96 	bl	4a324 <chunk_size>
   4a3f8:	4548      	cmp	r0, r9
   4a3fa:	d307      	bcc.n	4a40c <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   4a3fc:	4642      	mov	r2, r8

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   4a3fe:	4621      	mov	r1, r4
   4a400:	4618      	mov	r0, r3
   4a402:	f7ff ffbb 	bl	4a37c <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   4a406:	4620      	mov	r0, r4
   4a408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   4a40c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   4a410:	3f01      	subs	r7, #1
   4a412:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
   4a414:	6131      	str	r1, [r6, #16]
		} while (--i && b->next != first);
   4a416:	d001      	beq.n	4a41c <alloc_chunk+0x48>
   4a418:	428a      	cmp	r2, r1
   4a41a:	d1e8      	bne.n	4a3ee <alloc_chunk+0x1a>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   4a41c:	f1c5 0520 	rsb	r5, r5, #32
   4a420:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   4a424:	68da      	ldr	r2, [r3, #12]
   4a426:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   4a428:	4014      	ands	r4, r2
   4a42a:	d0ec      	beq.n	4a406 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   4a42c:	fa94 f2a4 	rbit	r2, r4
   4a430:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   4a434:	1d11      	adds	r1, r2, #4
   4a436:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   4a43a:	e7e0      	b.n	4a3fe <alloc_chunk+0x2a>

0004a43c <merge_chunks>:
{
   4a43c:	b538      	push	{r3, r4, r5, lr}
   4a43e:	4603      	mov	r3, r0
   4a440:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   4a442:	f7ff ff6f 	bl	4a324 <chunk_size>
   4a446:	4611      	mov	r1, r2
   4a448:	4604      	mov	r4, r0
   4a44a:	4618      	mov	r0, r3
   4a44c:	f7ff ff6a 	bl	4a324 <chunk_size>
   4a450:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   4a452:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4a456:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   4a458:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   4a45a:	4618      	mov	r0, r3
   4a45c:	4611      	mov	r1, r2
   4a45e:	f7ff ff61 	bl	4a324 <chunk_size>
	void *cmem = &buf[c];
   4a462:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   4a464:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   4a468:	bd38      	pop	{r3, r4, r5, pc}

0004a46a <split_chunks>:
{
   4a46a:	b538      	push	{r3, r4, r5, lr}
   4a46c:	4603      	mov	r3, r0
   4a46e:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   4a470:	f7ff ff58 	bl	4a324 <chunk_size>
	chunksz_t lsz = rc - lc;
   4a474:	1b11      	subs	r1, r2, r4
	chunksz_t rsz = sz0 - lsz;
   4a476:	1aa5      	subs	r5, r4, r2
   4a478:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   4a47c:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4a47e:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   4a480:	8060      	strh	r0, [r4, #2]
   4a482:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4a486:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   4a488:	8044      	strh	r4, [r0, #2]
   4a48a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   4a48e:	4618      	mov	r0, r3
   4a490:	4611      	mov	r1, r2
   4a492:	f7ff ff47 	bl	4a324 <chunk_size>
	void *cmem = &buf[c];
   4a496:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   4a498:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   4a49c:	bd38      	pop	{r3, r4, r5, pc}

0004a49e <free_chunk>:
{
   4a49e:	b538      	push	{r3, r4, r5, lr}
   4a4a0:	4605      	mov	r5, r0
   4a4a2:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   4a4a4:	f7ff ff3e 	bl	4a324 <chunk_size>
   4a4a8:	1821      	adds	r1, r4, r0
		return ((uint16_t *)cmem)[f];
   4a4aa:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	if (!chunk_used(h, right_chunk(h, c))) {
   4a4ae:	885b      	ldrh	r3, [r3, #2]
   4a4b0:	07da      	lsls	r2, r3, #31
   4a4b2:	d40b      	bmi.n	4a4cc <free_chunk+0x2e>
		free_list_remove(h, right_chunk(h, c));
   4a4b4:	4628      	mov	r0, r5
   4a4b6:	f7ff ff7e 	bl	4a3b6 <free_list_remove>
	return c + chunk_size(h, c);
   4a4ba:	4621      	mov	r1, r4
   4a4bc:	4628      	mov	r0, r5
   4a4be:	f7ff ff31 	bl	4a324 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   4a4c2:	4621      	mov	r1, r4
   4a4c4:	1822      	adds	r2, r4, r0
   4a4c6:	4628      	mov	r0, r5
   4a4c8:	f7ff ffb8 	bl	4a43c <merge_chunks>
		return ((uint16_t *)cmem)[f];
   4a4cc:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   4a4d0:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   4a4d2:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	if (!chunk_used(h, left_chunk(h, c))) {
   4a4d6:	885b      	ldrh	r3, [r3, #2]
   4a4d8:	07db      	lsls	r3, r3, #31
   4a4da:	d40c      	bmi.n	4a4f6 <free_chunk+0x58>
		free_list_remove(h, left_chunk(h, c));
   4a4dc:	4628      	mov	r0, r5
   4a4de:	f7ff ff6a 	bl	4a3b6 <free_list_remove>
   4a4e2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   4a4e6:	4622      	mov	r2, r4
   4a4e8:	1a61      	subs	r1, r4, r1
   4a4ea:	4628      	mov	r0, r5
   4a4ec:	f7ff ffa6 	bl	4a43c <merge_chunks>
   4a4f0:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   4a4f4:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   4a4f6:	4621      	mov	r1, r4
   4a4f8:	4628      	mov	r0, r5
}
   4a4fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   4a4fe:	f7ff bf16 	b.w	4a32e <free_list_add>

0004a502 <sys_heap_free>:
	if (mem == NULL) {
   4a502:	b161      	cbz	r1, 4a51e <sys_heap_free+0x1c>
	struct z_heap *h = heap->heap;
   4a504:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4a506:	3904      	subs	r1, #4
   4a508:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   4a50a:	f021 0307 	bic.w	r3, r1, #7
   4a50e:	4403      	add	r3, r0
	free_chunk(h, c);
   4a510:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   4a512:	885a      	ldrh	r2, [r3, #2]
   4a514:	f022 0201 	bic.w	r2, r2, #1
   4a518:	805a      	strh	r2, [r3, #2]
   4a51a:	f7ff bfc0 	b.w	4a49e <free_chunk>
}
   4a51e:	4770      	bx	lr

0004a520 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   4a520:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   4a522:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   4a524:	b909      	cbnz	r1, 4a52a <sys_heap_alloc+0xa>
		return NULL;
   4a526:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   4a528:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   4a52a:	68ab      	ldr	r3, [r5, #8]
   4a52c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   4a530:	d9f9      	bls.n	4a526 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   4a532:	310b      	adds	r1, #11
   4a534:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   4a536:	4621      	mov	r1, r4
   4a538:	4628      	mov	r0, r5
   4a53a:	f7ff ff4b 	bl	4a3d4 <alloc_chunk>
	if (c == 0U) {
   4a53e:	4606      	mov	r6, r0
   4a540:	2800      	cmp	r0, #0
   4a542:	d0f0      	beq.n	4a526 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   4a544:	4601      	mov	r1, r0
   4a546:	4628      	mov	r0, r5
   4a548:	f7ff feec 	bl	4a324 <chunk_size>
   4a54c:	42a0      	cmp	r0, r4
   4a54e:	d909      	bls.n	4a564 <sys_heap_alloc+0x44>
		split_chunks(h, c, c + chunk_sz);
   4a550:	4434      	add	r4, r6
   4a552:	4631      	mov	r1, r6
   4a554:	4628      	mov	r0, r5
   4a556:	4622      	mov	r2, r4
   4a558:	f7ff ff87 	bl	4a46a <split_chunks>
		free_list_add(h, c + chunk_sz);
   4a55c:	4621      	mov	r1, r4
   4a55e:	4628      	mov	r0, r5
   4a560:	f7ff fee5 	bl	4a32e <free_list_add>
	void *cmem = &buf[c];
   4a564:	00f6      	lsls	r6, r6, #3
   4a566:	19aa      	adds	r2, r5, r6
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   4a568:	3604      	adds	r6, #4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4a56a:	8853      	ldrh	r3, [r2, #2]
   4a56c:	f043 0301 	orr.w	r3, r3, #1
   4a570:	8053      	strh	r3, [r2, #2]
   4a572:	19a8      	adds	r0, r5, r6
	return mem;
   4a574:	e7d8      	b.n	4a528 <sys_heap_alloc+0x8>

0004a576 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   4a576:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   4a57a:	424f      	negs	r7, r1
   4a57c:	400f      	ands	r7, r1
	if (align != rew) {
   4a57e:	42b9      	cmp	r1, r7
{
   4a580:	4606      	mov	r6, r0
   4a582:	4614      	mov	r4, r2
	if (align != rew) {
   4a584:	d00a      	beq.n	4a59c <sys_heap_aligned_alloc+0x26>
		return false;
   4a586:	2f04      	cmp	r7, #4
   4a588:	463b      	mov	r3, r7
   4a58a:	46b8      	mov	r8, r7
   4a58c:	bf28      	it	cs
   4a58e:	2304      	movcs	r3, #4
		align -= rew;
   4a590:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   4a592:	b974      	cbnz	r4, 4a5b2 <sys_heap_aligned_alloc+0x3c>
		return NULL;
   4a594:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   4a596:	4628      	mov	r0, r5
   4a598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   4a59c:	2904      	cmp	r1, #4
   4a59e:	d804      	bhi.n	4a5aa <sys_heap_aligned_alloc+0x34>
			return sys_heap_alloc(heap, bytes);
   4a5a0:	4611      	mov	r1, r2
}
   4a5a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   4a5a6:	f7ff bfbb 	b.w	4a520 <sys_heap_alloc>
		rew = 0;
   4a5aa:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   4a5ae:	2304      	movs	r3, #4
   4a5b0:	e7ef      	b.n	4a592 <sys_heap_aligned_alloc+0x1c>
	struct z_heap *h = heap->heap;
   4a5b2:	6836      	ldr	r6, [r6, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   4a5b4:	68b2      	ldr	r2, [r6, #8]
   4a5b6:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   4a5ba:	d9eb      	bls.n	4a594 <sys_heap_aligned_alloc+0x1e>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   4a5bc:	f104 010b 	add.w	r1, r4, #11
   4a5c0:	4439      	add	r1, r7
   4a5c2:	1ac9      	subs	r1, r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   4a5c4:	08c9      	lsrs	r1, r1, #3
   4a5c6:	4630      	mov	r0, r6
   4a5c8:	f7ff ff04 	bl	4a3d4 <alloc_chunk>
	if (c0 == 0) {
   4a5cc:	4681      	mov	r9, r0
   4a5ce:	2800      	cmp	r0, #0
   4a5d0:	d0e0      	beq.n	4a594 <sys_heap_aligned_alloc+0x1e>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   4a5d2:	f108 0504 	add.w	r5, r8, #4
   4a5d6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   4a5da:	1e7b      	subs	r3, r7, #1
   4a5dc:	4435      	add	r5, r6
   4a5de:	441d      	add	r5, r3
   4a5e0:	427f      	negs	r7, r7
   4a5e2:	402f      	ands	r7, r5
   4a5e4:	eba7 0508 	sub.w	r5, r7, r8
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4a5e8:	1f2f      	subs	r7, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   4a5ea:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4a5ec:	1bbf      	subs	r7, r7, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   4a5ee:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   4a5f0:	ea4f 08d7 	mov.w	r8, r7, lsr #3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   4a5f4:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   4a5f8:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   4a5fa:	4580      	cmp	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   4a5fc:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   4a600:	d908      	bls.n	4a614 <sys_heap_aligned_alloc+0x9e>
		split_chunks(h, c0, c);
   4a602:	4601      	mov	r1, r0
   4a604:	4642      	mov	r2, r8
   4a606:	4630      	mov	r0, r6
   4a608:	f7ff ff2f 	bl	4a46a <split_chunks>
		free_list_add(h, c0);
   4a60c:	4649      	mov	r1, r9
   4a60e:	4630      	mov	r0, r6
   4a610:	f7ff fe8d 	bl	4a32e <free_list_add>
	return c + chunk_size(h, c);
   4a614:	4641      	mov	r1, r8
   4a616:	4630      	mov	r0, r6
   4a618:	f7ff fe84 	bl	4a324 <chunk_size>
   4a61c:	4440      	add	r0, r8
	if (right_chunk(h, c) > c_end) {
   4a61e:	4284      	cmp	r4, r0
   4a620:	d208      	bcs.n	4a634 <sys_heap_aligned_alloc+0xbe>
		split_chunks(h, c, c_end);
   4a622:	4641      	mov	r1, r8
   4a624:	4630      	mov	r0, r6
   4a626:	4622      	mov	r2, r4
   4a628:	f7ff ff1f 	bl	4a46a <split_chunks>
		free_list_add(h, c_end);
   4a62c:	4621      	mov	r1, r4
   4a62e:	4630      	mov	r0, r6
   4a630:	f7ff fe7d 	bl	4a32e <free_list_add>
	void *cmem = &buf[c];
   4a634:	f027 0707 	bic.w	r7, r7, #7
   4a638:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4a63a:	8873      	ldrh	r3, [r6, #2]
   4a63c:	f043 0301 	orr.w	r3, r3, #1
   4a640:	8073      	strh	r3, [r6, #2]
   4a642:	e7a8      	b.n	4a596 <sys_heap_aligned_alloc+0x20>

0004a644 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   4a644:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   4a646:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   4a648:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   4a64a:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   4a64e:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   4a652:	1ad2      	subs	r2, r2, r3
{
   4a654:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   4a656:	08d4      	lsrs	r4, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   4a658:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   4a65a:	fab4 f084 	clz	r0, r4
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   4a65e:	f1c0 0024 	rsb	r0, r0, #36	; 0x24
   4a662:	0080      	lsls	r0, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   4a664:	1dc5      	adds	r5, r0, #7
	h->avail_buckets = 0;
   4a666:	2600      	movs	r6, #0
	h->end_chunk = heap_sz;
   4a668:	609c      	str	r4, [r3, #8]
	h->avail_buckets = 0;
   4a66a:	60de      	str	r6, [r3, #12]
   4a66c:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   4a66e:	f103 0710 	add.w	r7, r3, #16
   4a672:	4418      	add	r0, r3
   4a674:	4287      	cmp	r7, r0
   4a676:	d113      	bne.n	4a6a0 <sys_heap_init+0x5c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4a678:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4a67a:	f040 0001 	orr.w	r0, r0, #1
   4a67e:	8058      	strh	r0, [r3, #2]
	void *cmem = &buf[c];
   4a680:	f025 0007 	bic.w	r0, r5, #7
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   4a684:	1a64      	subs	r4, r4, r1
		((uint16_t *)cmem)[f] = val;
   4a686:	181d      	adds	r5, r3, r0
   4a688:	801e      	strh	r6, [r3, #0]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   4a68a:	0066      	lsls	r6, r4, #1
		((uint16_t *)cmem)[f] = val;
   4a68c:	806e      	strh	r6, [r5, #2]
   4a68e:	5219      	strh	r1, [r3, r0]
   4a690:	1898      	adds	r0, r3, r2
   4a692:	529c      	strh	r4, [r3, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   4a694:	2201      	movs	r2, #1
   4a696:	8042      	strh	r2, [r0, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   4a698:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   4a69a:	4618      	mov	r0, r3
   4a69c:	f7ff be47 	b.w	4a32e <free_list_add>
		h->buckets[i].next = 0;
   4a6a0:	f847 6b04 	str.w	r6, [r7], #4
   4a6a4:	e7e6      	b.n	4a674 <sys_heap_init+0x30>

0004a6a6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_UF2_FAMILY_ID, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   4a6a6:	4770      	bx	lr

0004a6a8 <read_str>:
{
   4a6a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   4a6ac:	68cd      	ldr	r5, [r1, #12]
{
   4a6ae:	4606      	mov	r6, r0
				 strlen(attr->user_data));
   4a6b0:	4628      	mov	r0, r5
{
   4a6b2:	4698      	mov	r8, r3
   4a6b4:	460c      	mov	r4, r1
   4a6b6:	4617      	mov	r7, r2
				 strlen(attr->user_data));
   4a6b8:	f001 fde6 	bl	4c288 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   4a6bc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   4a6c0:	9300      	str	r3, [sp, #0]
   4a6c2:	b280      	uxth	r0, r0
   4a6c4:	e9cd 5001 	strd	r5, r0, [sp, #4]
   4a6c8:	4643      	mov	r3, r8
   4a6ca:	463a      	mov	r2, r7
   4a6cc:	4621      	mov	r1, r4
   4a6ce:	4630      	mov	r0, r6
   4a6d0:	f004 f9ac 	bl	4ea2c <bt_gatt_attr_read>
}
   4a6d4:	b004      	add	sp, #16
   4a6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004a6da <blvl_ccc_cfg_changed>:
}
   4a6da:	4770      	bx	lr

0004a6dc <bas_init>:
}
   4a6dc:	2000      	movs	r0, #0
   4a6de:	4770      	bx	lr

0004a6e0 <nvs_flash_rd>:
{
   4a6e0:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   4a6e2:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a6e4:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   4a6e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a6e8:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   4a6ea:	fa16 f181 	uxtah	r1, r6, r1
   4a6ee:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   4a6f2:	6884      	ldr	r4, [r0, #8]
   4a6f4:	6824      	ldr	r4, [r4, #0]
   4a6f6:	46a4      	mov	ip, r4
}
   4a6f8:	bc70      	pop	{r4, r5, r6}
   4a6fa:	4760      	bx	ip

0004a6fc <nvs_flash_block_cmp>:
{
   4a6fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4a700:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4a702:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   4a704:	681d      	ldr	r5, [r3, #0]
   4a706:	426d      	negs	r5, r5
{
   4a708:	b089      	sub	sp, #36	; 0x24
   4a70a:	4681      	mov	r9, r0
   4a70c:	460f      	mov	r7, r1
   4a70e:	4690      	mov	r8, r2
	block_size =
   4a710:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   4a714:	b91c      	cbnz	r4, 4a71e <nvs_flash_block_cmp+0x22>
	return 0;
   4a716:	4620      	mov	r0, r4
}
   4a718:	b009      	add	sp, #36	; 0x24
   4a71a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   4a71e:	42ac      	cmp	r4, r5
   4a720:	4626      	mov	r6, r4
   4a722:	bf28      	it	cs
   4a724:	462e      	movcs	r6, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   4a726:	4633      	mov	r3, r6
   4a728:	466a      	mov	r2, sp
   4a72a:	4639      	mov	r1, r7
   4a72c:	4648      	mov	r0, r9
   4a72e:	f7ff ffd7 	bl	4a6e0 <nvs_flash_rd>
		if (rc) {
   4a732:	2800      	cmp	r0, #0
   4a734:	d1f0      	bne.n	4a718 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   4a736:	4632      	mov	r2, r6
   4a738:	4669      	mov	r1, sp
   4a73a:	4640      	mov	r0, r8
   4a73c:	f001 fdc6 	bl	4c2cc <memcmp>
		if (rc) {
   4a740:	b918      	cbnz	r0, 4a74a <nvs_flash_block_cmp+0x4e>
		len -= bytes_to_cmp;
   4a742:	1ba4      	subs	r4, r4, r6
		addr += bytes_to_cmp;
   4a744:	4437      	add	r7, r6
		data8 += bytes_to_cmp;
   4a746:	44b0      	add	r8, r6
   4a748:	e7e4      	b.n	4a714 <nvs_flash_block_cmp+0x18>
			return 1;
   4a74a:	2001      	movs	r0, #1
   4a74c:	e7e4      	b.n	4a718 <nvs_flash_block_cmp+0x1c>

0004a74e <nvs_flash_cmp_const>:
{
   4a74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4a752:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4a754:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   4a756:	681c      	ldr	r4, [r3, #0]
   4a758:	4264      	negs	r4, r4
{
   4a75a:	b088      	sub	sp, #32
	block_size =
   4a75c:	f004 0420 	and.w	r4, r4, #32
{
   4a760:	4680      	mov	r8, r0
   4a762:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   4a764:	4668      	mov	r0, sp
{
   4a766:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   4a768:	4622      	mov	r2, r4
   4a76a:	f001 fdca 	bl	4c302 <memset>
	while (len) {
   4a76e:	b91d      	cbnz	r5, 4a778 <nvs_flash_cmp_const+0x2a>
	return 0;
   4a770:	4628      	mov	r0, r5
}
   4a772:	b008      	add	sp, #32
   4a774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   4a778:	42a5      	cmp	r5, r4
   4a77a:	462f      	mov	r7, r5
   4a77c:	bf28      	it	cs
   4a77e:	4627      	movcs	r7, r4
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   4a780:	463b      	mov	r3, r7
   4a782:	466a      	mov	r2, sp
   4a784:	4631      	mov	r1, r6
   4a786:	4640      	mov	r0, r8
   4a788:	f7ff ffb8 	bl	4a6fc <nvs_flash_block_cmp>
		if (rc) {
   4a78c:	2800      	cmp	r0, #0
   4a78e:	d1f0      	bne.n	4a772 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   4a790:	1bed      	subs	r5, r5, r7
		addr += bytes_to_cmp;
   4a792:	443e      	add	r6, r7
   4a794:	e7eb      	b.n	4a76e <nvs_flash_cmp_const+0x20>

0004a796 <nvs_flash_erase_sector>:
{
   4a796:	b538      	push	{r3, r4, r5, lr}
	addr &= ADDR_SECT_MASK;
   4a798:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a79a:	8982      	ldrh	r2, [r0, #12]
   4a79c:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   4a79e:	042d      	lsls	r5, r5, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a7a0:	0c29      	lsrs	r1, r5, #16
{
   4a7a2:	4604      	mov	r4, r0
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a7a4:	fb02 3101 	mla	r1, r2, r1, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   4a7a8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	rc = api->erase(dev, offset, size);
   4a7aa:	6883      	ldr	r3, [r0, #8]
   4a7ac:	689b      	ldr	r3, [r3, #8]
   4a7ae:	4798      	blx	r3
	if (rc) {
   4a7b0:	b950      	cbnz	r0, 4a7c8 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   4a7b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   4a7b4:	89a3      	ldrh	r3, [r4, #12]
   4a7b6:	7912      	ldrb	r2, [r2, #4]
   4a7b8:	4629      	mov	r1, r5
   4a7ba:	4620      	mov	r0, r4
   4a7bc:	f7ff ffc7 	bl	4a74e <nvs_flash_cmp_const>
   4a7c0:	2800      	cmp	r0, #0
		rc = -ENXIO;
   4a7c2:	bf18      	it	ne
   4a7c4:	f06f 0005 	mvnne.w	r0, #5
}
   4a7c8:	bd38      	pop	{r3, r4, r5, pc}

0004a7ca <nvs_ate_crc8_update>:
{
   4a7ca:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4a7cc:	4601      	mov	r1, r0
{
   4a7ce:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4a7d0:	2207      	movs	r2, #7
   4a7d2:	20ff      	movs	r0, #255	; 0xff
   4a7d4:	f7df ff66 	bl	2a6a4 <crc8_ccitt>
	entry->crc8 = crc8;
   4a7d8:	71e0      	strb	r0, [r4, #7]
}
   4a7da:	bd10      	pop	{r4, pc}

0004a7dc <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   4a7dc:	7803      	ldrb	r3, [r0, #0]
   4a7de:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   4a7e0:	bf81      	itttt	hi
   4a7e2:	18c9      	addhi	r1, r1, r3
   4a7e4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   4a7e8:	425b      	neghi	r3, r3
   4a7ea:	4019      	andhi	r1, r3
}
   4a7ec:	4608      	mov	r0, r1
   4a7ee:	4770      	bx	lr

0004a7f0 <nvs_ate_valid>:
{
   4a7f0:	b570      	push	{r4, r5, r6, lr}
   4a7f2:	460c      	mov	r4, r1
   4a7f4:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a7f6:	2108      	movs	r1, #8
   4a7f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4a7fa:	f7ff ffef 	bl	4a7dc <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4a7fe:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a800:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   4a802:	4621      	mov	r1, r4
   4a804:	20ff      	movs	r0, #255	; 0xff
   4a806:	f7df ff4d 	bl	2a6a4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   4a80a:	79e3      	ldrb	r3, [r4, #7]
   4a80c:	4283      	cmp	r3, r0
   4a80e:	d107      	bne.n	4a820 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   4a810:	89ab      	ldrh	r3, [r5, #12]
   4a812:	8860      	ldrh	r0, [r4, #2]
   4a814:	1b9b      	subs	r3, r3, r6
	if ((nvs_ate_crc8_check(entry)) ||
   4a816:	4298      	cmp	r0, r3
   4a818:	bf2c      	ite	cs
   4a81a:	2000      	movcs	r0, #0
   4a81c:	2001      	movcc	r0, #1
}
   4a81e:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   4a820:	2000      	movs	r0, #0
   4a822:	e7fc      	b.n	4a81e <nvs_ate_valid+0x2e>

0004a824 <nvs_sector_advance.isra.1>:
	*addr += (1 << ADDR_SECT_SHIFT);
   4a824:	680b      	ldr	r3, [r1, #0]
   4a826:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   4a82a:	0c1a      	lsrs	r2, r3, #16
   4a82c:	4282      	cmp	r2, r0
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   4a82e:	bf08      	it	eq
   4a830:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   4a834:	600b      	str	r3, [r1, #0]
}
   4a836:	4770      	bx	lr

0004a838 <nvs_close_ate_valid>:
{
   4a838:	b538      	push	{r3, r4, r5, lr}
   4a83a:	4605      	mov	r5, r0
   4a83c:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   4a83e:	f7ff ffd7 	bl	4a7f0 <nvs_ate_valid>
   4a842:	b1a0      	cbz	r0, 4a86e <nvs_close_ate_valid+0x36>
   4a844:	88a0      	ldrh	r0, [r4, #4]
   4a846:	b998      	cbnz	r0, 4a870 <nvs_close_ate_valid+0x38>
   4a848:	8822      	ldrh	r2, [r4, #0]
   4a84a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4a84e:	429a      	cmp	r2, r3
   4a850:	d10d      	bne.n	4a86e <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a852:	2108      	movs	r1, #8
   4a854:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   4a856:	f7ff ffc1 	bl	4a7dc <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   4a85a:	8863      	ldrh	r3, [r4, #2]
   4a85c:	89aa      	ldrh	r2, [r5, #12]
   4a85e:	1ad2      	subs	r2, r2, r3
   4a860:	fbb2 f3f0 	udiv	r3, r2, r0
   4a864:	fb03 2010 	mls	r0, r3, r0, r2
   4a868:	fab0 f080 	clz	r0, r0
   4a86c:	0940      	lsrs	r0, r0, #5
}
   4a86e:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   4a870:	2000      	movs	r0, #0
   4a872:	e7fc      	b.n	4a86e <nvs_close_ate_valid+0x36>

0004a874 <nvs_flash_al_wrt.part.4>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   4a874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4a878:	4606      	mov	r6, r0
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a87a:	8987      	ldrh	r7, [r0, #12]
	offset += addr & ADDR_OFFS_MASK;
   4a87c:	6800      	ldr	r0, [r0, #0]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   4a87e:	461c      	mov	r4, r3
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   4a880:	0c0b      	lsrs	r3, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   4a882:	fa10 f181 	uxtah	r1, r0, r1
   4a886:	fb03 1707 	mla	r7, r3, r7, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   4a88a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   4a88c:	681d      	ldr	r5, [r3, #0]
   4a88e:	426d      	negs	r5, r5
	if (blen > 0) {
   4a890:	4025      	ands	r5, r4
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   4a892:	b089      	sub	sp, #36	; 0x24
   4a894:	4690      	mov	r8, r2
	if (blen > 0) {
   4a896:	d00a      	beq.n	4a8ae <nvs_flash_al_wrt.part.4+0x3a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   4a898:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   4a89a:	6883      	ldr	r3, [r0, #8]
   4a89c:	4639      	mov	r1, r7
   4a89e:	f8d3 9004 	ldr.w	r9, [r3, #4]
   4a8a2:	462b      	mov	r3, r5
   4a8a4:	47c8      	blx	r9
		if (rc) {
   4a8a6:	b9c0      	cbnz	r0, 4a8da <nvs_flash_al_wrt.part.4+0x66>
		len -= blen;
   4a8a8:	1b64      	subs	r4, r4, r5
		offset += blen;
   4a8aa:	442f      	add	r7, r5
		data8 += blen;
   4a8ac:	44a8      	add	r8, r5
	if (len) {
   4a8ae:	b1bc      	cbz	r4, 4a8e0 <nvs_flash_al_wrt.part.4+0x6c>
		memcpy(buf, data8, len);
   4a8b0:	4622      	mov	r2, r4
   4a8b2:	4641      	mov	r1, r8
   4a8b4:	4668      	mov	r0, sp
   4a8b6:	f001 fd19 	bl	4c2ec <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   4a8ba:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   4a8bc:	681a      	ldr	r2, [r3, #0]
   4a8be:	7919      	ldrb	r1, [r3, #4]
   4a8c0:	1b12      	subs	r2, r2, r4
   4a8c2:	eb0d 0004 	add.w	r0, sp, r4
   4a8c6:	f001 fd1c 	bl	4c302 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   4a8ca:	e9d6 030a 	ldrd	r0, r3, [r6, #40]	; 0x28
   4a8ce:	681b      	ldr	r3, [r3, #0]
   4a8d0:	6882      	ldr	r2, [r0, #8]
   4a8d2:	4639      	mov	r1, r7
   4a8d4:	6854      	ldr	r4, [r2, #4]
   4a8d6:	466a      	mov	r2, sp
   4a8d8:	47a0      	blx	r4
}
   4a8da:	b009      	add	sp, #36	; 0x24
   4a8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (len) {
   4a8e0:	4620      	mov	r0, r4
   4a8e2:	e7fa      	b.n	4a8da <nvs_flash_al_wrt.part.4+0x66>

0004a8e4 <nvs_flash_ate_wrt>:
{
   4a8e4:	b510      	push	{r4, lr}
   4a8e6:	2308      	movs	r3, #8
   4a8e8:	460a      	mov	r2, r1
   4a8ea:	6841      	ldr	r1, [r0, #4]
   4a8ec:	4604      	mov	r4, r0
   4a8ee:	f7ff ffc1 	bl	4a874 <nvs_flash_al_wrt.part.4>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   4a8f2:	2108      	movs	r1, #8
   4a8f4:	4602      	mov	r2, r0
   4a8f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   4a8f8:	f7ff ff70 	bl	4a7dc <nvs_al_size.isra.0>
   4a8fc:	6863      	ldr	r3, [r4, #4]
   4a8fe:	1a18      	subs	r0, r3, r0
   4a900:	6060      	str	r0, [r4, #4]
}
   4a902:	4610      	mov	r0, r2
   4a904:	bd10      	pop	{r4, pc}

0004a906 <nvs_add_gc_done_ate>:
{
   4a906:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   4a908:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4a90c:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   4a910:	2300      	movs	r3, #0
{
   4a912:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   4a914:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   4a918:	6883      	ldr	r3, [r0, #8]
   4a91a:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   4a91e:	4668      	mov	r0, sp
   4a920:	f7ff ff53 	bl	4a7ca <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   4a924:	4669      	mov	r1, sp
   4a926:	4620      	mov	r0, r4
   4a928:	f7ff ffdc 	bl	4a8e4 <nvs_flash_ate_wrt>
}
   4a92c:	b002      	add	sp, #8
   4a92e:	bd10      	pop	{r4, pc}

0004a930 <nvs_prev_ate>:
{
   4a930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4a932:	4604      	mov	r4, r0
   4a934:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a936:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4a938:	2108      	movs	r1, #8
   4a93a:	f7ff ff4f 	bl	4a7dc <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a93e:	2308      	movs	r3, #8
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a940:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a942:	6829      	ldr	r1, [r5, #0]
   4a944:	4620      	mov	r0, r4
   4a946:	f7ff fecb 	bl	4a6e0 <nvs_flash_rd>
	if (rc) {
   4a94a:	4606      	mov	r6, r0
   4a94c:	2800      	cmp	r0, #0
   4a94e:	d138      	bne.n	4a9c2 <nvs_prev_ate+0x92>
	*addr += ate_size;
   4a950:	6829      	ldr	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4a952:	89a0      	ldrh	r0, [r4, #12]
	*addr += ate_size;
   4a954:	4439      	add	r1, r7
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4a956:	b28b      	uxth	r3, r1
   4a958:	1bc0      	subs	r0, r0, r7
   4a95a:	4283      	cmp	r3, r0
	*addr += ate_size;
   4a95c:	6029      	str	r1, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   4a95e:	d130      	bne.n	4a9c2 <nvs_prev_ate+0x92>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   4a960:	0c0b      	lsrs	r3, r1, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   4a962:	bf03      	ittte	eq
   4a964:	89e3      	ldrheq	r3, [r4, #14]
   4a966:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
   4a96a:	eb01 4103 	addeq.w	r1, r1, r3, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   4a96e:	f5a1 3180 	subne.w	r1, r1, #65536	; 0x10000
   4a972:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a974:	2308      	movs	r3, #8
   4a976:	466a      	mov	r2, sp
   4a978:	4620      	mov	r0, r4
   4a97a:	f7ff feb1 	bl	4a6e0 <nvs_flash_rd>
	if (rc) {
   4a97e:	4606      	mov	r6, r0
   4a980:	b9f8      	cbnz	r0, 4a9c2 <nvs_prev_ate+0x92>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   4a982:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   4a984:	466a      	mov	r2, sp
   4a986:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4a988:	4603      	mov	r3, r0
		if (data8[i] != value) {
   4a98a:	f812 0b01 	ldrb.w	r0, [r2], #1
   4a98e:	4281      	cmp	r1, r0
   4a990:	d10c      	bne.n	4a9ac <nvs_prev_ate+0x7c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4a992:	3301      	adds	r3, #1
   4a994:	2b08      	cmp	r3, #8
   4a996:	d1f8      	bne.n	4a98a <nvs_prev_ate+0x5a>
		*addr = fs->ate_wra;
   4a998:	6863      	ldr	r3, [r4, #4]
   4a99a:	e005      	b.n	4a9a8 <nvs_prev_ate+0x78>
		(*addr) &= ADDR_SECT_MASK;
   4a99c:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   4a99e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   4a9a2:	0c1b      	lsrs	r3, r3, #16
   4a9a4:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   4a9a6:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   4a9a8:	602b      	str	r3, [r5, #0]
		return 0;
   4a9aa:	e00a      	b.n	4a9c2 <nvs_prev_ate+0x92>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4a9ac:	4669      	mov	r1, sp
   4a9ae:	4620      	mov	r0, r4
   4a9b0:	f7ff ff42 	bl	4a838 <nvs_close_ate_valid>
   4a9b4:	2800      	cmp	r0, #0
   4a9b6:	d1f1      	bne.n	4a99c <nvs_prev_ate+0x6c>
	return nvs_recover_last_ate(fs, addr);
   4a9b8:	4629      	mov	r1, r5
   4a9ba:	4620      	mov	r0, r4
   4a9bc:	f7e0 f9ca 	bl	2ad54 <nvs_recover_last_ate>
   4a9c0:	4606      	mov	r6, r0
}
   4a9c2:	4630      	mov	r0, r6
   4a9c4:	b003      	add	sp, #12
   4a9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004a9c8 <nvs_gc>:
{
   4a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a9cc:	4604      	mov	r4, r0
   4a9ce:	b093      	sub	sp, #76	; 0x4c
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a9d0:	2108      	movs	r1, #8
   4a9d2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4a9d4:	f7ff ff02 	bl	4a7dc <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4a9d8:	6863      	ldr	r3, [r4, #4]
   4a9da:	0c1b      	lsrs	r3, r3, #16
   4a9dc:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4a9de:	4681      	mov	r9, r0
	nvs_sector_advance(fs, &sec_addr);
   4a9e0:	a901      	add	r1, sp, #4
   4a9e2:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   4a9e4:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
   4a9e6:	f7ff ff1d 	bl	4a824 <nvs_sector_advance.isra.1>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   4a9ea:	9b01      	ldr	r3, [sp, #4]
   4a9ec:	89a1      	ldrh	r1, [r4, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a9ee:	ad04      	add	r5, sp, #16
	gc_addr = sec_addr + fs->sector_size - ate_size;
   4a9f0:	4419      	add	r1, r3
   4a9f2:	eba1 0109 	sub.w	r1, r1, r9
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a9f6:	462a      	mov	r2, r5
   4a9f8:	2308      	movs	r3, #8
   4a9fa:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   4a9fc:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   4a9fe:	f7ff fe6f 	bl	4a6e0 <nvs_flash_rd>
	if (rc < 0) {
   4aa02:	1e02      	subs	r2, r0, #0
   4aa04:	f2c0 80a8 	blt.w	4ab58 <nvs_gc+0x190>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   4aa08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   4aa0a:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4aa0c:	2300      	movs	r3, #0
		if (data8[i] != value) {
   4aa0e:	5ce9      	ldrb	r1, [r5, r3]
   4aa10:	4291      	cmp	r1, r2
   4aa12:	f040 808f 	bne.w	4ab34 <nvs_gc+0x16c>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   4aa16:	3301      	adds	r3, #1
   4aa18:	2b08      	cmp	r3, #8
   4aa1a:	d1f8      	bne.n	4aa0e <nvs_gc+0x46>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   4aa1c:	68a3      	ldr	r3, [r4, #8]
   4aa1e:	6862      	ldr	r2, [r4, #4]
   4aa20:	444b      	add	r3, r9
   4aa22:	429a      	cmp	r2, r3
   4aa24:	d27e      	bcs.n	4ab24 <nvs_gc+0x15c>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   4aa26:	9901      	ldr	r1, [sp, #4]
   4aa28:	4620      	mov	r0, r4
   4aa2a:	f7ff feb4 	bl	4a796 <nvs_flash_erase_sector>
   4aa2e:	4602      	mov	r2, r0
	if (rc) {
   4aa30:	e092      	b.n	4ab58 <nvs_gc+0x190>
		gc_addr &= ADDR_SECT_MASK;
   4aa32:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
   4aa34:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
   4aa38:	0c1b      	lsrs	r3, r3, #16
   4aa3a:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
   4aa3c:	4413      	add	r3, r2
   4aa3e:	9302      	str	r3, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   4aa40:	aa06      	add	r2, sp, #24
   4aa42:	a902      	add	r1, sp, #8
   4aa44:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   4aa46:	f8dd a008 	ldr.w	sl, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   4aa4a:	f7ff ff71 	bl	4a930 <nvs_prev_ate>
		if (rc) {
   4aa4e:	4602      	mov	r2, r0
   4aa50:	2800      	cmp	r0, #0
   4aa52:	f040 8081 	bne.w	4ab58 <nvs_gc+0x190>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   4aa56:	a906      	add	r1, sp, #24
   4aa58:	4620      	mov	r0, r4
   4aa5a:	f7ff fec9 	bl	4a7f0 <nvs_ate_valid>
   4aa5e:	2800      	cmp	r0, #0
   4aa60:	d036      	beq.n	4aad0 <nvs_gc+0x108>
		wlk_addr = fs->ate_wra;
   4aa62:	6863      	ldr	r3, [r4, #4]
   4aa64:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4aa66:	aa08      	add	r2, sp, #32
   4aa68:	a903      	add	r1, sp, #12
   4aa6a:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   4aa6c:	9d03      	ldr	r5, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4aa6e:	f7ff ff5f 	bl	4a930 <nvs_prev_ate>
			if (rc) {
   4aa72:	4602      	mov	r2, r0
   4aa74:	2800      	cmp	r0, #0
   4aa76:	d16f      	bne.n	4ab58 <nvs_gc+0x190>
			if ((wlk_ate.id == gc_ate.id) &&
   4aa78:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   4aa7c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   4aa80:	429a      	cmp	r2, r3
   4aa82:	d028      	beq.n	4aad6 <nvs_gc+0x10e>
		} while (wlk_addr != fs->ate_wra);
   4aa84:	6862      	ldr	r2, [r4, #4]
   4aa86:	9b03      	ldr	r3, [sp, #12]
   4aa88:	429a      	cmp	r2, r3
   4aa8a:	d1ec      	bne.n	4aa66 <nvs_gc+0x9e>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   4aa8c:	4555      	cmp	r5, sl
   4aa8e:	d11f      	bne.n	4aad0 <nvs_gc+0x108>
   4aa90:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   4aa94:	b1e3      	cbz	r3, 4aad0 <nvs_gc+0x108>
			data_addr += gc_ate.offset;
   4aa96:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   4aa9a:	ea4f 471a 	mov.w	r7, sl, lsr #16
   4aa9e:	043f      	lsls	r7, r7, #16
			data_addr += gc_ate.offset;
   4aaa0:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   4aaa2:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   4aaa4:	68a3      	ldr	r3, [r4, #8]
   4aaa6:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   4aaaa:	f7ff fe8e 	bl	4a7ca <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4aaae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   4aab0:	f8bd 801c 	ldrh.w	r8, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   4aab4:	681e      	ldr	r6, [r3, #0]
   4aab6:	4276      	negs	r6, r6
	block_size =
   4aab8:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   4aabc:	f1b8 0f00 	cmp.w	r8, #0
   4aac0:	d110      	bne.n	4aae4 <nvs_gc+0x11c>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   4aac2:	a906      	add	r1, sp, #24
   4aac4:	4620      	mov	r0, r4
   4aac6:	f7ff ff0d 	bl	4a8e4 <nvs_flash_ate_wrt>
			if (rc) {
   4aaca:	4602      	mov	r2, r0
   4aacc:	2800      	cmp	r0, #0
   4aace:	d143      	bne.n	4ab58 <nvs_gc+0x190>
	} while (gc_prev_addr != stop_addr);
   4aad0:	45da      	cmp	sl, fp
   4aad2:	d1b5      	bne.n	4aa40 <nvs_gc+0x78>
gc_done:
   4aad4:	e7a2      	b.n	4aa1c <nvs_gc+0x54>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   4aad6:	a908      	add	r1, sp, #32
   4aad8:	4620      	mov	r0, r4
   4aada:	f7ff fe89 	bl	4a7f0 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   4aade:	2800      	cmp	r0, #0
   4aae0:	d0d0      	beq.n	4aa84 <nvs_gc+0xbc>
   4aae2:	e7d3      	b.n	4aa8c <nvs_gc+0xc4>
		bytes_to_copy = MIN(block_size, len);
   4aae4:	4546      	cmp	r6, r8
   4aae6:	4635      	mov	r5, r6
   4aae8:	bf28      	it	cs
   4aaea:	4645      	movcs	r5, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   4aaec:	aa0a      	add	r2, sp, #40	; 0x28
   4aaee:	462b      	mov	r3, r5
   4aaf0:	4639      	mov	r1, r7
   4aaf2:	4620      	mov	r0, r4
   4aaf4:	f7ff fdf4 	bl	4a6e0 <nvs_flash_rd>
		if (rc) {
   4aaf8:	4602      	mov	r2, r0
   4aafa:	bb68      	cbnz	r0, 4ab58 <nvs_gc+0x190>
	if (!len) {
   4aafc:	b135      	cbz	r5, 4ab0c <nvs_gc+0x144>
   4aafe:	aa0a      	add	r2, sp, #40	; 0x28
   4ab00:	462b      	mov	r3, r5
   4ab02:	68a1      	ldr	r1, [r4, #8]
   4ab04:	4620      	mov	r0, r4
   4ab06:	f7ff feb5 	bl	4a874 <nvs_flash_al_wrt.part.4>
   4ab0a:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   4ab0c:	4629      	mov	r1, r5
   4ab0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   4ab10:	f7ff fe64 	bl	4a7dc <nvs_al_size.isra.0>
   4ab14:	68a3      	ldr	r3, [r4, #8]
   4ab16:	4418      	add	r0, r3
   4ab18:	60a0      	str	r0, [r4, #8]
		if (rc) {
   4ab1a:	b9ea      	cbnz	r2, 4ab58 <nvs_gc+0x190>
		len -= bytes_to_copy;
   4ab1c:	eba8 0805 	sub.w	r8, r8, r5
		addr += bytes_to_copy;
   4ab20:	442f      	add	r7, r5
   4ab22:	e7cb      	b.n	4aabc <nvs_gc+0xf4>
		rc = nvs_add_gc_done_ate(fs);
   4ab24:	4620      	mov	r0, r4
   4ab26:	f7ff feee 	bl	4a906 <nvs_add_gc_done_ate>
		if (rc) {
   4ab2a:	4602      	mov	r2, r0
   4ab2c:	2800      	cmp	r0, #0
   4ab2e:	f43f af7a 	beq.w	4aa26 <nvs_gc+0x5e>
   4ab32:	e011      	b.n	4ab58 <nvs_gc+0x190>
	stop_addr = gc_addr - ate_size;
   4ab34:	9b02      	ldr	r3, [sp, #8]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4ab36:	4629      	mov	r1, r5
   4ab38:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   4ab3a:	eba3 0b09 	sub.w	fp, r3, r9
	if (nvs_close_ate_valid(fs, &close_ate)) {
   4ab3e:	f7ff fe7b 	bl	4a838 <nvs_close_ate_valid>
   4ab42:	2800      	cmp	r0, #0
   4ab44:	f47f af75 	bne.w	4aa32 <nvs_gc+0x6a>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   4ab48:	a902      	add	r1, sp, #8
   4ab4a:	4620      	mov	r0, r4
   4ab4c:	f7e0 f902 	bl	2ad54 <nvs_recover_last_ate>
		if (rc) {
   4ab50:	4602      	mov	r2, r0
   4ab52:	2800      	cmp	r0, #0
   4ab54:	f43f af74 	beq.w	4aa40 <nvs_gc+0x78>
}
   4ab58:	4610      	mov	r0, r2
   4ab5a:	b013      	add	sp, #76	; 0x4c
   4ab5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0004ab60 <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   4ab60:	2300      	movs	r3, #0
   4ab62:	461a      	mov	r2, r3
   4ab64:	f7e0 ba86 	b.w	2b074 <nvs_write>

0004ab68 <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   4ab68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   4ab6c:	461f      	mov	r7, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   4ab6e:	7c03      	ldrb	r3, [r0, #16]
{
   4ab70:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
   4ab74:	4604      	mov	r4, r0
   4ab76:	468a      	mov	sl, r1
   4ab78:	4691      	mov	r9, r2
	if (!fs->ready) {
   4ab7a:	2b00      	cmp	r3, #0
   4ab7c:	d042      	beq.n	4ac04 <nvs_read_hist+0x9c>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   4ab7e:	2108      	movs	r1, #8
   4ab80:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   4ab82:	f7ff fe2b 	bl	4a7dc <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   4ab86:	89a3      	ldrh	r3, [r4, #12]
   4ab88:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
   4ab8c:	4287      	cmp	r7, r0
   4ab8e:	d83c      	bhi.n	4ac0a <nvs_read_hist+0xa2>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   4ab90:	6863      	ldr	r3, [r4, #4]
   4ab92:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   4ab94:	2500      	movs	r5, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4ab96:	aa02      	add	r2, sp, #8
   4ab98:	a901      	add	r1, sp, #4
   4ab9a:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   4ab9c:	9e01      	ldr	r6, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   4ab9e:	f7ff fec7 	bl	4a930 <nvs_prev_ate>
		if (rc) {
   4aba2:	bb28      	cbnz	r0, 4abf0 <nvs_read_hist+0x88>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   4aba4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4aba8:	4553      	cmp	r3, sl
   4abaa:	d106      	bne.n	4abba <nvs_read_hist+0x52>
   4abac:	a902      	add	r1, sp, #8
   4abae:	4620      	mov	r0, r4
   4abb0:	f7ff fe1e 	bl	4a7f0 <nvs_ate_valid>
   4abb4:	b108      	cbz	r0, 4abba <nvs_read_hist+0x52>
			cnt_his++;
   4abb6:	3501      	adds	r5, #1
   4abb8:	b2ad      	uxth	r5, r5
		}
		if (wlk_addr == fs->ate_wra) {
   4abba:	6862      	ldr	r2, [r4, #4]
   4abbc:	9b01      	ldr	r3, [sp, #4]
   4abbe:	429a      	cmp	r2, r3
   4abc0:	d019      	beq.n	4abf6 <nvs_read_hist+0x8e>
	while (cnt_his <= cnt) {
   4abc2:	4545      	cmp	r5, r8
   4abc4:	d9e7      	bls.n	4ab96 <nvs_read_hist+0x2e>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4abc6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   4abca:	b1c3      	cbz	r3, 4abfe <nvs_read_hist+0x96>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   4abcc:	4545      	cmp	r5, r8
   4abce:	d316      	bcc.n	4abfe <nvs_read_hist+0x96>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
	rd_addr += wlk_ate.offset;
   4abd0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   4abd4:	0c31      	lsrs	r1, r6, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4abd6:	42bb      	cmp	r3, r7
	rd_addr &= ADDR_SECT_MASK;
   4abd8:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   4abdc:	bf28      	it	cs
   4abde:	463b      	movcs	r3, r7
   4abe0:	4401      	add	r1, r0
   4abe2:	464a      	mov	r2, r9
   4abe4:	4620      	mov	r0, r4
   4abe6:	f7ff fd7b 	bl	4a6e0 <nvs_flash_rd>
	if (rc) {
   4abea:	b908      	cbnz	r0, 4abf0 <nvs_read_hist+0x88>
		goto err;
	}

	return wlk_ate.len;
   4abec:	f8bd 000c 	ldrh.w	r0, [sp, #12]

err:
	return rc;
}
   4abf0:	b004      	add	sp, #16
   4abf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   4abf6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4abfa:	4553      	cmp	r3, sl
   4abfc:	d0e3      	beq.n	4abc6 <nvs_read_hist+0x5e>
		return -ENOENT;
   4abfe:	f06f 0001 	mvn.w	r0, #1
   4ac02:	e7f5      	b.n	4abf0 <nvs_read_hist+0x88>
		return -EACCES;
   4ac04:	f06f 000c 	mvn.w	r0, #12
   4ac08:	e7f2      	b.n	4abf0 <nvs_read_hist+0x88>
		return -EINVAL;
   4ac0a:	f06f 0015 	mvn.w	r0, #21
   4ac0e:	e7ef      	b.n	4abf0 <nvs_read_hist+0x88>

0004ac10 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   4ac10:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   4ac12:	2400      	movs	r4, #0
   4ac14:	9400      	str	r4, [sp, #0]
   4ac16:	f7ff ffa7 	bl	4ab68 <nvs_read_hist>
	return rc;
}
   4ac1a:	b002      	add	sp, #8
   4ac1c:	bd10      	pop	{r4, pc}

0004ac1e <usb_write>:
{
   4ac1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4ac22:	4606      	mov	r6, r0
   4ac24:	460f      	mov	r7, r1
   4ac26:	4690      	mov	r8, r2
   4ac28:	4699      	mov	r9, r3
   4ac2a:	240b      	movs	r4, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4ac2c:	464b      	mov	r3, r9
   4ac2e:	4642      	mov	r2, r8
   4ac30:	4639      	mov	r1, r7
   4ac32:	4630      	mov	r0, r6
   4ac34:	f7f9 ffc2 	bl	44bbc <usb_dc_ep_write>
		if (ret == -EAGAIN) {
   4ac38:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   4ac3c:	4605      	mov	r5, r0
		if (ret == -EAGAIN) {
   4ac3e:	d103      	bne.n	4ac48 <usb_write+0x2a>
	z_impl_k_yield();
   4ac40:	f7fe fa94 	bl	4916c <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
   4ac44:	3c01      	subs	r4, #1
   4ac46:	d1f1      	bne.n	4ac2c <usb_write+0xe>
}
   4ac48:	4628      	mov	r0, r5
   4ac4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0004ac4e <usb_get_dev_data_by_cfg>:
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4ac4e:	6800      	ldr	r0, [r0, #0]
   4ac50:	b108      	cbz	r0, 4ac56 <usb_get_dev_data_by_cfg+0x8>
   4ac52:	3804      	subs	r0, #4
   4ac54:	b900      	cbnz	r0, 4ac58 <usb_get_dev_data_by_cfg+0xa>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   4ac56:	4770      	bx	lr
		const struct usb_cfg_data *cfg_cur = dev->config;
   4ac58:	6803      	ldr	r3, [r0, #0]
		if (cfg_cur == cfg) {
   4ac5a:	685b      	ldr	r3, [r3, #4]
   4ac5c:	428b      	cmp	r3, r1
   4ac5e:	d0fa      	beq.n	4ac56 <usb_get_dev_data_by_cfg+0x8>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   4ac60:	6840      	ldr	r0, [r0, #4]
   4ac62:	e7f5      	b.n	4ac50 <usb_get_dev_data_by_cfg+0x2>

0004ac64 <usb_get_dev_data_by_iface>:
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4ac64:	6800      	ldr	r0, [r0, #0]
   4ac66:	b108      	cbz	r0, 4ac6c <usb_get_dev_data_by_iface+0x8>
   4ac68:	3804      	subs	r0, #4
   4ac6a:	b900      	cbnz	r0, 4ac6e <usb_get_dev_data_by_iface+0xa>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   4ac6c:	4770      	bx	lr
		const struct usb_cfg_data *cfg = dev->config;
   4ac6e:	6803      	ldr	r3, [r0, #0]
		const struct usb_if_descriptor *if_desc =
   4ac70:	685b      	ldr	r3, [r3, #4]
		if (if_desc->bInterfaceNumber == iface_num) {
   4ac72:	685b      	ldr	r3, [r3, #4]
   4ac74:	789b      	ldrb	r3, [r3, #2]
   4ac76:	428b      	cmp	r3, r1
   4ac78:	d0f8      	beq.n	4ac6c <usb_get_dev_data_by_iface+0x8>
   4ac7a:	6840      	ldr	r0, [r0, #4]
   4ac7c:	e7f3      	b.n	4ac66 <usb_get_dev_data_by_iface+0x2>

0004ac7e <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
   4ac7e:	b530      	push	{r4, r5, lr}
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   4ac80:	6800      	ldr	r0, [r0, #0]
   4ac82:	b188      	cbz	r0, 4aca8 <usb_get_dev_data_by_ep+0x2a>
   4ac84:	3804      	subs	r0, #4
   4ac86:	b178      	cbz	r0, 4aca8 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
   4ac88:	6803      	ldr	r3, [r0, #0]
   4ac8a:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   4ac8c:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4ac8e:	7f1d      	ldrb	r5, [r3, #28]
			if (ep_data[i].ep_addr == ep) {
   4ac90:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   4ac92:	2300      	movs	r3, #0
   4ac94:	b2dc      	uxtb	r4, r3
   4ac96:	42a5      	cmp	r5, r4
   4ac98:	d801      	bhi.n	4ac9e <usb_get_dev_data_by_ep+0x20>
   4ac9a:	6840      	ldr	r0, [r0, #4]
   4ac9c:	e7f1      	b.n	4ac82 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
   4ac9e:	3301      	adds	r3, #1
   4aca0:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
   4aca4:	428c      	cmp	r4, r1
   4aca6:	d1f5      	bne.n	4ac94 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   4aca8:	bd30      	pop	{r4, r5, pc}

0004acaa <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   4acaa:	4770      	bx	lr

0004acac <get_sectors_cb>:
{
   4acac:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   4acae:	6802      	ldr	r2, [r0, #0]
   4acb0:	684c      	ldr	r4, [r1, #4]
   4acb2:	42a2      	cmp	r2, r4
   4acb4:	d316      	bcc.n	4ace4 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   4acb6:	688b      	ldr	r3, [r1, #8]
   4acb8:	4423      	add	r3, r4
   4acba:	429a      	cmp	r2, r3
   4acbc:	d206      	bcs.n	4accc <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   4acbe:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   4acc2:	42ab      	cmp	r3, r5
   4acc4:	d304      	bcc.n	4acd0 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   4acc6:	f06f 030b 	mvn.w	r3, #11
   4acca:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   4accc:	2000      	movs	r0, #0
   4acce:	e00a      	b.n	4ace6 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   4acd0:	68cd      	ldr	r5, [r1, #12]
   4acd2:	1b12      	subs	r2, r2, r4
   4acd4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   4acd8:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   4acdc:	6842      	ldr	r2, [r0, #4]
   4acde:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   4ace0:	3301      	adds	r3, #1
   4ace2:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   4ace4:	2001      	movs	r0, #1
}
   4ace6:	bd70      	pop	{r4, r5, r6, pc}

0004ace8 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   4ace8:	2200      	movs	r2, #0
   4acea:	4611      	mov	r1, r2
   4acec:	f7e1 b92a 	b.w	2bf44 <settings_save_one>

0004acf0 <settings_name_steq>:
{
   4acf0:	b530      	push	{r4, r5, lr}
	if (next) {
   4acf2:	b10a      	cbz	r2, 4acf8 <settings_name_steq+0x8>
		*next = NULL;
   4acf4:	2300      	movs	r3, #0
   4acf6:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   4acf8:	b190      	cbz	r0, 4ad20 <settings_name_steq+0x30>
   4acfa:	b151      	cbz	r1, 4ad12 <settings_name_steq+0x22>
   4acfc:	1e4d      	subs	r5, r1, #1
	while ((*key != '\0') && (*key == *name) &&
   4acfe:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   4ad02:	4603      	mov	r3, r0
   4ad04:	f810 1b01 	ldrb.w	r1, [r0], #1
   4ad08:	b15c      	cbz	r4, 4ad22 <settings_name_steq+0x32>
   4ad0a:	428c      	cmp	r4, r1
   4ad0c:	d101      	bne.n	4ad12 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   4ad0e:	2c3d      	cmp	r4, #61	; 0x3d
   4ad10:	d1f5      	bne.n	4acfe <settings_name_steq+0xe>
	return 0;
   4ad12:	2000      	movs	r0, #0
   4ad14:	e004      	b.n	4ad20 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   4ad16:	293d      	cmp	r1, #61	; 0x3d
   4ad18:	d008      	beq.n	4ad2c <settings_name_steq+0x3c>
   4ad1a:	fab1 f081 	clz	r0, r1
   4ad1e:	0940      	lsrs	r0, r0, #5
}
   4ad20:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   4ad22:	292f      	cmp	r1, #47	; 0x2f
   4ad24:	d1f7      	bne.n	4ad16 <settings_name_steq+0x26>
		if (next) {
   4ad26:	b10a      	cbz	r2, 4ad2c <settings_name_steq+0x3c>
			*next = name + 1;
   4ad28:	3301      	adds	r3, #1
   4ad2a:	6013      	str	r3, [r2, #0]
		return 1;
   4ad2c:	2001      	movs	r0, #1
   4ad2e:	e7f7      	b.n	4ad20 <settings_name_steq+0x30>

0004ad30 <settings_name_next>:
{
   4ad30:	b530      	push	{r4, r5, lr}
   4ad32:	4603      	mov	r3, r0
	if (next) {
   4ad34:	b109      	cbz	r1, 4ad3a <settings_name_next+0xa>
		*next = NULL;
   4ad36:	2200      	movs	r2, #0
   4ad38:	600a      	str	r2, [r1, #0]
	if (!name) {
   4ad3a:	b16b      	cbz	r3, 4ad58 <settings_name_next+0x28>
   4ad3c:	461a      	mov	r2, r3
   4ad3e:	4614      	mov	r4, r2
   4ad40:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   4ad42:	f812 5b01 	ldrb.w	r5, [r2], #1
   4ad46:	b135      	cbz	r5, 4ad56 <settings_name_next+0x26>
   4ad48:	2d3d      	cmp	r5, #61	; 0x3d
   4ad4a:	d004      	beq.n	4ad56 <settings_name_next+0x26>
   4ad4c:	2d2f      	cmp	r5, #47	; 0x2f
   4ad4e:	d1f6      	bne.n	4ad3e <settings_name_next+0xe>
		if (next) {
   4ad50:	b109      	cbz	r1, 4ad56 <settings_name_next+0x26>
			*next = name + 1;
   4ad52:	3401      	adds	r4, #1
   4ad54:	600c      	str	r4, [r1, #0]
}
   4ad56:	bd30      	pop	{r4, r5, pc}
		return 0;
   4ad58:	4618      	mov	r0, r3
   4ad5a:	e7fc      	b.n	4ad56 <settings_name_next+0x26>

0004ad5c <settings_call_set_handler>:
{
   4ad5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4ad60:	b085      	sub	sp, #20
   4ad62:	4605      	mov	r5, r0
   4ad64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	const char *name_key = name;
   4ad66:	9003      	str	r0, [sp, #12]
{
   4ad68:	460e      	mov	r6, r1
   4ad6a:	4617      	mov	r7, r2
   4ad6c:	4698      	mov	r8, r3
	if (load_arg && load_arg->subtree &&
   4ad6e:	b1b4      	cbz	r4, 4ad9e <settings_call_set_handler+0x42>
   4ad70:	6821      	ldr	r1, [r4, #0]
   4ad72:	b179      	cbz	r1, 4ad94 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   4ad74:	aa03      	add	r2, sp, #12
   4ad76:	f7ff ffbb 	bl	4acf0 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   4ad7a:	b958      	cbnz	r0, 4ad94 <settings_call_set_handler+0x38>
			rc = 0;
   4ad7c:	2000      	movs	r0, #0
   4ad7e:	e006      	b.n	4ad8e <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   4ad80:	68a3      	ldr	r3, [r4, #8]
   4ad82:	9300      	str	r3, [sp, #0]
   4ad84:	463a      	mov	r2, r7
   4ad86:	4643      	mov	r3, r8
   4ad88:	4631      	mov	r1, r6
   4ad8a:	9803      	ldr	r0, [sp, #12]
   4ad8c:	47c8      	blx	r9
}
   4ad8e:	b005      	add	sp, #20
   4ad90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   4ad94:	f8d4 9004 	ldr.w	r9, [r4, #4]
   4ad98:	f1b9 0f00 	cmp.w	r9, #0
   4ad9c:	d1f0      	bne.n	4ad80 <settings_call_set_handler+0x24>
		ch = settings_parse_and_lookup(name, &name_key);
   4ad9e:	a903      	add	r1, sp, #12
   4ada0:	4628      	mov	r0, r5
   4ada2:	f7e1 f99d 	bl	2c0e0 <settings_parse_and_lookup>
		if (!ch) {
   4ada6:	2800      	cmp	r0, #0
   4ada8:	d0e8      	beq.n	4ad7c <settings_call_set_handler+0x20>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   4adaa:	6884      	ldr	r4, [r0, #8]
   4adac:	9803      	ldr	r0, [sp, #12]
   4adae:	4643      	mov	r3, r8
   4adb0:	463a      	mov	r2, r7
   4adb2:	4631      	mov	r1, r6
   4adb4:	47a0      	blx	r4
   4adb6:	e7e1      	b.n	4ad7c <settings_call_set_handler+0x20>

0004adb8 <settings_nvs_read_fn>:
{
   4adb8:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   4adba:	4613      	mov	r3, r2
{
   4adbc:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   4adbe:	460a      	mov	r2, r1
   4adc0:	8881      	ldrh	r1, [r0, #4]
   4adc2:	6800      	ldr	r0, [r0, #0]
   4adc4:	f7ff ff24 	bl	4ac10 <nvs_read>
}
   4adc8:	42a0      	cmp	r0, r4
   4adca:	bfa8      	it	ge
   4adcc:	4620      	movge	r0, r4
   4adce:	bd10      	pop	{r4, pc}

0004add0 <settings_nvs_save>:
{
   4add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4add4:	b097      	sub	sp, #92	; 0x5c
   4add6:	4604      	mov	r4, r0
   4add8:	9201      	str	r2, [sp, #4]
   4adda:	469b      	mov	fp, r3
	if (!name) {
   4addc:	468a      	mov	sl, r1
   4adde:	2900      	cmp	r1, #0
   4ade0:	d06b      	beq.n	4aeba <settings_nvs_save+0xea>
	delete = ((value == NULL) || (val_len == 0));
   4ade2:	b1da      	cbz	r2, 4ae1c <settings_nvs_save+0x4c>
   4ade4:	fabb f78b 	clz	r7, fp
   4ade8:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   4adea:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   4adec:	3501      	adds	r5, #1
   4adee:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   4adf0:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   4adf2:	f104 0908 	add.w	r9, r4, #8
		name_id--;
   4adf6:	1e6e      	subs	r6, r5, #1
   4adf8:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   4adfa:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   4adfe:	d02d      	beq.n	4ae5c <settings_nvs_save+0x8c>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   4ae00:	234a      	movs	r3, #74	; 0x4a
   4ae02:	aa03      	add	r2, sp, #12
   4ae04:	4631      	mov	r1, r6
   4ae06:	4648      	mov	r0, r9
   4ae08:	f7ff ff02 	bl	4ac10 <nvs_read>
		if (rc < 0) {
   4ae0c:	2800      	cmp	r0, #0
   4ae0e:	da07      	bge.n	4ae20 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   4ae10:	f110 0f02 	cmn.w	r0, #2
   4ae14:	bf08      	it	eq
   4ae16:	46b0      	moveq	r8, r6
   4ae18:	4635      	mov	r5, r6
   4ae1a:	e7ec      	b.n	4adf6 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   4ae1c:	2701      	movs	r7, #1
   4ae1e:	e7e4      	b.n	4adea <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   4ae20:	ab16      	add	r3, sp, #88	; 0x58
   4ae22:	4418      	add	r0, r3
   4ae24:	2300      	movs	r3, #0
   4ae26:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   4ae2a:	a903      	add	r1, sp, #12
   4ae2c:	4650      	mov	r0, sl
   4ae2e:	f001 fa32 	bl	4c296 <strcmp>
   4ae32:	2800      	cmp	r0, #0
   4ae34:	d1f0      	bne.n	4ae18 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   4ae36:	b1a7      	cbz	r7, 4ae62 <settings_nvs_save+0x92>
   4ae38:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   4ae3a:	42b3      	cmp	r3, r6
   4ae3c:	d143      	bne.n	4aec6 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   4ae3e:	4622      	mov	r2, r4
   4ae40:	1e73      	subs	r3, r6, #1
   4ae42:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   4ae46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4ae4a:	2302      	movs	r3, #2
   4ae4c:	4648      	mov	r0, r9
   4ae4e:	f7e0 f911 	bl	2b074 <nvs_write>
			if (rc < 0) {
   4ae52:	2800      	cmp	r0, #0
   4ae54:	da37      	bge.n	4aec6 <settings_nvs_save+0xf6>
}
   4ae56:	b017      	add	sp, #92	; 0x5c
   4ae58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   4ae5c:	b1ff      	cbz	r7, 4ae9e <settings_nvs_save+0xce>
		return 0;
   4ae5e:	2000      	movs	r0, #0
   4ae60:	e7f9      	b.n	4ae56 <settings_nvs_save+0x86>
   4ae62:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   4ae64:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   4ae68:	d02a      	beq.n	4aec0 <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   4ae6a:	f104 0508 	add.w	r5, r4, #8
   4ae6e:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   4ae72:	465b      	mov	r3, fp
   4ae74:	9a01      	ldr	r2, [sp, #4]
   4ae76:	b289      	uxth	r1, r1
   4ae78:	4628      	mov	r0, r5
   4ae7a:	f7e0 f8fb 	bl	2b074 <nvs_write>
	if (rc < 0) {
   4ae7e:	2800      	cmp	r0, #0
   4ae80:	dbe9      	blt.n	4ae56 <settings_nvs_save+0x86>
	if (write_name) {
   4ae82:	b977      	cbnz	r7, 4aea2 <settings_nvs_save+0xd2>
	if (write_name_id > cf->last_name_id) {
   4ae84:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   4ae86:	4543      	cmp	r3, r8
   4ae88:	d2e9      	bcs.n	4ae5e <settings_nvs_save+0x8e>
		cf->last_name_id = write_name_id;
   4ae8a:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   4ae8c:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   4ae8e:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   4ae92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4ae96:	4628      	mov	r0, r5
   4ae98:	f7e0 f8ec 	bl	2b074 <nvs_write>
   4ae9c:	e020      	b.n	4aee0 <settings_nvs_save+0x110>
	write_name = true;
   4ae9e:	2701      	movs	r7, #1
   4aea0:	e7e0      	b.n	4ae64 <settings_nvs_save+0x94>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   4aea2:	4650      	mov	r0, sl
   4aea4:	f001 f9f0 	bl	4c288 <strlen>
   4aea8:	4652      	mov	r2, sl
   4aeaa:	4603      	mov	r3, r0
   4aeac:	4641      	mov	r1, r8
   4aeae:	4628      	mov	r0, r5
   4aeb0:	f7e0 f8e0 	bl	2b074 <nvs_write>
		if (rc < 0) {
   4aeb4:	2800      	cmp	r0, #0
   4aeb6:	dae5      	bge.n	4ae84 <settings_nvs_save+0xb4>
   4aeb8:	e7cd      	b.n	4ae56 <settings_nvs_save+0x86>
		return -EINVAL;
   4aeba:	f06f 0015 	mvn.w	r0, #21
   4aebe:	e7ca      	b.n	4ae56 <settings_nvs_save+0x86>
		return -ENOMEM;
   4aec0:	f06f 000b 	mvn.w	r0, #11
   4aec4:	e7c7      	b.n	4ae56 <settings_nvs_save+0x86>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   4aec6:	4631      	mov	r1, r6
   4aec8:	4648      	mov	r0, r9
   4aeca:	f7ff fe49 	bl	4ab60 <nvs_delete>
			if (rc >= 0) {
   4aece:	2800      	cmp	r0, #0
   4aed0:	dbc1      	blt.n	4ae56 <settings_nvs_save+0x86>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   4aed2:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   4aed6:	313f      	adds	r1, #63	; 0x3f
   4aed8:	b289      	uxth	r1, r1
   4aeda:	4648      	mov	r0, r9
   4aedc:	f7ff fe40 	bl	4ab60 <nvs_delete>
	if (rc < 0) {
   4aee0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   4aee4:	e7b7      	b.n	4ae56 <settings_nvs_save+0x86>

0004aee6 <settings_nvs_backend_init>:
{
   4aee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   4aee8:	f100 0608 	add.w	r6, r0, #8
   4aeec:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   4aeee:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   4aef0:	4630      	mov	r0, r6
   4aef2:	f7df ff61 	bl	2adb8 <nvs_init>
	if (rc) {
   4aef6:	4605      	mov	r5, r0
   4aef8:	b970      	cbnz	r0, 4af18 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   4aefa:	2302      	movs	r3, #2
   4aefc:	f10d 0206 	add.w	r2, sp, #6
   4af00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   4af04:	4630      	mov	r0, r6
   4af06:	f7ff fe83 	bl	4ac10 <nvs_read>
	if (rc < 0) {
   4af0a:	2800      	cmp	r0, #0
		cf->last_name_id = NVS_NAMECNT_ID;
   4af0c:	bfb4      	ite	lt
   4af0e:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   4af12:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   4af16:	8723      	strh	r3, [r4, #56]	; 0x38
}
   4af18:	4628      	mov	r0, r5
   4af1a:	b002      	add	sp, #8
   4af1c:	bd70      	pop	{r4, r5, r6, pc}

0004af1e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4af1e:	f3bf 8f5b 	dmb	ish
   4af22:	6800      	ldr	r0, [r0, #0]
   4af24:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4af28:	4108      	asrs	r0, r1
}
   4af2a:	f000 0001 	and.w	r0, r0, #1
   4af2e:	4770      	bx	lr

0004af30 <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   4af30:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   4af32:	b118      	cbz	r0, 4af3c <pm_device_is_busy+0xc>
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
   4af34:	2100      	movs	r1, #0
   4af36:	3004      	adds	r0, #4
   4af38:	f7ff bff1 	b.w	4af1e <atomic_test_bit>
}
   4af3c:	4770      	bx	lr

0004af3e <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   4af3e:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   4af40:	b118      	cbz	r0, 4af4a <pm_device_wakeup_is_enabled+0xc>
		return false;
	}

	return atomic_test_bit(&pm->flags,
   4af42:	2102      	movs	r1, #2
   4af44:	3004      	adds	r0, #4
   4af46:	f7ff bfea 	b.w	4af1e <atomic_test_bit>
			       PM_DEVICE_FLAG_WS_ENABLED);
}
   4af4a:	4770      	bx	lr

0004af4c <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   4af4c:	6980      	ldr	r0, [r0, #24]

	if (pm == NULL) {
   4af4e:	b118      	cbz	r0, 4af58 <pm_device_state_is_locked+0xc>
		return false;
	}

	return atomic_test_bit(&pm->flags,
   4af50:	2104      	movs	r1, #4
   4af52:	4408      	add	r0, r1
   4af54:	f7ff bfe3 	b.w	4af1e <atomic_test_bit>
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
   4af58:	4770      	bx	lr

0004af5a <pm_device_action_run>:
{
   4af5a:	b570      	push	{r4, r5, r6, lr}
	struct pm_device *pm = dev->pm;
   4af5c:	6984      	ldr	r4, [r0, #24]
{
   4af5e:	4603      	mov	r3, r0
   4af60:	460d      	mov	r5, r1
	if (pm == NULL) {
   4af62:	b37c      	cbz	r4, 4afc4 <pm_device_action_run+0x6a>
	if (pm_device_state_is_locked(dev)) {
   4af64:	f7ff fff2 	bl	4af4c <pm_device_state_is_locked>
   4af68:	bb78      	cbnz	r0, 4afca <pm_device_action_run+0x70>
	switch (action) {
   4af6a:	2d04      	cmp	r5, #4
   4af6c:	d809      	bhi.n	4af82 <pm_device_action_run+0x28>
   4af6e:	e8df f005 	tbb	[pc, r5]
   4af72:	0b03      	.short	0x0b03
   4af74:	211c      	.short	0x211c
   4af76:	03          	.byte	0x03
   4af77:	00          	.byte	0x00
		if (pm->state == PM_DEVICE_STATE_SUSPENDED) {
   4af78:	7a22      	ldrb	r2, [r4, #8]
   4af7a:	2a01      	cmp	r2, #1
   4af7c:	d028      	beq.n	4afd0 <pm_device_action_run+0x76>
		} else if (pm->state == PM_DEVICE_STATE_OFF) {
   4af7e:	2a03      	cmp	r2, #3
   4af80:	d11b      	bne.n	4afba <pm_device_action_run+0x60>
		return -ENOTSUP;
   4af82:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4af86:	e00f      	b.n	4afa8 <pm_device_action_run+0x4e>
		if (pm->state == PM_DEVICE_STATE_ACTIVE) {
   4af88:	7a22      	ldrb	r2, [r4, #8]
   4af8a:	b30a      	cbz	r2, 4afd0 <pm_device_action_run+0x76>
		state = PM_DEVICE_STATE_ACTIVE;
   4af8c:	2600      	movs	r6, #0
	ret = pm->action_cb(dev, action);
   4af8e:	68e2      	ldr	r2, [r4, #12]
   4af90:	4629      	mov	r1, r5
   4af92:	4618      	mov	r0, r3
   4af94:	4790      	blx	r2
	if (ret < 0) {
   4af96:	2800      	cmp	r0, #0
   4af98:	da11      	bge.n	4afbe <pm_device_action_run+0x64>
		if ((ret == -ENOTSUP) && ((action == PM_DEVICE_ACTION_TURN_ON)
   4af9a:	f110 0f86 	cmn.w	r0, #134	; 0x86
   4af9e:	d103      	bne.n	4afa8 <pm_device_action_run+0x4e>
   4afa0:	3d02      	subs	r5, #2
   4afa2:	2d01      	cmp	r5, #1
   4afa4:	d8ed      	bhi.n	4af82 <pm_device_action_run+0x28>
			pm->state = state;
   4afa6:	7226      	strb	r6, [r4, #8]
}
   4afa8:	bd70      	pop	{r4, r5, r6, pc}
		if (pm->state == PM_DEVICE_STATE_OFF) {
   4afaa:	7a22      	ldrb	r2, [r4, #8]
   4afac:	2a03      	cmp	r2, #3
   4afae:	d00f      	beq.n	4afd0 <pm_device_action_run+0x76>
		state = PM_DEVICE_STATE_OFF;
   4afb0:	2603      	movs	r6, #3
   4afb2:	e7ec      	b.n	4af8e <pm_device_action_run+0x34>
		if (pm->state != PM_DEVICE_STATE_OFF) {
   4afb4:	7a22      	ldrb	r2, [r4, #8]
   4afb6:	2a03      	cmp	r2, #3
   4afb8:	d1e3      	bne.n	4af82 <pm_device_action_run+0x28>
		state = PM_DEVICE_STATE_SUSPENDED;
   4afba:	2601      	movs	r6, #1
   4afbc:	e7e7      	b.n	4af8e <pm_device_action_run+0x34>
	pm->state = state;
   4afbe:	7226      	strb	r6, [r4, #8]
	return 0;
   4afc0:	2000      	movs	r0, #0
   4afc2:	e7f1      	b.n	4afa8 <pm_device_action_run+0x4e>
		return -ENOSYS;
   4afc4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   4afc8:	e7ee      	b.n	4afa8 <pm_device_action_run+0x4e>
		return -EPERM;
   4afca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4afce:	e7eb      	b.n	4afa8 <pm_device_action_run+0x4e>
			return -EALREADY;
   4afd0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   4afd4:	e7e8      	b.n	4afa8 <pm_device_action_run+0x4e>

0004afd6 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   4afd6:	428b      	cmp	r3, r1
{
   4afd8:	b538      	push	{r3, r4, r5, lr}
   4afda:	4615      	mov	r5, r2
   4afdc:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   4afde:	d805      	bhi.n	4afec <_copy+0x16>
		(void)memcpy(to, from, from_len);
   4afe0:	461a      	mov	r2, r3
   4afe2:	4629      	mov	r1, r5
   4afe4:	f001 f982 	bl	4c2ec <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   4afe8:	4620      	mov	r0, r4
   4afea:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   4afec:	2400      	movs	r4, #0
   4afee:	e7fb      	b.n	4afe8 <_copy+0x12>

0004aff0 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   4aff0:	f001 b987 	b.w	4c302 <memset>

0004aff4 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   4aff4:	09c3      	lsrs	r3, r0, #7
   4aff6:	005a      	lsls	r2, r3, #1
   4aff8:	4413      	add	r3, r2
   4affa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   4affe:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   4b002:	b2c0      	uxtb	r0, r0
   4b004:	4770      	bx	lr

0004b006 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   4b006:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4b00a:	4607      	mov	r7, r0
   4b00c:	b0a9      	sub	sp, #164	; 0xa4
   4b00e:	4688      	mov	r8, r1
   4b010:	4614      	mov	r4, r2
   4b012:	2640      	movs	r6, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   4b014:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   4b018:	f7e1 fb84 	bl	2c724 <uECC_get_rng>
		if (!rng_function ||
   4b01c:	4603      	mov	r3, r0
   4b01e:	2800      	cmp	r0, #0
   4b020:	d03e      	beq.n	4b0a0 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   4b022:	2140      	movs	r1, #64	; 0x40
   4b024:	a808      	add	r0, sp, #32
   4b026:	4798      	blx	r3
		if (!rng_function ||
   4b028:	b3d0      	cbz	r0, 4b0a0 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   4b02a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   4b02e:	f112 031f 	adds.w	r3, r2, #31
   4b032:	bf48      	it	mi
   4b034:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   4b038:	466d      	mov	r5, sp
   4b03a:	464a      	mov	r2, r9
   4b03c:	a908      	add	r1, sp, #32
   4b03e:	4628      	mov	r0, r5
   4b040:	f343 1347 	sbfx	r3, r3, #5, #8
   4b044:	f000 f9fd 	bl	4b442 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   4b048:	4622      	mov	r2, r4
   4b04a:	4629      	mov	r1, r5
   4b04c:	a818      	add	r0, sp, #96	; 0x60
   4b04e:	f000 fe13 	bl	4bc78 <EccPoint_compute_public_key>
   4b052:	b318      	cbz	r0, 4b09c <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   4b054:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   4b058:	1dd9      	adds	r1, r3, #7
   4b05a:	bf48      	it	mi
   4b05c:	f103 010e 	addmi.w	r1, r3, #14
   4b060:	462a      	mov	r2, r5
   4b062:	4640      	mov	r0, r8
   4b064:	10c9      	asrs	r1, r1, #3
   4b066:	f000 fe2f 	bl	4bcc8 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   4b06a:	aa18      	add	r2, sp, #96	; 0x60
   4b06c:	f994 1001 	ldrsb.w	r1, [r4, #1]
   4b070:	4638      	mov	r0, r7
   4b072:	f000 fe29 	bl	4bcc8 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   4b076:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   4b07a:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   4b07e:	ab18      	add	r3, sp, #96	; 0x60
   4b080:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   4b084:	1878      	adds	r0, r7, r1
   4b086:	f000 fe1f 	bl	4bcc8 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   4b08a:	2220      	movs	r2, #32
   4b08c:	2100      	movs	r1, #0
   4b08e:	4628      	mov	r0, r5
   4b090:	f001 f937 	bl	4c302 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   4b094:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   4b096:	b029      	add	sp, #164	; 0xa4
   4b098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   4b09c:	3e01      	subs	r6, #1
   4b09e:	d1bb      	bne.n	4b018 <uECC_make_key+0x12>
        		return 0;
   4b0a0:	2000      	movs	r0, #0
   4b0a2:	e7f8      	b.n	4b096 <uECC_make_key+0x90>

0004b0a4 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   4b0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4b0a8:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   4b0aa:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   4b0ae:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   4b0b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   4b0b6:	b0a4      	sub	sp, #144	; 0x90
   4b0b8:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   4b0ba:	1dda      	adds	r2, r3, #7
   4b0bc:	bf48      	it	mi
   4b0be:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   4b0c2:	ad04      	add	r5, sp, #16
{
   4b0c4:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   4b0c6:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   4b0c8:	4628      	mov	r0, r5
   4b0ca:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   4b0cc:	9502      	str	r5, [sp, #8]
   4b0ce:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   4b0d0:	f000 fe0e 	bl	4bcf0 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   4b0d4:	463a      	mov	r2, r7
   4b0d6:	4649      	mov	r1, r9
   4b0d8:	a814      	add	r0, sp, #80	; 0x50
   4b0da:	f000 fe09 	bl	4bcf0 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   4b0de:	ab14      	add	r3, sp, #80	; 0x50
   4b0e0:	eb09 0107 	add.w	r1, r9, r7
   4b0e4:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   4b0e8:	463a      	mov	r2, r7
   4b0ea:	f000 fe01 	bl	4bcf0 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   4b0ee:	4623      	mov	r3, r4
   4b0f0:	4632      	mov	r2, r6
   4b0f2:	4629      	mov	r1, r5
   4b0f4:	4628      	mov	r0, r5
   4b0f6:	f000 fd92 	bl	4bc1e <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   4b0fa:	fab0 f080 	clz	r0, r0
   4b0fe:	9401      	str	r4, [sp, #4]
   4b100:	ab24      	add	r3, sp, #144	; 0x90
   4b102:	0940      	lsrs	r0, r0, #5
   4b104:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   4b108:	8863      	ldrh	r3, [r4, #2]
   4b10a:	3301      	adds	r3, #1
   4b10c:	b21b      	sxth	r3, r3
   4b10e:	9300      	str	r3, [sp, #0]
   4b110:	a914      	add	r1, sp, #80	; 0x50
   4b112:	2300      	movs	r3, #0
   4b114:	f850 2c88 	ldr.w	r2, [r0, #-136]
   4b118:	4608      	mov	r0, r1
   4b11a:	f000 fcb1 	bl	4ba80 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   4b11e:	aa14      	add	r2, sp, #80	; 0x50
   4b120:	4639      	mov	r1, r7
   4b122:	4640      	mov	r0, r8
   4b124:	f000 fdd0 	bl	4bcc8 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   4b128:	4621      	mov	r1, r4
   4b12a:	a814      	add	r0, sp, #80	; 0x50
   4b12c:	f000 fc1f 	bl	4b96e <EccPoint_isZero>
   4b130:	ac02      	add	r4, sp, #8
   4b132:	4607      	mov	r7, r0
   4b134:	2208      	movs	r2, #8
   4b136:	2100      	movs	r1, #0
   4b138:	4620      	mov	r0, r4
   4b13a:	f001 f8e2 	bl	4c302 <memset>
   4b13e:	2220      	movs	r2, #32
   4b140:	2100      	movs	r1, #0
   4b142:	4630      	mov	r0, r6
   4b144:	f001 f8dd 	bl	4c302 <memset>
   4b148:	2220      	movs	r2, #32
   4b14a:	2100      	movs	r1, #0
   4b14c:	4628      	mov	r0, r5
   4b14e:	f001 f8d8 	bl	4c302 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   4b152:	fab7 f087 	clz	r0, r7
   4b156:	0940      	lsrs	r0, r0, #5
   4b158:	b024      	add	sp, #144	; 0x90
   4b15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004b15e <uECC_vli_add>:
{
   4b15e:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   4b160:	2400      	movs	r4, #0
{
   4b162:	4607      	mov	r7, r0
	uECC_word_t carry = 0;
   4b164:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   4b166:	b265      	sxtb	r5, r4
   4b168:	42ab      	cmp	r3, r5
   4b16a:	dc00      	bgt.n	4b16e <uECC_vli_add+0x10>
}
   4b16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   4b16e:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   4b172:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   4b176:	4435      	add	r5, r6
   4b178:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   4b17a:	42ae      	cmp	r6, r5
		uECC_word_t val = (sum < left[i]);
   4b17c:	bf8c      	ite	hi
   4b17e:	2601      	movhi	r6, #1
   4b180:	2600      	movls	r6, #0
		result[i] = sum;
   4b182:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   4b186:	bf18      	it	ne
   4b188:	4630      	movne	r0, r6
		result[i] = sum;
   4b18a:	3401      	adds	r4, #1
   4b18c:	e7eb      	b.n	4b166 <uECC_vli_add+0x8>

0004b18e <uECC_vli_rshift1>:
	vli += num_words;
   4b18e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   4b192:	2300      	movs	r3, #0
	while (vli-- > end) {
   4b194:	4288      	cmp	r0, r1
   4b196:	d300      	bcc.n	4b19a <uECC_vli_rshift1+0xc>
}
   4b198:	4770      	bx	lr
		uECC_word_t temp = *vli;
   4b19a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   4b19e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   4b1a2:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   4b1a4:	07d3      	lsls	r3, r2, #31
   4b1a6:	e7f5      	b.n	4b194 <uECC_vli_rshift1+0x6>

0004b1a8 <vli_modInv_update>:
	if (!EVEN(uv)) {
   4b1a8:	6803      	ldr	r3, [r0, #0]
{
   4b1aa:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   4b1ac:	f013 0601 	ands.w	r6, r3, #1
{
   4b1b0:	4605      	mov	r5, r0
   4b1b2:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   4b1b4:	d005      	beq.n	4b1c2 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   4b1b6:	4613      	mov	r3, r2
   4b1b8:	460a      	mov	r2, r1
   4b1ba:	4601      	mov	r1, r0
   4b1bc:	f7ff ffcf 	bl	4b15e <uECC_vli_add>
   4b1c0:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   4b1c2:	4621      	mov	r1, r4
   4b1c4:	4628      	mov	r0, r5
   4b1c6:	f7ff ffe2 	bl	4b18e <uECC_vli_rshift1>
	if (carry) {
   4b1ca:	b146      	cbz	r6, 4b1de <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   4b1cc:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   4b1d0:	3a01      	subs	r2, #1
   4b1d2:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   4b1d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   4b1da:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   4b1de:	bd70      	pop	{r4, r5, r6, pc}

0004b1e0 <uECC_vli_mult>:
{
   4b1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   4b1e4:	2500      	movs	r5, #0
{
   4b1e6:	b087      	sub	sp, #28
   4b1e8:	e9cd 3200 	strd	r3, r2, [sp]
	uECC_word_t r1 = 0;
   4b1ec:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   4b1ee:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   4b1f0:	9b00      	ldr	r3, [sp, #0]
   4b1f2:	fa4f f885 	sxtb.w	r8, r5
   4b1f6:	4543      	cmp	r3, r8
   4b1f8:	dc14      	bgt.n	4b224 <uECC_vli_mult+0x44>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   4b1fa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   4b1fe:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   4b202:	9502      	str	r5, [sp, #8]
   4b204:	f04f 0c01 	mov.w	ip, #1
   4b208:	461d      	mov	r5, r3
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   4b20a:	f06f 0b03 	mvn.w	fp, #3
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   4b20e:	9b02      	ldr	r3, [sp, #8]
   4b210:	429d      	cmp	r5, r3
   4b212:	db2d      	blt.n	4b270 <uECC_vli_mult+0x90>
	result[num_words * 2 - 1] = r0;
   4b214:	9b00      	ldr	r3, [sp, #0]
   4b216:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   4b21a:	f840 2c04 	str.w	r2, [r0, #-4]
}
   4b21e:	b007      	add	sp, #28
   4b220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b224:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   4b226:	f04f 0c00 	mov.w	ip, #0
   4b22a:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   4b22e:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   4b230:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   4b234:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   4b238:	f859 7904 	ldr.w	r7, [r9], #-4
	r01 += p;
   4b23c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   4b240:	fba7 ab06 	umull	sl, fp, r7, r6
   4b244:	eb1a 0603 	adds.w	r6, sl, r3
   4b248:	f10c 0c01 	add.w	ip, ip, #1
   4b24c:	eb5b 0704 	adcs.w	r7, fp, r4
		for (i = 0; i <= k; ++i) {
   4b250:	fa4f fa8c 	sxtb.w	sl, ip
   4b254:	bf2c      	ite	cs
   4b256:	2201      	movcs	r2, #1
   4b258:	2200      	movcc	r2, #0
   4b25a:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   4b25c:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   4b25e:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   4b260:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   4b262:	dde5      	ble.n	4b230 <uECC_vli_mult+0x50>
		result[k] = r0;
   4b264:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   4b268:	463a      	mov	r2, r7
   4b26a:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   4b26c:	4674      	mov	r4, lr
   4b26e:	e7bf      	b.n	4b1f0 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   4b270:	9e01      	ldr	r6, [sp, #4]
   4b272:	4627      	mov	r7, r4
   4b274:	fa4f fe8c 	sxtb.w	lr, ip
   4b278:	eb06 0a85 	add.w	sl, r6, r5, lsl #2
   4b27c:	2400      	movs	r4, #0
   4b27e:	9b00      	ldr	r3, [sp, #0]
   4b280:	fa4f f68e 	sxtb.w	r6, lr
   4b284:	42b3      	cmp	r3, r6
   4b286:	dc09      	bgt.n	4b29c <uECC_vli_mult+0xbc>
		result[k] = r0;
   4b288:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
		r2 = 0;
   4b28c:	f10c 0c01 	add.w	ip, ip, #1
   4b290:	3501      	adds	r5, #1
   4b292:	b26d      	sxtb	r5, r5
   4b294:	fa5f fc8c 	uxtb.w	ip, ip
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   4b298:	463a      	mov	r2, r7
   4b29a:	e7b8      	b.n	4b20e <uECC_vli_mult+0x2e>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   4b29c:	fb0b f60e 	mul.w	r6, fp, lr
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   4b2a0:	e9cd 2704 	strd	r2, r7, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   4b2a4:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
   4b2a8:	f85a 6006 	ldr.w	r6, [sl, r6]
   4b2ac:	fba6 8903 	umull	r8, r9, r6, r3
   4b2b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   4b2b4:	eb18 0602 	adds.w	r6, r8, r2
   4b2b8:	eb59 0703 	adcs.w	r7, r9, r3
   4b2bc:	bf2c      	ite	cs
   4b2be:	2201      	movcs	r2, #1
   4b2c0:	2200      	movcc	r2, #0
	*r2 += (r01 < p);
   4b2c2:	4414      	add	r4, r2
	*r0 = (uECC_word_t)r01;
   4b2c4:	f10e 0e01 	add.w	lr, lr, #1
   4b2c8:	4632      	mov	r2, r6
   4b2ca:	e7d8      	b.n	4b27e <uECC_vli_mult+0x9e>

0004b2cc <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   4b2cc:	2300      	movs	r3, #0
{
   4b2ce:	b510      	push	{r4, lr}
		 vli[i] = 0;
   4b2d0:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   4b2d2:	b25a      	sxtb	r2, r3
   4b2d4:	4291      	cmp	r1, r2
   4b2d6:	dc00      	bgt.n	4b2da <uECC_vli_clear+0xe>
}
   4b2d8:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   4b2da:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   4b2de:	3301      	adds	r3, #1
   4b2e0:	e7f7      	b.n	4b2d2 <uECC_vli_clear+0x6>

0004b2e2 <uECC_vli_isZero>:
{
   4b2e2:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   4b2e4:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   4b2e6:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   4b2e8:	b25c      	sxtb	r4, r3
   4b2ea:	42a1      	cmp	r1, r4
   4b2ec:	dc03      	bgt.n	4b2f6 <uECC_vli_isZero+0x14>
}
   4b2ee:	fab2 f082 	clz	r0, r2
   4b2f2:	0940      	lsrs	r0, r0, #5
   4b2f4:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   4b2f6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   4b2fa:	3301      	adds	r3, #1
   4b2fc:	4322      	orrs	r2, r4
   4b2fe:	e7f3      	b.n	4b2e8 <uECC_vli_isZero+0x6>

0004b300 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b300:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   4b302:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b304:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   4b308:	f001 011f 	and.w	r1, r1, #31
   4b30c:	fa03 f101 	lsl.w	r1, r3, r1
}
   4b310:	4008      	ands	r0, r1
   4b312:	4770      	bx	lr

0004b314 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   4b314:	3901      	subs	r1, #1
{
   4b316:	b510      	push	{r4, lr}
   4b318:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   4b31a:	1d04      	adds	r4, r0, #4
   4b31c:	060a      	lsls	r2, r1, #24
   4b31e:	b2cb      	uxtb	r3, r1
   4b320:	d404      	bmi.n	4b32c <uECC_vli_numBits+0x18>
   4b322:	3901      	subs	r1, #1
   4b324:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
   4b328:	2a00      	cmp	r2, #0
   4b32a:	d0f7      	beq.n	4b31c <uECC_vli_numBits+0x8>
	return (i + 1);
   4b32c:	3301      	adds	r3, #1
   4b32e:	b25b      	sxtb	r3, r3
	if (num_digits == 0) {
   4b330:	b173      	cbz	r3, 4b350 <uECC_vli_numBits+0x3c>
	digit = vli[num_digits - 1];
   4b332:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   4b336:	3a01      	subs	r2, #1
   4b338:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
	for (i = 0; digit; ++i) {
   4b33c:	2000      	movs	r0, #0
   4b33e:	b922      	cbnz	r2, 4b34a <uECC_vli_numBits+0x36>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   4b340:	3b01      	subs	r3, #1
   4b342:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   4b346:	b218      	sxth	r0, r3
}
   4b348:	bd10      	pop	{r4, pc}
		digit >>= 1;
   4b34a:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   4b34c:	3001      	adds	r0, #1
   4b34e:	e7f6      	b.n	4b33e <uECC_vli_numBits+0x2a>
		return 0;
   4b350:	4618      	mov	r0, r3
   4b352:	e7f9      	b.n	4b348 <uECC_vli_numBits+0x34>

0004b354 <uECC_vli_set>:
{
   4b354:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   4b356:	2300      	movs	r3, #0
   4b358:	b25c      	sxtb	r4, r3
   4b35a:	42a2      	cmp	r2, r4
   4b35c:	dc00      	bgt.n	4b360 <uECC_vli_set+0xc>
}
   4b35e:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   4b360:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   4b364:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
   4b368:	3301      	adds	r3, #1
   4b36a:	e7f5      	b.n	4b358 <uECC_vli_set+0x4>

0004b36c <uECC_vli_cmp_unsafe>:
{
   4b36c:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   4b36e:	3a01      	subs	r2, #1
   4b370:	b252      	sxtb	r2, r2
   4b372:	0613      	lsls	r3, r2, #24
   4b374:	d501      	bpl.n	4b37a <uECC_vli_cmp_unsafe+0xe>
	return 0;
   4b376:	2000      	movs	r0, #0
}
   4b378:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   4b37a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   4b37e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   4b382:	429c      	cmp	r4, r3
   4b384:	d805      	bhi.n	4b392 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   4b386:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   4b38a:	d2f2      	bcs.n	4b372 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   4b38c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4b390:	e7f2      	b.n	4b378 <uECC_vli_cmp_unsafe+0xc>
			return 1;
   4b392:	2001      	movs	r0, #1
   4b394:	e7f0      	b.n	4b378 <uECC_vli_cmp_unsafe+0xc>

0004b396 <uECC_vli_equal>:
{
   4b396:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   4b398:	3a01      	subs	r2, #1
   4b39a:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   4b39c:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   4b39e:	0614      	lsls	r4, r2, #24
   4b3a0:	d503      	bpl.n	4b3aa <uECC_vli_equal+0x14>
}
   4b3a2:	1c18      	adds	r0, r3, #0
   4b3a4:	bf18      	it	ne
   4b3a6:	2001      	movne	r0, #1
   4b3a8:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   4b3aa:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   4b3ae:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   4b3b2:	406c      	eors	r4, r5
   4b3b4:	4323      	orrs	r3, r4
   4b3b6:	3a01      	subs	r2, #1
   4b3b8:	e7f1      	b.n	4b39e <uECC_vli_equal+0x8>

0004b3ba <uECC_vli_sub>:
{
   4b3ba:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   4b3bc:	2400      	movs	r4, #0
{
   4b3be:	4607      	mov	r7, r0
   4b3c0:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   4b3c2:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   4b3c4:	b265      	sxtb	r5, r4
   4b3c6:	45ac      	cmp	ip, r5
   4b3c8:	dc00      	bgt.n	4b3cc <uECC_vli_sub+0x12>
}
   4b3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   4b3cc:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
   4b3d0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   4b3d4:	1a35      	subs	r5, r6, r0
   4b3d6:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   4b3d8:	42ae      	cmp	r6, r5
		uECC_word_t val = (diff > left[i]);
   4b3da:	bf34      	ite	cc
   4b3dc:	2601      	movcc	r6, #1
   4b3de:	2600      	movcs	r6, #0
		result[i] = diff;
   4b3e0:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   4b3e4:	bf18      	it	ne
   4b3e6:	4630      	movne	r0, r6
		result[i] = diff;
   4b3e8:	3401      	adds	r4, #1
   4b3ea:	e7eb      	b.n	4b3c4 <uECC_vli_sub+0xa>

0004b3ec <uECC_vli_modAdd>:
{
   4b3ec:	b570      	push	{r4, r5, r6, lr}
   4b3ee:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   4b3f2:	461e      	mov	r6, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   4b3f4:	4623      	mov	r3, r4
{
   4b3f6:	4605      	mov	r5, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   4b3f8:	f7ff feb1 	bl	4b15e <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   4b3fc:	b930      	cbnz	r0, 4b40c <uECC_vli_modAdd+0x20>
   4b3fe:	4622      	mov	r2, r4
   4b400:	4629      	mov	r1, r5
   4b402:	4630      	mov	r0, r6
   4b404:	f7ff ffb2 	bl	4b36c <uECC_vli_cmp_unsafe>
   4b408:	2801      	cmp	r0, #1
   4b40a:	d007      	beq.n	4b41c <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   4b40c:	4623      	mov	r3, r4
   4b40e:	4632      	mov	r2, r6
   4b410:	4629      	mov	r1, r5
   4b412:	4628      	mov	r0, r5
}
   4b414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   4b418:	f7ff bfcf 	b.w	4b3ba <uECC_vli_sub>
}
   4b41c:	bd70      	pop	{r4, r5, r6, pc}

0004b41e <uECC_vli_modSub>:
{
   4b41e:	b570      	push	{r4, r5, r6, lr}
   4b420:	f99d 4010 	ldrsb.w	r4, [sp, #16]
   4b424:	461e      	mov	r6, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   4b426:	4623      	mov	r3, r4
{
   4b428:	4605      	mov	r5, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   4b42a:	f7ff ffc6 	bl	4b3ba <uECC_vli_sub>
	if (l_borrow) {
   4b42e:	b138      	cbz	r0, 4b440 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   4b430:	4623      	mov	r3, r4
   4b432:	4632      	mov	r2, r6
   4b434:	4629      	mov	r1, r5
   4b436:	4628      	mov	r0, r5
}
   4b438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   4b43c:	f7ff be8f 	b.w	4b15e <uECC_vli_add>
}
   4b440:	bd70      	pop	{r4, r5, r6, pc}

0004b442 <uECC_vli_mmod>:
{
   4b442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b446:	b0a5      	sub	sp, #148	; 0x94
   4b448:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   4b44a:	ab14      	add	r3, sp, #80	; 0x50
   4b44c:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   4b450:	4681      	mov	r9, r0
			   uECC_vli_numBits(mod, num_words);
   4b452:	4629      	mov	r1, r5
   4b454:	4610      	mov	r0, r2
{
   4b456:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   4b458:	f7ff ff5c 	bl	4b314 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   4b45c:	ebc0 1085 	rsb	r0, r0, r5, lsl #6
   4b460:	b204      	sxth	r4, r0
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   4b462:	2c00      	cmp	r4, #0
   4b464:	4626      	mov	r6, r4
   4b466:	bfb8      	it	lt
   4b468:	f104 061f 	addlt.w	r6, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4b46c:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   4b46e:	f346 1647 	sbfx	r6, r6, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4b472:	f003 031f 	and.w	r3, r3, #31
   4b476:	f004 081f 	and.w	r8, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   4b47a:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   4b47c:	bf58      	it	pl
   4b47e:	f1c3 0800 	rsbpl	r8, r3, #0
	uECC_vli_clear(mod_multiple, word_shift);
   4b482:	4631      	mov	r1, r6
   4b484:	f7ff ff22 	bl	4b2cc <uECC_vli_clear>
	if (bit_shift > 0) {
   4b488:	f1b8 0f00 	cmp.w	r8, #0
   4b48c:	b230      	sxth	r0, r6
   4b48e:	dd2d      	ble.n	4b4ec <uECC_vli_mmod+0xaa>
   4b490:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   4b492:	2200      	movs	r2, #0
   4b494:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   4b498:	f1c8 0c20 	rsb	ip, r8, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4b49c:	4613      	mov	r3, r2
   4b49e:	429d      	cmp	r5, r3
   4b4a0:	d819      	bhi.n	4b4d6 <uECC_vli_mmod+0x94>
		for (i = 0; i < num_words * 2; ++i) {
   4b4a2:	b22f      	sxth	r7, r5
   4b4a4:	007b      	lsls	r3, r7, #1
   4b4a6:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4b4a8:	ab04      	add	r3, sp, #16
   4b4aa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4b4ae:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   4b4b2:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4b4b4:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4b4b6:	eb03 0888 	add.w	r8, r3, r8, lsl #2
	for (index = 1; shift >= 0; --shift) {
   4b4ba:	2c00      	cmp	r4, #0
   4b4bc:	da54      	bge.n	4b568 <uECC_vli_mmod+0x126>
	uECC_vli_set(result, v[index], num_words);
   4b4be:	ab24      	add	r3, sp, #144	; 0x90
   4b4c0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   4b4c4:	462a      	mov	r2, r5
   4b4c6:	f856 1c88 	ldr.w	r1, [r6, #-136]
   4b4ca:	4648      	mov	r0, r9
   4b4cc:	f7ff ff42 	bl	4b354 <uECC_vli_set>
}
   4b4d0:	b025      	add	sp, #148	; 0x94
   4b4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   4b4d6:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
   4b4da:	fa06 f108 	lsl.w	r1, r6, r8
   4b4de:	430a      	orrs	r2, r1
   4b4e0:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   4b4e4:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   4b4e6:	fa26 f20c 	lsr.w	r2, r6, ip
   4b4ea:	e7d8      	b.n	4b49e <uECC_vli_mmod+0x5c>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   4b4ec:	ab04      	add	r3, sp, #16
   4b4ee:	462a      	mov	r2, r5
   4b4f0:	4639      	mov	r1, r7
   4b4f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   4b4f6:	f7ff ff2d 	bl	4b354 <uECC_vli_set>
   4b4fa:	e7d2      	b.n	4b4a2 <uECC_vli_mmod+0x60>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4b4fc:	fa0f fe82 	sxth.w	lr, r2
   4b500:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   4b504:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   4b508:	ab24      	add	r3, sp, #144	; 0x90
   4b50a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   4b50e:	3001      	adds	r0, #1
   4b510:	f852 3c80 	ldr.w	r3, [r2, #-128]
   4b514:	440b      	add	r3, r1
   4b516:	ebbb 0303 	subs.w	r3, fp, r3
   4b51a:	bf34      	ite	cc
   4b51c:	2201      	movcc	r2, #1
   4b51e:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   4b520:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   4b522:	bf18      	it	ne
   4b524:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   4b526:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   4b52a:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   4b52e:	9b01      	ldr	r3, [sp, #4]
   4b530:	b242      	sxtb	r2, r0
   4b532:	429a      	cmp	r2, r3
   4b534:	dbe2      	blt.n	4b4fc <uECC_vli_mmod+0xba>
		index = !(index ^ borrow);
   4b536:	1a73      	subs	r3, r6, r1
   4b538:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   4b53a:	4629      	mov	r1, r5
   4b53c:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   4b53e:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   4b540:	f7ff fe25 	bl	4b18e <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4b544:	ab24      	add	r3, sp, #144	; 0x90
   4b546:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4b54a:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4b54c:	f853 2c80 	ldr.w	r2, [r3, #-128]
   4b550:	f858 3c80 	ldr.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4b554:	4638      	mov	r0, r7
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   4b556:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   4b55a:	3c01      	subs	r4, #1
   4b55c:	f848 3c80 	str.w	r3, [r8, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   4b560:	b224      	sxth	r4, r4
   4b562:	f7ff fe14 	bl	4b18e <uECC_vli_rshift1>
   4b566:	e7a8      	b.n	4b4ba <uECC_vli_mmod+0x78>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4b568:	ab24      	add	r3, sp, #144	; 0x90
   4b56a:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   4b56c:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   4b570:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   4b572:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   4b576:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   4b57a:	e7d8      	b.n	4b52e <uECC_vli_mmod+0xec>

0004b57c <uECC_vli_modMult_fast>:
{
   4b57c:	b530      	push	{r4, r5, lr}
   4b57e:	461c      	mov	r4, r3
   4b580:	b091      	sub	sp, #68	; 0x44
   4b582:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   4b584:	f993 3000 	ldrsb.w	r3, [r3]
   4b588:	4668      	mov	r0, sp
   4b58a:	f7ff fe29 	bl	4b1e0 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   4b58e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   4b592:	4669      	mov	r1, sp
   4b594:	4628      	mov	r0, r5
   4b596:	4798      	blx	r3
}
   4b598:	b011      	add	sp, #68	; 0x44
   4b59a:	bd30      	pop	{r4, r5, pc}

0004b59c <uECC_vli_modSquare_fast>:
	uECC_vli_modMult_fast(result, left, left, curve);
   4b59c:	4613      	mov	r3, r2
   4b59e:	460a      	mov	r2, r1
   4b5a0:	f7ff bfec 	b.w	4b57c <uECC_vli_modMult_fast>

0004b5a4 <double_jacobian_default>:
{
   4b5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   4b5a8:	f993 6000 	ldrsb.w	r6, [r3]
{
   4b5ac:	b092      	sub	sp, #72	; 0x48
   4b5ae:	4604      	mov	r4, r0
   4b5b0:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   4b5b2:	4610      	mov	r0, r2
   4b5b4:	4631      	mov	r1, r6
{
   4b5b6:	4615      	mov	r5, r2
   4b5b8:	4698      	mov	r8, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   4b5ba:	f7ff fe92 	bl	4b2e2 <uECC_vli_isZero>
   4b5be:	2800      	cmp	r0, #0
   4b5c0:	f040 8091 	bne.w	4b6e6 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   4b5c4:	4642      	mov	r2, r8
   4b5c6:	4649      	mov	r1, r9
   4b5c8:	a802      	add	r0, sp, #8
   4b5ca:	f7ff ffe7 	bl	4b59c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   4b5ce:	4643      	mov	r3, r8
   4b5d0:	aa02      	add	r2, sp, #8
   4b5d2:	4621      	mov	r1, r4
   4b5d4:	a80a      	add	r0, sp, #40	; 0x28
   4b5d6:	f7ff ffd1 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   4b5da:	a902      	add	r1, sp, #8
   4b5dc:	4608      	mov	r0, r1
   4b5de:	4642      	mov	r2, r8
   4b5e0:	f7ff ffdc 	bl	4b59c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   4b5e4:	4643      	mov	r3, r8
   4b5e6:	462a      	mov	r2, r5
   4b5e8:	4649      	mov	r1, r9
   4b5ea:	4648      	mov	r0, r9
   4b5ec:	f7ff ffc6 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   4b5f0:	f108 0704 	add.w	r7, r8, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   4b5f4:	4642      	mov	r2, r8
   4b5f6:	4629      	mov	r1, r5
   4b5f8:	4628      	mov	r0, r5
   4b5fa:	f7ff ffcf 	bl	4b59c <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   4b5fe:	463b      	mov	r3, r7
   4b600:	462a      	mov	r2, r5
   4b602:	4621      	mov	r1, r4
   4b604:	4620      	mov	r0, r4
   4b606:	9600      	str	r6, [sp, #0]
   4b608:	f7ff fef0 	bl	4b3ec <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   4b60c:	463b      	mov	r3, r7
   4b60e:	462a      	mov	r2, r5
   4b610:	4629      	mov	r1, r5
   4b612:	4628      	mov	r0, r5
   4b614:	9600      	str	r6, [sp, #0]
   4b616:	f7ff fee9 	bl	4b3ec <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   4b61a:	463b      	mov	r3, r7
   4b61c:	462a      	mov	r2, r5
   4b61e:	4621      	mov	r1, r4
   4b620:	4628      	mov	r0, r5
   4b622:	9600      	str	r6, [sp, #0]
   4b624:	f7ff fefb 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   4b628:	4643      	mov	r3, r8
   4b62a:	462a      	mov	r2, r5
   4b62c:	4621      	mov	r1, r4
   4b62e:	4620      	mov	r0, r4
   4b630:	f7ff ffa4 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   4b634:	463b      	mov	r3, r7
   4b636:	4622      	mov	r2, r4
   4b638:	4621      	mov	r1, r4
   4b63a:	4628      	mov	r0, r5
   4b63c:	9600      	str	r6, [sp, #0]
   4b63e:	f7ff fed5 	bl	4b3ec <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   4b642:	463b      	mov	r3, r7
   4b644:	9600      	str	r6, [sp, #0]
   4b646:	462a      	mov	r2, r5
   4b648:	4621      	mov	r1, r4
   4b64a:	4620      	mov	r0, r4
   4b64c:	f7ff fece 	bl	4b3ec <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4b650:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   4b652:	07db      	lsls	r3, r3, #31
   4b654:	d54a      	bpl.n	4b6ec <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   4b656:	4633      	mov	r3, r6
   4b658:	463a      	mov	r2, r7
   4b65a:	4621      	mov	r1, r4
   4b65c:	4620      	mov	r0, r4
   4b65e:	f7ff fd7e 	bl	4b15e <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   4b662:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   4b664:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   4b666:	4620      	mov	r0, r4
   4b668:	f7ff fd91 	bl	4b18e <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   4b66c:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   4b670:	3b01      	subs	r3, #1
   4b672:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   4b676:	ea40 70ca 	orr.w	r0, r0, sl, lsl #31
   4b67a:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   4b67e:	4642      	mov	r2, r8
   4b680:	4621      	mov	r1, r4
   4b682:	4628      	mov	r0, r5
   4b684:	f7ff ff8a 	bl	4b59c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   4b688:	463b      	mov	r3, r7
   4b68a:	aa0a      	add	r2, sp, #40	; 0x28
   4b68c:	4629      	mov	r1, r5
   4b68e:	4628      	mov	r0, r5
   4b690:	9600      	str	r6, [sp, #0]
   4b692:	f7ff fec4 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   4b696:	463b      	mov	r3, r7
   4b698:	aa0a      	add	r2, sp, #40	; 0x28
   4b69a:	4629      	mov	r1, r5
   4b69c:	4628      	mov	r0, r5
   4b69e:	9600      	str	r6, [sp, #0]
   4b6a0:	f7ff febd 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   4b6a4:	a90a      	add	r1, sp, #40	; 0x28
   4b6a6:	4608      	mov	r0, r1
   4b6a8:	463b      	mov	r3, r7
   4b6aa:	462a      	mov	r2, r5
   4b6ac:	9600      	str	r6, [sp, #0]
   4b6ae:	f7ff feb6 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   4b6b2:	4643      	mov	r3, r8
   4b6b4:	aa0a      	add	r2, sp, #40	; 0x28
   4b6b6:	4621      	mov	r1, r4
   4b6b8:	4620      	mov	r0, r4
   4b6ba:	f7ff ff5f 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   4b6be:	aa02      	add	r2, sp, #8
   4b6c0:	463b      	mov	r3, r7
   4b6c2:	4610      	mov	r0, r2
   4b6c4:	4621      	mov	r1, r4
   4b6c6:	9600      	str	r6, [sp, #0]
   4b6c8:	f7ff fea9 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   4b6cc:	4632      	mov	r2, r6
   4b6ce:	4629      	mov	r1, r5
   4b6d0:	4620      	mov	r0, r4
   4b6d2:	f7ff fe3f 	bl	4b354 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   4b6d6:	4649      	mov	r1, r9
   4b6d8:	4628      	mov	r0, r5
   4b6da:	f7ff fe3b 	bl	4b354 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   4b6de:	a902      	add	r1, sp, #8
   4b6e0:	4648      	mov	r0, r9
   4b6e2:	f7ff fe37 	bl	4b354 <uECC_vli_set>
}
   4b6e6:	b012      	add	sp, #72	; 0x48
   4b6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   4b6ec:	4631      	mov	r1, r6
   4b6ee:	4620      	mov	r0, r4
   4b6f0:	f7ff fd4d 	bl	4b18e <uECC_vli_rshift1>
   4b6f4:	e7c3      	b.n	4b67e <double_jacobian_default+0xda>

0004b6f6 <x_side_default>:
{
   4b6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4b6fa:	4615      	mov	r5, r2
   4b6fc:	b08a      	sub	sp, #40	; 0x28
   4b6fe:	4604      	mov	r4, r0
   4b700:	4688      	mov	r8, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4b702:	221c      	movs	r2, #28
   4b704:	2100      	movs	r1, #0
   4b706:	a803      	add	r0, sp, #12
   4b708:	f000 fdfb 	bl	4c302 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   4b70c:	1d2e      	adds	r6, r5, #4
	wordcount_t num_words = curve->num_words;
   4b70e:	f995 7000 	ldrsb.w	r7, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4b712:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   4b714:	462a      	mov	r2, r5
   4b716:	4641      	mov	r1, r8
   4b718:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   4b71a:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   4b71c:	f7ff ff3e 	bl	4b59c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   4b720:	4633      	mov	r3, r6
   4b722:	aa02      	add	r2, sp, #8
   4b724:	4621      	mov	r1, r4
   4b726:	4620      	mov	r0, r4
   4b728:	9700      	str	r7, [sp, #0]
   4b72a:	f7ff fe78 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   4b72e:	462b      	mov	r3, r5
   4b730:	4642      	mov	r2, r8
   4b732:	4621      	mov	r1, r4
   4b734:	4620      	mov	r0, r4
   4b736:	f7ff ff21 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   4b73a:	9700      	str	r7, [sp, #0]
   4b73c:	4633      	mov	r3, r6
   4b73e:	f105 0284 	add.w	r2, r5, #132	; 0x84
   4b742:	4621      	mov	r1, r4
   4b744:	4620      	mov	r0, r4
   4b746:	f7ff fe51 	bl	4b3ec <uECC_vli_modAdd>
}
   4b74a:	b00a      	add	sp, #40	; 0x28
   4b74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004b750 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   4b750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4b754:	b09b      	sub	sp, #108	; 0x6c
   4b756:	4616      	mov	r6, r2
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   4b758:	9c22      	ldr	r4, [sp, #136]	; 0x88
   4b75a:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4b75e:	9500      	str	r5, [sp, #0]
{
   4b760:	4698      	mov	r8, r3
   4b762:	4607      	mov	r7, r0
   4b764:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4b766:	4623      	mov	r3, r4
   4b768:	4602      	mov	r2, r0
   4b76a:	4631      	mov	r1, r6
   4b76c:	a802      	add	r0, sp, #8
   4b76e:	f7ff fe56 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4b772:	a902      	add	r1, sp, #8
   4b774:	9a22      	ldr	r2, [sp, #136]	; 0x88
   4b776:	4608      	mov	r0, r1
   4b778:	f7ff ff10 	bl	4b59c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   4b77c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   4b77e:	aa02      	add	r2, sp, #8
   4b780:	4639      	mov	r1, r7
   4b782:	4638      	mov	r0, r7
   4b784:	f7ff fefa 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   4b788:	9b22      	ldr	r3, [sp, #136]	; 0x88
   4b78a:	aa02      	add	r2, sp, #8
   4b78c:	4631      	mov	r1, r6
   4b78e:	4630      	mov	r0, r6
   4b790:	f7ff fef4 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   4b794:	4623      	mov	r3, r4
   4b796:	464a      	mov	r2, r9
   4b798:	4641      	mov	r1, r8
   4b79a:	a802      	add	r0, sp, #8
   4b79c:	9500      	str	r5, [sp, #0]
   4b79e:	f7ff fe25 	bl	4b3ec <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4b7a2:	4623      	mov	r3, r4
   4b7a4:	464a      	mov	r2, r9
   4b7a6:	4641      	mov	r1, r8
   4b7a8:	4640      	mov	r0, r8
   4b7aa:	9500      	str	r5, [sp, #0]
   4b7ac:	f7ff fe37 	bl	4b41e <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   4b7b0:	4623      	mov	r3, r4
   4b7b2:	463a      	mov	r2, r7
   4b7b4:	4631      	mov	r1, r6
   4b7b6:	a80a      	add	r0, sp, #40	; 0x28
   4b7b8:	9500      	str	r5, [sp, #0]
   4b7ba:	f7ff fe30 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   4b7be:	9b22      	ldr	r3, [sp, #136]	; 0x88
   4b7c0:	aa0a      	add	r2, sp, #40	; 0x28
   4b7c2:	4649      	mov	r1, r9
   4b7c4:	4648      	mov	r0, r9
   4b7c6:	f7ff fed9 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   4b7ca:	4623      	mov	r3, r4
   4b7cc:	4632      	mov	r2, r6
   4b7ce:	4639      	mov	r1, r7
   4b7d0:	a80a      	add	r0, sp, #40	; 0x28
   4b7d2:	9500      	str	r5, [sp, #0]
   4b7d4:	f7ff fe0a 	bl	4b3ec <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   4b7d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   4b7da:	4641      	mov	r1, r8
   4b7dc:	4630      	mov	r0, r6
   4b7de:	f7ff fedd 	bl	4b59c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   4b7e2:	4623      	mov	r3, r4
   4b7e4:	aa0a      	add	r2, sp, #40	; 0x28
   4b7e6:	4631      	mov	r1, r6
   4b7e8:	4630      	mov	r0, r6
   4b7ea:	9500      	str	r5, [sp, #0]
   4b7ec:	f7ff fe17 	bl	4b41e <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   4b7f0:	4623      	mov	r3, r4
   4b7f2:	4632      	mov	r2, r6
   4b7f4:	4639      	mov	r1, r7
   4b7f6:	a812      	add	r0, sp, #72	; 0x48
   4b7f8:	9500      	str	r5, [sp, #0]
   4b7fa:	f7ff fe10 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   4b7fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   4b800:	aa12      	add	r2, sp, #72	; 0x48
   4b802:	4641      	mov	r1, r8
   4b804:	4640      	mov	r0, r8
   4b806:	f7ff feb9 	bl	4b57c <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   4b80a:	4623      	mov	r3, r4
   4b80c:	464a      	mov	r2, r9
   4b80e:	4641      	mov	r1, r8
   4b810:	4640      	mov	r0, r8
   4b812:	9500      	str	r5, [sp, #0]
   4b814:	f7ff fe03 	bl	4b41e <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   4b818:	9a22      	ldr	r2, [sp, #136]	; 0x88
   4b81a:	a902      	add	r1, sp, #8
   4b81c:	a812      	add	r0, sp, #72	; 0x48
   4b81e:	f7ff febd 	bl	4b59c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   4b822:	a912      	add	r1, sp, #72	; 0x48
   4b824:	4623      	mov	r3, r4
   4b826:	aa0a      	add	r2, sp, #40	; 0x28
   4b828:	4608      	mov	r0, r1
   4b82a:	9500      	str	r5, [sp, #0]
   4b82c:	f7ff fdf7 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   4b830:	4623      	mov	r3, r4
   4b832:	463a      	mov	r2, r7
   4b834:	a912      	add	r1, sp, #72	; 0x48
   4b836:	a80a      	add	r0, sp, #40	; 0x28
   4b838:	9500      	str	r5, [sp, #0]
   4b83a:	f7ff fdf0 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   4b83e:	a90a      	add	r1, sp, #40	; 0x28
   4b840:	9b22      	ldr	r3, [sp, #136]	; 0x88
   4b842:	aa02      	add	r2, sp, #8
   4b844:	4608      	mov	r0, r1
   4b846:	f7ff fe99 	bl	4b57c <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   4b84a:	4623      	mov	r3, r4
   4b84c:	464a      	mov	r2, r9
   4b84e:	a90a      	add	r1, sp, #40	; 0x28
   4b850:	4648      	mov	r0, r9
   4b852:	9500      	str	r5, [sp, #0]
   4b854:	f7ff fde3 	bl	4b41e <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   4b858:	462a      	mov	r2, r5
   4b85a:	a912      	add	r1, sp, #72	; 0x48
   4b85c:	4638      	mov	r0, r7
   4b85e:	f7ff fd79 	bl	4b354 <uECC_vli_set>
}
   4b862:	b01b      	add	sp, #108	; 0x6c
   4b864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0004b868 <uECC_vli_modInv>:
{
   4b868:	b5f0      	push	{r4, r5, r6, r7, lr}
   4b86a:	460f      	mov	r7, r1
   4b86c:	b0a1      	sub	sp, #132	; 0x84
   4b86e:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   4b870:	4619      	mov	r1, r3
   4b872:	4638      	mov	r0, r7
{
   4b874:	4615      	mov	r5, r2
   4b876:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   4b878:	f7ff fd33 	bl	4b2e2 <uECC_vli_isZero>
   4b87c:	b120      	cbz	r0, 4b888 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   4b87e:	4630      	mov	r0, r6
   4b880:	f7ff fd24 	bl	4b2cc <uECC_vli_clear>
}
   4b884:	b021      	add	sp, #132	; 0x84
   4b886:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   4b888:	4622      	mov	r2, r4
   4b88a:	4639      	mov	r1, r7
   4b88c:	4668      	mov	r0, sp
   4b88e:	f7ff fd61 	bl	4b354 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   4b892:	4629      	mov	r1, r5
   4b894:	a808      	add	r0, sp, #32
   4b896:	f7ff fd5d 	bl	4b354 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   4b89a:	a810      	add	r0, sp, #64	; 0x40
   4b89c:	4621      	mov	r1, r4
   4b89e:	f7ff fd15 	bl	4b2cc <uECC_vli_clear>
	u[0] = 1;
   4b8a2:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   4b8a4:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   4b8a6:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   4b8a8:	f7ff fd10 	bl	4b2cc <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   4b8ac:	4622      	mov	r2, r4
   4b8ae:	a908      	add	r1, sp, #32
   4b8b0:	4668      	mov	r0, sp
   4b8b2:	f7ff fd5b 	bl	4b36c <uECC_vli_cmp_unsafe>
   4b8b6:	b928      	cbnz	r0, 4b8c4 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   4b8b8:	4622      	mov	r2, r4
   4b8ba:	a910      	add	r1, sp, #64	; 0x40
   4b8bc:	4630      	mov	r0, r6
   4b8be:	f7ff fd49 	bl	4b354 <uECC_vli_set>
   4b8c2:	e7df      	b.n	4b884 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   4b8c4:	9b00      	ldr	r3, [sp, #0]
   4b8c6:	07da      	lsls	r2, r3, #31
   4b8c8:	d409      	bmi.n	4b8de <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   4b8ca:	4621      	mov	r1, r4
   4b8cc:	4668      	mov	r0, sp
   4b8ce:	f7ff fc5e 	bl	4b18e <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   4b8d2:	4622      	mov	r2, r4
   4b8d4:	4629      	mov	r1, r5
   4b8d6:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   4b8d8:	f7ff fc66 	bl	4b1a8 <vli_modInv_update>
   4b8dc:	e7e6      	b.n	4b8ac <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   4b8de:	9b08      	ldr	r3, [sp, #32]
   4b8e0:	07db      	lsls	r3, r3, #31
   4b8e2:	d407      	bmi.n	4b8f4 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   4b8e4:	4621      	mov	r1, r4
   4b8e6:	a808      	add	r0, sp, #32
   4b8e8:	f7ff fc51 	bl	4b18e <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   4b8ec:	4622      	mov	r2, r4
   4b8ee:	4629      	mov	r1, r5
   4b8f0:	a818      	add	r0, sp, #96	; 0x60
   4b8f2:	e7f1      	b.n	4b8d8 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   4b8f4:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   4b8f6:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   4b8f8:	dd1c      	ble.n	4b934 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   4b8fa:	aa08      	add	r2, sp, #32
   4b8fc:	4669      	mov	r1, sp
   4b8fe:	4668      	mov	r0, sp
   4b900:	f7ff fd5b 	bl	4b3ba <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   4b904:	4621      	mov	r1, r4
   4b906:	4668      	mov	r0, sp
   4b908:	f7ff fc41 	bl	4b18e <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   4b90c:	4622      	mov	r2, r4
   4b90e:	a918      	add	r1, sp, #96	; 0x60
   4b910:	a810      	add	r0, sp, #64	; 0x40
   4b912:	f7ff fd2b 	bl	4b36c <uECC_vli_cmp_unsafe>
   4b916:	2800      	cmp	r0, #0
   4b918:	da05      	bge.n	4b926 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   4b91a:	a910      	add	r1, sp, #64	; 0x40
   4b91c:	4623      	mov	r3, r4
   4b91e:	462a      	mov	r2, r5
   4b920:	4608      	mov	r0, r1
   4b922:	f7ff fc1c 	bl	4b15e <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   4b926:	a910      	add	r1, sp, #64	; 0x40
   4b928:	4623      	mov	r3, r4
   4b92a:	aa18      	add	r2, sp, #96	; 0x60
   4b92c:	4608      	mov	r0, r1
   4b92e:	f7ff fd44 	bl	4b3ba <uECC_vli_sub>
   4b932:	e7ce      	b.n	4b8d2 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   4b934:	a908      	add	r1, sp, #32
   4b936:	466a      	mov	r2, sp
   4b938:	4608      	mov	r0, r1
   4b93a:	f7ff fd3e 	bl	4b3ba <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   4b93e:	4621      	mov	r1, r4
   4b940:	a808      	add	r0, sp, #32
   4b942:	f7ff fc24 	bl	4b18e <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   4b946:	4622      	mov	r2, r4
   4b948:	a910      	add	r1, sp, #64	; 0x40
   4b94a:	a818      	add	r0, sp, #96	; 0x60
   4b94c:	f7ff fd0e 	bl	4b36c <uECC_vli_cmp_unsafe>
   4b950:	2800      	cmp	r0, #0
   4b952:	da05      	bge.n	4b960 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   4b954:	a918      	add	r1, sp, #96	; 0x60
   4b956:	4623      	mov	r3, r4
   4b958:	462a      	mov	r2, r5
   4b95a:	4608      	mov	r0, r1
   4b95c:	f7ff fbff 	bl	4b15e <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   4b960:	a918      	add	r1, sp, #96	; 0x60
   4b962:	4623      	mov	r3, r4
   4b964:	aa10      	add	r2, sp, #64	; 0x40
   4b966:	4608      	mov	r0, r1
   4b968:	f7ff fd27 	bl	4b3ba <uECC_vli_sub>
   4b96c:	e7be      	b.n	4b8ec <uECC_vli_modInv+0x84>

0004b96e <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   4b96e:	7809      	ldrb	r1, [r1, #0]
   4b970:	0049      	lsls	r1, r1, #1
   4b972:	b249      	sxtb	r1, r1
   4b974:	f7ff bcb5 	b.w	4b2e2 <uECC_vli_isZero>

0004b978 <apply_z>:
{
   4b978:	b5f0      	push	{r4, r5, r6, r7, lr}
   4b97a:	4615      	mov	r5, r2
   4b97c:	b089      	sub	sp, #36	; 0x24
   4b97e:	461c      	mov	r4, r3
   4b980:	4607      	mov	r7, r0
   4b982:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   4b984:	461a      	mov	r2, r3
   4b986:	4629      	mov	r1, r5
   4b988:	4668      	mov	r0, sp
   4b98a:	f7ff fe07 	bl	4b59c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   4b98e:	4623      	mov	r3, r4
   4b990:	466a      	mov	r2, sp
   4b992:	4639      	mov	r1, r7
   4b994:	4638      	mov	r0, r7
   4b996:	f7ff fdf1 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   4b99a:	4623      	mov	r3, r4
   4b99c:	462a      	mov	r2, r5
   4b99e:	4669      	mov	r1, sp
   4b9a0:	4668      	mov	r0, sp
   4b9a2:	f7ff fdeb 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   4b9a6:	4623      	mov	r3, r4
   4b9a8:	466a      	mov	r2, sp
   4b9aa:	4631      	mov	r1, r6
   4b9ac:	4630      	mov	r0, r6
   4b9ae:	f7ff fde5 	bl	4b57c <uECC_vli_modMult_fast>
}
   4b9b2:	b009      	add	sp, #36	; 0x24
   4b9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004b9b6 <XYcZ_add>:
{
   4b9b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4b9ba:	b08b      	sub	sp, #44	; 0x2c
   4b9bc:	4614      	mov	r4, r2
	wordcount_t num_words = curve->num_words;
   4b9be:	9d12      	ldr	r5, [sp, #72]	; 0x48
   4b9c0:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4b9c4:	9600      	str	r6, [sp, #0]
{
   4b9c6:	461f      	mov	r7, r3
   4b9c8:	4680      	mov	r8, r0
   4b9ca:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   4b9cc:	462b      	mov	r3, r5
   4b9ce:	4602      	mov	r2, r0
   4b9d0:	4621      	mov	r1, r4
   4b9d2:	a802      	add	r0, sp, #8
   4b9d4:	f7ff fd23 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   4b9d8:	a902      	add	r1, sp, #8
   4b9da:	9a12      	ldr	r2, [sp, #72]	; 0x48
   4b9dc:	4608      	mov	r0, r1
   4b9de:	f7ff fddd 	bl	4b59c <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   4b9e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   4b9e4:	aa02      	add	r2, sp, #8
   4b9e6:	4641      	mov	r1, r8
   4b9e8:	4640      	mov	r0, r8
   4b9ea:	f7ff fdc7 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   4b9ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   4b9f0:	aa02      	add	r2, sp, #8
   4b9f2:	4621      	mov	r1, r4
   4b9f4:	4620      	mov	r0, r4
   4b9f6:	f7ff fdc1 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   4b9fa:	462b      	mov	r3, r5
   4b9fc:	464a      	mov	r2, r9
   4b9fe:	4639      	mov	r1, r7
   4ba00:	4638      	mov	r0, r7
   4ba02:	9600      	str	r6, [sp, #0]
   4ba04:	f7ff fd0b 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   4ba08:	9a12      	ldr	r2, [sp, #72]	; 0x48
   4ba0a:	4639      	mov	r1, r7
   4ba0c:	a802      	add	r0, sp, #8
   4ba0e:	f7ff fdc5 	bl	4b59c <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   4ba12:	a902      	add	r1, sp, #8
   4ba14:	462b      	mov	r3, r5
   4ba16:	4642      	mov	r2, r8
   4ba18:	4608      	mov	r0, r1
   4ba1a:	9600      	str	r6, [sp, #0]
   4ba1c:	f7ff fcff 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   4ba20:	a902      	add	r1, sp, #8
   4ba22:	462b      	mov	r3, r5
   4ba24:	4622      	mov	r2, r4
   4ba26:	4608      	mov	r0, r1
   4ba28:	9600      	str	r6, [sp, #0]
   4ba2a:	f7ff fcf8 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   4ba2e:	462b      	mov	r3, r5
   4ba30:	4642      	mov	r2, r8
   4ba32:	4621      	mov	r1, r4
   4ba34:	4620      	mov	r0, r4
   4ba36:	9600      	str	r6, [sp, #0]
   4ba38:	f7ff fcf1 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   4ba3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   4ba3e:	4622      	mov	r2, r4
   4ba40:	4649      	mov	r1, r9
   4ba42:	4648      	mov	r0, r9
   4ba44:	f7ff fd9a 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   4ba48:	462b      	mov	r3, r5
   4ba4a:	aa02      	add	r2, sp, #8
   4ba4c:	4641      	mov	r1, r8
   4ba4e:	4620      	mov	r0, r4
   4ba50:	9600      	str	r6, [sp, #0]
   4ba52:	f7ff fce4 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   4ba56:	9b12      	ldr	r3, [sp, #72]	; 0x48
   4ba58:	4622      	mov	r2, r4
   4ba5a:	4639      	mov	r1, r7
   4ba5c:	4638      	mov	r0, r7
   4ba5e:	f7ff fd8d 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   4ba62:	462b      	mov	r3, r5
   4ba64:	464a      	mov	r2, r9
   4ba66:	4639      	mov	r1, r7
   4ba68:	4638      	mov	r0, r7
   4ba6a:	9600      	str	r6, [sp, #0]
   4ba6c:	f7ff fcd7 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   4ba70:	4632      	mov	r2, r6
   4ba72:	a902      	add	r1, sp, #8
   4ba74:	4620      	mov	r0, r4
   4ba76:	f7ff fc6d 	bl	4b354 <uECC_vli_set>
}
   4ba7a:	b00b      	add	sp, #44	; 0x2c
   4ba7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0004ba80 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   4ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4ba84:	b0b1      	sub	sp, #196	; 0xc4
   4ba86:	e9cd 0104 	strd	r0, r1, [sp, #16]
   4ba8a:	9c3b      	ldr	r4, [sp, #236]	; 0xec
   4ba8c:	9206      	str	r2, [sp, #24]
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   4ba8e:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   4ba92:	a818      	add	r0, sp, #96	; 0x60
   4ba94:	463a      	mov	r2, r7
{
   4ba96:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   4ba98:	f7ff fc5c 	bl	4b354 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   4ba9c:	00bb      	lsls	r3, r7, #2
   4ba9e:	9307      	str	r3, [sp, #28]
   4baa0:	9b05      	ldr	r3, [sp, #20]
   4baa2:	00ba      	lsls	r2, r7, #2
   4baa4:	4413      	add	r3, r2
   4baa6:	4619      	mov	r1, r3
   4baa8:	463a      	mov	r2, r7
   4baaa:	a828      	add	r0, sp, #160	; 0xa0
   4baac:	9302      	str	r3, [sp, #8]
   4baae:	f7ff fc51 	bl	4b354 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   4bab2:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   4bab6:	2e00      	cmp	r6, #0
   4bab8:	f000 8087 	beq.w	4bbca <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   4babc:	462a      	mov	r2, r5
   4babe:	4631      	mov	r1, r6
   4bac0:	a808      	add	r0, sp, #32
   4bac2:	f7ff fc47 	bl	4b354 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   4bac6:	ae10      	add	r6, sp, #64	; 0x40
   4bac8:	462a      	mov	r2, r5
   4baca:	a918      	add	r1, sp, #96	; 0x60
   4bacc:	4630      	mov	r0, r6
	uECC_vli_set(Y2, Y1, num_words);
   4bace:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   4bad2:	f7ff fc3f 	bl	4b354 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   4bad6:	a928      	add	r1, sp, #160	; 0xa0
   4bad8:	4648      	mov	r0, r9
   4bada:	f7ff fc3b 	bl	4b354 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   4bade:	4623      	mov	r3, r4
   4bae0:	aa08      	add	r2, sp, #32
   4bae2:	a928      	add	r1, sp, #160	; 0xa0
   4bae4:	a818      	add	r0, sp, #96	; 0x60
   4bae6:	f7ff ff47 	bl	4b978 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   4baea:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   4baee:	4623      	mov	r3, r4
   4baf0:	aa08      	add	r2, sp, #32
   4baf2:	a928      	add	r1, sp, #160	; 0xa0
   4baf4:	a818      	add	r0, sp, #96	; 0x60
   4baf6:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   4baf8:	4623      	mov	r3, r4
   4bafa:	aa08      	add	r2, sp, #32
   4bafc:	4649      	mov	r1, r9
   4bafe:	4630      	mov	r0, r6
   4bb00:	f7ff ff3a 	bl	4b978 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   4bb04:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   4bb08:	3d02      	subs	r5, #2
   4bb0a:	b22d      	sxth	r5, r5
   4bb0c:	2d00      	cmp	r5, #0
   4bb0e:	dc63      	bgt.n	4bbd8 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4bb10:	9b06      	ldr	r3, [sp, #24]
   4bb12:	681d      	ldr	r5, [r3, #0]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4bb14:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   4bb16:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4bb1a:	ab10      	add	r3, sp, #64	; 0x40
   4bb1c:	0176      	lsls	r6, r6, #5
   4bb1e:	43ed      	mvns	r5, r5
   4bb20:	eb03 0806 	add.w	r8, r3, r6
   4bb24:	f005 0501 	and.w	r5, r5, #1
   4bb28:	ab20      	add	r3, sp, #128	; 0x80
   4bb2a:	441e      	add	r6, r3
   4bb2c:	016d      	lsls	r5, r5, #5
   4bb2e:	ab10      	add	r3, sp, #64	; 0x40
   4bb30:	eb03 0905 	add.w	r9, r3, r5
   4bb34:	ab20      	add	r3, sp, #128	; 0x80
   4bb36:	441d      	add	r5, r3

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   4bb38:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4bb3c:	462b      	mov	r3, r5
   4bb3e:	464a      	mov	r2, r9
   4bb40:	4631      	mov	r1, r6
   4bb42:	4640      	mov	r0, r8
   4bb44:	f7ff fe04 	bl	4b750 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   4bb48:	4653      	mov	r3, sl
   4bb4a:	aa10      	add	r2, sp, #64	; 0x40
   4bb4c:	a918      	add	r1, sp, #96	; 0x60
   4bb4e:	a808      	add	r0, sp, #32
   4bb50:	9700      	str	r7, [sp, #0]
   4bb52:	f7ff fc64 	bl	4b41e <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   4bb56:	a908      	add	r1, sp, #32
   4bb58:	4623      	mov	r3, r4
   4bb5a:	4632      	mov	r2, r6
   4bb5c:	4608      	mov	r0, r1
   4bb5e:	f7ff fd0d 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   4bb62:	a908      	add	r1, sp, #32
   4bb64:	4623      	mov	r3, r4
   4bb66:	9a05      	ldr	r2, [sp, #20]
   4bb68:	4608      	mov	r0, r1
   4bb6a:	f7ff fd07 	bl	4b57c <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   4bb6e:	a908      	add	r1, sp, #32
   4bb70:	463b      	mov	r3, r7
   4bb72:	4652      	mov	r2, sl
   4bb74:	4608      	mov	r0, r1
   4bb76:	f7ff fe77 	bl	4b868 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   4bb7a:	a908      	add	r1, sp, #32
   4bb7c:	4623      	mov	r3, r4
   4bb7e:	9a02      	ldr	r2, [sp, #8]
   4bb80:	4608      	mov	r0, r1
   4bb82:	f7ff fcfb 	bl	4b57c <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   4bb86:	a908      	add	r1, sp, #32
   4bb88:	4623      	mov	r3, r4
   4bb8a:	4642      	mov	r2, r8
   4bb8c:	4608      	mov	r0, r1
   4bb8e:	f7ff fcf5 	bl	4b57c <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   4bb92:	9400      	str	r4, [sp, #0]
   4bb94:	4633      	mov	r3, r6
   4bb96:	4642      	mov	r2, r8
   4bb98:	4629      	mov	r1, r5
   4bb9a:	4648      	mov	r0, r9
   4bb9c:	f7ff ff0b 	bl	4b9b6 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   4bba0:	4623      	mov	r3, r4
   4bba2:	aa08      	add	r2, sp, #32
   4bba4:	a920      	add	r1, sp, #128	; 0x80
   4bba6:	a810      	add	r0, sp, #64	; 0x40
   4bba8:	f7ff fee6 	bl	4b978 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   4bbac:	463a      	mov	r2, r7
   4bbae:	a910      	add	r1, sp, #64	; 0x40
   4bbb0:	9804      	ldr	r0, [sp, #16]
   4bbb2:	f7ff fbcf 	bl	4b354 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   4bbb6:	9b04      	ldr	r3, [sp, #16]
   4bbb8:	9c07      	ldr	r4, [sp, #28]
   4bbba:	4423      	add	r3, r4
   4bbbc:	a920      	add	r1, sp, #128	; 0x80
   4bbbe:	4618      	mov	r0, r3
   4bbc0:	f7ff fbc8 	bl	4b354 <uECC_vli_set>
}
   4bbc4:	b031      	add	sp, #196	; 0xc4
   4bbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   4bbca:	4629      	mov	r1, r5
   4bbcc:	a808      	add	r0, sp, #32
   4bbce:	f7ff fb7d 	bl	4b2cc <uECC_vli_clear>
		z[0] = 1;
   4bbd2:	2301      	movs	r3, #1
   4bbd4:	9308      	str	r3, [sp, #32]
   4bbd6:	e776      	b.n	4bac6 <EccPoint_mult+0x46>
		nb = !uECC_vli_testBit(scalar, i);
   4bbd8:	4629      	mov	r1, r5
   4bbda:	9806      	ldr	r0, [sp, #24]
   4bbdc:	f7ff fb90 	bl	4b300 <uECC_vli_testBit>
   4bbe0:	fab0 f080 	clz	r0, r0
   4bbe4:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   4bbe6:	f1c0 0801 	rsb	r8, r0, #1
   4bbea:	ea4f 1848 	mov.w	r8, r8, lsl #5
   4bbee:	0140      	lsls	r0, r0, #5
   4bbf0:	eb06 0b08 	add.w	fp, r6, r8
   4bbf4:	eb06 0a00 	add.w	sl, r6, r0
   4bbf8:	44c8      	add	r8, r9
   4bbfa:	eb09 0300 	add.w	r3, r9, r0
   4bbfe:	4652      	mov	r2, sl
   4bc00:	4641      	mov	r1, r8
   4bc02:	4658      	mov	r0, fp
   4bc04:	9400      	str	r4, [sp, #0]
   4bc06:	9303      	str	r3, [sp, #12]
   4bc08:	f7ff fda2 	bl	4b750 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   4bc0c:	9400      	str	r4, [sp, #0]
   4bc0e:	4643      	mov	r3, r8
   4bc10:	465a      	mov	r2, fp
   4bc12:	9903      	ldr	r1, [sp, #12]
   4bc14:	4650      	mov	r0, sl
   4bc16:	f7ff fece 	bl	4b9b6 <XYcZ_add>
   4bc1a:	3d01      	subs	r5, #1
   4bc1c:	e775      	b.n	4bb0a <EccPoint_mult+0x8a>

0004bc1e <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   4bc1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4bc22:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
   4bc26:	f114 051f 	adds.w	r5, r4, #31
   4bc2a:	bf48      	it	mi
   4bc2c:	f104 053e 	addmi.w	r5, r4, #62	; 0x3e
{
   4bc30:	460f      	mov	r7, r1

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4bc32:	f103 0624 	add.w	r6, r3, #36	; 0x24
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   4bc36:	f345 1547 	sbfx	r5, r5, #5, #8
{
   4bc3a:	4690      	mov	r8, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4bc3c:	4601      	mov	r1, r0
   4bc3e:	462b      	mov	r3, r5
   4bc40:	4632      	mov	r2, r6
   4bc42:	4638      	mov	r0, r7
   4bc44:	f7ff fa8b 	bl	4b15e <uECC_vli_add>
   4bc48:	b990      	cbnz	r0, 4bc70 <regularize_k+0x52>
   4bc4a:	ebb4 1f45 	cmp.w	r4, r5, lsl #5
   4bc4e:	da11      	bge.n	4bc74 <regularize_k+0x56>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   4bc50:	4621      	mov	r1, r4
   4bc52:	4638      	mov	r0, r7
   4bc54:	f7ff fb54 	bl	4b300 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   4bc58:	1c04      	adds	r4, r0, #0
   4bc5a:	bf18      	it	ne
   4bc5c:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   4bc5e:	462b      	mov	r3, r5
   4bc60:	4632      	mov	r2, r6
   4bc62:	4639      	mov	r1, r7
   4bc64:	4640      	mov	r0, r8
   4bc66:	f7ff fa7a 	bl	4b15e <uECC_vli_add>

	return carry;
}
   4bc6a:	4620      	mov	r0, r4
   4bc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   4bc70:	2401      	movs	r4, #1
   4bc72:	e7f4      	b.n	4bc5e <regularize_k+0x40>
   4bc74:	4604      	mov	r4, r0
   4bc76:	e7f2      	b.n	4bc5e <regularize_k+0x40>

0004bc78 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   4bc78:	b530      	push	{r4, r5, lr}
   4bc7a:	4614      	mov	r4, r2
   4bc7c:	b095      	sub	sp, #84	; 0x54
   4bc7e:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   4bc80:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   4bc82:	4623      	mov	r3, r4
{
   4bc84:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   4bc86:	a904      	add	r1, sp, #16
   4bc88:	9102      	str	r1, [sp, #8]
   4bc8a:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   4bc8c:	f7ff ffc7 	bl	4bc1e <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   4bc90:	fab0 f080 	clz	r0, r0
   4bc94:	ab14      	add	r3, sp, #80	; 0x50
   4bc96:	0940      	lsrs	r0, r0, #5
   4bc98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   4bc9c:	8863      	ldrh	r3, [r4, #2]
   4bc9e:	9401      	str	r4, [sp, #4]
   4bca0:	3301      	adds	r3, #1
   4bca2:	b21b      	sxth	r3, r3
   4bca4:	9300      	str	r3, [sp, #0]
   4bca6:	f850 2c48 	ldr.w	r2, [r0, #-72]
   4bcaa:	2300      	movs	r3, #0
   4bcac:	f104 0144 	add.w	r1, r4, #68	; 0x44
   4bcb0:	4628      	mov	r0, r5
   4bcb2:	f7ff fee5 	bl	4ba80 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   4bcb6:	4621      	mov	r1, r4
   4bcb8:	4628      	mov	r0, r5
   4bcba:	f7ff fe58 	bl	4b96e <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   4bcbe:	fab0 f080 	clz	r0, r0
   4bcc2:	0940      	lsrs	r0, r0, #5
   4bcc4:	b015      	add	sp, #84	; 0x54
   4bcc6:	bd30      	pop	{r4, r5, pc}

0004bcc8 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   4bcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   4bcca:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   4bccc:	1e4f      	subs	r7, r1, #1
   4bcce:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   4bcd0:	428c      	cmp	r4, r1
   4bcd2:	f105 0501 	add.w	r5, r5, #1
   4bcd6:	db00      	blt.n	4bcda <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   4bcd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   4bcda:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   4bcdc:	f023 0603 	bic.w	r6, r3, #3
   4bce0:	f003 0303 	and.w	r3, r3, #3
   4bce4:	5996      	ldr	r6, [r2, r6]
   4bce6:	00db      	lsls	r3, r3, #3
   4bce8:	fa26 f303 	lsr.w	r3, r6, r3
   4bcec:	5503      	strb	r3, [r0, r4]
   4bcee:	e7ee      	b.n	4bcce <uECC_vli_nativeToBytes+0x6>

0004bcf0 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   4bcf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4bcf2:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   4bcf4:	1cd1      	adds	r1, r2, #3
   4bcf6:	bf48      	it	mi
   4bcf8:	1d91      	addmi	r1, r2, #6
{
   4bcfa:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   4bcfc:	f341 0187 	sbfx	r1, r1, #2, #8
{
   4bd00:	4605      	mov	r5, r0
	for (i = 0; i < num_bytes; ++i) {
		unsigned b = num_bytes - 1 - i;
   4bd02:	1e67      	subs	r7, r4, #1
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   4bd04:	f7ff fae2 	bl	4b2cc <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   4bd08:	2100      	movs	r1, #0
   4bd0a:	b24a      	sxtb	r2, r1
   4bd0c:	42a2      	cmp	r2, r4
   4bd0e:	f101 0101 	add.w	r1, r1, #1
   4bd12:	db00      	blt.n	4bd16 <uECC_vli_bytesToNative+0x26>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   4bd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   4bd16:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   4bd18:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   4bd1c:	5cb2      	ldrb	r2, [r6, r2]
   4bd1e:	f003 0303 	and.w	r3, r3, #3
   4bd22:	00db      	lsls	r3, r3, #3
   4bd24:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   4bd28:	582a      	ldr	r2, [r5, r0]
   4bd2a:	431a      	orrs	r2, r3
   4bd2c:	502a      	str	r2, [r5, r0]
   4bd2e:	e7ec      	b.n	4bd0a <uECC_vli_bytesToNative+0x1a>

0004bd30 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   4bd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4bd34:	b090      	sub	sp, #64	; 0x40
   4bd36:	4606      	mov	r6, r0
   4bd38:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   4bd3a:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   4bd3e:	f7ff fe16 	bl	4b96e <EccPoint_isZero>
   4bd42:	bb40      	cbnz	r0, 4bd96 <uECC_valid_point+0x66>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4bd44:	f104 0804 	add.w	r8, r4, #4
   4bd48:	462a      	mov	r2, r5
   4bd4a:	4631      	mov	r1, r6
   4bd4c:	4640      	mov	r0, r8
   4bd4e:	f7ff fb0d 	bl	4b36c <uECC_vli_cmp_unsafe>
   4bd52:	2801      	cmp	r0, #1
   4bd54:	d122      	bne.n	4bd9c <uECC_valid_point+0x6c>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   4bd56:	eb06 0785 	add.w	r7, r6, r5, lsl #2
   4bd5a:	462a      	mov	r2, r5
   4bd5c:	4639      	mov	r1, r7
   4bd5e:	4640      	mov	r0, r8
   4bd60:	f7ff fb04 	bl	4b36c <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   4bd64:	2801      	cmp	r0, #1
   4bd66:	d119      	bne.n	4bd9c <uECC_valid_point+0x6c>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   4bd68:	4622      	mov	r2, r4
   4bd6a:	4668      	mov	r0, sp
   4bd6c:	f7ff fc16 	bl	4b59c <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   4bd70:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   4bd74:	4622      	mov	r2, r4
   4bd76:	4631      	mov	r1, r6
   4bd78:	a808      	add	r0, sp, #32
   4bd7a:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   4bd7c:	462a      	mov	r2, r5
   4bd7e:	a908      	add	r1, sp, #32
   4bd80:	4668      	mov	r0, sp
   4bd82:	f7ff fb08 	bl	4b396 <uECC_vli_equal>
   4bd86:	2800      	cmp	r0, #0
		return -3;
   4bd88:	bf0c      	ite	eq
   4bd8a:	2000      	moveq	r0, #0
   4bd8c:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   4bd90:	b010      	add	sp, #64	; 0x40
   4bd92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   4bd96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4bd9a:	e7f9      	b.n	4bd90 <uECC_valid_point+0x60>
		return -2;
   4bd9c:	f06f 0001 	mvn.w	r0, #1
   4bda0:	e7f6      	b.n	4bd90 <uECC_valid_point+0x60>

0004bda2 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   4bda2:	b570      	push	{r4, r5, r6, lr}
   4bda4:	460c      	mov	r4, r1
   4bda6:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   4bda8:	4625      	mov	r5, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   4bdaa:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   4bdae:	4606      	mov	r6, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   4bdb0:	4601      	mov	r1, r0
   4bdb2:	4668      	mov	r0, sp
   4bdb4:	f7ff ff9c 	bl	4bcf0 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   4bdb8:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   4bdbc:	f915 0b44 	ldrsb.w	r0, [r5], #68
	uECC_vli_bytesToNative(
   4bdc0:	18b1      	adds	r1, r6, r2
   4bdc2:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   4bdc6:	f7ff ff93 	bl	4bcf0 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   4bdca:	2210      	movs	r2, #16
   4bdcc:	4629      	mov	r1, r5
   4bdce:	4668      	mov	r0, sp
   4bdd0:	f7ff facc 	bl	4b36c <uECC_vli_cmp_unsafe>
   4bdd4:	b128      	cbz	r0, 4bde2 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   4bdd6:	4621      	mov	r1, r4
   4bdd8:	4668      	mov	r0, sp
   4bdda:	f7ff ffa9 	bl	4bd30 <uECC_valid_point>
}
   4bdde:	b010      	add	sp, #64	; 0x40
   4bde0:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   4bde2:	f06f 0003 	mvn.w	r0, #3
   4bde6:	e7fa      	b.n	4bdde <uECC_valid_public_key+0x3c>

0004bde8 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   4bde8:	78cb      	ldrb	r3, [r1, #3]
   4bdea:	7802      	ldrb	r2, [r0, #0]
   4bdec:	4053      	eors	r3, r2
   4bdee:	7003      	strb	r3, [r0, #0]
   4bdf0:	884b      	ldrh	r3, [r1, #2]
   4bdf2:	7842      	ldrb	r2, [r0, #1]
   4bdf4:	4053      	eors	r3, r2
   4bdf6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   4bdf8:	680a      	ldr	r2, [r1, #0]
   4bdfa:	7883      	ldrb	r3, [r0, #2]
   4bdfc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4be00:	7083      	strb	r3, [r0, #2]
   4be02:	680a      	ldr	r2, [r1, #0]
   4be04:	78c3      	ldrb	r3, [r0, #3]
   4be06:	4053      	eors	r3, r2
   4be08:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   4be0a:	79cb      	ldrb	r3, [r1, #7]
   4be0c:	7902      	ldrb	r2, [r0, #4]
   4be0e:	4053      	eors	r3, r2
   4be10:	7103      	strb	r3, [r0, #4]
   4be12:	88cb      	ldrh	r3, [r1, #6]
   4be14:	7942      	ldrb	r2, [r0, #5]
   4be16:	4053      	eors	r3, r2
   4be18:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   4be1a:	684a      	ldr	r2, [r1, #4]
   4be1c:	7983      	ldrb	r3, [r0, #6]
   4be1e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4be22:	7183      	strb	r3, [r0, #6]
   4be24:	684a      	ldr	r2, [r1, #4]
   4be26:	79c3      	ldrb	r3, [r0, #7]
   4be28:	4053      	eors	r3, r2
   4be2a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   4be2c:	7acb      	ldrb	r3, [r1, #11]
   4be2e:	7a02      	ldrb	r2, [r0, #8]
   4be30:	4053      	eors	r3, r2
   4be32:	7203      	strb	r3, [r0, #8]
   4be34:	7a42      	ldrb	r2, [r0, #9]
   4be36:	894b      	ldrh	r3, [r1, #10]
   4be38:	4053      	eors	r3, r2
   4be3a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   4be3c:	688a      	ldr	r2, [r1, #8]
   4be3e:	7a83      	ldrb	r3, [r0, #10]
   4be40:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4be44:	7283      	strb	r3, [r0, #10]
   4be46:	688a      	ldr	r2, [r1, #8]
   4be48:	7ac3      	ldrb	r3, [r0, #11]
   4be4a:	4053      	eors	r3, r2
   4be4c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   4be4e:	7bcb      	ldrb	r3, [r1, #15]
   4be50:	7b02      	ldrb	r2, [r0, #12]
   4be52:	4053      	eors	r3, r2
   4be54:	7303      	strb	r3, [r0, #12]
   4be56:	89cb      	ldrh	r3, [r1, #14]
   4be58:	7b42      	ldrb	r2, [r0, #13]
   4be5a:	4053      	eors	r3, r2
   4be5c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   4be5e:	68ca      	ldr	r2, [r1, #12]
   4be60:	7b83      	ldrb	r3, [r0, #14]
   4be62:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   4be66:	7383      	strb	r3, [r0, #14]
   4be68:	68ca      	ldr	r2, [r1, #12]
   4be6a:	7bc3      	ldrb	r3, [r0, #15]
   4be6c:	4053      	eors	r3, r2
   4be6e:	73c3      	strb	r3, [r0, #15]
}
   4be70:	4770      	bx	lr

0004be72 <shift_rows>:
{
   4be72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   4be74:	7802      	ldrb	r2, [r0, #0]
   4be76:	f88d 2000 	strb.w	r2, [sp]
   4be7a:	7942      	ldrb	r2, [r0, #5]
   4be7c:	f88d 2001 	strb.w	r2, [sp, #1]
   4be80:	7a82      	ldrb	r2, [r0, #10]
   4be82:	f88d 2002 	strb.w	r2, [sp, #2]
   4be86:	7bc2      	ldrb	r2, [r0, #15]
   4be88:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   4be8c:	7902      	ldrb	r2, [r0, #4]
   4be8e:	f88d 2004 	strb.w	r2, [sp, #4]
   4be92:	7a42      	ldrb	r2, [r0, #9]
   4be94:	f88d 2005 	strb.w	r2, [sp, #5]
   4be98:	7b82      	ldrb	r2, [r0, #14]
   4be9a:	f88d 2006 	strb.w	r2, [sp, #6]
   4be9e:	78c2      	ldrb	r2, [r0, #3]
   4bea0:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   4bea4:	7a02      	ldrb	r2, [r0, #8]
   4bea6:	f88d 2008 	strb.w	r2, [sp, #8]
   4beaa:	7b42      	ldrb	r2, [r0, #13]
   4beac:	f88d 2009 	strb.w	r2, [sp, #9]
   4beb0:	7882      	ldrb	r2, [r0, #2]
   4beb2:	f88d 200a 	strb.w	r2, [sp, #10]
   4beb6:	79c2      	ldrb	r2, [r0, #7]
   4beb8:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   4bebc:	7b02      	ldrb	r2, [r0, #12]
   4bebe:	f88d 200c 	strb.w	r2, [sp, #12]
   4bec2:	7842      	ldrb	r2, [r0, #1]
   4bec4:	f88d 200d 	strb.w	r2, [sp, #13]
   4bec8:	7ac3      	ldrb	r3, [r0, #11]
   4beca:	7982      	ldrb	r2, [r0, #6]
   4becc:	f88d 200e 	strb.w	r2, [sp, #14]
   4bed0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   4bed4:	2310      	movs	r3, #16
   4bed6:	466a      	mov	r2, sp
   4bed8:	4619      	mov	r1, r3
   4beda:	f7ff f87c 	bl	4afd6 <_copy>
}
   4bede:	b005      	add	sp, #20
   4bee0:	f85d fb04 	ldr.w	pc, [sp], #4

0004bee4 <mult_row_column>:
{
   4bee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4bee6:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   4bee8:	7808      	ldrb	r0, [r1, #0]
{
   4beea:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   4beec:	f7ff f882 	bl	4aff4 <_double_byte>
   4bef0:	4605      	mov	r5, r0
   4bef2:	7860      	ldrb	r0, [r4, #1]
   4bef4:	f7ff f87e 	bl	4aff4 <_double_byte>
   4bef8:	78a2      	ldrb	r2, [r4, #2]
   4befa:	7863      	ldrb	r3, [r4, #1]
   4befc:	4053      	eors	r3, r2
   4befe:	78e2      	ldrb	r2, [r4, #3]
   4bf00:	4053      	eors	r3, r2
   4bf02:	405d      	eors	r5, r3
   4bf04:	4045      	eors	r5, r0
   4bf06:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   4bf08:	7860      	ldrb	r0, [r4, #1]
   4bf0a:	7827      	ldrb	r7, [r4, #0]
   4bf0c:	f7ff f872 	bl	4aff4 <_double_byte>
   4bf10:	4605      	mov	r5, r0
   4bf12:	78a0      	ldrb	r0, [r4, #2]
   4bf14:	f7ff f86e 	bl	4aff4 <_double_byte>
   4bf18:	78a3      	ldrb	r3, [r4, #2]
   4bf1a:	405f      	eors	r7, r3
   4bf1c:	78e3      	ldrb	r3, [r4, #3]
   4bf1e:	405f      	eors	r7, r3
   4bf20:	407d      	eors	r5, r7
   4bf22:	4045      	eors	r5, r0
   4bf24:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   4bf26:	78a0      	ldrb	r0, [r4, #2]
   4bf28:	7865      	ldrb	r5, [r4, #1]
   4bf2a:	7827      	ldrb	r7, [r4, #0]
   4bf2c:	f7ff f862 	bl	4aff4 <_double_byte>
   4bf30:	406f      	eors	r7, r5
   4bf32:	4605      	mov	r5, r0
   4bf34:	78e0      	ldrb	r0, [r4, #3]
   4bf36:	f7ff f85d 	bl	4aff4 <_double_byte>
   4bf3a:	78e3      	ldrb	r3, [r4, #3]
   4bf3c:	405f      	eors	r7, r3
   4bf3e:	407d      	eors	r5, r7
   4bf40:	4045      	eors	r5, r0
   4bf42:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   4bf44:	7820      	ldrb	r0, [r4, #0]
   4bf46:	f7ff f855 	bl	4aff4 <_double_byte>
   4bf4a:	7863      	ldrb	r3, [r4, #1]
   4bf4c:	7825      	ldrb	r5, [r4, #0]
   4bf4e:	405d      	eors	r5, r3
   4bf50:	78a3      	ldrb	r3, [r4, #2]
   4bf52:	405d      	eors	r5, r3
   4bf54:	4045      	eors	r5, r0
   4bf56:	78e0      	ldrb	r0, [r4, #3]
   4bf58:	f7ff f84c 	bl	4aff4 <_double_byte>
   4bf5c:	b2ed      	uxtb	r5, r5
   4bf5e:	4068      	eors	r0, r5
   4bf60:	70f0      	strb	r0, [r6, #3]
}
   4bf62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004bf64 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   4bf64:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   4bf66:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   4bf68:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   4bf6a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   4bf6e:	2b00      	cmp	r3, #0
   4bf70:	bfb4      	ite	lt
   4bf72:	2387      	movlt	r3, #135	; 0x87
   4bf74:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   4bf76:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   4bf7a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   4bf7e:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   4bf80:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   4bf84:	d002      	beq.n	4bf8c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   4bf86:	7813      	ldrb	r3, [r2, #0]
   4bf88:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   4bf8a:	e7f4      	b.n	4bf76 <gf_double+0x12>
	}
}
   4bf8c:	bd10      	pop	{r4, pc}

0004bf8e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   4bf8e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   4bf90:	b120      	cbz	r0, 4bf9c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   4bf92:	2258      	movs	r2, #88	; 0x58
   4bf94:	2100      	movs	r1, #0
   4bf96:	f7ff f82b 	bl	4aff0 <_set>
   4bf9a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   4bf9c:	bd08      	pop	{r3, pc}

0004bf9e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   4bf9e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   4bfa0:	4604      	mov	r4, r0
   4bfa2:	b188      	cbz	r0, 4bfc8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   4bfa4:	2210      	movs	r2, #16
   4bfa6:	2100      	movs	r1, #0
   4bfa8:	f7ff f822 	bl	4aff0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   4bfac:	2210      	movs	r2, #16
   4bfae:	f104 0030 	add.w	r0, r4, #48	; 0x30
   4bfb2:	2100      	movs	r1, #0
   4bfb4:	f7ff f81c 	bl	4aff0 <_set>
	s->leftover_offset = 0;
   4bfb8:	2300      	movs	r3, #0
   4bfba:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   4bfbc:	2200      	movs	r2, #0
   4bfbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   4bfc2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   4bfc6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   4bfc8:	bd10      	pop	{r4, pc}

0004bfca <tc_cmac_setup>:
{
   4bfca:	b570      	push	{r4, r5, r6, lr}
   4bfcc:	460d      	mov	r5, r1
   4bfce:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   4bfd0:	4604      	mov	r4, r0
   4bfd2:	b310      	cbz	r0, 4c01a <tc_cmac_setup+0x50>
   4bfd4:	b311      	cbz	r1, 4c01c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   4bfd6:	2258      	movs	r2, #88	; 0x58
   4bfd8:	2100      	movs	r1, #0
   4bfda:	f7ff f809 	bl	4aff0 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   4bfde:	4629      	mov	r1, r5
	s->sched = sched;
   4bfe0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   4bfe2:	4630      	mov	r0, r6
   4bfe4:	f7e0 fc74 	bl	2c8d0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   4bfe8:	2210      	movs	r2, #16
   4bfea:	2100      	movs	r1, #0
   4bfec:	4620      	mov	r0, r4
   4bfee:	f7fe ffff 	bl	4aff0 <_set>
	gf_double (s->K1, s->iv);
   4bff2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   4bff6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4bff8:	4621      	mov	r1, r4
   4bffa:	4620      	mov	r0, r4
   4bffc:	f7e0 fcbe 	bl	2c97c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   4c000:	4621      	mov	r1, r4
   4c002:	4628      	mov	r0, r5
   4c004:	f7ff ffae 	bl	4bf64 <gf_double>
	gf_double (s->K2, s->K1);
   4c008:	4629      	mov	r1, r5
   4c00a:	f104 0020 	add.w	r0, r4, #32
   4c00e:	f7ff ffa9 	bl	4bf64 <gf_double>
	tc_cmac_init(s);
   4c012:	4620      	mov	r0, r4
   4c014:	f7ff ffc3 	bl	4bf9e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   4c018:	2001      	movs	r0, #1
}
   4c01a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   4c01c:	4608      	mov	r0, r1
   4c01e:	e7fc      	b.n	4c01a <tc_cmac_setup+0x50>

0004c020 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   4c020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4c024:	460d      	mov	r5, r1
   4c026:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   4c028:	4604      	mov	r4, r0
   4c02a:	2800      	cmp	r0, #0
   4c02c:	d061      	beq.n	4c0f2 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   4c02e:	b912      	cbnz	r2, 4c036 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   4c030:	2001      	movs	r0, #1
}
   4c032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   4c036:	2900      	cmp	r1, #0
   4c038:	d05b      	beq.n	4c0f2 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   4c03a:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   4c03e:	ea50 0301 	orrs.w	r3, r0, r1
   4c042:	d056      	beq.n	4c0f2 <tc_cmac_update+0xd2>
	s->countdown--;
   4c044:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   4c048:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   4c04c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   4c050:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   4c054:	f1b8 0f00 	cmp.w	r8, #0
   4c058:	d02a      	beq.n	4c0b0 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   4c05a:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   4c05e:	f108 0030 	add.w	r0, r8, #48	; 0x30
   4c062:	42be      	cmp	r6, r7
   4c064:	4420      	add	r0, r4
   4c066:	d208      	bcs.n	4c07a <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   4c068:	4633      	mov	r3, r6
   4c06a:	4631      	mov	r1, r6
   4c06c:	462a      	mov	r2, r5
   4c06e:	f7fe ffb2 	bl	4afd6 <_copy>
			s->leftover_offset += data_length;
   4c072:	6c63      	ldr	r3, [r4, #68]	; 0x44
   4c074:	441e      	add	r6, r3
		s->leftover_offset = data_length;
   4c076:	6466      	str	r6, [r4, #68]	; 0x44
   4c078:	e7da      	b.n	4c030 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   4c07a:	463b      	mov	r3, r7
   4c07c:	462a      	mov	r2, r5
   4c07e:	4639      	mov	r1, r7
   4c080:	f7fe ffa9 	bl	4afd6 <_copy>
		data_length -= remaining_space;
   4c084:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   4c086:	2300      	movs	r3, #0
   4c088:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   4c08a:	4446      	add	r6, r8
		data += remaining_space;
   4c08c:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c08e:	1e63      	subs	r3, r4, #1
   4c090:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   4c094:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4c098:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c09c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   4c09e:	ea82 0200 	eor.w	r2, r2, r0
   4c0a2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c0a4:	d1f6      	bne.n	4c094 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   4c0a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4c0a8:	4621      	mov	r1, r4
   4c0aa:	4620      	mov	r0, r4
   4c0ac:	f7e0 fc66 	bl	2c97c <tc_aes_encrypt>
   4c0b0:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   4c0b4:	2e10      	cmp	r6, #16
   4c0b6:	d809      	bhi.n	4c0cc <tc_cmac_update+0xac>
	if (data_length > 0) {
   4c0b8:	2e00      	cmp	r6, #0
   4c0ba:	d0b9      	beq.n	4c030 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   4c0bc:	4633      	mov	r3, r6
   4c0be:	462a      	mov	r2, r5
   4c0c0:	4631      	mov	r1, r6
   4c0c2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   4c0c6:	f7fe ff86 	bl	4afd6 <_copy>
   4c0ca:	e7d4      	b.n	4c076 <tc_cmac_update+0x56>
   4c0cc:	1e63      	subs	r3, r4, #1
   4c0ce:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   4c0d0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4c0d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c0d8:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   4c0da:	ea82 0200 	eor.w	r2, r2, r0
   4c0de:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c0e0:	d1f6      	bne.n	4c0d0 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   4c0e2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4c0e4:	4621      	mov	r1, r4
   4c0e6:	4620      	mov	r0, r4
   4c0e8:	f7e0 fc48 	bl	2c97c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   4c0ec:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   4c0ee:	3e10      	subs	r6, #16
   4c0f0:	e7e0      	b.n	4c0b4 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   4c0f2:	2000      	movs	r0, #0
   4c0f4:	e79d      	b.n	4c032 <tc_cmac_update+0x12>

0004c0f6 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   4c0f6:	b570      	push	{r4, r5, r6, lr}
   4c0f8:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   4c0fa:	4605      	mov	r5, r0
   4c0fc:	b1e8      	cbz	r0, 4c13a <tc_cmac_final+0x44>
   4c0fe:	b369      	cbz	r1, 4c15c <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   4c100:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   4c102:	2a10      	cmp	r2, #16
   4c104:	d11a      	bne.n	4c13c <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   4c106:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c108:	1e63      	subs	r3, r4, #1
   4c10a:	3901      	subs	r1, #1
   4c10c:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   4c110:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   4c114:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   4c118:	4072      	eors	r2, r6
   4c11a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c11e:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   4c120:	ea82 0206 	eor.w	r2, r2, r6
   4c124:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   4c126:	d1f3      	bne.n	4c110 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   4c128:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4c12a:	4621      	mov	r1, r4
   4c12c:	4628      	mov	r0, r5
   4c12e:	f7e0 fc25 	bl	2c97c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   4c132:	4620      	mov	r0, r4
   4c134:	f7ff ff2b 	bl	4bf8e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   4c138:	2001      	movs	r0, #1
}
   4c13a:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   4c13c:	f102 0030 	add.w	r0, r2, #48	; 0x30
   4c140:	2100      	movs	r1, #0
   4c142:	f1c2 0210 	rsb	r2, r2, #16
   4c146:	4420      	add	r0, r4
   4c148:	f7fe ff52 	bl	4aff0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   4c14c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   4c14e:	4423      	add	r3, r4
   4c150:	2280      	movs	r2, #128	; 0x80
   4c152:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   4c156:	f104 0120 	add.w	r1, r4, #32
   4c15a:	e7d5      	b.n	4c108 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   4c15c:	4608      	mov	r0, r1
   4c15e:	e7ec      	b.n	4c13a <tc_cmac_final+0x44>

0004c160 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   4c160:	f004 bdef 	b.w	50d42 <z_fatal_error>

0004c164 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   4c164:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   4c166:	6800      	ldr	r0, [r0, #0]
   4c168:	f004 bdeb 	b.w	50d42 <z_fatal_error>

0004c16c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   4c16c:	2100      	movs	r1, #0
   4c16e:	2001      	movs	r0, #1
   4c170:	f7ff bff6 	b.w	4c160 <z_arm_fatal_error>

0004c174 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   4c174:	b508      	push	{r3, lr}
	handler();
   4c176:	f7e0 fce1 	bl	2cb3c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   4c17a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   4c17e:	f7e0 bda1 	b.w	2ccc4 <z_arm_exc_exit>

0004c182 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   4c182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4c186:	4684      	mov	ip, r0
   4c188:	460f      	mov	r7, r1
	register const char *s = nptr;
   4c18a:	4605      	mov	r5, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   4c18c:	462c      	mov	r4, r5
   4c18e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
}

static inline int isspace(int c)
{
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   4c192:	2b20      	cmp	r3, #32
   4c194:	d035      	beq.n	4c202 <strtoul+0x80>
   4c196:	f1a3 0109 	sub.w	r1, r3, #9
   4c19a:	2904      	cmp	r1, #4
   4c19c:	d931      	bls.n	4c202 <strtoul+0x80>
	} while (isspace(c));
	if (c == '-') {
   4c19e:	2b2d      	cmp	r3, #45	; 0x2d
   4c1a0:	d131      	bne.n	4c206 <strtoul+0x84>
		neg = 1;
		c = *s++;
   4c1a2:	786b      	ldrb	r3, [r5, #1]
   4c1a4:	1cac      	adds	r4, r5, #2
		neg = 1;
   4c1a6:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   4c1aa:	2a00      	cmp	r2, #0
   4c1ac:	d05e      	beq.n	4c26c <strtoul+0xea>
   4c1ae:	2a10      	cmp	r2, #16
   4c1b0:	d109      	bne.n	4c1c6 <strtoul+0x44>
   4c1b2:	2b30      	cmp	r3, #48	; 0x30
   4c1b4:	d107      	bne.n	4c1c6 <strtoul+0x44>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   4c1b6:	7823      	ldrb	r3, [r4, #0]
   4c1b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   4c1bc:	2b58      	cmp	r3, #88	; 0x58
   4c1be:	d150      	bne.n	4c262 <strtoul+0xe0>
		c = s[1];
   4c1c0:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   4c1c2:	2210      	movs	r2, #16
		s += 2;
   4c1c4:	3402      	adds	r4, #2

	if (base == 0) {
		base = c == '0' ? 8 : 10;
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   4c1c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   4c1ca:	2600      	movs	r6, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   4c1cc:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   4c1d0:	fb02 f801 	mul.w	r8, r2, r1
   4c1d4:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   4c1d8:	4630      	mov	r0, r6
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   4c1da:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   4c1de:	2d09      	cmp	r5, #9
   4c1e0:	d818      	bhi.n	4c214 <strtoul+0x92>
			c -= '0';
   4c1e2:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   4c1e4:	429a      	cmp	r2, r3
   4c1e6:	dd25      	ble.n	4c234 <strtoul+0xb2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   4c1e8:	2e00      	cmp	r6, #0
   4c1ea:	db20      	blt.n	4c22e <strtoul+0xac>
   4c1ec:	4288      	cmp	r0, r1
   4c1ee:	d81e      	bhi.n	4c22e <strtoul+0xac>
   4c1f0:	d101      	bne.n	4c1f6 <strtoul+0x74>
   4c1f2:	4543      	cmp	r3, r8
   4c1f4:	dc1b      	bgt.n	4c22e <strtoul+0xac>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   4c1f6:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   4c1fa:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   4c1fc:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   4c200:	e7eb      	b.n	4c1da <strtoul+0x58>
{
   4c202:	4625      	mov	r5, r4
   4c204:	e7c2      	b.n	4c18c <strtoul+0xa>
	} else if (c == '+') {
   4c206:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   4c208:	bf04      	itt	eq
   4c20a:	1cac      	addeq	r4, r5, #2
   4c20c:	786b      	ldrbeq	r3, [r5, #1]
	register int neg = 0, any, cutlim;
   4c20e:	f04f 0e00 	mov.w	lr, #0
   4c212:	e7ca      	b.n	4c1aa <strtoul+0x28>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   4c214:	f043 0520 	orr.w	r5, r3, #32
   4c218:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   4c21a:	2d19      	cmp	r5, #25
   4c21c:	d80a      	bhi.n	4c234 <strtoul+0xb2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   4c21e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   4c222:	2d1a      	cmp	r5, #26
   4c224:	bf34      	ite	cc
   4c226:	2537      	movcc	r5, #55	; 0x37
   4c228:	2557      	movcs	r5, #87	; 0x57
   4c22a:	1b5b      	subs	r3, r3, r5
   4c22c:	e7da      	b.n	4c1e4 <strtoul+0x62>
			any = -1;
   4c22e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   4c232:	e7e3      	b.n	4c1fc <strtoul+0x7a>
		}
	}
	if (any < 0) {
   4c234:	2e00      	cmp	r6, #0
   4c236:	da08      	bge.n	4c24a <strtoul+0xc8>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   4c238:	f7fb ff98 	bl	4816c <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   4c23c:	2322      	movs	r3, #34	; 0x22
   4c23e:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   4c240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   4c244:	b947      	cbnz	r7, 4c258 <strtoul+0xd6>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   4c246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   4c24a:	f1be 0f00 	cmp.w	lr, #0
   4c24e:	d000      	beq.n	4c252 <strtoul+0xd0>
		acc = -acc;
   4c250:	4240      	negs	r0, r0
	if (endptr != NULL) {
   4c252:	2f00      	cmp	r7, #0
   4c254:	d0f7      	beq.n	4c246 <strtoul+0xc4>
		*endptr = (char *)(any ? s - 1 : nptr);
   4c256:	b10e      	cbz	r6, 4c25c <strtoul+0xda>
   4c258:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   4c25c:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   4c260:	e7f1      	b.n	4c246 <strtoul+0xc4>
	if (base == 0) {
   4c262:	2330      	movs	r3, #48	; 0x30
   4c264:	2a00      	cmp	r2, #0
   4c266:	d1ae      	bne.n	4c1c6 <strtoul+0x44>
		base = c == '0' ? 8 : 10;
   4c268:	2208      	movs	r2, #8
   4c26a:	e7ac      	b.n	4c1c6 <strtoul+0x44>
	if ((base == 0 || base == 16) &&
   4c26c:	2b30      	cmp	r3, #48	; 0x30
   4c26e:	d0a2      	beq.n	4c1b6 <strtoul+0x34>
		base = c == '0' ? 8 : 10;
   4c270:	220a      	movs	r2, #10
   4c272:	e7a8      	b.n	4c1c6 <strtoul+0x44>

0004c274 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   4c274:	3901      	subs	r1, #1
   4c276:	4603      	mov	r3, r0
   4c278:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4c27c:	b90a      	cbnz	r2, 4c282 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   4c27e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   4c280:	4770      	bx	lr
		*d = *s;
   4c282:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   4c286:	e7f7      	b.n	4c278 <strcpy+0x4>

0004c288 <strlen>:
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
	size_t n = 0;
   4c288:	2300      	movs	r3, #0

	while (*s != '\0') {
   4c28a:	5cc2      	ldrb	r2, [r0, r3]
   4c28c:	b90a      	cbnz	r2, 4c292 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   4c28e:	4618      	mov	r0, r3
   4c290:	4770      	bx	lr
		n++;
   4c292:	3301      	adds	r3, #1
   4c294:	e7f9      	b.n	4c28a <strlen+0x2>

0004c296 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   4c296:	3801      	subs	r0, #1
   4c298:	3901      	subs	r1, #1
   4c29a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   4c29e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4c2a2:	4293      	cmp	r3, r2
   4c2a4:	d101      	bne.n	4c2aa <strcmp+0x14>
   4c2a6:	2b00      	cmp	r3, #0
   4c2a8:	d1f7      	bne.n	4c29a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   4c2aa:	1a98      	subs	r0, r3, r2
   4c2ac:	4770      	bx	lr

0004c2ae <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   4c2ae:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   4c2b0:	2400      	movs	r4, #0
   4c2b2:	42a2      	cmp	r2, r4
   4c2b4:	d008      	beq.n	4c2c8 <strncmp+0x1a>
   4c2b6:	5d03      	ldrb	r3, [r0, r4]
   4c2b8:	5d0d      	ldrb	r5, [r1, r4]
   4c2ba:	42ab      	cmp	r3, r5
   4c2bc:	d102      	bne.n	4c2c4 <strncmp+0x16>
   4c2be:	3401      	adds	r4, #1
   4c2c0:	2b00      	cmp	r3, #0
   4c2c2:	d1f6      	bne.n	4c2b2 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   4c2c4:	1b58      	subs	r0, r3, r5
   4c2c6:	e000      	b.n	4c2ca <strncmp+0x1c>
   4c2c8:	2000      	movs	r0, #0
}
   4c2ca:	bd30      	pop	{r4, r5, pc}

0004c2cc <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   4c2cc:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   4c2ce:	b15a      	cbz	r2, 4c2e8 <memcmp+0x1c>
   4c2d0:	3901      	subs	r1, #1
   4c2d2:	1884      	adds	r4, r0, r2
   4c2d4:	f810 2b01 	ldrb.w	r2, [r0], #1
   4c2d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   4c2dc:	42a0      	cmp	r0, r4
   4c2de:	d001      	beq.n	4c2e4 <memcmp+0x18>
   4c2e0:	429a      	cmp	r2, r3
   4c2e2:	d0f7      	beq.n	4c2d4 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   4c2e4:	1ad0      	subs	r0, r2, r3
}
   4c2e6:	bd10      	pop	{r4, pc}
		return 0;
   4c2e8:	4610      	mov	r0, r2
   4c2ea:	e7fc      	b.n	4c2e6 <memcmp+0x1a>

0004c2ec <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   4c2ec:	b510      	push	{r4, lr}
   4c2ee:	1e43      	subs	r3, r0, #1
   4c2f0:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   4c2f2:	4291      	cmp	r1, r2
   4c2f4:	d100      	bne.n	4c2f8 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   4c2f6:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   4c2f8:	f811 4b01 	ldrb.w	r4, [r1], #1
   4c2fc:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   4c300:	e7f7      	b.n	4c2f2 <memcpy+0x6>

0004c302 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   4c302:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   4c304:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   4c306:	4603      	mov	r3, r0
	while (n > 0) {
   4c308:	4293      	cmp	r3, r2
   4c30a:	d100      	bne.n	4c30e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   4c30c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   4c30e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   4c312:	e7f9      	b.n	4c308 <memset+0x6>

0004c314 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   4c314:	684b      	ldr	r3, [r1, #4]
   4c316:	2b01      	cmp	r3, #1
   4c318:	dd07      	ble.n	4c32a <sprintf_out+0x16>
		*(p->ptr) = c;
   4c31a:	680b      	ldr	r3, [r1, #0]
   4c31c:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   4c31e:	680b      	ldr	r3, [r1, #0]
   4c320:	3301      	adds	r3, #1
   4c322:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   4c324:	684b      	ldr	r3, [r1, #4]
   4c326:	3b01      	subs	r3, #1
   4c328:	604b      	str	r3, [r1, #4]
}
   4c32a:	2000      	movs	r0, #0
   4c32c:	4770      	bx	lr

0004c32e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   4c32e:	b084      	sub	sp, #16
   4c330:	ab04      	add	r3, sp, #16
   4c332:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   4c336:	f89d 3004 	ldrb.w	r3, [sp, #4]
   4c33a:	2b06      	cmp	r3, #6
   4c33c:	d108      	bne.n	4c350 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   4c33e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   4c342:	2201      	movs	r2, #1
   4c344:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   4c348:	f3bf 8f4f 	dsb	sy
        __WFE();
   4c34c:	bf20      	wfe
   4c34e:	e7fd      	b.n	4c34c <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   4c350:	b004      	add	sp, #16
   4c352:	4770      	bx	lr

0004c354 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   4c354:	b084      	sub	sp, #16
   4c356:	ab04      	add	r3, sp, #16
   4c358:	e903 0007 	stmdb	r3, {r0, r1, r2}
   4c35c:	2300      	movs	r3, #0
   4c35e:	f383 8811 	msr	BASEPRI, r3
   4c362:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   4c366:	b004      	add	sp, #16
   4c368:	4770      	bx	lr

0004c36a <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   4c36a:	b530      	push	{r4, r5, lr}
   4c36c:	b085      	sub	sp, #20
   4c36e:	4604      	mov	r4, r0
   4c370:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   4c372:	4668      	mov	r0, sp
   4c374:	2203      	movs	r2, #3
   4c376:	f7ff ffb9 	bl	4c2ec <memcpy>
	(void)memset(res + 3, 0, 13);
   4c37a:	220d      	movs	r2, #13
   4c37c:	2100      	movs	r1, #0
   4c37e:	f10d 0003 	add.w	r0, sp, #3
   4c382:	f7ff ffbe 	bl	4c302 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   4c386:	4620      	mov	r0, r4
   4c388:	466a      	mov	r2, sp
   4c38a:	4669      	mov	r1, sp
   4c38c:	f7ea ff10 	bl	371b0 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   4c390:	4604      	mov	r4, r0
   4c392:	b920      	cbnz	r0, 4c39e <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   4c394:	2203      	movs	r2, #3
   4c396:	4669      	mov	r1, sp
   4c398:	4628      	mov	r0, r5
   4c39a:	f7ff ffa7 	bl	4c2ec <memcpy>

	return 0;
}
   4c39e:	4620      	mov	r0, r4
   4c3a0:	b005      	add	sp, #20
   4c3a2:	bd30      	pop	{r4, r5, pc}

0004c3a4 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   4c3a4:	b513      	push	{r0, r1, r4, lr}
   4c3a6:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   4c3a8:	aa01      	add	r2, sp, #4
   4c3aa:	3103      	adds	r1, #3
   4c3ac:	f7ff ffdd 	bl	4c36a <ah>
	if (err) {
   4c3b0:	b948      	cbnz	r0, 4c3c6 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   4c3b2:	2203      	movs	r2, #3
   4c3b4:	a901      	add	r1, sp, #4
   4c3b6:	4620      	mov	r0, r4
   4c3b8:	f7ff ff88 	bl	4c2cc <memcmp>
   4c3bc:	fab0 f080 	clz	r0, r0
   4c3c0:	0940      	lsrs	r0, r0, #5
}
   4c3c2:	b002      	add	sp, #8
   4c3c4:	bd10      	pop	{r4, pc}
		return false;
   4c3c6:	2000      	movs	r0, #0
   4c3c8:	e7fb      	b.n	4c3c2 <bt_rpa_irk_matches+0x1e>

0004c3ca <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   4c3ca:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   4c3cc:	1ccd      	adds	r5, r1, #3
{
   4c3ce:	4606      	mov	r6, r0
   4c3d0:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   4c3d2:	4628      	mov	r0, r5
   4c3d4:	2103      	movs	r1, #3
   4c3d6:	f7ea fee9 	bl	371ac <bt_rand>
	if (err) {
   4c3da:	b960      	cbnz	r0, 4c3f6 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   4c3dc:	7963      	ldrb	r3, [r4, #5]
   4c3de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4c3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   4c3e6:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   4c3e8:	4622      	mov	r2, r4
   4c3ea:	4629      	mov	r1, r5
   4c3ec:	4630      	mov	r0, r6
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   4c3ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   4c3f2:	f7ff bfba 	b.w	4c36a <ah>
}
   4c3f6:	bd70      	pop	{r4, r5, r6, pc}

0004c3f8 <send_cmd_status>:
{
   4c3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   4c3fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   4c400:	4680      	mov	r8, r0
   4c402:	460f      	mov	r7, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   4c404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4c408:	2100      	movs	r1, #0
   4c40a:	200f      	movs	r0, #15
   4c40c:	f7e1 f996 	bl	2d73c <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   4c410:	2501      	movs	r5, #1
	return net_buf_simple_add(&buf->b, len);
   4c412:	f100 0608 	add.w	r6, r0, #8
   4c416:	4604      	mov	r4, r0
   4c418:	7505      	strb	r5, [r0, #20]
   4c41a:	2102      	movs	r1, #2
   4c41c:	4630      	mov	r0, r6
   4c41e:	f003 feba 	bl	50196 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   4c422:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   4c424:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   4c426:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   4c428:	7041      	strb	r1, [r0, #1]
   4c42a:	4630      	mov	r0, r6
   4c42c:	f003 feb3 	bl	50196 <net_buf_simple_add>
	evt->ncmd = 1U;
   4c430:	7045      	strb	r5, [r0, #1]
	evt->status = status;
   4c432:	7007      	strb	r7, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   4c434:	f8a0 8002 	strh.w	r8, [r0, #2]
		bt_recv_prio(buf);
   4c438:	4620      	mov	r0, r4
}
   4c43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   4c43e:	f7e1 bfb3 	b.w	2e3a8 <bt_recv_prio>

0004c442 <sys_memcpy_swap.constprop.2>:
	for (; length > 0; length--) {
   4c442:	f101 0320 	add.w	r3, r1, #32
   4c446:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   4c448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   4c44c:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   4c450:	428b      	cmp	r3, r1
   4c452:	d1f9      	bne.n	4c448 <sys_memcpy_swap.constprop.2+0x6>
}
   4c454:	4770      	bx	lr

0004c456 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   4c456:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   4c45a:	f043 0306 	orr.w	r3, r3, #6
   4c45e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   4c462:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   4c466:	f043 0304 	orr.w	r3, r3, #4
   4c46a:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   4c46e:	4770      	bx	lr

0004c470 <default_CSPRNG>:
{
   4c470:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   4c472:	f7ea fe9b 	bl	371ac <bt_rand>
}
   4c476:	fab0 f080 	clz	r0, r0
   4c47a:	0940      	lsrs	r0, r0, #5
   4c47c:	bd08      	pop	{r3, pc}

0004c47e <bt_settings_decode_key>:
{
   4c47e:	b570      	push	{r4, r5, r6, lr}
   4c480:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   4c482:	2100      	movs	r1, #0
{
   4c484:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   4c486:	f7fe fc53 	bl	4ad30 <settings_name_next>
   4c48a:	280d      	cmp	r0, #13
   4c48c:	d118      	bne.n	4c4c0 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   4c48e:	7b23      	ldrb	r3, [r4, #12]
   4c490:	2b30      	cmp	r3, #48	; 0x30
   4c492:	d111      	bne.n	4c4b8 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   4c494:	2300      	movs	r3, #0
   4c496:	702b      	strb	r3, [r5, #0]
   4c498:	f104 060c 	add.w	r6, r4, #12
   4c49c:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   4c49e:	462a      	mov	r2, r5
   4c4a0:	4620      	mov	r0, r4
   4c4a2:	2301      	movs	r3, #1
   4c4a4:	2102      	movs	r1, #2
   4c4a6:	3402      	adds	r4, #2
   4c4a8:	f7fd fd9d 	bl	49fe6 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   4c4ac:	42b4      	cmp	r4, r6
   4c4ae:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   4c4b2:	d1f4      	bne.n	4c49e <bt_settings_decode_key+0x20>
	return 0;
   4c4b4:	2000      	movs	r0, #0
}
   4c4b6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   4c4b8:	2b31      	cmp	r3, #49	; 0x31
   4c4ba:	d101      	bne.n	4c4c0 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   4c4bc:	2301      	movs	r3, #1
   4c4be:	e7ea      	b.n	4c496 <bt_settings_decode_key+0x18>
		return -EINVAL;
   4c4c0:	f06f 0015 	mvn.w	r0, #21
   4c4c4:	e7f7      	b.n	4c4b6 <bt_settings_decode_key+0x38>

0004c4c6 <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   4c4c6:	f7df be89 	b.w	2c1dc <settings_subsys_init>

0004c4ca <bt_uuid_cmp>:
{
   4c4ca:	b510      	push	{r4, lr}
   4c4cc:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   4c4ce:	7801      	ldrb	r1, [r0, #0]
   4c4d0:	7822      	ldrb	r2, [r4, #0]
   4c4d2:	428a      	cmp	r2, r1
{
   4c4d4:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   4c4d6:	d00e      	beq.n	4c4f6 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   4c4d8:	4669      	mov	r1, sp
   4c4da:	f7e1 f86b 	bl	2d5b4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   4c4de:	a905      	add	r1, sp, #20
   4c4e0:	4620      	mov	r0, r4
   4c4e2:	f7e1 f867 	bl	2d5b4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   4c4e6:	2210      	movs	r2, #16
   4c4e8:	f10d 0115 	add.w	r1, sp, #21
   4c4ec:	f10d 0001 	add.w	r0, sp, #1
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   4c4f0:	f7ff feec 	bl	4c2cc <memcmp>
   4c4f4:	e006      	b.n	4c504 <bt_uuid_cmp+0x3a>
	switch (u1->type) {
   4c4f6:	2a01      	cmp	r2, #1
   4c4f8:	d00a      	beq.n	4c510 <bt_uuid_cmp+0x46>
   4c4fa:	b12a      	cbz	r2, 4c508 <bt_uuid_cmp+0x3e>
   4c4fc:	2a02      	cmp	r2, #2
   4c4fe:	d00a      	beq.n	4c516 <bt_uuid_cmp+0x4c>
	return -EINVAL;
   4c500:	f06f 0015 	mvn.w	r0, #21
}
   4c504:	b00a      	add	sp, #40	; 0x28
   4c506:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   4c508:	8840      	ldrh	r0, [r0, #2]
   4c50a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   4c50c:	1ac0      	subs	r0, r0, r3
   4c50e:	e7f9      	b.n	4c504 <bt_uuid_cmp+0x3a>
   4c510:	6840      	ldr	r0, [r0, #4]
   4c512:	6863      	ldr	r3, [r4, #4]
   4c514:	e7fa      	b.n	4c50c <bt_uuid_cmp+0x42>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   4c516:	2210      	movs	r2, #16
   4c518:	1c61      	adds	r1, r4, #1
   4c51a:	3001      	adds	r0, #1
   4c51c:	e7e8      	b.n	4c4f0 <bt_uuid_cmp+0x26>

0004c51e <bt_uuid_create>:
	switch (data_len) {
   4c51e:	2a04      	cmp	r2, #4
{
   4c520:	b538      	push	{r3, r4, r5, lr}
   4c522:	460c      	mov	r4, r1
	switch (data_len) {
   4c524:	d00d      	beq.n	4c542 <bt_uuid_create+0x24>
   4c526:	2a10      	cmp	r2, #16
   4c528:	d019      	beq.n	4c55e <bt_uuid_create+0x40>
   4c52a:	2a02      	cmp	r2, #2
   4c52c:	f04f 0300 	mov.w	r3, #0
   4c530:	d11b      	bne.n	4c56a <bt_uuid_create+0x4c>
		uuid->type = BT_UUID_TYPE_16;
   4c532:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   4c534:	784a      	ldrb	r2, [r1, #1]
   4c536:	780b      	ldrb	r3, [r1, #0]
   4c538:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   4c53c:	8043      	strh	r3, [r0, #2]
	return true;
   4c53e:	2001      	movs	r0, #1
}
   4c540:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   4c542:	2301      	movs	r3, #1
   4c544:	7003      	strb	r3, [r0, #0]
   4c546:	78a2      	ldrb	r2, [r4, #2]
   4c548:	78c9      	ldrb	r1, [r1, #3]
   4c54a:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   4c54c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   4c550:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   4c552:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   4c556:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   4c55a:	6042      	str	r2, [r0, #4]
		break;
   4c55c:	e7ef      	b.n	4c53e <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   4c55e:	2302      	movs	r3, #2
   4c560:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   4c564:	f7ff fec2 	bl	4c2ec <memcpy>
		break;
   4c568:	e7e9      	b.n	4c53e <bt_uuid_create+0x20>
		return false;
   4c56a:	4618      	mov	r0, r3
   4c56c:	e7e8      	b.n	4c540 <bt_uuid_create+0x22>

0004c56e <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   4c56e:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   4c570:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   4c572:	2106      	movs	r1, #6
{
   4c574:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   4c576:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   4c57a:	f7ea fe17 	bl	371ac <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   4c57e:	b918      	cbnz	r0, 4c588 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   4c580:	79a3      	ldrb	r3, [r4, #6]
   4c582:	f063 033f 	orn	r3, r3, #63	; 0x3f
   4c586:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   4c588:	bd10      	pop	{r4, pc}

0004c58a <hci_data_buf_overflow>:
}
   4c58a:	4770      	bx	lr

0004c58c <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   4c58c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   4c590:	b193      	cbz	r3, 4c5b8 <update_sec_level+0x2c>
   4c592:	7b5a      	ldrb	r2, [r3, #13]
   4c594:	07d1      	lsls	r1, r2, #31
   4c596:	d50f      	bpl.n	4c5b8 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   4c598:	06d2      	lsls	r2, r2, #27
   4c59a:	d50b      	bpl.n	4c5b4 <update_sec_level+0x28>
   4c59c:	7b1b      	ldrb	r3, [r3, #12]
   4c59e:	2b10      	cmp	r3, #16
   4c5a0:	d108      	bne.n	4c5b4 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   4c5a2:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   4c5a4:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   4c5a6:	7a82      	ldrb	r2, [r0, #10]
   4c5a8:	7a40      	ldrb	r0, [r0, #9]
}
   4c5aa:	4282      	cmp	r2, r0
   4c5ac:	bf8c      	ite	hi
   4c5ae:	2000      	movhi	r0, #0
   4c5b0:	2001      	movls	r0, #1
   4c5b2:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   4c5b4:	2303      	movs	r3, #3
   4c5b6:	e7f5      	b.n	4c5a4 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   4c5b8:	2302      	movs	r3, #2
   4c5ba:	e7f3      	b.n	4c5a4 <update_sec_level+0x18>

0004c5bc <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4c5bc:	2207      	movs	r2, #7
   4c5be:	f7ff be95 	b.w	4c2ec <memcpy>

0004c5c2 <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4c5c2:	f3bf 8f5b 	dmb	ish
   4c5c6:	e850 3f00 	ldrex	r3, [r0]
   4c5ca:	ea43 0201 	orr.w	r2, r3, r1
   4c5ce:	e840 2c00 	strex	ip, r2, [r0]
   4c5d2:	f1bc 0f00 	cmp.w	ip, #0
   4c5d6:	d1f6      	bne.n	4c5c6 <atomic_or+0x4>
   4c5d8:	f3bf 8f5b 	dmb	ish
}
   4c5dc:	4618      	mov	r0, r3
   4c5de:	4770      	bx	lr

0004c5e0 <unpair_remote>:
	unpair(*id, &info->addr);
   4c5e0:	780b      	ldrb	r3, [r1, #0]
   4c5e2:	4601      	mov	r1, r0
   4c5e4:	4618      	mov	r0, r3
   4c5e6:	f7e1 b8d3 	b.w	2d790 <unpair>

0004c5ea <le_data_len_change>:
{
   4c5ea:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   4c5ec:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c5ee:	8818      	ldrh	r0, [r3, #0]
   4c5f0:	f7e3 fa58 	bl	2faa4 <bt_conn_lookup_handle>
	if (!conn) {
   4c5f4:	b118      	cbz	r0, 4c5fe <le_data_len_change+0x14>
}
   4c5f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   4c5fa:	f000 be08 	b.w	4d20e <bt_conn_unref>
}
   4c5fe:	bd08      	pop	{r3, pc}

0004c600 <hci_hardware_error>:
	return net_buf_simple_pull_mem(&buf->b, len);
   4c600:	2101      	movs	r1, #1
   4c602:	3008      	adds	r0, #8
   4c604:	f003 bdf8 	b.w	501f8 <net_buf_simple_pull_mem>

0004c608 <le_conn_update_complete>:
{
   4c608:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   4c60a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c60c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4c610:	f7e3 fa48 	bl	2faa4 <bt_conn_lookup_handle>
	if (!conn) {
   4c614:	4604      	mov	r4, r0
   4c616:	b1c0      	cbz	r0, 4c64a <le_conn_update_complete+0x42>
	if (!evt->status) {
   4c618:	782b      	ldrb	r3, [r5, #0]
   4c61a:	b9c3      	cbnz	r3, 4c64e <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   4c61c:	792a      	ldrb	r2, [r5, #4]
   4c61e:	78eb      	ldrb	r3, [r5, #3]
   4c620:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4c624:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   4c628:	79aa      	ldrb	r2, [r5, #6]
   4c62a:	796b      	ldrb	r3, [r5, #5]
   4c62c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4c630:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   4c634:	79eb      	ldrb	r3, [r5, #7]
   4c636:	7a2a      	ldrb	r2, [r5, #8]
   4c638:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4c63c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   4c640:	f7e3 fb32 	bl	2fca8 <notify_le_param_updated>
	bt_conn_unref(conn);
   4c644:	4620      	mov	r0, r4
   4c646:	f000 fde2 	bl	4d20e <bt_conn_unref>
}
   4c64a:	b003      	add	sp, #12
   4c64c:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   4c64e:	2b1a      	cmp	r3, #26
   4c650:	d1f8      	bne.n	4c644 <le_conn_update_complete+0x3c>
   4c652:	78c3      	ldrb	r3, [r0, #3]
   4c654:	2b01      	cmp	r3, #1
   4c656:	d1f5      	bne.n	4c644 <le_conn_update_complete+0x3c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   4c658:	f44f 6180 	mov.w	r1, #1024	; 0x400
   4c65c:	3004      	adds	r0, #4
   4c65e:	f7ff ffb0 	bl	4c5c2 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   4c662:	0543      	lsls	r3, r0, #21
   4c664:	d4ee      	bmi.n	4c644 <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   4c666:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   4c66a:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   4c66c:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   4c66e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   4c672:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   4c674:	4620      	mov	r0, r4
   4c676:	f7e3 ffe1 	bl	3063c <bt_l2cap_update_conn_param>
   4c67a:	e7e3      	b.n	4c644 <le_conn_update_complete+0x3c>

0004c67c <handle_event.part.7>:
static inline void handle_event(uint8_t event, struct net_buf *buf,
   4c67c:	b410      	push	{r4}
   4c67e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
   4c682:	7814      	ldrb	r4, [r2, #0]
   4c684:	4284      	cmp	r4, r0
   4c686:	d004      	beq.n	4c692 <handle_event.part.7+0x16>
			continue;
   4c688:	3208      	adds	r2, #8
	for (i = 0; i < num_handlers; i++) {
   4c68a:	429a      	cmp	r2, r3
   4c68c:	d1f9      	bne.n	4c682 <handle_event.part.7+0x6>
}
   4c68e:	bc10      	pop	{r4}
   4c690:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   4c692:	8988      	ldrh	r0, [r1, #12]
   4c694:	7853      	ldrb	r3, [r2, #1]
   4c696:	4298      	cmp	r0, r3
   4c698:	d3f9      	bcc.n	4c68e <handle_event.part.7+0x12>
		handler->handler(buf);
   4c69a:	6853      	ldr	r3, [r2, #4]
}
   4c69c:	bc10      	pop	{r4}
		handler->handler(buf);
   4c69e:	4608      	mov	r0, r1
   4c6a0:	4718      	bx	r3

0004c6a2 <hci_vendor_event>:
   4c6a2:	4770      	bx	lr

0004c6a4 <hci_num_completed_packets>:
{
   4c6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < evt->num_handles; i++) {
   4c6a8:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   4c6aa:	6887      	ldr	r7, [r0, #8]
			tx->pending_no_cb = 0U;
   4c6ac:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   4c6ae:	783b      	ldrb	r3, [r7, #0]
   4c6b0:	429d      	cmp	r5, r3
   4c6b2:	db01      	blt.n	4c6b8 <hci_num_completed_packets+0x14>
}
   4c6b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   4c6b8:	eb07 0385 	add.w	r3, r7, r5, lsl #2
		conn = bt_conn_lookup_handle(handle);
   4c6bc:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   4c6c0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   4c6c4:	f7e3 f9ee 	bl	2faa4 <bt_conn_lookup_handle>
		if (!conn) {
   4c6c8:	4604      	mov	r4, r0
   4c6ca:	b350      	cbz	r0, 4c722 <hci_num_completed_packets+0x7e>
			k_work_submit(&conn->tx_complete_work);
   4c6cc:	f100 0928 	add.w	r9, r0, #40	; 0x28
		while (count--) {
   4c6d0:	b326      	cbz	r6, 4c71c <hci_num_completed_packets+0x78>
	__asm__ volatile(
   4c6d2:	f04f 0320 	mov.w	r3, #32
   4c6d6:	f3ef 8211 	mrs	r2, BASEPRI
   4c6da:	f383 8812 	msr	BASEPRI_MAX, r3
   4c6de:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   4c6e2:	69e3      	ldr	r3, [r4, #28]
   4c6e4:	b16b      	cbz	r3, 4c702 <hci_num_completed_packets+0x5e>
				conn->pending_no_cb--;
   4c6e6:	3b01      	subs	r3, #1
   4c6e8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   4c6ea:	f382 8811 	msr	BASEPRI, r2
   4c6ee:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   4c6f2:	4620      	mov	r0, r4
   4c6f4:	f7e3 f950 	bl	2f998 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   4c6f8:	3e01      	subs	r6, #1
   4c6fa:	f7fc f8dd 	bl	488b8 <z_impl_k_sem_give>
   4c6fe:	b2b6      	uxth	r6, r6
   4c700:	e7e6      	b.n	4c6d0 <hci_num_completed_packets+0x2c>
Z_GENLIST_IS_EMPTY(slist)
   4c702:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   4c704:	b12b      	cbz	r3, 4c712 <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4c706:	69a1      	ldr	r1, [r4, #24]
   4c708:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   4c70a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4c70c:	428b      	cmp	r3, r1
	list->tail = node;
   4c70e:	bf08      	it	eq
   4c710:	61a0      	streq	r0, [r4, #24]
   4c712:	f382 8811 	msr	BASEPRI, r2
   4c716:	f3bf 8f6f 	isb	sy
			if (!node) {
   4c71a:	b923      	cbnz	r3, 4c726 <hci_num_completed_packets+0x82>
		bt_conn_unref(conn);
   4c71c:	4620      	mov	r0, r4
   4c71e:	f000 fd76 	bl	4d20e <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   4c722:	3501      	adds	r5, #1
   4c724:	e7c3      	b.n	4c6ae <hci_num_completed_packets+0xa>
	__asm__ volatile(
   4c726:	f04f 0220 	mov.w	r2, #32
   4c72a:	f3ef 8111 	mrs	r1, BASEPRI
   4c72e:	f382 8812 	msr	BASEPRI_MAX, r2
   4c732:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   4c736:	68da      	ldr	r2, [r3, #12]
   4c738:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   4c73a:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
   4c73e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   4c740:	f8c3 800c 	str.w	r8, [r3, #12]
   4c744:	b94a      	cbnz	r2, 4c75a <hci_num_completed_packets+0xb6>
	list->head = node;
   4c746:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   4c74a:	f381 8811 	msr	BASEPRI, r1
   4c74e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   4c752:	4648      	mov	r0, r9
   4c754:	f7fc fa1c 	bl	48b90 <k_work_submit>
   4c758:	e7cb      	b.n	4c6f2 <hci_num_completed_packets+0x4e>
	parent->next = child;
   4c75a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   4c75c:	6263      	str	r3, [r4, #36]	; 0x24
   4c75e:	e7f4      	b.n	4c74a <hci_num_completed_packets+0xa6>

0004c760 <hci_disconn_complete>:
{
   4c760:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   4c762:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   4c764:	7835      	ldrb	r5, [r6, #0]
   4c766:	bb0d      	cbnz	r5, 4c7ac <hci_disconn_complete+0x4c>
	conn = bt_conn_lookup_handle(handle);
   4c768:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   4c76c:	f7e3 f99a 	bl	2faa4 <bt_conn_lookup_handle>
	if (!conn) {
   4c770:	4604      	mov	r4, r0
   4c772:	b1d8      	cbz	r0, 4c7ac <hci_disconn_complete+0x4c>
	conn->err = evt->reason;
   4c774:	78f3      	ldrb	r3, [r6, #3]
   4c776:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4c778:	4629      	mov	r1, r5
   4c77a:	f7e3 f99b 	bl	2fab4 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   4c77e:	78a3      	ldrb	r3, [r4, #2]
   4c780:	2b01      	cmp	r3, #1
   4c782:	d004      	beq.n	4c78e <hci_disconn_complete+0x2e>
	bt_conn_unref(conn);
   4c784:	4620      	mov	r0, r4
}
   4c786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   4c78a:	f000 bd40 	b.w	4d20e <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4c78e:	f3bf 8f5b 	dmb	ish
   4c792:	6863      	ldr	r3, [r4, #4]
   4c794:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   4c798:	07db      	lsls	r3, r3, #31
   4c79a:	d5f3      	bpl.n	4c784 <hci_disconn_complete+0x24>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   4c79c:	4620      	mov	r0, r4
   4c79e:	2102      	movs	r1, #2
   4c7a0:	f7e3 f988 	bl	2fab4 <bt_conn_set_state>
		bt_le_scan_update(false);
   4c7a4:	4628      	mov	r0, r5
   4c7a6:	f7e2 fd23 	bl	2f1f0 <bt_le_scan_update>
   4c7aa:	e7eb      	b.n	4c784 <hci_disconn_complete+0x24>
}
   4c7ac:	bd70      	pop	{r4, r5, r6, pc}

0004c7ae <sys_put_le64>:
	dst[1] = val >> 8;
   4c7ae:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   4c7b2:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   4c7b4:	0e00      	lsrs	r0, r0, #24
   4c7b6:	7053      	strb	r3, [r2, #1]
   4c7b8:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   4c7ba:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   4c7bc:	f3c1 2007 	ubfx	r0, r1, #8, #8
   4c7c0:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   4c7c2:	7093      	strb	r3, [r2, #2]
   4c7c4:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   4c7c6:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   4c7c8:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   4c7ca:	71d1      	strb	r1, [r2, #7]
}
   4c7cc:	4770      	bx	lr

0004c7ce <le_ltk_request>:
{
   4c7ce:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   4c7d0:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   4c7d2:	8825      	ldrh	r5, [r4, #0]
{
   4c7d4:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   4c7d6:	4628      	mov	r0, r5
   4c7d8:	f7e3 f964 	bl	2faa4 <bt_conn_lookup_handle>
	if (!conn) {
   4c7dc:	4607      	mov	r7, r0
   4c7de:	b318      	cbz	r0, 4c828 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   4c7e0:	ae02      	add	r6, sp, #8
   4c7e2:	f8d4 2002 	ldr.w	r2, [r4, #2]
   4c7e6:	f8d4 3006 	ldr.w	r3, [r4, #6]
   4c7ea:	9601      	str	r6, [sp, #4]
   4c7ec:	8961      	ldrh	r1, [r4, #10]
   4c7ee:	9100      	str	r1, [sp, #0]
   4c7f0:	f003 f928 	bl	4fa44 <bt_smp_request_ltk>
   4c7f4:	b1d0      	cbz	r0, 4c82c <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   4c7f6:	2112      	movs	r1, #18
   4c7f8:	f242 001a 	movw	r0, #8218	; 0x201a
   4c7fc:	f7e1 fa0e 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4c800:	4604      	mov	r4, r0
   4c802:	b170      	cbz	r0, 4c822 <le_ltk_request+0x54>
	return net_buf_simple_add(&buf->b, len);
   4c804:	2112      	movs	r1, #18
   4c806:	3008      	adds	r0, #8
   4c808:	f003 fcc5 	bl	50196 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   4c80c:	4631      	mov	r1, r6
	cp->handle = sys_cpu_to_le16(handle);
   4c80e:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   4c812:	2210      	movs	r2, #16
   4c814:	f7ff fd6a 	bl	4c2ec <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   4c818:	4621      	mov	r1, r4
   4c81a:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4c81e:	f7e1 fa35 	bl	2dc8c <bt_hci_cmd_send>
	bt_conn_unref(conn);
   4c822:	4638      	mov	r0, r7
   4c824:	f000 fcf3 	bl	4d20e <bt_conn_unref>
}
   4c828:	b007      	add	sp, #28
   4c82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   4c82c:	2102      	movs	r1, #2
   4c82e:	f242 001b 	movw	r0, #8219	; 0x201b
   4c832:	f7e1 f9f3 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4c836:	4604      	mov	r4, r0
   4c838:	2800      	cmp	r0, #0
   4c83a:	d0f2      	beq.n	4c822 <le_ltk_request+0x54>
   4c83c:	2102      	movs	r1, #2
   4c83e:	3008      	adds	r0, #8
   4c840:	f003 fca9 	bl	50196 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4c844:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   4c846:	8005      	strh	r5, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   4c848:	f242 001b 	movw	r0, #8219	; 0x201b
   4c84c:	e7e7      	b.n	4c81e <le_ltk_request+0x50>

0004c84e <le_conn_param_neg_reply>:
{
   4c84e:	b570      	push	{r4, r5, r6, lr}
   4c850:	4606      	mov	r6, r0
   4c852:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   4c854:	f242 0021 	movw	r0, #8225	; 0x2021
   4c858:	2103      	movs	r1, #3
   4c85a:	f7e1 f9df 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4c85e:	4604      	mov	r4, r0
   4c860:	b160      	cbz	r0, 4c87c <le_conn_param_neg_reply+0x2e>
   4c862:	2103      	movs	r1, #3
   4c864:	3008      	adds	r0, #8
   4c866:	f003 fc96 	bl	50196 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   4c86a:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   4c86c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   4c86e:	4621      	mov	r1, r4
   4c870:	f242 0021 	movw	r0, #8225	; 0x2021
}
   4c874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   4c878:	f7e1 ba08 	b.w	2dc8c <bt_hci_cmd_send>
}
   4c87c:	bd70      	pop	{r4, r5, r6, pc}

0004c87e <le_conn_param_req>:
{
   4c87e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   4c880:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4c882:	78d9      	ldrb	r1, [r3, #3]
   4c884:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   4c886:	881e      	ldrh	r6, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   4c888:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4c88c:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   4c890:	7959      	ldrb	r1, [r3, #5]
   4c892:	791a      	ldrb	r2, [r3, #4]
   4c894:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4c898:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   4c89c:	799a      	ldrb	r2, [r3, #6]
   4c89e:	79d9      	ldrb	r1, [r3, #7]
   4c8a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   4c8a4:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4c8a8:	7a1a      	ldrb	r2, [r3, #8]
   4c8aa:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   4c8ac:	b2b4      	uxth	r4, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4c8ae:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   4c8b2:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   4c8b4:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   4c8b8:	f7e3 f8f4 	bl	2faa4 <bt_conn_lookup_handle>
	if (!conn) {
   4c8bc:	4607      	mov	r7, r0
   4c8be:	b928      	cbnz	r0, 4c8cc <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   4c8c0:	2102      	movs	r1, #2
   4c8c2:	4620      	mov	r0, r4
   4c8c4:	f7ff ffc3 	bl	4c84e <le_conn_param_neg_reply>
}
   4c8c8:	b003      	add	sp, #12
   4c8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   4c8cc:	4669      	mov	r1, sp
   4c8ce:	f7e3 fa55 	bl	2fd7c <le_param_req>
   4c8d2:	b938      	cbnz	r0, 4c8e4 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   4c8d4:	211e      	movs	r1, #30
   4c8d6:	4620      	mov	r0, r4
   4c8d8:	f7ff ffb9 	bl	4c84e <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   4c8dc:	4638      	mov	r0, r7
   4c8de:	f000 fc96 	bl	4d20e <bt_conn_unref>
   4c8e2:	e7f1      	b.n	4c8c8 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   4c8e4:	210e      	movs	r1, #14
   4c8e6:	f242 0020 	movw	r0, #8224	; 0x2020
   4c8ea:	f7e1 f997 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4c8ee:	4605      	mov	r5, r0
   4c8f0:	2800      	cmp	r0, #0
   4c8f2:	d0f3      	beq.n	4c8dc <le_conn_param_req+0x5e>
   4c8f4:	210e      	movs	r1, #14
   4c8f6:	3008      	adds	r0, #8
   4c8f8:	f003 fc4d 	bl	50196 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   4c8fc:	220e      	movs	r2, #14
   4c8fe:	4604      	mov	r4, r0
   4c900:	2100      	movs	r1, #0
   4c902:	f7ff fcfe 	bl	4c302 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   4c906:	f8bd 3000 	ldrh.w	r3, [sp]
   4c90a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   4c90c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   4c910:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   4c912:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   4c916:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   4c918:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   4c91c:	8026      	strh	r6, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   4c91e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   4c920:	4629      	mov	r1, r5
   4c922:	f242 0020 	movw	r0, #8224	; 0x2020
   4c926:	f7e1 f9b1 	bl	2dc8c <bt_hci_cmd_send>
   4c92a:	e7d7      	b.n	4c8dc <le_conn_param_req+0x5e>

0004c92c <hci_le_read_max_data_len>:
{
   4c92c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4c92e:	4606      	mov	r6, r0
   4c930:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   4c932:	aa01      	add	r2, sp, #4
   4c934:	2100      	movs	r1, #0
   4c936:	f242 002f 	movw	r0, #8239	; 0x202f
   4c93a:	f7e1 f9c9 	bl	2dcd0 <bt_hci_cmd_send_sync>
	if (err) {
   4c93e:	4604      	mov	r4, r0
   4c940:	b948      	cbnz	r0, 4c956 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   4c942:	9801      	ldr	r0, [sp, #4]
   4c944:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   4c946:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   4c94a:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   4c94c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   4c950:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   4c952:	f7f7 fb89 	bl	44068 <net_buf_unref>
}
   4c956:	4620      	mov	r0, r4
   4c958:	b002      	add	sp, #8
   4c95a:	bd70      	pop	{r4, r5, r6, pc}

0004c95c <le_phy_update_complete>:
{
   4c95c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   4c95e:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4c960:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4c964:	f7e3 f89e 	bl	2faa4 <bt_conn_lookup_handle>
	if (!conn) {
   4c968:	4604      	mov	r4, r0
   4c96a:	b188      	cbz	r0, 4c990 <le_phy_update_complete+0x34>
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   4c96c:	78e8      	ldrb	r0, [r5, #3]
   4c96e:	f7e1 fa11 	bl	2dd94 <bt_get_phy>
   4c972:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   4c976:	7928      	ldrb	r0, [r5, #4]
   4c978:	f7e1 fa0c 	bl	2dd94 <bt_get_phy>
   4c97c:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
   4c980:	4620      	mov	r0, r4
   4c982:	f7e3 f9d9 	bl	2fd38 <notify_le_phy_updated>
	bt_conn_unref(conn);
   4c986:	4620      	mov	r0, r4
}
   4c988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   4c98c:	f000 bc3f 	b.w	4d20e <bt_conn_unref>
}
   4c990:	bd38      	pop	{r3, r4, r5, pc}

0004c992 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   4c992:	f7e1 ba09 	b.w	2dda8 <bt_le_create_conn_legacy>

0004c996 <bt_hci_disconnect>:
{
   4c996:	b570      	push	{r4, r5, r6, lr}
   4c998:	4606      	mov	r6, r0
   4c99a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   4c99c:	f240 4006 	movw	r0, #1030	; 0x406
   4c9a0:	2103      	movs	r1, #3
   4c9a2:	f7e1 f93b 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4c9a6:	4604      	mov	r4, r0
   4c9a8:	b168      	cbz	r0, 4c9c6 <bt_hci_disconnect+0x30>
   4c9aa:	2103      	movs	r1, #3
   4c9ac:	3008      	adds	r0, #8
   4c9ae:	f003 fbf2 	bl	50196 <net_buf_simple_add>
	disconn->reason = reason;
   4c9b2:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   4c9b4:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   4c9b6:	4621      	mov	r1, r4
   4c9b8:	2200      	movs	r2, #0
   4c9ba:	f240 4006 	movw	r0, #1030	; 0x406
}
   4c9be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   4c9c2:	f7e1 b985 	b.w	2dcd0 <bt_hci_cmd_send_sync>
}
   4c9c6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4c9ca:	bd70      	pop	{r4, r5, r6, pc}

0004c9cc <bt_le_set_data_len>:
{
   4c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4c9ce:	4607      	mov	r7, r0
   4c9d0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4c9d2:	f242 0022 	movw	r0, #8226	; 0x2022
   4c9d6:	2106      	movs	r1, #6
{
   4c9d8:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   4c9da:	f7e1 f91f 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4c9de:	4604      	mov	r4, r0
   4c9e0:	b170      	cbz	r0, 4ca00 <bt_le_set_data_len+0x34>
   4c9e2:	2106      	movs	r1, #6
   4c9e4:	3008      	adds	r0, #8
   4c9e6:	f003 fbd6 	bl	50196 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4c9ea:	883b      	ldrh	r3, [r7, #0]
   4c9ec:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   4c9ee:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   4c9f0:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   4c9f2:	4621      	mov	r1, r4
   4c9f4:	f242 0022 	movw	r0, #8226	; 0x2022
}
   4c9f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   4c9fc:	f7e1 b946 	b.w	2dc8c <bt_hci_cmd_send>
}
   4ca00:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4ca04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004ca06 <le_remote_feat_complete>:
{
   4ca06:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   4ca08:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   4ca0a:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   4ca0e:	f7e3 f849 	bl	2faa4 <bt_conn_lookup_handle>
	if (!conn) {
   4ca12:	4604      	mov	r4, r0
   4ca14:	b198      	cbz	r0, 4ca3e <le_remote_feat_complete+0x38>
	if (!evt->status) {
   4ca16:	782b      	ldrb	r3, [r5, #0]
   4ca18:	b923      	cbnz	r3, 4ca24 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   4ca1a:	2208      	movs	r2, #8
   4ca1c:	1ce9      	adds	r1, r5, #3
   4ca1e:	30ac      	adds	r0, #172	; 0xac
   4ca20:	f7ff fc64 	bl	4c2ec <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4ca24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   4ca28:	1d20      	adds	r0, r4, #4
   4ca2a:	f7ff fdca 	bl	4c5c2 <atomic_or>
	conn_auto_initiate(conn);
   4ca2e:	4620      	mov	r0, r4
   4ca30:	f7e1 fa4a 	bl	2dec8 <conn_auto_initiate>
	bt_conn_unref(conn);
   4ca34:	4620      	mov	r0, r4
}
   4ca36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   4ca3a:	f000 bbe8 	b.w	4d20e <bt_conn_unref>
}
   4ca3e:	bd38      	pop	{r3, r4, r5, pc}

0004ca40 <bt_le_set_phy>:
{
   4ca40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4ca44:	4681      	mov	r9, r0
   4ca46:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   4ca48:	f242 0032 	movw	r0, #8242	; 0x2032
   4ca4c:	2107      	movs	r1, #7
{
   4ca4e:	4617      	mov	r7, r2
   4ca50:	461e      	mov	r6, r3
   4ca52:	f89d 5020 	ldrb.w	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   4ca56:	f7e1 f8e1 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4ca5a:	4604      	mov	r4, r0
   4ca5c:	b198      	cbz	r0, 4ca86 <bt_le_set_phy+0x46>
   4ca5e:	2107      	movs	r1, #7
   4ca60:	3008      	adds	r0, #8
   4ca62:	f003 fb98 	bl	50196 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4ca66:	f8b9 3000 	ldrh.w	r3, [r9]
	cp->all_phys = all_phys;
   4ca6a:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   4ca6e:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   4ca70:	7106      	strb	r6, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   4ca72:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   4ca74:	f8a0 5005 	strh.w	r5, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   4ca78:	4621      	mov	r1, r4
   4ca7a:	f242 0032 	movw	r0, #8242	; 0x2032
}
   4ca7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   4ca82:	f7e1 b903 	b.w	2dc8c <bt_hci_cmd_send>
}
   4ca86:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4ca8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0004ca8e <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   4ca8e:	6880      	ldr	r0, [r0, #8]
   4ca90:	f7e1 ba5c 	b.w	2df4c <bt_hci_le_enh_conn_complete>

0004ca94 <le_legacy_conn_complete>:
{
   4ca94:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   4ca96:	6881      	ldr	r1, [r0, #8]
{
   4ca98:	b08c      	sub	sp, #48	; 0x30
	enh.status         = evt->status;
   4ca9a:	780b      	ldrb	r3, [r1, #0]
   4ca9c:	f88d 3010 	strb.w	r3, [sp, #16]
	enh.handle         = evt->handle;
   4caa0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   4caa4:	f8ad 3011 	strh.w	r3, [sp, #17]
	enh.role           = evt->role;
   4caa8:	78cb      	ldrb	r3, [r1, #3]
   4caaa:	f88d 3013 	strb.w	r3, [sp, #19]
	enh.interval       = evt->interval;
   4caae:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   4cab2:	f8ad 3027 	strh.w	r3, [sp, #39]	; 0x27
	enh.latency        = evt->latency;
   4cab6:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   4caba:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
	enh.supv_timeout   = evt->supv_timeout;
   4cabe:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   4cac2:	f8ad 302b 	strh.w	r3, [sp, #43]	; 0x2b
	enh.clock_accuracy = evt->clock_accuracy;
   4cac6:	7c4b      	ldrb	r3, [r1, #17]
   4cac8:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   4cacc:	a805      	add	r0, sp, #20
   4cace:	3104      	adds	r1, #4
   4cad0:	f7ff fd74 	bl	4c5bc <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   4cad4:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   4cad6:	4669      	mov	r1, sp
   4cad8:	2206      	movs	r2, #6
   4cada:	f10d 001b 	add.w	r0, sp, #27
   4cade:	9400      	str	r4, [sp, #0]
   4cae0:	f8ad 4004 	strh.w	r4, [sp, #4]
   4cae4:	f7ff fc02 	bl	4c2ec <memcpy>
   4cae8:	2206      	movs	r2, #6
   4caea:	a902      	add	r1, sp, #8
   4caec:	f10d 0021 	add.w	r0, sp, #33	; 0x21
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   4caf0:	9402      	str	r4, [sp, #8]
   4caf2:	f8ad 400c 	strh.w	r4, [sp, #12]
   4caf6:	f7ff fbf9 	bl	4c2ec <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   4cafa:	a804      	add	r0, sp, #16
   4cafc:	f7e1 fa26 	bl	2df4c <bt_hci_le_enh_conn_complete>
}
   4cb00:	b00c      	add	sp, #48	; 0x30
   4cb02:	bd10      	pop	{r4, pc}

0004cb04 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   4cb04:	8802      	ldrh	r2, [r0, #0]
   4cb06:	8843      	ldrh	r3, [r0, #2]
   4cb08:	429a      	cmp	r2, r3
{
   4cb0a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   4cb0c:	d818      	bhi.n	4cb40 <bt_le_conn_params_valid+0x3c>
   4cb0e:	2a05      	cmp	r2, #5
   4cb10:	d916      	bls.n	4cb40 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   4cb12:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   4cb16:	d813      	bhi.n	4cb40 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   4cb18:	8884      	ldrh	r4, [r0, #4]
   4cb1a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   4cb1e:	d20f      	bcs.n	4cb40 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   4cb20:	88c1      	ldrh	r1, [r0, #6]
   4cb22:	f1a1 020a 	sub.w	r2, r1, #10
   4cb26:	b292      	uxth	r2, r2
   4cb28:	f640 4076 	movw	r0, #3190	; 0xc76
   4cb2c:	4282      	cmp	r2, r0
   4cb2e:	d807      	bhi.n	4cb40 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   4cb30:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   4cb34:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   4cb38:	bf34      	ite	cc
   4cb3a:	2001      	movcc	r0, #1
   4cb3c:	2000      	movcs	r0, #0
}
   4cb3e:	bd10      	pop	{r4, pc}
		return false;
   4cb40:	2000      	movs	r0, #0
   4cb42:	e7fc      	b.n	4cb3e <bt_le_conn_params_valid+0x3a>

0004cb44 <bt_send>:
		return bt_hci_ecc_send(buf);
   4cb44:	f7e0 bbfc 	b.w	2d340 <bt_hci_ecc_send>

0004cb48 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   4cb48:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   4cb4a:	f7e7 f8e9 	bl	33d20 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   4cb4e:	b118      	cbz	r0, 4cb58 <bt_addr_le_is_bonded+0x10>
   4cb50:	89c0      	ldrh	r0, [r0, #14]
   4cb52:	3000      	adds	r0, #0
   4cb54:	bf18      	it	ne
   4cb56:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   4cb58:	bd08      	pop	{r3, pc}

0004cb5a <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   4cb5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4cb5c:	4604      	mov	r4, r0
   4cb5e:	460e      	mov	r6, r1
   4cb60:	4617      	mov	r7, r2
	while (ad->len > 1) {
   4cb62:	88a3      	ldrh	r3, [r4, #4]
   4cb64:	2b01      	cmp	r3, #1
   4cb66:	d801      	bhi.n	4cb6c <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   4cb68:	b003      	add	sp, #12
   4cb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   4cb6c:	4620      	mov	r0, r4
   4cb6e:	f003 fb4b 	bl	50208 <net_buf_simple_pull_u8>
		if (len == 0U) {
   4cb72:	4605      	mov	r5, r0
   4cb74:	2800      	cmp	r0, #0
   4cb76:	d0f7      	beq.n	4cb68 <bt_data_parse+0xe>
		if (len > ad->len) {
   4cb78:	88a2      	ldrh	r2, [r4, #4]
   4cb7a:	b283      	uxth	r3, r0
   4cb7c:	429a      	cmp	r2, r3
   4cb7e:	d3f3      	bcc.n	4cb68 <bt_data_parse+0xe>
		data.type = net_buf_simple_pull_u8(ad);
   4cb80:	4620      	mov	r0, r4
   4cb82:	f003 fb41 	bl	50208 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   4cb86:	3d01      	subs	r5, #1
		data.type = net_buf_simple_pull_u8(ad);
   4cb88:	f88d 0000 	strb.w	r0, [sp]
		data.data = ad->data;
   4cb8c:	6823      	ldr	r3, [r4, #0]
		data.data_len = len - 1;
   4cb8e:	f88d 5001 	strb.w	r5, [sp, #1]
		if (!func(&data, user_data)) {
   4cb92:	4639      	mov	r1, r7
   4cb94:	4668      	mov	r0, sp
		data.data = ad->data;
   4cb96:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   4cb98:	47b0      	blx	r6
   4cb9a:	2800      	cmp	r0, #0
   4cb9c:	d0e4      	beq.n	4cb68 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   4cb9e:	4629      	mov	r1, r5
   4cba0:	4620      	mov	r0, r4
   4cba2:	f003 fb21 	bl	501e8 <net_buf_simple_pull>
   4cba6:	e7dc      	b.n	4cb62 <bt_data_parse+0x8>

0004cba8 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   4cba8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4cbaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   4cbae:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4cbb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4cbb4:	2100      	movs	r1, #0
{
   4cbb6:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   4cbb8:	f7e0 fdc0 	bl	2d73c <bt_buf_get_evt>
   4cbbc:	2102      	movs	r1, #2
   4cbbe:	4604      	mov	r4, r0
   4cbc0:	3008      	adds	r0, #8
   4cbc2:	f003 fae8 	bl	50196 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   4cbc6:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   4cbc8:	7045      	strb	r5, [r0, #1]

	return buf;
}
   4cbca:	4620      	mov	r0, r4
   4cbcc:	bd70      	pop	{r4, r5, r6, pc}

0004cbce <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4cbce:	3103      	adds	r1, #3
{
   4cbd0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4cbd2:	b2c9      	uxtb	r1, r1
{
   4cbd4:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   4cbd6:	200e      	movs	r0, #14
   4cbd8:	f7ff ffe6 	bl	4cba8 <bt_hci_evt_create>
   4cbdc:	2103      	movs	r1, #3
   4cbde:	4604      	mov	r4, r0
   4cbe0:	3008      	adds	r0, #8
   4cbe2:	f003 fad8 	bl	50196 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   4cbe6:	2301      	movs	r3, #1
   4cbe8:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   4cbea:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   4cbee:	4620      	mov	r0, r4
   4cbf0:	bd38      	pop	{r3, r4, r5, pc}

0004cbf2 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   4cbf2:	b570      	push	{r4, r5, r6, lr}
   4cbf4:	4605      	mov	r5, r0
   4cbf6:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   4cbf8:	200f      	movs	r0, #15
   4cbfa:	2104      	movs	r1, #4
   4cbfc:	f7ff ffd4 	bl	4cba8 <bt_hci_evt_create>
   4cc00:	2104      	movs	r1, #4
   4cc02:	4604      	mov	r4, r0
   4cc04:	3008      	adds	r0, #8
   4cc06:	f003 fac6 	bl	50196 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   4cc0a:	2301      	movs	r3, #1
	cs->status = status;
   4cc0c:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   4cc0e:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   4cc10:	8045      	strh	r5, [r0, #2]

	return buf;
}
   4cc12:	4620      	mov	r0, r4
   4cc14:	bd70      	pop	{r4, r5, r6, pc}

0004cc16 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4cc16:	2207      	movs	r2, #7
   4cc18:	f7ff bb68 	b.w	4c2ec <memcpy>

0004cc1c <atomic_test_bit>:
   4cc1c:	f3bf 8f5b 	dmb	ish
   4cc20:	6800      	ldr	r0, [r0, #0]
   4cc22:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4cc26:	4108      	asrs	r0, r1
}
   4cc28:	f000 0001 	and.w	r0, r0, #1
   4cc2c:	4770      	bx	lr

0004cc2e <is_adv_using_rand_addr>:
{
   4cc2e:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   4cc30:	f7e2 f84c 	bl	2eccc <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   4cc34:	b118      	cbz	r0, 4cc3e <is_adv_using_rand_addr+0x10>
   4cc36:	2106      	movs	r1, #6
   4cc38:	3010      	adds	r0, #16
   4cc3a:	f7ff ffef 	bl	4cc1c <atomic_test_bit>
}
   4cc3e:	f000 0001 	and.w	r0, r0, #1
   4cc42:	bd08      	pop	{r3, pc}

0004cc44 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4cc44:	f100 0310 	add.w	r3, r0, #16
   4cc48:	f3bf 8f5b 	dmb	ish
   4cc4c:	e853 2f00 	ldrex	r2, [r3]
   4cc50:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   4cc54:	e843 1c00 	strex	ip, r1, [r3]
   4cc58:	f1bc 0f00 	cmp.w	ip, #0
   4cc5c:	d1f6      	bne.n	4cc4c <adv_unpause_enabled+0x8>
   4cc5e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   4cc62:	0453      	lsls	r3, r2, #17
   4cc64:	d502      	bpl.n	4cc6c <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   4cc66:	2101      	movs	r1, #1
   4cc68:	f000 b9f6 	b.w	4d058 <bt_le_adv_set_enable>
}
   4cc6c:	4770      	bx	lr

0004cc6e <addr_res_enable>:
{
   4cc6e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   4cc70:	2101      	movs	r1, #1
{
   4cc72:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   4cc74:	f242 002d 	movw	r0, #8237	; 0x202d
   4cc78:	f7e0 ffd0 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4cc7c:	4604      	mov	r4, r0
   4cc7e:	b158      	cbz	r0, 4cc98 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   4cc80:	4629      	mov	r1, r5
   4cc82:	3008      	adds	r0, #8
   4cc84:	f003 fa96 	bl	501b4 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4cc88:	4621      	mov	r1, r4
   4cc8a:	2200      	movs	r2, #0
   4cc8c:	f242 002d 	movw	r0, #8237	; 0x202d
}
   4cc90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   4cc94:	f7e1 b81c 	b.w	2dcd0 <bt_hci_cmd_send_sync>
}
   4cc98:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4cc9c:	bd38      	pop	{r3, r4, r5, pc}

0004cc9e <hci_id_add.isra.3>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   4cc9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4cca0:	4607      	mov	r7, r0
   4cca2:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   4cca4:	f242 0027 	movw	r0, #8231	; 0x2027
   4cca8:	2127      	movs	r1, #39	; 0x27
   4ccaa:	f7e0 ffb7 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4ccae:	4604      	mov	r4, r0
   4ccb0:	b1d0      	cbz	r0, 4cce8 <hci_id_add.isra.3+0x4a>
	return net_buf_simple_add(&buf->b, len);
   4ccb2:	2127      	movs	r1, #39	; 0x27
   4ccb4:	3008      	adds	r0, #8
   4ccb6:	f003 fa6e 	bl	50196 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   4ccba:	4639      	mov	r1, r7
   4ccbc:	4605      	mov	r5, r0
   4ccbe:	f7ff ffaa 	bl	4cc16 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   4ccc2:	4631      	mov	r1, r6
   4ccc4:	2210      	movs	r2, #16
   4ccc6:	1de8      	adds	r0, r5, #7
   4ccc8:	f7ff fb10 	bl	4c2ec <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   4cccc:	2210      	movs	r2, #16
   4ccce:	2100      	movs	r1, #0
   4ccd0:	f105 0017 	add.w	r0, r5, #23
   4ccd4:	f7ff fb15 	bl	4c302 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   4ccd8:	4621      	mov	r1, r4
   4ccda:	2200      	movs	r2, #0
   4ccdc:	f242 0027 	movw	r0, #8231	; 0x2027
}
   4cce0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   4cce4:	f7e0 bff4 	b.w	2dcd0 <bt_hci_cmd_send_sync>
}
   4cce8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4ccec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004ccee <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   4ccee:	7a03      	ldrb	r3, [r0, #8]
   4ccf0:	075b      	lsls	r3, r3, #29
   4ccf2:	d504      	bpl.n	4ccfe <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   4ccf4:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   4ccf8:	3001      	adds	r0, #1
   4ccfa:	f7ff bfd0 	b.w	4cc9e <hci_id_add.isra.3>
}
   4ccfe:	4770      	bx	lr

0004cd00 <adv_pause_enabled>:
{
   4cd00:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4cd02:	f100 0310 	add.w	r3, r0, #16
{
   4cd06:	4602      	mov	r2, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4cd08:	2106      	movs	r1, #6
   4cd0a:	4618      	mov	r0, r3
   4cd0c:	f7ff ff86 	bl	4cc1c <atomic_test_bit>
   4cd10:	b188      	cbz	r0, 4cd36 <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4cd12:	f3bf 8f5b 	dmb	ish
   4cd16:	e853 1f00 	ldrex	r1, [r3]
   4cd1a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   4cd1e:	e843 1000 	strex	r0, r1, [r3]
   4cd22:	2800      	cmp	r0, #0
   4cd24:	d1f7      	bne.n	4cd16 <adv_pause_enabled+0x16>
   4cd26:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   4cd2a:	2100      	movs	r1, #0
   4cd2c:	4610      	mov	r0, r2
}
   4cd2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   4cd32:	f000 b991 	b.w	4d058 <bt_le_adv_set_enable>
}
   4cd36:	bd08      	pop	{r3, pc}

0004cd38 <bt_lookup_id_addr>:
{
   4cd38:	b510      	push	{r4, lr}
   4cd3a:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   4cd3c:	f7e6 ff9e 	bl	33c7c <bt_keys_find_irk>
		if (keys) {
   4cd40:	b100      	cbz	r0, 4cd44 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   4cd42:	1c44      	adds	r4, r0, #1
}
   4cd44:	4620      	mov	r0, r4
   4cd46:	bd10      	pop	{r4, pc}

0004cd48 <bt_id_set_private_addr>:
{
   4cd48:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   4cd4a:	2106      	movs	r1, #6
   4cd4c:	4668      	mov	r0, sp
   4cd4e:	f7ea fa2d 	bl	371ac <bt_rand>
	if (err) {
   4cd52:	b940      	cbnz	r0, 4cd66 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   4cd54:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   4cd58:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   4cd5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4cd5e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   4cd62:	f7e1 fbdb 	bl	2e51c <set_random_address>
}
   4cd66:	b003      	add	sp, #12
   4cd68:	f85d fb04 	ldr.w	pc, [sp], #4

0004cd6c <bt_id_set_adv_private_addr>:
{
   4cd6c:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   4cd6e:	2106      	movs	r1, #6
   4cd70:	4668      	mov	r0, sp
   4cd72:	f7ea fa1b 	bl	371ac <bt_rand>
	if (err) {
   4cd76:	b940      	cbnz	r0, 4cd8a <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   4cd78:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   4cd7c:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   4cd7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   4cd82:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   4cd86:	f7e1 fbc9 	bl	2e51c <set_random_address>
}
   4cd8a:	b003      	add	sp, #12
   4cd8c:	f85d fb04 	ldr.w	pc, [sp], #4

0004cd90 <bt_id_scan_random_addr_check>:
{
   4cd90:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   4cd92:	f7e1 ff9b 	bl	2eccc <bt_le_adv_lookup_legacy>
	if (!adv) {
   4cd96:	b118      	cbz	r0, 4cda0 <bt_id_scan_random_addr_check+0x10>
	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   4cd98:	2106      	movs	r1, #6
   4cd9a:	3010      	adds	r0, #16
   4cd9c:	f7ff ff3e 	bl	4cc1c <atomic_test_bit>
}
   4cda0:	2001      	movs	r0, #1
   4cda2:	bd08      	pop	{r3, pc}

0004cda4 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   4cda4:	7a03      	ldrb	r3, [r0, #8]
   4cda6:	07d9      	lsls	r1, r3, #31
   4cda8:	d504      	bpl.n	4cdb4 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   4cdaa:	f023 0301 	bic.w	r3, r3, #1
   4cdae:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   4cdb0:	f7e1 bc46 	b.w	2e640 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   4cdb4:	0799      	lsls	r1, r3, #30
   4cdb6:	d504      	bpl.n	4cdc2 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   4cdb8:	f023 0302 	bic.w	r3, r3, #2
   4cdbc:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   4cdbe:	f7e1 bce1 	b.w	2e784 <bt_id_del>
}
   4cdc2:	4770      	bx	lr

0004cdc4 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   4cdc4:	2000      	movs	r0, #0
   4cdc6:	4770      	bx	lr

0004cdc8 <get_adv_channel_map>:
		channel_map &= ~0x01;
   4cdc8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   4cdcc:	bf0c      	ite	eq
   4cdce:	2307      	moveq	r3, #7
   4cdd0:	2306      	movne	r3, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   4cdd2:	03c1      	lsls	r1, r0, #15
		channel_map &= ~0x02;
   4cdd4:	bf48      	it	mi
   4cdd6:	f003 0305 	andmi.w	r3, r3, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   4cdda:	0382      	lsls	r2, r0, #14
		channel_map &= ~0x04;
   4cddc:	bf48      	it	mi
   4cdde:	f003 03fb 	andmi.w	r3, r3, #251	; 0xfb
}
   4cde2:	4618      	mov	r0, r3
   4cde4:	4770      	bx	lr

0004cde6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4cde6:	f3bf 8f5b 	dmb	ish
   4cdea:	6800      	ldr	r0, [r0, #0]
   4cdec:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4cdf0:	4108      	asrs	r0, r1
}
   4cdf2:	f000 0001 	and.w	r0, r0, #1
   4cdf6:	4770      	bx	lr

0004cdf8 <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4cdf8:	f3bf 8f5b 	dmb	ish
   4cdfc:	e850 3f00 	ldrex	r3, [r0]
   4ce00:	ea03 0201 	and.w	r2, r3, r1
   4ce04:	e840 2c00 	strex	ip, r2, [r0]
   4ce08:	f1bc 0f00 	cmp.w	ip, #0
   4ce0c:	d1f6      	bne.n	4cdfc <atomic_and+0x4>
   4ce0e:	f3bf 8f5b 	dmb	ish
}
   4ce12:	4618      	mov	r0, r3
   4ce14:	4770      	bx	lr

0004ce16 <hci_set_ad>:
{
   4ce16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4ce1a:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   4ce1c:	2120      	movs	r1, #32
{
   4ce1e:	4683      	mov	fp, r0
   4ce20:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   4ce22:	f7e0 fefb 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4ce26:	4607      	mov	r7, r0
   4ce28:	2800      	cmp	r0, #0
   4ce2a:	d047      	beq.n	4cebc <hci_set_ad+0xa6>
   4ce2c:	2120      	movs	r1, #32
   4ce2e:	3008      	adds	r0, #8
   4ce30:	f003 f9b1 	bl	50196 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   4ce34:	2100      	movs	r1, #0
   4ce36:	2220      	movs	r2, #32
   4ce38:	4682      	mov	sl, r0
   4ce3a:	f7ff fa62 	bl	4c302 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   4ce3e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   4ce42:	f10a 0901 	add.w	r9, sl, #1
static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
   4ce46:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   4ce48:	2100      	movs	r1, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   4ce4a:	6826      	ldr	r6, [r4, #0]
   4ce4c:	2300      	movs	r3, #0
   4ce4e:	6862      	ldr	r2, [r4, #4]
   4ce50:	4293      	cmp	r3, r2
   4ce52:	d30d      	bcc.n	4ce70 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   4ce54:	9b00      	ldr	r3, [sp, #0]
   4ce56:	3408      	adds	r4, #8
   4ce58:	42a3      	cmp	r3, r4
   4ce5a:	d1f6      	bne.n	4ce4a <hci_set_ad+0x34>
	*data_len = set_data_len;
   4ce5c:	f88a 1000 	strb.w	r1, [sl]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   4ce60:	2200      	movs	r2, #0
   4ce62:	4639      	mov	r1, r7
   4ce64:	4658      	mov	r0, fp
}
   4ce66:	b003      	add	sp, #12
   4ce68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   4ce6c:	f7e0 bf30 	b.w	2dcd0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   4ce70:	7872      	ldrb	r2, [r6, #1]
			uint8_t type = data[j].type;
   4ce72:	7830      	ldrb	r0, [r6, #0]
			if ((set_data_len + len + 2) > set_data_len_max) {
   4ce74:	1c8d      	adds	r5, r1, #2
   4ce76:	eb05 0c02 	add.w	ip, r5, r2
   4ce7a:	f1bc 0f1f 	cmp.w	ip, #31
   4ce7e:	d906      	bls.n	4ce8e <hci_set_ad+0x78>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   4ce80:	2809      	cmp	r0, #9
				ssize_t shortened_len = set_data_len_max -
   4ce82:	f1c5 021f 	rsb	r2, r5, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   4ce86:	d11e      	bne.n	4cec6 <hci_set_ad+0xb0>
   4ce88:	2a00      	cmp	r2, #0
   4ce8a:	dd1c      	ble.n	4cec6 <hci_set_ad+0xb0>
				type = BT_DATA_NAME_SHORTENED;
   4ce8c:	2008      	movs	r0, #8
			set_data[set_data_len++] = len + 1;
   4ce8e:	fa5f f882 	uxtb.w	r8, r2
   4ce92:	f108 0c01 	add.w	ip, r8, #1
   4ce96:	f809 c001 	strb.w	ip, [r9, r1]
   4ce9a:	3101      	adds	r1, #1
			set_data[set_data_len++] = type;
   4ce9c:	b2c9      	uxtb	r1, r1
   4ce9e:	b2ed      	uxtb	r5, r5
   4cea0:	f809 0001 	strb.w	r0, [r9, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   4cea4:	eb09 0005 	add.w	r0, r9, r5
   4cea8:	6871      	ldr	r1, [r6, #4]
   4ceaa:	9301      	str	r3, [sp, #4]
   4ceac:	f7ff fa1e 	bl	4c2ec <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   4ceb0:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   4ceb2:	4445      	add	r5, r8
   4ceb4:	b2e9      	uxtb	r1, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   4ceb6:	3301      	adds	r3, #1
   4ceb8:	3608      	adds	r6, #8
   4ceba:	e7c8      	b.n	4ce4e <hci_set_ad+0x38>
		return -ENOBUFS;
   4cebc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   4cec0:	b003      	add	sp, #12
   4cec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_unref(buf);
   4cec6:	4638      	mov	r0, r7
   4cec8:	f7f7 f8ce 	bl	44068 <net_buf_unref>
		return err;
   4cecc:	f06f 0015 	mvn.w	r0, #21
   4ced0:	e7f6      	b.n	4cec0 <hci_set_ad+0xaa>

0004ced2 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4ced2:	2301      	movs	r3, #1
{
   4ced4:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   4ced6:	fa03 f101 	lsl.w	r1, r3, r1
{
   4ceda:	4604      	mov	r4, r0
	if (val) {
   4cedc:	b162      	cbz	r2, 4cef8 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4cede:	f3bf 8f5b 	dmb	ish
   4cee2:	e854 3f00 	ldrex	r3, [r4]
   4cee6:	430b      	orrs	r3, r1
   4cee8:	e844 3200 	strex	r2, r3, [r4]
   4ceec:	2a00      	cmp	r2, #0
   4ceee:	d1f8      	bne.n	4cee2 <atomic_set_bit_to+0x10>
   4cef0:	f3bf 8f5b 	dmb	ish
	}
}
   4cef4:	bc10      	pop	{r4}
   4cef6:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4cef8:	43c9      	mvns	r1, r1
}
   4cefa:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4cefc:	f7ff bf7c 	b.w	4cdf8 <atomic_and>

0004cf00 <le_adv_update.constprop.6>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   4cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4cf04:	b087      	sub	sp, #28
   4cf06:	4606      	mov	r6, r0
   4cf08:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
   4cf0c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   4cf10:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
   4cf14:	460c      	mov	r4, r1
   4cf16:	4692      	mov	sl, r2
	struct bt_ad d[2] = {};
   4cf18:	2100      	movs	r1, #0
   4cf1a:	2210      	movs	r2, #16
   4cf1c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   4cf1e:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   4cf20:	f7ff f9ef 	bl	4c302 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   4cf24:	b185      	cbz	r5, 4cf48 <le_adv_update.constprop.6+0x48>
		const char *name = bt_get_name();
   4cf26:	f7e1 fadb 	bl	2e4e0 <bt_get_name>
   4cf2a:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   4cf2c:	2c00      	cmp	r4, #0
   4cf2e:	d139      	bne.n	4cfa4 <le_adv_update.constprop.6+0xa4>
   4cf30:	2f00      	cmp	r7, #0
   4cf32:	d142      	bne.n	4cfba <le_adv_update.constprop.6+0xba>
		data = (struct bt_data)BT_DATA(
   4cf34:	4658      	mov	r0, fp
   4cf36:	f7ff f9a7 	bl	4c288 <strlen>
   4cf3a:	2309      	movs	r3, #9
   4cf3c:	f88d 3000 	strb.w	r3, [sp]
   4cf40:	f88d 0001 	strb.w	r0, [sp, #1]
   4cf44:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   4cf48:	2d01      	cmp	r5, #1
			d_len = 2;
   4cf4a:	bf0c      	ite	eq
   4cf4c:	2202      	moveq	r2, #2
		d_len = 1;
   4cf4e:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   4cf50:	a902      	add	r1, sp, #8
   4cf52:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   4cf56:	e9cd 4a02 	strd	r4, sl, [sp, #8]
			d[1].data = &data;
   4cf5a:	bf04      	itt	eq
   4cf5c:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   4cf60:	9505      	streq	r5, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   4cf62:	f7ff ff58 	bl	4ce16 <hci_set_ad>
		if (err) {
   4cf66:	4604      	mov	r4, r0
   4cf68:	b978      	cbnz	r0, 4cf8a <le_adv_update.constprop.6+0x8a>
	if (scannable) {
   4cf6a:	f1b9 0f00 	cmp.w	r9, #0
   4cf6e:	d126      	bne.n	4cfbe <le_adv_update.constprop.6+0xbe>
   4cf70:	3610      	adds	r6, #16
   4cf72:	f3bf 8f5b 	dmb	ish
   4cf76:	e856 3f00 	ldrex	r3, [r6]
   4cf7a:	f043 0304 	orr.w	r3, r3, #4
   4cf7e:	e846 3200 	strex	r2, r3, [r6]
   4cf82:	2a00      	cmp	r2, #0
   4cf84:	d1f7      	bne.n	4cf76 <le_adv_update.constprop.6+0x76>
   4cf86:	f3bf 8f5b 	dmb	ish
}
   4cf8a:	4620      	mov	r0, r4
   4cf8c:	b007      	add	sp, #28
   4cf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   4cf92:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   4cf96:	3a08      	subs	r2, #8
   4cf98:	2a01      	cmp	r2, #1
   4cf9a:	d925      	bls.n	4cfe8 <le_adv_update.constprop.6+0xe8>
	for (i = 0; i < ad_len; i++) {
   4cf9c:	3301      	adds	r3, #1
   4cf9e:	459a      	cmp	sl, r3
   4cfa0:	d1f7      	bne.n	4cf92 <le_adv_update.constprop.6+0x92>
   4cfa2:	e7c5      	b.n	4cf30 <le_adv_update.constprop.6+0x30>
   4cfa4:	2300      	movs	r3, #0
   4cfa6:	e7fa      	b.n	4cf9e <le_adv_update.constprop.6+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   4cfa8:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   4cfac:	3a08      	subs	r2, #8
   4cfae:	2a01      	cmp	r2, #1
   4cfb0:	d91a      	bls.n	4cfe8 <le_adv_update.constprop.6+0xe8>
	for (i = 0; i < ad_len; i++) {
   4cfb2:	3301      	adds	r3, #1
   4cfb4:	4598      	cmp	r8, r3
   4cfb6:	d1f7      	bne.n	4cfa8 <le_adv_update.constprop.6+0xa8>
   4cfb8:	e7bc      	b.n	4cf34 <le_adv_update.constprop.6+0x34>
   4cfba:	2300      	movs	r3, #0
   4cfbc:	e7fa      	b.n	4cfb4 <le_adv_update.constprop.6+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   4cfbe:	2d02      	cmp	r5, #2
   4cfc0:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   4cfc4:	bf08      	it	eq
   4cfc6:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4cfc8:	a902      	add	r1, sp, #8
			d_len = 2;
   4cfca:	bf08      	it	eq
   4cfcc:	462a      	moveq	r2, r5
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4cfce:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   4cfd2:	bf08      	it	eq
   4cfd4:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   4cfd8:	e9cd 7802 	strd	r7, r8, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   4cfdc:	f7ff ff1b 	bl	4ce16 <hci_set_ad>
		if (err) {
   4cfe0:	2800      	cmp	r0, #0
   4cfe2:	d0c5      	beq.n	4cf70 <le_adv_update.constprop.6+0x70>
   4cfe4:	4604      	mov	r4, r0
   4cfe6:	e7d0      	b.n	4cf8a <le_adv_update.constprop.6+0x8a>
			return -EINVAL;
   4cfe8:	f06f 0415 	mvn.w	r4, #21
   4cfec:	e7cd      	b.n	4cf8a <le_adv_update.constprop.6+0x8a>

0004cfee <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   4cfee:	6843      	ldr	r3, [r0, #4]
   4cff0:	f013 0008 	ands.w	r0, r3, #8
   4cff4:	d00a      	beq.n	4d00c <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   4cff6:	035a      	lsls	r2, r3, #13
   4cff8:	d407      	bmi.n	4d00a <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   4cffa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   4cffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		return ADV_NAME_TYPE_SD;
   4d002:	bf0c      	ite	eq
   4d004:	2001      	moveq	r0, #1
   4d006:	2002      	movne	r0, #2
   4d008:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   4d00a:	2001      	movs	r0, #1
}
   4d00c:	4770      	bx	lr

0004d00e <bt_le_adv_set_enable_legacy>:
{
   4d00e:	b570      	push	{r4, r5, r6, lr}
   4d010:	4606      	mov	r6, r0
   4d012:	b086      	sub	sp, #24
   4d014:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   4d016:	f242 000a 	movw	r0, #8202	; 0x200a
   4d01a:	2101      	movs	r1, #1
   4d01c:	f7e0 fdfe 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4d020:	4604      	mov	r4, r0
   4d022:	b1b0      	cbz	r0, 4d052 <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   4d024:	3008      	adds	r0, #8
   4d026:	b195      	cbz	r5, 4d04e <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   4d028:	2101      	movs	r1, #1
   4d02a:	f003 f8c3 	bl	501b4 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   4d02e:	f106 0210 	add.w	r2, r6, #16
   4d032:	a903      	add	r1, sp, #12
   4d034:	4620      	mov	r0, r4
   4d036:	9500      	str	r5, [sp, #0]
   4d038:	2306      	movs	r3, #6
   4d03a:	f7e0 fddd 	bl	2dbf8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   4d03e:	2200      	movs	r2, #0
   4d040:	4621      	mov	r1, r4
   4d042:	f242 000a 	movw	r0, #8202	; 0x200a
   4d046:	f7e0 fe43 	bl	2dcd0 <bt_hci_cmd_send_sync>
}
   4d04a:	b006      	add	sp, #24
   4d04c:	bd70      	pop	{r4, r5, r6, pc}
   4d04e:	4629      	mov	r1, r5
   4d050:	e7eb      	b.n	4d02a <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   4d052:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4d056:	e7f8      	b.n	4d04a <bt_le_adv_set_enable_legacy+0x3c>

0004d058 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   4d058:	f7ff bfd9 	b.w	4d00e <bt_le_adv_set_enable_legacy>

0004d05c <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   4d05c:	3018      	adds	r0, #24
   4d05e:	f004 b8b7 	b.w	511d0 <k_work_cancel_delayable>

0004d062 <adv_timeout>:
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   4d062:	f7e1 bf91 	b.w	2ef88 <bt_le_adv_stop>

0004d066 <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4d066:	f3bf 8f5b 	dmb	ish
   4d06a:	e850 3f00 	ldrex	r3, [r0]
   4d06e:	ea03 0201 	and.w	r2, r3, r1
   4d072:	e840 2c00 	strex	ip, r2, [r0]
   4d076:	f1bc 0f00 	cmp.w	ip, #0
   4d07a:	d1f6      	bne.n	4d06a <atomic_and+0x4>
   4d07c:	f3bf 8f5b 	dmb	ish
}
   4d080:	4618      	mov	r0, r3
   4d082:	4770      	bx	lr

0004d084 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   4d084:	f7e2 b82c 	b.w	2f0e0 <bt_le_scan_set_enable_legacy>

0004d088 <tx_notify>:
{
   4d088:	b570      	push	{r4, r5, r6, lr}
   4d08a:	4604      	mov	r4, r0
	__asm__ volatile(
   4d08c:	f04f 0220 	mov.w	r2, #32
   4d090:	f3ef 8311 	mrs	r3, BASEPRI
   4d094:	f382 8812 	msr	BASEPRI_MAX, r2
   4d098:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   4d09c:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   4d09e:	b920      	cbnz	r0, 4d0aa <tx_notify+0x22>
	__asm__ volatile(
   4d0a0:	f383 8811 	msr	BASEPRI, r3
   4d0a4:	f3bf 8f6f 	isb	sy
}
   4d0a8:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4d0aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   4d0ac:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   4d0ae:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4d0b0:	4288      	cmp	r0, r1
	list->tail = node;
   4d0b2:	bf08      	it	eq
   4d0b4:	6262      	streq	r2, [r4, #36]	; 0x24
   4d0b6:	f383 8811 	msr	BASEPRI, r3
   4d0ba:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   4d0be:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   4d0c2:	f7e2 fb77 	bl	2f7b4 <tx_free>
		cb(conn, user_data);
   4d0c6:	4631      	mov	r1, r6
   4d0c8:	4620      	mov	r0, r4
   4d0ca:	47a8      	blx	r5
	while (1) {
   4d0cc:	e7de      	b.n	4d08c <tx_notify+0x4>

0004d0ce <tx_complete_work>:
	tx_notify(conn);
   4d0ce:	3828      	subs	r0, #40	; 0x28
   4d0d0:	f7ff bfda 	b.w	4d088 <tx_notify>

0004d0d4 <bt_conn_ref.part.12>:
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   4d0d4:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   4d0d6:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4d0da:	f3bf 8f5b 	dmb	ish
   4d0de:	6813      	ldr	r3, [r2, #0]
   4d0e0:	f3bf 8f5b 	dmb	ish
		if (!old) {
   4d0e4:	b17b      	cbz	r3, 4d106 <bt_conn_ref.part.12+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   4d0e6:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   4d0ea:	1c59      	adds	r1, r3, #1
   4d0ec:	e852 4f00 	ldrex	r4, [r2]
   4d0f0:	429c      	cmp	r4, r3
   4d0f2:	d104      	bne.n	4d0fe <bt_conn_ref.part.12+0x2a>
   4d0f4:	e842 1c00 	strex	ip, r1, [r2]
   4d0f8:	f1bc 0f00 	cmp.w	ip, #0
   4d0fc:	d1f6      	bne.n	4d0ec <bt_conn_ref.part.12+0x18>
   4d0fe:	f3bf 8f5b 	dmb	ish
   4d102:	d1ea      	bne.n	4d0da <bt_conn_ref.part.12+0x6>
}
   4d104:	bd10      	pop	{r4, pc}
			return NULL;
   4d106:	4618      	mov	r0, r3
   4d108:	e7fc      	b.n	4d104 <bt_conn_ref.part.12+0x30>

0004d10a <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4d10a:	f3bf 8f5b 	dmb	ish
   4d10e:	6800      	ldr	r0, [r0, #0]
   4d110:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4d114:	4108      	asrs	r0, r1
}
   4d116:	f000 0001 	and.w	r0, r0, #1
   4d11a:	4770      	bx	lr

0004d11c <bt_conn_reset_rx_state>:
{
   4d11c:	b510      	push	{r4, lr}
   4d11e:	4604      	mov	r4, r0
	if (!conn->rx) {
   4d120:	6900      	ldr	r0, [r0, #16]
   4d122:	b118      	cbz	r0, 4d12c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   4d124:	f7f6 ffa0 	bl	44068 <net_buf_unref>
	conn->rx = NULL;
   4d128:	2300      	movs	r3, #0
   4d12a:	6123      	str	r3, [r4, #16]
}
   4d12c:	bd10      	pop	{r4, pc}

0004d12e <conn_cleanup>:
{
   4d12e:	b570      	push	{r4, r5, r6, lr}
   4d130:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   4d132:	f100 0638 	add.w	r6, r0, #56	; 0x38
   4d136:	2200      	movs	r2, #0
   4d138:	2300      	movs	r3, #0
   4d13a:	4630      	mov	r0, r6
   4d13c:	f002 ffca 	bl	500d4 <net_buf_get>
   4d140:	4605      	mov	r5, r0
   4d142:	b950      	cbnz	r0, 4d15a <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   4d144:	4620      	mov	r0, r4
   4d146:	f7ff ffe9 	bl	4d11c <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4d14a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   4d14e:	2200      	movs	r2, #0
   4d150:	2300      	movs	r3, #0
}
   4d152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   4d156:	f7fb bdb9 	b.w	48ccc <k_work_reschedule>
		if (tx_data(buf)->tx) {
   4d15a:	6968      	ldr	r0, [r5, #20]
   4d15c:	b108      	cbz	r0, 4d162 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   4d15e:	f7e2 fb29 	bl	2f7b4 <tx_free>
		net_buf_unref(buf);
   4d162:	4628      	mov	r0, r5
   4d164:	f7f6 ff80 	bl	44068 <net_buf_unref>
   4d168:	e7e5      	b.n	4d136 <conn_cleanup+0x8>

0004d16a <bt_conn_recv>:
{
   4d16a:	b570      	push	{r4, r5, r6, lr}
   4d16c:	4616      	mov	r6, r2
   4d16e:	4604      	mov	r4, r0
   4d170:	460d      	mov	r5, r1
	tx_notify(conn);
   4d172:	f7ff ff89 	bl	4d088 <tx_notify>
	switch (flags) {
   4d176:	2e01      	cmp	r6, #1
   4d178:	d01a      	beq.n	4d1b0 <bt_conn_recv+0x46>
   4d17a:	2e02      	cmp	r6, #2
   4d17c:	d11a      	bne.n	4d1b4 <bt_conn_recv+0x4a>
		if (conn->rx) {
   4d17e:	6923      	ldr	r3, [r4, #16]
   4d180:	b113      	cbz	r3, 4d188 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   4d182:	4620      	mov	r0, r4
   4d184:	f7ff ffca 	bl	4d11c <bt_conn_reset_rx_state>
		conn->rx = buf;
   4d188:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   4d18a:	6921      	ldr	r1, [r4, #16]
   4d18c:	898a      	ldrh	r2, [r1, #12]
   4d18e:	2a01      	cmp	r2, #1
   4d190:	d93a      	bls.n	4d208 <bt_conn_recv+0x9e>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   4d192:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   4d194:	7845      	ldrb	r5, [r0, #1]
   4d196:	7803      	ldrb	r3, [r0, #0]
   4d198:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   4d19c:	3304      	adds	r3, #4
   4d19e:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   4d1a0:	429a      	cmp	r2, r3
   4d1a2:	d331      	bcc.n	4d208 <bt_conn_recv+0x9e>
	if (conn->rx->len > acl_total_len) {
   4d1a4:	d928      	bls.n	4d1f8 <bt_conn_recv+0x8e>
		bt_conn_reset_rx_state(conn);
   4d1a6:	4620      	mov	r0, r4
}
   4d1a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   4d1ac:	f7ff bfb6 	b.w	4d11c <bt_conn_reset_rx_state>
		if (!conn->rx) {
   4d1b0:	6920      	ldr	r0, [r4, #16]
   4d1b2:	b918      	cbnz	r0, 4d1bc <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   4d1b4:	4620      	mov	r0, r4
   4d1b6:	f7ff ffb1 	bl	4d11c <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   4d1ba:	e001      	b.n	4d1c0 <bt_conn_recv+0x56>
		if (!buf->len) {
   4d1bc:	89ae      	ldrh	r6, [r5, #12]
   4d1be:	b926      	cbnz	r6, 4d1ca <bt_conn_recv+0x60>
			net_buf_unref(buf);
   4d1c0:	4628      	mov	r0, r5
}
   4d1c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   4d1c6:	f7f6 bf4f 	b.w	44068 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   4d1ca:	3008      	adds	r0, #8
   4d1cc:	f003 f830 	bl	50230 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   4d1d0:	4286      	cmp	r6, r0
   4d1d2:	d907      	bls.n	4d1e4 <bt_conn_recv+0x7a>
			bt_l2cap_recv(conn, conn->rx, false);
   4d1d4:	2200      	movs	r2, #0
   4d1d6:	6921      	ldr	r1, [r4, #16]
   4d1d8:	4620      	mov	r0, r4
   4d1da:	f000 fab8 	bl	4d74e <bt_l2cap_recv>
			conn->rx = NULL;
   4d1de:	2300      	movs	r3, #0
   4d1e0:	6123      	str	r3, [r4, #16]
   4d1e2:	e7ed      	b.n	4d1c0 <bt_conn_recv+0x56>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   4d1e4:	6920      	ldr	r0, [r4, #16]
   4d1e6:	89aa      	ldrh	r2, [r5, #12]
   4d1e8:	68a9      	ldr	r1, [r5, #8]
   4d1ea:	3008      	adds	r0, #8
   4d1ec:	f002 ffd9 	bl	501a2 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   4d1f0:	4628      	mov	r0, r5
   4d1f2:	f7f6 ff39 	bl	44068 <net_buf_unref>
		break;
   4d1f6:	e7c8      	b.n	4d18a <bt_conn_recv+0x20>
	conn->rx = NULL;
   4d1f8:	2300      	movs	r3, #0
   4d1fa:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   4d1fc:	4620      	mov	r0, r4
   4d1fe:	2201      	movs	r2, #1
}
   4d200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   4d204:	f000 baa3 	b.w	4d74e <bt_l2cap_recv>
}
   4d208:	bd70      	pop	{r4, r5, r6, pc}

0004d20a <bt_conn_ref>:
{
   4d20a:	f7ff bf63 	b.w	4d0d4 <bt_conn_ref.part.12>

0004d20e <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   4d20e:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   4d212:	f3bf 8f5b 	dmb	ish
   4d216:	e853 2f00 	ldrex	r2, [r3]
   4d21a:	3a01      	subs	r2, #1
   4d21c:	e843 2100 	strex	r1, r2, [r3]
   4d220:	2900      	cmp	r1, #0
   4d222:	d1f8      	bne.n	4d216 <bt_conn_unref+0x8>
   4d224:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   4d228:	7883      	ldrb	r3, [r0, #2]
   4d22a:	2b01      	cmp	r3, #1
   4d22c:	d108      	bne.n	4d240 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4d22e:	f3bf 8f5b 	dmb	ish
   4d232:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   4d236:	f3bf 8f5b 	dmb	ish
   4d23a:	b90b      	cbnz	r3, 4d240 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   4d23c:	f7e1 bf04 	b.w	2f048 <bt_le_adv_resume>
}
   4d240:	4770      	bx	lr

0004d242 <conn_lookup_handle>:
{
   4d242:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4d246:	4606      	mov	r6, r0
   4d248:	460d      	mov	r5, r1
   4d24a:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   4d24c:	2400      	movs	r4, #0
   4d24e:	f04f 08c0 	mov.w	r8, #192	; 0xc0
   4d252:	f04f 0901 	mov.w	r9, #1
   4d256:	42ac      	cmp	r4, r5
   4d258:	d103      	bne.n	4d262 <conn_lookup_handle+0x20>
	return NULL;
   4d25a:	2300      	movs	r3, #0
}
   4d25c:	4618      	mov	r0, r3
   4d25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
struct bt_conn *bt_conn_ref(struct bt_conn *conn)
   4d262:	fb08 6004 	mla	r0, r8, r4, r6
   4d266:	f7ff ff35 	bl	4d0d4 <bt_conn_ref.part.12>
		if (!conn) {
   4d26a:	4603      	mov	r3, r0
   4d26c:	b160      	cbz	r0, 4d288 <conn_lookup_handle+0x46>
		if (!bt_conn_is_handle_valid(conn)) {
   4d26e:	7b42      	ldrb	r2, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   4d270:	2a08      	cmp	r2, #8
   4d272:	d80b      	bhi.n	4d28c <conn_lookup_handle+0x4a>
   4d274:	fa09 f202 	lsl.w	r2, r9, r2
   4d278:	f412 7fc1 	tst.w	r2, #386	; 0x182
   4d27c:	d006      	beq.n	4d28c <conn_lookup_handle+0x4a>
		if (conn->handle != handle) {
   4d27e:	8802      	ldrh	r2, [r0, #0]
   4d280:	42ba      	cmp	r2, r7
   4d282:	d0eb      	beq.n	4d25c <conn_lookup_handle+0x1a>
			bt_conn_unref(conn);
   4d284:	f7ff ffc3 	bl	4d20e <bt_conn_unref>
	for (i = 0; i < size; i++) {
   4d288:	3401      	adds	r4, #1
   4d28a:	e7e4      	b.n	4d256 <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   4d28c:	4618      	mov	r0, r3
   4d28e:	e7f9      	b.n	4d284 <conn_lookup_handle+0x42>

0004d290 <bt_conn_connected>:
{
   4d290:	b510      	push	{r4, lr}
   4d292:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   4d294:	f7e3 f976 	bl	30584 <bt_l2cap_connected>
	notify_connected(conn);
   4d298:	4620      	mov	r0, r4
}
   4d29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   4d29e:	f7e2 ba93 	b.w	2f7c8 <notify_connected>

0004d2a2 <bt_conn_le_start_encryption>:
{
   4d2a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4d2a6:	4682      	mov	sl, r0
   4d2a8:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   4d2aa:	f242 0019 	movw	r0, #8217	; 0x2019
   4d2ae:	211c      	movs	r1, #28
{
   4d2b0:	4690      	mov	r8, r2
   4d2b2:	461f      	mov	r7, r3
   4d2b4:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   4d2b6:	f7e0 fcb1 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4d2ba:	4606      	mov	r6, r0
   4d2bc:	b340      	cbz	r0, 4d310 <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   4d2be:	211c      	movs	r1, #28
   4d2c0:	3008      	adds	r0, #8
   4d2c2:	f002 ff68 	bl	50196 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   4d2c6:	f8ba 3000 	ldrh.w	r3, [sl]
   4d2ca:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   4d2cc:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   4d2ce:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   4d2d2:	4649      	mov	r1, r9
   4d2d4:	f7ff f80a 	bl	4c2ec <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   4d2d8:	2202      	movs	r2, #2
   4d2da:	4641      	mov	r1, r8
   4d2dc:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   4d2e0:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   4d2e2:	f7ff f803 	bl	4c2ec <memcpy>
	memcpy(cp->ltk, ltk, len);
   4d2e6:	462a      	mov	r2, r5
   4d2e8:	4639      	mov	r1, r7
   4d2ea:	4620      	mov	r0, r4
   4d2ec:	f7fe fffe 	bl	4c2ec <memcpy>
	if (len < sizeof(cp->ltk)) {
   4d2f0:	2d0f      	cmp	r5, #15
   4d2f2:	d805      	bhi.n	4d300 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   4d2f4:	f1c5 0210 	rsb	r2, r5, #16
   4d2f8:	2100      	movs	r1, #0
   4d2fa:	1960      	adds	r0, r4, r5
   4d2fc:	f7ff f801 	bl	4c302 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   4d300:	4631      	mov	r1, r6
   4d302:	2200      	movs	r2, #0
   4d304:	f242 0019 	movw	r0, #8217	; 0x2019
}
   4d308:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   4d30c:	f7e0 bce0 	b.w	2dcd0 <bt_hci_cmd_send_sync>
}
   4d310:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4d314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004d318 <bt_conn_set_security>:
	if (conn->state != BT_CONN_CONNECTED) {
   4d318:	7b43      	ldrb	r3, [r0, #13]
   4d31a:	2b07      	cmp	r3, #7
{
   4d31c:	b510      	push	{r4, lr}
   4d31e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   4d320:	d128      	bne.n	4d374 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   4d322:	7a43      	ldrb	r3, [r0, #9]
   4d324:	428b      	cmp	r3, r1
   4d326:	d228      	bcs.n	4d37a <bt_conn_set_security+0x62>
   4d328:	7a83      	ldrb	r3, [r0, #10]
   4d32a:	428b      	cmp	r3, r1
   4d32c:	d225      	bcs.n	4d37a <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4d32e:	f3bf 8f5b 	dmb	ish
	if (val) {
   4d332:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   4d334:	f100 0304 	add.w	r3, r0, #4
   4d338:	d513      	bpl.n	4d362 <bt_conn_set_security+0x4a>
   4d33a:	e853 2f00 	ldrex	r2, [r3]
   4d33e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   4d342:	e843 2000 	strex	r0, r2, [r3]
   4d346:	2800      	cmp	r0, #0
   4d348:	d1f7      	bne.n	4d33a <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4d34a:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   4d34e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   4d352:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   4d354:	4620      	mov	r0, r4
   4d356:	f002 fbf8 	bl	4fb4a <bt_smp_start_security>
	if (err) {
   4d35a:	b108      	cbz	r0, 4d360 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   4d35c:	7a63      	ldrb	r3, [r4, #9]
   4d35e:	72a3      	strb	r3, [r4, #10]
}
   4d360:	bd10      	pop	{r4, pc}
   4d362:	e853 2f00 	ldrex	r2, [r3]
   4d366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   4d36a:	e843 2000 	strex	r0, r2, [r3]
   4d36e:	2800      	cmp	r0, #0
   4d370:	d0eb      	beq.n	4d34a <bt_conn_set_security+0x32>
   4d372:	e7f6      	b.n	4d362 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   4d374:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4d378:	e7f2      	b.n	4d360 <bt_conn_set_security+0x48>
		return 0;
   4d37a:	2000      	movs	r0, #0
   4d37c:	e7f0      	b.n	4d360 <bt_conn_set_security+0x48>

0004d37e <bt_conn_get_security>:
}
   4d37e:	7a40      	ldrb	r0, [r0, #9]
   4d380:	4770      	bx	lr

0004d382 <bt_conn_is_peer_addr_le>:
{
   4d382:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   4d384:	7a03      	ldrb	r3, [r0, #8]
   4d386:	428b      	cmp	r3, r1
{
   4d388:	4604      	mov	r4, r0
   4d38a:	4615      	mov	r5, r2
	if (id != conn->id) {
   4d38c:	d115      	bne.n	4d3ba <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   4d38e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   4d392:	2207      	movs	r2, #7
   4d394:	4628      	mov	r0, r5
   4d396:	f7fe ff99 	bl	4c2cc <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   4d39a:	b180      	cbz	r0, 4d3be <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   4d39c:	78e3      	ldrb	r3, [r4, #3]
   4d39e:	2207      	movs	r2, #7
   4d3a0:	b943      	cbnz	r3, 4d3b4 <bt_conn_is_peer_addr_le+0x32>
   4d3a2:	f104 0196 	add.w	r1, r4, #150	; 0x96
   4d3a6:	4628      	mov	r0, r5
   4d3a8:	f7fe ff90 	bl	4c2cc <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   4d3ac:	fab0 f080 	clz	r0, r0
   4d3b0:	0940      	lsrs	r0, r0, #5
}
   4d3b2:	bd38      	pop	{r3, r4, r5, pc}
   4d3b4:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   4d3b8:	e7f5      	b.n	4d3a6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   4d3ba:	2000      	movs	r0, #0
   4d3bc:	e7f9      	b.n	4d3b2 <bt_conn_is_peer_addr_le+0x30>
		return true;
   4d3be:	2001      	movs	r0, #1
   4d3c0:	e7f7      	b.n	4d3b2 <bt_conn_is_peer_addr_le+0x30>

0004d3c2 <bt_conn_exists_le>:
{
   4d3c2:	b508      	push	{r3, lr}
   4d3c4:	f7e2 fd8c 	bl	2fee0 <bt_conn_lookup_addr_le.part.14>
	if (conn) {
   4d3c8:	b110      	cbz	r0, 4d3d0 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   4d3ca:	f7ff ff20 	bl	4d20e <bt_conn_unref>
		return true;
   4d3ce:	2001      	movs	r0, #1
}
   4d3d0:	bd08      	pop	{r3, pc}

0004d3d2 <bt_conn_lookup_addr_le>:
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   4d3d2:	f7e2 bd85 	b.w	2fee0 <bt_conn_lookup_addr_le.part.14>

0004d3d6 <bt_conn_get_dst>:
}
   4d3d6:	3088      	adds	r0, #136	; 0x88
   4d3d8:	4770      	bx	lr

0004d3da <bt_conn_le_phy_update>:
{
   4d3da:	b513      	push	{r0, r1, r4, lr}
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
   4d3dc:	880c      	ldrh	r4, [r1, #0]
   4d3de:	f004 0203 	and.w	r2, r4, #3
   4d3e2:	2a03      	cmp	r2, #3
{
   4d3e4:	460b      	mov	r3, r1
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
   4d3e6:	d010      	beq.n	4d40a <bt_conn_le_phy_update+0x30>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S2) {
   4d3e8:	07e2      	lsls	r2, r4, #31
   4d3ea:	d410      	bmi.n	4d40e <bt_conn_le_phy_update+0x34>
		phy_opts = BT_HCI_LE_PHY_CODED_S8;
   4d3ec:	f004 0402 	and.w	r4, r4, #2
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
   4d3f0:	789a      	ldrb	r2, [r3, #2]
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   4d3f2:	78db      	ldrb	r3, [r3, #3]
		all_phys |= BT_HCI_LE_PHY_TX_ANY;
   4d3f4:	fab2 f182 	clz	r1, r2
   4d3f8:	0949      	lsrs	r1, r1, #5
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   4d3fa:	b90b      	cbnz	r3, 4d400 <bt_conn_le_phy_update+0x26>
		all_phys |= BT_HCI_LE_PHY_RX_ANY;
   4d3fc:	f041 0102 	orr.w	r1, r1, #2
	return bt_le_set_phy(conn, all_phys, param->pref_tx_phy,
   4d400:	9400      	str	r4, [sp, #0]
   4d402:	f7ff fb1d 	bl	4ca40 <bt_le_set_phy>
}
   4d406:	b002      	add	sp, #8
   4d408:	bd10      	pop	{r4, pc}
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   4d40a:	2400      	movs	r4, #0
   4d40c:	e7f0      	b.n	4d3f0 <bt_conn_le_phy_update+0x16>
		phy_opts = BT_HCI_LE_PHY_CODED_S2;
   4d40e:	2401      	movs	r4, #1
   4d410:	e7ee      	b.n	4d3f0 <bt_conn_le_phy_update+0x16>

0004d412 <bt_conn_disconnect>:
{
   4d412:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4d414:	7883      	ldrb	r3, [r0, #2]
   4d416:	2b01      	cmp	r3, #1
{
   4d418:	4604      	mov	r4, r0
   4d41a:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4d41c:	d103      	bne.n	4d426 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   4d41e:	2100      	movs	r1, #0
   4d420:	3088      	adds	r0, #136	; 0x88
   4d422:	f7e2 fe87 	bl	30134 <bt_le_set_auto_conn>
	switch (conn->state) {
   4d426:	7b63      	ldrb	r3, [r4, #13]
   4d428:	3b02      	subs	r3, #2
   4d42a:	2b06      	cmp	r3, #6
   4d42c:	d805      	bhi.n	4d43a <bt_conn_disconnect+0x28>
   4d42e:	e8df f003 	tbb	[pc, r3]
   4d432:	0408      	.short	0x0408
   4d434:	1a120404 	.word	0x1a120404
   4d438:	10          	.byte	0x10
   4d439:	00          	.byte	0x00
		return -ENOTCONN;
   4d43a:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   4d43e:	4628      	mov	r0, r5
   4d440:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4d442:	4620      	mov	r0, r4
		conn->err = reason;
   4d444:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   4d446:	2100      	movs	r1, #0
   4d448:	f7e2 fb34 	bl	2fab4 <bt_conn_set_state>
			bt_le_scan_update(false);
   4d44c:	2000      	movs	r0, #0
   4d44e:	f7e1 fecf 	bl	2f1f0 <bt_le_scan_update>
		return 0;
   4d452:	2500      	movs	r5, #0
   4d454:	e7f3      	b.n	4d43e <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   4d456:	f104 0058 	add.w	r0, r4, #88	; 0x58
   4d45a:	f003 feb9 	bl	511d0 <k_work_cancel_delayable>
}
   4d45e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   4d462:	f7e0 bd0d 	b.w	2de80 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   4d466:	4629      	mov	r1, r5
   4d468:	8820      	ldrh	r0, [r4, #0]
   4d46a:	f7ff fa94 	bl	4c996 <bt_hci_disconnect>
	if (err) {
   4d46e:	4605      	mov	r5, r0
   4d470:	2800      	cmp	r0, #0
   4d472:	d1e4      	bne.n	4d43e <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   4d474:	7b63      	ldrb	r3, [r4, #13]
   4d476:	2b07      	cmp	r3, #7
   4d478:	d1e1      	bne.n	4d43e <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   4d47a:	2108      	movs	r1, #8
   4d47c:	4620      	mov	r0, r4
   4d47e:	f7e2 fb19 	bl	2fab4 <bt_conn_set_state>
   4d482:	e7dc      	b.n	4d43e <bt_conn_disconnect+0x2c>

0004d484 <bt_conn_le_conn_update>:
{
   4d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4d486:	4607      	mov	r7, r0
   4d488:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   4d48a:	f242 0013 	movw	r0, #8211	; 0x2013
   4d48e:	210e      	movs	r1, #14
   4d490:	f7e0 fbc4 	bl	2dc1c <bt_hci_cmd_create>
	if (!buf) {
   4d494:	4606      	mov	r6, r0
   4d496:	b1d0      	cbz	r0, 4d4ce <bt_conn_le_conn_update+0x4a>
   4d498:	210e      	movs	r1, #14
   4d49a:	3008      	adds	r0, #8
   4d49c:	f002 fe7b 	bl	50196 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   4d4a0:	220e      	movs	r2, #14
   4d4a2:	4604      	mov	r4, r0
   4d4a4:	2100      	movs	r1, #0
   4d4a6:	f7fe ff2c 	bl	4c302 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   4d4aa:	883b      	ldrh	r3, [r7, #0]
   4d4ac:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   4d4ae:	882b      	ldrh	r3, [r5, #0]
   4d4b0:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   4d4b2:	886b      	ldrh	r3, [r5, #2]
   4d4b4:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   4d4b6:	88ab      	ldrh	r3, [r5, #4]
   4d4b8:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   4d4ba:	88eb      	ldrh	r3, [r5, #6]
   4d4bc:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   4d4be:	4631      	mov	r1, r6
   4d4c0:	2200      	movs	r2, #0
   4d4c2:	f242 0013 	movw	r0, #8211	; 0x2013
}
   4d4c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   4d4ca:	f7e0 bc01 	b.w	2dcd0 <bt_hci_cmd_send_sync>
}
   4d4ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4d4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004d4d4 <l2cap_connected>:
}
   4d4d4:	4770      	bx	lr

0004d4d6 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   4d4d6:	3010      	adds	r0, #16
   4d4d8:	f003 be7a 	b.w	511d0 <k_work_cancel_delayable>

0004d4dc <l2cap_create_le_sig_pdu.isra.9>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   4d4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4d4de:	4607      	mov	r7, r0
   4d4e0:	460e      	mov	r6, r1
   4d4e2:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   4d4e4:	2300      	movs	r3, #0
   4d4e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   4d4ea:	2104      	movs	r1, #4
   4d4ec:	2000      	movs	r0, #0
   4d4ee:	f7e2 fbc9 	bl	2fc84 <bt_conn_create_pdu_timeout>
	if (!buf) {
   4d4f2:	4604      	mov	r4, r0
   4d4f4:	b130      	cbz	r0, 4d504 <l2cap_create_le_sig_pdu.isra.9+0x28>
   4d4f6:	2104      	movs	r1, #4
   4d4f8:	3008      	adds	r0, #8
   4d4fa:	f002 fe4c 	bl	50196 <net_buf_simple_add>
	hdr->code = code;
   4d4fe:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   4d500:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   4d502:	8045      	strh	r5, [r0, #2]
}
   4d504:	4620      	mov	r0, r4
   4d506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004d508 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d508:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   4d50a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d50c:	b17b      	cbz	r3, 4d52e <bt_l2cap_chan_remove+0x26>
   4d50e:	3b08      	subs	r3, #8
   4d510:	2200      	movs	r2, #0
   4d512:	b163      	cbz	r3, 4d52e <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   4d514:	428b      	cmp	r3, r1
   4d516:	f103 0408 	add.w	r4, r3, #8
   4d51a:	d10f      	bne.n	4d53c <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   4d51c:	688b      	ldr	r3, [r1, #8]
   4d51e:	b93a      	cbnz	r2, 4d530 <bt_l2cap_chan_remove+0x28>
   4d520:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   4d522:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   4d524:	4294      	cmp	r4, r2
   4d526:	d100      	bne.n	4d52a <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   4d528:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   4d52a:	2300      	movs	r3, #0
   4d52c:	608b      	str	r3, [r1, #8]
}
   4d52e:	bd10      	pop	{r4, pc}
   4d530:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   4d532:	6d43      	ldr	r3, [r0, #84]	; 0x54
   4d534:	429c      	cmp	r4, r3
	list->tail = node;
   4d536:	bf08      	it	eq
   4d538:	6542      	streq	r2, [r0, #84]	; 0x54
   4d53a:	e7f6      	b.n	4d52a <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   4d53c:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d53e:	2b00      	cmp	r3, #0
   4d540:	d0f5      	beq.n	4d52e <bt_l2cap_chan_remove+0x26>
   4d542:	3b08      	subs	r3, #8
   4d544:	4622      	mov	r2, r4
   4d546:	e7e4      	b.n	4d512 <bt_l2cap_chan_remove+0xa>

0004d548 <bt_l2cap_chan_del>:
{
   4d548:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   4d54a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   4d54e:	4604      	mov	r4, r0
	if (!chan->conn) {
   4d550:	b123      	cbz	r3, 4d55c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   4d552:	686b      	ldr	r3, [r5, #4]
   4d554:	b103      	cbz	r3, 4d558 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   4d556:	4798      	blx	r3
	chan->conn = NULL;
   4d558:	2300      	movs	r3, #0
   4d55a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   4d55c:	68e3      	ldr	r3, [r4, #12]
   4d55e:	b10b      	cbz	r3, 4d564 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   4d560:	4620      	mov	r0, r4
   4d562:	4798      	blx	r3
	if (ops->released) {
   4d564:	69eb      	ldr	r3, [r5, #28]
   4d566:	b11b      	cbz	r3, 4d570 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   4d568:	4620      	mov	r0, r4
}
   4d56a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   4d56e:	4718      	bx	r3
}
   4d570:	bd70      	pop	{r4, r5, r6, pc}

0004d572 <l2cap_rtx_timeout>:
{
   4d572:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   4d574:	f1a0 0410 	sub.w	r4, r0, #16
   4d578:	4621      	mov	r1, r4
   4d57a:	f850 0c10 	ldr.w	r0, [r0, #-16]
   4d57e:	f7ff ffc3 	bl	4d508 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   4d582:	4620      	mov	r0, r4
}
   4d584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_l2cap_chan_del(&chan->chan);
   4d588:	f7ff bfde 	b.w	4d548 <bt_l2cap_chan_del>

0004d58c <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d58c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   4d58e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d590:	b173      	cbz	r3, 4d5b0 <bt_l2cap_disconnected+0x24>
   4d592:	f1b3 0008 	subs.w	r0, r3, #8
   4d596:	d00b      	beq.n	4d5b0 <bt_l2cap_disconnected+0x24>
   4d598:	681c      	ldr	r4, [r3, #0]
   4d59a:	b104      	cbz	r4, 4d59e <bt_l2cap_disconnected+0x12>
   4d59c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   4d59e:	f7ff ffd3 	bl	4d548 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d5a2:	b12c      	cbz	r4, 4d5b0 <bt_l2cap_disconnected+0x24>
   4d5a4:	68a3      	ldr	r3, [r4, #8]
   4d5a6:	b103      	cbz	r3, 4d5aa <bt_l2cap_disconnected+0x1e>
   4d5a8:	3b08      	subs	r3, #8
{
   4d5aa:	4620      	mov	r0, r4
   4d5ac:	461c      	mov	r4, r3
   4d5ae:	e7f6      	b.n	4d59e <bt_l2cap_disconnected+0x12>
}
   4d5b0:	bd10      	pop	{r4, pc}

0004d5b2 <bt_l2cap_security_changed>:
{
   4d5b2:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d5b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   4d5b6:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d5b8:	b18b      	cbz	r3, 4d5de <bt_l2cap_security_changed+0x2c>
   4d5ba:	f1b3 0008 	subs.w	r0, r3, #8
   4d5be:	d00e      	beq.n	4d5de <bt_l2cap_security_changed+0x2c>
   4d5c0:	681c      	ldr	r4, [r3, #0]
   4d5c2:	b104      	cbz	r4, 4d5c6 <bt_l2cap_security_changed+0x14>
   4d5c4:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   4d5c6:	6843      	ldr	r3, [r0, #4]
   4d5c8:	689b      	ldr	r3, [r3, #8]
   4d5ca:	b10b      	cbz	r3, 4d5d0 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   4d5cc:	4629      	mov	r1, r5
   4d5ce:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   4d5d0:	b12c      	cbz	r4, 4d5de <bt_l2cap_security_changed+0x2c>
   4d5d2:	68a3      	ldr	r3, [r4, #8]
   4d5d4:	b103      	cbz	r3, 4d5d8 <bt_l2cap_security_changed+0x26>
   4d5d6:	3b08      	subs	r3, #8
{
   4d5d8:	4620      	mov	r0, r4
   4d5da:	461c      	mov	r4, r3
   4d5dc:	e7f3      	b.n	4d5c6 <bt_l2cap_security_changed+0x14>
}
   4d5de:	bd38      	pop	{r3, r4, r5, pc}

0004d5e0 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   4d5e0:	3104      	adds	r1, #4
   4d5e2:	f7e2 bb4f 	b.w	2fc84 <bt_conn_create_pdu_timeout>

0004d5e6 <bt_l2cap_send_cb>:
{
   4d5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4d5ea:	4614      	mov	r4, r2
   4d5ec:	4605      	mov	r5, r0
   4d5ee:	4688      	mov	r8, r1
	return net_buf_simple_push(&buf->b, len);
   4d5f0:	f102 0008 	add.w	r0, r2, #8
   4d5f4:	2104      	movs	r1, #4
   4d5f6:	461e      	mov	r6, r3
   4d5f8:	9f06      	ldr	r7, [sp, #24]
   4d5fa:	f002 fded 	bl	501d8 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4d5fe:	89a1      	ldrh	r1, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   4d600:	f8a0 8002 	strh.w	r8, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   4d604:	3904      	subs	r1, #4
   4d606:	8001      	strh	r1, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   4d608:	463b      	mov	r3, r7
   4d60a:	4632      	mov	r2, r6
   4d60c:	4621      	mov	r1, r4
   4d60e:	4628      	mov	r0, r5
}
   4d610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   4d614:	f7e2 b9c4 	b.w	2f9a0 <bt_conn_send_cb>

0004d618 <l2cap_send_reject.constprop.12>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   4d618:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4d61a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   4d61c:	2202      	movs	r2, #2
   4d61e:	2001      	movs	r0, #1
   4d620:	f7ff ff5c 	bl	4d4dc <l2cap_create_le_sig_pdu.isra.9>
	if (!buf) {
   4d624:	4604      	mov	r4, r0
   4d626:	b198      	cbz	r0, 4d650 <l2cap_send_reject.constprop.12+0x38>
	return net_buf_simple_add(&buf->b, len);
   4d628:	2102      	movs	r1, #2
   4d62a:	3008      	adds	r0, #8
   4d62c:	f002 fdb3 	bl	50196 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   4d630:	2300      	movs	r3, #0
   4d632:	7003      	strb	r3, [r0, #0]
   4d634:	7043      	strb	r3, [r0, #1]
   4d636:	4622      	mov	r2, r4
   4d638:	9300      	str	r3, [sp, #0]
   4d63a:	2105      	movs	r1, #5
   4d63c:	4628      	mov	r0, r5
   4d63e:	f7ff ffd2 	bl	4d5e6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   4d642:	b128      	cbz	r0, 4d650 <l2cap_send_reject.constprop.12+0x38>
		net_buf_unref(buf);
   4d644:	4620      	mov	r0, r4
}
   4d646:	b003      	add	sp, #12
   4d648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   4d64c:	f7f6 bd0c 	b.w	44068 <net_buf_unref>
}
   4d650:	b003      	add	sp, #12
   4d652:	bd30      	pop	{r4, r5, pc}

0004d654 <l2cap_recv>:
{
   4d654:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   4d656:	898b      	ldrh	r3, [r1, #12]
   4d658:	2b03      	cmp	r3, #3
{
   4d65a:	b085      	sub	sp, #20
   4d65c:	4604      	mov	r4, r0
   4d65e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   4d660:	d911      	bls.n	4d686 <l2cap_recv+0x32>
	return net_buf_simple_pull_mem(&buf->b, len);
   4d662:	2104      	movs	r1, #4
   4d664:	f105 0008 	add.w	r0, r5, #8
   4d668:	f002 fdc6 	bl	501f8 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   4d66c:	89ab      	ldrh	r3, [r5, #12]
   4d66e:	8842      	ldrh	r2, [r0, #2]
   4d670:	429a      	cmp	r2, r3
   4d672:	d108      	bne.n	4d686 <l2cap_recv+0x32>
	if (!hdr->ident) {
   4d674:	7841      	ldrb	r1, [r0, #1]
   4d676:	b131      	cbz	r1, 4d686 <l2cap_recv+0x32>
	switch (hdr->code) {
   4d678:	7803      	ldrb	r3, [r0, #0]
   4d67a:	2b12      	cmp	r3, #18
   4d67c:	d006      	beq.n	4d68c <l2cap_recv+0x38>
   4d67e:	2b13      	cmp	r3, #19
   4d680:	d001      	beq.n	4d686 <l2cap_recv+0x32>
   4d682:	2b01      	cmp	r3, #1
   4d684:	d14b      	bne.n	4d71e <l2cap_recv+0xca>
}
   4d686:	2000      	movs	r0, #0
   4d688:	b005      	add	sp, #20
   4d68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len < sizeof(*req)) {
   4d68c:	2a07      	cmp	r2, #7
   4d68e:	d9fa      	bls.n	4d686 <l2cap_recv+0x32>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   4d690:	6824      	ldr	r4, [r4, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   4d692:	78e6      	ldrb	r6, [r4, #3]
   4d694:	b11e      	cbz	r6, 4d69e <l2cap_recv+0x4a>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   4d696:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   4d698:	f7ff ffbe 	bl	4d618 <l2cap_send_reject.constprop.12>
		break;
   4d69c:	e7f3      	b.n	4d686 <l2cap_recv+0x32>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   4d69e:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   4d6a0:	7850      	ldrb	r0, [r2, #1]
   4d6a2:	7813      	ldrb	r3, [r2, #0]
   4d6a4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4d6a8:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   4d6ac:	78d0      	ldrb	r0, [r2, #3]
   4d6ae:	7893      	ldrb	r3, [r2, #2]
   4d6b0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4d6b4:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   4d6b8:	7950      	ldrb	r0, [r2, #5]
   4d6ba:	7913      	ldrb	r3, [r2, #4]
   4d6bc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   4d6c0:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   4d6c4:	7993      	ldrb	r3, [r2, #6]
   4d6c6:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4d6c8:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   4d6ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4d6ce:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   4d6d0:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   4d6d4:	f7ff ff02 	bl	4d4dc <l2cap_create_le_sig_pdu.isra.9>
	if (!buf) {
   4d6d8:	4605      	mov	r5, r0
   4d6da:	2800      	cmp	r0, #0
   4d6dc:	d0d3      	beq.n	4d686 <l2cap_recv+0x32>
	accepted = le_param_req(conn, &param);
   4d6de:	a902      	add	r1, sp, #8
   4d6e0:	4620      	mov	r0, r4
   4d6e2:	f7e2 fb4b 	bl	2fd7c <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   4d6e6:	2102      	movs	r1, #2
   4d6e8:	4607      	mov	r7, r0
   4d6ea:	f105 0008 	add.w	r0, r5, #8
   4d6ee:	f002 fd52 	bl	50196 <net_buf_simple_add>
	if (accepted) {
   4d6f2:	f087 0301 	eor.w	r3, r7, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   4d6f6:	b2db      	uxtb	r3, r3
   4d6f8:	8003      	strh	r3, [r0, #0]
   4d6fa:	462a      	mov	r2, r5
   4d6fc:	9600      	str	r6, [sp, #0]
   4d6fe:	4633      	mov	r3, r6
   4d700:	2105      	movs	r1, #5
   4d702:	4620      	mov	r0, r4
   4d704:	f7ff ff6f 	bl	4d5e6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   4d708:	b110      	cbz	r0, 4d710 <l2cap_recv+0xbc>
		net_buf_unref(buf);
   4d70a:	4628      	mov	r0, r5
   4d70c:	f7f6 fcac 	bl	44068 <net_buf_unref>
	if (accepted) {
   4d710:	2f00      	cmp	r7, #0
   4d712:	d0b8      	beq.n	4d686 <l2cap_recv+0x32>
		bt_conn_le_conn_update(conn, &param);
   4d714:	a902      	add	r1, sp, #8
   4d716:	4620      	mov	r0, r4
   4d718:	f7ff feb4 	bl	4d484 <bt_conn_le_conn_update>
   4d71c:	e7b3      	b.n	4d686 <l2cap_recv+0x32>
		l2cap_send_reject(chan->conn, hdr->ident,
   4d71e:	6820      	ldr	r0, [r4, #0]
   4d720:	e7ba      	b.n	4d698 <l2cap_recv+0x44>

0004d722 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d722:	6d00      	ldr	r0, [r0, #80]	; 0x50
   4d724:	b108      	cbz	r0, 4d72a <bt_l2cap_le_lookup_tx_cid+0x8>
   4d726:	3808      	subs	r0, #8
   4d728:	b900      	cbnz	r0, 4d72c <bt_l2cap_le_lookup_tx_cid+0xa>
}
   4d72a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   4d72c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   4d730:	428b      	cmp	r3, r1
   4d732:	d0fa      	beq.n	4d72a <bt_l2cap_le_lookup_tx_cid+0x8>
   4d734:	6880      	ldr	r0, [r0, #8]
   4d736:	e7f5      	b.n	4d724 <bt_l2cap_le_lookup_tx_cid+0x2>

0004d738 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   4d738:	6d00      	ldr	r0, [r0, #80]	; 0x50
   4d73a:	b108      	cbz	r0, 4d740 <bt_l2cap_le_lookup_rx_cid+0x8>
   4d73c:	3808      	subs	r0, #8
   4d73e:	b900      	cbnz	r0, 4d742 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   4d740:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   4d742:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   4d746:	428b      	cmp	r3, r1
   4d748:	d0fa      	beq.n	4d740 <bt_l2cap_le_lookup_rx_cid+0x8>
   4d74a:	6880      	ldr	r0, [r0, #8]
   4d74c:	e7f5      	b.n	4d73a <bt_l2cap_le_lookup_rx_cid+0x2>

0004d74e <bt_l2cap_recv>:
{
   4d74e:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   4d750:	898b      	ldrh	r3, [r1, #12]
   4d752:	2b03      	cmp	r3, #3
{
   4d754:	4605      	mov	r5, r0
   4d756:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   4d758:	d804      	bhi.n	4d764 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   4d75a:	4620      	mov	r0, r4
}
   4d75c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   4d760:	f7f6 bc82 	b.w	44068 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   4d764:	2104      	movs	r1, #4
   4d766:	f104 0008 	add.w	r0, r4, #8
   4d76a:	f002 fd45 	bl	501f8 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   4d76e:	8841      	ldrh	r1, [r0, #2]
   4d770:	4628      	mov	r0, r5
   4d772:	f7ff ffe1 	bl	4d738 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4d776:	2800      	cmp	r0, #0
   4d778:	d0ef      	beq.n	4d75a <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   4d77a:	6843      	ldr	r3, [r0, #4]
   4d77c:	4621      	mov	r1, r4
   4d77e:	691b      	ldr	r3, [r3, #16]
   4d780:	4798      	blx	r3
   4d782:	e7ea      	b.n	4d75a <bt_l2cap_recv+0xc>

0004d784 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   4d784:	4770      	bx	lr

0004d786 <sys_slist_get>:
Z_GENLIST_IS_EMPTY(slist)
   4d786:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET(slist, snode)
   4d788:	b12b      	cbz	r3, 4d796 <sys_slist_get+0x10>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4d78a:	6841      	ldr	r1, [r0, #4]
   4d78c:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   4d78e:	6002      	str	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   4d790:	428b      	cmp	r3, r1
	list->tail = node;
   4d792:	bf08      	it	eq
   4d794:	6042      	streq	r2, [r0, #4]
Z_GENLIST_GET(slist, snode)
   4d796:	4618      	mov	r0, r3
   4d798:	4770      	bx	lr

0004d79a <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d79a:	6803      	ldr	r3, [r0, #0]
   4d79c:	2200      	movs	r2, #0
   4d79e:	b90b      	cbnz	r3, 4d7a4 <sys_slist_find_and_remove+0xa>
   4d7a0:	4618      	mov	r0, r3
   4d7a2:	4770      	bx	lr
   4d7a4:	428b      	cmp	r3, r1
   4d7a6:	d110      	bne.n	4d7ca <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   4d7a8:	680b      	ldr	r3, [r1, #0]
   4d7aa:	b942      	cbnz	r2, 4d7be <sys_slist_find_and_remove+0x24>
   4d7ac:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   4d7ae:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   4d7b0:	4291      	cmp	r1, r2
   4d7b2:	d100      	bne.n	4d7b6 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   4d7b4:	6043      	str	r3, [r0, #4]
	parent->next = child;
   4d7b6:	2300      	movs	r3, #0
   4d7b8:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d7ba:	2001      	movs	r0, #1
   4d7bc:	4770      	bx	lr
	parent->next = child;
   4d7be:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   4d7c0:	6843      	ldr	r3, [r0, #4]
   4d7c2:	4299      	cmp	r1, r3
	list->tail = node;
   4d7c4:	bf08      	it	eq
   4d7c6:	6042      	streq	r2, [r0, #4]
   4d7c8:	e7f5      	b.n	4d7b6 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4d7ca:	461a      	mov	r2, r3
   4d7cc:	681b      	ldr	r3, [r3, #0]
   4d7ce:	e7e6      	b.n	4d79e <sys_slist_find_and_remove+0x4>

0004d7d0 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   4d7d0:	4603      	mov	r3, r0
	size_t bytes = 0;
   4d7d2:	2000      	movs	r0, #0

	while (buf) {
   4d7d4:	b903      	cbnz	r3, 4d7d8 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   4d7d6:	4770      	bx	lr
		bytes += buf->len;
   4d7d8:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   4d7da:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   4d7dc:	4410      	add	r0, r2
		buf = buf->frags;
   4d7de:	e7f9      	b.n	4d7d4 <net_buf_frags_len+0x4>

0004d7e0 <att_sent>:
	if (chan->ops->sent) {
   4d7e0:	684b      	ldr	r3, [r1, #4]
   4d7e2:	695b      	ldr	r3, [r3, #20]
   4d7e4:	b10b      	cbz	r3, 4d7ea <att_sent+0xa>
		chan->ops->sent(chan);
   4d7e6:	4608      	mov	r0, r1
   4d7e8:	4718      	bx	r3
}
   4d7ea:	4770      	bx	lr

0004d7ec <attr_read_type_cb>:
{
   4d7ec:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   4d7ee:	68d4      	ldr	r4, [r2, #12]
   4d7f0:	7823      	ldrb	r3, [r4, #0]
   4d7f2:	3102      	adds	r1, #2
   4d7f4:	b913      	cbnz	r3, 4d7fc <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   4d7f6:	7021      	strb	r1, [r4, #0]
	return true;
   4d7f8:	2001      	movs	r0, #1
   4d7fa:	e006      	b.n	4d80a <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   4d7fc:	428b      	cmp	r3, r1
   4d7fe:	d0fb      	beq.n	4d7f8 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   4d800:	8983      	ldrh	r3, [r0, #12]
   4d802:	3b02      	subs	r3, #2
   4d804:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   4d806:	2000      	movs	r0, #0
   4d808:	6110      	str	r0, [r2, #16]
}
   4d80a:	bd10      	pop	{r4, pc}

0004d80c <att_prepare_write_req>:
}
   4d80c:	2006      	movs	r0, #6
   4d80e:	4770      	bx	lr

0004d810 <att_op_get_type>:
	switch (op) {
   4d810:	280e      	cmp	r0, #14
   4d812:	d00a      	beq.n	4d82a <att_op_get_type+0x1a>
   4d814:	d81e      	bhi.n	4d854 <att_op_get_type+0x44>
   4d816:	2807      	cmp	r0, #7
   4d818:	d015      	beq.n	4d846 <att_op_get_type+0x36>
   4d81a:	d80d      	bhi.n	4d838 <att_op_get_type+0x28>
   4d81c:	2803      	cmp	r0, #3
   4d81e:	d012      	beq.n	4d846 <att_op_get_type+0x36>
   4d820:	d805      	bhi.n	4d82e <att_op_get_type+0x1e>
   4d822:	2801      	cmp	r0, #1
   4d824:	d00f      	beq.n	4d846 <att_op_get_type+0x36>
   4d826:	2802      	cmp	r0, #2
   4d828:	d12b      	bne.n	4d882 <att_op_get_type+0x72>
		return ATT_REQUEST;
   4d82a:	2001      	movs	r0, #1
   4d82c:	4770      	bx	lr
	switch (op) {
   4d82e:	2805      	cmp	r0, #5
		return ATT_REQUEST;
   4d830:	bf0c      	ite	eq
   4d832:	2002      	moveq	r0, #2
   4d834:	2001      	movne	r0, #1
   4d836:	4770      	bx	lr
	switch (op) {
   4d838:	280a      	cmp	r0, #10
   4d83a:	d0f6      	beq.n	4d82a <att_op_get_type+0x1a>
   4d83c:	d805      	bhi.n	4d84a <att_op_get_type+0x3a>
   4d83e:	2808      	cmp	r0, #8
   4d840:	d0f3      	beq.n	4d82a <att_op_get_type+0x1a>
   4d842:	2809      	cmp	r0, #9
   4d844:	d11d      	bne.n	4d882 <att_op_get_type+0x72>
		return ATT_RESPONSE;
   4d846:	2002      	movs	r0, #2
   4d848:	4770      	bx	lr
	switch (op) {
   4d84a:	280c      	cmp	r0, #12
		return ATT_RESPONSE;
   4d84c:	bf0c      	ite	eq
   4d84e:	2001      	moveq	r0, #1
   4d850:	2002      	movne	r0, #2
   4d852:	4770      	bx	lr
	switch (op) {
   4d854:	2817      	cmp	r0, #23
   4d856:	d0f6      	beq.n	4d846 <att_op_get_type+0x36>
   4d858:	d80b      	bhi.n	4d872 <att_op_get_type+0x62>
   4d85a:	2811      	cmp	r0, #17
   4d85c:	d0f3      	beq.n	4d846 <att_op_get_type+0x36>
   4d85e:	d803      	bhi.n	4d868 <att_op_get_type+0x58>
   4d860:	280f      	cmp	r0, #15
   4d862:	d0f0      	beq.n	4d846 <att_op_get_type+0x36>
   4d864:	2810      	cmp	r0, #16
   4d866:	e7df      	b.n	4d828 <att_op_get_type+0x18>
   4d868:	2813      	cmp	r0, #19
   4d86a:	d0ec      	beq.n	4d846 <att_op_get_type+0x36>
   4d86c:	d3dd      	bcc.n	4d82a <att_op_get_type+0x1a>
   4d86e:	2816      	cmp	r0, #22
   4d870:	e7da      	b.n	4d828 <att_op_get_type+0x18>
   4d872:	281d      	cmp	r0, #29
   4d874:	d013      	beq.n	4d89e <att_op_get_type+0x8e>
   4d876:	d80a      	bhi.n	4d88e <att_op_get_type+0x7e>
   4d878:	2819      	cmp	r0, #25
   4d87a:	d0e4      	beq.n	4d846 <att_op_get_type+0x36>
   4d87c:	d3d5      	bcc.n	4d82a <att_op_get_type+0x1a>
   4d87e:	281b      	cmp	r0, #27
   4d880:	d00f      	beq.n	4d8a2 <att_op_get_type+0x92>
	if (op & ATT_CMD_MASK) {
   4d882:	f010 0f40 	tst.w	r0, #64	; 0x40
		return ATT_COMMAND;
   4d886:	bf0c      	ite	eq
   4d888:	2006      	moveq	r0, #6
   4d88a:	2000      	movne	r0, #0
   4d88c:	4770      	bx	lr
	switch (op) {
   4d88e:	2852      	cmp	r0, #82	; 0x52
   4d890:	d009      	beq.n	4d8a6 <att_op_get_type+0x96>
   4d892:	28d2      	cmp	r0, #210	; 0xd2
   4d894:	d007      	beq.n	4d8a6 <att_op_get_type+0x96>
   4d896:	281e      	cmp	r0, #30
   4d898:	d1f3      	bne.n	4d882 <att_op_get_type+0x72>
		return ATT_CONFIRMATION;
   4d89a:	2004      	movs	r0, #4
}
   4d89c:	4770      	bx	lr
		return ATT_INDICATION;
   4d89e:	2005      	movs	r0, #5
   4d8a0:	4770      	bx	lr
		return ATT_NOTIFICATION;
   4d8a2:	2003      	movs	r0, #3
   4d8a4:	4770      	bx	lr
		return ATT_COMMAND;
   4d8a6:	2000      	movs	r0, #0
   4d8a8:	4770      	bx	lr

0004d8aa <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4d8aa:	f3bf 8f5b 	dmb	ish
   4d8ae:	6800      	ldr	r0, [r0, #0]
   4d8b0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4d8b4:	4108      	asrs	r0, r1
}
   4d8b6:	f000 0001 	and.w	r0, r0, #1
   4d8ba:	4770      	bx	lr

0004d8bc <chan_req_send>:
{
   4d8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4d8be:	688f      	ldr	r7, [r1, #8]
{
   4d8c0:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4d8c2:	4638      	mov	r0, r7
{
   4d8c4:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   4d8c6:	f7ff ff83 	bl	4d7d0 <net_buf_frags_len>
   4d8ca:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   4d8ce:	4283      	cmp	r3, r0
   4d8d0:	d30d      	bcc.n	4d8ee <chan_req_send+0x32>
	req->buf = NULL;
   4d8d2:	2600      	movs	r6, #0
	chan->req = req;
   4d8d4:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   4d8d8:	4632      	mov	r2, r6
	req->buf = NULL;
   4d8da:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   4d8dc:	4620      	mov	r0, r4
   4d8de:	4639      	mov	r1, r7
   4d8e0:	f7e2 ff02 	bl	306e8 <chan_send>
	if (err) {
   4d8e4:	b110      	cbz	r0, 4d8ec <chan_req_send+0x30>
		req->buf = buf;
   4d8e6:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   4d8e8:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   4d8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   4d8ee:	f06f 0079 	mvn.w	r0, #121	; 0x79
   4d8f2:	e7fb      	b.n	4d8ec <chan_req_send+0x30>

0004d8f4 <bt_att_status>:
{
   4d8f4:	b538      	push	{r3, r4, r5, lr}
   4d8f6:	4605      	mov	r5, r0
   4d8f8:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   4d8fa:	2100      	movs	r1, #0
   4d8fc:	f7ff ffd5 	bl	4d8aa <atomic_test_bit>
   4d900:	b1c8      	cbz	r0, 4d936 <bt_att_status+0x42>
	if (!chan->att) {
   4d902:	f855 0c08 	ldr.w	r0, [r5, #-8]
   4d906:	b1b0      	cbz	r0, 4d936 <bt_att_status+0x42>
	if (chan->req) {
   4d908:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   4d90c:	b99b      	cbnz	r3, 4d936 <bt_att_status+0x42>
	node = sys_slist_get(&chan->att->reqs);
   4d90e:	3004      	adds	r0, #4
   4d910:	f7ff ff39 	bl	4d786 <sys_slist_get>
	if (!node) {
   4d914:	4604      	mov	r4, r0
   4d916:	b170      	cbz	r0, 4d936 <bt_att_status+0x42>
	return chan_req_send(chan, req);
   4d918:	4601      	mov	r1, r0
   4d91a:	f1a5 0008 	sub.w	r0, r5, #8
   4d91e:	f7ff ffcd 	bl	4d8bc <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4d922:	2800      	cmp	r0, #0
   4d924:	da07      	bge.n	4d936 <bt_att_status+0x42>
	sys_slist_prepend(&chan->att->reqs, node);
   4d926:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   4d92a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   4d92c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   4d92e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   4d930:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   4d932:	b902      	cbnz	r2, 4d936 <bt_att_status+0x42>
	list->tail = node;
   4d934:	609c      	str	r4, [r3, #8]
}
   4d936:	bd38      	pop	{r3, r4, r5, pc}

0004d938 <process_queue>:
{
   4d938:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   4d93a:	2200      	movs	r2, #0
{
   4d93c:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   4d93e:	2300      	movs	r3, #0
   4d940:	4608      	mov	r0, r1
{
   4d942:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   4d944:	f002 fbc6 	bl	500d4 <net_buf_get>
	if (buf) {
   4d948:	4605      	mov	r5, r0
   4d94a:	b160      	cbz	r0, 4d966 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   4d94c:	4601      	mov	r1, r0
   4d94e:	2200      	movs	r2, #0
   4d950:	4620      	mov	r0, r4
   4d952:	f7e2 fec9 	bl	306e8 <chan_send>
		if (err) {
   4d956:	4604      	mov	r4, r0
   4d958:	b118      	cbz	r0, 4d962 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   4d95a:	4629      	mov	r1, r5
   4d95c:	4630      	mov	r0, r6
   4d95e:	f003 fb40 	bl	50fe2 <k_queue_prepend>
}
   4d962:	4620      	mov	r0, r4
   4d964:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   4d966:	f06f 0401 	mvn.w	r4, #1
   4d96a:	e7fa      	b.n	4d962 <process_queue+0x2a>

0004d96c <att_notify_mult>:
{
   4d96c:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   4d96e:	6803      	ldr	r3, [r0, #0]
   4d970:	898a      	ldrh	r2, [r1, #12]
   4d972:	6818      	ldr	r0, [r3, #0]
   4d974:	6889      	ldr	r1, [r1, #8]
   4d976:	f001 fbfd 	bl	4f174 <bt_gatt_mult_notification>
}
   4d97a:	2000      	movs	r0, #0
   4d97c:	bd08      	pop	{r3, pc}

0004d97e <att_notify>:
{
   4d97e:	b538      	push	{r3, r4, r5, lr}
   4d980:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   4d982:	f101 0008 	add.w	r0, r1, #8
   4d986:	460c      	mov	r4, r1
   4d988:	f002 fc46 	bl	50218 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   4d98c:	682d      	ldr	r5, [r5, #0]
   4d98e:	89a3      	ldrh	r3, [r4, #12]
   4d990:	68a2      	ldr	r2, [r4, #8]
   4d992:	4601      	mov	r1, r0
   4d994:	6828      	ldr	r0, [r5, #0]
   4d996:	f001 fbc5 	bl	4f124 <bt_gatt_notification>
}
   4d99a:	2000      	movs	r0, #0
   4d99c:	bd38      	pop	{r3, r4, r5, pc}

0004d99e <bt_att_chan_send_rsp>:
{
   4d99e:	b538      	push	{r3, r4, r5, lr}
   4d9a0:	4604      	mov	r4, r0
   4d9a2:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   4d9a4:	f7e2 fea0 	bl	306e8 <chan_send>
	if (err) {
   4d9a8:	b130      	cbz	r0, 4d9b8 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   4d9aa:	4629      	mov	r1, r5
   4d9ac:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   4d9b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   4d9b4:	f002 bbb2 	b.w	5011c <net_buf_put>
}
   4d9b8:	bd38      	pop	{r3, r4, r5, pc}

0004d9ba <att_chan_mtu_updated>:
{
   4d9ba:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   4d9bc:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d9be:	6a72      	ldr	r2, [r6, #36]	; 0x24
   4d9c0:	b1f2      	cbz	r2, 4da00 <att_chan_mtu_updated+0x46>
   4d9c2:	f5b2 74a2 	subs.w	r4, r2, #324	; 0x144
   4d9c6:	d01a      	beq.n	4d9fe <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   4d9c8:	6813      	ldr	r3, [r2, #0]
   4d9ca:	b10b      	cbz	r3, 4d9d0 <att_chan_mtu_updated+0x16>
   4d9cc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   4d9d0:	2200      	movs	r2, #0
   4d9d2:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   4d9d4:	42a0      	cmp	r0, r4
   4d9d6:	d009      	beq.n	4d9ec <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   4d9d8:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   4d9dc:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   4d9e0:	42a9      	cmp	r1, r5
   4d9e2:	bf38      	it	cc
   4d9e4:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   4d9e6:	42a2      	cmp	r2, r4
   4d9e8:	bf38      	it	cc
   4d9ea:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4d9ec:	b14b      	cbz	r3, 4da02 <att_chan_mtu_updated+0x48>
   4d9ee:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   4d9f2:	b10d      	cbz	r5, 4d9f8 <att_chan_mtu_updated+0x3e>
   4d9f4:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   4d9f8:	461c      	mov	r4, r3
   4d9fa:	462b      	mov	r3, r5
   4d9fc:	e7ea      	b.n	4d9d4 <att_chan_mtu_updated+0x1a>
   4d9fe:	4622      	mov	r2, r4
   4da00:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   4da02:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   4da06:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   4da0a:	428b      	cmp	r3, r1
   4da0c:	d801      	bhi.n	4da12 <att_chan_mtu_updated+0x58>
   4da0e:	4290      	cmp	r0, r2
   4da10:	d909      	bls.n	4da26 <att_chan_mtu_updated+0x6c>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   4da12:	4282      	cmp	r2, r0
   4da14:	bf38      	it	cc
   4da16:	4602      	movcc	r2, r0
   4da18:	4299      	cmp	r1, r3
   4da1a:	6830      	ldr	r0, [r6, #0]
   4da1c:	bf38      	it	cc
   4da1e:	4619      	movcc	r1, r3
}
   4da20:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   4da22:	f7e4 be8d 	b.w	32740 <bt_gatt_att_max_mtu_changed>
}
   4da26:	bc70      	pop	{r4, r5, r6}
   4da28:	4770      	bx	lr

0004da2a <bt_gatt_foreach_attr>:
{
   4da2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4da2c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   4da30:	2300      	movs	r3, #0
   4da32:	9300      	str	r3, [sp, #0]
   4da34:	461a      	mov	r2, r3
   4da36:	f7e4 f807 	bl	31a48 <bt_gatt_foreach_attr_type>
}
   4da3a:	b005      	add	sp, #20
   4da3c:	f85d fb04 	ldr.w	pc, [sp], #4

0004da40 <att_chan_read>:
{
   4da40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4da44:	4680      	mov	r8, r0
   4da46:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4da48:	4610      	mov	r0, r2
{
   4da4a:	469a      	mov	sl, r3
   4da4c:	468b      	mov	fp, r1
   4da4e:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   4da50:	f7ff febe 	bl	4d7d0 <net_buf_frags_len>
   4da54:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   4da58:	4283      	cmp	r3, r0
   4da5a:	d97a      	bls.n	4db52 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   4da5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   4da60:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   4da62:	4630      	mov	r0, r6
   4da64:	f002 fb6b 	bl	5013e <net_buf_frag_last>
	size_t len, total = 0;
   4da68:	f04f 0900 	mov.w	r9, #0
	frag = net_buf_frag_last(buf);
   4da6c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4da6e:	4630      	mov	r0, r6
   4da70:	f7ff feae 	bl	4d7d0 <net_buf_frags_len>
   4da74:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   4da78:	f105 0708 	add.w	r7, r5, #8
   4da7c:	1a24      	subs	r4, r4, r0
   4da7e:	4638      	mov	r0, r7
   4da80:	f002 fbd6 	bl	50230 <net_buf_simple_tailroom>
   4da84:	4284      	cmp	r4, r0
   4da86:	d211      	bcs.n	4daac <att_chan_read+0x6c>
   4da88:	4630      	mov	r0, r6
   4da8a:	f7ff fea1 	bl	4d7d0 <net_buf_frags_len>
   4da8e:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4da92:	1a24      	subs	r4, r4, r0
		if (!len) {
   4da94:	bb34      	cbnz	r4, 4dae4 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   4da96:	79b0      	ldrb	r0, [r6, #6]
   4da98:	f7f6 fa26 	bl	43ee8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   4da9c:	2200      	movs	r2, #0
   4da9e:	2300      	movs	r3, #0
   4daa0:	f002 fb13 	bl	500ca <net_buf_alloc_fixed>
			if (!frag) {
   4daa4:	4605      	mov	r5, r0
   4daa6:	b930      	cbnz	r0, 4dab6 <att_chan_read+0x76>
	return total;
   4daa8:	464f      	mov	r7, r9
   4daaa:	e02c      	b.n	4db06 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   4daac:	4638      	mov	r0, r7
   4daae:	f002 fbbf 	bl	50230 <net_buf_simple_tailroom>
   4dab2:	4604      	mov	r4, r0
   4dab4:	e7ee      	b.n	4da94 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   4dab6:	4601      	mov	r1, r0
   4dab8:	4630      	mov	r0, r6
   4daba:	f002 fb50 	bl	5015e <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   4dabe:	4630      	mov	r0, r6
   4dac0:	f7ff fe86 	bl	4d7d0 <net_buf_frags_len>
   4dac4:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4dac8:	f105 0708 	add.w	r7, r5, #8
   4dacc:	1a24      	subs	r4, r4, r0
   4dace:	4638      	mov	r0, r7
   4dad0:	f002 fbae 	bl	50230 <net_buf_simple_tailroom>
   4dad4:	4284      	cmp	r4, r0
   4dad6:	d21a      	bcs.n	4db0e <att_chan_read+0xce>
   4dad8:	4630      	mov	r0, r6
   4dada:	f7ff fe79 	bl	4d7d0 <net_buf_frags_len>
   4dade:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   4dae2:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   4dae4:	68a9      	ldr	r1, [r5, #8]
   4dae6:	89aa      	ldrh	r2, [r5, #12]
   4dae8:	f8db 7004 	ldr.w	r7, [fp, #4]
   4daec:	f8cd a000 	str.w	sl, [sp]
   4daf0:	440a      	add	r2, r1
   4daf2:	b2a3      	uxth	r3, r4
   4daf4:	4659      	mov	r1, fp
   4daf6:	9803      	ldr	r0, [sp, #12]
   4daf8:	47b8      	blx	r7
		if (read < 0) {
   4dafa:	1e07      	subs	r7, r0, #0
   4dafc:	da0c      	bge.n	4db18 <att_chan_read+0xd8>
				return total;
   4dafe:	f1b9 0f00 	cmp.w	r9, #0
   4db02:	bf18      	it	ne
   4db04:	464f      	movne	r7, r9
}
   4db06:	4638      	mov	r0, r7
   4db08:	b005      	add	sp, #20
   4db0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4db0e:	4638      	mov	r0, r7
   4db10:	f002 fb8e 	bl	50230 <net_buf_simple_tailroom>
   4db14:	4604      	mov	r4, r0
   4db16:	e7e5      	b.n	4dae4 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   4db18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4db1a:	b993      	cbnz	r3, 4db42 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   4db1c:	4639      	mov	r1, r7
   4db1e:	f105 0008 	add.w	r0, r5, #8
   4db22:	f002 fb38 	bl	50196 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4db26:	4630      	mov	r0, r6
   4db28:	f7ff fe52 	bl	4d7d0 <net_buf_frags_len>
   4db2c:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   4db30:	44ba      	add	sl, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4db32:	4283      	cmp	r3, r0
		total += read;
   4db34:	44b9      	add	r9, r7
		offset += read;
   4db36:	fa1f fa8a 	uxth.w	sl, sl
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   4db3a:	d9b5      	bls.n	4daa8 <att_chan_read+0x68>
   4db3c:	42a7      	cmp	r7, r4
   4db3e:	d096      	beq.n	4da6e <att_chan_read+0x2e>
   4db40:	e7b2      	b.n	4daa8 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   4db42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   4db44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   4db46:	4639      	mov	r1, r7
   4db48:	4628      	mov	r0, r5
   4db4a:	4798      	blx	r3
   4db4c:	2800      	cmp	r0, #0
   4db4e:	d1e5      	bne.n	4db1c <att_chan_read+0xdc>
   4db50:	e7aa      	b.n	4daa8 <att_chan_read+0x68>
		return 0;
   4db52:	2700      	movs	r7, #0
   4db54:	e7d7      	b.n	4db06 <att_chan_read+0xc6>

0004db56 <find_type_cb>:
{
   4db56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   4db5a:	f8d2 8000 	ldr.w	r8, [r2]
{
   4db5e:	b093      	sub	sp, #76	; 0x4c
   4db60:	4607      	mov	r7, r0
   4db62:	460d      	mov	r5, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4db64:	2600      	movs	r6, #0
   4db66:	f642 0301 	movw	r3, #10241	; 0x2801
   4db6a:	a902      	add	r1, sp, #8
   4db6c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   4db6e:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4db72:	f88d 6008 	strb.w	r6, [sp, #8]
{
   4db76:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   4db78:	f8ad 300a 	strh.w	r3, [sp, #10]
   4db7c:	f7fe fca5 	bl	4c4ca <bt_uuid_cmp>
   4db80:	2800      	cmp	r0, #0
   4db82:	d07a      	beq.n	4dc7a <find_type_cb+0x124>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   4db84:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   4db88:	a903      	add	r1, sp, #12
   4db8a:	6838      	ldr	r0, [r7, #0]
   4db8c:	f88d 600c 	strb.w	r6, [sp, #12]
   4db90:	f8ad 300e 	strh.w	r3, [sp, #14]
   4db94:	f7fe fc99 	bl	4c4ca <bt_uuid_cmp>
   4db98:	b138      	cbz	r0, 4dbaa <find_type_cb+0x54>
		if (data->group &&
   4db9a:	68a3      	ldr	r3, [r4, #8]
   4db9c:	b11b      	cbz	r3, 4dba6 <find_type_cb+0x50>
   4db9e:	885a      	ldrh	r2, [r3, #2]
   4dba0:	42aa      	cmp	r2, r5
   4dba2:	d200      	bcs.n	4dba6 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   4dba4:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   4dba6:	2001      	movs	r0, #1
   4dba8:	e009      	b.n	4dbbe <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   4dbaa:	6861      	ldr	r1, [r4, #4]
   4dbac:	4608      	mov	r0, r1
   4dbae:	f7ff fe0f 	bl	4d7d0 <net_buf_frags_len>
   4dbb2:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   4dbb6:	1a18      	subs	r0, r3, r0
   4dbb8:	2803      	cmp	r0, #3
   4dbba:	d803      	bhi.n	4dbc4 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   4dbbc:	2000      	movs	r0, #0
}
   4dbbe:	b013      	add	sp, #76	; 0x4c
   4dbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   4dbc4:	4608      	mov	r0, r1
   4dbc6:	f002 faba 	bl	5013e <net_buf_frag_last>
   4dbca:	4606      	mov	r6, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   4dbcc:	6860      	ldr	r0, [r4, #4]
   4dbce:	f7ff fdff 	bl	4d7d0 <net_buf_frags_len>
   4dbd2:	f8b8 a08a 	ldrh.w	sl, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   4dbd6:	f106 0b08 	add.w	fp, r6, #8
   4dbda:	ebaa 0a00 	sub.w	sl, sl, r0
   4dbde:	4658      	mov	r0, fp
   4dbe0:	f002 fb26 	bl	50230 <net_buf_simple_tailroom>
   4dbe4:	4582      	cmp	sl, r0
   4dbe6:	d240      	bcs.n	4dc6a <find_type_cb+0x114>
   4dbe8:	6860      	ldr	r0, [r4, #4]
   4dbea:	f7ff fdf1 	bl	4d7d0 <net_buf_frags_len>
   4dbee:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   4dbf2:	1a18      	subs	r0, r3, r0
	if (!len) {
   4dbf4:	b970      	cbnz	r0, 4dc14 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   4dbf6:	6863      	ldr	r3, [r4, #4]
   4dbf8:	7998      	ldrb	r0, [r3, #6]
   4dbfa:	f7f6 f975 	bl	43ee8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   4dbfe:	2200      	movs	r2, #0
   4dc00:	2300      	movs	r3, #0
   4dc02:	f002 fa62 	bl	500ca <net_buf_alloc_fixed>
		if (!frag) {
   4dc06:	4606      	mov	r6, r0
   4dc08:	2800      	cmp	r0, #0
   4dc0a:	d0d7      	beq.n	4dbbc <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   4dc0c:	4601      	mov	r1, r0
   4dc0e:	6860      	ldr	r0, [r4, #4]
   4dc10:	f002 faa5 	bl	5015e <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   4dc14:	2300      	movs	r3, #0
   4dc16:	9300      	str	r3, [sp, #0]
   4dc18:	2310      	movs	r3, #16
   4dc1a:	f8d7 8004 	ldr.w	r8, [r7, #4]
   4dc1e:	4639      	mov	r1, r7
   4dc20:	eb0d 0203 	add.w	r2, sp, r3
   4dc24:	4648      	mov	r0, r9
   4dc26:	47c0      	blx	r8
	if (read < 0) {
   4dc28:	1e07      	subs	r7, r0, #0
   4dc2a:	db26      	blt.n	4dc7a <find_type_cb+0x124>
	if (read != data->value_len) {
   4dc2c:	7c22      	ldrb	r2, [r4, #16]
   4dc2e:	68e0      	ldr	r0, [r4, #12]
   4dc30:	42ba      	cmp	r2, r7
   4dc32:	d01e      	beq.n	4dc72 <find_type_cb+0x11c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   4dc34:	4601      	mov	r1, r0
   4dc36:	a80d      	add	r0, sp, #52	; 0x34
   4dc38:	f7fe fc71 	bl	4c51e <bt_uuid_create>
   4dc3c:	b1e8      	cbz	r0, 4dc7a <find_type_cb+0x124>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   4dc3e:	b2fa      	uxtb	r2, r7
   4dc40:	a904      	add	r1, sp, #16
   4dc42:	a808      	add	r0, sp, #32
   4dc44:	f7fe fc6b 	bl	4c51e <bt_uuid_create>
   4dc48:	b1b8      	cbz	r0, 4dc7a <find_type_cb+0x124>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   4dc4a:	a908      	add	r1, sp, #32
   4dc4c:	a80d      	add	r0, sp, #52	; 0x34
   4dc4e:	f7fe fc3c 	bl	4c4ca <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   4dc52:	b990      	cbnz	r0, 4dc7a <find_type_cb+0x124>
	data->err = 0x00;
   4dc54:	2300      	movs	r3, #0
   4dc56:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   4dc58:	2104      	movs	r1, #4
   4dc5a:	f106 0008 	add.w	r0, r6, #8
   4dc5e:	f002 fa9a 	bl	50196 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   4dc62:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   4dc64:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   4dc66:	8045      	strh	r5, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   4dc68:	e79d      	b.n	4dba6 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   4dc6a:	4658      	mov	r0, fp
   4dc6c:	f002 fae0 	bl	50230 <net_buf_simple_tailroom>
   4dc70:	e7c0      	b.n	4dbf4 <find_type_cb+0x9e>
	} else if (memcmp(data->value, uuid, read)) {
   4dc72:	a904      	add	r1, sp, #16
   4dc74:	f7fe fb2a 	bl	4c2cc <memcmp>
   4dc78:	e7eb      	b.n	4dc52 <find_type_cb+0xfc>
	data->group = NULL;
   4dc7a:	2300      	movs	r3, #0
   4dc7c:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   4dc7e:	e792      	b.n	4dba6 <find_type_cb+0x50>

0004dc80 <find_info_cb>:
{
   4dc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   4dc82:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   4dc84:	6816      	ldr	r6, [r2, #0]
{
   4dc86:	4605      	mov	r5, r0
   4dc88:	460f      	mov	r7, r1
   4dc8a:	4614      	mov	r4, r2
	if (!data->rsp) {
   4dc8c:	b963      	cbnz	r3, 4dca8 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   4dc8e:	6850      	ldr	r0, [r2, #4]
   4dc90:	2101      	movs	r1, #1
   4dc92:	3008      	adds	r0, #8
   4dc94:	f002 fa7f 	bl	50196 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   4dc98:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   4dc9a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   4dc9c:	781b      	ldrb	r3, [r3, #0]
   4dc9e:	2b00      	cmp	r3, #0
   4dca0:	bf0c      	ite	eq
   4dca2:	2301      	moveq	r3, #1
   4dca4:	2302      	movne	r3, #2
   4dca6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   4dca8:	68a3      	ldr	r3, [r4, #8]
   4dcaa:	781b      	ldrb	r3, [r3, #0]
   4dcac:	2b01      	cmp	r3, #1
   4dcae:	d003      	beq.n	4dcb8 <find_info_cb+0x38>
   4dcb0:	2b02      	cmp	r3, #2
   4dcb2:	d019      	beq.n	4dce8 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   4dcb4:	2000      	movs	r0, #0
   4dcb6:	e016      	b.n	4dce6 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   4dcb8:	682b      	ldr	r3, [r5, #0]
   4dcba:	781b      	ldrb	r3, [r3, #0]
   4dcbc:	2b00      	cmp	r3, #0
   4dcbe:	d1f9      	bne.n	4dcb4 <find_info_cb+0x34>
   4dcc0:	6860      	ldr	r0, [r4, #4]
   4dcc2:	2104      	movs	r1, #4
   4dcc4:	3008      	adds	r0, #8
   4dcc6:	f002 fa66 	bl	50196 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4dcca:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   4dccc:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   4dcce:	885b      	ldrh	r3, [r3, #2]
   4dcd0:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   4dcd2:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   4dcd4:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   4dcd6:	899b      	ldrh	r3, [r3, #12]
   4dcd8:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   4dcdc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   4dcde:	2804      	cmp	r0, #4
   4dce0:	bf94      	ite	ls
   4dce2:	2000      	movls	r0, #0
   4dce4:	2001      	movhi	r0, #1
}
   4dce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   4dce8:	682b      	ldr	r3, [r5, #0]
   4dcea:	781b      	ldrb	r3, [r3, #0]
   4dcec:	2b02      	cmp	r3, #2
   4dcee:	d1e1      	bne.n	4dcb4 <find_info_cb+0x34>
   4dcf0:	6860      	ldr	r0, [r4, #4]
   4dcf2:	2112      	movs	r1, #18
   4dcf4:	3008      	adds	r0, #8
   4dcf6:	f002 fa4e 	bl	50196 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4dcfa:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   4dcfc:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4dcfe:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   4dd00:	f820 7b02 	strh.w	r7, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   4dd04:	3101      	adds	r1, #1
   4dd06:	f7fe faf1 	bl	4c2ec <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   4dd0a:	6863      	ldr	r3, [r4, #4]
   4dd0c:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   4dd10:	899b      	ldrh	r3, [r3, #12]
   4dd12:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   4dd14:	2812      	cmp	r0, #18
   4dd16:	e7e3      	b.n	4dce0 <find_info_cb+0x60>

0004dd18 <attr_read_group_cb>:
	if (!data->rsp->len) {
   4dd18:	68d0      	ldr	r0, [r2, #12]
   4dd1a:	7803      	ldrb	r3, [r0, #0]
   4dd1c:	3104      	adds	r1, #4
   4dd1e:	b913      	cbnz	r3, 4dd26 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   4dd20:	7001      	strb	r1, [r0, #0]
	return true;
   4dd22:	2001      	movs	r0, #1
}
   4dd24:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   4dd26:	428b      	cmp	r3, r1
   4dd28:	d0fb      	beq.n	4dd22 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   4dd2a:	6891      	ldr	r1, [r2, #8]
   4dd2c:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   4dd2e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   4dd30:	3b04      	subs	r3, #4
   4dd32:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   4dd34:	6110      	str	r0, [r2, #16]
		return false;
   4dd36:	4770      	bx	lr

0004dd38 <att_get>:
{
   4dd38:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   4dd3a:	7b43      	ldrb	r3, [r0, #13]
   4dd3c:	2b07      	cmp	r3, #7
   4dd3e:	d001      	beq.n	4dd44 <att_get+0xc>
		return NULL;
   4dd40:	2000      	movs	r0, #0
}
   4dd42:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   4dd44:	2104      	movs	r1, #4
   4dd46:	f7ff fcf7 	bl	4d738 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4dd4a:	4603      	mov	r3, r0
   4dd4c:	2800      	cmp	r0, #0
   4dd4e:	d0f7      	beq.n	4dd40 <att_get+0x8>
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   4dd50:	2102      	movs	r1, #2
   4dd52:	30e8      	adds	r0, #232	; 0xe8
   4dd54:	f7ff fda9 	bl	4d8aa <atomic_test_bit>
   4dd58:	2800      	cmp	r0, #0
   4dd5a:	d1f1      	bne.n	4dd40 <att_get+0x8>
	return att_chan->att;
   4dd5c:	f853 0c08 	ldr.w	r0, [r3, #-8]
   4dd60:	e7ef      	b.n	4dd42 <att_get+0xa>

0004dd62 <chan_req_sent>:
	if (chan->req) {
   4dd62:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4dd66:	b133      	cbz	r3, 4dd76 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   4dd68:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4dd6c:	2300      	movs	r3, #0
   4dd6e:	f500 7088 	add.w	r0, r0, #272	; 0x110
   4dd72:	f7fa bfab 	b.w	48ccc <k_work_reschedule>
}
   4dd76:	4770      	bx	lr

0004dd78 <att_exec_write_req>:
   4dd78:	2006      	movs	r0, #6
   4dd7a:	4770      	bx	lr

0004dd7c <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4dd7c:	30f0      	adds	r0, #240	; 0xf0
   4dd7e:	f3bf 8f5b 	dmb	ish
   4dd82:	e850 3f00 	ldrex	r3, [r0]
   4dd86:	f023 0301 	bic.w	r3, r3, #1
   4dd8a:	e840 3200 	strex	r2, r3, [r0]
   4dd8e:	2a00      	cmp	r2, #0
   4dd90:	d1f7      	bne.n	4dd82 <chan_rsp_sent+0x6>
   4dd92:	f3bf 8f5b 	dmb	ish
}
   4dd96:	4770      	bx	lr

0004dd98 <chan_cfm_sent>:
   4dd98:	30f0      	adds	r0, #240	; 0xf0
   4dd9a:	f3bf 8f5b 	dmb	ish
   4dd9e:	e850 3f00 	ldrex	r3, [r0]
   4dda2:	f023 0302 	bic.w	r3, r3, #2
   4dda6:	e840 3200 	strex	r2, r3, [r0]
   4ddaa:	2a00      	cmp	r2, #0
   4ddac:	d1f7      	bne.n	4dd9e <chan_cfm_sent+0x6>
   4ddae:	f3bf 8f5b 	dmb	ish
}
   4ddb2:	4770      	bx	lr

0004ddb4 <att_req_send_process>:
{
   4ddb4:	b570      	push	{r4, r5, r6, lr}
   4ddb6:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   4ddb8:	3004      	adds	r0, #4
   4ddba:	f7ff fce4 	bl	4d786 <sys_slist_get>
	if (!node) {
   4ddbe:	4606      	mov	r6, r0
   4ddc0:	b1c0      	cbz	r0, 4ddf4 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4ddc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   4ddc4:	b153      	cbz	r3, 4dddc <att_req_send_process+0x28>
   4ddc6:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   4ddca:	d007      	beq.n	4dddc <att_req_send_process+0x28>
   4ddcc:	681c      	ldr	r4, [r3, #0]
   4ddce:	b10c      	cbz	r4, 4ddd4 <att_req_send_process+0x20>
   4ddd0:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   4ddd4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   4ddd8:	b13b      	cbz	r3, 4ddea <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4ddda:	b964      	cbnz	r4, 4ddf6 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   4dddc:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   4ddde:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   4dde0:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   4dde2:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   4dde4:	b933      	cbnz	r3, 4ddf4 <att_req_send_process+0x40>
	list->tail = node;
   4dde6:	60ae      	str	r6, [r5, #8]
   4dde8:	e004      	b.n	4ddf4 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   4ddea:	4631      	mov	r1, r6
   4ddec:	f7ff fd66 	bl	4d8bc <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4ddf0:	2800      	cmp	r0, #0
   4ddf2:	dbf2      	blt.n	4ddda <att_req_send_process+0x26>
}
   4ddf4:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   4ddf6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4ddfa:	b10b      	cbz	r3, 4de00 <att_req_send_process+0x4c>
   4ddfc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   4de00:	4620      	mov	r0, r4
   4de02:	461c      	mov	r4, r3
   4de04:	e7e6      	b.n	4ddd4 <att_req_send_process+0x20>

0004de06 <write_cb>:
{
   4de06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4de08:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   4de0a:	4601      	mov	r1, r0
{
   4de0c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   4de0e:	222a      	movs	r2, #42	; 0x2a
   4de10:	6820      	ldr	r0, [r4, #0]
   4de12:	f000 fe7b 	bl	4eb0c <bt_gatt_check_perm>
   4de16:	4605      	mov	r5, r0
   4de18:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   4de1a:	bb20      	cbnz	r0, 4de66 <write_cb+0x60>
	if (!data->req) {
   4de1c:	7a23      	ldrb	r3, [r4, #8]
   4de1e:	b1ab      	cbz	r3, 4de4c <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   4de20:	2b18      	cmp	r3, #24
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   4de22:	bf14      	ite	ne
   4de24:	2300      	movne	r3, #0
   4de26:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   4de28:	9301      	str	r3, [sp, #4]
   4de2a:	8a63      	ldrh	r3, [r4, #18]
   4de2c:	9300      	str	r3, [sp, #0]
   4de2e:	68b7      	ldr	r7, [r6, #8]
   4de30:	8a23      	ldrh	r3, [r4, #16]
   4de32:	68e2      	ldr	r2, [r4, #12]
   4de34:	6820      	ldr	r0, [r4, #0]
   4de36:	4631      	mov	r1, r6
   4de38:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   4de3a:	2800      	cmp	r0, #0
   4de3c:	db08      	blt.n	4de50 <write_cb+0x4a>
   4de3e:	8a23      	ldrh	r3, [r4, #16]
   4de40:	4298      	cmp	r0, r3
   4de42:	d10e      	bne.n	4de62 <write_cb+0x5c>
	data->err = 0U;
   4de44:	2300      	movs	r3, #0
   4de46:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   4de48:	2501      	movs	r5, #1
   4de4a:	e007      	b.n	4de5c <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   4de4c:	2302      	movs	r3, #2
   4de4e:	e7eb      	b.n	4de28 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   4de50:	f110 0fff 	cmn.w	r0, #255	; 0xff
   4de54:	d305      	bcc.n	4de62 <write_cb+0x5c>
		return -err;
   4de56:	4240      	negs	r0, r0
   4de58:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   4de5a:	7520      	strb	r0, [r4, #20]
}
   4de5c:	4628      	mov	r0, r5
   4de5e:	b003      	add	sp, #12
   4de60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   4de62:	200e      	movs	r0, #14
   4de64:	e7f9      	b.n	4de5a <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   4de66:	2500      	movs	r5, #0
   4de68:	e7f8      	b.n	4de5c <write_cb+0x56>

0004de6a <bt_att_sent>:
{
   4de6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   4de6c:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   4de70:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   4de74:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   4de76:	f1a0 0608 	sub.w	r6, r0, #8
	if (chan->sent) {
   4de7a:	b10b      	cbz	r3, 4de80 <bt_att_sent+0x16>
		chan->sent(chan);
   4de7c:	4630      	mov	r0, r6
   4de7e:	4798      	blx	r3
   4de80:	f3bf 8f5b 	dmb	ish
   4de84:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   4de88:	e853 2f00 	ldrex	r2, [r3]
   4de8c:	f022 0210 	bic.w	r2, r2, #16
   4de90:	e843 2100 	strex	r1, r2, [r3]
   4de94:	2900      	cmp	r1, #0
   4de96:	d1f7      	bne.n	4de88 <bt_att_sent+0x1e>
   4de98:	f3bf 8f5b 	dmb	ish
	if (!att) {
   4de9c:	b30c      	cbz	r4, 4dee2 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   4de9e:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   4dea2:	b98b      	cbnz	r3, 4dec8 <bt_att_sent+0x5e>
   4dea4:	6863      	ldr	r3, [r4, #4]
   4dea6:	b17b      	cbz	r3, 4dec8 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   4dea8:	1d20      	adds	r0, r4, #4
   4deaa:	f7ff fc6c 	bl	4d786 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4deae:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   4deb0:	4607      	mov	r7, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   4deb2:	4630      	mov	r0, r6
   4deb4:	f7ff fd02 	bl	4d8bc <chan_req_send>
   4deb8:	2800      	cmp	r0, #0
   4deba:	da12      	bge.n	4dee2 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   4debc:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   4debe:	603b      	str	r3, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
   4dec0:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   4dec2:	6067      	str	r7, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   4dec4:	b903      	cbnz	r3, 4dec8 <bt_att_sent+0x5e>
	list->tail = node;
   4dec6:	60a7      	str	r7, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   4dec8:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   4decc:	4630      	mov	r0, r6
   4dece:	f7ff fd33 	bl	4d938 <process_queue>
	if (!err) {
   4ded2:	b130      	cbz	r0, 4dee2 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   4ded4:	f104 010c 	add.w	r1, r4, #12
   4ded8:	4630      	mov	r0, r6
}
   4deda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   4dede:	f7ff bd2b 	b.w	4d938 <process_queue>
}
   4dee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004dee4 <read_cb>:
{
   4dee4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   4dee8:	6817      	ldr	r7, [r2, #0]
{
   4deea:	4680      	mov	r8, r0
	data->err = 0x00;
   4deec:	2600      	movs	r6, #0
{
   4deee:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   4def0:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   4def2:	7316      	strb	r6, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   4def4:	4641      	mov	r1, r8
   4def6:	2215      	movs	r2, #21
   4def8:	f000 fe08 	bl	4eb0c <bt_gatt_check_perm>
   4defc:	4604      	mov	r4, r0
   4defe:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   4df00:	b9a0      	cbnz	r0, 4df2c <read_cb+0x48>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   4df02:	e9cd 0000 	strd	r0, r0, [sp]
   4df06:	88ab      	ldrh	r3, [r5, #4]
   4df08:	68aa      	ldr	r2, [r5, #8]
   4df0a:	4641      	mov	r1, r8
   4df0c:	4638      	mov	r0, r7
   4df0e:	f7ff fd97 	bl	4da40 <att_chan_read>
	if (ret < 0) {
   4df12:	2800      	cmp	r0, #0
   4df14:	da0c      	bge.n	4df30 <read_cb+0x4c>
	if (err < 0 && err >= -0xff) {
   4df16:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   4df1a:	bf26      	itte	cs
   4df1c:	4240      	negcs	r0, r0
   4df1e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   4df20:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   4df22:	7328      	strb	r0, [r5, #12]
}
   4df24:	4620      	mov	r0, r4
   4df26:	b002      	add	sp, #8
   4df28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   4df2c:	4634      	mov	r4, r6
   4df2e:	e7f9      	b.n	4df24 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   4df30:	2401      	movs	r4, #1
   4df32:	e7f7      	b.n	4df24 <read_cb+0x40>

0004df34 <bt_att_chan_create_pdu>:
{
   4df34:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   4df36:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   4df3a:	3201      	adds	r2, #1
   4df3c:	429a      	cmp	r2, r3
{
   4df3e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   4df40:	d81b      	bhi.n	4df7a <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   4df42:	4608      	mov	r0, r1
   4df44:	f7ff fc64 	bl	4d810 <att_op_get_type>
   4df48:	2802      	cmp	r0, #2
   4df4a:	d001      	beq.n	4df50 <bt_att_chan_create_pdu+0x1c>
   4df4c:	2804      	cmp	r0, #4
   4df4e:	d10f      	bne.n	4df70 <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   4df50:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4df54:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   4df56:	2100      	movs	r1, #0
   4df58:	4608      	mov	r0, r1
   4df5a:	f7ff fb41 	bl	4d5e0 <bt_l2cap_create_pdu_timeout>
   4df5e:	4604      	mov	r4, r0
	if (!buf) {
   4df60:	b120      	cbz	r0, 4df6c <bt_att_chan_create_pdu+0x38>
   4df62:	2101      	movs	r1, #1
   4df64:	3008      	adds	r0, #8
   4df66:	f002 f916 	bl	50196 <net_buf_simple_add>
	hdr->code = op;
   4df6a:	7005      	strb	r5, [r0, #0]
}
   4df6c:	4620      	mov	r0, r4
   4df6e:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   4df70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4df74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   4df78:	e7ed      	b.n	4df56 <bt_att_chan_create_pdu+0x22>
		return NULL;
   4df7a:	2400      	movs	r4, #0
   4df7c:	e7f6      	b.n	4df6c <bt_att_chan_create_pdu+0x38>

0004df7e <bt_att_create_pdu>:
{
   4df7e:	b570      	push	{r4, r5, r6, lr}
   4df80:	460e      	mov	r6, r1
   4df82:	4615      	mov	r5, r2
	att = att_get(conn);
   4df84:	f7ff fed8 	bl	4dd38 <att_get>
	if (!att) {
   4df88:	b170      	cbz	r0, 4dfa8 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4df8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   4df8c:	b163      	cbz	r3, 4dfa8 <bt_att_create_pdu+0x2a>
   4df8e:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   4df92:	d009      	beq.n	4dfa8 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   4df94:	681b      	ldr	r3, [r3, #0]
   4df96:	b10b      	cbz	r3, 4df9c <bt_att_create_pdu+0x1e>
   4df98:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   4df9c:	1c6a      	adds	r2, r5, #1
   4df9e:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   4dfa2:	428a      	cmp	r2, r1
   4dfa4:	d902      	bls.n	4dfac <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4dfa6:	b93b      	cbnz	r3, 4dfb8 <bt_att_create_pdu+0x3a>
}
   4dfa8:	2000      	movs	r0, #0
   4dfaa:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   4dfac:	462a      	mov	r2, r5
   4dfae:	4631      	mov	r1, r6
}
   4dfb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   4dfb4:	f7ff bfbe 	b.w	4df34 <bt_att_chan_create_pdu>
   4dfb8:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4dfbc:	b10c      	cbz	r4, 4dfc2 <bt_att_create_pdu+0x44>
   4dfbe:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   4dfc2:	4618      	mov	r0, r3
   4dfc4:	4623      	mov	r3, r4
   4dfc6:	e7ea      	b.n	4df9e <bt_att_create_pdu+0x20>

0004dfc8 <att_read_blob_req>:
{
   4dfc8:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   4dfca:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   4dfcc:	8813      	ldrh	r3, [r2, #0]
   4dfce:	8852      	ldrh	r2, [r2, #2]
   4dfd0:	9200      	str	r2, [sp, #0]
   4dfd2:	210c      	movs	r1, #12
   4dfd4:	220d      	movs	r2, #13
   4dfd6:	f7e2 ff21 	bl	30e1c <att_read_rsp>
}
   4dfda:	b003      	add	sp, #12
   4dfdc:	f85d fb04 	ldr.w	pc, [sp], #4

0004dfe0 <att_read_req>:
{
   4dfe0:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   4dfe2:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   4dfe4:	2200      	movs	r2, #0
   4dfe6:	881b      	ldrh	r3, [r3, #0]
   4dfe8:	9200      	str	r2, [sp, #0]
   4dfea:	210a      	movs	r1, #10
   4dfec:	220b      	movs	r2, #11
   4dfee:	f7e2 ff15 	bl	30e1c <att_read_rsp>
}
   4dff2:	b003      	add	sp, #12
   4dff4:	f85d fb04 	ldr.w	pc, [sp], #4

0004dff8 <bt_att_init>:
	bt_gatt_init();
   4dff8:	f7e3 bc8c 	b.w	31914 <bt_gatt_init>

0004dffc <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   4dffc:	898a      	ldrh	r2, [r1, #12]
   4dffe:	6889      	ldr	r1, [r1, #8]
   4e000:	2300      	movs	r3, #0
   4e002:	f7e3 b8cd 	b.w	311a0 <att_handle_rsp>

0004e006 <att_handle_find_type_rsp>:
   4e006:	f7ff bff9 	b.w	4dffc <att_handle_find_info_rsp>

0004e00a <att_handle_read_type_rsp>:
   4e00a:	f7ff bff7 	b.w	4dffc <att_handle_find_info_rsp>

0004e00e <att_handle_read_rsp>:
   4e00e:	f7ff bff5 	b.w	4dffc <att_handle_find_info_rsp>

0004e012 <att_handle_read_blob_rsp>:
   4e012:	f7ff bff3 	b.w	4dffc <att_handle_find_info_rsp>

0004e016 <att_handle_read_mult_rsp>:
   4e016:	f7ff bff1 	b.w	4dffc <att_handle_find_info_rsp>

0004e01a <att_handle_read_group_rsp>:
   4e01a:	f7ff bfef 	b.w	4dffc <att_handle_find_info_rsp>

0004e01e <att_handle_write_rsp>:
   4e01e:	f7ff bfed 	b.w	4dffc <att_handle_find_info_rsp>

0004e022 <att_handle_prepare_write_rsp>:
   4e022:	f7ff bfeb 	b.w	4dffc <att_handle_find_info_rsp>

0004e026 <att_handle_exec_write_rsp>:
   4e026:	f7ff bfe9 	b.w	4dffc <att_handle_find_info_rsp>

0004e02a <att_confirm>:
   4e02a:	f7ff bfe7 	b.w	4dffc <att_handle_find_info_rsp>

0004e02e <att_mtu_rsp>:
{
   4e02e:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   4e030:	688d      	ldr	r5, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   4e032:	882b      	ldrh	r3, [r5, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   4e034:	2b16      	cmp	r3, #22
{
   4e036:	4604      	mov	r4, r0
   4e038:	460e      	mov	r6, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   4e03a:	d806      	bhi.n	4e04a <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   4e03c:	2200      	movs	r2, #0
   4e03e:	2304      	movs	r3, #4
   4e040:	4611      	mov	r1, r2
}
   4e042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   4e046:	f7e3 b8ab 	b.w	311a0 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   4e04a:	2b41      	cmp	r3, #65	; 0x41
   4e04c:	bf28      	it	cs
   4e04e:	2341      	movcs	r3, #65	; 0x41
   4e050:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   4e054:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   4e058:	f7ff fcaf 	bl	4d9ba <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   4e05c:	2300      	movs	r3, #0
   4e05e:	89b2      	ldrh	r2, [r6, #12]
   4e060:	4629      	mov	r1, r5
   4e062:	4620      	mov	r0, r4
   4e064:	e7ed      	b.n	4e042 <att_mtu_rsp+0x14>

0004e066 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   4e066:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   4e06a:	b570      	push	{r4, r5, r6, lr}
   4e06c:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   4e06e:	f1a0 0508 	sub.w	r5, r0, #8
	if (!att_chan->att) {
   4e072:	2b00      	cmp	r3, #0
   4e074:	d037      	beq.n	4e0e6 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   4e076:	b171      	cbz	r1, 4e096 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   4e078:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   4e07c:	2b00      	cmp	r3, #0
   4e07e:	d032      	beq.n	4e0e6 <bt_att_encrypt_change+0x80>
   4e080:	7c1b      	ldrb	r3, [r3, #16]
   4e082:	07da      	lsls	r2, r3, #31
   4e084:	d52f      	bpl.n	4e0e6 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   4e086:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   4e088:	2200      	movs	r2, #0
   4e08a:	4628      	mov	r0, r5
   4e08c:	4611      	mov	r1, r2
}
   4e08e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   4e092:	f7e3 b885 	b.w	311a0 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   4e096:	6806      	ldr	r6, [r0, #0]
	bt_gatt_encrypt_change(conn);
   4e098:	4630      	mov	r0, r6
   4e09a:	f7e4 fb65 	bl	32768 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   4e09e:	7a73      	ldrb	r3, [r6, #9]
   4e0a0:	2b01      	cmp	r3, #1
   4e0a2:	d020      	beq.n	4e0e6 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   4e0a4:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   4e0a8:	b1ec      	cbz	r4, 4e0e6 <bt_att_encrypt_change+0x80>
   4e0aa:	7c23      	ldrb	r3, [r4, #16]
   4e0ac:	07db      	lsls	r3, r3, #31
   4e0ae:	d51a      	bpl.n	4e0e6 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   4e0b0:	68e3      	ldr	r3, [r4, #12]
   4e0b2:	2b00      	cmp	r3, #0
   4e0b4:	d0e7      	beq.n	4e086 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   4e0b6:	6962      	ldr	r2, [r4, #20]
   4e0b8:	7c61      	ldrb	r1, [r4, #17]
   4e0ba:	4628      	mov	r0, r5
   4e0bc:	f7ff ff3a 	bl	4df34 <bt_att_chan_create_pdu>
	if (!buf) {
   4e0c0:	4606      	mov	r6, r0
   4e0c2:	b140      	cbz	r0, 4e0d6 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   4e0c4:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   4e0c8:	68e3      	ldr	r3, [r4, #12]
   4e0ca:	4798      	blx	r3
   4e0cc:	4602      	mov	r2, r0
   4e0ce:	b120      	cbz	r0, 4e0da <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   4e0d0:	4630      	mov	r0, r6
   4e0d2:	f7f5 ffc9 	bl	44068 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   4e0d6:	230e      	movs	r3, #14
   4e0d8:	e7d6      	b.n	4e088 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   4e0da:	4631      	mov	r1, r6
   4e0dc:	4628      	mov	r0, r5
   4e0de:	f7e2 fb03 	bl	306e8 <chan_send>
   4e0e2:	2800      	cmp	r0, #0
   4e0e4:	d1f4      	bne.n	4e0d0 <bt_att_encrypt_change+0x6a>
}
   4e0e6:	bd70      	pop	{r4, r5, r6, pc}

0004e0e8 <att_timeout>:
	bt_att_disconnected(&chan->chan.chan);
   4e0e8:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
   4e0ec:	f7e3 b8be 	b.w	3126c <bt_att_disconnected>

0004e0f0 <bt_att_send>:
{
   4e0f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4e0f4:	4607      	mov	r7, r0
   4e0f6:	460e      	mov	r6, r1
   4e0f8:	4615      	mov	r5, r2
   4e0fa:	4698      	mov	r8, r3
	att = att_get(conn);
   4e0fc:	f7ff fe1c 	bl	4dd38 <att_get>
	if (!att) {
   4e100:	4604      	mov	r4, r0
   4e102:	b938      	cbnz	r0, 4e114 <bt_att_send+0x24>
		net_buf_unref(buf);
   4e104:	4630      	mov	r0, r6
   4e106:	f7f5 ffaf 	bl	44068 <net_buf_unref>
		return -ENOTCONN;
   4e10a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   4e10e:	b002      	add	sp, #8
   4e110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   4e114:	b145      	cbz	r5, 4e128 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   4e116:	f8cd 8000 	str.w	r8, [sp]
   4e11a:	462b      	mov	r3, r5
   4e11c:	4632      	mov	r2, r6
   4e11e:	2104      	movs	r1, #4
   4e120:	4638      	mov	r0, r7
   4e122:	f7ff fa60 	bl	4d5e6 <bt_l2cap_send_cb>
   4e126:	e7f2      	b.n	4e10e <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   4e128:	f100 050c 	add.w	r5, r0, #12
   4e12c:	4631      	mov	r1, r6
   4e12e:	4628      	mov	r0, r5
   4e130:	f001 fff4 	bl	5011c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   4e134:	2200      	movs	r2, #0
   4e136:	2300      	movs	r3, #0
   4e138:	4628      	mov	r0, r5
   4e13a:	f001 ffcb 	bl	500d4 <net_buf_get>
	if (!buf) {
   4e13e:	4606      	mov	r6, r0
   4e140:	b1d8      	cbz	r0, 4e17a <bt_att_send+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4e142:	6a63      	ldr	r3, [r4, #36]	; 0x24
   4e144:	b1ab      	cbz	r3, 4e172 <bt_att_send+0x82>
   4e146:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   4e14a:	d012      	beq.n	4e172 <bt_att_send+0x82>
   4e14c:	681c      	ldr	r4, [r3, #0]
   4e14e:	b10c      	cbz	r4, 4e154 <bt_att_send+0x64>
   4e150:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   4e154:	2200      	movs	r2, #0
   4e156:	4631      	mov	r1, r6
   4e158:	f7e2 fac6 	bl	306e8 <chan_send>
		if (err >= 0) {
   4e15c:	2800      	cmp	r0, #0
   4e15e:	da0c      	bge.n	4e17a <bt_att_send+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   4e160:	b13c      	cbz	r4, 4e172 <bt_att_send+0x82>
   4e162:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   4e166:	b10b      	cbz	r3, 4e16c <bt_att_send+0x7c>
   4e168:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   4e16c:	4620      	mov	r0, r4
   4e16e:	461c      	mov	r4, r3
   4e170:	e7f0      	b.n	4e154 <bt_att_send+0x64>
		k_queue_prepend(&att->tx_queue._queue, buf);
   4e172:	4631      	mov	r1, r6
   4e174:	4628      	mov	r0, r5
   4e176:	f002 ff34 	bl	50fe2 <k_queue_prepend>
	return 0;
   4e17a:	2000      	movs	r0, #0
   4e17c:	e7c7      	b.n	4e10e <bt_att_send+0x1e>

0004e17e <bt_att_req_send>:
{
   4e17e:	b510      	push	{r4, lr}
   4e180:	460c      	mov	r4, r1
	att = att_get(conn);
   4e182:	f7ff fdd9 	bl	4dd38 <att_get>
	if (!att) {
   4e186:	b160      	cbz	r0, 4e1a2 <bt_att_req_send+0x24>
	parent->next = child;
   4e188:	2300      	movs	r3, #0
   4e18a:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   4e18c:	6883      	ldr	r3, [r0, #8]
   4e18e:	b92b      	cbnz	r3, 4e19c <bt_att_req_send+0x1e>
	list->head = node;
   4e190:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   4e194:	f7ff fe0e 	bl	4ddb4 <att_req_send_process>
	return 0;
   4e198:	2000      	movs	r0, #0
}
   4e19a:	bd10      	pop	{r4, pc}
	parent->next = child;
   4e19c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   4e19e:	6084      	str	r4, [r0, #8]
   4e1a0:	e7f8      	b.n	4e194 <bt_att_req_send+0x16>
		return -ENOTCONN;
   4e1a2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4e1a6:	e7f8      	b.n	4e19a <bt_att_req_send+0x1c>

0004e1a8 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   4e1a8:	b510      	push	{r4, lr}
   4e1aa:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   4e1ac:	f7ff fdc4 	bl	4dd38 <att_get>
	if (!att) {
   4e1b0:	b1a0      	cbz	r0, 4e1dc <bt_att_find_req_by_user_data+0x34>
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   4e1b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   4e1b4:	b113      	cbz	r3, 4e1bc <bt_att_find_req_by_user_data+0x14>
   4e1b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   4e1ba:	b933      	cbnz	r3, 4e1ca <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   4e1bc:	6840      	ldr	r0, [r0, #4]
   4e1be:	b168      	cbz	r0, 4e1dc <bt_att_find_req_by_user_data+0x34>
		if (req->user_data == user_data) {
   4e1c0:	6983      	ldr	r3, [r0, #24]
   4e1c2:	42a3      	cmp	r3, r4
   4e1c4:	d00a      	beq.n	4e1dc <bt_att_find_req_by_user_data+0x34>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   4e1c6:	6800      	ldr	r0, [r0, #0]
	return node->next;
   4e1c8:	e7f9      	b.n	4e1be <bt_att_find_req_by_user_data+0x16>
		if (chan->req->user_data == user_data) {
   4e1ca:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
   4e1ce:	6991      	ldr	r1, [r2, #24]
   4e1d0:	42a1      	cmp	r1, r4
   4e1d2:	d002      	beq.n	4e1da <bt_att_find_req_by_user_data+0x32>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   4e1d4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   4e1d8:	e7ec      	b.n	4e1b4 <bt_att_find_req_by_user_data+0xc>
   4e1da:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   4e1dc:	bd10      	pop	{r4, pc}

0004e1de <gatt_ccc_changed>:
{
   4e1de:	b430      	push	{r4, r5}
   4e1e0:	460a      	mov	r2, r1
   4e1e2:	f101 043c 	add.w	r4, r1, #60	; 0x3c
	uint16_t value = 0x0000;
   4e1e6:	2300      	movs	r3, #0
		if (ccc->cfg[i].value > value) {
   4e1e8:	8915      	ldrh	r5, [r2, #8]
   4e1ea:	320a      	adds	r2, #10
   4e1ec:	42ab      	cmp	r3, r5
   4e1ee:	bf38      	it	cc
   4e1f0:	462b      	movcc	r3, r5
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4e1f2:	4294      	cmp	r4, r2
   4e1f4:	d1f8      	bne.n	4e1e8 <gatt_ccc_changed+0xa>
	if (value != ccc->value) {
   4e1f6:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
   4e1f8:	429a      	cmp	r2, r3
   4e1fa:	d005      	beq.n	4e208 <gatt_ccc_changed+0x2a>
		if (ccc->cfg_changed) {
   4e1fc:	6c0a      	ldr	r2, [r1, #64]	; 0x40
		ccc->value = value;
   4e1fe:	878b      	strh	r3, [r1, #60]	; 0x3c
		if (ccc->cfg_changed) {
   4e200:	b112      	cbz	r2, 4e208 <gatt_ccc_changed+0x2a>
			ccc->cfg_changed(attr, value);
   4e202:	4619      	mov	r1, r3
}
   4e204:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   4e206:	4710      	bx	r2
}
   4e208:	bc30      	pop	{r4, r5}
   4e20a:	4770      	bx	lr

0004e20c <gatt_indicate_rsp>:
{
   4e20c:	b510      	push	{r4, lr}
   4e20e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   4e210:	68a3      	ldr	r3, [r4, #8]
{
   4e212:	460a      	mov	r2, r1
	if (params->func) {
   4e214:	b10b      	cbz	r3, 4e21a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   4e216:	4621      	mov	r1, r4
   4e218:	4798      	blx	r3
	params->_ref--;
   4e21a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   4e21c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   4e21e:	3b01      	subs	r3, #1
   4e220:	b2db      	uxtb	r3, r3
   4e222:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   4e224:	b122      	cbz	r2, 4e230 <gatt_indicate_rsp+0x24>
   4e226:	b91b      	cbnz	r3, 4e230 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   4e228:	4620      	mov	r0, r4
}
   4e22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   4e22e:	4710      	bx	r2
}
   4e230:	bd10      	pop	{r4, pc}

0004e232 <match_uuid>:
	data->attr = attr;
   4e232:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   4e234:	8091      	strh	r1, [r2, #4]
}
   4e236:	2000      	movs	r0, #0
   4e238:	4770      	bx	lr

0004e23a <ccc_set_cb>:
}
   4e23a:	2000      	movs	r0, #0
   4e23c:	4770      	bx	lr

0004e23e <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4e23e:	f3bf 8f5b 	dmb	ish
   4e242:	6800      	ldr	r0, [r0, #0]
   4e244:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4e248:	4108      	asrs	r0, r1
}
   4e24a:	f000 0001 	and.w	r0, r0, #1
   4e24e:	4770      	bx	lr

0004e250 <gen_hash_m>:
{
   4e250:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   4e252:	6806      	ldr	r6, [r0, #0]
   4e254:	7835      	ldrb	r5, [r6, #0]
{
   4e256:	b089      	sub	sp, #36	; 0x24
   4e258:	4607      	mov	r7, r0
   4e25a:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   4e25c:	b10d      	cbz	r5, 4e262 <gen_hash_m+0x12>
		return BT_GATT_ITER_CONTINUE;
   4e25e:	2501      	movs	r5, #1
   4e260:	e014      	b.n	4e28c <gen_hash_m+0x3c>
	switch (u16->val) {
   4e262:	8873      	ldrh	r3, [r6, #2]
   4e264:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   4e268:	d004      	beq.n	4e274 <gen_hash_m+0x24>
   4e26a:	d812      	bhi.n	4e292 <gen_hash_m+0x42>
   4e26c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   4e270:	2b03      	cmp	r3, #3
   4e272:	d8f4      	bhi.n	4e25e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   4e274:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4e278:	2202      	movs	r2, #2
   4e27a:	f10d 010a 	add.w	r1, sp, #10
   4e27e:	4620      	mov	r0, r4
   4e280:	f7fd fece 	bl	4c020 <tc_cmac_update>
   4e284:	b9d0      	cbnz	r0, 4e2bc <gen_hash_m+0x6c>
			state->err = -EINVAL;
   4e286:	f06f 0315 	mvn.w	r3, #21
   4e28a:	65a3      	str	r3, [r4, #88]	; 0x58
}
   4e28c:	4628      	mov	r0, r5
   4e28e:	b009      	add	sp, #36	; 0x24
   4e290:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   4e292:	f642 1205 	movw	r2, #10501	; 0x2905
   4e296:	4293      	cmp	r3, r2
   4e298:	d8e1      	bhi.n	4e25e <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   4e29a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4e29e:	2202      	movs	r2, #2
   4e2a0:	f10d 010a 	add.w	r1, sp, #10
   4e2a4:	4620      	mov	r0, r4
   4e2a6:	f7fd febb 	bl	4c020 <tc_cmac_update>
   4e2aa:	2800      	cmp	r0, #0
   4e2ac:	d0eb      	beq.n	4e286 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   4e2ae:	8873      	ldrh	r3, [r6, #2]
   4e2b0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4e2b4:	2202      	movs	r2, #2
   4e2b6:	f10d 010a 	add.w	r1, sp, #10
   4e2ba:	e016      	b.n	4e2ea <gen_hash_m+0x9a>
		value = sys_cpu_to_le16(u16->val);
   4e2bc:	8873      	ldrh	r3, [r6, #2]
   4e2be:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4e2c2:	2202      	movs	r2, #2
   4e2c4:	f10d 010a 	add.w	r1, sp, #10
   4e2c8:	4620      	mov	r0, r4
   4e2ca:	f7fd fea9 	bl	4c020 <tc_cmac_update>
   4e2ce:	2800      	cmp	r0, #0
   4e2d0:	d0d9      	beq.n	4e286 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   4e2d2:	2000      	movs	r0, #0
   4e2d4:	aa03      	add	r2, sp, #12
   4e2d6:	9000      	str	r0, [sp, #0]
   4e2d8:	687e      	ldr	r6, [r7, #4]
   4e2da:	2313      	movs	r3, #19
   4e2dc:	4639      	mov	r1, r7
   4e2de:	47b0      	blx	r6
		if (len < 0) {
   4e2e0:	1e02      	subs	r2, r0, #0
   4e2e2:	da01      	bge.n	4e2e8 <gen_hash_m+0x98>
			state->err = len;
   4e2e4:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   4e2e6:	e7d1      	b.n	4e28c <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   4e2e8:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   4e2ea:	4620      	mov	r0, r4
   4e2ec:	f7fd fe98 	bl	4c020 <tc_cmac_update>
   4e2f0:	2800      	cmp	r0, #0
   4e2f2:	d1b4      	bne.n	4e25e <gen_hash_m+0xe>
   4e2f4:	e7c7      	b.n	4e286 <gen_hash_m+0x36>

0004e2f6 <atomic_or>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4e2f6:	f3bf 8f5b 	dmb	ish
   4e2fa:	e850 3f00 	ldrex	r3, [r0]
   4e2fe:	ea43 0201 	orr.w	r2, r3, r1
   4e302:	e840 2c00 	strex	ip, r2, [r0]
   4e306:	f1bc 0f00 	cmp.w	ip, #0
   4e30a:	d1f6      	bne.n	4e2fa <atomic_or+0x4>
   4e30c:	f3bf 8f5b 	dmb	ish
}
   4e310:	4618      	mov	r0, r3
   4e312:	4770      	bx	lr

0004e314 <bt_addr_le_cmp>:
   4e314:	2207      	movs	r2, #7
   4e316:	f7fd bfd9 	b.w	4c2cc <memcmp>

0004e31a <find_ccc_cfg>:
{
   4e31a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4e31c:	4605      	mov	r5, r0
   4e31e:	1c4c      	adds	r4, r1, #1
   4e320:	f101 063d 	add.w	r6, r1, #61	; 0x3d
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   4e324:	1e67      	subs	r7, r4, #1
		if (conn) {
   4e326:	b16d      	cbz	r5, 4e344 <find_ccc_cfg+0x2a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   4e328:	4622      	mov	r2, r4
   4e32a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   4e32e:	4628      	mov	r0, r5
   4e330:	f7ff f827 	bl	4d382 <bt_conn_is_peer_addr_le>
   4e334:	b918      	cbnz	r0, 4e33e <find_ccc_cfg+0x24>
   4e336:	340a      	adds	r4, #10
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4e338:	42b4      	cmp	r4, r6
   4e33a:	d1f3      	bne.n	4e324 <find_ccc_cfg+0xa>
	return NULL;
   4e33c:	2700      	movs	r7, #0
}
   4e33e:	4638      	mov	r0, r7
   4e340:	b003      	add	sp, #12
   4e342:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   4e344:	4669      	mov	r1, sp
   4e346:	4620      	mov	r0, r4
   4e348:	9500      	str	r5, [sp, #0]
   4e34a:	f8cd 5003 	str.w	r5, [sp, #3]
   4e34e:	f7ff ffe1 	bl	4e314 <bt_addr_le_cmp>
   4e352:	2800      	cmp	r0, #0
   4e354:	d1ef      	bne.n	4e336 <find_ccc_cfg+0x1c>
   4e356:	e7f2      	b.n	4e33e <find_ccc_cfg+0x24>

0004e358 <ccc_find_cfg>:
{
   4e358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4e35c:	4604      	mov	r4, r0
   4e35e:	460f      	mov	r7, r1
   4e360:	4690      	mov	r8, r2
   4e362:	f100 063c 	add.w	r6, r0, #60	; 0x3c
   4e366:	4605      	mov	r5, r0
		if (id == ccc->cfg[i].id &&
   4e368:	782b      	ldrb	r3, [r5, #0]
   4e36a:	4543      	cmp	r3, r8
   4e36c:	d10a      	bne.n	4e384 <ccc_find_cfg+0x2c>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   4e36e:	4639      	mov	r1, r7
   4e370:	1c68      	adds	r0, r5, #1
   4e372:	eba5 0904 	sub.w	r9, r5, r4
   4e376:	f7ff ffcd 	bl	4e314 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   4e37a:	b918      	cbnz	r0, 4e384 <ccc_find_cfg+0x2c>
			return &ccc->cfg[i];
   4e37c:	eb04 0009 	add.w	r0, r4, r9
}
   4e380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4e384:	350a      	adds	r5, #10
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   4e386:	42b5      	cmp	r5, r6
   4e388:	d1ee      	bne.n	4e368 <ccc_find_cfg+0x10>
	return NULL;
   4e38a:	2000      	movs	r0, #0
   4e38c:	e7f8      	b.n	4e380 <ccc_find_cfg+0x28>

0004e38e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   4e38e:	2207      	movs	r2, #7
   4e390:	f7fd bfac 	b.w	4c2ec <memcpy>

0004e394 <clear_ccc_cfg>:
{
   4e394:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4e396:	2400      	movs	r4, #0
{
   4e398:	4605      	mov	r5, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4e39a:	4669      	mov	r1, sp
   4e39c:	3001      	adds	r0, #1
   4e39e:	9400      	str	r4, [sp, #0]
   4e3a0:	f8cd 4003 	str.w	r4, [sp, #3]
   4e3a4:	f7ff fff3 	bl	4e38e <bt_addr_le_copy>
	cfg->id = 0U;
   4e3a8:	702c      	strb	r4, [r5, #0]
	cfg->value = 0U;
   4e3aa:	812c      	strh	r4, [r5, #8]
}
   4e3ac:	b003      	add	sp, #12
   4e3ae:	bd30      	pop	{r4, r5, pc}

0004e3b0 <gatt_sub_free>:
{
   4e3b0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   4e3b2:	2300      	movs	r3, #0
   4e3b4:	4669      	mov	r1, sp
   4e3b6:	3001      	adds	r0, #1
   4e3b8:	9300      	str	r3, [sp, #0]
   4e3ba:	f8cd 3003 	str.w	r3, [sp, #3]
   4e3be:	f7ff ffe6 	bl	4e38e <bt_addr_le_copy>
}
   4e3c2:	b003      	add	sp, #12
   4e3c4:	f85d fb04 	ldr.w	pc, [sp], #4

0004e3c8 <gatt_sub_remove>:
{
   4e3c8:	b538      	push	{r3, r4, r5, lr}
   4e3ca:	460c      	mov	r4, r1
	if (params) {
   4e3cc:	4619      	mov	r1, r3
   4e3ce:	b16b      	cbz	r3, 4e3ec <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   4e3d0:	f103 051c 	add.w	r5, r3, #28
Z_GENLIST_REMOVE(slist, snode)
   4e3d4:	69db      	ldr	r3, [r3, #28]
   4e3d6:	b982      	cbnz	r2, 4e3fa <gatt_sub_remove+0x32>
   4e3d8:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   4e3da:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   4e3dc:	4295      	cmp	r5, r2
   4e3de:	d100      	bne.n	4e3e2 <gatt_sub_remove+0x1a>
	list->tail = node;
   4e3e0:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   4e3e2:	2300      	movs	r3, #0
   4e3e4:	61cb      	str	r3, [r1, #28]
		params->notify(conn, params, NULL, 0);
   4e3e6:	680d      	ldr	r5, [r1, #0]
   4e3e8:	461a      	mov	r2, r3
   4e3ea:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   4e3ec:	68a3      	ldr	r3, [r4, #8]
   4e3ee:	b953      	cbnz	r3, 4e406 <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   4e3f0:	4620      	mov	r0, r4
}
   4e3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   4e3f6:	f7ff bfdb 	b.w	4e3b0 <gatt_sub_free>
   4e3fa:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   4e3fc:	68e3      	ldr	r3, [r4, #12]
   4e3fe:	429d      	cmp	r5, r3
	list->tail = node;
   4e400:	bf08      	it	eq
   4e402:	60e2      	streq	r2, [r4, #12]
   4e404:	e7ed      	b.n	4e3e2 <gatt_sub_remove+0x1a>
}
   4e406:	bd38      	pop	{r3, r4, r5, pc}

0004e408 <sc_save>:
{
   4e408:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   4e40c:	4680      	mov	r8, r0
   4e40e:	460f      	mov	r7, r1
   4e410:	4616      	mov	r6, r2
   4e412:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   4e414:	f7e2 ffda 	bl	313cc <find_sc_cfg>
	if (!cfg) {
   4e418:	4604      	mov	r4, r0
   4e41a:	b960      	cbnz	r0, 4e436 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   4e41c:	4669      	mov	r1, sp
   4e41e:	9000      	str	r0, [sp, #0]
   4e420:	f8cd 0003 	str.w	r0, [sp, #3]
   4e424:	f7e2 ffd2 	bl	313cc <find_sc_cfg>
		if (!cfg) {
   4e428:	4604      	mov	r4, r0
   4e42a:	b1c0      	cbz	r0, 4e45e <sc_save+0x56>
		cfg->id = id;
   4e42c:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   4e430:	4639      	mov	r1, r7
   4e432:	f7ff ffac 	bl	4e38e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   4e436:	8922      	ldrh	r2, [r4, #8]
   4e438:	8963      	ldrh	r3, [r4, #10]
   4e43a:	b962      	cbnz	r2, 4e456 <sc_save+0x4e>
   4e43c:	b96b      	cbnz	r3, 4e45a <sc_save+0x52>
		cfg->data.start = start;
   4e43e:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   4e440:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   4e442:	4621      	mov	r1, r4
   4e444:	f811 0b01 	ldrb.w	r0, [r1], #1
   4e448:	f7fe fb7e 	bl	4cb48 <bt_addr_le_is_bonded>
   4e44c:	b138      	cbz	r0, 4e45e <sc_save+0x56>
		sc_store(cfg);
   4e44e:	4620      	mov	r0, r4
   4e450:	f7e3 f81c 	bl	3148c <sc_store>
   4e454:	e003      	b.n	4e45e <sc_save+0x56>
	if (new_start >= *start && new_end <= *end) {
   4e456:	4296      	cmp	r6, r2
   4e458:	d304      	bcc.n	4e464 <sc_save+0x5c>
   4e45a:	429d      	cmp	r5, r3
   4e45c:	d8f0      	bhi.n	4e440 <sc_save+0x38>
}
   4e45e:	b002      	add	sp, #8
   4e460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   4e464:	429d      	cmp	r5, r3
		*start = new_start;
   4e466:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   4e468:	d9eb      	bls.n	4e442 <sc_save+0x3a>
   4e46a:	e7e9      	b.n	4e440 <sc_save+0x38>

0004e46c <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4e46c:	f3bf 8f5b 	dmb	ish
   4e470:	e850 3f00 	ldrex	r3, [r0]
   4e474:	ea03 0201 	and.w	r2, r3, r1
   4e478:	e840 2c00 	strex	ip, r2, [r0]
   4e47c:	f1bc 0f00 	cmp.w	ip, #0
   4e480:	d1f6      	bne.n	4e470 <atomic_and+0x4>
   4e482:	f3bf 8f5b 	dmb	ish
}
   4e486:	4618      	mov	r0, r3
   4e488:	4770      	bx	lr

0004e48a <read_included_uuid_encode>:
{
   4e48a:	b510      	push	{r4, lr}
   4e48c:	2102      	movs	r1, #2
   4e48e:	3008      	adds	r0, #8
   4e490:	4614      	mov	r4, r2
   4e492:	f001 fe80 	bl	50196 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   4e496:	8963      	ldrh	r3, [r4, #10]
   4e498:	8003      	strh	r3, [r0, #0]
}
   4e49a:	2000      	movs	r0, #0
   4e49c:	bd10      	pop	{r4, pc}

0004e49e <gatt_find_info_encode>:
{
   4e49e:	b510      	push	{r4, lr}
   4e4a0:	2104      	movs	r1, #4
   4e4a2:	3008      	adds	r0, #8
   4e4a4:	4614      	mov	r4, r2
   4e4a6:	f001 fe76 	bl	50196 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4e4aa:	8923      	ldrh	r3, [r4, #8]
   4e4ac:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4e4ae:	89e3      	ldrh	r3, [r4, #14]
   4e4b0:	8043      	strh	r3, [r0, #2]
}
   4e4b2:	2000      	movs	r0, #0
   4e4b4:	bd10      	pop	{r4, pc}

0004e4b6 <gatt_read_group_encode>:
{
   4e4b6:	b538      	push	{r3, r4, r5, lr}
   4e4b8:	f100 0408 	add.w	r4, r0, #8
   4e4bc:	2104      	movs	r1, #4
   4e4be:	4620      	mov	r0, r4
   4e4c0:	4615      	mov	r5, r2
   4e4c2:	f001 fe68 	bl	50196 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4e4c6:	892b      	ldrh	r3, [r5, #8]
   4e4c8:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4e4ca:	89eb      	ldrh	r3, [r5, #14]
   4e4cc:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e4ce:	7c2b      	ldrb	r3, [r5, #16]
   4e4d0:	b933      	cbnz	r3, 4e4e0 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   4e4d2:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   4e4d6:	4620      	mov	r0, r4
   4e4d8:	f001 fe74 	bl	501c4 <net_buf_simple_add_le16>
}
   4e4dc:	2000      	movs	r0, #0
   4e4de:	bd38      	pop	{r3, r4, r5, pc}
   4e4e0:	f642 0101 	movw	r1, #10241	; 0x2801
   4e4e4:	e7f7      	b.n	4e4d6 <gatt_read_group_encode+0x20>

0004e4e6 <gatt_read_type_encode>:
{
   4e4e6:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4e4e8:	f100 0408 	add.w	r4, r0, #8
   4e4ec:	2104      	movs	r1, #4
   4e4ee:	4620      	mov	r0, r4
   4e4f0:	4615      	mov	r5, r2
   4e4f2:	f001 fe50 	bl	50196 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4e4f6:	892b      	ldrh	r3, [r5, #8]
   4e4f8:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4e4fa:	89eb      	ldrh	r3, [r5, #14]
   4e4fc:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   4e4fe:	7c2b      	ldrb	r3, [r5, #16]
   4e500:	2b02      	cmp	r3, #2
   4e502:	d004      	beq.n	4e50e <gatt_read_type_encode+0x28>
   4e504:	2b03      	cmp	r3, #3
   4e506:	d009      	beq.n	4e51c <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   4e508:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   4e50a:	8859      	ldrh	r1, [r3, #2]
   4e50c:	e001      	b.n	4e512 <gatt_read_type_encode+0x2c>
   4e50e:	f642 0102 	movw	r1, #10242	; 0x2802
   4e512:	4620      	mov	r0, r4
   4e514:	f001 fe56 	bl	501c4 <net_buf_simple_add_le16>
}
   4e518:	2000      	movs	r0, #0
   4e51a:	bd38      	pop	{r3, r4, r5, pc}
   4e51c:	f642 0103 	movw	r1, #10243	; 0x2803
   4e520:	e7f7      	b.n	4e512 <gatt_read_type_encode+0x2c>

0004e522 <sc_set>:
{
   4e522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4e526:	460e      	mov	r6, r1
   4e528:	b086      	sub	sp, #24
   4e52a:	4617      	mov	r7, r2
   4e52c:	4698      	mov	r8, r3
	if (!name) {
   4e52e:	4605      	mov	r5, r0
   4e530:	b928      	cbnz	r0, 4e53e <sc_set+0x1c>
		return -EINVAL;
   4e532:	f06f 0415 	mvn.w	r4, #21
}
   4e536:	4620      	mov	r0, r4
   4e538:	b006      	add	sp, #24
   4e53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   4e53e:	a902      	add	r1, sp, #8
   4e540:	f7fd ff9d 	bl	4c47e <bt_settings_decode_key>
	if (err) {
   4e544:	4604      	mov	r4, r0
   4e546:	2800      	cmp	r0, #0
   4e548:	d1f3      	bne.n	4e532 <sc_set+0x10>
	settings_name_next(name, &next);
   4e54a:	a901      	add	r1, sp, #4
   4e54c:	4628      	mov	r0, r5
   4e54e:	f7fc fbef 	bl	4ad30 <settings_name_next>
	if (!next) {
   4e552:	9801      	ldr	r0, [sp, #4]
   4e554:	b9e8      	cbnz	r0, 4e592 <sc_set+0x70>
	cfg = find_sc_cfg(id, &addr);
   4e556:	a902      	add	r1, sp, #8
   4e558:	2000      	movs	r0, #0
   4e55a:	f7e2 ff37 	bl	313cc <find_sc_cfg>
	if (!cfg && len_rd) {
   4e55e:	4605      	mov	r5, r0
   4e560:	bb08      	cbnz	r0, 4e5a6 <sc_set+0x84>
   4e562:	2e00      	cmp	r6, #0
   4e564:	d0e7      	beq.n	4e536 <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   4e566:	a904      	add	r1, sp, #16
   4e568:	9004      	str	r0, [sp, #16]
   4e56a:	4604      	mov	r4, r0
   4e56c:	f8cd 0013 	str.w	r0, [sp, #19]
   4e570:	f7e2 ff2c 	bl	313cc <find_sc_cfg>
		if (!cfg) {
   4e574:	4605      	mov	r5, r0
   4e576:	b198      	cbz	r0, 4e5a0 <sc_set+0x7e>
		cfg->id = id;
   4e578:	f800 4b01 	strb.w	r4, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   4e57c:	a902      	add	r1, sp, #8
   4e57e:	f7ff ff06 	bl	4e38e <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   4e582:	2204      	movs	r2, #4
   4e584:	f105 0108 	add.w	r1, r5, #8
   4e588:	4640      	mov	r0, r8
   4e58a:	47b8      	blx	r7
		if (len < 0) {
   4e58c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   4e590:	e7d1      	b.n	4e536 <sc_set+0x14>
		unsigned long next_id = strtoul(next, NULL, 10);
   4e592:	220a      	movs	r2, #10
   4e594:	4621      	mov	r1, r4
   4e596:	f7fd fdf4 	bl	4c182 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4e59a:	2800      	cmp	r0, #0
   4e59c:	d0db      	beq.n	4e556 <sc_set+0x34>
   4e59e:	e7c8      	b.n	4e532 <sc_set+0x10>
			return -ENOMEM;
   4e5a0:	f06f 040b 	mvn.w	r4, #11
   4e5a4:	e7c7      	b.n	4e536 <sc_set+0x14>
	if (len_rd) {
   4e5a6:	2e00      	cmp	r6, #0
   4e5a8:	d1eb      	bne.n	4e582 <sc_set+0x60>
		memset(cfg, 0, sizeof(*cfg));
   4e5aa:	220c      	movs	r2, #12
   4e5ac:	4631      	mov	r1, r6
   4e5ae:	f7fd fea8 	bl	4c302 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   4e5b2:	e7c0      	b.n	4e536 <sc_set+0x14>

0004e5b4 <gatt_find_type_encode>:
{
   4e5b4:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4e5b6:	f100 0508 	add.w	r5, r0, #8
   4e5ba:	2106      	movs	r1, #6
   4e5bc:	4628      	mov	r0, r5
   4e5be:	4614      	mov	r4, r2
   4e5c0:	f001 fde9 	bl	50196 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   4e5c4:	8923      	ldrh	r3, [r4, #8]
   4e5c6:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   4e5c8:	89e3      	ldrh	r3, [r4, #14]
   4e5ca:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e5cc:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   4e5ce:	6821      	ldr	r1, [r4, #0]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4e5d0:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
   4e5d2:	f642 0301 	movw	r3, #10241	; 0x2801
   4e5d6:	bf08      	it	eq
   4e5d8:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   4e5dc:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   4e5de:	780b      	ldrb	r3, [r1, #0]
   4e5e0:	b11b      	cbz	r3, 4e5ea <gatt_find_type_encode+0x36>
   4e5e2:	2b02      	cmp	r3, #2
   4e5e4:	d006      	beq.n	4e5f4 <gatt_find_type_encode+0x40>
}
   4e5e6:	2000      	movs	r0, #0
   4e5e8:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   4e5ea:	8849      	ldrh	r1, [r1, #2]
   4e5ec:	4628      	mov	r0, r5
   4e5ee:	f001 fde9 	bl	501c4 <net_buf_simple_add_le16>
   4e5f2:	e7f8      	b.n	4e5e6 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   4e5f4:	2210      	movs	r2, #16
   4e5f6:	3101      	adds	r1, #1
   4e5f8:	4628      	mov	r0, r5
   4e5fa:	f001 fdd2 	bl	501a2 <net_buf_simple_add_mem>
   4e5fe:	e7f2      	b.n	4e5e6 <gatt_find_type_encode+0x32>

0004e600 <clear_cf_cfg>:
{
   4e600:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4e602:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   4e604:	2500      	movs	r5, #0
   4e606:	4669      	mov	r1, sp
   4e608:	3001      	adds	r0, #1
   4e60a:	9500      	str	r5, [sp, #0]
   4e60c:	f8cd 5003 	str.w	r5, [sp, #3]
   4e610:	f7ff febd 	bl	4e38e <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   4e614:	f104 0008 	add.w	r0, r4, #8
   4e618:	2201      	movs	r2, #1
   4e61a:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4e61c:	340c      	adds	r4, #12
   4e61e:	f7fd fe70 	bl	4c302 <memset>
   4e622:	f3bf 8f5b 	dmb	ish
   4e626:	e854 3f00 	ldrex	r3, [r4]
   4e62a:	e844 5200 	strex	r2, r5, [r4]
   4e62e:	2a00      	cmp	r2, #0
   4e630:	d1f9      	bne.n	4e626 <clear_cf_cfg+0x26>
   4e632:	f3bf 8f5b 	dmb	ish
}
   4e636:	b003      	add	sp, #12
   4e638:	bd30      	pop	{r4, r5, pc}

0004e63a <cf_set>:
{
   4e63a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   4e63e:	4688      	mov	r8, r1
   4e640:	4616      	mov	r6, r2
   4e642:	461f      	mov	r7, r3
	if (!name) {
   4e644:	4605      	mov	r5, r0
   4e646:	b928      	cbnz	r0, 4e654 <cf_set+0x1a>
		return -EINVAL;
   4e648:	f06f 0415 	mvn.w	r4, #21
}
   4e64c:	4620      	mov	r0, r4
   4e64e:	b004      	add	sp, #16
   4e650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   4e654:	a902      	add	r1, sp, #8
   4e656:	f7fd ff12 	bl	4c47e <bt_settings_decode_key>
	if (err) {
   4e65a:	4604      	mov	r4, r0
   4e65c:	2800      	cmp	r0, #0
   4e65e:	d1f3      	bne.n	4e648 <cf_set+0xe>
	settings_name_next(name, &next);
   4e660:	a901      	add	r1, sp, #4
   4e662:	4628      	mov	r0, r5
   4e664:	f7fc fb64 	bl	4ad30 <settings_name_next>
	if (!next) {
   4e668:	9801      	ldr	r0, [sp, #4]
   4e66a:	b9d0      	cbnz	r0, 4e6a2 <cf_set+0x68>
	cfg = find_cf_cfg_by_addr(id, &addr);
   4e66c:	a902      	add	r1, sp, #8
   4e66e:	2000      	movs	r0, #0
   4e670:	f7e2 feee 	bl	31450 <find_cf_cfg_by_addr>
	if (!cfg) {
   4e674:	4605      	mov	r5, r0
   4e676:	b948      	cbnz	r0, 4e68c <cf_set+0x52>
		cfg = find_cf_cfg(NULL);
   4e678:	f7e2 fe86 	bl	31388 <find_cf_cfg>
		if (!cfg) {
   4e67c:	4605      	mov	r5, r0
   4e67e:	b1d8      	cbz	r0, 4e6b8 <cf_set+0x7e>
		cfg->id = id;
   4e680:	2300      	movs	r3, #0
   4e682:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   4e686:	a902      	add	r1, sp, #8
   4e688:	f7ff fe81 	bl	4e38e <bt_addr_le_copy>
	if (len_rd) {
   4e68c:	f1b8 0f00 	cmp.w	r8, #0
   4e690:	d00e      	beq.n	4e6b0 <cf_set+0x76>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   4e692:	2201      	movs	r2, #1
   4e694:	f105 0108 	add.w	r1, r5, #8
   4e698:	4638      	mov	r0, r7
   4e69a:	47b0      	blx	r6
		if (len < 0) {
   4e69c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   4e6a0:	e7d4      	b.n	4e64c <cf_set+0x12>
		unsigned long next_id = strtoul(next, NULL, 10);
   4e6a2:	220a      	movs	r2, #10
   4e6a4:	4621      	mov	r1, r4
   4e6a6:	f7fd fd6c 	bl	4c182 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   4e6aa:	2800      	cmp	r0, #0
   4e6ac:	d0de      	beq.n	4e66c <cf_set+0x32>
   4e6ae:	e7cb      	b.n	4e648 <cf_set+0xe>
		clear_cf_cfg(cfg);
   4e6b0:	4628      	mov	r0, r5
   4e6b2:	f7ff ffa5 	bl	4e600 <clear_cf_cfg>
   4e6b6:	e7c9      	b.n	4e64c <cf_set+0x12>
			return -ENOMEM;
   4e6b8:	f06f 040b 	mvn.w	r4, #11
   4e6bc:	e7c6      	b.n	4e64c <cf_set+0x12>

0004e6be <gatt_write_ccc_buf>:
{
   4e6be:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   4e6c0:	f100 0508 	add.w	r5, r0, #8
   4e6c4:	2102      	movs	r1, #2
   4e6c6:	4628      	mov	r0, r5
   4e6c8:	4614      	mov	r4, r2
   4e6ca:	f001 fd64 	bl	50196 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   4e6ce:	8963      	ldrh	r3, [r4, #10]
   4e6d0:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   4e6d2:	8aa1      	ldrh	r1, [r4, #20]
   4e6d4:	4628      	mov	r0, r5
   4e6d6:	f001 fd75 	bl	501c4 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4e6da:	2104      	movs	r1, #4
   4e6dc:	f104 0018 	add.w	r0, r4, #24
   4e6e0:	f7ff fe09 	bl	4e2f6 <atomic_or>
}
   4e6e4:	2000      	movs	r0, #0
   4e6e6:	bd38      	pop	{r3, r4, r5, pc}

0004e6e8 <cf_write>:
{
   4e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4e6ec:	4698      	mov	r8, r3
   4e6ee:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   4e6f2:	2b01      	cmp	r3, #1
{
   4e6f4:	4606      	mov	r6, r0
   4e6f6:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   4e6f8:	d830      	bhi.n	4e75c <cf_write+0x74>
	if (offset + len > sizeof(cfg->data)) {
   4e6fa:	4443      	add	r3, r8
   4e6fc:	2b01      	cmp	r3, #1
   4e6fe:	4645      	mov	r5, r8
   4e700:	dc2f      	bgt.n	4e762 <cf_write+0x7a>
	cfg = find_cf_cfg(conn);
   4e702:	f7e2 fe41 	bl	31388 <find_cf_cfg>
	if (!cfg) {
   4e706:	4604      	mov	r4, r0
   4e708:	b918      	cbnz	r0, 4e712 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   4e70a:	f7e2 fe3d 	bl	31388 <find_cf_cfg>
	if (!cfg) {
   4e70e:	4604      	mov	r4, r0
   4e710:	b350      	cbz	r0, 4e768 <cf_write+0x80>
{
   4e712:	2300      	movs	r3, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   4e714:	f1b8 0f00 	cmp.w	r8, #0
   4e718:	d10e      	bne.n	4e738 <cf_write+0x50>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   4e71a:	f106 0188 	add.w	r1, r6, #136	; 0x88
   4e71e:	1c60      	adds	r0, r4, #1
   4e720:	f7ff fe35 	bl	4e38e <bt_addr_le_copy>
	cfg->id = conn->id;
   4e724:	4620      	mov	r0, r4
   4e726:	7a33      	ldrb	r3, [r6, #8]
   4e728:	f800 3b0c 	strb.w	r3, [r0], #12
   4e72c:	2101      	movs	r1, #1
   4e72e:	f7ff fde2 	bl	4e2f6 <atomic_or>
}
   4e732:	4628      	mov	r0, r5
   4e734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4e738:	7a22      	ldrb	r2, [r4, #8]
   4e73a:	fa22 f103 	lsr.w	r1, r2, r3
   4e73e:	07c8      	lsls	r0, r1, #31
   4e740:	d503      	bpl.n	4e74a <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   4e742:	7839      	ldrb	r1, [r7, #0]
   4e744:	40d9      	lsrs	r1, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   4e746:	07c9      	lsls	r1, r1, #31
   4e748:	d511      	bpl.n	4e76e <cf_write+0x86>
   4e74a:	3301      	adds	r3, #1
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   4e74c:	2b03      	cmp	r3, #3
   4e74e:	d1e1      	bne.n	4e714 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   4e750:	783b      	ldrb	r3, [r7, #0]
   4e752:	f003 0307 	and.w	r3, r3, #7
   4e756:	431a      	orrs	r2, r3
   4e758:	7222      	strb	r2, [r4, #8]
		BT_DBG("byte %u: data 0x%02x value 0x%02x", i, cfg->data[i],
   4e75a:	e7de      	b.n	4e71a <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e75c:	f06f 0506 	mvn.w	r5, #6
   4e760:	e7e7      	b.n	4e732 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   4e762:	f06f 050c 	mvn.w	r5, #12
   4e766:	e7e4      	b.n	4e732 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   4e768:	f06f 0510 	mvn.w	r5, #16
   4e76c:	e7e1      	b.n	4e732 <cf_write+0x4a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   4e76e:	f06f 0512 	mvn.w	r5, #18
   4e772:	e7de      	b.n	4e732 <cf_write+0x4a>

0004e774 <gatt_write_ccc_rsp>:
{
   4e774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4e778:	9c06      	ldr	r4, [sp, #24]
   4e77a:	460e      	mov	r6, r1
   4e77c:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4e77e:	f06f 0104 	mvn.w	r1, #4
   4e782:	f104 0018 	add.w	r0, r4, #24
   4e786:	f7ff fe71 	bl	4e46c <atomic_and>
	if (err) {
   4e78a:	b1e6      	cbz	r6, 4e7c6 <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   4e78c:	4628      	mov	r0, r5
   4e78e:	f7e2 fe3d 	bl	3140c <gatt_sub_find>
		if (!sub) {
   4e792:	4601      	mov	r1, r0
   4e794:	b308      	cbz	r0, 4e7da <gatt_write_ccc_rsp+0x66>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   4e796:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   4e798:	b143      	cbz	r3, 4e7ac <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   4e79a:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   4e79c:	f104 001c 	add.w	r0, r4, #28
   4e7a0:	4283      	cmp	r3, r0
   4e7a2:	d10b      	bne.n	4e7bc <gatt_write_ccc_rsp+0x48>
				gatt_sub_remove(conn, sub, tmp, params);
   4e7a4:	4623      	mov	r3, r4
   4e7a6:	4628      	mov	r0, r5
   4e7a8:	f7ff fe0e 	bl	4e3c8 <gatt_sub_remove>
	if (params->write) {
   4e7ac:	6863      	ldr	r3, [r4, #4]
   4e7ae:	b1a3      	cbz	r3, 4e7da <gatt_write_ccc_rsp+0x66>
		params->write(conn, err, NULL);
   4e7b0:	4631      	mov	r1, r6
   4e7b2:	4628      	mov	r0, r5
   4e7b4:	2200      	movs	r2, #0
}
   4e7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   4e7ba:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   4e7bc:	2a00      	cmp	r2, #0
   4e7be:	d0f5      	beq.n	4e7ac <gatt_write_ccc_rsp+0x38>
   4e7c0:	4613      	mov	r3, r2
   4e7c2:	6812      	ldr	r2, [r2, #0]
   4e7c4:	e7ec      	b.n	4e7a0 <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   4e7c6:	8aa3      	ldrh	r3, [r4, #20]
   4e7c8:	2b00      	cmp	r3, #0
   4e7ca:	d1ef      	bne.n	4e7ac <gatt_write_ccc_rsp+0x38>
		params->notify(conn, params, NULL, 0);
   4e7cc:	6827      	ldr	r7, [r4, #0]
   4e7ce:	4633      	mov	r3, r6
   4e7d0:	4632      	mov	r2, r6
   4e7d2:	4621      	mov	r1, r4
   4e7d4:	4628      	mov	r0, r5
   4e7d6:	47b8      	blx	r7
   4e7d8:	e7e8      	b.n	4e7ac <gatt_write_ccc_rsp+0x38>
}
   4e7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004e7de <sc_restore_rsp>:
{
   4e7de:	b538      	push	{r3, r4, r5, lr}
   4e7e0:	4604      	mov	r4, r0
   4e7e2:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   4e7e4:	f7e2 fdd0 	bl	31388 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   4e7e8:	b130      	cbz	r0, 4e7f8 <sc_restore_rsp+0x1a>
   4e7ea:	7a03      	ldrb	r3, [r0, #8]
   4e7ec:	07db      	lsls	r3, r3, #31
   4e7ee:	d503      	bpl.n	4e7f8 <sc_restore_rsp+0x1a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4e7f0:	2101      	movs	r1, #1
   4e7f2:	300c      	adds	r0, #12
   4e7f4:	f7ff fd7f 	bl	4e2f6 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   4e7f8:	b985      	cbnz	r5, 4e81c <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   4e7fa:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4e7fe:	7a20      	ldrb	r0, [r4, #8]
   4e800:	f7e2 fde4 	bl	313cc <find_sc_cfg>
		if (sc_cfg) {
   4e804:	4604      	mov	r4, r0
   4e806:	b148      	cbz	r0, 4e81c <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   4e808:	4629      	mov	r1, r5
   4e80a:	2204      	movs	r2, #4
   4e80c:	3008      	adds	r0, #8
   4e80e:	f7fd fd78 	bl	4c302 <memset>
		sc_store(cfg);
   4e812:	4620      	mov	r0, r4
}
   4e814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   4e818:	f7e2 be38 	b.w	3148c <sc_store>
}
   4e81c:	bd38      	pop	{r3, r4, r5, pc}

0004e81e <read_appearance>:
{
   4e81e:	b513      	push	{r0, r1, r4, lr}
   4e820:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   4e824:	4610      	mov	r0, r2
	if (offset > value_len) {
   4e826:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   4e828:	f240 32c1 	movw	r2, #961	; 0x3c1
   4e82c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   4e830:	d80d      	bhi.n	4e84e <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   4e832:	f1c1 0402 	rsb	r4, r1, #2
   4e836:	429c      	cmp	r4, r3
   4e838:	bfa8      	it	ge
   4e83a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4e83c:	f10d 0306 	add.w	r3, sp, #6
   4e840:	4622      	mov	r2, r4
   4e842:	4419      	add	r1, r3
   4e844:	f7fd fd52 	bl	4c2ec <memcpy>
}
   4e848:	4620      	mov	r0, r4
   4e84a:	b002      	add	sp, #8
   4e84c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e84e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   4e852:	e7f9      	b.n	4e848 <read_appearance+0x2a>

0004e854 <read_name>:
{
   4e854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4e858:	4698      	mov	r8, r3
   4e85a:	4616      	mov	r6, r2
   4e85c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	const char *name = bt_get_name();
   4e860:	f7df fe3e 	bl	2e4e0 <bt_get_name>
   4e864:	4607      	mov	r7, r0
				 strlen(name));
   4e866:	f7fd fd0f 	bl	4c288 <strlen>
	if (offset > value_len) {
   4e86a:	b283      	uxth	r3, r0
   4e86c:	42ab      	cmp	r3, r5
   4e86e:	d30c      	bcc.n	4e88a <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   4e870:	1b5c      	subs	r4, r3, r5
   4e872:	4544      	cmp	r4, r8
   4e874:	bfa8      	it	ge
   4e876:	4644      	movge	r4, r8
   4e878:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   4e87a:	4622      	mov	r2, r4
   4e87c:	1979      	adds	r1, r7, r5
   4e87e:	4630      	mov	r0, r6
   4e880:	f7fd fd34 	bl	4c2ec <memcpy>
}
   4e884:	4620      	mov	r0, r4
   4e886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e88a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   4e88e:	e7f9      	b.n	4e884 <read_name+0x30>

0004e890 <cf_read>:
{
   4e890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4e892:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   4e894:	2300      	movs	r3, #0
{
   4e896:	4616      	mov	r6, r2
   4e898:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	uint8_t data[1] = {};
   4e89c:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   4e8a0:	f7e2 fd72 	bl	31388 <find_cf_cfg>
	if (cfg) {
   4e8a4:	b128      	cbz	r0, 4e8b2 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   4e8a6:	f100 0108 	add.w	r1, r0, #8
   4e8aa:	2201      	movs	r2, #1
   4e8ac:	a801      	add	r0, sp, #4
   4e8ae:	f7fd fd1d 	bl	4c2ec <memcpy>
	if (offset > value_len) {
   4e8b2:	2d01      	cmp	r5, #1
   4e8b4:	d80d      	bhi.n	4e8d2 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   4e8b6:	f1c5 0401 	rsb	r4, r5, #1
   4e8ba:	42bc      	cmp	r4, r7
   4e8bc:	bfa8      	it	ge
   4e8be:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   4e8c0:	ab01      	add	r3, sp, #4
   4e8c2:	4622      	mov	r2, r4
   4e8c4:	1959      	adds	r1, r3, r5
   4e8c6:	4630      	mov	r0, r6
   4e8c8:	f7fd fd10 	bl	4c2ec <memcpy>
}
   4e8cc:	4620      	mov	r0, r4
   4e8ce:	b003      	add	sp, #12
   4e8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e8d2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   4e8d6:	e7f9      	b.n	4e8cc <cf_read+0x3c>

0004e8d8 <bt_gatt_attr_read_ccc>:
{
   4e8d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   4e8da:	68c9      	ldr	r1, [r1, #12]
{
   4e8dc:	f8bd 5020 	ldrh.w	r5, [sp, #32]
   4e8e0:	4616      	mov	r6, r2
   4e8e2:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   4e8e4:	f7ff fd19 	bl	4e31a <find_ccc_cfg>
	if (cfg) {
   4e8e8:	b100      	cbz	r0, 4e8ec <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   4e8ea:	8900      	ldrh	r0, [r0, #8]
   4e8ec:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   4e8f0:	2d02      	cmp	r5, #2
   4e8f2:	d80e      	bhi.n	4e912 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   4e8f4:	f1c5 0402 	rsb	r4, r5, #2
   4e8f8:	42bc      	cmp	r4, r7
   4e8fa:	bfa8      	it	ge
   4e8fc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   4e8fe:	f10d 0306 	add.w	r3, sp, #6
   4e902:	4622      	mov	r2, r4
   4e904:	1959      	adds	r1, r3, r5
   4e906:	4630      	mov	r0, r6
   4e908:	f7fd fcf0 	bl	4c2ec <memcpy>
}
   4e90c:	4620      	mov	r0, r4
   4e90e:	b003      	add	sp, #12
   4e910:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e912:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   4e916:	e7f9      	b.n	4e90c <bt_gatt_attr_read_ccc+0x34>

0004e918 <bt_gatt_attr_read_service>:
{
   4e918:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   4e91a:	68c9      	ldr	r1, [r1, #12]
{
   4e91c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   4e920:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   4e922:	780a      	ldrb	r2, [r1, #0]
   4e924:	b992      	cbnz	r2, 4e94c <bt_gatt_attr_read_service+0x34>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   4e926:	884a      	ldrh	r2, [r1, #2]
   4e928:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   4e92c:	2d02      	cmp	r5, #2
   4e92e:	d819      	bhi.n	4e964 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   4e930:	f1c5 0402 	rsb	r4, r5, #2
   4e934:	429c      	cmp	r4, r3
   4e936:	bfa8      	it	ge
   4e938:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4e93a:	f10d 0306 	add.w	r3, sp, #6
   4e93e:	4622      	mov	r2, r4
   4e940:	1959      	adds	r1, r3, r5
   4e942:	f7fd fcd3 	bl	4c2ec <memcpy>
}
   4e946:	4620      	mov	r0, r4
   4e948:	b003      	add	sp, #12
   4e94a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   4e94c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   4e94e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   4e952:	d807      	bhi.n	4e964 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   4e954:	f1c5 0410 	rsb	r4, r5, #16
   4e958:	429c      	cmp	r4, r3
   4e95a:	bfa8      	it	ge
   4e95c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4e95e:	4622      	mov	r2, r4
   4e960:	4429      	add	r1, r5
   4e962:	e7ee      	b.n	4e942 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4e964:	f06f 0406 	mvn.w	r4, #6
   4e968:	e7ed      	b.n	4e946 <bt_gatt_attr_read_service+0x2e>

0004e96a <sc_clear>:
{
   4e96a:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4e96c:	f100 0488 	add.w	r4, r0, #136	; 0x88
{
   4e970:	4605      	mov	r5, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4e972:	4621      	mov	r1, r4
   4e974:	7a00      	ldrb	r0, [r0, #8]
   4e976:	f7fe f8e7 	bl	4cb48 <bt_addr_le_is_bonded>
   4e97a:	4606      	mov	r6, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   4e97c:	4621      	mov	r1, r4
   4e97e:	7a28      	ldrb	r0, [r5, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4e980:	b11e      	cbz	r6, 4e98a <sc_clear+0x20>
}
   4e982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   4e986:	f7e2 bf3f 	b.w	31808 <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   4e98a:	f7e2 fd1f 	bl	313cc <find_sc_cfg>
		if (cfg) {
   4e98e:	b128      	cbz	r0, 4e99c <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   4e990:	4631      	mov	r1, r6
   4e992:	220c      	movs	r2, #12
}
   4e994:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   4e998:	f7fd bcb3 	b.w	4c302 <memset>
}
   4e99c:	bd70      	pop	{r4, r5, r6, pc}

0004e99e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   4e99e:	2a02      	cmp	r2, #2
{
   4e9a0:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   4e9a2:	d108      	bne.n	4e9b6 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   4e9a4:	2300      	movs	r3, #0
   4e9a6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   4e9aa:	461a      	mov	r2, r3
   4e9ac:	7a00      	ldrb	r0, [r0, #8]
   4e9ae:	f7ff fd2b 	bl	4e408 <sc_save>
}
   4e9b2:	2002      	movs	r0, #2
   4e9b4:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   4e9b6:	f7ff ffd8 	bl	4e96a <sc_clear>
   4e9ba:	e7fa      	b.n	4e9b2 <sc_ccc_cfg_write+0x14>

0004e9bc <gatt_req_send>:
{
   4e9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4e9c0:	4606      	mov	r6, r0
   4e9c2:	468a      	mov	sl, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   4e9c4:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   4e9c8:	2100      	movs	r1, #0
{
   4e9ca:	4690      	mov	r8, r2
   4e9cc:	461f      	mov	r7, r3
   4e9ce:	f89d 9020 	ldrb.w	r9, [sp, #32]
   4e9d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   4e9d4:	f7e2 fbb0 	bl	31138 <bt_att_req_alloc>
	if (!req) {
   4e9d8:	4604      	mov	r4, r0
   4e9da:	b180      	cbz	r0, 4e9fe <gatt_req_send+0x42>
	req->att_op = op;
   4e9dc:	f880 9011 	strb.w	r9, [r0, #17]
	req->len = len;
   4e9e0:	6145      	str	r5, [r0, #20]
	req->encode = encode;
   4e9e2:	60c7      	str	r7, [r0, #12]
	req->func = func;
   4e9e4:	f8c0 a004 	str.w	sl, [r0, #4]
	req->user_data = params;
   4e9e8:	f8c0 8018 	str.w	r8, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   4e9ec:	462a      	mov	r2, r5
   4e9ee:	4649      	mov	r1, r9
   4e9f0:	4630      	mov	r0, r6
   4e9f2:	f7ff fac4 	bl	4df7e <bt_att_create_pdu>
	if (!buf) {
   4e9f6:	b928      	cbnz	r0, 4ea04 <gatt_req_send+0x48>
		bt_att_req_free(req);
   4e9f8:	4620      	mov	r0, r4
   4e9fa:	f7e2 fbbf 	bl	3117c <bt_att_req_free>
		return -ENOMEM;
   4e9fe:	f06f 050b 	mvn.w	r5, #11
   4ea02:	e010      	b.n	4ea26 <gatt_req_send+0x6a>
	err = encode(buf, len, params);
   4ea04:	4629      	mov	r1, r5
	req->buf = buf;
   4ea06:	60a0      	str	r0, [r4, #8]
	err = encode(buf, len, params);
   4ea08:	4642      	mov	r2, r8
   4ea0a:	47b8      	blx	r7
	if (err) {
   4ea0c:	4605      	mov	r5, r0
   4ea0e:	b118      	cbz	r0, 4ea18 <gatt_req_send+0x5c>
		bt_att_req_free(req);
   4ea10:	4620      	mov	r0, r4
   4ea12:	f7e2 fbb3 	bl	3117c <bt_att_req_free>
   4ea16:	e006      	b.n	4ea26 <gatt_req_send+0x6a>
	err = bt_att_req_send(conn, req);
   4ea18:	4621      	mov	r1, r4
   4ea1a:	4630      	mov	r0, r6
   4ea1c:	f7ff fbaf 	bl	4e17e <bt_att_req_send>
	if (err) {
   4ea20:	4605      	mov	r5, r0
   4ea22:	2800      	cmp	r0, #0
   4ea24:	d1f4      	bne.n	4ea10 <gatt_req_send+0x54>
}
   4ea26:	4628      	mov	r0, r5
   4ea28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004ea2c <bt_gatt_attr_read>:
{
   4ea2c:	b510      	push	{r4, lr}
   4ea2e:	4610      	mov	r0, r2
   4ea30:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   4ea34:	f8bd 2010 	ldrh.w	r2, [sp, #16]
	if (offset > value_len) {
   4ea38:	4291      	cmp	r1, r2
   4ea3a:	d80b      	bhi.n	4ea54 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   4ea3c:	1a54      	subs	r4, r2, r1
   4ea3e:	429c      	cmp	r4, r3
   4ea40:	bfa8      	it	ge
   4ea42:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4ea44:	9b03      	ldr	r3, [sp, #12]
   4ea46:	b2a4      	uxth	r4, r4
   4ea48:	4622      	mov	r2, r4
   4ea4a:	4419      	add	r1, r3
   4ea4c:	f7fd fc4e 	bl	4c2ec <memcpy>
}
   4ea50:	4620      	mov	r0, r4
   4ea52:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4ea54:	f06f 0406 	mvn.w	r4, #6
   4ea58:	e7fa      	b.n	4ea50 <bt_gatt_attr_read+0x24>

0004ea5a <bt_gatt_attr_value_handle>:
{
   4ea5a:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   4ea5c:	4604      	mov	r4, r0
   4ea5e:	b910      	cbnz	r0, 4ea66 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   4ea60:	2000      	movs	r0, #0
}
   4ea62:	b002      	add	sp, #8
   4ea64:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   4ea66:	2300      	movs	r3, #0
   4ea68:	f88d 3004 	strb.w	r3, [sp, #4]
   4ea6c:	a901      	add	r1, sp, #4
   4ea6e:	f642 0303 	movw	r3, #10243	; 0x2803
   4ea72:	6800      	ldr	r0, [r0, #0]
   4ea74:	f8ad 3006 	strh.w	r3, [sp, #6]
   4ea78:	f7fd fd27 	bl	4c4ca <bt_uuid_cmp>
   4ea7c:	2800      	cmp	r0, #0
   4ea7e:	d1ef      	bne.n	4ea60 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   4ea80:	68e3      	ldr	r3, [r4, #12]
   4ea82:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   4ea84:	2800      	cmp	r0, #0
   4ea86:	d1ec      	bne.n	4ea62 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   4ea88:	4620      	mov	r0, r4
   4ea8a:	f7e2 ffad 	bl	319e8 <bt_gatt_attr_get_handle>
   4ea8e:	3001      	adds	r0, #1
   4ea90:	b280      	uxth	r0, r0
	return handle;
   4ea92:	e7e6      	b.n	4ea62 <bt_gatt_attr_value_handle+0x8>

0004ea94 <bt_gatt_attr_read_chrc>:
{
   4ea94:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   4ea96:	68ce      	ldr	r6, [r1, #12]
{
   4ea98:	b087      	sub	sp, #28
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4ea9a:	4608      	mov	r0, r1
{
   4ea9c:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   4ea9e:	79b3      	ldrb	r3, [r6, #6]
   4eaa0:	f88d 3004 	strb.w	r3, [sp, #4]
{
   4eaa4:	4617      	mov	r7, r2
   4eaa6:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4eaaa:	f7ff ffd6 	bl	4ea5a <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   4eaae:	6831      	ldr	r1, [r6, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   4eab0:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   4eab4:	780b      	ldrb	r3, [r1, #0]
   4eab6:	b99b      	cbnz	r3, 4eae0 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   4eab8:	884b      	ldrh	r3, [r1, #2]
   4eaba:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   4eabe:	2305      	movs	r3, #5
	if (offset > value_len) {
   4eac0:	42ab      	cmp	r3, r5
   4eac2:	d315      	bcc.n	4eaf0 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   4eac4:	1b5b      	subs	r3, r3, r5
   4eac6:	42a3      	cmp	r3, r4
   4eac8:	bfa8      	it	ge
   4eaca:	4623      	movge	r3, r4
   4eacc:	b29c      	uxth	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   4eace:	ab01      	add	r3, sp, #4
   4ead0:	4622      	mov	r2, r4
   4ead2:	1959      	adds	r1, r3, r5
   4ead4:	4638      	mov	r0, r7
   4ead6:	f7fd fc09 	bl	4c2ec <memcpy>
}
   4eada:	4620      	mov	r0, r4
   4eadc:	b007      	add	sp, #28
   4eade:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   4eae0:	2210      	movs	r2, #16
   4eae2:	3101      	adds	r1, #1
   4eae4:	f10d 0007 	add.w	r0, sp, #7
   4eae8:	f7fd fc00 	bl	4c2ec <memcpy>
		value_len += 16U;
   4eaec:	2313      	movs	r3, #19
   4eaee:	e7e7      	b.n	4eac0 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   4eaf0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   4eaf4:	e7f1      	b.n	4eada <bt_gatt_attr_read_chrc+0x46>

0004eaf6 <bt_gatt_foreach_attr>:
{
   4eaf6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   4eaf8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   4eafc:	2300      	movs	r3, #0
   4eafe:	9300      	str	r3, [sp, #0]
   4eb00:	461a      	mov	r2, r3
   4eb02:	f7e2 ffa1 	bl	31a48 <bt_gatt_foreach_attr_type>
}
   4eb06:	b005      	add	sp, #20
   4eb08:	f85d fb04 	ldr.w	pc, [sp], #4

0004eb0c <bt_gatt_check_perm>:
{
   4eb0c:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   4eb0e:	07d4      	lsls	r4, r2, #31
{
   4eb10:	4605      	mov	r5, r0
   4eb12:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   4eb14:	d504      	bpl.n	4eb20 <bt_gatt_check_perm+0x14>
   4eb16:	f010 0f15 	tst.w	r0, #21
   4eb1a:	d01e      	beq.n	4eb5a <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   4eb1c:	684b      	ldr	r3, [r1, #4]
   4eb1e:	b1e3      	cbz	r3, 4eb5a <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   4eb20:	0793      	lsls	r3, r2, #30
   4eb22:	d504      	bpl.n	4eb2e <bt_gatt_check_perm+0x22>
   4eb24:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   4eb28:	d019      	beq.n	4eb5e <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   4eb2a:	688b      	ldr	r3, [r1, #8]
   4eb2c:	b1bb      	cbz	r3, 4eb5e <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   4eb2e:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   4eb32:	f014 0f30 	tst.w	r4, #48	; 0x30
   4eb36:	d103      	bne.n	4eb40 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   4eb38:	f014 000c 	ands.w	r0, r4, #12
   4eb3c:	d107      	bne.n	4eb4e <bt_gatt_check_perm+0x42>
}
   4eb3e:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   4eb40:	4628      	mov	r0, r5
   4eb42:	f7fe fc1c 	bl	4d37e <bt_conn_get_security>
   4eb46:	2802      	cmp	r0, #2
   4eb48:	d8f6      	bhi.n	4eb38 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   4eb4a:	2005      	movs	r0, #5
   4eb4c:	e7f7      	b.n	4eb3e <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   4eb4e:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   4eb50:	2b00      	cmp	r3, #0
   4eb52:	bf14      	ite	ne
   4eb54:	2000      	movne	r0, #0
   4eb56:	200f      	moveq	r0, #15
   4eb58:	e7f1      	b.n	4eb3e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   4eb5a:	2002      	movs	r0, #2
   4eb5c:	e7ef      	b.n	4eb3e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   4eb5e:	2003      	movs	r0, #3
   4eb60:	e7ed      	b.n	4eb3e <bt_gatt_check_perm+0x32>

0004eb62 <gatt_notify>:
{
   4eb62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4eb66:	4614      	mov	r4, r2
   4eb68:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   4eb6a:	2214      	movs	r2, #20
   4eb6c:	6861      	ldr	r1, [r4, #4]
{
   4eb6e:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   4eb70:	f7ff ffcc 	bl	4eb0c <bt_gatt_check_perm>
   4eb74:	bb08      	cbnz	r0, 4ebba <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   4eb76:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   4eb78:	211b      	movs	r1, #27
   4eb7a:	3202      	adds	r2, #2
   4eb7c:	4638      	mov	r0, r7
   4eb7e:	f7ff f9fe 	bl	4df7e <bt_att_create_pdu>
	if (!buf) {
   4eb82:	4605      	mov	r5, r0
   4eb84:	b1e8      	cbz	r0, 4ebc2 <gatt_notify+0x60>
	return net_buf_simple_add(&buf->b, len);
   4eb86:	f100 0808 	add.w	r8, r0, #8
   4eb8a:	2102      	movs	r1, #2
   4eb8c:	4640      	mov	r0, r8
   4eb8e:	f001 fb02 	bl	50196 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   4eb92:	4606      	mov	r6, r0
   4eb94:	89a1      	ldrh	r1, [r4, #12]
   4eb96:	f826 9b02 	strh.w	r9, [r6], #2
   4eb9a:	4640      	mov	r0, r8
   4eb9c:	f001 fafb 	bl	50196 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   4eba0:	89a2      	ldrh	r2, [r4, #12]
   4eba2:	68a1      	ldr	r1, [r4, #8]
   4eba4:	4630      	mov	r0, r6
   4eba6:	f7fd fba1 	bl	4c2ec <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   4ebaa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   4ebae:	4629      	mov	r1, r5
   4ebb0:	4638      	mov	r0, r7
}
   4ebb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   4ebb6:	f7ff ba9b 	b.w	4e0f0 <bt_att_send>
		return -EPERM;
   4ebba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   4ebbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   4ebc2:	f06f 000b 	mvn.w	r0, #11
   4ebc6:	e7fa      	b.n	4ebbe <gatt_notify+0x5c>

0004ebc8 <gatt_discover_next>:
{
   4ebc8:	b570      	push	{r4, r5, r6, lr}
   4ebca:	4605      	mov	r5, r0
   4ebcc:	4614      	mov	r4, r2
	if (!last_handle)
   4ebce:	b929      	cbnz	r1, 4ebdc <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   4ebd0:	4621      	mov	r1, r4
   4ebd2:	4628      	mov	r0, r5
   4ebd4:	f7e3 fad4 	bl	32180 <bt_gatt_discover>
   4ebd8:	b928      	cbnz	r0, 4ebe6 <gatt_discover_next+0x1e>
}
   4ebda:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   4ebdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4ebe0:	4299      	cmp	r1, r3
   4ebe2:	d107      	bne.n	4ebf4 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   4ebe4:	8111      	strh	r1, [r2, #8]
	params->func(conn, NULL, params);
   4ebe6:	6863      	ldr	r3, [r4, #4]
   4ebe8:	4622      	mov	r2, r4
   4ebea:	4628      	mov	r0, r5
   4ebec:	2100      	movs	r1, #0
}
   4ebee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   4ebf2:	4718      	bx	r3
		params->start_handle++;
   4ebf4:	3101      	adds	r1, #1
	if (params->start_handle > params->end_handle) {
   4ebf6:	89d3      	ldrh	r3, [r2, #14]
		params->start_handle++;
   4ebf8:	b289      	uxth	r1, r1
	if (params->start_handle > params->end_handle) {
   4ebfa:	428b      	cmp	r3, r1
		params->start_handle++;
   4ebfc:	8111      	strh	r1, [r2, #8]
	if (params->start_handle > params->end_handle) {
   4ebfe:	d2e7      	bcs.n	4ebd0 <gatt_discover_next+0x8>
   4ec00:	e7f1      	b.n	4ebe6 <gatt_discover_next+0x1e>

0004ec02 <gatt_find_type_rsp>:
{
   4ec02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4ec06:	b088      	sub	sp, #32
   4ec08:	4680      	mov	r8, r0
   4ec0a:	9d10      	ldr	r5, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   4ec0c:	b911      	cbnz	r1, 4ec14 <gatt_find_type_rsp+0x12>
   4ec0e:	f013 0903 	ands.w	r9, r3, #3
   4ec12:	d007      	beq.n	4ec24 <gatt_find_type_rsp+0x22>
	params->func(conn, NULL, params);
   4ec14:	686b      	ldr	r3, [r5, #4]
   4ec16:	462a      	mov	r2, r5
   4ec18:	2100      	movs	r1, #0
   4ec1a:	4640      	mov	r0, r8
   4ec1c:	4798      	blx	r3
}
   4ec1e:	b008      	add	sp, #32
   4ec20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0U; i < count; i++) {
   4ec24:	f3c3 0387 	ubfx	r3, r3, #2, #8
   4ec28:	4614      	mov	r4, r2
   4ec2a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4ec2e:	464f      	mov	r7, r9
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   4ec30:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   4ec34:	42b4      	cmp	r4, r6
   4ec36:	d105      	bne.n	4ec44 <gatt_find_type_rsp+0x42>
	gatt_discover_next(conn, end_handle, params);
   4ec38:	462a      	mov	r2, r5
   4ec3a:	4649      	mov	r1, r9
   4ec3c:	4640      	mov	r0, r8
   4ec3e:	f7ff ffc3 	bl	4ebc8 <gatt_discover_next>
	return;
   4ec42:	e7ec      	b.n	4ec1e <gatt_find_type_rsp+0x1c>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   4ec44:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4ec46:	7c29      	ldrb	r1, [r5, #16]
		value.end_handle = end_handle;
   4ec48:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   4ec4c:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   4ec4e:	fa1f f983 	uxth.w	r9, r3
		value.uuid = params->uuid;
   4ec52:	682b      	ldr	r3, [r5, #0]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   4ec54:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   4ec56:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   4ec58:	bf0c      	ite	eq
   4ec5a:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   4ec5e:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4ec60:	ab01      	add	r3, sp, #4
   4ec62:	f8ad 1002 	strh.w	r1, [sp, #2]
   4ec66:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   4ec68:	f8ad 201c 	strh.w	r2, [sp, #28]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4ec6c:	f88d 7000 	strb.w	r7, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   4ec70:	f8cd d00c 	str.w	sp, [sp, #12]
   4ec74:	e9cd 7704 	strd	r7, r7, [sp, #16]
   4ec78:	f88d 701e 	strb.w	r7, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4ec7c:	686b      	ldr	r3, [r5, #4]
   4ec7e:	462a      	mov	r2, r5
   4ec80:	a903      	add	r1, sp, #12
   4ec82:	4640      	mov	r0, r8
   4ec84:	4798      	blx	r3
   4ec86:	3404      	adds	r4, #4
   4ec88:	2800      	cmp	r0, #0
   4ec8a:	d1d3      	bne.n	4ec34 <gatt_find_type_rsp+0x32>
   4ec8c:	e7c7      	b.n	4ec1e <gatt_find_type_rsp+0x1c>

0004ec8e <gatt_read_group_rsp>:
{
   4ec8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4ec92:	b08f      	sub	sp, #60	; 0x3c
   4ec94:	4681      	mov	r9, r0
   4ec96:	4690      	mov	r8, r2
   4ec98:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   4ec9a:	b131      	cbz	r1, 4ecaa <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   4ec9c:	686b      	ldr	r3, [r5, #4]
   4ec9e:	462a      	mov	r2, r5
   4eca0:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
   4eca2:	4798      	blx	r3
}
   4eca4:	b00f      	add	sp, #60	; 0x3c
   4eca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
   4ecaa:	7812      	ldrb	r2, [r2, #0]
   4ecac:	2a06      	cmp	r2, #6
   4ecae:	d006      	beq.n	4ecbe <gatt_read_group_rsp+0x30>
   4ecb0:	2a14      	cmp	r2, #20
   4ecb2:	d019      	beq.n	4ece8 <gatt_read_group_rsp+0x5a>
	params->func(conn, NULL, params);
   4ecb4:	686b      	ldr	r3, [r5, #4]
   4ecb6:	462a      	mov	r2, r5
   4ecb8:	2100      	movs	r1, #0
   4ecba:	4648      	mov	r0, r9
   4ecbc:	e7f1      	b.n	4eca2 <gatt_read_group_rsp+0x14>
		u.uuid.type = BT_UUID_TYPE_16;
   4ecbe:	f88d 1010 	strb.w	r1, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   4ecc2:	3b01      	subs	r3, #1
   4ecc4:	b29c      	uxth	r4, r3
   4ecc6:	f108 0701 	add.w	r7, r8, #1
	uint16_t start_handle, end_handle = 0U;
   4ecca:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   4eccc:	f898 3000 	ldrb.w	r3, [r8]
   4ecd0:	42a3      	cmp	r3, r4
   4ecd2:	d90d      	bls.n	4ecf0 <gatt_read_group_rsp+0x62>
	if (length == 0U && end_handle) {
   4ecd4:	2c00      	cmp	r4, #0
   4ecd6:	d1ed      	bne.n	4ecb4 <gatt_read_group_rsp+0x26>
   4ecd8:	2e00      	cmp	r6, #0
   4ecda:	d0eb      	beq.n	4ecb4 <gatt_read_group_rsp+0x26>
	gatt_discover_next(conn, handle, params);
   4ecdc:	462a      	mov	r2, r5
   4ecde:	4631      	mov	r1, r6
   4ece0:	4648      	mov	r0, r9
   4ece2:	f7ff ff71 	bl	4ebc8 <gatt_discover_next>
   4ece6:	e7dd      	b.n	4eca4 <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
   4ece8:	2202      	movs	r2, #2
   4ecea:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   4ecee:	e7e8      	b.n	4ecc2 <gatt_read_group_rsp+0x34>
		struct bt_gatt_attr attr = {};
   4ecf0:	2214      	movs	r2, #20
   4ecf2:	2100      	movs	r1, #0
   4ecf4:	a809      	add	r0, sp, #36	; 0x24
   4ecf6:	f7fd fb04 	bl	4c302 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   4ecfa:	f8b7 a000 	ldrh.w	sl, [r7]
   4ecfe:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   4ed02:	2b00      	cmp	r3, #0
   4ed04:	d0d6      	beq.n	4ecb4 <gatt_read_group_rsp+0x26>
		end_handle = sys_le16_to_cpu(data->end_handle);
   4ed06:	f8b7 b002 	ldrh.w	fp, [r7, #2]
   4ed0a:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   4ed0e:	2e00      	cmp	r6, #0
   4ed10:	d0d0      	beq.n	4ecb4 <gatt_read_group_rsp+0x26>
   4ed12:	42b3      	cmp	r3, r6
   4ed14:	d8ce      	bhi.n	4ecb4 <gatt_read_group_rsp+0x26>
		switch (u.uuid.type) {
   4ed16:	f89d 3010 	ldrb.w	r3, [sp, #16]
   4ed1a:	b32b      	cbz	r3, 4ed68 <gatt_read_group_rsp+0xda>
   4ed1c:	2b02      	cmp	r3, #2
   4ed1e:	d02a      	beq.n	4ed76 <gatt_read_group_rsp+0xe8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   4ed20:	f04f 0300 	mov.w	r3, #0
   4ed24:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   4ed28:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   4ed2a:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   4ed2e:	2b00      	cmp	r3, #0
   4ed30:	f642 0301 	movw	r3, #10241	; 0x2801
   4ed34:	bf08      	it	eq
   4ed36:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   4ed3a:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   4ed3e:	ab04      	add	r3, sp, #16
   4ed40:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   4ed42:	ab01      	add	r3, sp, #4
   4ed44:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   4ed46:	ab02      	add	r3, sp, #8
   4ed48:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
   4ed4a:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4ed4e:	686b      	ldr	r3, [r5, #4]
   4ed50:	462a      	mov	r2, r5
   4ed52:	a909      	add	r1, sp, #36	; 0x24
   4ed54:	4648      	mov	r0, r9
   4ed56:	4798      	blx	r3
   4ed58:	2800      	cmp	r0, #0
   4ed5a:	d0a3      	beq.n	4eca4 <gatt_read_group_rsp+0x16>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   4ed5c:	f898 2000 	ldrb.w	r2, [r8]
   4ed60:	1aa4      	subs	r4, r4, r2
   4ed62:	b2a4      	uxth	r4, r4
   4ed64:	4417      	add	r7, r2
   4ed66:	e7b1      	b.n	4eccc <gatt_read_group_rsp+0x3e>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   4ed68:	2202      	movs	r2, #2
   4ed6a:	1d39      	adds	r1, r7, #4
   4ed6c:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   4ed70:	f7fd fabc 	bl	4c2ec <memcpy>
			break;
   4ed74:	e7d4      	b.n	4ed20 <gatt_read_group_rsp+0x92>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   4ed76:	2210      	movs	r2, #16
   4ed78:	1d39      	adds	r1, r7, #4
   4ed7a:	f10d 0011 	add.w	r0, sp, #17
   4ed7e:	e7f7      	b.n	4ed70 <gatt_read_group_rsp+0xe2>

0004ed80 <read_included_uuid_cb>:
{
   4ed80:	b570      	push	{r4, r5, r6, lr}
   4ed82:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
   4ed84:	2b10      	cmp	r3, #16
{
   4ed86:	4605      	mov	r5, r0
   4ed88:	4611      	mov	r1, r2
   4ed8a:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   4ed8c:	d005      	beq.n	4ed9a <read_included_uuid_cb+0x1a>
		params->func(conn, NULL, params);
   4ed8e:	6863      	ldr	r3, [r4, #4]
   4ed90:	4622      	mov	r2, r4
   4ed92:	2100      	movs	r1, #0
   4ed94:	4798      	blx	r3
}
   4ed96:	b00e      	add	sp, #56	; 0x38
   4ed98:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
   4ed9a:	8962      	ldrh	r2, [r4, #10]
   4ed9c:	f8ad 200c 	strh.w	r2, [sp, #12]
	value.end_handle = params->_included.end_handle;
   4eda0:	89a2      	ldrh	r2, [r4, #12]
   4eda2:	f8ad 200e 	strh.w	r2, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   4eda6:	2202      	movs	r2, #2
   4eda8:	f88d 2010 	strb.w	r2, [sp, #16]
	value.uuid = &u.uuid;
   4edac:	ae04      	add	r6, sp, #16
	memcpy(u.u128.val, pdu, length);
   4edae:	461a      	mov	r2, r3
   4edb0:	f10d 0011 	add.w	r0, sp, #17
	value.uuid = &u.uuid;
   4edb4:	9602      	str	r6, [sp, #8]
	memcpy(u.u128.val, pdu, length);
   4edb6:	f7fd fa99 	bl	4c2ec <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4edba:	6821      	ldr	r1, [r4, #0]
   4edbc:	b9f1      	cbnz	r1, 4edfc <read_included_uuid_cb+0x7c>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4edbe:	f642 0202 	movw	r2, #10242	; 0x2802
   4edc2:	2300      	movs	r3, #0
   4edc4:	f8ad 2006 	strh.w	r2, [sp, #6]
   4edc8:	aa01      	add	r2, sp, #4
   4edca:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   4edce:	f88d 3004 	strb.w	r3, [sp, #4]
   4edd2:	aa02      	add	r2, sp, #8
   4edd4:	930b      	str	r3, [sp, #44]	; 0x2c
   4edd6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   4edda:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4eddc:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   4edde:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4ede2:	4622      	mov	r2, r4
   4ede4:	6863      	ldr	r3, [r4, #4]
   4ede6:	a909      	add	r1, sp, #36	; 0x24
   4ede8:	4628      	mov	r0, r5
   4edea:	4798      	blx	r3
   4edec:	2800      	cmp	r0, #0
   4edee:	d0d2      	beq.n	4ed96 <read_included_uuid_cb+0x16>
	gatt_discover_next(conn, params->start_handle, params);
   4edf0:	4622      	mov	r2, r4
   4edf2:	8921      	ldrh	r1, [r4, #8]
   4edf4:	4628      	mov	r0, r5
   4edf6:	f7ff fee7 	bl	4ebc8 <gatt_discover_next>
	return;
   4edfa:	e7cc      	b.n	4ed96 <read_included_uuid_cb+0x16>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4edfc:	4630      	mov	r0, r6
   4edfe:	f7fd fb64 	bl	4c4ca <bt_uuid_cmp>
   4ee02:	2800      	cmp	r0, #0
   4ee04:	d0db      	beq.n	4edbe <read_included_uuid_cb+0x3e>
   4ee06:	e7f3      	b.n	4edf0 <read_included_uuid_cb+0x70>

0004ee08 <gatt_find_info_rsp>:
{
   4ee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4ee0c:	b091      	sub	sp, #68	; 0x44
   4ee0e:	4683      	mov	fp, r0
   4ee10:	9f1a      	ldr	r7, [sp, #104]	; 0x68
	if (err) {
   4ee12:	b921      	cbnz	r1, 4ee1e <gatt_find_info_rsp+0x16>
	switch (rsp->format) {
   4ee14:	7810      	ldrb	r0, [r2, #0]
   4ee16:	2801      	cmp	r0, #1
   4ee18:	d007      	beq.n	4ee2a <gatt_find_info_rsp+0x22>
   4ee1a:	2802      	cmp	r0, #2
   4ee1c:	d01e      	beq.n	4ee5c <gatt_find_info_rsp+0x54>
	params->func(conn, NULL, params);
   4ee1e:	687b      	ldr	r3, [r7, #4]
   4ee20:	463a      	mov	r2, r7
   4ee22:	2100      	movs	r1, #0
   4ee24:	4658      	mov	r0, fp
   4ee26:	4798      	blx	r3
   4ee28:	e088      	b.n	4ef3c <gatt_find_info_rsp+0x134>
		u.uuid.type = BT_UUID_TYPE_16;
   4ee2a:	f88d 1018 	strb.w	r1, [sp, #24]
		len = sizeof(*info.i16);
   4ee2e:	f04f 0a04 	mov.w	sl, #4
	length--;
   4ee32:	1e5c      	subs	r4, r3, #1
   4ee34:	b2a4      	uxth	r4, r4
	if (length < len) {
   4ee36:	45a2      	cmp	sl, r4
   4ee38:	d8f1      	bhi.n	4ee1e <gatt_find_info_rsp+0x16>
	for (i = length / len, pdu = rsp->info; i != 0;
   4ee3a:	fbb4 f4fa 	udiv	r4, r4, sl
	bool skip = false;
   4ee3e:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   4ee42:	1c55      	adds	r5, r2, #1
	uint16_t handle = 0U;
   4ee44:	f8cd 9000 	str.w	r9, [sp]
			skip = false;
   4ee48:	464e      	mov	r6, r9
   4ee4a:	f10d 0818 	add.w	r8, sp, #24
	for (i = length / len, pdu = rsp->info; i != 0;
   4ee4e:	b954      	cbnz	r4, 4ee66 <gatt_find_info_rsp+0x5e>
	gatt_discover_next(conn, handle, params);
   4ee50:	463a      	mov	r2, r7
   4ee52:	9900      	ldr	r1, [sp, #0]
   4ee54:	4658      	mov	r0, fp
   4ee56:	f7ff feb7 	bl	4ebc8 <gatt_discover_next>
	return;
   4ee5a:	e06f      	b.n	4ef3c <gatt_find_info_rsp+0x134>
		u.uuid.type = BT_UUID_TYPE_128;
   4ee5c:	f88d 0018 	strb.w	r0, [sp, #24]
		len = sizeof(*info.i128);
   4ee60:	f04f 0a12 	mov.w	sl, #18
		break;
   4ee64:	e7e5      	b.n	4ee32 <gatt_find_info_rsp+0x2a>
		handle = sys_le16_to_cpu(info.i16->handle);
   4ee66:	882b      	ldrh	r3, [r5, #0]
   4ee68:	f8ad 3004 	strh.w	r3, [sp, #4]
   4ee6c:	b29b      	uxth	r3, r3
   4ee6e:	9300      	str	r3, [sp, #0]
		if (skip) {
   4ee70:	f1b9 0f00 	cmp.w	r9, #0
   4ee74:	d14c      	bne.n	4ef10 <gatt_find_info_rsp+0x108>
		switch (u.uuid.type) {
   4ee76:	f89d 3018 	ldrb.w	r3, [sp, #24]
   4ee7a:	b3b3      	cbz	r3, 4eeea <gatt_find_info_rsp+0xe2>
   4ee7c:	2b02      	cmp	r3, #2
   4ee7e:	d03b      	beq.n	4eef8 <gatt_find_info_rsp+0xf0>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4ee80:	6839      	ldr	r1, [r7, #0]
   4ee82:	2900      	cmp	r1, #0
   4ee84:	d13f      	bne.n	4ef06 <gatt_find_info_rsp+0xfe>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   4ee86:	7c3b      	ldrb	r3, [r7, #16]
   4ee88:	2b04      	cmp	r3, #4
   4ee8a:	d146      	bne.n	4ef1a <gatt_find_info_rsp+0x112>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   4ee8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   4ee90:	a902      	add	r1, sp, #8
   4ee92:	4640      	mov	r0, r8
   4ee94:	f88d 6008 	strb.w	r6, [sp, #8]
   4ee98:	f8ad 300a 	strh.w	r3, [sp, #10]
   4ee9c:	f7fd fb15 	bl	4c4ca <bt_uuid_cmp>
   4eea0:	b3b0      	cbz	r0, 4ef10 <gatt_find_info_rsp+0x108>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   4eea2:	f642 0301 	movw	r3, #10241	; 0x2801
   4eea6:	a903      	add	r1, sp, #12
   4eea8:	4640      	mov	r0, r8
   4eeaa:	f88d 600c 	strb.w	r6, [sp, #12]
   4eeae:	f8ad 300e 	strh.w	r3, [sp, #14]
   4eeb2:	f7fd fb0a 	bl	4c4ca <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   4eeb6:	b358      	cbz	r0, 4ef10 <gatt_find_info_rsp+0x108>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   4eeb8:	f642 0302 	movw	r3, #10242	; 0x2802
   4eebc:	a904      	add	r1, sp, #16
   4eebe:	4640      	mov	r0, r8
   4eec0:	f88d 6010 	strb.w	r6, [sp, #16]
   4eec4:	f8ad 3012 	strh.w	r3, [sp, #18]
   4eec8:	f7fd faff 	bl	4c4ca <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   4eecc:	b300      	cbz	r0, 4ef10 <gatt_find_info_rsp+0x108>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   4eece:	f642 0303 	movw	r3, #10243	; 0x2803
   4eed2:	a905      	add	r1, sp, #20
   4eed4:	4640      	mov	r0, r8
   4eed6:	f88d 6014 	strb.w	r6, [sp, #20]
   4eeda:	f8ad 3016 	strh.w	r3, [sp, #22]
   4eede:	f7fd faf4 	bl	4c4ca <bt_uuid_cmp>
   4eee2:	b9d0      	cbnz	r0, 4ef1a <gatt_find_info_rsp+0x112>
				skip = true;
   4eee4:	f04f 0901 	mov.w	r9, #1
   4eee8:	e014      	b.n	4ef14 <gatt_find_info_rsp+0x10c>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   4eeea:	78ab      	ldrb	r3, [r5, #2]
   4eeec:	78ea      	ldrb	r2, [r5, #3]
   4eeee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   4eef2:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   4eef6:	e7c3      	b.n	4ee80 <gatt_find_info_rsp+0x78>
			memcpy(u.u128.val, info.i128->uuid, 16);
   4eef8:	2210      	movs	r2, #16
   4eefa:	1ca9      	adds	r1, r5, #2
   4eefc:	f10d 0019 	add.w	r0, sp, #25
   4ef00:	f7fd f9f4 	bl	4c2ec <memcpy>
			break;
   4ef04:	e7bc      	b.n	4ee80 <gatt_find_info_rsp+0x78>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   4ef06:	4640      	mov	r0, r8
   4ef08:	f7fd fadf 	bl	4c4ca <bt_uuid_cmp>
   4ef0c:	2800      	cmp	r0, #0
   4ef0e:	d0ba      	beq.n	4ee86 <gatt_find_info_rsp+0x7e>
			skip = false;
   4ef10:	f04f 0900 	mov.w	r9, #0
	     i--, pdu = (const uint8_t *)pdu + len) {
   4ef14:	3c01      	subs	r4, #1
   4ef16:	4455      	add	r5, sl
   4ef18:	e799      	b.n	4ee4e <gatt_find_info_rsp+0x46>
		attr.handle = handle;
   4ef1a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   4ef1e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   4ef22:	e9cd 860b 	strd	r8, r6, [sp, #44]	; 0x2c
   4ef26:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   4ef2a:	f88d 603e 	strb.w	r6, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   4ef2e:	687b      	ldr	r3, [r7, #4]
   4ef30:	463a      	mov	r2, r7
   4ef32:	a90b      	add	r1, sp, #44	; 0x2c
   4ef34:	4658      	mov	r0, fp
   4ef36:	4798      	blx	r3
   4ef38:	2800      	cmp	r0, #0
   4ef3a:	d1eb      	bne.n	4ef14 <gatt_find_info_rsp+0x10c>
}
   4ef3c:	b011      	add	sp, #68	; 0x44
   4ef3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0004ef42 <bt_gatt_write_without_response_cb>:
{
   4ef42:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   4ef46:	4691      	mov	r9, r2
	if (conn->state != BT_CONN_CONNECTED) {
   4ef48:	7b42      	ldrb	r2, [r0, #13]
   4ef4a:	2a07      	cmp	r2, #7
{
   4ef4c:	461e      	mov	r6, r3
   4ef4e:	4605      	mov	r5, r0
   4ef50:	468a      	mov	sl, r1
   4ef52:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   4ef56:	e9dd 780d 	ldrd	r7, r8, [sp, #52]	; 0x34
	if (conn->state != BT_CONN_CONNECTED) {
   4ef5a:	d130      	bne.n	4efbe <bt_gatt_write_without_response_cb+0x7c>
	if (conn->encrypt) {
   4ef5c:	7ac2      	ldrb	r2, [r0, #11]
   4ef5e:	bb0a      	cbnz	r2, 4efa4 <bt_gatt_write_without_response_cb+0x62>
	if (sign) {
   4ef60:	b303      	cbz	r3, 4efa4 <bt_gatt_write_without_response_cb+0x62>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_SIGNED_WRITE_CMD,
   4ef62:	f106 020e 	add.w	r2, r6, #14
   4ef66:	21d2      	movs	r1, #210	; 0xd2
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   4ef68:	f7ff f809 	bl	4df7e <bt_att_create_pdu>
   4ef6c:	4604      	mov	r4, r0
	if (!buf) {
   4ef6e:	b1b0      	cbz	r0, 4ef9e <bt_gatt_write_without_response_cb+0x5c>
   4ef70:	2102      	movs	r1, #2
   4ef72:	3008      	adds	r0, #8
   4ef74:	f001 f90f 	bl	50196 <net_buf_simple_add>
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   4ef78:	2300      	movs	r3, #0
	cmd->handle = sys_cpu_to_le16(handle);
   4ef7a:	f8a0 a000 	strh.w	sl, [r0]
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   4ef7e:	2200      	movs	r2, #0
   4ef80:	e9cd 3302 	strd	r3, r3, [sp, #8]
   4ef84:	2300      	movs	r3, #0
   4ef86:	e9cd 2300 	strd	r2, r3, [sp]
   4ef8a:	4631      	mov	r1, r6
   4ef8c:	464a      	mov	r2, r9
   4ef8e:	4620      	mov	r0, r4
   4ef90:	f7f5 f89c 	bl	440cc <net_buf_append_bytes>
	if (write != length) {
   4ef94:	42b0      	cmp	r0, r6
   4ef96:	d009      	beq.n	4efac <bt_gatt_write_without_response_cb+0x6a>
		net_buf_unref(buf);
   4ef98:	4620      	mov	r0, r4
   4ef9a:	f7f5 f865 	bl	44068 <net_buf_unref>
		return -ENOMEM;
   4ef9e:	f06f 000b 	mvn.w	r0, #11
   4efa2:	e00e      	b.n	4efc2 <bt_gatt_write_without_response_cb+0x80>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   4efa4:	1cb2      	adds	r2, r6, #2
   4efa6:	2152      	movs	r1, #82	; 0x52
   4efa8:	4628      	mov	r0, r5
   4efaa:	e7dd      	b.n	4ef68 <bt_gatt_write_without_response_cb+0x26>
	return bt_att_send(conn, buf, func, user_data);
   4efac:	4643      	mov	r3, r8
   4efae:	463a      	mov	r2, r7
   4efb0:	4621      	mov	r1, r4
   4efb2:	4628      	mov	r0, r5
}
   4efb4:	b004      	add	sp, #16
   4efb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, func, user_data);
   4efba:	f7ff b899 	b.w	4e0f0 <bt_att_send>
		return -ENOTCONN;
   4efbe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   4efc2:	b004      	add	sp, #16
   4efc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004efc8 <gatt_ccc_discover_cb>:
{
   4efc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4efca:	4606      	mov	r6, r0
	struct bt_gatt_subscribe_params *sub_params = params->sub_params;
   4efcc:	6955      	ldr	r5, [r2, #20]
{
   4efce:	4610      	mov	r0, r2
	if (!attr) {
   4efd0:	460c      	mov	r4, r1
   4efd2:	b951      	cbnz	r1, 4efea <gatt_ccc_discover_cb+0x22>
		memset(params, 0, sizeof(*params));
   4efd4:	2218      	movs	r2, #24
   4efd6:	f7fd f994 	bl	4c302 <memset>
		sub_params->notify(conn, sub_params, NULL, 0);
   4efda:	682f      	ldr	r7, [r5, #0]
   4efdc:	4623      	mov	r3, r4
   4efde:	4622      	mov	r2, r4
   4efe0:	4629      	mov	r1, r5
   4efe2:	4630      	mov	r0, r6
   4efe4:	47b8      	blx	r7
		return BT_GATT_ITER_STOP;
   4efe6:	2000      	movs	r0, #0
}
   4efe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   4efea:	7c13      	ldrb	r3, [r2, #16]
   4efec:	2b04      	cmp	r3, #4
   4efee:	d112      	bne.n	4f016 <gatt_ccc_discover_cb+0x4e>
		memset(params, 0, sizeof(*params));
   4eff0:	2100      	movs	r1, #0
   4eff2:	2218      	movs	r2, #24
   4eff4:	f7fd f985 	bl	4c302 <memset>
		sub_params->ccc_handle = attr->handle;
   4eff8:	8a23      	ldrh	r3, [r4, #16]
   4effa:	816b      	strh	r3, [r5, #10]
		if (bt_gatt_subscribe(conn, sub_params)) {
   4effc:	4629      	mov	r1, r5
   4effe:	4630      	mov	r0, r6
   4f000:	f7e3 fac6 	bl	32590 <bt_gatt_subscribe>
   4f004:	2800      	cmp	r0, #0
   4f006:	d0ef      	beq.n	4efe8 <gatt_ccc_discover_cb+0x20>
			sub_params->notify(conn, sub_params, NULL, 0);
   4f008:	2300      	movs	r3, #0
   4f00a:	682c      	ldr	r4, [r5, #0]
   4f00c:	461a      	mov	r2, r3
   4f00e:	4629      	mov	r1, r5
   4f010:	4630      	mov	r0, r6
   4f012:	47a0      	blx	r4
   4f014:	e7e7      	b.n	4efe6 <gatt_ccc_discover_cb+0x1e>
	return BT_GATT_ITER_CONTINUE;
   4f016:	2001      	movs	r0, #1
   4f018:	e7e6      	b.n	4efe8 <gatt_ccc_discover_cb+0x20>

0004f01a <bt_gatt_cancel>:
{
   4f01a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4f01c:	4604      	mov	r4, r0
   4f01e:	460e      	mov	r6, r1
	k_sched_lock();
   4f020:	f7f9 feb4 	bl	48d8c <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   4f024:	4631      	mov	r1, r6
   4f026:	4620      	mov	r0, r4
   4f028:	f7ff f8be 	bl	4e1a8 <bt_att_find_req_by_user_data>
	if (req) {
   4f02c:	4601      	mov	r1, r0
   4f02e:	b920      	cbnz	r0, 4f03a <bt_gatt_cancel+0x20>
}
   4f030:	b002      	add	sp, #8
   4f032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   4f036:	f7fa b871 	b.w	4911c <k_sched_unlock>
		func = req->func;
   4f03a:	6845      	ldr	r5, [r0, #4]
		bt_att_req_cancel(conn, req);
   4f03c:	4620      	mov	r0, r4
   4f03e:	f7e2 f969 	bl	31314 <bt_att_req_cancel>
	k_sched_unlock();
   4f042:	f7fa f86b 	bl	4911c <k_sched_unlock>
	if (func) {
   4f046:	b12d      	cbz	r5, 4f054 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   4f048:	2300      	movs	r3, #0
   4f04a:	9600      	str	r6, [sp, #0]
   4f04c:	461a      	mov	r2, r3
   4f04e:	210e      	movs	r1, #14
   4f050:	4620      	mov	r0, r4
   4f052:	47a8      	blx	r5
}
   4f054:	b002      	add	sp, #8
   4f056:	bd70      	pop	{r4, r5, r6, pc}

0004f058 <bt_gatt_unsubscribe>:
	if (conn->state != BT_CONN_CONNECTED) {
   4f058:	7b43      	ldrb	r3, [r0, #13]
   4f05a:	2b07      	cmp	r3, #7
{
   4f05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4f060:	4680      	mov	r8, r0
   4f062:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   4f064:	d156      	bne.n	4f114 <bt_gatt_unsubscribe+0xbc>
	sub = gatt_sub_find(conn);
   4f066:	f7e2 f9d1 	bl	3140c <gatt_sub_find>
	if (!sub) {
   4f06a:	4606      	mov	r6, r0
   4f06c:	2800      	cmp	r0, #0
   4f06e:	d054      	beq.n	4f11a <bt_gatt_unsubscribe+0xc2>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4f070:	6884      	ldr	r4, [r0, #8]
   4f072:	b104      	cbz	r4, 4f076 <bt_gatt_unsubscribe+0x1e>
   4f074:	3c1c      	subs	r4, #28
			has_subscription = true;
   4f076:	2300      	movs	r3, #0
   4f078:	461f      	mov	r7, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4f07a:	bb5c      	cbnz	r4, 4f0d4 <bt_gatt_unsubscribe+0x7c>
	if (!found) {
   4f07c:	2b00      	cmp	r3, #0
   4f07e:	d04c      	beq.n	4f11a <bt_gatt_unsubscribe+0xc2>
	if (!has_subscription) {
   4f080:	2f00      	cmp	r7, #0
   4f082:	d035      	beq.n	4f0f0 <bt_gatt_unsubscribe+0x98>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4f084:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   4f086:	f105 021c 	add.w	r2, r5, #28
   4f08a:	b15b      	cbz	r3, 4f0a4 <bt_gatt_unsubscribe+0x4c>
   4f08c:	429a      	cmp	r2, r3
   4f08e:	d13e      	bne.n	4f10e <bt_gatt_unsubscribe+0xb6>
Z_GENLIST_REMOVE(slist, snode)
   4f090:	69eb      	ldr	r3, [r5, #28]
   4f092:	2c00      	cmp	r4, #0
   4f094:	d135      	bne.n	4f102 <bt_gatt_unsubscribe+0xaa>
   4f096:	68f1      	ldr	r1, [r6, #12]
	list->head = node;
   4f098:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   4f09a:	428a      	cmp	r2, r1
   4f09c:	d100      	bne.n	4f0a0 <bt_gatt_unsubscribe+0x48>
	list->tail = node;
   4f09e:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   4f0a0:	2300      	movs	r3, #0
   4f0a2:	61eb      	str	r3, [r5, #28]
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   4f0a4:	2102      	movs	r1, #2
   4f0a6:	f105 0018 	add.w	r0, r5, #24
   4f0aa:	f7ff f8c8 	bl	4e23e <atomic_test_bit>
   4f0ae:	b118      	cbz	r0, 4f0b8 <bt_gatt_unsubscribe+0x60>
		bt_gatt_cancel(conn, params);
   4f0b0:	4629      	mov	r1, r5
   4f0b2:	4640      	mov	r0, r8
   4f0b4:	f7ff ffb1 	bl	4f01a <bt_gatt_cancel>
	if (gatt_sub_is_empty(sub)) {
   4f0b8:	68b3      	ldr	r3, [r6, #8]
   4f0ba:	b913      	cbnz	r3, 4f0c2 <bt_gatt_unsubscribe+0x6a>
		gatt_sub_free(sub);
   4f0bc:	4630      	mov	r0, r6
   4f0be:	f7ff f977 	bl	4e3b0 <gatt_sub_free>
	if (has_subscription) {
   4f0c2:	b36f      	cbz	r7, 4f120 <bt_gatt_unsubscribe+0xc8>
		params->notify(conn, params, NULL, 0);
   4f0c4:	2300      	movs	r3, #0
   4f0c6:	682c      	ldr	r4, [r5, #0]
   4f0c8:	461a      	mov	r2, r3
   4f0ca:	4629      	mov	r1, r5
   4f0cc:	4640      	mov	r0, r8
   4f0ce:	47a0      	blx	r4
	return 0;
   4f0d0:	2000      	movs	r0, #0
   4f0d2:	e014      	b.n	4f0fe <bt_gatt_unsubscribe+0xa6>
		if (params == tmp) {
   4f0d4:	42ac      	cmp	r4, r5
   4f0d6:	d009      	beq.n	4f0ec <bt_gatt_unsubscribe+0x94>
		if (tmp->value_handle == params->value_handle) {
   4f0d8:	8921      	ldrh	r1, [r4, #8]
   4f0da:	892a      	ldrh	r2, [r5, #8]
			has_subscription = true;
   4f0dc:	4291      	cmp	r1, r2
   4f0de:	bf08      	it	eq
   4f0e0:	2701      	moveq	r7, #1
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   4f0e2:	69e4      	ldr	r4, [r4, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   4f0e4:	2c00      	cmp	r4, #0
   4f0e6:	d0c9      	beq.n	4f07c <bt_gatt_unsubscribe+0x24>
   4f0e8:	3c1c      	subs	r4, #28
   4f0ea:	e7c6      	b.n	4f07a <bt_gatt_unsubscribe+0x22>
			found = true;
   4f0ec:	2301      	movs	r3, #1
   4f0ee:	e7f8      	b.n	4f0e2 <bt_gatt_unsubscribe+0x8a>
		params->value = 0x0000;
   4f0f0:	82af      	strh	r7, [r5, #20]
		err = gatt_write_ccc(conn, params);
   4f0f2:	4629      	mov	r1, r5
   4f0f4:	4640      	mov	r0, r8
   4f0f6:	f7e2 fbfb 	bl	318f0 <gatt_write_ccc>
		if (err) {
   4f0fa:	2800      	cmp	r0, #0
   4f0fc:	d0c2      	beq.n	4f084 <bt_gatt_unsubscribe+0x2c>
}
   4f0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	parent->next = child;
   4f102:	6023      	str	r3, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   4f104:	68f3      	ldr	r3, [r6, #12]
   4f106:	429a      	cmp	r2, r3
	list->tail = node;
   4f108:	bf08      	it	eq
   4f10a:	60f4      	streq	r4, [r6, #12]
   4f10c:	e7c8      	b.n	4f0a0 <bt_gatt_unsubscribe+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4f10e:	461c      	mov	r4, r3
   4f110:	681b      	ldr	r3, [r3, #0]
   4f112:	e7ba      	b.n	4f08a <bt_gatt_unsubscribe+0x32>
		return -ENOTCONN;
   4f114:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4f118:	e7f1      	b.n	4f0fe <bt_gatt_unsubscribe+0xa6>
		return -EINVAL;
   4f11a:	f06f 0015 	mvn.w	r0, #21
   4f11e:	e7ee      	b.n	4f0fe <bt_gatt_unsubscribe+0xa6>
	return 0;
   4f120:	4638      	mov	r0, r7
   4f122:	e7ec      	b.n	4f0fe <bt_gatt_unsubscribe+0xa6>

0004f124 <bt_gatt_notification>:
{
   4f124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4f128:	4606      	mov	r6, r0
   4f12a:	4688      	mov	r8, r1
   4f12c:	4691      	mov	r9, r2
   4f12e:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   4f130:	f7e2 f96c 	bl	3140c <gatt_sub_find>
	if (!sub) {
   4f134:	b1e0      	cbz	r0, 4f170 <bt_gatt_notification+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4f136:	6883      	ldr	r3, [r0, #8]
   4f138:	b1d3      	cbz	r3, 4f170 <bt_gatt_notification+0x4c>
   4f13a:	f1b3 051c 	subs.w	r5, r3, #28
   4f13e:	d017      	beq.n	4f170 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   4f140:	681c      	ldr	r4, [r3, #0]
   4f142:	b104      	cbz	r4, 4f146 <bt_gatt_notification+0x22>
   4f144:	3c1c      	subs	r4, #28
		if (handle != params->value_handle) {
   4f146:	892b      	ldrh	r3, [r5, #8]
   4f148:	4543      	cmp	r3, r8
   4f14a:	d10a      	bne.n	4f162 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   4f14c:	682f      	ldr	r7, [r5, #0]
   4f14e:	4653      	mov	r3, sl
   4f150:	464a      	mov	r2, r9
   4f152:	4629      	mov	r1, r5
   4f154:	4630      	mov	r0, r6
   4f156:	47b8      	blx	r7
   4f158:	b918      	cbnz	r0, 4f162 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   4f15a:	4629      	mov	r1, r5
   4f15c:	4630      	mov	r0, r6
   4f15e:	f7ff ff7b 	bl	4f058 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   4f162:	b12c      	cbz	r4, 4f170 <bt_gatt_notification+0x4c>
   4f164:	69e3      	ldr	r3, [r4, #28]
   4f166:	b103      	cbz	r3, 4f16a <bt_gatt_notification+0x46>
   4f168:	3b1c      	subs	r3, #28
{
   4f16a:	4625      	mov	r5, r4
   4f16c:	461c      	mov	r4, r3
   4f16e:	e7ea      	b.n	4f146 <bt_gatt_notification+0x22>
}
   4f170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0004f174 <bt_gatt_mult_notification>:
{
   4f174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4f178:	b085      	sub	sp, #20
   4f17a:	4682      	mov	sl, r0
   4f17c:	460c      	mov	r4, r1
   4f17e:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   4f180:	f7e2 f944 	bl	3140c <gatt_sub_find>
	if (!sub) {
   4f184:	4607      	mov	r7, r0
   4f186:	b140      	cbz	r0, 4f19a <bt_gatt_mult_notification+0x26>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   4f188:	462a      	mov	r2, r5
   4f18a:	4621      	mov	r1, r4
   4f18c:	a801      	add	r0, sp, #4
   4f18e:	f000 ffbb 	bl	50108 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   4f192:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   4f196:	2b04      	cmp	r3, #4
   4f198:	d802      	bhi.n	4f1a0 <bt_gatt_mult_notification+0x2c>
}
   4f19a:	b005      	add	sp, #20
   4f19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   4f1a0:	2104      	movs	r1, #4
   4f1a2:	eb0d 0001 	add.w	r0, sp, r1
   4f1a6:	f001 f827 	bl	501f8 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   4f1aa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   4f1ae:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
   4f1b2:	4543      	cmp	r3, r8
   4f1b4:	d3f1      	bcc.n	4f19a <bt_gatt_mult_notification+0x26>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4f1b6:	68bb      	ldr	r3, [r7, #8]
   4f1b8:	b1eb      	cbz	r3, 4f1f6 <bt_gatt_mult_notification+0x82>
   4f1ba:	f1b3 061c 	subs.w	r6, r3, #28
   4f1be:	d01a      	beq.n	4f1f6 <bt_gatt_mult_notification+0x82>
   4f1c0:	681c      	ldr	r4, [r3, #0]
   4f1c2:	b104      	cbz	r4, 4f1c6 <bt_gatt_mult_notification+0x52>
   4f1c4:	3c1c      	subs	r4, #28
		handle = sys_cpu_to_le16(nfy->handle);
   4f1c6:	4681      	mov	r9, r0
   4f1c8:	f839 bb04 	ldrh.w	fp, [r9], #4
			if (handle != params->value_handle) {
   4f1cc:	8933      	ldrh	r3, [r6, #8]
   4f1ce:	455b      	cmp	r3, fp
   4f1d0:	d10a      	bne.n	4f1e8 <bt_gatt_mult_notification+0x74>
			if (params->notify(conn, params, nfy->value, len) ==
   4f1d2:	4643      	mov	r3, r8
   4f1d4:	464a      	mov	r2, r9
   4f1d6:	4631      	mov	r1, r6
   4f1d8:	4650      	mov	r0, sl
   4f1da:	6835      	ldr	r5, [r6, #0]
   4f1dc:	47a8      	blx	r5
   4f1de:	b918      	cbnz	r0, 4f1e8 <bt_gatt_mult_notification+0x74>
				bt_gatt_unsubscribe(conn, params);
   4f1e0:	4631      	mov	r1, r6
   4f1e2:	4650      	mov	r0, sl
   4f1e4:	f7ff ff38 	bl	4f058 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   4f1e8:	b12c      	cbz	r4, 4f1f6 <bt_gatt_mult_notification+0x82>
   4f1ea:	69e3      	ldr	r3, [r4, #28]
   4f1ec:	b103      	cbz	r3, 4f1f0 <bt_gatt_mult_notification+0x7c>
   4f1ee:	3b1c      	subs	r3, #28
{
   4f1f0:	4626      	mov	r6, r4
   4f1f2:	461c      	mov	r4, r3
   4f1f4:	e7ea      	b.n	4f1cc <bt_gatt_mult_notification+0x58>
		net_buf_simple_pull_mem(&buf, len);
   4f1f6:	4641      	mov	r1, r8
   4f1f8:	a801      	add	r0, sp, #4
   4f1fa:	f000 fffd 	bl	501f8 <net_buf_simple_pull_mem>
   4f1fe:	e7c8      	b.n	4f192 <bt_gatt_mult_notification+0x1e>

0004f200 <bt_gatt_change_aware>:
{
   4f200:	b538      	push	{r3, r4, r5, lr}
   4f202:	460d      	mov	r5, r1
	cfg = find_cf_cfg(conn);
   4f204:	f7e2 f8c0 	bl	31388 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   4f208:	b910      	cbnz	r0, 4f210 <bt_gatt_change_aware+0x10>
		return true;
   4f20a:	2501      	movs	r5, #1
}
   4f20c:	4628      	mov	r0, r5
   4f20e:	bd38      	pop	{r3, r4, r5, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   4f210:	7a03      	ldrb	r3, [r0, #8]
   4f212:	07db      	lsls	r3, r3, #31
   4f214:	d5f9      	bpl.n	4f20a <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   4f216:	f100 040c 	add.w	r4, r0, #12
   4f21a:	2100      	movs	r1, #0
   4f21c:	4620      	mov	r0, r4
   4f21e:	f7ff f80e 	bl	4e23e <atomic_test_bit>
   4f222:	2800      	cmp	r0, #0
   4f224:	d1f1      	bne.n	4f20a <bt_gatt_change_aware+0xa>
	if (!req) {
   4f226:	2d00      	cmp	r5, #0
   4f228:	d0f0      	beq.n	4f20c <bt_gatt_change_aware+0xc>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   4f22a:	2101      	movs	r1, #1
   4f22c:	4620      	mov	r0, r4
   4f22e:	f7ff f806 	bl	4e23e <atomic_test_bit>
   4f232:	4605      	mov	r5, r0
   4f234:	b148      	cbz	r0, 4f24a <bt_gatt_change_aware+0x4a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4f236:	f06f 0102 	mvn.w	r1, #2
   4f23a:	4620      	mov	r0, r4
   4f23c:	f7ff f916 	bl	4e46c <atomic_and>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   4f240:	2101      	movs	r1, #1
   4f242:	4620      	mov	r0, r4
   4f244:	f7ff f857 	bl	4e2f6 <atomic_or>
   4f248:	e7e0      	b.n	4f20c <bt_gatt_change_aware+0xc>
   4f24a:	2102      	movs	r1, #2
   4f24c:	e7f9      	b.n	4f242 <bt_gatt_change_aware+0x42>

0004f24e <ccc_delayed_store>:
{
   4f24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4f252:	4606      	mov	r6, r0
   4f254:	f1a0 0518 	sub.w	r5, r0, #24
			ccc_store->conn_list[i] = NULL;
   4f258:	f04f 0800 	mov.w	r8, #0
		struct bt_conn *conn = ccc_store->conn_list[i];
   4f25c:	f855 4b04 	ldr.w	r4, [r5], #4
		if (!conn) {
   4f260:	b17c      	cbz	r4, 4f282 <ccc_delayed_store+0x34>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   4f262:	f104 0788 	add.w	r7, r4, #136	; 0x88
   4f266:	4639      	mov	r1, r7
   4f268:	7a20      	ldrb	r0, [r4, #8]
   4f26a:	f7fd fc6d 	bl	4cb48 <bt_addr_le_is_bonded>
   4f26e:	b140      	cbz	r0, 4f282 <ccc_delayed_store+0x34>
			ccc_store->conn_list[i] = NULL;
   4f270:	f845 8c04 	str.w	r8, [r5, #-4]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   4f274:	4639      	mov	r1, r7
   4f276:	7a20      	ldrb	r0, [r4, #8]
   4f278:	f7e3 fab6 	bl	327e8 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   4f27c:	4620      	mov	r0, r4
   4f27e:	f7fd ffc6 	bl	4d20e <bt_conn_unref>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   4f282:	42b5      	cmp	r5, r6
   4f284:	d1ea      	bne.n	4f25c <ccc_delayed_store+0xe>
}
   4f286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004f28a <sys_memcpy_swap>:
	psrc += length - 1;
   4f28a:	1e53      	subs	r3, r2, #1
   4f28c:	4419      	add	r1, r3
	for (; length > 0; length--) {
   4f28e:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   4f290:	f811 3901 	ldrb.w	r3, [r1], #-1
   4f294:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   4f298:	4290      	cmp	r0, r2
   4f29a:	d1f9      	bne.n	4f290 <sys_memcpy_swap+0x6>
}
   4f29c:	4770      	bx	lr

0004f29e <smp_encrypt_info>:
}
   4f29e:	2007      	movs	r0, #7
   4f2a0:	4770      	bx	lr

0004f2a2 <smp_chan_get>:
{
   4f2a2:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   4f2a4:	2106      	movs	r1, #6
   4f2a6:	f7fe fa47 	bl	4d738 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   4f2aa:	b100      	cbz	r0, 4f2ae <smp_chan_get+0xc>
	return CONTAINER_OF(chan, struct bt_smp, chan);
   4f2ac:	38f0      	subs	r0, #240	; 0xf0
}
   4f2ae:	bd08      	pop	{r3, pc}

0004f2b0 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4f2b0:	2301      	movs	r3, #1
   4f2b2:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   4f2b6:	f3bf 8f5b 	dmb	ish
   4f2ba:	e850 3f00 	ldrex	r3, [r0]
   4f2be:	430b      	orrs	r3, r1
   4f2c0:	e840 3200 	strex	r2, r3, [r0]
   4f2c4:	2a00      	cmp	r2, #0
   4f2c6:	d1f8      	bne.n	4f2ba <atomic_set_bit+0xa>
   4f2c8:	f3bf 8f5b 	dmb	ish
}
   4f2cc:	4770      	bx	lr

0004f2ce <smp_keypress_notif>:
{
   4f2ce:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   4f2d0:	210e      	movs	r1, #14
   4f2d2:	f7ff ffed 	bl	4f2b0 <atomic_set_bit>
}
   4f2d6:	2000      	movs	r0, #0
   4f2d8:	bd08      	pop	{r3, pc}

0004f2da <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   4f2da:	f3bf 8f5b 	dmb	ish
   4f2de:	6800      	ldr	r0, [r0, #0]
   4f2e0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   4f2e4:	4108      	asrs	r0, r1
}
   4f2e6:	f000 0001 	and.w	r0, r0, #1
   4f2ea:	4770      	bx	lr

0004f2ec <remote_sec_level_reachable>:
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   4f2ec:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	switch (sec) {
   4f2f0:	7a92      	ldrb	r2, [r2, #10]
   4f2f2:	3a01      	subs	r2, #1
{
   4f2f4:	b508      	push	{r3, lr}
   4f2f6:	4603      	mov	r3, r0
	switch (sec) {
   4f2f8:	2a03      	cmp	r2, #3
   4f2fa:	d803      	bhi.n	4f304 <remote_sec_level_reachable+0x18>
   4f2fc:	e8df f002 	tbb	[pc, r2]
   4f300:	04101616 	.word	0x04101616
		return BT_SMP_ERR_UNSPECIFIED;
   4f304:	2008      	movs	r0, #8
}
   4f306:	bd08      	pop	{r3, pc}
	return MIN(req->max_key_size, rsp->max_key_size);
   4f308:	7d02      	ldrb	r2, [r0, #20]
   4f30a:	7b41      	ldrb	r1, [r0, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   4f30c:	428a      	cmp	r2, r1
   4f30e:	bf28      	it	cs
   4f310:	460a      	movcs	r2, r1
   4f312:	2a10      	cmp	r2, #16
   4f314:	d108      	bne.n	4f328 <remote_sec_level_reachable+0x3c>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4f316:	2105      	movs	r1, #5
   4f318:	3004      	adds	r0, #4
   4f31a:	f7ff ffde 	bl	4f2da <atomic_test_bit>
   4f31e:	b108      	cbz	r0, 4f324 <remote_sec_level_reachable+0x38>
		if (smp->method == JUST_WORKS) {
   4f320:	7a1b      	ldrb	r3, [r3, #8]
   4f322:	b91b      	cbnz	r3, 4f32c <remote_sec_level_reachable+0x40>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   4f324:	2003      	movs	r0, #3
   4f326:	e7ee      	b.n	4f306 <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   4f328:	2006      	movs	r0, #6
   4f32a:	e7ec      	b.n	4f306 <remote_sec_level_reachable+0x1a>
		return 0;
   4f32c:	2000      	movs	r0, #0
   4f32e:	e7ea      	b.n	4f306 <remote_sec_level_reachable+0x1a>

0004f330 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   4f330:	2301      	movs	r3, #1
   4f332:	fa03 f101 	lsl.w	r1, r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4f336:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4f338:	f3bf 8f5b 	dmb	ish
   4f33c:	e850 3f00 	ldrex	r3, [r0]
   4f340:	400b      	ands	r3, r1
   4f342:	e840 3200 	strex	r2, r3, [r0]
   4f346:	2a00      	cmp	r2, #0
   4f348:	d1f8      	bne.n	4f33c <atomic_clear_bit+0xc>
   4f34a:	f3bf 8f5b 	dmb	ish
}
   4f34e:	4770      	bx	lr

0004f350 <bt_smp_aes_cmac>:
{
   4f350:	b570      	push	{r4, r5, r6, lr}
   4f352:	b0c2      	sub	sp, #264	; 0x108
   4f354:	460d      	mov	r5, r1
   4f356:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   4f358:	4601      	mov	r1, r0
   4f35a:	aa16      	add	r2, sp, #88	; 0x58
   4f35c:	4668      	mov	r0, sp
{
   4f35e:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   4f360:	f7fc fe33 	bl	4bfca <tc_cmac_setup>
   4f364:	b150      	cbz	r0, 4f37c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   4f366:	4632      	mov	r2, r6
   4f368:	4629      	mov	r1, r5
   4f36a:	4668      	mov	r0, sp
   4f36c:	f7fc fe58 	bl	4c020 <tc_cmac_update>
   4f370:	b120      	cbz	r0, 4f37c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   4f372:	4669      	mov	r1, sp
   4f374:	4620      	mov	r0, r4
   4f376:	f7fc febe 	bl	4c0f6 <tc_cmac_final>
   4f37a:	b918      	cbnz	r0, 4f384 <bt_smp_aes_cmac+0x34>
		return -EIO;
   4f37c:	f06f 0004 	mvn.w	r0, #4
}
   4f380:	b042      	add	sp, #264	; 0x108
   4f382:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   4f384:	2000      	movs	r0, #0
   4f386:	e7fb      	b.n	4f380 <bt_smp_aes_cmac+0x30>

0004f388 <generate_dhkey>:
{
   4f388:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4f38a:	2107      	movs	r1, #7
{
   4f38c:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4f38e:	3004      	adds	r0, #4
   4f390:	f7ff ff8e 	bl	4f2b0 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   4f394:	2008      	movs	r0, #8
   4f396:	f7e3 fbd3 	bl	32b40 <smp_find>
   4f39a:	b920      	cbnz	r0, 4f3a6 <generate_dhkey+0x1e>
		return smp_dhkey_generate(smp);
   4f39c:	4620      	mov	r0, r4
}
   4f39e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_dhkey_generate(smp);
   4f3a2:	f7e3 bc41 	b.w	32c28 <smp_dhkey_generate>
}
   4f3a6:	2000      	movs	r0, #0
   4f3a8:	bd10      	pop	{r4, pc}

0004f3aa <smp_ident_info>:
{
   4f3aa:	b538      	push	{r3, r4, r5, lr}
   4f3ac:	4604      	mov	r4, r0
   4f3ae:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4f3b0:	3004      	adds	r0, #4
   4f3b2:	210d      	movs	r1, #13
   4f3b4:	f7ff ff91 	bl	4f2da <atomic_test_bit>
   4f3b8:	b170      	cbz	r0, 4f3d8 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
   4f3ba:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   4f3bc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   4f3c0:	2002      	movs	r0, #2
   4f3c2:	f103 0288 	add.w	r2, r3, #136	; 0x88
   4f3c6:	7a19      	ldrb	r1, [r3, #8]
   4f3c8:	f000 fe26 	bl	50018 <bt_keys_get_type>
		if (!keys) {
   4f3cc:	b150      	cbz	r0, 4f3e4 <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   4f3ce:	2210      	movs	r2, #16
   4f3d0:	4629      	mov	r1, r5
   4f3d2:	302a      	adds	r0, #42	; 0x2a
   4f3d4:	f7fc ff8a 	bl	4c2ec <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   4f3d8:	4620      	mov	r0, r4
   4f3da:	2109      	movs	r1, #9
   4f3dc:	f7ff ff68 	bl	4f2b0 <atomic_set_bit>
	return 0;
   4f3e0:	2000      	movs	r0, #0
}
   4f3e2:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   4f3e4:	2008      	movs	r0, #8
   4f3e6:	e7fc      	b.n	4f3e2 <smp_ident_info+0x38>

0004f3e8 <le_sc_oob_config_set.isra.4>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4f3e8:	7ac2      	ldrb	r2, [r0, #11]
   4f3ea:	7c83      	ldrb	r3, [r0, #18]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f3ec:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f3f0:	78c0      	ldrb	r0, [r0, #3]
   4f3f2:	f002 0201 	and.w	r2, r2, #1
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   4f3f6:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f3fa:	b930      	cbnz	r0, 4f40a <le_sc_oob_config_set.isra.4+0x22>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   4f3fc:	b95a      	cbnz	r2, 4f416 <le_sc_oob_config_set.isra.4+0x2e>
		if (rsp_oob_present) {
   4f3fe:	2b00      	cmp	r3, #0
				     BT_CONN_OOB_BOTH_PEERS :
   4f400:	bf0c      	ite	eq
   4f402:	2303      	moveq	r3, #3
   4f404:	2300      	movne	r3, #0
	info->lesc.oob_config = oob_config;
   4f406:	700b      	strb	r3, [r1, #0]
}
   4f408:	4770      	bx	lr
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   4f40a:	b94a      	cbnz	r2, 4f420 <le_sc_oob_config_set.isra.4+0x38>
		if (rsp_oob_present) {
   4f40c:	2b00      	cmp	r3, #0
				     BT_CONN_OOB_BOTH_PEERS :
   4f40e:	bf0c      	ite	eq
   4f410:	2303      	moveq	r3, #3
   4f412:	2301      	movne	r3, #1
   4f414:	e7f7      	b.n	4f406 <le_sc_oob_config_set.isra.4+0x1e>
		if (rsp_oob_present) {
   4f416:	2b00      	cmp	r3, #0
				     BT_CONN_OOB_BOTH_PEERS :
   4f418:	bf0c      	ite	eq
   4f41a:	2301      	moveq	r3, #1
   4f41c:	2302      	movne	r3, #2
   4f41e:	e7f2      	b.n	4f406 <le_sc_oob_config_set.isra.4+0x1e>
   4f420:	005b      	lsls	r3, r3, #1
   4f422:	e7f0      	b.n	4f406 <le_sc_oob_config_set.isra.4+0x1e>

0004f424 <smp_keys_check.part.6>:
static bool smp_keys_check(struct bt_conn *conn)
   4f424:	b538      	push	{r3, r4, r5, lr}
	if (!conn->le.keys) {
   4f426:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
static bool smp_keys_check(struct bt_conn *conn)
   4f42a:	4604      	mov	r4, r0
	if (!conn->le.keys) {
   4f42c:	b983      	cbnz	r3, 4f450 <smp_keys_check.part.6+0x2c>
						     conn->id, &conn->le.dst);
   4f42e:	f100 0588 	add.w	r5, r0, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   4f432:	7a01      	ldrb	r1, [r0, #8]
   4f434:	462a      	mov	r2, r5
   4f436:	2020      	movs	r0, #32
   4f438:	f7e4 fbfc 	bl	33c34 <bt_keys_find>
   4f43c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4f440:	b930      	cbnz	r0, 4f450 <smp_keys_check.part.6+0x2c>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   4f442:	462a      	mov	r2, r5
   4f444:	7a21      	ldrb	r1, [r4, #8]
   4f446:	2004      	movs	r0, #4
   4f448:	f7e4 fbf4 	bl	33c34 <bt_keys_find>
   4f44c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   4f450:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   4f454:	b152      	cbz	r2, 4f46c <smp_keys_check.part.6+0x48>
   4f456:	89d3      	ldrh	r3, [r2, #14]
   4f458:	f013 0024 	ands.w	r0, r3, #36	; 0x24
   4f45c:	d005      	beq.n	4f46a <smp_keys_check.part.6+0x46>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   4f45e:	7aa3      	ldrb	r3, [r4, #10]
   4f460:	2b02      	cmp	r3, #2
   4f462:	d905      	bls.n	4f470 <smp_keys_check.part.6+0x4c>
   4f464:	7b50      	ldrb	r0, [r2, #13]
   4f466:	f000 0001 	and.w	r0, r0, #1
}
   4f46a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   4f46c:	4610      	mov	r0, r2
   4f46e:	e7fc      	b.n	4f46a <smp_keys_check.part.6+0x46>
	return true;
   4f470:	2001      	movs	r0, #1
   4f472:	e7fa      	b.n	4f46a <smp_keys_check.part.6+0x46>

0004f474 <update_keys_check>:
{
   4f474:	b510      	push	{r4, lr}
   4f476:	4603      	mov	r3, r0
	if (!keys ||
   4f478:	b1d9      	cbz	r1, 4f4b2 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   4f47a:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   4f47c:	f010 0f24 	tst.w	r0, #36	; 0x24
   4f480:	d017      	beq.n	4f4b2 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   4f482:	7d1a      	ldrb	r2, [r3, #20]
   4f484:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   4f486:	7b09      	ldrb	r1, [r1, #12]
   4f488:	42a2      	cmp	r2, r4
   4f48a:	bf28      	it	cs
   4f48c:	4622      	movcs	r2, r4
   4f48e:	4291      	cmp	r1, r2
   4f490:	d901      	bls.n	4f496 <update_keys_check+0x22>
		return false;
   4f492:	2000      	movs	r0, #0
}
   4f494:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   4f496:	0682      	lsls	r2, r0, #26
   4f498:	d404      	bmi.n	4f4a4 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   4f49a:	7a18      	ldrb	r0, [r3, #8]
   4f49c:	3000      	adds	r0, #0
   4f49e:	bf18      	it	ne
   4f4a0:	2001      	movne	r0, #1
   4f4a2:	e7f7      	b.n	4f494 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4f4a4:	2105      	movs	r1, #5
   4f4a6:	1d18      	adds	r0, r3, #4
   4f4a8:	f7ff ff17 	bl	4f2da <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   4f4ac:	2800      	cmp	r0, #0
   4f4ae:	d1f4      	bne.n	4f49a <update_keys_check+0x26>
   4f4b0:	e7ef      	b.n	4f492 <update_keys_check+0x1e>
		return true;
   4f4b2:	2001      	movs	r0, #1
   4f4b4:	e7ee      	b.n	4f494 <update_keys_check+0x20>

0004f4b6 <smp_create_pdu.isra.8>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   4f4b6:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4f4b8:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   4f4ba:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4f4bc:	4628      	mov	r0, r5
   4f4be:	2104      	movs	r1, #4
   4f4c0:	f7ff ff0b 	bl	4f2da <atomic_test_bit>
   4f4c4:	b970      	cbnz	r0, 4f4e4 <smp_create_pdu.isra.8+0x2e>
		timeout = SMP_TIMEOUT;
   4f4c6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   4f4ca:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   4f4cc:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   4f4ce:	4608      	mov	r0, r1
   4f4d0:	f7fe f886 	bl	4d5e0 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   4f4d4:	4604      	mov	r4, r0
   4f4d6:	b938      	cbnz	r0, 4f4e8 <smp_create_pdu.isra.8+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4f4d8:	2104      	movs	r1, #4
   4f4da:	4628      	mov	r0, r5
   4f4dc:	f7ff fee8 	bl	4f2b0 <atomic_set_bit>
}
   4f4e0:	4620      	mov	r0, r4
   4f4e2:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   4f4e4:	2200      	movs	r2, #0
   4f4e6:	e7f0      	b.n	4f4ca <smp_create_pdu.isra.8+0x14>
   4f4e8:	2101      	movs	r1, #1
   4f4ea:	3008      	adds	r0, #8
   4f4ec:	f000 fe53 	bl	50196 <net_buf_simple_add>
	hdr->code = op;
   4f4f0:	7006      	strb	r6, [r0, #0]
	return buf;
   4f4f2:	e7f5      	b.n	4f4e0 <smp_create_pdu.isra.8+0x2a>

0004f4f4 <smp_signing_info>:
   4f4f4:	2007      	movs	r0, #7
   4f4f6:	4770      	bx	lr

0004f4f8 <sys_mem_swap.constprop.18>:
static inline void sys_mem_swap(void *buf, size_t length)
   4f4f8:	b510      	push	{r4, lr}
   4f4fa:	1e43      	subs	r3, r0, #1
   4f4fc:	f100 0210 	add.w	r2, r0, #16
   4f500:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   4f502:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   4f506:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   4f50a:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   4f50c:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   4f50e:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   4f510:	d1f7      	bne.n	4f502 <sys_mem_swap.constprop.18+0xa>
	}
}
   4f512:	bd10      	pop	{r4, pc}

0004f514 <smp_f6>:
{
   4f514:	b570      	push	{r4, r5, r6, lr}
   4f516:	b096      	sub	sp, #88	; 0x58
   4f518:	4605      	mov	r5, r0
   4f51a:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   4f51c:	a805      	add	r0, sp, #20
   4f51e:	2210      	movs	r2, #16
{
   4f520:	461c      	mov	r4, r3
	sys_memcpy_swap(m, n1, 16);
   4f522:	f7ff feb2 	bl	4f28a <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   4f526:	2210      	movs	r2, #16
   4f528:	4631      	mov	r1, r6
   4f52a:	a809      	add	r0, sp, #36	; 0x24
   4f52c:	f7ff fead 	bl	4f28a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   4f530:	4621      	mov	r1, r4
   4f532:	2210      	movs	r2, #16
   4f534:	a80d      	add	r0, sp, #52	; 0x34
   4f536:	f7ff fea8 	bl	4f28a <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   4f53a:	2203      	movs	r2, #3
   4f53c:	991a      	ldr	r1, [sp, #104]	; 0x68
   4f53e:	a811      	add	r0, sp, #68	; 0x44
   4f540:	f7ff fea3 	bl	4f28a <sys_memcpy_swap>
	m[51] = a1->type;
   4f544:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   4f546:	f814 3b01 	ldrb.w	r3, [r4], #1
   4f54a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   4f54e:	4621      	mov	r1, r4
   4f550:	2206      	movs	r2, #6
   4f552:	a812      	add	r0, sp, #72	; 0x48
   4f554:	f7fc feca 	bl	4c2ec <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   4f558:	4621      	mov	r1, r4
   4f55a:	2206      	movs	r2, #6
   4f55c:	a812      	add	r0, sp, #72	; 0x48
   4f55e:	f7ff fe94 	bl	4f28a <sys_memcpy_swap>
	m[58] = a2->type;
   4f562:	9c1c      	ldr	r4, [sp, #112]	; 0x70
   4f564:	f814 3b01 	ldrb.w	r3, [r4], #1
   4f568:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   4f56c:	4621      	mov	r1, r4
   4f56e:	2206      	movs	r2, #6
   4f570:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   4f574:	f7fc feba 	bl	4c2ec <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   4f578:	4621      	mov	r1, r4
   4f57a:	2206      	movs	r2, #6
   4f57c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   4f580:	f7ff fe83 	bl	4f28a <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   4f584:	2210      	movs	r2, #16
   4f586:	4629      	mov	r1, r5
   4f588:	a801      	add	r0, sp, #4
   4f58a:	f7ff fe7e 	bl	4f28a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   4f58e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   4f590:	2241      	movs	r2, #65	; 0x41
   4f592:	a905      	add	r1, sp, #20
   4f594:	a801      	add	r0, sp, #4
   4f596:	f7ff fedb 	bl	4f350 <bt_smp_aes_cmac>
	if (err) {
   4f59a:	4604      	mov	r4, r0
   4f59c:	b910      	cbnz	r0, 4f5a4 <smp_f6+0x90>
	sys_mem_swap(check, 16);
   4f59e:	981d      	ldr	r0, [sp, #116]	; 0x74
   4f5a0:	f7ff ffaa 	bl	4f4f8 <sys_mem_swap.constprop.18>
}
   4f5a4:	4620      	mov	r0, r4
   4f5a6:	b016      	add	sp, #88	; 0x58
   4f5a8:	bd70      	pop	{r4, r5, r6, pc}

0004f5aa <smp_f4>:
{
   4f5aa:	b570      	push	{r4, r5, r6, lr}
   4f5ac:	b096      	sub	sp, #88	; 0x58
   4f5ae:	4614      	mov	r4, r2
   4f5b0:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   4f5b2:	2220      	movs	r2, #32
   4f5b4:	4601      	mov	r1, r0
   4f5b6:	a805      	add	r0, sp, #20
{
   4f5b8:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
   4f5ba:	f7ff fe66 	bl	4f28a <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   4f5be:	2220      	movs	r2, #32
   4f5c0:	4631      	mov	r1, r6
   4f5c2:	a80d      	add	r0, sp, #52	; 0x34
   4f5c4:	f7ff fe61 	bl	4f28a <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   4f5c8:	4621      	mov	r1, r4
   4f5ca:	2210      	movs	r2, #16
   4f5cc:	a801      	add	r0, sp, #4
	m[64] = z;
   4f5ce:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   4f5d2:	f7ff fe5a 	bl	4f28a <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   4f5d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   4f5d8:	2241      	movs	r2, #65	; 0x41
   4f5da:	a905      	add	r1, sp, #20
   4f5dc:	a801      	add	r0, sp, #4
   4f5de:	f7ff feb7 	bl	4f350 <bt_smp_aes_cmac>
	if (err) {
   4f5e2:	4604      	mov	r4, r0
   4f5e4:	b910      	cbnz	r0, 4f5ec <smp_f4+0x42>
	sys_mem_swap(res, 16);
   4f5e6:	981a      	ldr	r0, [sp, #104]	; 0x68
   4f5e8:	f7ff ff86 	bl	4f4f8 <sys_mem_swap.constprop.18>
}
   4f5ec:	4620      	mov	r0, r4
   4f5ee:	b016      	add	sp, #88	; 0x58
   4f5f0:	bd70      	pop	{r4, r5, r6, pc}

0004f5f2 <smp_send.isra.9.constprop.21>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   4f5f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4f5f4:	2300      	movs	r3, #0
   4f5f6:	9300      	str	r3, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   4f5f8:	4604      	mov	r4, r0
   4f5fa:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   4f5fc:	460a      	mov	r2, r1
   4f5fe:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   4f602:	2106      	movs	r1, #6
   4f604:	f7fd ffef 	bl	4d5e6 <bt_l2cap_send_cb>
   4f608:	b128      	cbz	r0, 4f616 <smp_send.isra.9.constprop.21+0x24>
		net_buf_unref(buf);
   4f60a:	4628      	mov	r0, r5
}
   4f60c:	b003      	add	sp, #12
   4f60e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   4f612:	f7f4 bd29 	b.w	44068 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   4f616:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   4f61a:	2300      	movs	r3, #0
   4f61c:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   4f620:	b003      	add	sp, #12
   4f622:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   4f626:	f7f9 bb51 	b.w	48ccc <k_work_reschedule>

0004f62a <smp_send_pairing_random>:
{
   4f62a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   4f62c:	2104      	movs	r1, #4
{
   4f62e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   4f630:	f7ff ff41 	bl	4f4b6 <smp_create_pdu.isra.8>
	if (!rsp_buf) {
   4f634:	4604      	mov	r4, r0
   4f636:	b170      	cbz	r0, 4f656 <smp_send_pairing_random+0x2c>
   4f638:	2110      	movs	r1, #16
   4f63a:	3008      	adds	r0, #8
   4f63c:	f000 fdab 	bl	50196 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   4f640:	2210      	movs	r2, #16
   4f642:	f105 0127 	add.w	r1, r5, #39	; 0x27
   4f646:	f7fc fe51 	bl	4c2ec <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   4f64a:	4628      	mov	r0, r5
   4f64c:	4621      	mov	r1, r4
   4f64e:	f7ff ffd0 	bl	4f5f2 <smp_send.isra.9.constprop.21>
	return 0;
   4f652:	2000      	movs	r0, #0
}
   4f654:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   4f656:	2008      	movs	r0, #8
   4f658:	e7fc      	b.n	4f654 <smp_send_pairing_random+0x2a>

0004f65a <sc_smp_send_dhkey_check>:
{
   4f65a:	b570      	push	{r4, r5, r6, lr}
   4f65c:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   4f65e:	210d      	movs	r1, #13
{
   4f660:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   4f662:	f7ff ff28 	bl	4f4b6 <smp_create_pdu.isra.8>
	if (!buf) {
   4f666:	4604      	mov	r4, r0
   4f668:	b168      	cbz	r0, 4f686 <sc_smp_send_dhkey_check+0x2c>
   4f66a:	2110      	movs	r1, #16
   4f66c:	3008      	adds	r0, #8
   4f66e:	f000 fd92 	bl	50196 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   4f672:	2210      	movs	r2, #16
   4f674:	4631      	mov	r1, r6
   4f676:	f7fc fe39 	bl	4c2ec <memcpy>
	smp_send(smp, buf, NULL, NULL);
   4f67a:	4628      	mov	r0, r5
   4f67c:	4621      	mov	r1, r4
   4f67e:	f7ff ffb8 	bl	4f5f2 <smp_send.isra.9.constprop.21>
	return 0;
   4f682:	2000      	movs	r0, #0
}
   4f684:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   4f686:	2008      	movs	r0, #8
   4f688:	e7fc      	b.n	4f684 <sc_smp_send_dhkey_check+0x2a>

0004f68a <compute_and_send_central_dhcheck>:
{
   4f68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4f68e:	4604      	mov	r4, r0
   4f690:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   4f692:	2210      	movs	r2, #16
   4f694:	2100      	movs	r1, #0
   4f696:	a808      	add	r0, sp, #32
   4f698:	f7fc fe33 	bl	4c302 <memset>
	switch (smp->method) {
   4f69c:	7a23      	ldrb	r3, [r4, #8]
   4f69e:	2b05      	cmp	r3, #5
   4f6a0:	d821      	bhi.n	4f6e6 <compute_and_send_central_dhcheck+0x5c>
   4f6a2:	e8df f003 	tbb	[pc, r3]
   4f6a6:	0309      	.short	0x0309
   4f6a8:	22200903 	.word	0x22200903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4f6ac:	2204      	movs	r2, #4
   4f6ae:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4f6b2:	a808      	add	r0, sp, #32
   4f6b4:	f7fc fe1a 	bl	4c2ec <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4f6b8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
   4f6bc:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4f6c0:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   4f6c4:	f104 0727 	add.w	r7, r4, #39	; 0x27
   4f6c8:	f104 0837 	add.w	r8, r4, #55	; 0x37
   4f6cc:	e9cd 6201 	strd	r6, r2, [sp, #4]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4f6d0:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
   4f6d4:	9200      	str	r2, [sp, #0]
   4f6d6:	338f      	adds	r3, #143	; 0x8f
   4f6d8:	4642      	mov	r2, r8
   4f6da:	4639      	mov	r1, r7
   4f6dc:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4f6e0:	f7e3 fb3c 	bl	32d5c <smp_f5>
   4f6e4:	b138      	cbz	r0, 4f6f6 <compute_and_send_central_dhcheck+0x6c>
		return BT_SMP_ERR_UNSPECIFIED;
   4f6e6:	2008      	movs	r0, #8
   4f6e8:	e020      	b.n	4f72c <compute_and_send_central_dhcheck+0xa2>
		if (smp->oobd_remote) {
   4f6ea:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   4f6ee:	2900      	cmp	r1, #0
   4f6f0:	d0e2      	beq.n	4f6b8 <compute_and_send_central_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4f6f2:	2210      	movs	r2, #16
   4f6f4:	e7dd      	b.n	4f6b2 <compute_and_send_central_dhcheck+0x28>
		   &smp->chan.chan.conn->le.init_addr,
   4f6f6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, e)) {
   4f6fa:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   4f6fe:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   4f700:	ad04      	add	r5, sp, #16
   4f702:	9301      	str	r3, [sp, #4]
   4f704:	f104 030a 	add.w	r3, r4, #10
   4f708:	9202      	str	r2, [sp, #8]
   4f70a:	9300      	str	r3, [sp, #0]
   4f70c:	9503      	str	r5, [sp, #12]
   4f70e:	ab08      	add	r3, sp, #32
   4f710:	4642      	mov	r2, r8
   4f712:	4639      	mov	r1, r7
   4f714:	4630      	mov	r0, r6
   4f716:	f7ff fefd 	bl	4f514 <smp_f6>
   4f71a:	2800      	cmp	r0, #0
   4f71c:	d1e3      	bne.n	4f6e6 <compute_and_send_central_dhcheck+0x5c>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   4f71e:	210d      	movs	r1, #13
   4f720:	4620      	mov	r0, r4
   4f722:	f7ff fdc5 	bl	4f2b0 <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
   4f726:	4629      	mov	r1, r5
   4f728:	f7ff ff97 	bl	4f65a <sc_smp_send_dhkey_check>
}
   4f72c:	b00c      	add	sp, #48	; 0x30
   4f72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004f732 <compute_and_check_and_send_periph_dhcheck>:
{
   4f732:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4f736:	4604      	mov	r4, r0
   4f738:	b091      	sub	sp, #68	; 0x44
	(void)memset(r, 0, sizeof(r));
   4f73a:	2210      	movs	r2, #16
   4f73c:	2100      	movs	r1, #0
   4f73e:	a80c      	add	r0, sp, #48	; 0x30
   4f740:	f7fc fddf 	bl	4c302 <memset>
	switch (smp->method) {
   4f744:	7a23      	ldrb	r3, [r4, #8]
   4f746:	2b05      	cmp	r3, #5
   4f748:	d821      	bhi.n	4f78e <compute_and_check_and_send_periph_dhcheck+0x5c>
   4f74a:	e8df f003 	tbb	[pc, r3]
   4f74e:	0309      	.short	0x0309
   4f750:	22200903 	.word	0x22200903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4f754:	2204      	movs	r2, #4
   4f756:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4f75a:	a80c      	add	r0, sp, #48	; 0x30
   4f75c:	f7fc fdc6 	bl	4c2ec <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4f760:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
   4f764:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4f768:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   4f76c:	f104 0637 	add.w	r6, r4, #55	; 0x37
   4f770:	f104 0727 	add.w	r7, r4, #39	; 0x27
   4f774:	e9cd 5201 	strd	r5, r2, [sp, #4]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   4f778:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   4f77c:	9200      	str	r2, [sp, #0]
   4f77e:	338f      	adds	r3, #143	; 0x8f
   4f780:	463a      	mov	r2, r7
   4f782:	4631      	mov	r1, r6
   4f784:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4f788:	f7e3 fae8 	bl	32d5c <smp_f5>
   4f78c:	b138      	cbz	r0, 4f79e <compute_and_check_and_send_periph_dhcheck+0x6c>
		return BT_SMP_ERR_UNSPECIFIED;
   4f78e:	2508      	movs	r5, #8
   4f790:	e04c      	b.n	4f82c <compute_and_check_and_send_periph_dhcheck+0xfa>
		if (smp->oobd_remote) {
   4f792:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   4f796:	2900      	cmp	r1, #0
   4f798:	d0e2      	beq.n	4f760 <compute_and_check_and_send_periph_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   4f79a:	2210      	movs	r2, #16
   4f79c:	e7dd      	b.n	4f75a <compute_and_check_and_send_periph_dhcheck+0x28>
		   &smp->chan.chan.conn->le.resp_addr,
   4f79e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.init_addr, e)) {
   4f7a2:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   4f7a6:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   4f7a8:	f10d 0820 	add.w	r8, sp, #32
   4f7ac:	9301      	str	r3, [sp, #4]
   4f7ae:	f104 0311 	add.w	r3, r4, #17
   4f7b2:	9202      	str	r2, [sp, #8]
   4f7b4:	9300      	str	r3, [sp, #0]
   4f7b6:	f8cd 800c 	str.w	r8, [sp, #12]
   4f7ba:	ab0c      	add	r3, sp, #48	; 0x30
   4f7bc:	4632      	mov	r2, r6
   4f7be:	4639      	mov	r1, r7
   4f7c0:	4628      	mov	r0, r5
   4f7c2:	f7ff fea7 	bl	4f514 <smp_f6>
   4f7c6:	2800      	cmp	r0, #0
   4f7c8:	d1e1      	bne.n	4f78e <compute_and_check_and_send_periph_dhcheck+0x5c>
	if (smp->method == LE_SC_OOB) {
   4f7ca:	7a23      	ldrb	r3, [r4, #8]
   4f7cc:	2b05      	cmp	r3, #5
   4f7ce:	d106      	bne.n	4f7de <compute_and_check_and_send_periph_dhcheck+0xac>
		if (smp->oobd_local) {
   4f7d0:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   4f7d4:	2210      	movs	r2, #16
   4f7d6:	a80c      	add	r0, sp, #48	; 0x30
		if (smp->oobd_local) {
   4f7d8:	b361      	cbz	r1, 4f834 <compute_and_check_and_send_periph_dhcheck+0x102>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   4f7da:	f7fc fd87 	bl	4c2ec <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   4f7de:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   4f7e2:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   4f7e6:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   4f7e8:	f10d 0910 	add.w	r9, sp, #16
   4f7ec:	9301      	str	r3, [sp, #4]
   4f7ee:	f104 030a 	add.w	r3, r4, #10
   4f7f2:	9202      	str	r2, [sp, #8]
   4f7f4:	9300      	str	r3, [sp, #0]
   4f7f6:	f8cd 900c 	str.w	r9, [sp, #12]
   4f7fa:	ab0c      	add	r3, sp, #48	; 0x30
   4f7fc:	463a      	mov	r2, r7
   4f7fe:	4631      	mov	r1, r6
   4f800:	4628      	mov	r0, r5
   4f802:	f7ff fe87 	bl	4f514 <smp_f6>
   4f806:	2800      	cmp	r0, #0
   4f808:	d1c1      	bne.n	4f78e <compute_and_check_and_send_periph_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
   4f80a:	2210      	movs	r2, #16
   4f80c:	4649      	mov	r1, r9
   4f80e:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   4f812:	f7fc fd5b 	bl	4c2cc <memcmp>
   4f816:	b980      	cbnz	r0, 4f83a <compute_and_check_and_send_periph_dhcheck+0x108>
	err = sc_smp_send_dhkey_check(smp, e);
   4f818:	4641      	mov	r1, r8
   4f81a:	4620      	mov	r0, r4
   4f81c:	f7ff ff1d 	bl	4f65a <sc_smp_send_dhkey_check>
	if (err) {
   4f820:	4605      	mov	r5, r0
   4f822:	b918      	cbnz	r0, 4f82c <compute_and_check_and_send_periph_dhcheck+0xfa>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f824:	2101      	movs	r1, #1
   4f826:	1d20      	adds	r0, r4, #4
   4f828:	f7ff fd42 	bl	4f2b0 <atomic_set_bit>
}
   4f82c:	4628      	mov	r0, r5
   4f82e:	b011      	add	sp, #68	; 0x44
   4f830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
   4f834:	f7fc fd65 	bl	4c302 <memset>
   4f838:	e7d1      	b.n	4f7de <compute_and_check_and_send_periph_dhcheck+0xac>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4f83a:	250b      	movs	r5, #11
   4f83c:	e7f6      	b.n	4f82c <compute_and_check_and_send_periph_dhcheck+0xfa>

0004f83e <smp_dhkey_check>:
{
   4f83e:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f840:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   4f844:	688f      	ldr	r7, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f846:	78dd      	ldrb	r5, [r3, #3]
{
   4f848:	b091      	sub	sp, #68	; 0x44
   4f84a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f84c:	2d00      	cmp	r5, #0
   4f84e:	d15b      	bne.n	4f908 <smp_dhkey_check+0xca>
		(void)memset(r, 0, sizeof(r));
   4f850:	2210      	movs	r2, #16
   4f852:	4629      	mov	r1, r5
   4f854:	a80c      	add	r0, sp, #48	; 0x30
   4f856:	f7fc fd54 	bl	4c302 <memset>
		switch (smp->method) {
   4f85a:	7a23      	ldrb	r3, [r4, #8]
   4f85c:	2b05      	cmp	r3, #5
   4f85e:	d820      	bhi.n	4f8a2 <smp_dhkey_check+0x64>
   4f860:	e8df f003 	tbb	[pc, r3]
   4f864:	09030309 	.word	0x09030309
   4f868:	231f      	.short	0x231f
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   4f86a:	2204      	movs	r2, #4
   4f86c:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   4f870:	a80c      	add	r0, sp, #48	; 0x30
   4f872:	f7fc fd3b 	bl	4c2ec <memcpy>
			   &smp->chan.chan.conn->le.resp_addr,
   4f876:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
			   &smp->chan.chan.conn->le.init_addr, e)) {
   4f87a:	f103 028f 	add.w	r2, r3, #143	; 0x8f
			   &smp->chan.chan.conn->le.resp_addr,
   4f87e:	3396      	adds	r3, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   4f880:	ae08      	add	r6, sp, #32
   4f882:	9301      	str	r3, [sp, #4]
   4f884:	f104 0311 	add.w	r3, r4, #17
   4f888:	9202      	str	r2, [sp, #8]
   4f88a:	9300      	str	r3, [sp, #0]
   4f88c:	9603      	str	r6, [sp, #12]
   4f88e:	ab0c      	add	r3, sp, #48	; 0x30
   4f890:	f104 0227 	add.w	r2, r4, #39	; 0x27
   4f894:	f104 0137 	add.w	r1, r4, #55	; 0x37
   4f898:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   4f89c:	f7ff fe3a 	bl	4f514 <smp_f6>
   4f8a0:	b148      	cbz	r0, 4f8b6 <smp_dhkey_check+0x78>
			return BT_SMP_ERR_UNSPECIFIED;
   4f8a2:	2508      	movs	r5, #8
}
   4f8a4:	4628      	mov	r0, r5
   4f8a6:	b011      	add	sp, #68	; 0x44
   4f8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (smp->oobd_local) {
   4f8aa:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   4f8ae:	2900      	cmp	r1, #0
   4f8b0:	d0e1      	beq.n	4f876 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   4f8b2:	2210      	movs	r2, #16
   4f8b4:	e7dc      	b.n	4f870 <smp_dhkey_check+0x32>
		if (memcmp(e, req->e, 16)) {
   4f8b6:	4639      	mov	r1, r7
   4f8b8:	2210      	movs	r2, #16
   4f8ba:	4630      	mov	r0, r6
   4f8bc:	f7fc fd06 	bl	4c2cc <memcmp>
   4f8c0:	4607      	mov	r7, r0
   4f8c2:	b9f8      	cbnz	r0, 4f904 <smp_dhkey_check+0xc6>
	return MIN(req->max_key_size, rsp->max_key_size);
   4f8c4:	7b63      	ldrb	r3, [r4, #13]
   4f8c6:	7d26      	ldrb	r6, [r4, #20]
		(void)memset(ediv, 0, sizeof(ediv));
   4f8c8:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   4f8ca:	429e      	cmp	r6, r3
		(void)memset(ediv, 0, sizeof(ediv));
   4f8cc:	f04f 0202 	mov.w	r2, #2
   4f8d0:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   4f8d2:	bf28      	it	cs
   4f8d4:	461e      	movcs	r6, r3
		(void)memset(ediv, 0, sizeof(ediv));
   4f8d6:	f7fc fd14 	bl	4c302 <memset>
		(void)memset(rand, 0, sizeof(rand));
   4f8da:	2208      	movs	r2, #8
   4f8dc:	4639      	mov	r1, r7
   4f8de:	a806      	add	r0, sp, #24
   4f8e0:	f7fc fd0f 	bl	4c302 <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   4f8e4:	9600      	str	r6, [sp, #0]
   4f8e6:	f104 0347 	add.w	r3, r4, #71	; 0x47
   4f8ea:	aa05      	add	r2, sp, #20
   4f8ec:	a906      	add	r1, sp, #24
   4f8ee:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   4f8f2:	f7fd fcd6 	bl	4d2a2 <bt_conn_le_start_encryption>
   4f8f6:	2800      	cmp	r0, #0
   4f8f8:	dbd3      	blt.n	4f8a2 <smp_dhkey_check+0x64>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4f8fa:	2101      	movs	r1, #1
   4f8fc:	1d20      	adds	r0, r4, #4
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f8fe:	f7ff fcd7 	bl	4f2b0 <atomic_set_bit>
			return 0;
   4f902:	e7cf      	b.n	4f8a4 <smp_dhkey_check+0x66>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4f904:	250b      	movs	r5, #11
   4f906:	e7cd      	b.n	4f8a4 <smp_dhkey_check+0x66>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   4f908:	2d01      	cmp	r5, #1
   4f90a:	d114      	bne.n	4f936 <smp_dhkey_check+0xf8>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   4f90c:	1d06      	adds	r6, r0, #4
   4f90e:	2110      	movs	r1, #16
   4f910:	4630      	mov	r0, r6
   4f912:	f7ff fd0d 	bl	4f330 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   4f916:	2210      	movs	r2, #16
   4f918:	4639      	mov	r1, r7
   4f91a:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   4f91e:	f7fc fce5 	bl	4c2ec <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   4f922:	2107      	movs	r1, #7
   4f924:	4630      	mov	r0, r6
   4f926:	f7ff fcd8 	bl	4f2da <atomic_test_bit>
   4f92a:	4605      	mov	r5, r0
   4f92c:	b128      	cbz	r0, 4f93a <smp_dhkey_check+0xfc>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f92e:	2109      	movs	r1, #9
   4f930:	4630      	mov	r0, r6
   4f932:	f7ff fcbd 	bl	4f2b0 <atomic_set_bit>
	return 0;
   4f936:	2500      	movs	r5, #0
   4f938:	e7b4      	b.n	4f8a4 <smp_dhkey_check+0x66>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4f93a:	210a      	movs	r1, #10
   4f93c:	4630      	mov	r0, r6
   4f93e:	f7ff fccc 	bl	4f2da <atomic_test_bit>
   4f942:	b110      	cbz	r0, 4f94a <smp_dhkey_check+0x10c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4f944:	2109      	movs	r1, #9
   4f946:	4630      	mov	r0, r6
   4f948:	e7d9      	b.n	4f8fe <smp_dhkey_check+0xc0>
		return compute_and_check_and_send_periph_dhcheck(smp);
   4f94a:	4620      	mov	r0, r4
   4f94c:	f7ff fef1 	bl	4f732 <compute_and_check_and_send_periph_dhcheck>
   4f950:	4605      	mov	r5, r0
   4f952:	e7a7      	b.n	4f8a4 <smp_dhkey_check+0x66>

0004f954 <smp_pairing_confirm>:
{
   4f954:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   4f956:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   4f958:	1d05      	adds	r5, r0, #4
{
   4f95a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   4f95c:	210b      	movs	r1, #11
   4f95e:	4628      	mov	r0, r5
   4f960:	f7ff fce6 	bl	4f330 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   4f964:	2210      	movs	r2, #16
   4f966:	4631      	mov	r1, r6
   4f968:	f104 0017 	add.w	r0, r4, #23
   4f96c:	f7fc fcbe 	bl	4c2ec <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4f970:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4f974:	78db      	ldrb	r3, [r3, #3]
   4f976:	b93b      	cbnz	r3, 4f988 <smp_pairing_confirm+0x34>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   4f978:	4620      	mov	r0, r4
   4f97a:	2104      	movs	r1, #4
   4f97c:	f7ff fc98 	bl	4f2b0 <atomic_set_bit>
}
   4f980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
   4f984:	f7ff be51 	b.w	4f62a <smp_send_pairing_random>
	switch (smp->method) {
   4f988:	7a23      	ldrb	r3, [r4, #8]
   4f98a:	2b01      	cmp	r3, #1
   4f98c:	d009      	beq.n	4f9a2 <smp_pairing_confirm+0x4e>
   4f98e:	2b02      	cmp	r3, #2
   4f990:	d113      	bne.n	4f9ba <smp_pairing_confirm+0x66>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   4f992:	4620      	mov	r0, r4
   4f994:	2104      	movs	r1, #4
   4f996:	f7ff fc8b 	bl	4f2b0 <atomic_set_bit>
}
   4f99a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   4f99e:	f7e3 bb7f 	b.w	330a0 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4f9a2:	210a      	movs	r1, #10
   4f9a4:	4628      	mov	r0, r5
   4f9a6:	f7ff fc98 	bl	4f2da <atomic_test_bit>
   4f9aa:	2800      	cmp	r0, #0
   4f9ac:	d0f1      	beq.n	4f992 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   4f9ae:	4628      	mov	r0, r5
   4f9b0:	2100      	movs	r1, #0
   4f9b2:	f7ff fc7d 	bl	4f2b0 <atomic_set_bit>
			return 0;
   4f9b6:	2000      	movs	r0, #0
}
   4f9b8:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   4f9ba:	2008      	movs	r0, #8
   4f9bc:	e7fc      	b.n	4f9b8 <smp_pairing_confirm+0x64>

0004f9be <smp_central_ident>:
   4f9be:	2007      	movs	r0, #7
   4f9c0:	4770      	bx	lr

0004f9c2 <atomic_test_and_clear_bit>:
{
   4f9c2:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   4f9c4:	2301      	movs	r3, #1
   4f9c6:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   4f9ca:	43ca      	mvns	r2, r1
   4f9cc:	f3bf 8f5b 	dmb	ish
   4f9d0:	e850 3f00 	ldrex	r3, [r0]
   4f9d4:	ea03 0c02 	and.w	ip, r3, r2
   4f9d8:	e840 ce00 	strex	lr, ip, [r0]
   4f9dc:	f1be 0f00 	cmp.w	lr, #0
   4f9e0:	d1f6      	bne.n	4f9d0 <atomic_test_and_clear_bit+0xe>
   4f9e2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   4f9e6:	420b      	tst	r3, r1
}
   4f9e8:	bf14      	ite	ne
   4f9ea:	2001      	movne	r0, #1
   4f9ec:	2000      	moveq	r0, #0
   4f9ee:	f85d fb04 	ldr.w	pc, [sp], #4

0004f9f2 <smp_reset>:
{
   4f9f2:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   4f9f4:	1d03      	adds	r3, r0, #4
   4f9f6:	4604      	mov	r4, r0
   4f9f8:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   4f9fa:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
   4f9fe:	f3bf 8f5b 	dmb	ish
   4fa02:	e853 2f00 	ldrex	r2, [r3]
   4fa06:	e843 5100 	strex	r1, r5, [r3]
   4fa0a:	2900      	cmp	r1, #0
   4fa0c:	d1f9      	bne.n	4fa02 <smp_reset+0x10>
   4fa0e:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   4fa12:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   4fa16:	f001 fbdb 	bl	511d0 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   4fa1a:	7225      	strb	r5, [r4, #8]
   4fa1c:	f3bf 8f5b 	dmb	ish
   4fa20:	e854 3f00 	ldrex	r3, [r4]
   4fa24:	e844 5200 	strex	r2, r5, [r4]
   4fa28:	2a00      	cmp	r2, #0
   4fa2a:	d1f9      	bne.n	4fa20 <smp_reset+0x2e>
   4fa2c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4fa30:	78f3      	ldrb	r3, [r6, #3]
   4fa32:	b92b      	cbnz	r3, 4fa40 <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   4fa34:	210b      	movs	r1, #11
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4fa36:	4620      	mov	r0, r4
}
   4fa38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4fa3c:	f7ff bc38 	b.w	4f2b0 <atomic_set_bit>
   4fa40:	2101      	movs	r1, #1
   4fa42:	e7f8      	b.n	4fa36 <smp_reset+0x44>

0004fa44 <bt_smp_request_ltk>:
{
   4fa44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4fa48:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   4fa4a:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
   4fa4e:	4604      	mov	r4, r0
   4fa50:	4690      	mov	r8, r2
   4fa52:	4699      	mov	r9, r3
	smp = smp_chan_get(conn);
   4fa54:	f7ff fc25 	bl	4f2a2 <smp_chan_get>
	if (!smp) {
   4fa58:	4605      	mov	r5, r0
   4fa5a:	2800      	cmp	r0, #0
   4fa5c:	d070      	beq.n	4fb40 <bt_smp_request_ltk+0xfc>
	if (ediv == 0U && rand == 0U &&
   4fa5e:	1d06      	adds	r6, r0, #4
   4fa60:	f1ba 0f00 	cmp.w	sl, #0
   4fa64:	d127      	bne.n	4fab6 <bt_smp_request_ltk+0x72>
   4fa66:	ea58 0309 	orrs.w	r3, r8, r9
   4fa6a:	d124      	bne.n	4fab6 <bt_smp_request_ltk+0x72>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4fa6c:	2103      	movs	r1, #3
   4fa6e:	4630      	mov	r0, r6
   4fa70:	f7ff fc33 	bl	4f2da <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   4fa74:	b1f8      	cbz	r0, 4fab6 <bt_smp_request_ltk+0x72>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4fa76:	2101      	movs	r1, #1
   4fa78:	4630      	mov	r0, r6
   4fa7a:	f7ff fc2e 	bl	4f2da <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   4fa7e:	4683      	mov	fp, r0
   4fa80:	b1c8      	cbz	r0, 4fab6 <bt_smp_request_ltk+0x72>
	return MIN(req->max_key_size, rsp->max_key_size);
   4fa82:	7d2c      	ldrb	r4, [r5, #20]
   4fa84:	7b6b      	ldrb	r3, [r5, #13]
   4fa86:	429c      	cmp	r4, r3
   4fa88:	bf28      	it	cs
   4fa8a:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   4fa8c:	4622      	mov	r2, r4
   4fa8e:	f105 0147 	add.w	r1, r5, #71	; 0x47
   4fa92:	4638      	mov	r0, r7
   4fa94:	f7fc fc2a 	bl	4c2ec <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   4fa98:	2c0f      	cmp	r4, #15
   4fa9a:	d805      	bhi.n	4faa8 <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   4fa9c:	f1c4 0210 	rsb	r2, r4, #16
   4faa0:	4651      	mov	r1, sl
   4faa2:	1938      	adds	r0, r7, r4
   4faa4:	f7fc fc2d 	bl	4c302 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4faa8:	2101      	movs	r1, #1
   4faaa:	4630      	mov	r0, r6
   4faac:	f7ff fc00 	bl	4f2b0 <atomic_set_bit>
}
   4fab0:	4658      	mov	r0, fp
   4fab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!conn->le.keys) {
   4fab6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4faba:	b983      	cbnz	r3, 4fade <bt_smp_request_ltk+0x9a>
					     &conn->le.dst);
   4fabc:	f104 0b88 	add.w	fp, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   4fac0:	465a      	mov	r2, fp
   4fac2:	7a21      	ldrb	r1, [r4, #8]
   4fac4:	2020      	movs	r0, #32
   4fac6:	f7e4 f8b5 	bl	33c34 <bt_keys_find>
   4faca:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4face:	b930      	cbnz	r0, 4fade <bt_smp_request_ltk+0x9a>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   4fad0:	465a      	mov	r2, fp
   4fad2:	7a21      	ldrb	r1, [r4, #8]
   4fad4:	2001      	movs	r0, #1
   4fad6:	f7e4 f8ad 	bl	33c34 <bt_keys_find>
   4fada:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   4fade:	f1ba 0f00 	cmp.w	sl, #0
   4fae2:	d11d      	bne.n	4fb20 <bt_smp_request_ltk+0xdc>
   4fae4:	ea58 0309 	orrs.w	r3, r8, r9
   4fae8:	d11a      	bne.n	4fb20 <bt_smp_request_ltk+0xdc>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   4faea:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   4faee:	b1b9      	cbz	r1, 4fb20 <bt_smp_request_ltk+0xdc>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   4faf0:	89cb      	ldrh	r3, [r1, #14]
   4faf2:	069b      	lsls	r3, r3, #26
   4faf4:	d514      	bpl.n	4fb20 <bt_smp_request_ltk+0xdc>
		enc_size = conn->le.keys->enc_size;
   4faf6:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   4faf8:	4638      	mov	r0, r7
   4fafa:	4622      	mov	r2, r4
   4fafc:	311a      	adds	r1, #26
   4fafe:	f7fc fbf5 	bl	4c2ec <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   4fb02:	2c0f      	cmp	r4, #15
   4fb04:	d805      	bhi.n	4fb12 <bt_smp_request_ltk+0xce>
			(void)memset(ltk + enc_size, 0,
   4fb06:	f1c4 0210 	rsb	r2, r4, #16
   4fb0a:	4651      	mov	r1, sl
   4fb0c:	1938      	adds	r0, r7, r4
   4fb0e:	f7fc fbf8 	bl	4c302 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   4fb12:	2101      	movs	r1, #1
   4fb14:	4630      	mov	r0, r6
   4fb16:	f7ff fbcb 	bl	4f2b0 <atomic_set_bit>
		return true;
   4fb1a:	f04f 0b01 	mov.w	fp, #1
   4fb1e:	e7c7      	b.n	4fab0 <bt_smp_request_ltk+0x6c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4fb20:	210f      	movs	r1, #15
   4fb22:	4630      	mov	r0, r6
   4fb24:	f7ff fbd9 	bl	4f2da <atomic_test_bit>
   4fb28:	b120      	cbz	r0, 4fb34 <bt_smp_request_ltk+0xf0>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   4fb2a:	2202      	movs	r2, #2
   4fb2c:	2106      	movs	r1, #6
   4fb2e:	4620      	mov	r0, r4
   4fb30:	f7e0 f98c 	bl	2fe4c <bt_conn_security_changed>
	smp_reset(smp);
   4fb34:	4628      	mov	r0, r5
   4fb36:	f7ff ff5c 	bl	4f9f2 <smp_reset>
	return false;
   4fb3a:	f04f 0b00 	mov.w	fp, #0
   4fb3e:	e7b7      	b.n	4fab0 <bt_smp_request_ltk+0x6c>
		return false;
   4fb40:	4683      	mov	fp, r0
   4fb42:	e7b5      	b.n	4fab0 <bt_smp_request_ltk+0x6c>

0004fb44 <bt_smp_sign>:
   4fb44:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4fb48:	4770      	bx	lr

0004fb4a <bt_smp_start_security>:
{
   4fb4a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   4fb4e:	78c7      	ldrb	r7, [r0, #3]
{
   4fb50:	4604      	mov	r4, r0
	switch (conn->role) {
   4fb52:	b127      	cbz	r7, 4fb5e <bt_smp_start_security+0x14>
   4fb54:	2f01      	cmp	r7, #1
   4fb56:	d043      	beq.n	4fbe0 <bt_smp_start_security+0x96>
		return -EINVAL;
   4fb58:	f06f 0415 	mvn.w	r4, #21
   4fb5c:	e005      	b.n	4fb6a <bt_smp_start_security+0x20>
		smp = smp_chan_get(conn);
   4fb5e:	f7ff fba0 	bl	4f2a2 <smp_chan_get>
		if (!smp) {
   4fb62:	4606      	mov	r6, r0
   4fb64:	b928      	cbnz	r0, 4fb72 <bt_smp_start_security+0x28>
			return -ENOTCONN;
   4fb66:	f06f 047f 	mvn.w	r4, #127	; 0x7f
}
   4fb6a:	4620      	mov	r0, r4
   4fb6c:	b003      	add	sp, #12
   4fb6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   4fb72:	1d05      	adds	r5, r0, #4
   4fb74:	2103      	movs	r1, #3
   4fb76:	4628      	mov	r0, r5
   4fb78:	f7ff fbaf 	bl	4f2da <atomic_test_bit>
   4fb7c:	b110      	cbz	r0, 4fb84 <bt_smp_start_security+0x3a>
			return -EBUSY;
   4fb7e:	f06f 040f 	mvn.w	r4, #15
   4fb82:	e7f2      	b.n	4fb6a <bt_smp_start_security+0x20>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4fb84:	2101      	movs	r1, #1
   4fb86:	4628      	mov	r0, r5
   4fb88:	f7ff fba7 	bl	4f2da <atomic_test_bit>
   4fb8c:	2800      	cmp	r0, #0
   4fb8e:	d1f6      	bne.n	4fb7e <bt_smp_start_security+0x34>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   4fb90:	210b      	movs	r1, #11
   4fb92:	1d20      	adds	r0, r4, #4
   4fb94:	f7ff fba1 	bl	4f2da <atomic_test_bit>
   4fb98:	b128      	cbz	r0, 4fba6 <bt_smp_start_security+0x5c>
			return smp_send_pairing_req(conn);
   4fb9a:	4620      	mov	r0, r4
}
   4fb9c:	b003      	add	sp, #12
   4fb9e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   4fba2:	f7e3 b973 	b.w	32e8c <smp_send_pairing_req>
   4fba6:	4620      	mov	r0, r4
   4fba8:	f7ff fc3c 	bl	4f424 <smp_keys_check.part.6>
		if (!smp_keys_check(conn)) {
   4fbac:	2800      	cmp	r0, #0
   4fbae:	d0f4      	beq.n	4fb9a <bt_smp_start_security+0x50>
						  conn->le.keys->ltk.rand,
   4fbb0:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   4fbb4:	7b0b      	ldrb	r3, [r1, #12]
   4fbb6:	9300      	str	r3, [sp, #0]
   4fbb8:	f101 0218 	add.w	r2, r1, #24
   4fbbc:	f101 031a 	add.w	r3, r1, #26
   4fbc0:	4620      	mov	r0, r4
   4fbc2:	3110      	adds	r1, #16
   4fbc4:	f7fd fb6d 	bl	4d2a2 <bt_conn_le_start_encryption>
		if (err) {
   4fbc8:	4604      	mov	r4, r0
   4fbca:	2800      	cmp	r0, #0
   4fbcc:	d1cd      	bne.n	4fb6a <bt_smp_start_security+0x20>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   4fbce:	210b      	movs	r1, #11
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   4fbd0:	4630      	mov	r0, r6
   4fbd2:	f7ff fb6d 	bl	4f2b0 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   4fbd6:	2101      	movs	r1, #1
   4fbd8:	4628      	mov	r0, r5
   4fbda:	f7ff fb69 	bl	4f2b0 <atomic_set_bit>
	return 0;
   4fbde:	e7c4      	b.n	4fb6a <bt_smp_start_security+0x20>
	smp = smp_chan_get(conn);
   4fbe0:	f7ff fb5f 	bl	4f2a2 <smp_chan_get>
	if (!smp) {
   4fbe4:	4605      	mov	r5, r0
   4fbe6:	2800      	cmp	r0, #0
   4fbe8:	d0bd      	beq.n	4fb66 <bt_smp_start_security+0x1c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   4fbea:	1d06      	adds	r6, r0, #4
   4fbec:	2104      	movs	r1, #4
   4fbee:	4630      	mov	r0, r6
   4fbf0:	f7ff fb73 	bl	4f2da <atomic_test_bit>
   4fbf4:	2800      	cmp	r0, #0
   4fbf6:	d152      	bne.n	4fc9e <bt_smp_start_security+0x154>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   4fbf8:	2103      	movs	r1, #3
   4fbfa:	4630      	mov	r0, r6
   4fbfc:	f7ff fb6d 	bl	4f2da <atomic_test_bit>
   4fc00:	2800      	cmp	r0, #0
   4fc02:	d1bc      	bne.n	4fb7e <bt_smp_start_security+0x34>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   4fc04:	4639      	mov	r1, r7
   4fc06:	4630      	mov	r0, r6
   4fc08:	f7ff fb67 	bl	4f2da <atomic_test_bit>
   4fc0c:	2800      	cmp	r0, #0
   4fc0e:	d1b6      	bne.n	4fb7e <bt_smp_start_security+0x34>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   4fc10:	7aa0      	ldrb	r0, [r4, #10]
   4fc12:	f7e3 f83d 	bl	32c90 <sec_level_reachable.isra.2>
   4fc16:	b168      	cbz	r0, 4fc34 <bt_smp_start_security+0xea>
	if (!conn->le.keys) {
   4fc18:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   4fc1c:	b9b3      	cbnz	r3, 4fc4c <bt_smp_start_security+0x102>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   4fc1e:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4fc22:	7a20      	ldrb	r0, [r4, #8]
   4fc24:	f7e3 ff88 	bl	33b38 <bt_keys_get_addr>
   4fc28:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   4fc2c:	b970      	cbnz	r0, 4fc4c <bt_smp_start_security+0x102>
			return -ENOMEM;
   4fc2e:	f06f 040b 	mvn.w	r4, #11
   4fc32:	e79a      	b.n	4fb6a <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   4fc34:	210b      	movs	r1, #11
   4fc36:	1d20      	adds	r0, r4, #4
   4fc38:	f7ff fb4f 	bl	4f2da <atomic_test_bit>
   4fc3c:	2800      	cmp	r0, #0
   4fc3e:	d18b      	bne.n	4fb58 <bt_smp_start_security+0xe>
   4fc40:	4620      	mov	r0, r4
   4fc42:	f7ff fbef 	bl	4f424 <smp_keys_check.part.6>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   4fc46:	2800      	cmp	r0, #0
   4fc48:	d1e6      	bne.n	4fc18 <bt_smp_start_security+0xce>
   4fc4a:	e785      	b.n	4fb58 <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   4fc4c:	4628      	mov	r0, r5
   4fc4e:	f7e3 f869 	bl	32d24 <smp_init>
   4fc52:	4680      	mov	r8, r0
   4fc54:	b110      	cbz	r0, 4fc5c <bt_smp_start_security+0x112>
		return -ENOBUFS;
   4fc56:	f06f 0468 	mvn.w	r4, #104	; 0x68
   4fc5a:	e786      	b.n	4fb6a <bt_smp_start_security+0x20>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   4fc5c:	210b      	movs	r1, #11
   4fc5e:	4628      	mov	r0, r5
   4fc60:	f7ff fc29 	bl	4f4b6 <smp_create_pdu.isra.8>
	if (!req_buf) {
   4fc64:	4607      	mov	r7, r0
   4fc66:	2800      	cmp	r0, #0
   4fc68:	d0f5      	beq.n	4fc56 <bt_smp_start_security+0x10c>
   4fc6a:	2101      	movs	r1, #1
   4fc6c:	3008      	adds	r0, #8
   4fc6e:	f000 fa92 	bl	50196 <net_buf_simple_add>
   4fc72:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   4fc74:	2009      	movs	r0, #9
   4fc76:	f7e2 ffed 	bl	32c54 <get_auth.isra.1>
   4fc7a:	4643      	mov	r3, r8
   4fc7c:	f889 0000 	strb.w	r0, [r9]
   4fc80:	463a      	mov	r2, r7
   4fc82:	4620      	mov	r0, r4
   4fc84:	f8cd 8000 	str.w	r8, [sp]
   4fc88:	2106      	movs	r1, #6
   4fc8a:	f7fd fcac 	bl	4d5e6 <bt_l2cap_send_cb>
	if (err) {
   4fc8e:	4604      	mov	r4, r0
   4fc90:	b118      	cbz	r0, 4fc9a <bt_smp_start_security+0x150>
		net_buf_unref(req_buf);
   4fc92:	4638      	mov	r0, r7
   4fc94:	f7f4 f9e8 	bl	44068 <net_buf_unref>
		return err;
   4fc98:	e767      	b.n	4fb6a <bt_smp_start_security+0x20>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   4fc9a:	210f      	movs	r1, #15
   4fc9c:	e798      	b.n	4fbd0 <bt_smp_start_security+0x86>
		return -EIO;
   4fc9e:	f06f 0404 	mvn.w	r4, #4
   4fca2:	e762      	b.n	4fb6a <bt_smp_start_security+0x20>

0004fca4 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4fca4:	1d03      	adds	r3, r0, #4
{
   4fca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4fca8:	4605      	mov	r5, r0
   4fcaa:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4fcac:	4618      	mov	r0, r3
   4fcae:	2103      	movs	r1, #3
   4fcb0:	f7ff fb13 	bl	4f2da <atomic_test_bit>
   4fcb4:	b1f0      	cbz	r0, 4fcf4 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   4fcb6:	4631      	mov	r1, r6
   4fcb8:	4628      	mov	r0, r5
   4fcba:	f7e3 fdb1 	bl	33820 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   4fcbe:	2105      	movs	r1, #5
   4fcc0:	4628      	mov	r0, r5
   4fcc2:	f7ff fbf8 	bl	4f4b6 <smp_create_pdu.isra.8>
	if (!buf) {
   4fcc6:	4604      	mov	r4, r0
   4fcc8:	b308      	cbz	r0, 4fd0e <smp_error+0x6a>
   4fcca:	2101      	movs	r1, #1
   4fccc:	3008      	adds	r0, #8
   4fcce:	f000 fa62 	bl	50196 <net_buf_simple_add>
	rsp->reason = reason;
   4fcd2:	7006      	strb	r6, [r0, #0]
   4fcd4:	2600      	movs	r6, #0
   4fcd6:	9600      	str	r6, [sp, #0]
   4fcd8:	4633      	mov	r3, r6
   4fcda:	4622      	mov	r2, r4
   4fcdc:	2106      	movs	r1, #6
   4fcde:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   4fce2:	f7fd fc80 	bl	4d5e6 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   4fce6:	b118      	cbz	r0, 4fcf0 <smp_error+0x4c>
		net_buf_unref(buf);
   4fce8:	4620      	mov	r0, r4
   4fcea:	f7f4 f9bd 	bl	44068 <net_buf_unref>
	return 0;
   4fcee:	4630      	mov	r0, r6
}
   4fcf0:	b002      	add	sp, #8
   4fcf2:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4fcf4:	2101      	movs	r1, #1
   4fcf6:	4618      	mov	r0, r3
   4fcf8:	f7ff faef 	bl	4f2da <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4fcfc:	2800      	cmp	r0, #0
   4fcfe:	d1da      	bne.n	4fcb6 <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4fd00:	210f      	movs	r1, #15
   4fd02:	4618      	mov	r0, r3
   4fd04:	f7ff fae9 	bl	4f2da <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4fd08:	2800      	cmp	r0, #0
   4fd0a:	d1d4      	bne.n	4fcb6 <smp_error+0x12>
   4fd0c:	e7d7      	b.n	4fcbe <smp_error+0x1a>
		return -ENOBUFS;
   4fd0e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   4fd12:	e7ed      	b.n	4fcf0 <smp_error+0x4c>

0004fd14 <bt_smp_dhkey_ready>:
{
   4fd14:	b570      	push	{r4, r5, r6, lr}
   4fd16:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   4fd18:	2008      	movs	r0, #8
   4fd1a:	f7e2 ff11 	bl	32b40 <smp_find>
	if (smp) {
   4fd1e:	4604      	mov	r4, r0
   4fd20:	b1b8      	cbz	r0, 4fd52 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   4fd22:	1d05      	adds	r5, r0, #4
   4fd24:	2108      	movs	r1, #8
   4fd26:	4628      	mov	r0, r5
   4fd28:	f7ff fb02 	bl	4f330 <atomic_clear_bit>
	if (!dhkey) {
   4fd2c:	b3c6      	cbz	r6, 4fda0 <bt_smp_dhkey_ready+0x8c>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   4fd2e:	2107      	movs	r1, #7
   4fd30:	f7ff fafe 	bl	4f330 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   4fd34:	4631      	mov	r1, r6
   4fd36:	2220      	movs	r2, #32
   4fd38:	f104 0097 	add.w	r0, r4, #151	; 0x97
   4fd3c:	f7fc fad6 	bl	4c2ec <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   4fd40:	210a      	movs	r1, #10
   4fd42:	4628      	mov	r0, r5
   4fd44:	f7ff fac9 	bl	4f2da <atomic_test_bit>
   4fd48:	b168      	cbz	r0, 4fd66 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4fd4a:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4fd4c:	4628      	mov	r0, r5
   4fd4e:	f7ff faaf 	bl	4f2b0 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   4fd52:	2007      	movs	r0, #7
   4fd54:	f7e2 fef4 	bl	32b40 <smp_find>
		if (smp) {
   4fd58:	4604      	mov	r4, r0
   4fd5a:	b118      	cbz	r0, 4fd64 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   4fd5c:	f7e2 ff64 	bl	32c28 <smp_dhkey_generate>
			if (err) {
   4fd60:	4601      	mov	r1, r0
   4fd62:	b9b0      	cbnz	r0, 4fd92 <bt_smp_dhkey_ready+0x7e>
}
   4fd64:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   4fd66:	2110      	movs	r1, #16
   4fd68:	4628      	mov	r0, r5
   4fd6a:	f7ff fab6 	bl	4f2da <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   4fd6e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   4fd70:	2800      	cmp	r0, #0
   4fd72:	d1eb      	bne.n	4fd4c <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   4fd74:	4628      	mov	r0, r5
   4fd76:	f7ff fab0 	bl	4f2da <atomic_test_bit>
   4fd7a:	2800      	cmp	r0, #0
   4fd7c:	d0e9      	beq.n	4fd52 <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4fd7e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   4fd82:	78db      	ldrb	r3, [r3, #3]
			return compute_and_send_central_dhcheck(smp);
   4fd84:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   4fd86:	b943      	cbnz	r3, 4fd9a <bt_smp_dhkey_ready+0x86>
			return compute_and_send_central_dhcheck(smp);
   4fd88:	f7ff fc7f 	bl	4f68a <compute_and_send_central_dhcheck>
		if (err) {
   4fd8c:	2800      	cmp	r0, #0
   4fd8e:	d0e0      	beq.n	4fd52 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   4fd90:	4601      	mov	r1, r0
   4fd92:	4620      	mov	r0, r4
   4fd94:	f7ff ff86 	bl	4fca4 <smp_error>
   4fd98:	e7db      	b.n	4fd52 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   4fd9a:	f7ff fcca 	bl	4f732 <compute_and_check_and_send_periph_dhcheck>
   4fd9e:	e7f5      	b.n	4fd8c <bt_smp_dhkey_ready+0x78>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   4fda0:	200b      	movs	r0, #11
   4fda2:	e7f5      	b.n	4fd90 <bt_smp_dhkey_ready+0x7c>

0004fda4 <smp_ident_addr_info>:
{
   4fda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   4fda8:	688e      	ldr	r6, [r1, #8]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   4fdaa:	7833      	ldrb	r3, [r6, #0]
{
   4fdac:	4604      	mov	r4, r0
   4fdae:	b123      	cbz	r3, 4fdba <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   4fdb0:	79b3      	ldrb	r3, [r6, #6]
   4fdb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4fdb6:	2bc0      	cmp	r3, #192	; 0xc0
   4fdb8:	d176      	bne.n	4fea8 <smp_ident_addr_info+0x104>
	struct bt_conn *conn = smp->chan.chan.conn;
   4fdba:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   4fdbe:	f105 0888 	add.w	r8, r5, #136	; 0x88
	return memcmp(a, b, sizeof(*a));
   4fdc2:	2207      	movs	r2, #7
   4fdc4:	4631      	mov	r1, r6
   4fdc6:	4640      	mov	r0, r8
   4fdc8:	f7fc fa80 	bl	4c2cc <memcmp>
   4fdcc:	b180      	cbz	r0, 4fdf0 <smp_ident_addr_info+0x4c>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   4fdce:	4631      	mov	r1, r6
   4fdd0:	7a28      	ldrb	r0, [r5, #8]
   4fdd2:	f7e3 ffa5 	bl	33d20 <bt_keys_find_addr>
		if (keys) {
   4fdd6:	4607      	mov	r7, r0
   4fdd8:	b150      	cbz	r0, 4fdf0 <smp_ident_addr_info+0x4c>
			if (!update_keys_check(smp, keys)) {
   4fdda:	4601      	mov	r1, r0
   4fddc:	4620      	mov	r0, r4
   4fdde:	f7ff fb49 	bl	4f474 <update_keys_check>
   4fde2:	b910      	cbnz	r0, 4fdea <smp_ident_addr_info+0x46>
				return BT_SMP_ERR_UNSPECIFIED;
   4fde4:	2008      	movs	r0, #8
}
   4fde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_keys_clear(keys);
   4fdea:	4638      	mov	r0, r7
   4fdec:	f7e3 ffb8 	bl	33d60 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4fdf0:	210d      	movs	r1, #13
   4fdf2:	1d20      	adds	r0, r4, #4
   4fdf4:	f7ff fa71 	bl	4f2da <atomic_test_bit>
   4fdf8:	b398      	cbz	r0, 4fe62 <smp_ident_addr_info+0xbe>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   4fdfa:	4642      	mov	r2, r8
   4fdfc:	7a29      	ldrb	r1, [r5, #8]
   4fdfe:	2002      	movs	r0, #2
   4fe00:	f000 f90a 	bl	50018 <bt_keys_get_type>
		if (!keys) {
   4fe04:	4607      	mov	r7, r0
   4fe06:	2800      	cmp	r0, #0
   4fe08:	d0ec      	beq.n	4fde4 <smp_ident_addr_info+0x40>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   4fe0a:	78eb      	ldrb	r3, [r5, #3]
   4fe0c:	2b00      	cmp	r3, #0
   4fe0e:	d148      	bne.n	4fea2 <smp_ident_addr_info+0xfe>
			dst = &conn->le.resp_addr;
   4fe10:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   4fe14:	780b      	ldrb	r3, [r1, #0]
   4fe16:	2b01      	cmp	r3, #1
   4fe18:	d120      	bne.n	4fe5c <smp_ident_addr_info+0xb8>
		if (bt_addr_le_is_rpa(dst)) {
   4fe1a:	798b      	ldrb	r3, [r1, #6]
   4fe1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4fe20:	2b40      	cmp	r3, #64	; 0x40
   4fe22:	d11b      	bne.n	4fe5c <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   4fe24:	2206      	movs	r2, #6
   4fe26:	3101      	adds	r1, #1
   4fe28:	f107 003a 	add.w	r0, r7, #58	; 0x3a
   4fe2c:	f7fc fa5e 	bl	4c2ec <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   4fe30:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   4fe34:	b193      	cbz	r3, 4fe5c <smp_ident_addr_info+0xb8>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   4fe36:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   4fe3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   4fe3e:	2bc0      	cmp	r3, #192	; 0xc0
   4fe40:	d00c      	beq.n	4fe5c <smp_ident_addr_info+0xb8>
	memcpy(dst, src, sizeof(*dst));
   4fe42:	2207      	movs	r2, #7
   4fe44:	4631      	mov	r1, r6
   4fe46:	1c78      	adds	r0, r7, #1
   4fe48:	f7fc fa50 	bl	4c2ec <memcpy>
   4fe4c:	2207      	movs	r2, #7
   4fe4e:	4631      	mov	r1, r6
   4fe50:	4640      	mov	r0, r8
   4fe52:	f7fc fa4b 	bl	4c2ec <memcpy>
				bt_conn_identity_resolved(conn);
   4fe56:	4628      	mov	r0, r5
   4fe58:	f7df ffca 	bl	2fdf0 <bt_conn_identity_resolved>
		bt_id_add(keys);
   4fe5c:	4638      	mov	r0, r7
   4fe5e:	f7de fbef 	bl	2e640 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   4fe62:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   4fe66:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   4fe6a:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   4fe6c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   4fe70:	d503      	bpl.n	4fe7a <smp_ident_addr_info+0xd6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   4fe72:	210a      	movs	r1, #10
   4fe74:	4620      	mov	r0, r4
   4fe76:	f7ff fa1b 	bl	4f2b0 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   4fe7a:	78eb      	ldrb	r3, [r5, #3]
   4fe7c:	b943      	cbnz	r3, 4fe90 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   4fe7e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   4fe82:	b92b      	cbnz	r3, 4fe90 <smp_ident_addr_info+0xec>
	struct bt_keys *keys = conn->le.keys;
   4fe84:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (!keys) {
   4fe88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   4fe8c:	2b00      	cmp	r3, #0
   4fe8e:	d0a9      	beq.n	4fde4 <smp_ident_addr_info+0x40>
	if (!smp->local_dist && !smp->remote_dist) {
   4fe90:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   4fe94:	b91d      	cbnz	r5, 4fe9e <smp_ident_addr_info+0xfa>
		smp_pairing_complete(smp, 0);
   4fe96:	4629      	mov	r1, r5
   4fe98:	4620      	mov	r0, r4
   4fe9a:	f7e3 fcc1 	bl	33820 <smp_pairing_complete>
	return 0;
   4fe9e:	2000      	movs	r0, #0
   4fea0:	e7a1      	b.n	4fde6 <smp_ident_addr_info+0x42>
			dst = &conn->le.init_addr;
   4fea2:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   4fea6:	e7b5      	b.n	4fe14 <smp_ident_addr_info+0x70>
		return BT_SMP_ERR_INVALID_PARAMS;
   4fea8:	200a      	movs	r0, #10
   4feaa:	e79c      	b.n	4fde6 <smp_ident_addr_info+0x42>

0004feac <bt_smp_disconnected>:
{
   4feac:	b570      	push	{r4, r5, r6, lr}
   4feae:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   4feb0:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   4feb4:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4feb8:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   4feba:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   4febe:	f001 f987 	bl	511d0 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4fec2:	2103      	movs	r1, #3
   4fec4:	4620      	mov	r0, r4
   4fec6:	f7ff fa08 	bl	4f2da <atomic_test_bit>
   4feca:	b1a0      	cbz	r0, 4fef6 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4fecc:	2108      	movs	r1, #8
   4fece:	4630      	mov	r0, r6
   4fed0:	f7e3 fca6 	bl	33820 <smp_pairing_complete>
	if (keys) {
   4fed4:	b13d      	cbz	r5, 4fee6 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   4fed6:	89eb      	ldrh	r3, [r5, #14]
   4fed8:	b113      	cbz	r3, 4fee0 <bt_smp_disconnected+0x34>
   4feda:	7b6b      	ldrb	r3, [r5, #13]
   4fedc:	079b      	lsls	r3, r3, #30
   4fede:	d502      	bpl.n	4fee6 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   4fee0:	4628      	mov	r0, r5
   4fee2:	f7e3 ff3d 	bl	33d60 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   4fee6:	4630      	mov	r0, r6
   4fee8:	f44f 7202 	mov.w	r2, #520	; 0x208
   4feec:	2100      	movs	r1, #0
}
   4feee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   4fef2:	f7fc ba06 	b.w	4c302 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4fef6:	2101      	movs	r1, #1
   4fef8:	4620      	mov	r0, r4
   4fefa:	f7ff f9ee 	bl	4f2da <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   4fefe:	2800      	cmp	r0, #0
   4ff00:	d1e4      	bne.n	4fecc <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   4ff02:	210f      	movs	r1, #15
   4ff04:	4620      	mov	r0, r4
   4ff06:	f7ff f9e8 	bl	4f2da <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   4ff0a:	2800      	cmp	r0, #0
   4ff0c:	d1de      	bne.n	4fecc <bt_smp_disconnected+0x20>
   4ff0e:	e7e1      	b.n	4fed4 <bt_smp_disconnected+0x28>

0004ff10 <smp_timeout>:
{
   4ff10:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4ff12:	2108      	movs	r1, #8
{
   4ff14:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   4ff16:	f5a0 70ec 	sub.w	r0, r0, #472	; 0x1d8
   4ff1a:	f7e3 fc81 	bl	33820 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4ff1e:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   4ff22:	2104      	movs	r1, #4
}
   4ff24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   4ff28:	f7ff b9c2 	b.w	4f2b0 <atomic_set_bit>

0004ff2c <bt_smp_update_keys>:
{
   4ff2c:	b570      	push	{r4, r5, r6, lr}
   4ff2e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   4ff30:	f7ff f9b7 	bl	4f2a2 <smp_chan_get>
	if (!smp) {
   4ff34:	4605      	mov	r5, r0
   4ff36:	2800      	cmp	r0, #0
   4ff38:	d06b      	beq.n	50012 <bt_smp_update_keys+0xe6>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   4ff3a:	1d06      	adds	r6, r0, #4
   4ff3c:	2103      	movs	r1, #3
   4ff3e:	4630      	mov	r0, r6
   4ff40:	f7ff f9cb 	bl	4f2da <atomic_test_bit>
   4ff44:	2800      	cmp	r0, #0
   4ff46:	d064      	beq.n	50012 <bt_smp_update_keys+0xe6>
	if (conn->le.keys) {
   4ff48:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4ff4c:	b108      	cbz	r0, 4ff52 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   4ff4e:	f7e3 ff07 	bl	33d60 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   4ff52:	f104 0188 	add.w	r1, r4, #136	; 0x88
   4ff56:	7a20      	ldrb	r0, [r4, #8]
   4ff58:	f7e3 fdee 	bl	33b38 <bt_keys_get_addr>
   4ff5c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   4ff60:	b928      	cbnz	r0, 4ff6e <bt_smp_update_keys+0x42>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   4ff62:	4628      	mov	r0, r5
   4ff64:	2108      	movs	r1, #8
}
   4ff66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   4ff6a:	f7ff be9b 	b.w	4fca4 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   4ff6e:	210e      	movs	r1, #14
   4ff70:	4630      	mov	r0, r6
   4ff72:	f7ff f9b2 	bl	4f2da <atomic_test_bit>
   4ff76:	b128      	cbz	r0, 4ff84 <bt_smp_update_keys+0x58>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   4ff78:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   4ff7c:	7b53      	ldrb	r3, [r2, #13]
   4ff7e:	f043 0302 	orr.w	r3, r3, #2
   4ff82:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   4ff84:	7a28      	ldrb	r0, [r5, #8]
   4ff86:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   4ff8a:	2806      	cmp	r0, #6
   4ff8c:	7b53      	ldrb	r3, [r2, #13]
   4ff8e:	d83a      	bhi.n	50006 <bt_smp_update_keys+0xda>
   4ff90:	2101      	movs	r1, #1
   4ff92:	4081      	lsls	r1, r0
   4ff94:	f011 0f6e 	tst.w	r1, #110	; 0x6e
   4ff98:	d035      	beq.n	50006 <bt_smp_update_keys+0xda>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   4ff9a:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   4ff9e:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   4ffa0:	7b6b      	ldrb	r3, [r5, #13]
   4ffa2:	7d29      	ldrb	r1, [r5, #20]
   4ffa4:	428b      	cmp	r3, r1
   4ffa6:	bf28      	it	cs
   4ffa8:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   4ffaa:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4ffac:	2105      	movs	r1, #5
   4ffae:	4630      	mov	r0, r6
   4ffb0:	f7ff f993 	bl	4f2da <atomic_test_bit>
   4ffb4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   4ffb8:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   4ffba:	b338      	cbz	r0, 5000c <bt_smp_update_keys+0xe0>
		conn->le.keys->flags |= BT_KEYS_SC;
   4ffbc:	f042 0210 	orr.w	r2, r2, #16
   4ffc0:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   4ffc2:	210d      	movs	r1, #13
   4ffc4:	4630      	mov	r0, r6
   4ffc6:	f7ff f988 	bl	4f2da <atomic_test_bit>
   4ffca:	b310      	cbz	r0, 50012 <bt_smp_update_keys+0xe6>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   4ffcc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4ffd0:	2120      	movs	r1, #32
   4ffd2:	f000 f831 	bl	50038 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   4ffd6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4ffda:	f105 0147 	add.w	r1, r5, #71	; 0x47
   4ffde:	2210      	movs	r2, #16
   4ffe0:	301a      	adds	r0, #26
   4ffe2:	f7fc f983 	bl	4c2ec <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   4ffe6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4ffea:	2208      	movs	r2, #8
   4ffec:	2100      	movs	r1, #0
   4ffee:	3010      	adds	r0, #16
   4fff0:	f7fc f987 	bl	4c302 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   4fff4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   4fff8:	2202      	movs	r2, #2
   4fffa:	2100      	movs	r1, #0
   4fffc:	3018      	adds	r0, #24
}
   4fffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   50002:	f7fc b97e 	b.w	4c302 <memset>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   50006:	f023 0301 	bic.w	r3, r3, #1
   5000a:	e7c8      	b.n	4ff9e <bt_smp_update_keys+0x72>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   5000c:	f022 0210 	bic.w	r2, r2, #16
   50010:	735a      	strb	r2, [r3, #13]
}
   50012:	bd70      	pop	{r4, r5, r6, pc}

00050014 <id_add>:
	bt_id_add(keys);
   50014:	f7de bb14 	b.w	2e640 <bt_id_add>

00050018 <bt_keys_get_type>:
{
   50018:	b570      	push	{r4, r5, r6, lr}
   5001a:	4604      	mov	r4, r0
   5001c:	460d      	mov	r5, r1
   5001e:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   50020:	f7e3 fe08 	bl	33c34 <bt_keys_find>
	if (keys) {
   50024:	b938      	cbnz	r0, 50036 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   50026:	4631      	mov	r1, r6
   50028:	4628      	mov	r0, r5
   5002a:	f7e3 fd85 	bl	33b38 <bt_keys_get_addr>
	if (!keys) {
   5002e:	b110      	cbz	r0, 50036 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   50030:	89c3      	ldrh	r3, [r0, #14]
   50032:	431c      	orrs	r4, r3
   50034:	81c4      	strh	r4, [r0, #14]
}
   50036:	bd70      	pop	{r4, r5, r6, pc}

00050038 <bt_keys_add_type>:
	keys->keys |= type;
   50038:	89c3      	ldrh	r3, [r0, #14]
   5003a:	4319      	orrs	r1, r3
   5003c:	81c1      	strh	r1, [r0, #14]
}
   5003e:	4770      	bx	lr

00050040 <keys_set>:
{
   50040:	b570      	push	{r4, r5, r6, lr}
   50042:	4614      	mov	r4, r2
   50044:	b090      	sub	sp, #64	; 0x40
	if (!name) {
   50046:	4605      	mov	r5, r0
   50048:	b910      	cbnz	r0, 50050 <keys_set+0x10>
			return -EINVAL;
   5004a:	f06f 0415 	mvn.w	r4, #21
   5004e:	e01d      	b.n	5008c <keys_set+0x4c>
	len = read_cb(cb_arg, val, sizeof(val));
   50050:	2234      	movs	r2, #52	; 0x34
   50052:	a903      	add	r1, sp, #12
   50054:	4618      	mov	r0, r3
   50056:	47a0      	blx	r4
	if (len < 0) {
   50058:	1e04      	subs	r4, r0, #0
   5005a:	dbf6      	blt.n	5004a <keys_set+0xa>
	err = bt_settings_decode_key(name, &addr);
   5005c:	a901      	add	r1, sp, #4
   5005e:	4628      	mov	r0, r5
   50060:	f7fc fa0d 	bl	4c47e <bt_settings_decode_key>
	if (err) {
   50064:	4606      	mov	r6, r0
   50066:	2800      	cmp	r0, #0
   50068:	d1ef      	bne.n	5004a <keys_set+0xa>
	settings_name_next(name, &next);
   5006a:	4669      	mov	r1, sp
   5006c:	4628      	mov	r0, r5
   5006e:	f7fa fe5f 	bl	4ad30 <settings_name_next>
	if (!next) {
   50072:	9800      	ldr	r0, [sp, #0]
   50074:	b968      	cbnz	r0, 50092 <keys_set+0x52>
	if (!len) {
   50076:	b99c      	cbnz	r4, 500a0 <keys_set+0x60>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   50078:	aa01      	add	r2, sp, #4
   5007a:	4621      	mov	r1, r4
   5007c:	203f      	movs	r0, #63	; 0x3f
   5007e:	f7e3 fdd9 	bl	33c34 <bt_keys_find>
		if (keys) {
   50082:	b118      	cbz	r0, 5008c <keys_set+0x4c>
			(void)memset(keys, 0, sizeof(*keys));
   50084:	2240      	movs	r2, #64	; 0x40
   50086:	4621      	mov	r1, r4
   50088:	f7fc f93b 	bl	4c302 <memset>
}
   5008c:	4620      	mov	r0, r4
   5008e:	b010      	add	sp, #64	; 0x40
   50090:	bd70      	pop	{r4, r5, r6, pc}
		unsigned long next_id = strtoul(next, NULL, 10);
   50092:	220a      	movs	r2, #10
   50094:	4631      	mov	r1, r6
   50096:	f7fc f874 	bl	4c182 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   5009a:	2800      	cmp	r0, #0
   5009c:	d0eb      	beq.n	50076 <keys_set+0x36>
   5009e:	e7d4      	b.n	5004a <keys_set+0xa>
	keys = bt_keys_get_addr(id, &addr);
   500a0:	a901      	add	r1, sp, #4
   500a2:	2000      	movs	r0, #0
   500a4:	f7e3 fd48 	bl	33b38 <bt_keys_get_addr>
	if (!keys) {
   500a8:	b158      	cbz	r0, 500c2 <keys_set+0x82>
	if (len != BT_KEYS_STORAGE_LEN) {
   500aa:	2c34      	cmp	r4, #52	; 0x34
   500ac:	d002      	beq.n	500b4 <keys_set+0x74>
			bt_keys_clear(keys);
   500ae:	f7e3 fe57 	bl	33d60 <bt_keys_clear>
   500b2:	e7ca      	b.n	5004a <keys_set+0xa>
		memcpy(keys->storage_start, val, len);
   500b4:	4622      	mov	r2, r4
   500b6:	a903      	add	r1, sp, #12
   500b8:	300c      	adds	r0, #12
   500ba:	f7fc f917 	bl	4c2ec <memcpy>
	return 0;
   500be:	2400      	movs	r4, #0
   500c0:	e7e4      	b.n	5008c <keys_set+0x4c>
		return -ENOMEM;
   500c2:	f06f 040b 	mvn.w	r4, #11
   500c6:	e7e1      	b.n	5008c <keys_set+0x4c>

000500c8 <fixed_data_unref>:
}
   500c8:	4770      	bx	lr

000500ca <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   500ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   500cc:	6849      	ldr	r1, [r1, #4]
   500ce:	6809      	ldr	r1, [r1, #0]
   500d0:	f7f3 bf3a 	b.w	43f48 <net_buf_alloc_len>

000500d4 <net_buf_get>:
{
   500d4:	b570      	push	{r4, r5, r6, lr}
   500d6:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   500d8:	f7f8 fbbc 	bl	48854 <z_impl_k_queue_get>
	if (!buf) {
   500dc:	4605      	mov	r5, r0
   500de:	b128      	cbz	r0, 500ec <net_buf_get+0x18>
   500e0:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   500e2:	7963      	ldrb	r3, [r4, #5]
   500e4:	f013 0301 	ands.w	r3, r3, #1
   500e8:	d102      	bne.n	500f0 <net_buf_get+0x1c>
	frag->frags = NULL;
   500ea:	6023      	str	r3, [r4, #0]
}
   500ec:	4628      	mov	r0, r5
   500ee:	bd70      	pop	{r4, r5, r6, pc}
   500f0:	2300      	movs	r3, #0
   500f2:	2200      	movs	r2, #0
   500f4:	4630      	mov	r0, r6
   500f6:	f7f8 fbad 	bl	48854 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   500fa:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   500fc:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   500fe:	f023 0301 	bic.w	r3, r3, #1
   50102:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   50104:	4604      	mov	r4, r0
   50106:	e7ec      	b.n	500e2 <net_buf_get+0xe>

00050108 <net_buf_simple_init_with_data>:
	buf->size  = size;
   50108:	b292      	uxth	r2, r2
	buf->__buf = data;
   5010a:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   5010c:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   5010e:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   50110:	8082      	strh	r2, [r0, #4]
}
   50112:	4770      	bx	lr

00050114 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   50114:	6883      	ldr	r3, [r0, #8]
   50116:	4419      	add	r1, r3
   50118:	6001      	str	r1, [r0, #0]
}
   5011a:	4770      	bx	lr

0005011c <net_buf_put>:
{
   5011c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   5011e:	460a      	mov	r2, r1
   50120:	6814      	ldr	r4, [r2, #0]
   50122:	b914      	cbnz	r4, 5012a <net_buf_put+0xe>
}
   50124:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   50126:	f000 bf66 	b.w	50ff6 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   5012a:	7953      	ldrb	r3, [r2, #5]
   5012c:	f043 0301 	orr.w	r3, r3, #1
   50130:	7153      	strb	r3, [r2, #5]
   50132:	4622      	mov	r2, r4
   50134:	e7f4      	b.n	50120 <net_buf_put+0x4>

00050136 <net_buf_ref>:
	buf->ref++;
   50136:	7903      	ldrb	r3, [r0, #4]
   50138:	3301      	adds	r3, #1
   5013a:	7103      	strb	r3, [r0, #4]
}
   5013c:	4770      	bx	lr

0005013e <net_buf_frag_last>:
	while (buf->frags) {
   5013e:	6803      	ldr	r3, [r0, #0]
   50140:	b903      	cbnz	r3, 50144 <net_buf_frag_last+0x6>
}
   50142:	4770      	bx	lr
   50144:	4618      	mov	r0, r3
   50146:	e7fa      	b.n	5013e <net_buf_frag_last>

00050148 <net_buf_frag_insert>:
	if (parent->frags) {
   50148:	6802      	ldr	r2, [r0, #0]
{
   5014a:	b510      	push	{r4, lr}
	if (parent->frags) {
   5014c:	b11a      	cbz	r2, 50156 <net_buf_frag_insert+0xe>
   5014e:	460b      	mov	r3, r1
	while (buf->frags) {
   50150:	681c      	ldr	r4, [r3, #0]
   50152:	b914      	cbnz	r4, 5015a <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   50154:	601a      	str	r2, [r3, #0]
	parent->frags = frag;
   50156:	6001      	str	r1, [r0, #0]
}
   50158:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   5015a:	4623      	mov	r3, r4
   5015c:	e7f8      	b.n	50150 <net_buf_frag_insert+0x8>

0005015e <net_buf_frag_add>:
{
   5015e:	b510      	push	{r4, lr}
	if (!head) {
   50160:	4604      	mov	r4, r0
   50162:	b928      	cbnz	r0, 50170 <net_buf_frag_add+0x12>
	buf->ref++;
   50164:	790b      	ldrb	r3, [r1, #4]
   50166:	3301      	adds	r3, #1
   50168:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   5016a:	4608      	mov	r0, r1
}
   5016c:	bd10      	pop	{r4, pc}
	while (buf->frags) {
   5016e:	4618      	mov	r0, r3
   50170:	6803      	ldr	r3, [r0, #0]
   50172:	2b00      	cmp	r3, #0
   50174:	d1fb      	bne.n	5016e <net_buf_frag_add+0x10>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   50176:	f7ff ffe7 	bl	50148 <net_buf_frag_insert>
   5017a:	4620      	mov	r0, r4
   5017c:	e7f6      	b.n	5016c <net_buf_frag_add+0xe>

0005017e <net_buf_frag_del>:
{
   5017e:	b510      	push	{r4, lr}
	if (parent) {
   50180:	b108      	cbz	r0, 50186 <net_buf_frag_del+0x8>
   50182:	680b      	ldr	r3, [r1, #0]
		parent->frags = frag->frags;
   50184:	6003      	str	r3, [r0, #0]
	next_frag = frag->frags;
   50186:	680c      	ldr	r4, [r1, #0]
	frag->frags = NULL;
   50188:	2300      	movs	r3, #0
	net_buf_unref(frag);
   5018a:	4608      	mov	r0, r1
	frag->frags = NULL;
   5018c:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   5018e:	f7f3 ff6b 	bl	44068 <net_buf_unref>
}
   50192:	4620      	mov	r0, r4
   50194:	bd10      	pop	{r4, pc}

00050196 <net_buf_simple_add>:
	return buf->data + buf->len;
   50196:	8883      	ldrh	r3, [r0, #4]
   50198:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   5019a:	4419      	add	r1, r3
   5019c:	8081      	strh	r1, [r0, #4]
	return tail;
}
   5019e:	18d0      	adds	r0, r2, r3
   501a0:	4770      	bx	lr

000501a2 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   501a2:	b430      	push	{r4, r5}
   501a4:	8883      	ldrh	r3, [r0, #4]
   501a6:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   501a8:	189d      	adds	r5, r3, r2
   501aa:	8085      	strh	r5, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   501ac:	18e0      	adds	r0, r4, r3
}
   501ae:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   501b0:	f7fc b89c 	b.w	4c2ec <memcpy>

000501b4 <net_buf_simple_add_u8>:
   501b4:	8883      	ldrh	r3, [r0, #4]
   501b6:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   501b8:	b510      	push	{r4, lr}
	buf->len += len;
   501ba:	1c5c      	adds	r4, r3, #1
   501bc:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   501be:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   501c0:	18d0      	adds	r0, r2, r3
   501c2:	bd10      	pop	{r4, pc}

000501c4 <net_buf_simple_add_le16>:
   501c4:	8883      	ldrh	r3, [r0, #4]
   501c6:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   501c8:	b530      	push	{r4, r5, lr}
   501ca:	18d4      	adds	r4, r2, r3
	buf->len += len;
   501cc:	1c9d      	adds	r5, r3, #2
   501ce:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   501d0:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   501d2:	0a09      	lsrs	r1, r1, #8
   501d4:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   501d6:	bd30      	pop	{r4, r5, pc}

000501d8 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   501d8:	6803      	ldr	r3, [r0, #0]
	buf->len += len;
   501da:	8882      	ldrh	r2, [r0, #4]
	buf->data -= len;
   501dc:	1a5b      	subs	r3, r3, r1
	buf->len += len;
   501de:	4411      	add	r1, r2
	buf->data -= len;
   501e0:	6003      	str	r3, [r0, #0]
	buf->len += len;
   501e2:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   501e4:	4618      	mov	r0, r3
   501e6:	4770      	bx	lr

000501e8 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   501e8:	8883      	ldrh	r3, [r0, #4]
   501ea:	1a5b      	subs	r3, r3, r1
   501ec:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   501ee:	6803      	ldr	r3, [r0, #0]
   501f0:	4419      	add	r1, r3
   501f2:	6001      	str	r1, [r0, #0]
}
   501f4:	4608      	mov	r0, r1
   501f6:	4770      	bx	lr

000501f8 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   501f8:	4603      	mov	r3, r0
	void *data = buf->data;
   501fa:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   501fc:	889a      	ldrh	r2, [r3, #4]
   501fe:	1a52      	subs	r2, r2, r1
	buf->data += len;
   50200:	4401      	add	r1, r0
	buf->len -= len;
   50202:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   50204:	6019      	str	r1, [r3, #0]

	return data;
}
   50206:	4770      	bx	lr

00050208 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   50208:	b508      	push	{r3, lr}
	uint8_t val;

	val = buf->data[0];
   5020a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   5020c:	2101      	movs	r1, #1
	val = buf->data[0];
   5020e:	781a      	ldrb	r2, [r3, #0]
	net_buf_simple_pull(buf, 1);
   50210:	f7ff ffea 	bl	501e8 <net_buf_simple_pull>

	return val;
}
   50214:	4610      	mov	r0, r2
   50216:	bd08      	pop	{r3, pc}

00050218 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   50218:	b508      	push	{r3, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   5021a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   5021c:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   5021e:	881a      	ldrh	r2, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   50220:	f7ff ffe2 	bl	501e8 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   50224:	4610      	mov	r0, r2
   50226:	bd08      	pop	{r3, pc}

00050228 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   50228:	6802      	ldr	r2, [r0, #0]
   5022a:	6880      	ldr	r0, [r0, #8]
}
   5022c:	1a10      	subs	r0, r2, r0
   5022e:	4770      	bx	lr

00050230 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   50230:	8883      	ldrh	r3, [r0, #4]
   50232:	88c2      	ldrh	r2, [r0, #6]
   50234:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   50236:	6803      	ldr	r3, [r0, #0]
   50238:	6880      	ldr	r0, [r0, #8]
   5023a:	1a18      	subs	r0, r3, r0
}
   5023c:	1a10      	subs	r0, r2, r0
   5023e:	4770      	bx	lr

00050240 <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   50240:	7081      	strb	r1, [r0, #2]
}
   50242:	4770      	bx	lr

00050244 <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
   50244:	2000      	movs	r0, #0
   50246:	4770      	bx	lr

00050248 <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
   50248:	6903      	ldr	r3, [r0, #16]
   5024a:	6842      	ldr	r2, [r0, #4]
   5024c:	685b      	ldr	r3, [r3, #4]
   5024e:	6852      	ldr	r2, [r2, #4]
	dst[0] = val;
   50250:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
   50252:	f3c3 2307 	ubfx	r3, r3, #8, #8
   50256:	7453      	strb	r3, [r2, #17]
}
   50258:	2000      	movs	r0, #0
   5025a:	4770      	bx	lr

0005025c <hid_int_ep_write>:
{
   5025c:	b430      	push	{r4, r5}
	const struct usb_cfg_data *cfg = dev->config;
   5025e:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
   50260:	6900      	ldr	r0, [r0, #16]
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
   50262:	7b05      	ldrb	r5, [r0, #12]
   50264:	b135      	cbz	r5, 50274 <hid_int_ep_write+0x18>
   50266:	7b40      	ldrb	r0, [r0, #13]
   50268:	b920      	cbnz	r0, 50274 <hid_int_ep_write+0x18>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
   5026a:	6a20      	ldr	r0, [r4, #32]
}
   5026c:	bc30      	pop	{r4, r5}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
   5026e:	7900      	ldrb	r0, [r0, #4]
   50270:	f7fa bcd5 	b.w	4ac1e <usb_write>
}
   50274:	f06f 000a 	mvn.w	r0, #10
   50278:	bc30      	pop	{r4, r5}
   5027a:	4770      	bx	lr

0005027c <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   5027c:	6903      	ldr	r3, [r0, #16]
{
   5027e:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
   50280:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
   50284:	2300      	movs	r3, #0
   50286:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   50288:	7f83      	ldrb	r3, [r0, #30]
{
   5028a:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
   5028c:	b113      	cbz	r3, 50294 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   5028e:	7a40      	ldrb	r0, [r0, #9]
   50290:	f000 fb2a 	bl	508e8 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
   50294:	2301      	movs	r3, #1
   50296:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   50298:	2300      	movs	r3, #0
   5029a:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
   5029c:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
   5029e:	77a3      	strb	r3, [r4, #30]
}
   502a0:	bd10      	pop	{r4, pc}

000502a2 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   502a2:	f7f8 ba91 	b.w	487c8 <z_impl_k_mutex_unlock>

000502a6 <k_mutex_lock.constprop.7>:
	return z_impl_k_mutex_lock(mutex, timeout);
   502a6:	f7f8 ba11 	b.w	486cc <z_impl_k_mutex_lock>

000502aa <usb_dc_ep_check_cap>:
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   502aa:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   502ac:	7901      	ldrb	r1, [r0, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   502ae:	f003 020f 	and.w	r2, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   502b2:	b921      	cbnz	r1, 502be <usb_dc_ep_check_cap+0x14>
   502b4:	1c10      	adds	r0, r2, #0
   502b6:	bf18      	it	ne
   502b8:	2001      	movne	r0, #1
   502ba:	4240      	negs	r0, r0
   502bc:	4770      	bx	lr
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   502be:	2a08      	cmp	r2, #8
   502c0:	d806      	bhi.n	502d0 <usb_dc_ep_check_cap+0x26>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   502c2:	2901      	cmp	r1, #1
   502c4:	d107      	bne.n	502d6 <usb_dc_ep_check_cap+0x2c>
   502c6:	f083 0008 	eor.w	r0, r3, #8
   502ca:	f340 00c0 	sbfx	r0, r0, #3, #1
   502ce:	4770      	bx	lr
		return -1;
   502d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   502d4:	4770      	bx	lr
	return 0;
   502d6:	2000      	movs	r0, #0
}
   502d8:	4770      	bx	lr

000502da <usb_dc_ep_read>:
{
   502da:	b570      	push	{r4, r5, r6, lr}
   502dc:	4604      	mov	r4, r0
   502de:	460e      	mov	r6, r1
   502e0:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   502e2:	f7f4 fcdf 	bl	44ca4 <usb_dc_ep_read_wait>
	if (ret) {
   502e6:	b930      	cbnz	r0, 502f6 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
   502e8:	b906      	cbnz	r6, 502ec <usb_dc_ep_read+0x12>
   502ea:	b125      	cbz	r5, 502f6 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
   502ec:	4620      	mov	r0, r4
}
   502ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
   502f2:	f7f4 bd23 	b.w	44d3c <usb_dc_ep_read_continue>
}
   502f6:	bd70      	pop	{r4, r5, r6, pc}

000502f8 <usb_dc_wakeup_request>:
{
   502f8:	b508      	push	{r3, lr}
	bool res = nrfx_usbd_wakeup_req();
   502fa:	f7f7 f921 	bl	47540 <nrfx_usbd_wakeup_req>
	if (!res) {
   502fe:	2800      	cmp	r0, #0
}
   50300:	bf0c      	ite	eq
   50302:	f06f 000a 	mvneq.w	r0, #10
   50306:	2000      	movne	r0, #0
   50308:	bd08      	pop	{r3, pc}

0005030a <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   5030a:	f1a0 0308 	sub.w	r3, r0, #8
   5030e:	f3bf 8f5b 	dmb	ish
   50312:	e853 2f00 	ldrex	r2, [r3]
   50316:	1c51      	adds	r1, r2, #1
   50318:	e843 1c00 	strex	ip, r1, [r3]
   5031c:	f1bc 0f00 	cmp.w	ip, #0
   50320:	d1f7      	bne.n	50312 <adc_context_on_timer_expired+0x8>
   50322:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   50326:	b91a      	cbnz	r2, 50330 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   50328:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   5032c:	f7f4 bd8c 	b.w	44e48 <adc_context_start_sampling.isra.1>
		ctx->status = -EBUSY;
   50330:	f06f 030f 	mvn.w	r3, #15
   50334:	6683      	str	r3, [r0, #104]	; 0x68
}
   50336:	4770      	bx	lr

00050338 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   50338:	6902      	ldr	r2, [r0, #16]
   5033a:	b2c9      	uxtb	r1, r1
   5033c:	230c      	movs	r3, #12
   5033e:	fb01 2303 	mla	r3, r1, r3, r2
   50342:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   50344:	f000 0007 	and.w	r0, r0, #7
   50348:	4770      	bx	lr

0005034a <set_off_state>:
	__asm__ volatile(
   5034a:	f04f 0320 	mov.w	r3, #32
   5034e:	f3ef 8211 	mrs	r2, BASEPRI
   50352:	f383 8812 	msr	BASEPRI_MAX, r3
   50356:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   5035a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   5035c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   50360:	d001      	beq.n	50366 <set_off_state+0x1c>
   50362:	428b      	cmp	r3, r1
   50364:	d107      	bne.n	50376 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   50366:	2301      	movs	r3, #1
   50368:	6003      	str	r3, [r0, #0]
	int err = 0;
   5036a:	2000      	movs	r0, #0
	__asm__ volatile(
   5036c:	f382 8811 	msr	BASEPRI, r2
   50370:	f3bf 8f6f 	isb	sy
}
   50374:	4770      	bx	lr
		err = -EPERM;
   50376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   5037a:	e7f7      	b.n	5036c <set_off_state+0x22>

0005037c <set_starting_state>:
{
   5037c:	b510      	push	{r4, lr}
	__asm__ volatile(
   5037e:	f04f 0320 	mov.w	r3, #32
   50382:	f3ef 8211 	mrs	r2, BASEPRI
   50386:	f383 8812 	msr	BASEPRI_MAX, r3
   5038a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   5038e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   50390:	f003 0407 	and.w	r4, r3, #7
   50394:	2c01      	cmp	r4, #1
   50396:	d106      	bne.n	503a6 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   50398:	6001      	str	r1, [r0, #0]
	int err = 0;
   5039a:	2000      	movs	r0, #0
	__asm__ volatile(
   5039c:	f382 8811 	msr	BASEPRI, r2
   503a0:	f3bf 8f6f 	isb	sy
}
   503a4:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   503a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   503aa:	428b      	cmp	r3, r1
		err = -EALREADY;
   503ac:	bf14      	ite	ne
   503ae:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   503b2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   503b6:	e7f1      	b.n	5039c <set_starting_state+0x20>

000503b8 <set_on_state>:
	__asm__ volatile(
   503b8:	f04f 0320 	mov.w	r3, #32
   503bc:	f3ef 8211 	mrs	r2, BASEPRI
   503c0:	f383 8812 	msr	BASEPRI_MAX, r3
   503c4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   503c8:	6803      	ldr	r3, [r0, #0]
   503ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   503ce:	f043 0302 	orr.w	r3, r3, #2
   503d2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   503d4:	f382 8811 	msr	BASEPRI, r2
   503d8:	f3bf 8f6f 	isb	sy
}
   503dc:	4770      	bx	lr

000503de <onoff_started_callback>:
	return &data->mgr[type];
   503de:	6903      	ldr	r3, [r0, #16]
{
   503e0:	b410      	push	{r4}
	notify(mgr, 0);
   503e2:	201c      	movs	r0, #28
	return &data->mgr[type];
   503e4:	b2cc      	uxtb	r4, r1
	notify(mgr, 0);
   503e6:	fb04 3000 	mla	r0, r4, r0, r3
   503ea:	2100      	movs	r1, #0
}
   503ec:	bc10      	pop	{r4}
	notify(mgr, 0);
   503ee:	4710      	bx	r2

000503f0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   503f0:	2000      	movs	r0, #0
   503f2:	f7f6 b925 	b.w	46640 <nrfx_clock_start>

000503f6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   503f6:	2000      	movs	r0, #0
   503f8:	f7f6 b954 	b.w	466a4 <nrfx_clock_stop>

000503fc <blocking_start_callback>:
	z_impl_k_sem_give(sem);
   503fc:	4610      	mov	r0, r2
   503fe:	f7f8 ba5b 	b.w	488b8 <z_impl_k_sem_give>

00050402 <api_stop>:
{
   50402:	b538      	push	{r3, r4, r5, lr}
   50404:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   50406:	230c      	movs	r3, #12
{
   50408:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   5040a:	4363      	muls	r3, r4
   5040c:	6900      	ldr	r0, [r0, #16]
   5040e:	3340      	adds	r3, #64	; 0x40
   50410:	2180      	movs	r1, #128	; 0x80
   50412:	4418      	add	r0, r3
   50414:	f7ff ff99 	bl	5034a <set_off_state>
	if (err < 0) {
   50418:	2800      	cmp	r0, #0
   5041a:	db05      	blt.n	50428 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   5041c:	6869      	ldr	r1, [r5, #4]
   5041e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   50422:	684b      	ldr	r3, [r1, #4]
   50424:	4798      	blx	r3
	return 0;
   50426:	2000      	movs	r0, #0
}
   50428:	bd38      	pop	{r3, r4, r5, pc}

0005042a <api_start>:
{
   5042a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   5042e:	b2ce      	uxtb	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   50430:	250c      	movs	r5, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   50432:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   50434:	4375      	muls	r5, r6
{
   50436:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   50438:	f105 0040 	add.w	r0, r5, #64	; 0x40
   5043c:	2180      	movs	r1, #128	; 0x80
   5043e:	4420      	add	r0, r4
{
   50440:	4691      	mov	r9, r2
   50442:	4698      	mov	r8, r3
	err = set_starting_state(&subdata->flags, ctx);
   50444:	f7ff ff9a 	bl	5037c <set_starting_state>
	if (err < 0) {
   50448:	2800      	cmp	r0, #0
   5044a:	db07      	blt.n	5045c <api_start+0x32>
	subdata->cb = cb;
   5044c:	442c      	add	r4, r5
	subdata->user_data = user_data;
   5044e:	e9c4 980e 	strd	r9, r8, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   50452:	687b      	ldr	r3, [r7, #4]
   50454:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   50458:	4798      	blx	r3
	return 0;
   5045a:	2000      	movs	r0, #0
}
   5045c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00050460 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   50460:	6843      	ldr	r3, [r0, #4]
   50462:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   50464:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   50468:	600b      	str	r3, [r1, #0]
}
   5046a:	2000      	movs	r0, #0
   5046c:	4770      	bx	lr

0005046e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   5046e:	6843      	ldr	r3, [r0, #4]
   50470:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   50472:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   50476:	4042      	eors	r2, r0
   50478:	400a      	ands	r2, r1
   5047a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   5047c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   50480:	2000      	movs	r0, #0
   50482:	4770      	bx	lr

00050484 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   50484:	6843      	ldr	r3, [r0, #4]
   50486:	685b      	ldr	r3, [r3, #4]
}
   50488:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   5048a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   5048e:	4770      	bx	lr

00050490 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   50490:	6843      	ldr	r3, [r0, #4]
   50492:	685b      	ldr	r3, [r3, #4]
}
   50494:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   50496:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   5049a:	4770      	bx	lr

0005049c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   5049c:	6843      	ldr	r3, [r0, #4]
   5049e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   504a0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   504a4:	4059      	eors	r1, r3
    p_reg->OUT = value;
   504a6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   504aa:	2000      	movs	r0, #0
   504ac:	4770      	bx	lr

000504ae <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   504ae:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   504b0:	6858      	ldr	r0, [r3, #4]
{
   504b2:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   504b4:	b158      	cbz	r0, 504ce <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   504b6:	2400      	movs	r4, #0
   504b8:	4281      	cmp	r1, r0
   504ba:	d113      	bne.n	504e4 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   504bc:	6808      	ldr	r0, [r1, #0]
   504be:	b95c      	cbnz	r4, 504d8 <gpio_nrfx_manage_callback+0x2a>
   504c0:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   504c2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   504c4:	42a1      	cmp	r1, r4
   504c6:	d100      	bne.n	504ca <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   504c8:	6098      	str	r0, [r3, #8]
	parent->next = child;
   504ca:	2000      	movs	r0, #0
   504cc:	6008      	str	r0, [r1, #0]
	if (set) {
   504ce:	b972      	cbnz	r2, 504ee <gpio_nrfx_manage_callback+0x40>
	return 0;
   504d0:	2000      	movs	r0, #0
}
   504d2:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   504d4:	4628      	mov	r0, r5
   504d6:	e7ef      	b.n	504b8 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
   504d8:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   504da:	6898      	ldr	r0, [r3, #8]
   504dc:	4281      	cmp	r1, r0
	list->tail = node;
   504de:	bf08      	it	eq
   504e0:	609c      	streq	r4, [r3, #8]
   504e2:	e7f2      	b.n	504ca <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   504e4:	6805      	ldr	r5, [r0, #0]
	return node->next;
   504e6:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   504e8:	2d00      	cmp	r5, #0
   504ea:	d1f3      	bne.n	504d4 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   504ec:	b13a      	cbz	r2, 504fe <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   504ee:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   504f0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   504f2:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   504f4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   504f6:	2800      	cmp	r0, #0
   504f8:	d1ea      	bne.n	504d0 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   504fa:	6099      	str	r1, [r3, #8]
   504fc:	e7e9      	b.n	504d2 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   504fe:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   50502:	e7e6      	b.n	504d2 <gpio_nrfx_manage_callback+0x24>

00050504 <z_impl_hwinfo_get_device_id>:
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   50504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   50508:	b573      	push	{r0, r1, r4, r5, r6, lr}
   5050a:	6e56      	ldr	r6, [r2, #100]	; 0x64
   5050c:	6e55      	ldr	r5, [r2, #100]	; 0x64
   5050e:	6e54      	ldr	r4, [r2, #100]	; 0x64
   50510:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   50512:	0a2d      	lsrs	r5, r5, #8
   50514:	061b      	lsls	r3, r3, #24
   50516:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   5051a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
   5051e:	0224      	lsls	r4, r4, #8
   50520:	432b      	orrs	r3, r5
   50522:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   50526:	4323      	orrs	r3, r4
   50528:	9300      	str	r3, [sp, #0]
   5052a:	6e16      	ldr	r6, [r2, #96]	; 0x60
   5052c:	6e15      	ldr	r5, [r2, #96]	; 0x60
   5052e:	6e14      	ldr	r4, [r2, #96]	; 0x60
   50530:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   50532:	0a2a      	lsrs	r2, r5, #8
   50534:	061b      	lsls	r3, r3, #24
   50536:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
   5053a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   5053e:	2908      	cmp	r1, #8
   50540:	ea43 0302 	orr.w	r3, r3, r2
   50544:	ea4f 2204 	mov.w	r2, r4, lsl #8
   50548:	bf28      	it	cs
   5054a:	2108      	movcs	r1, #8
   5054c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   50550:	4313      	orrs	r3, r2
   50552:	460c      	mov	r4, r1

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
   50554:	460a      	mov	r2, r1
   50556:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   50558:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
   5055a:	f7fb fec7 	bl	4c2ec <memcpy>

	return length;
}
   5055e:	4620      	mov	r0, r4
   50560:	b002      	add	sp, #8
   50562:	bd70      	pop	{r4, r5, r6, pc}

00050564 <is_regular_addr_valid>:
{
   50564:	b538      	push	{r3, r4, r5, lr}
   50566:	4605      	mov	r5, r0
   50568:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   5056a:	f000 f8e6 	bl	5073a <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   5056e:	2d00      	cmp	r5, #0
   50570:	db07      	blt.n	50582 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   50572:	42a8      	cmp	r0, r5
   50574:	d905      	bls.n	50582 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   50576:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   50578:	4284      	cmp	r4, r0
   5057a:	bf8c      	ite	hi
   5057c:	2000      	movhi	r0, #0
   5057e:	2001      	movls	r0, #1
}
   50580:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   50582:	2000      	movs	r0, #0
   50584:	e7fc      	b.n	50580 <is_regular_addr_valid+0x1c>

00050586 <flash_nrf_read>:
{
   50586:	b570      	push	{r4, r5, r6, lr}
   50588:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   5058a:	4628      	mov	r0, r5
   5058c:	4619      	mov	r1, r3
{
   5058e:	4616      	mov	r6, r2
   50590:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   50592:	f7ff ffe7 	bl	50564 <is_regular_addr_valid>
   50596:	b138      	cbz	r0, 505a8 <flash_nrf_read+0x22>
	if (!len) {
   50598:	b14c      	cbz	r4, 505ae <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   5059a:	4622      	mov	r2, r4
   5059c:	4629      	mov	r1, r5
   5059e:	4630      	mov	r0, r6
   505a0:	f7fb fea4 	bl	4c2ec <memcpy>
	return 0;
   505a4:	2000      	movs	r0, #0
}
   505a6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   505a8:	f06f 0015 	mvn.w	r0, #21
   505ac:	e7fb      	b.n	505a6 <flash_nrf_read+0x20>
		return 0;
   505ae:	4620      	mov	r0, r4
   505b0:	e7f9      	b.n	505a6 <flash_nrf_read+0x20>

000505b2 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   505b2:	2000      	movs	r0, #0
   505b4:	f7e4 bfd6 	b.w	35564 <ticker_is_initialized>

000505b8 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   505b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   505bc:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   505be:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   505c0:	2700      	movs	r7, #0
   505c2:	6027      	str	r7, [r4, #0]
	info->index = 0U;
   505c4:	60a7      	str	r7, [r4, #8]
{
   505c6:	460d      	mov	r5, r1
   505c8:	4616      	mov	r6, r2

	api->page_layout(dev, &layout, &layout_size);
   505ca:	691b      	ldr	r3, [r3, #16]
   505cc:	aa01      	add	r2, sp, #4
   505ce:	4669      	mov	r1, sp
   505d0:	4798      	blx	r3

	while (layout_size--) {
   505d2:	e9dd ce00 	ldrd	ip, lr, [sp]
   505d6:	463a      	mov	r2, r7
		info->size = layout->pages_size;
   505d8:	f10c 0704 	add.w	r7, ip, #4
	while (layout_size--) {
   505dc:	4572      	cmp	r2, lr
   505de:	d104      	bne.n	505ea <flash_get_page_info+0x32>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   505e0:	f06f 0015 	mvn.w	r0, #21
}
   505e4:	b003      	add	sp, #12
   505e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   505ea:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   505ee:	6063      	str	r3, [r4, #4]
		if (offs == 0) {
   505f0:	68a0      	ldr	r0, [r4, #8]
   505f2:	f8d4 9000 	ldr.w	r9, [r4]
   505f6:	b985      	cbnz	r5, 5061a <flash_get_page_info+0x62>
			index_jmp = index - info->index;
   505f8:	1a31      	subs	r1, r6, r0
		index_jmp = MIN(index_jmp, layout->pages_count);
   505fa:	f85c 8032 	ldr.w	r8, [ip, r2, lsl #3]
   505fe:	4541      	cmp	r1, r8
   50600:	bf28      	it	cs
   50602:	4641      	movcs	r1, r8
		info->start_offset += (index_jmp * info->size);
   50604:	fb01 9303 	mla	r3, r1, r3, r9
		info->index += index_jmp;
   50608:	4408      	add	r0, r1
		if (index_jmp < layout->pages_count) {
   5060a:	4588      	cmp	r8, r1
		info->start_offset += (index_jmp * info->size);
   5060c:	6023      	str	r3, [r4, #0]
		info->index += index_jmp;
   5060e:	60a0      	str	r0, [r4, #8]
		if (index_jmp < layout->pages_count) {
   50610:	f102 0201 	add.w	r2, r2, #1
   50614:	d9e2      	bls.n	505dc <flash_get_page_info+0x24>
			return 0;
   50616:	2000      	movs	r0, #0
   50618:	e7e4      	b.n	505e4 <flash_get_page_info+0x2c>
			index_jmp = (offs - info->start_offset) / info->size;
   5061a:	eba5 0109 	sub.w	r1, r5, r9
   5061e:	fbb1 f1f3 	udiv	r1, r1, r3
   50622:	e7ea      	b.n	505fa <flash_get_page_info+0x42>

00050624 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
	return flash_get_page_info(dev, offs, 0U, info);
   50624:	4613      	mov	r3, r2
   50626:	2200      	movs	r2, #0
   50628:	f7ff bfc6 	b.w	505b8 <flash_get_page_info>

0005062c <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   5062c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   50630:	6883      	ldr	r3, [r0, #8]
{
   50632:	b086      	sub	sp, #24
   50634:	4689      	mov	r9, r1
   50636:	4692      	mov	sl, r2
	api->page_layout(dev, &layout, &num_blocks);
   50638:	691b      	ldr	r3, [r3, #16]
   5063a:	aa02      	add	r2, sp, #8
   5063c:	a901      	add	r1, sp, #4
   5063e:	4798      	blx	r3
	off_t off = 0;
   50640:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   50642:	46a0      	mov	r8, r4

	for (block = 0; block < num_blocks; block++) {
   50644:	4625      	mov	r5, r4
   50646:	9b02      	ldr	r3, [sp, #8]
   50648:	42ab      	cmp	r3, r5
   5064a:	d802      	bhi.n	50652 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   5064c:	b006      	add	sp, #24
   5064e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   50652:	9f01      	ldr	r7, [sp, #4]
   50654:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   50658:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   5065a:	687b      	ldr	r3, [r7, #4]
   5065c:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   5065e:	683a      	ldr	r2, [r7, #0]
   50660:	42b2      	cmp	r2, r6
   50662:	eb08 0306 	add.w	r3, r8, r6
   50666:	d802      	bhi.n	5066e <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   50668:	3501      	adds	r5, #1
   5066a:	4698      	mov	r8, r3
   5066c:	e7eb      	b.n	50646 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   5066e:	4651      	mov	r1, sl
   50670:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   50672:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   50674:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   50676:	47c8      	blx	r9
   50678:	2800      	cmp	r0, #0
   5067a:	d0e7      	beq.n	5064c <flash_page_foreach+0x20>
			off += page_info.size;
   5067c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   5067e:	3601      	adds	r6, #1
			off += page_info.size;
   50680:	441c      	add	r4, r3
			page++;
   50682:	e7ec      	b.n	5065e <flash_page_foreach+0x32>

00050684 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   50684:	4770      	bx	lr

00050686 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   50686:	4700      	bx	r0

00050688 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   50688:	f000 bf3d 	b.w	51506 <z_impl_k_busy_wait>

0005068c <nrf_gpio_reconfigure>:
{
   5068c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   5068e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   50690:	a801      	add	r0, sp, #4
{
   50692:	4617      	mov	r7, r2
   50694:	461d      	mov	r5, r3
   50696:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   5069a:	f7f6 f87d 	bl	46798 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   5069e:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   506a0:	2f00      	cmp	r7, #0
   506a2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   506a6:	bf14      	ite	ne
   506a8:	2302      	movne	r3, #2
   506aa:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   506ac:	2900      	cmp	r1, #0
   506ae:	bf18      	it	ne
   506b0:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   506b4:	2d00      	cmp	r5, #0
   506b6:	bf14      	ite	ne
   506b8:	f04f 0c0c 	movne.w	ip, #12
   506bc:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   506c0:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   506c2:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   506c6:	bf14      	ite	ne
   506c8:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   506cc:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   506d0:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   506d2:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   506d6:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   506da:	bf14      	ite	ne
   506dc:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   506e0:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   506e4:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   506e8:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   506ec:	b101      	cbz	r1, 506f0 <nrf_gpio_reconfigure+0x64>
   506ee:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   506f0:	b10f      	cbz	r7, 506f6 <nrf_gpio_reconfigure+0x6a>
   506f2:	783f      	ldrb	r7, [r7, #0]
   506f4:	007f      	lsls	r7, r7, #1
   506f6:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   506f8:	b10d      	cbz	r5, 506fe <nrf_gpio_reconfigure+0x72>
   506fa:	782d      	ldrb	r5, [r5, #0]
   506fc:	00ad      	lsls	r5, r5, #2
   506fe:	ea41 0207 	orr.w	r2, r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   50702:	b10c      	cbz	r4, 50708 <nrf_gpio_reconfigure+0x7c>
   50704:	7821      	ldrb	r1, [r4, #0]
   50706:	020c      	lsls	r4, r1, #8
   50708:	4315      	orrs	r5, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   5070a:	b10e      	cbz	r6, 50710 <nrf_gpio_reconfigure+0x84>
   5070c:	7836      	ldrb	r6, [r6, #0]
   5070e:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   50710:	432c      	orrs	r4, r5
   50712:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   50714:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   50718:	b003      	add	sp, #12
   5071a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0005071c <nrf_gpio_cfg_sense_set>:
{
   5071c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   5071e:	f10d 030f 	add.w	r3, sp, #15
   50722:	9301      	str	r3, [sp, #4]
   50724:	2300      	movs	r3, #0
{
   50726:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   5072a:	9300      	str	r3, [sp, #0]
   5072c:	461a      	mov	r2, r3
   5072e:	4619      	mov	r1, r3
   50730:	f7ff ffac 	bl	5068c <nrf_gpio_reconfigure>
}
   50734:	b005      	add	sp, #20
   50736:	f85d fb04 	ldr.w	pc, [sp], #4

0005073a <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   5073a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   5073e:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   50740:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   50742:	4350      	muls	r0, r2
   50744:	4770      	bx	lr

00050746 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   50746:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   5074a:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   5074c:	4770      	bx	lr

0005074e <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   5074e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   50752:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   50754:	4770      	bx	lr

00050756 <nrf_power_event_get_and_clear.constprop.3>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   50756:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   5075a:	681a      	ldr	r2, [r3, #0]
   5075c:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   5075e:	bf1d      	ittte	ne
   50760:	2200      	movne	r2, #0
   50762:	601a      	strne	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   50764:	2001      	movne	r0, #1
   50766:	2000      	moveq	r0, #0
   50768:	bf18      	it	ne
   5076a:	681b      	ldrne	r3, [r3, #0]
}
   5076c:	4770      	bx	lr

0005076e <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   5076e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50772:	f44f 7260 	mov.w	r2, #896	; 0x380
   50776:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   5077a:	4770      	bx	lr

0005077c <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   5077c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   50780:	f44f 7260 	mov.w	r2, #896	; 0x380
   50784:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   50788:	4770      	bx	lr

0005078a <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   5078a:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   5078c:	f7f6 fbd4 	bl	46f38 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
   50790:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
   50794:	f7f5 bfcc 	b.w	46730 <nrfx_clock_irq_handler>

00050798 <nrfx_usbd_consumer>:
{
   50798:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
   5079a:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   5079c:	680d      	ldr	r5, [r1, #0]
   5079e:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
   507a0:	bf97      	itett	ls
   507a2:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
   507a6:	2100      	movhi	r1, #0
        size -= data_size;
   507a8:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
   507aa:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
   507ac:	bf8e      	itee	hi
   507ae:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
   507b2:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   507b4:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
   507b6:	4293      	cmp	r3, r2
   507b8:	d103      	bne.n	507c2 <nrfx_usbd_consumer+0x2a>
   507ba:	1c20      	adds	r0, r4, #0
   507bc:	bf18      	it	ne
   507be:	2001      	movne	r0, #1
}
   507c0:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
   507c2:	2000      	movs	r0, #0
   507c4:	e7fc      	b.n	507c0 <nrfx_usbd_consumer+0x28>

000507c6 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   507c6:	684b      	ldr	r3, [r1, #4]
{
   507c8:	b510      	push	{r4, lr}
   507ca:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
   507cc:	680c      	ldr	r4, [r1, #0]
   507ce:	bf28      	it	cs
   507d0:	461a      	movcs	r2, r3
    p_next->size = tx_size;
   507d2:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
   507d6:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
   507d8:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
   507da:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   507dc:	4413      	add	r3, r2
}
   507de:	3000      	adds	r0, #0
    p_transfer->p_data.addr += tx_size;
   507e0:	600b      	str	r3, [r1, #0]
}
   507e2:	bf18      	it	ne
   507e4:	2001      	movne	r0, #1
   507e6:	bd10      	pop	{r4, pc}

000507e8 <nrfx_usbd_feeder_ram_zlp>:
{
   507e8:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
   507ea:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
   507ec:	680b      	ldr	r3, [r1, #0]
   507ee:	42a2      	cmp	r2, r4
   507f0:	bf28      	it	cs
   507f2:	4622      	movcs	r2, r4
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   507f4:	2a00      	cmp	r2, #0
   507f6:	bf14      	ite	ne
   507f8:	461d      	movne	r5, r3
   507fa:	2500      	moveq	r5, #0
    p_transfer->size -= tx_size;
   507fc:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
   50800:	4413      	add	r3, r2
    p_next->size = tx_size;
   50802:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
   50806:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   50808:	600b      	str	r3, [r1, #0]
}
   5080a:	bf14      	ite	ne
   5080c:	2001      	movne	r0, #1
   5080e:	2000      	moveq	r0, #0
   50810:	bd30      	pop	{r4, r5, pc}

00050812 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
   50812:	f010 0f80 	tst.w	r0, #128	; 0x80
   50816:	bf14      	ite	ne
   50818:	2300      	movne	r3, #0
   5081a:	2310      	moveq	r3, #16
   5081c:	f000 000f 	and.w	r0, r0, #15
}
   50820:	4418      	add	r0, r3
   50822:	4770      	bx	lr

00050824 <ev_started_handler>:
}
   50824:	4770      	bx	lr

00050826 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   50826:	f7f6 bd11 	b.w	4724c <nrf_usbd_ep0in_dma_handler>

0005082a <nrf_usbd_epin_dma_handler>:
{
   5082a:	b508      	push	{r3, lr}
   5082c:	4601      	mov	r1, r0
    usbd_dma_pending_clear();
   5082e:	f7f6 fbf9 	bl	47024 <usbd_dma_pending_clear>
    usbd_ep_state_t * p_state = ep_state_access(ep);
   50832:	4608      	mov	r0, r1
   50834:	f7f6 fbe8 	bl	47008 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   50838:	7b83      	ldrb	r3, [r0, #14]
   5083a:	2b03      	cmp	r3, #3
   5083c:	d10a      	bne.n	50854 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   5083e:	4608      	mov	r0, r1
   50840:	f7ff ffe7 	bl	50812 <ep2bit>
   50844:	2301      	movs	r3, #1
   50846:	fa03 f000 	lsl.w	r0, r3, r0
   5084a:	43c0      	mvns	r0, r0
}
   5084c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   50850:	f7f6 bcea 	b.w	47228 <atomic_and.constprop.17>
    else if (p_state->handler.feeder == NULL)
   50854:	6803      	ldr	r3, [r0, #0]
   50856:	2b00      	cmp	r3, #0
   50858:	d0f1      	beq.n	5083e <nrf_usbd_epin_dma_handler+0x14>
}
   5085a:	bd08      	pop	{r3, pc}

0005085c <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   5085c:	2087      	movs	r0, #135	; 0x87
   5085e:	f7ff bfe4 	b.w	5082a <nrf_usbd_epin_dma_handler>

00050862 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   50862:	2086      	movs	r0, #134	; 0x86
   50864:	f7ff bfe1 	b.w	5082a <nrf_usbd_epin_dma_handler>

00050868 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   50868:	2085      	movs	r0, #133	; 0x85
   5086a:	f7ff bfde 	b.w	5082a <nrf_usbd_epin_dma_handler>

0005086e <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   5086e:	2084      	movs	r0, #132	; 0x84
   50870:	f7ff bfdb 	b.w	5082a <nrf_usbd_epin_dma_handler>

00050874 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   50874:	2083      	movs	r0, #131	; 0x83
   50876:	f7ff bfd8 	b.w	5082a <nrf_usbd_epin_dma_handler>

0005087a <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   5087a:	2082      	movs	r0, #130	; 0x82
   5087c:	f7ff bfd5 	b.w	5082a <nrf_usbd_epin_dma_handler>

00050880 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   50880:	2081      	movs	r0, #129	; 0x81
   50882:	f7ff bfd2 	b.w	5082a <nrf_usbd_epin_dma_handler>

00050886 <nrfx_usbd_ep_max_packet_size_set>:
{
   50886:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
   50888:	f7f6 fbbe 	bl	47008 <ep_state_access>
    p_state->max_packet_size = size;
   5088c:	8181      	strh	r1, [r0, #12]
}
   5088e:	bd08      	pop	{r3, pc}

00050890 <nrfx_usbd_ep_status_get>:
{
   50890:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
   50892:	f7f6 fbb9 	bl	47008 <ep_state_access>
	__asm__ volatile(
   50896:	f04f 0220 	mov.w	r2, #32
   5089a:	f3ef 8311 	mrs	r3, BASEPRI
   5089e:	f382 8812 	msr	BASEPRI_MAX, r2
   508a2:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
   508a6:	6882      	ldr	r2, [r0, #8]
   508a8:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   508aa:	6802      	ldr	r2, [r0, #0]
   508ac:	b92a      	cbnz	r2, 508ba <nrfx_usbd_ep_status_get+0x2a>
   508ae:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
   508b0:	f383 8811 	msr	BASEPRI, r3
   508b4:	f3bf 8f6f 	isb	sy
}
   508b8:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   508ba:	2004      	movs	r0, #4
   508bc:	e7f8      	b.n	508b0 <nrfx_usbd_ep_status_get+0x20>

000508be <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   508be:	2007      	movs	r0, #7
   508c0:	f7f7 b834 	b.w	4792c <nrf_usbd_epout_dma_handler>

000508c4 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   508c4:	2006      	movs	r0, #6
   508c6:	f7f7 b831 	b.w	4792c <nrf_usbd_epout_dma_handler>

000508ca <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   508ca:	2005      	movs	r0, #5
   508cc:	f7f7 b82e 	b.w	4792c <nrf_usbd_epout_dma_handler>

000508d0 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   508d0:	2004      	movs	r0, #4
   508d2:	f7f7 b82b 	b.w	4792c <nrf_usbd_epout_dma_handler>

000508d6 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   508d6:	2003      	movs	r0, #3
   508d8:	f7f7 b828 	b.w	4792c <nrf_usbd_epout_dma_handler>

000508dc <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   508dc:	2002      	movs	r0, #2
   508de:	f7f7 b825 	b.w	4792c <nrf_usbd_epout_dma_handler>

000508e2 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   508e2:	2001      	movs	r0, #1
   508e4:	f7f7 b822 	b.w	4792c <nrf_usbd_epout_dma_handler>

000508e8 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
   508e8:	f7f7 b912 	b.w	47b10 <usbd_ep_abort>

000508ec <debounce_update>:
        state->counter -= elapsed_ms;
    }
}

void debounce_update(struct debounce_state *state, const bool active, const int elapsed_ms,
                     const struct debounce_config *config) {
   508ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    // This uses a variation of the integrator debouncing described at
    // https://www.kennethkuhn.com/electronics/debounce.c
    // Every update where "active" does not match the current state, we increment
    // a counter, otherwise we decrement it. When the counter reaches a
    // threshold, the state flips and we reset the counter.
    state->changed = false;
   508ee:	7804      	ldrb	r4, [r0, #0]
   508f0:	f36f 0441 	bfc	r4, #1, #1

    if (active == state->pressed) {
   508f4:	b2e5      	uxtb	r5, r4
    state->changed = false;
   508f6:	7004      	strb	r4, [r0, #0]
    if (active == state->pressed) {
   508f8:	f005 0701 	and.w	r7, r5, #1
   508fc:	8804      	ldrh	r4, [r0, #0]
   508fe:	428f      	cmp	r7, r1
   50900:	ea4f 0694 	mov.w	r6, r4, lsr #2
   50904:	d109      	bne.n	5091a <debounce_update+0x2e>
    if (state->counter < elapsed_ms) {
   50906:	42b2      	cmp	r2, r6
   50908:	dd03      	ble.n	50912 <debounce_update+0x26>
        state->counter = 0;
   5090a:	f36f 048f 	bfc	r4, #2, #14
        state->counter += elapsed_ms;
   5090e:	8004      	strh	r4, [r0, #0]
    }

    state->pressed = !state->pressed;
    state->counter = 0;
    state->changed = true;
}
   50910:	bdf0      	pop	{r4, r5, r6, r7, pc}
        state->counter -= elapsed_ms;
   50912:	1ab6      	subs	r6, r6, r2
        state->counter += elapsed_ms;
   50914:	f366 048f 	bfi	r4, r6, #2, #14
   50918:	e7f9      	b.n	5090e <debounce_update+0x22>
    return state->pressed ? config->debounce_release_ms : config->debounce_press_ms;
   5091a:	e9d3 1300 	ldrd	r1, r3, [r3]
   5091e:	f014 0f01 	tst.w	r4, #1
   50922:	bf08      	it	eq
   50924:	460b      	moveq	r3, r1
    if (state->counter < flip_threshold) {
   50926:	429e      	cmp	r6, r3
   50928:	d208      	bcs.n	5093c <debounce_update+0x50>
    if (state->counter + elapsed_ms > DEBOUNCE_COUNTER_MAX) {
   5092a:	4416      	add	r6, r2
   5092c:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
   50930:	d3f0      	bcc.n	50914 <debounce_update+0x28>
        state->counter = DEBOUNCE_COUNTER_MAX;
   50932:	f643 73ff 	movw	r3, #16383	; 0x3fff
   50936:	f363 048f 	bfi	r4, r3, #2, #14
   5093a:	e7e8      	b.n	5090e <debounce_update+0x22>
    state->pressed = !state->pressed;
   5093c:	f087 0701 	eor.w	r7, r7, #1
   50940:	462c      	mov	r4, r5
   50942:	f367 0400 	bfi	r4, r7, #0, #1
   50946:	7004      	strb	r4, [r0, #0]
    state->changed = true;
   50948:	8803      	ldrh	r3, [r0, #0]
   5094a:	f003 0301 	and.w	r3, r3, #1
   5094e:	f043 0302 	orr.w	r3, r3, #2
   50952:	8003      	strh	r3, [r0, #0]
   50954:	e7dc      	b.n	50910 <debounce_update+0x24>

00050956 <debounce_is_active>:

bool debounce_is_active(const struct debounce_state *state) {
    return state->pressed || state->counter > 0;
   50956:	8800      	ldrh	r0, [r0, #0]
   50958:	f020 0002 	bic.w	r0, r0, #2
}
   5095c:	3000      	adds	r0, #0
   5095e:	bf18      	it	ne
   50960:	2001      	movne	r0, #1
   50962:	4770      	bx	lr

00050964 <debounce_is_pressed>:

bool debounce_is_pressed(const struct debounce_state *state) { return state->pressed; }
   50964:	7800      	ldrb	r0, [r0, #0]
   50966:	f000 0001 	and.w	r0, r0, #1
   5096a:	4770      	bx	lr

0005096c <debounce_get_changed>:

   5096c:	7800      	ldrb	r0, [r0, #0]
   5096e:	f3c0 0040 	ubfx	r0, r0, #1, #1
   50972:	4770      	bx	lr

00050974 <z_impl_gpio_pin_configure>:
{
   50974:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   50976:	04d4      	lsls	r4, r2, #19
{
   50978:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
   5097a:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   5097c:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   5097e:	d506      	bpl.n	5098e <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   50980:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   50984:	d003      	beq.n	5098e <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   50986:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   50988:	bf48      	it	mi
   5098a:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   5098e:	6834      	ldr	r4, [r6, #0]
   50990:	2501      	movs	r5, #1
   50992:	408d      	lsls	r5, r1
   50994:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   50998:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   5099a:	bf4c      	ite	mi
   5099c:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   5099e:	43ac      	bicpl	r4, r5
   509a0:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
   509a2:	683b      	ldr	r3, [r7, #0]
}
   509a4:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   509a6:	4718      	bx	r3

000509a8 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   509a8:	2301      	movs	r3, #1
   509aa:	fa03 f101 	lsl.w	r1, r3, r1
   509ae:	6903      	ldr	r3, [r0, #16]
   509b0:	681b      	ldr	r3, [r3, #0]
   509b2:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   509b4:	bf18      	it	ne
   509b6:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   509ba:	b112      	cbz	r2, 509c2 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   509bc:	6883      	ldr	r3, [r0, #8]
   509be:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   509c0:	4718      	bx	r3
   509c2:	6883      	ldr	r3, [r0, #8]
   509c4:	691b      	ldr	r3, [r3, #16]
   509c6:	e7fb      	b.n	509c0 <gpio_pin_set+0x18>

000509c8 <kscan_matrix_configure>:
    struct kscan_matrix_data *data = dev->data;
   509c8:	6903      	ldr	r3, [r0, #16]
    if (!callback) {
   509ca:	b111      	cbz	r1, 509d2 <kscan_matrix_configure+0xa>
    data->callback = callback;
   509cc:	6059      	str	r1, [r3, #4]
    return 0;
   509ce:	2000      	movs	r0, #0
   509d0:	4770      	bx	lr
        return -EINVAL;
   509d2:	f06f 0015 	mvn.w	r0, #21
}
   509d6:	4770      	bx	lr

000509d8 <kscan_matrix_set_all_outputs.isra.1>:
static int kscan_matrix_set_all_outputs(const struct device *dev, const int value) {
   509d8:	b570      	push	{r4, r5, r6, lr}
   509da:	4605      	mov	r5, r0
   509dc:	460e      	mov	r6, r1
    for (int i = 0; i < config->outputs.len; i++) {
   509de:	2400      	movs	r4, #0
   509e0:	69eb      	ldr	r3, [r5, #28]
   509e2:	42a3      	cmp	r3, r4
   509e4:	d801      	bhi.n	509ea <kscan_matrix_set_all_outputs.isra.1+0x12>
    return 0;
   509e6:	2000      	movs	r0, #0
}
   509e8:	bd70      	pop	{r4, r5, r6, pc}
        const struct kscan_gpio_dt_spec *gpio = &config->outputs.gpios[i];
   509ea:	69ab      	ldr	r3, [r5, #24]
   509ec:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
        int err = gpio_pin_set(gpio->port, gpio->pin, value);
   509f0:	4632      	mov	r2, r6
   509f2:	7909      	ldrb	r1, [r1, #4]
   509f4:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   509f8:	f7ff ffd6 	bl	509a8 <gpio_pin_set>
        if (err) {
   509fc:	2800      	cmp	r0, #0
   509fe:	d1f3      	bne.n	509e8 <kscan_matrix_set_all_outputs.isra.1+0x10>
    for (int i = 0; i < config->outputs.len; i++) {
   50a00:	3401      	adds	r4, #1
   50a02:	e7ed      	b.n	509e0 <kscan_matrix_set_all_outputs.isra.1+0x8>

00050a04 <kscan_matrix_interrupt_configure.isra.2>:
static int kscan_matrix_interrupt_configure(const struct device *dev, const gpio_flags_t flags) {
   50a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   50a08:	4606      	mov	r6, r0
   50a0a:	460d      	mov	r5, r1
    for (int i = 0; i < config->inputs.len; i++) {
   50a0c:	2400      	movs	r4, #0
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   50a0e:	f401 4700 	and.w	r7, r1, #32768	; 0x8000
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   50a12:	f04f 0801 	mov.w	r8, #1
   50a16:	6973      	ldr	r3, [r6, #20]
   50a18:	42a3      	cmp	r3, r4
   50a1a:	d802      	bhi.n	50a22 <kscan_matrix_interrupt_configure.isra.2+0x1e>
    return 0;
   50a1c:	2000      	movs	r0, #0
}
   50a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        const struct kscan_gpio_dt_spec *gpio = &config->inputs.gpios[i];
   50a22:	6933      	ldr	r3, [r6, #16]
   50a24:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
        int err = gpio_pin_interrupt_configure(gpio->port, gpio->pin, flags);
   50a28:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   50a2c:	7911      	ldrb	r1, [r2, #4]
	const struct gpio_driver_api *api =
   50a2e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   50a32:	b197      	cbz	r7, 50a5a <kscan_matrix_interrupt_configure.isra.2+0x56>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   50a34:	6902      	ldr	r2, [r0, #16]
   50a36:	6812      	ldr	r2, [r2, #0]
   50a38:	fa08 f301 	lsl.w	r3, r8, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   50a3c:	4213      	tst	r3, r2
   50a3e:	d00c      	beq.n	50a5a <kscan_matrix_interrupt_configure.isra.2+0x56>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   50a40:	f485 22c0 	eor.w	r2, r5, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   50a44:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   50a48:	f8dc 9018 	ldr.w	r9, [ip, #24]
   50a4c:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
   50a50:	47c8      	blx	r9
        if (err) {
   50a52:	2800      	cmp	r0, #0
   50a54:	d1e3      	bne.n	50a1e <kscan_matrix_interrupt_configure.isra.2+0x1a>
    for (int i = 0; i < config->inputs.len; i++) {
   50a56:	3401      	adds	r4, #1
   50a58:	e7dd      	b.n	50a16 <kscan_matrix_interrupt_configure.isra.2+0x12>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   50a5a:	462a      	mov	r2, r5
   50a5c:	e7f2      	b.n	50a44 <kscan_matrix_interrupt_configure.isra.2+0x40>

00050a5e <kscan_matrix_read>:
static int kscan_matrix_read(const struct device *dev) {
   50a5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct kscan_matrix_data *data = dev->data;
   50a62:	f8d0 9010 	ldr.w	r9, [r0, #16]
    const struct kscan_matrix_config *config = dev->config;
   50a66:	6845      	ldr	r5, [r0, #4]
static int kscan_matrix_read(const struct device *dev) {
   50a68:	b089      	sub	sp, #36	; 0x24
   50a6a:	4607      	mov	r7, r0
    for (int o = 0; o < config->outputs.len; o++) {
   50a6c:	2600      	movs	r6, #0
   50a6e:	69eb      	ldr	r3, [r5, #28]
   50a70:	42b3      	cmp	r3, r6
   50a72:	d83c      	bhi.n	50aee <kscan_matrix_read+0x90>
    for (int r = 0; r < config->rows.len; r++) {
   50a74:	f04f 0800 	mov.w	r8, #0
    bool continue_scan = false;
   50a78:	4646      	mov	r6, r8
    for (int r = 0; r < config->rows.len; r++) {
   50a7a:	686b      	ldr	r3, [r5, #4]
   50a7c:	4543      	cmp	r3, r8
   50a7e:	f200 80ad 	bhi.w	50bdc <kscan_matrix_read+0x17e>
    if (continue_scan) {
   50a82:	6878      	ldr	r0, [r7, #4]
   50a84:	2e00      	cmp	r6, #0
   50a86:	f000 80b1 	beq.w	50bec <kscan_matrix_read+0x18e>
    struct kscan_matrix_data *data = dev->data;
   50a8a:	693c      	ldr	r4, [r7, #16]
    data->scan_time += config->debounce_scan_period_ms;
   50a8c:	6a81      	ldr	r1, [r0, #40]	; 0x28
   50a8e:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
   50a92:	1855      	adds	r5, r2, r1
   50a94:	eb43 76e1 	adc.w	r6, r3, r1, asr #31
   50a98:	f240 32e7 	movw	r2, #999	; 0x3e7
   50a9c:	03f1      	lsls	r1, r6, #15
   50a9e:	03e8      	lsls	r0, r5, #15
   50aa0:	1880      	adds	r0, r0, r2
   50aa2:	f04f 0300 	mov.w	r3, #0
   50aa6:	ea41 4155 	orr.w	r1, r1, r5, lsr #17
   50aaa:	4159      	adcs	r1, r3
   50aac:	9000      	str	r0, [sp, #0]
   50aae:	9101      	str	r1, [sp, #4]
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   50ab0:	e9dd 0100 	ldrd	r0, r1, [sp]
   50ab4:	428b      	cmp	r3, r1
   50ab6:	bf08      	it	eq
   50ab8:	4282      	cmpeq	r2, r0
    data->scan_time += config->debounce_scan_period_ms;
   50aba:	e9c4 5610 	strd	r5, r6, [r4, #64]	; 0x40
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   50abe:	f104 0408 	add.w	r4, r4, #8
   50ac2:	f080 808e 	bcs.w	50be2 <kscan_matrix_read+0x184>
   50ac6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   50aca:	2300      	movs	r3, #0
   50acc:	f7d5 fb18 	bl	26100 <__aeabi_uldivmod>
   50ad0:	f06f 0201 	mvn.w	r2, #1
   50ad4:	1a12      	subs	r2, r2, r0
   50ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   50ada:	eb63 0301 	sbc.w	r3, r3, r1
   50ade:	4620      	mov	r0, r4
   50ae0:	f7f8 f8f4 	bl	48ccc <k_work_reschedule>
    return 0;
   50ae4:	2400      	movs	r4, #0
}
   50ae6:	4620      	mov	r0, r4
   50ae8:	b009      	add	sp, #36	; 0x24
   50aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        const struct kscan_gpio_dt_spec *out_gpio = &config->outputs.gpios[o];
   50aee:	f8d5 a018 	ldr.w	sl, [r5, #24]
   50af2:	00f3      	lsls	r3, r6, #3
   50af4:	9303      	str	r3, [sp, #12]
   50af6:	4453      	add	r3, sl
        int err = gpio_pin_set(out_gpio->port, out_gpio->pin, 1);
   50af8:	2201      	movs	r2, #1
   50afa:	7919      	ldrb	r1, [r3, #4]
   50afc:	f85a 0036 	ldr.w	r0, [sl, r6, lsl #3]
        const struct kscan_gpio_dt_spec *out_gpio = &config->outputs.gpios[o];
   50b00:	9302      	str	r3, [sp, #8]
        int err = gpio_pin_set(out_gpio->port, out_gpio->pin, 1);
   50b02:	f7ff ff51 	bl	509a8 <gpio_pin_set>
        if (err) {
   50b06:	4604      	mov	r4, r0
   50b08:	2800      	cmp	r0, #0
   50b0a:	d1ec      	bne.n	50ae6 <kscan_matrix_read+0x88>
            debounce_update(&data->matrix_state[index], active, config->debounce_scan_period_ms,
   50b0c:	f105 0320 	add.w	r3, r5, #32
   50b10:	9304      	str	r3, [sp, #16]
        for (int i = 0; i < config->inputs.len; i++) {
   50b12:	696b      	ldr	r3, [r5, #20]
   50b14:	42a3      	cmp	r3, r4
   50b16:	d80c      	bhi.n	50b32 <kscan_matrix_read+0xd4>
        err = gpio_pin_set(out_gpio->port, out_gpio->pin, 0);
   50b18:	9b02      	ldr	r3, [sp, #8]
   50b1a:	7919      	ldrb	r1, [r3, #4]
   50b1c:	9b03      	ldr	r3, [sp, #12]
   50b1e:	2200      	movs	r2, #0
   50b20:	f85a 0003 	ldr.w	r0, [sl, r3]
   50b24:	f7ff ff40 	bl	509a8 <gpio_pin_set>
        if (err) {
   50b28:	4604      	mov	r4, r0
   50b2a:	2800      	cmp	r0, #0
   50b2c:	d1db      	bne.n	50ae6 <kscan_matrix_read+0x88>
    for (int o = 0; o < config->outputs.len; o++) {
   50b2e:	3601      	adds	r6, #1
   50b30:	e79d      	b.n	50a6e <kscan_matrix_read+0x10>
            const struct kscan_gpio_dt_spec *in_gpio = &config->inputs.gpios[i];
   50b32:	692a      	ldr	r2, [r5, #16]
               : state_index_rc(config, input_idx, output_idx);
   50b34:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
   50b38:	6869      	ldr	r1, [r5, #4]
            const struct kscan_gpio_dt_spec *in_gpio = &config->inputs.gpios[i];
   50b3a:	00e3      	lsls	r3, r4, #3
   50b3c:	eb02 0c03 	add.w	ip, r2, r3
               : state_index_rc(config, input_idx, output_idx);
   50b40:	bb20      	cbnz	r0, 50b8c <kscan_matrix_read+0x12e>
    return (col * config->rows.len) + row;
   50b42:	fb01 6804 	mla	r8, r1, r4, r6
            const bool active = gpio_pin_get(in_gpio->port, in_gpio->pin);
   50b46:	58d0      	ldr	r0, [r2, r3]
   50b48:	f89c b004 	ldrb.w	fp, [ip, #4]
	const struct gpio_driver_data *const data =
   50b4c:	6903      	ldr	r3, [r0, #16]
   50b4e:	9305      	str	r3, [sp, #20]
	return api->port_get_raw(port, value);
   50b50:	6882      	ldr	r2, [r0, #8]
   50b52:	a907      	add	r1, sp, #28
   50b54:	6852      	ldr	r2, [r2, #4]
   50b56:	4790      	blx	r2
	if (ret == 0) {
   50b58:	b958      	cbnz	r0, 50b72 <kscan_matrix_read+0x114>
		*value ^= data->invert;
   50b5a:	9b05      	ldr	r3, [sp, #20]
   50b5c:	681a      	ldr	r2, [r3, #0]
   50b5e:	9b07      	ldr	r3, [sp, #28]
   50b60:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   50b62:	2201      	movs	r2, #1
   50b64:	fa02 fb0b 	lsl.w	fp, r2, fp
   50b68:	ea13 0f0b 	tst.w	r3, fp
   50b6c:	bf14      	ite	ne
   50b6e:	4610      	movne	r0, r2
   50b70:	2000      	moveq	r0, #0
            debounce_update(&data->matrix_state[index], active, config->debounce_scan_period_ms,
   50b72:	1c01      	adds	r1, r0, #0
   50b74:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
   50b78:	9b04      	ldr	r3, [sp, #16]
   50b7a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   50b7c:	bf18      	it	ne
   50b7e:	2101      	movne	r1, #1
   50b80:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   50b84:	f7ff feb2 	bl	508ec <debounce_update>
        for (int i = 0; i < config->inputs.len; i++) {
   50b88:	3401      	adds	r4, #1
   50b8a:	e7c2      	b.n	50b12 <kscan_matrix_read+0xb4>
    return (col * config->rows.len) + row;
   50b8c:	fb01 4806 	mla	r8, r1, r6, r4
   50b90:	e7d9      	b.n	50b46 <kscan_matrix_read+0xe8>
   50b92:	fb03 8b0a 	mla	fp, r3, sl, r8
            struct debounce_state *state = &data->matrix_state[index];
   50b96:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
   50b9a:	eb03 0b4b 	add.w	fp, r3, fp, lsl #1
            if (debounce_get_changed(state)) {
   50b9e:	4658      	mov	r0, fp
   50ba0:	f7ff fee4 	bl	5096c <debounce_get_changed>
   50ba4:	b148      	cbz	r0, 50bba <kscan_matrix_read+0x15c>
                const bool pressed = debounce_is_pressed(state);
   50ba6:	4658      	mov	r0, fp
   50ba8:	f7ff fedc 	bl	50964 <debounce_is_pressed>
                data->callback(dev, r, c, pressed);
   50bac:	f8d9 4004 	ldr.w	r4, [r9, #4]
   50bb0:	4603      	mov	r3, r0
   50bb2:	4652      	mov	r2, sl
   50bb4:	4641      	mov	r1, r8
   50bb6:	4638      	mov	r0, r7
   50bb8:	47a0      	blx	r4
            continue_scan = continue_scan || debounce_is_active(state);
   50bba:	b96e      	cbnz	r6, 50bd8 <kscan_matrix_read+0x17a>
   50bbc:	4658      	mov	r0, fp
   50bbe:	f7ff feca 	bl	50956 <debounce_is_active>
   50bc2:	f000 0601 	and.w	r6, r0, #1
        for (int c = 0; c < config->cols.len; c++) {
   50bc6:	f10a 0a01 	add.w	sl, sl, #1
   50bca:	68ea      	ldr	r2, [r5, #12]
   50bcc:	686b      	ldr	r3, [r5, #4]
   50bce:	4552      	cmp	r2, sl
   50bd0:	d8df      	bhi.n	50b92 <kscan_matrix_read+0x134>
    for (int r = 0; r < config->rows.len; r++) {
   50bd2:	f108 0801 	add.w	r8, r8, #1
   50bd6:	e750      	b.n	50a7a <kscan_matrix_read+0x1c>
            continue_scan = continue_scan || debounce_is_active(state);
   50bd8:	2001      	movs	r0, #1
   50bda:	e7f2      	b.n	50bc2 <kscan_matrix_read+0x164>
        for (int c = 0; c < config->cols.len; c++) {
   50bdc:	f04f 0a00 	mov.w	sl, #0
   50be0:	e7f3      	b.n	50bca <kscan_matrix_read+0x16c>
    k_work_reschedule(&data->work, K_TIMEOUT_ABS_MS(data->scan_time));
   50be2:	f06f 0201 	mvn.w	r2, #1
   50be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   50bea:	e778      	b.n	50ade <kscan_matrix_read+0x80>
    int err = kscan_matrix_interrupt_configure(dev, GPIO_INT_LEVEL_ACTIVE);
   50bec:	f44f 2198 	mov.w	r1, #311296	; 0x4c000
   50bf0:	f7ff ff08 	bl	50a04 <kscan_matrix_interrupt_configure.isra.2>
    if (err) {
   50bf4:	4604      	mov	r4, r0
   50bf6:	b920      	cbnz	r0, 50c02 <kscan_matrix_read+0x1a4>
    return kscan_matrix_set_all_outputs(dev, 1);
   50bf8:	2101      	movs	r1, #1
   50bfa:	6878      	ldr	r0, [r7, #4]
   50bfc:	f7ff feec 	bl	509d8 <kscan_matrix_set_all_outputs.isra.1>
   50c00:	e771      	b.n	50ae6 <kscan_matrix_read+0x88>
    return 0;
   50c02:	4634      	mov	r4, r6
   50c04:	e76f      	b.n	50ae6 <kscan_matrix_read+0x88>

00050c06 <kscan_matrix_work_handler>:
    kscan_matrix_read(data->dev);
   50c06:	f850 0c08 	ldr.w	r0, [r0, #-8]
   50c0a:	f7ff bf28 	b.w	50a5e <kscan_matrix_read>

00050c0e <kscan_matrix_interrupt_disable>:
static int kscan_matrix_interrupt_disable(const struct device *dev) {
   50c0e:	b510      	push	{r4, lr}
    int err = kscan_matrix_interrupt_configure(dev, GPIO_INT_DISABLE);
   50c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
static int kscan_matrix_interrupt_disable(const struct device *dev) {
   50c14:	4604      	mov	r4, r0
    int err = kscan_matrix_interrupt_configure(dev, GPIO_INT_DISABLE);
   50c16:	6840      	ldr	r0, [r0, #4]
   50c18:	f7ff fef4 	bl	50a04 <kscan_matrix_interrupt_configure.isra.2>
    if (err) {
   50c1c:	4601      	mov	r1, r0
   50c1e:	b920      	cbnz	r0, 50c2a <kscan_matrix_interrupt_disable+0x1c>
    return kscan_matrix_set_all_outputs(dev, 0);
   50c20:	6860      	ldr	r0, [r4, #4]
}
   50c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_matrix_set_all_outputs(dev, 0);
   50c26:	f7ff bed7 	b.w	509d8 <kscan_matrix_set_all_outputs.isra.1>
}
   50c2a:	bd10      	pop	{r4, pc}

00050c2c <kscan_matrix_irq_callback_handler>:
    struct kscan_matrix_data *data = irq_data->dev->data;
   50c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
                                              const gpio_port_pins_t pin) {
   50c30:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
    struct kscan_matrix_data *data = irq_data->dev->data;
   50c34:	691c      	ldr	r4, [r3, #16]
    kscan_matrix_interrupt_disable(data->dev);
   50c36:	6820      	ldr	r0, [r4, #0]
   50c38:	f7ff ffe9 	bl	50c0e <kscan_matrix_interrupt_disable>
	return z_impl_k_uptime_ticks();
   50c3c:	f000 fc61 	bl	51502 <z_impl_k_uptime_ticks>
   50c40:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   50c44:	fba0 bc05 	umull	fp, ip, r0, r5
   50c48:	fb05 cc01 	mla	ip, r5, r1, ip
   50c4c:	ea4f 32db 	mov.w	r2, fp, lsr #15
   50c50:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
   50c54:	ea4f 33dc 	mov.w	r3, ip, lsr #15
    data->scan_time = k_uptime_get();
   50c58:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    k_work_reschedule(&data->work, K_NO_WAIT);
   50c5c:	f104 0008 	add.w	r0, r4, #8
   50c60:	2200      	movs	r2, #0
   50c62:	2300      	movs	r3, #0
}
   50c64:	e8bd 4830 	ldmia.w	sp!, {r4, r5, fp, lr}
    k_work_reschedule(&data->work, K_NO_WAIT);
   50c68:	f7f8 b830 	b.w	48ccc <k_work_reschedule>

00050c6c <kscan_matrix_disable>:
static int kscan_matrix_disable(const struct device *dev) {
   50c6c:	b510      	push	{r4, lr}
   50c6e:	4604      	mov	r4, r0
    k_work_cancel_delayable(&data->work);
   50c70:	6900      	ldr	r0, [r0, #16]
   50c72:	3008      	adds	r0, #8
   50c74:	f000 faac 	bl	511d0 <k_work_cancel_delayable>
    return kscan_matrix_interrupt_disable(dev);
   50c78:	4620      	mov	r0, r4
}
   50c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return kscan_matrix_interrupt_disable(dev);
   50c7e:	f7ff bfc6 	b.w	50c0e <kscan_matrix_interrupt_disable>

00050c82 <kscan_matrix_enable>:
static int kscan_matrix_enable(const struct device *dev) {
   50c82:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
   50c86:	4604      	mov	r4, r0
    struct kscan_matrix_data *data = dev->data;
   50c88:	6905      	ldr	r5, [r0, #16]
   50c8a:	f000 fc3a 	bl	51502 <z_impl_k_uptime_ticks>
   50c8e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   50c92:	fba0 bc06 	umull	fp, ip, r0, r6
   50c96:	fb06 cc01 	mla	ip, r6, r1, ip
   50c9a:	ea4f 32db 	mov.w	r2, fp, lsr #15
   50c9e:	ea4f 33dc 	mov.w	r3, ip, lsr #15
   50ca2:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
    data->scan_time = k_uptime_get();
   50ca6:	e9c5 2310 	strd	r2, r3, [r5, #64]	; 0x40
    return kscan_matrix_read(dev);
   50caa:	4620      	mov	r0, r4
}
   50cac:	e8bd 4878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, lr}
    return kscan_matrix_read(dev);
   50cb0:	f7ff bed5 	b.w	50a5e <kscan_matrix_read>

00050cb4 <battery_channel_get>:

#include "battery_common.h"

int battery_channel_get(const struct battery_value *value, enum sensor_channel chan,
                        struct sensor_value *val_out) {
    switch (chan) {
   50cb4:	2927      	cmp	r1, #39	; 0x27
   50cb6:	d004      	beq.n	50cc2 <battery_channel_get+0xe>
   50cb8:	292c      	cmp	r1, #44	; 0x2c
   50cba:	d00f      	beq.n	50cdc <battery_channel_get+0x28>
        val_out->val1 = value->state_of_charge;
        val_out->val2 = 0;
        break;

    default:
        return -ENOTSUP;
   50cbc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   50cc0:	4770      	bx	lr
        val_out->val1 = value->millivolts / 1000;
   50cc2:	8840      	ldrh	r0, [r0, #2]
   50cc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   50cc8:	fbb0 f3f1 	udiv	r3, r0, r1
   50ccc:	6013      	str	r3, [r2, #0]
        val_out->val2 = (value->millivolts % 1000) * 1000U;
   50cce:	fb01 0313 	mls	r3, r1, r3, r0
   50cd2:	b29b      	uxth	r3, r3
   50cd4:	434b      	muls	r3, r1
   50cd6:	6053      	str	r3, [r2, #4]
    }

    return 0;
   50cd8:	2000      	movs	r0, #0
        break;
   50cda:	4770      	bx	lr
        val_out->val1 = value->state_of_charge;
   50cdc:	7903      	ldrb	r3, [r0, #4]
   50cde:	6013      	str	r3, [r2, #0]
        val_out->val2 = 0;
   50ce0:	2000      	movs	r0, #0
   50ce2:	6050      	str	r0, [r2, #4]
}
   50ce4:	4770      	bx	lr

00050ce6 <lithium_ion_mv_to_pct>:

uint8_t lithium_ion_mv_to_pct(int16_t bat_mv) {
    // Simple linear approximation of a battery based off adafruit's discharge graph:
    // https://learn.adafruit.com/li-ion-and-lipoly-batteries/voltages

    if (bat_mv >= 4200) {
   50ce6:	f241 0367 	movw	r3, #4199	; 0x1067
   50cea:	4298      	cmp	r0, r3
   50cec:	dc0a      	bgt.n	50d04 <lithium_ion_mv_to_pct+0x1e>
        return 100;
    } else if (bat_mv <= 3450) {
   50cee:	f640 537a 	movw	r3, #3450	; 0xd7a
   50cf2:	4298      	cmp	r0, r3
   50cf4:	dd08      	ble.n	50d08 <lithium_ion_mv_to_pct+0x22>
        return 0;
    }

    return bat_mv * 2 / 15 - 459;
   50cf6:	230f      	movs	r3, #15
   50cf8:	0040      	lsls	r0, r0, #1
   50cfa:	fbb0 f0f3 	udiv	r0, r0, r3
   50cfe:	3035      	adds	r0, #53	; 0x35
   50d00:	b2c0      	uxtb	r0, r0
   50d02:	4770      	bx	lr
        return 100;
   50d04:	2064      	movs	r0, #100	; 0x64
   50d06:	4770      	bx	lr
        return 0;
   50d08:	2000      	movs	r0, #0
   50d0a:	4770      	bx	lr

00050d0c <vddh_channel_get>:
    return battery_channel_get(&drv_data->value, chan, val);
   50d0c:	6900      	ldr	r0, [r0, #16]
   50d0e:	301c      	adds	r0, #28
   50d10:	f7ff bfd0 	b.w	50cb4 <battery_channel_get>

00050d14 <z_device_state_init>:
}
   50d14:	4770      	bx	lr

00050d16 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   50d16:	b138      	cbz	r0, 50d28 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   50d18:	68c3      	ldr	r3, [r0, #12]
   50d1a:	8818      	ldrh	r0, [r3, #0]
   50d1c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   50d20:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   50d24:	4258      	negs	r0, r3
   50d26:	4158      	adcs	r0, r3
}
   50d28:	4770      	bx	lr

00050d2a <arch_system_halt>:
	__asm__ volatile(
   50d2a:	f04f 0220 	mov.w	r2, #32
   50d2e:	f3ef 8311 	mrs	r3, BASEPRI
   50d32:	f382 8812 	msr	BASEPRI_MAX, r2
   50d36:	f3bf 8f6f 	isb	sy
	 */

	(void)arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
   50d3a:	e7fe      	b.n	50d3a <arch_system_halt+0x10>

00050d3c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   50d3c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   50d3e:	f7ff fff4 	bl	50d2a <arch_system_halt>

00050d42 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   50d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   50d44:	4606      	mov	r6, r0
   50d46:	460f      	mov	r7, r1
   50d48:	f04f 0320 	mov.w	r3, #32
   50d4c:	f3ef 8511 	mrs	r5, BASEPRI
   50d50:	f383 8812 	msr	BASEPRI_MAX, r3
   50d54:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   50d58:	f7f8 faae 	bl	492b8 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   50d5c:	4639      	mov	r1, r7
   50d5e:	4604      	mov	r4, r0
   50d60:	4630      	mov	r0, r6
   50d62:	f7ff ffeb 	bl	50d3c <k_sys_fatal_error_handler>
	__asm__ volatile(
   50d66:	f385 8811 	msr	BASEPRI, r5
   50d6a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   50d6e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   50d70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   50d74:	f7dc b8be 	b.w	2cef4 <z_impl_k_thread_abort>

00050d78 <k_heap_init>:
{
   50d78:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   50d7a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   50d7e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   50d82:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   50d84:	f7f9 bc5e 	b.w	4a644 <sys_heap_init>

00050d88 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   50d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   50d8c:	b087      	sub	sp, #28
   50d8e:	4604      	mov	r4, r0
   50d90:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   50d92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   50d96:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   50d98:	f000 fbb9 	bl	5150e <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   50d9c:	f104 0814 	add.w	r8, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   50da0:	4605      	mov	r5, r0
   50da2:	468a      	mov	sl, r1
	__asm__ volatile(
   50da4:	f04f 0320 	mov.w	r3, #32
   50da8:	f3ef 8b11 	mrs	fp, BASEPRI
   50dac:	f383 8812 	msr	BASEPRI_MAX, r3
   50db0:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   50db4:	f104 090c 	add.w	r9, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   50db8:	463a      	mov	r2, r7
   50dba:	4631      	mov	r1, r6
   50dbc:	4620      	mov	r0, r4
   50dbe:	f7f9 fbda 	bl	4a576 <sys_heap_aligned_alloc>
   50dc2:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   50dc4:	f7f8 fc52 	bl	4966c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   50dc8:	9b05      	ldr	r3, [sp, #20]
   50dca:	b13b      	cbz	r3, 50ddc <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   50dcc:	f38b 8811 	msr	BASEPRI, fp
   50dd0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   50dd4:	4618      	mov	r0, r3
   50dd6:	b007      	add	sp, #28
   50dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   50ddc:	1a2a      	subs	r2, r5, r0
   50dde:	9202      	str	r2, [sp, #8]
   50de0:	eb6a 0201 	sbc.w	r2, sl, r1
   50de4:	9203      	str	r2, [sp, #12]
   50de6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   50dea:	2901      	cmp	r1, #1
   50dec:	f172 0200 	sbcs.w	r2, r2, #0
   50df0:	dbec      	blt.n	50dcc <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   50df2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   50df6:	4659      	mov	r1, fp
   50df8:	e9cd 2300 	strd	r2, r3, [sp]
   50dfc:	4640      	mov	r0, r8
   50dfe:	464a      	mov	r2, r9
   50e00:	f7f8 f900 	bl	49004 <z_pend_curr>
	__asm__ volatile(
   50e04:	f04f 0320 	mov.w	r3, #32
   50e08:	f3ef 8b11 	mrs	fp, BASEPRI
   50e0c:	f383 8812 	msr	BASEPRI_MAX, r3
   50e10:	f3bf 8f6f 	isb	sy
   50e14:	e7d0      	b.n	50db8 <k_heap_aligned_alloc+0x30>

00050e16 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   50e16:	b538      	push	{r3, r4, r5, lr}
   50e18:	4605      	mov	r5, r0
   50e1a:	f04f 0320 	mov.w	r3, #32
   50e1e:	f3ef 8411 	mrs	r4, BASEPRI
   50e22:	f383 8812 	msr	BASEPRI_MAX, r3
   50e26:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   50e2a:	f7f9 fb6a 	bl	4a502 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   50e2e:	f105 000c 	add.w	r0, r5, #12
   50e32:	f000 faf5 	bl	51420 <z_unpend_all>
   50e36:	b130      	cbz	r0, 50e46 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   50e38:	4621      	mov	r1, r4
   50e3a:	f105 0014 	add.w	r0, r5, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   50e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   50e42:	f7f7 bf91 	b.w	48d68 <z_reschedule>
	__asm__ volatile(
   50e46:	f384 8811 	msr	BASEPRI, r4
   50e4a:	f3bf 8f6f 	isb	sy
}
   50e4e:	bd38      	pop	{r3, r4, r5, pc}

00050e50 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   50e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   50e52:	4604      	mov	r4, r0
   50e54:	460d      	mov	r5, r1
	__asm__ volatile(
   50e56:	f04f 0320 	mov.w	r3, #32
   50e5a:	f3ef 8611 	mrs	r6, BASEPRI
   50e5e:	f383 8812 	msr	BASEPRI_MAX, r3
   50e62:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   50e66:	6947      	ldr	r7, [r0, #20]
   50e68:	b977      	cbnz	r7, 50e88 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   50e6a:	f000 fac1 	bl	513f0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   50e6e:	b158      	cbz	r0, 50e88 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   50e70:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   50e72:	6142      	str	r2, [r0, #20]
   50e74:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   50e76:	f000 fa47 	bl	51308 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   50e7a:	4631      	mov	r1, r6
   50e7c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   50e80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   50e84:	f7f7 bf70 	b.w	48d68 <z_reschedule>
	**(char ***) mem = slab->free_list;
   50e88:	682b      	ldr	r3, [r5, #0]
   50e8a:	6962      	ldr	r2, [r4, #20]
   50e8c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   50e8e:	682b      	ldr	r3, [r5, #0]
   50e90:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   50e92:	69a3      	ldr	r3, [r4, #24]
   50e94:	3b01      	subs	r3, #1
   50e96:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   50e98:	f386 8811 	msr	BASEPRI, r6
   50e9c:	f3bf 8f6f 	isb	sy
}
   50ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00050ea2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   50ea2:	f3ef 8005 	mrs	r0, IPSR
}
   50ea6:	3000      	adds	r0, #0
   50ea8:	bf18      	it	ne
   50eaa:	2001      	movne	r0, #1
   50eac:	4770      	bx	lr

00050eae <z_impl_k_thread_name_set>:
}
   50eae:	f06f 0057 	mvn.w	r0, #87	; 0x57
   50eb2:	4770      	bx	lr

00050eb4 <z_impl_k_thread_start>:
	z_sched_start(thread);
   50eb4:	f7f8 b84c 	b.w	48f50 <z_sched_start>

00050eb8 <z_pm_save_idle_exit>:
{
   50eb8:	b508      	push	{r3, lr}
	pm_system_resume();
   50eba:	f7db faa3 	bl	2c404 <pm_system_resume>
}
   50ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   50ec2:	f7ff bbdf 	b.w	50684 <sys_clock_idle_exit>

00050ec6 <z_impl_k_mutex_init>:
{
   50ec6:	4603      	mov	r3, r0
	mutex->owner = NULL;
   50ec8:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   50eca:	e9c3 0002 	strd	r0, r0, [r3, #8]
   50ece:	e9c3 3300 	strd	r3, r3, [r3]
}
   50ed2:	4770      	bx	lr

00050ed4 <queue_insert>:
{
   50ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   50ed8:	4699      	mov	r9, r3
   50eda:	4604      	mov	r4, r0
   50edc:	460f      	mov	r7, r1
   50ede:	4690      	mov	r8, r2
   50ee0:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   50ee4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   50ee8:	f04f 0220 	mov.w	r2, #32
   50eec:	f3ef 8611 	mrs	r6, BASEPRI
   50ef0:	f382 8812 	msr	BASEPRI_MAX, r2
   50ef4:	f3bf 8f6f 	isb	sy
	if (is_append) {
   50ef8:	b103      	cbz	r3, 50efc <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   50efa:	6847      	ldr	r7, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   50efc:	4628      	mov	r0, r5
   50efe:	f000 fa77 	bl	513f0 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   50f02:	b158      	cbz	r0, 50f1c <queue_insert+0x48>
   50f04:	2400      	movs	r4, #0
   50f06:	67c4      	str	r4, [r0, #124]	; 0x7c
   50f08:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   50f0c:	f000 f9fc 	bl	51308 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   50f10:	4628      	mov	r0, r5
   50f12:	4631      	mov	r1, r6
   50f14:	f7f7 ff28 	bl	48d68 <z_reschedule>
	return 0;
   50f18:	2000      	movs	r0, #0
   50f1a:	e00c      	b.n	50f36 <queue_insert+0x62>
	if (alloc) {
   50f1c:	f1b9 0f00 	cmp.w	r9, #0
   50f20:	d01b      	beq.n	50f5a <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   50f22:	2108      	movs	r1, #8
   50f24:	f7f8 fd06 	bl	49934 <z_thread_aligned_alloc>
		if (anode == NULL) {
   50f28:	b938      	cbnz	r0, 50f3a <queue_insert+0x66>
	__asm__ volatile(
   50f2a:	f386 8811 	msr	BASEPRI, r6
   50f2e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   50f32:	f06f 000b 	mvn.w	r0, #11
}
   50f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   50f3a:	2301      	movs	r3, #1
		anode->data = data;
   50f3c:	f8c0 8004 	str.w	r8, [r0, #4]
   50f40:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   50f42:	6803      	ldr	r3, [r0, #0]
   50f44:	f003 0203 	and.w	r2, r3, #3
   50f48:	b95f      	cbnz	r7, 50f62 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   50f4a:	6823      	ldr	r3, [r4, #0]
   50f4c:	4313      	orrs	r3, r2
   50f4e:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   50f50:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   50f52:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   50f54:	b973      	cbnz	r3, 50f74 <queue_insert+0xa0>
	list->tail = node;
   50f56:	6060      	str	r0, [r4, #4]
   50f58:	e00c      	b.n	50f74 <queue_insert+0xa0>
	node->next_and_flags = flags;
   50f5a:	f8c8 9000 	str.w	r9, [r8]
   50f5e:	4640      	mov	r0, r8
   50f60:	e7ef      	b.n	50f42 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   50f62:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   50f64:	f033 0303 	bics.w	r3, r3, #3
   50f68:	d110      	bne.n	50f8c <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   50f6a:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   50f6c:	6862      	ldr	r2, [r4, #4]
   50f6e:	b93a      	cbnz	r2, 50f80 <queue_insert+0xac>
	list->head = node;
   50f70:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   50f74:	2104      	movs	r1, #4
   50f76:	f104 0010 	add.w	r0, r4, #16
   50f7a:	f000 fc36 	bl	517ea <z_handle_obj_poll_events>
   50f7e:	e7c7      	b.n	50f10 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   50f80:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   50f82:	f003 0303 	and.w	r3, r3, #3
   50f86:	4303      	orrs	r3, r0
   50f88:	6013      	str	r3, [r2, #0]
   50f8a:	e7e4      	b.n	50f56 <queue_insert+0x82>
   50f8c:	4313      	orrs	r3, r2
   50f8e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   50f90:	683b      	ldr	r3, [r7, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   50f92:	f003 0303 	and.w	r3, r3, #3
   50f96:	4318      	orrs	r0, r3
   50f98:	6038      	str	r0, [r7, #0]
   50f9a:	e7eb      	b.n	50f74 <queue_insert+0xa0>

00050f9c <z_queue_node_peek>:
{
   50f9c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   50f9e:	4604      	mov	r4, r0
   50fa0:	b130      	cbz	r0, 50fb0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   50fa2:	6802      	ldr	r2, [r0, #0]
   50fa4:	0793      	lsls	r3, r2, #30
   50fa6:	d003      	beq.n	50fb0 <z_queue_node_peek+0x14>
		ret = anode->data;
   50fa8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   50faa:	b109      	cbz	r1, 50fb0 <z_queue_node_peek+0x14>
			k_free(anode);
   50fac:	f000 fc3e 	bl	5182c <k_free>
}
   50fb0:	4620      	mov	r0, r4
   50fb2:	bd10      	pop	{r4, pc}

00050fb4 <z_impl_k_queue_init>:
	list->head = NULL;
   50fb4:	2300      	movs	r3, #0
	list->tail = NULL;
   50fb6:	e9c0 3300 	strd	r3, r3, [r0]
   50fba:	f100 0308 	add.w	r3, r0, #8
   50fbe:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   50fc2:	f100 0310 	add.w	r3, r0, #16
   50fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   50fca:	4770      	bx	lr

00050fcc <k_queue_append>:
{
   50fcc:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   50fce:	2301      	movs	r3, #1
   50fd0:	9300      	str	r3, [sp, #0]
   50fd2:	2300      	movs	r3, #0
   50fd4:	460a      	mov	r2, r1
   50fd6:	4619      	mov	r1, r3
   50fd8:	f7ff ff7c 	bl	50ed4 <queue_insert>
}
   50fdc:	b003      	add	sp, #12
   50fde:	f85d fb04 	ldr.w	pc, [sp], #4

00050fe2 <k_queue_prepend>:
{
   50fe2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   50fe4:	2300      	movs	r3, #0
   50fe6:	460a      	mov	r2, r1
   50fe8:	9300      	str	r3, [sp, #0]
   50fea:	4619      	mov	r1, r3
   50fec:	f7ff ff72 	bl	50ed4 <queue_insert>
}
   50ff0:	b003      	add	sp, #12
   50ff2:	f85d fb04 	ldr.w	pc, [sp], #4

00050ff6 <k_queue_append_list>:
{
   50ff6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   50ffa:	4605      	mov	r5, r0
   50ffc:	4617      	mov	r7, r2
	CHECKIF(head == NULL || tail == NULL) {
   50ffe:	460c      	mov	r4, r1
   51000:	b391      	cbz	r1, 51068 <k_queue_append_list+0x72>
   51002:	b38a      	cbz	r2, 51068 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   51004:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   51008:	f04f 0320 	mov.w	r3, #32
   5100c:	f3ef 8811 	mrs	r8, BASEPRI
   51010:	f383 8812 	msr	BASEPRI_MAX, r3
   51014:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   51018:	4630      	mov	r0, r6
   5101a:	f000 f9e9 	bl	513f0 <z_unpend_first_thread>
   5101e:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   51022:	b920      	cbnz	r0, 5102e <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   51024:	686b      	ldr	r3, [r5, #4]
   51026:	b9cb      	cbnz	r3, 5105c <k_queue_append_list+0x66>
	list->head = node;
   51028:	602c      	str	r4, [r5, #0]
	list->tail = node;
   5102a:	606f      	str	r7, [r5, #4]
   5102c:	e00a      	b.n	51044 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   5102e:	6144      	str	r4, [r0, #20]
   51030:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   51034:	f000 f968 	bl	51308 <z_ready_thread>
		head = *(void **)head;
   51038:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   5103a:	4630      	mov	r0, r6
   5103c:	f000 f9d8 	bl	513f0 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   51040:	2c00      	cmp	r4, #0
   51042:	d1ee      	bne.n	51022 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   51044:	2104      	movs	r1, #4
   51046:	f105 0010 	add.w	r0, r5, #16
   5104a:	f000 fbce 	bl	517ea <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   5104e:	4630      	mov	r0, r6
   51050:	4641      	mov	r1, r8
   51052:	f7f7 fe89 	bl	48d68 <z_reschedule>
	return 0;
   51056:	2000      	movs	r0, #0
}
   51058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   5105c:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   5105e:	f001 0103 	and.w	r1, r1, #3
   51062:	430c      	orrs	r4, r1
   51064:	601c      	str	r4, [r3, #0]
   51066:	e7e0      	b.n	5102a <k_queue_append_list+0x34>
		return -EINVAL;
   51068:	f06f 0015 	mvn.w	r0, #21
   5106c:	e7f4      	b.n	51058 <k_queue_append_list+0x62>

0005106e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   5106e:	b15a      	cbz	r2, 51088 <z_impl_k_sem_init+0x1a>
   51070:	428a      	cmp	r2, r1
   51072:	d309      	bcc.n	51088 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   51074:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   51078:	e9c0 1202 	strd	r1, r2, [r0, #8]
   5107c:	e9c0 0000 	strd	r0, r0, [r0]
   51080:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   51084:	2000      	movs	r0, #0
   51086:	4770      	bx	lr
		return -EINVAL;
   51088:	f06f 0015 	mvn.w	r0, #21
}
   5108c:	4770      	bx	lr

0005108e <flag_test_and_clear>:
	bool ret = flag_test(flagp, bit);
   5108e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   51090:	2301      	movs	r3, #1
   51092:	408b      	lsls	r3, r1
   51094:	ea22 0303 	bic.w	r3, r2, r3
   51098:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   5109a:	fa22 f001 	lsr.w	r0, r2, r1
}
   5109e:	f000 0001 	and.w	r0, r0, #1
   510a2:	4770      	bx	lr

000510a4 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   510a4:	68c3      	ldr	r3, [r0, #12]
{
   510a6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   510a8:	f3c3 0540 	ubfx	r5, r3, #1, #1
{
   510ac:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   510ae:	b9b5      	cbnz	r5, 510de <cancel_async_locked+0x3a>
		queue_remove_locked(work->queue, work);
   510b0:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   510b2:	2102      	movs	r1, #2
   510b4:	300c      	adds	r0, #12
   510b6:	f7ff ffea 	bl	5108e <flag_test_and_clear>
   510ba:	b180      	cbz	r0, 510de <cancel_async_locked+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   510bc:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
   510c0:	b16a      	cbz	r2, 510de <cancel_async_locked+0x3a>
   510c2:	4294      	cmp	r4, r2
   510c4:	d11d      	bne.n	51102 <cancel_async_locked+0x5e>
Z_GENLIST_REMOVE(slist, snode)
   510c6:	6822      	ldr	r2, [r4, #0]
   510c8:	b99d      	cbnz	r5, 510f2 <cancel_async_locked+0x4e>
   510ca:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
	list->head = node;
   510ce:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   510d2:	429c      	cmp	r4, r3
   510d4:	d101      	bne.n	510da <cancel_async_locked+0x36>
	list->tail = node;
   510d6:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   510da:	2300      	movs	r3, #0
   510dc:	6023      	str	r3, [r4, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   510de:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   510e0:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   510e4:	bf1e      	ittt	ne
   510e6:	f043 0302 	orrne.w	r3, r3, #2
   510ea:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   510ec:	f003 000f 	andne.w	r0, r3, #15
}
   510f0:	bd70      	pop	{r4, r5, r6, pc}
   510f2:	602a      	str	r2, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   510f4:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
   510f8:	4294      	cmp	r4, r2
	list->tail = node;
   510fa:	bf08      	it	eq
   510fc:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
   51100:	e7eb      	b.n	510da <cancel_async_locked+0x36>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   51102:	4615      	mov	r5, r2
   51104:	6812      	ldr	r2, [r2, #0]
   51106:	e7db      	b.n	510c0 <cancel_async_locked+0x1c>

00051108 <unschedule_locked>:
{
   51108:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   5110a:	2103      	movs	r1, #3
{
   5110c:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   5110e:	300c      	adds	r0, #12
   51110:	f7ff ffbd 	bl	5108e <flag_test_and_clear>
   51114:	4604      	mov	r4, r0
   51116:	b118      	cbz	r0, 51120 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   51118:	f105 0010 	add.w	r0, r5, #16
   5111c:	f000 f9ad 	bl	5147a <z_abort_timeout>
}
   51120:	4620      	mov	r0, r4
   51122:	bd38      	pop	{r3, r4, r5, pc}

00051124 <notify_queue_locked>:
	if (queue != NULL) {
   51124:	b120      	cbz	r0, 51130 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   51126:	2200      	movs	r2, #0
   51128:	4611      	mov	r1, r2
   5112a:	3088      	adds	r0, #136	; 0x88
   5112c:	f000 b988 	b.w	51440 <z_sched_wake>
}
   51130:	4770      	bx	lr

00051132 <work_timeout>:
{
   51132:	b573      	push	{r0, r1, r4, r5, r6, lr}
   51134:	4604      	mov	r4, r0
   51136:	f04f 0320 	mov.w	r3, #32
   5113a:	f3ef 8511 	mrs	r5, BASEPRI
   5113e:	f383 8812 	msr	BASEPRI_MAX, r3
   51142:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   51146:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   51148:	f1a0 0610 	sub.w	r6, r0, #16
   5114c:	2103      	movs	r1, #3
   5114e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   51150:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   51152:	f7ff ff9c 	bl	5108e <flag_test_and_clear>
   51156:	b128      	cbz	r0, 51164 <work_timeout+0x32>
		queue = dw->queue;
   51158:	69a3      	ldr	r3, [r4, #24]
   5115a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   5115c:	a901      	add	r1, sp, #4
   5115e:	4630      	mov	r0, r6
   51160:	f7f7 fcc8 	bl	48af4 <submit_to_queue_locked>
	__asm__ volatile(
   51164:	f385 8811 	msr	BASEPRI, r5
   51168:	f3bf 8f6f 	isb	sy
}
   5116c:	b002      	add	sp, #8
   5116e:	bd70      	pop	{r4, r5, r6, pc}

00051170 <k_work_init>:
{
   51170:	b510      	push	{r4, lr}
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   51172:	2210      	movs	r2, #16
{
   51174:	460c      	mov	r4, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   51176:	2100      	movs	r1, #0
   51178:	f7fb f8c3 	bl	4c302 <memset>
   5117c:	6044      	str	r4, [r0, #4]
}
   5117e:	bd10      	pop	{r4, pc}

00051180 <k_work_submit_to_queue>:
{
   51180:	b537      	push	{r0, r1, r2, r4, r5, lr}
   51182:	9001      	str	r0, [sp, #4]
   51184:	4608      	mov	r0, r1
	__asm__ volatile(
   51186:	f04f 0320 	mov.w	r3, #32
   5118a:	f3ef 8511 	mrs	r5, BASEPRI
   5118e:	f383 8812 	msr	BASEPRI_MAX, r3
   51192:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   51196:	a901      	add	r1, sp, #4
   51198:	f7f7 fcac 	bl	48af4 <submit_to_queue_locked>
   5119c:	4604      	mov	r4, r0
	__asm__ volatile(
   5119e:	f385 8811 	msr	BASEPRI, r5
   511a2:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   511a6:	2800      	cmp	r0, #0
   511a8:	dd04      	ble.n	511b4 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   511aa:	f7f8 f88b 	bl	492c4 <z_impl_k_is_preempt_thread>
   511ae:	b108      	cbz	r0, 511b4 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   511b0:	f7f7 ffdc 	bl	4916c <z_impl_k_yield>
}
   511b4:	4620      	mov	r0, r4
   511b6:	b003      	add	sp, #12
   511b8:	bd30      	pop	{r4, r5, pc}

000511ba <k_work_init_delayable>:
{
   511ba:	b510      	push	{r4, lr}
	*dwork = (struct k_work_delayable){
   511bc:	2230      	movs	r2, #48	; 0x30
{
   511be:	460c      	mov	r4, r1
	*dwork = (struct k_work_delayable){
   511c0:	2100      	movs	r1, #0
   511c2:	f7fb f89e 	bl	4c302 <memset>
   511c6:	f44f 7280 	mov.w	r2, #256	; 0x100
   511ca:	6044      	str	r4, [r0, #4]
   511cc:	60c2      	str	r2, [r0, #12]
}
   511ce:	bd10      	pop	{r4, pc}

000511d0 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   511d0:	b538      	push	{r3, r4, r5, lr}
   511d2:	4605      	mov	r5, r0
	__asm__ volatile(
   511d4:	f04f 0320 	mov.w	r3, #32
   511d8:	f3ef 8411 	mrs	r4, BASEPRI
   511dc:	f383 8812 	msr	BASEPRI_MAX, r3
   511e0:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   511e4:	f7ff ff90 	bl	51108 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   511e8:	4628      	mov	r0, r5
   511ea:	f7ff ff5b 	bl	510a4 <cancel_async_locked>
	__asm__ volatile(
   511ee:	f384 8811 	msr	BASEPRI, r4
   511f2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   511f6:	bd38      	pop	{r3, r4, r5, pc}

000511f8 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   511f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   511fa:	4604      	mov	r4, r0
   511fc:	460d      	mov	r5, r1
	__asm__ volatile(
   511fe:	f04f 0320 	mov.w	r3, #32
   51202:	f3ef 8711 	mrs	r7, BASEPRI
   51206:	f383 8812 	msr	BASEPRI_MAX, r3
   5120a:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   5120e:	68c3      	ldr	r3, [r0, #12]
   51210:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   51214:	2b00      	cmp	r3, #0
   51216:	bf14      	ite	ne
   51218:	2601      	movne	r6, #1
   5121a:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   5121c:	d017      	beq.n	5124e <k_work_cancel_delayable_sync+0x56>
	(void)unschedule_locked(dwork);
   5121e:	f7ff ff73 	bl	51108 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   51222:	4620      	mov	r0, r4
   51224:	f7ff ff3e 	bl	510a4 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   51228:	4629      	mov	r1, r5
   5122a:	4620      	mov	r0, r4
   5122c:	f7f7 fc44 	bl	48ab8 <cancel_sync_locked>
	__asm__ volatile(
   51230:	f387 8811 	msr	BASEPRI, r7
   51234:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   51238:	b138      	cbz	r0, 5124a <k_work_cancel_delayable_sync+0x52>
	return z_impl_k_sem_take(sem, timeout);
   5123a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   5123e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   51242:	f105 0008 	add.w	r0, r5, #8
   51246:	f7f7 fb5d 	bl	48904 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   5124a:	4630      	mov	r0, r6
   5124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	bool need_wait = false;
   5124e:	4618      	mov	r0, r3
   51250:	e7ee      	b.n	51230 <k_work_cancel_delayable_sync+0x38>

00051252 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   51252:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   51256:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   51258:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   5125a:	2300      	movs	r3, #0
	node->prev = NULL;
   5125c:	e9c0 3300 	strd	r3, r3, [r0]
}
   51260:	4770      	bx	lr

00051262 <unpend_thread_no_timeout>:
{
   51262:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   51264:	f7ff fff5 	bl	51252 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   51268:	7b43      	ldrb	r3, [r0, #13]
   5126a:	f023 0302 	bic.w	r3, r3, #2
   5126e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   51270:	2300      	movs	r3, #0
   51272:	6083      	str	r3, [r0, #8]
}
   51274:	bd08      	pop	{r3, pc}

00051276 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   51276:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   5127a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   5127e:	4283      	cmp	r3, r0
		return b2 - b1;
   51280:	bf14      	ite	ne
   51282:	1ac0      	subne	r0, r0, r3
	return 0;
   51284:	2000      	moveq	r0, #0
}
   51286:	4770      	bx	lr

00051288 <z_unpend_thread_no_timeout>:
{
   51288:	b508      	push	{r3, lr}
	__asm__ volatile(
   5128a:	f04f 0320 	mov.w	r3, #32
   5128e:	f3ef 8111 	mrs	r1, BASEPRI
   51292:	f383 8812 	msr	BASEPRI_MAX, r3
   51296:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   5129a:	f7ff ffe2 	bl	51262 <unpend_thread_no_timeout>
	__asm__ volatile(
   5129e:	f381 8811 	msr	BASEPRI, r1
   512a2:	f3bf 8f6f 	isb	sy
}
   512a6:	bd08      	pop	{r3, pc}

000512a8 <z_unpend_thread>:
{
   512a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   512aa:	f04f 0320 	mov.w	r3, #32
   512ae:	f3ef 8411 	mrs	r4, BASEPRI
   512b2:	f383 8812 	msr	BASEPRI_MAX, r3
   512b6:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   512ba:	f7ff ffd2 	bl	51262 <unpend_thread_no_timeout>
	__asm__ volatile(
   512be:	f384 8811 	msr	BASEPRI, r4
   512c2:	f3bf 8f6f 	isb	sy
   512c6:	3018      	adds	r0, #24
}
   512c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   512cc:	f000 b8d5 	b.w	5147a <z_abort_timeout>

000512d0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   512d0:	4603      	mov	r3, r0
   512d2:	b920      	cbnz	r0, 512de <z_reschedule_irqlock+0xe>
   512d4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   512d8:	b90a      	cbnz	r2, 512de <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   512da:	f7db bc57 	b.w	2cb8c <arch_swap>
   512de:	f383 8811 	msr	BASEPRI, r3
   512e2:	f3bf 8f6f 	isb	sy
}
   512e6:	4770      	bx	lr

000512e8 <z_reschedule_unlocked>:
	__asm__ volatile(
   512e8:	f04f 0320 	mov.w	r3, #32
   512ec:	f3ef 8011 	mrs	r0, BASEPRI
   512f0:	f383 8812 	msr	BASEPRI_MAX, r3
   512f4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   512f8:	f7ff bfea 	b.w	512d0 <z_reschedule_irqlock>

000512fc <z_priq_dumb_best>:
	return list->head == list;
   512fc:	6803      	ldr	r3, [r0, #0]
}
   512fe:	4298      	cmp	r0, r3
   51300:	bf14      	ite	ne
   51302:	4618      	movne	r0, r3
   51304:	2000      	moveq	r0, #0
   51306:	4770      	bx	lr

00051308 <z_ready_thread>:
{
   51308:	b510      	push	{r4, lr}
   5130a:	f04f 0320 	mov.w	r3, #32
   5130e:	f3ef 8411 	mrs	r4, BASEPRI
   51312:	f383 8812 	msr	BASEPRI_MAX, r3
   51316:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   5131a:	f7f7 fde5 	bl	48ee8 <ready_thread>
	__asm__ volatile(
   5131e:	f384 8811 	msr	BASEPRI, r4
   51322:	f3bf 8f6f 	isb	sy
}
   51326:	bd10      	pop	{r4, pc}

00051328 <z_thread_timeout>:
{
   51328:	b538      	push	{r3, r4, r5, lr}
   5132a:	4601      	mov	r1, r0
	__asm__ volatile(
   5132c:	f04f 0320 	mov.w	r3, #32
   51330:	f3ef 8511 	mrs	r5, BASEPRI
   51334:	f383 8812 	msr	BASEPRI_MAX, r3
   51338:	f3bf 8f6f 	isb	sy
		if (!killed) {
   5133c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   51340:	f013 0f28 	tst.w	r3, #40	; 0x28
   51344:	d110      	bne.n	51368 <z_thread_timeout+0x40>
			if (thread->base.pended_on != NULL) {
   51346:	f850 3c10 	ldr.w	r3, [r0, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   5134a:	f1a0 0418 	sub.w	r4, r0, #24
			if (thread->base.pended_on != NULL) {
   5134e:	b113      	cbz	r3, 51356 <z_thread_timeout+0x2e>
				unpend_thread_no_timeout(thread);
   51350:	4620      	mov	r0, r4
   51352:	f7ff ff86 	bl	51262 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   51356:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   5135a:	f023 0314 	bic.w	r3, r3, #20
   5135e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   51362:	4620      	mov	r0, r4
   51364:	f7f7 fdc0 	bl	48ee8 <ready_thread>
	__asm__ volatile(
   51368:	f385 8811 	msr	BASEPRI, r5
   5136c:	f3bf 8f6f 	isb	sy
}
   51370:	bd38      	pop	{r3, r4, r5, pc}

00051372 <add_to_waitq_locked>:
{
   51372:	b538      	push	{r3, r4, r5, lr}
   51374:	4604      	mov	r4, r0
   51376:	460d      	mov	r5, r1
	unready_thread(thread);
   51378:	f7f7 fe08 	bl	48f8c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   5137c:	7b63      	ldrb	r3, [r4, #13]
   5137e:	f043 0302 	orr.w	r3, r3, #2
   51382:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   51384:	b195      	cbz	r5, 513ac <add_to_waitq_locked+0x3a>
   51386:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   51388:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5138a:	429d      	cmp	r5, r3
   5138c:	d015      	beq.n	513ba <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   5138e:	b1a3      	cbz	r3, 513ba <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   51390:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   51394:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   51398:	4291      	cmp	r1, r2
   5139a:	d008      	beq.n	513ae <add_to_waitq_locked+0x3c>
		return b2 - b1;
   5139c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   5139e:	2a00      	cmp	r2, #0
   513a0:	dd05      	ble.n	513ae <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   513a2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   513a4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   513a8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   513aa:	605c      	str	r4, [r3, #4]
}
   513ac:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   513ae:	686a      	ldr	r2, [r5, #4]
   513b0:	4293      	cmp	r3, r2
   513b2:	d002      	beq.n	513ba <add_to_waitq_locked+0x48>
   513b4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   513b6:	2b00      	cmp	r3, #0
   513b8:	d1ec      	bne.n	51394 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   513ba:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   513bc:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   513c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   513c2:	606c      	str	r4, [r5, #4]
}
   513c4:	e7f2      	b.n	513ac <add_to_waitq_locked+0x3a>

000513c6 <z_unpend1_no_timeout>:
{
   513c6:	b510      	push	{r4, lr}
	__asm__ volatile(
   513c8:	f04f 0320 	mov.w	r3, #32
   513cc:	f3ef 8411 	mrs	r4, BASEPRI
   513d0:	f383 8812 	msr	BASEPRI_MAX, r3
   513d4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   513d8:	f7ff ff90 	bl	512fc <z_priq_dumb_best>
		if (thread != NULL) {
   513dc:	4601      	mov	r1, r0
   513de:	b108      	cbz	r0, 513e4 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   513e0:	f7ff ff3f 	bl	51262 <unpend_thread_no_timeout>
	__asm__ volatile(
   513e4:	f384 8811 	msr	BASEPRI, r4
   513e8:	f3bf 8f6f 	isb	sy
}
   513ec:	4608      	mov	r0, r1
   513ee:	bd10      	pop	{r4, pc}

000513f0 <z_unpend_first_thread>:
{
   513f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   513f2:	f04f 0320 	mov.w	r3, #32
   513f6:	f3ef 8511 	mrs	r5, BASEPRI
   513fa:	f383 8812 	msr	BASEPRI_MAX, r3
   513fe:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   51402:	f7ff ff7b 	bl	512fc <z_priq_dumb_best>
		if (thread != NULL) {
   51406:	4604      	mov	r4, r0
   51408:	b120      	cbz	r0, 51414 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   5140a:	f7ff ff2a 	bl	51262 <unpend_thread_no_timeout>
   5140e:	3018      	adds	r0, #24
   51410:	f000 f833 	bl	5147a <z_abort_timeout>
	__asm__ volatile(
   51414:	f385 8811 	msr	BASEPRI, r5
   51418:	f3bf 8f6f 	isb	sy
}
   5141c:	4620      	mov	r0, r4
   5141e:	bd38      	pop	{r3, r4, r5, pc}

00051420 <z_unpend_all>:
{
   51420:	b538      	push	{r3, r4, r5, lr}
   51422:	4605      	mov	r5, r0
	int need_sched = 0;
   51424:	2000      	movs	r0, #0
	return list->head == list;
   51426:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   51428:	42a5      	cmp	r5, r4
   5142a:	d000      	beq.n	5142e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   5142c:	b904      	cbnz	r4, 51430 <z_unpend_all+0x10>
}
   5142e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   51430:	4620      	mov	r0, r4
   51432:	f7ff ff39 	bl	512a8 <z_unpend_thread>
		z_ready_thread(thread);
   51436:	4620      	mov	r0, r4
   51438:	f7ff ff66 	bl	51308 <z_ready_thread>
		need_sched = 1;
   5143c:	2001      	movs	r0, #1
   5143e:	e7f2      	b.n	51426 <z_unpend_all+0x6>

00051440 <z_sched_wake>:
{
   51440:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   51442:	f04f 0320 	mov.w	r3, #32
   51446:	f3ef 8511 	mrs	r5, BASEPRI
   5144a:	f383 8812 	msr	BASEPRI_MAX, r3
   5144e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   51452:	f7ff ff53 	bl	512fc <z_priq_dumb_best>
		if (thread != NULL) {
   51456:	4604      	mov	r4, r0
   51458:	b150      	cbz	r0, 51470 <z_sched_wake+0x30>
   5145a:	67c1      	str	r1, [r0, #124]	; 0x7c
   5145c:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   5145e:	f7ff ff00 	bl	51262 <unpend_thread_no_timeout>
   51462:	3018      	adds	r0, #24
   51464:	f000 f809 	bl	5147a <z_abort_timeout>
			ready_thread(thread);
   51468:	4620      	mov	r0, r4
   5146a:	f7f7 fd3d 	bl	48ee8 <ready_thread>
			ret = true;
   5146e:	2001      	movs	r0, #1
	__asm__ volatile(
   51470:	f385 8811 	msr	BASEPRI, r5
   51474:	f3bf 8f6f 	isb	sy
}
   51478:	bd38      	pop	{r3, r4, r5, pc}

0005147a <z_abort_timeout>:
{
   5147a:	b510      	push	{r4, lr}
	__asm__ volatile(
   5147c:	f04f 0220 	mov.w	r2, #32
   51480:	f3ef 8411 	mrs	r4, BASEPRI
   51484:	f382 8812 	msr	BASEPRI_MAX, r2
   51488:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   5148c:	6803      	ldr	r3, [r0, #0]
   5148e:	b13b      	cbz	r3, 514a0 <z_abort_timeout+0x26>
			remove_timeout(to);
   51490:	f7f7 ffb0 	bl	493f4 <remove_timeout>
			ret = 0;
   51494:	2000      	movs	r0, #0
	__asm__ volatile(
   51496:	f384 8811 	msr	BASEPRI, r4
   5149a:	f3bf 8f6f 	isb	sy
}
   5149e:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   514a0:	f06f 0015 	mvn.w	r0, #21
   514a4:	e7f7      	b.n	51496 <z_abort_timeout+0x1c>

000514a6 <z_get_next_timeout_expiry>:
{
   514a6:	b510      	push	{r4, lr}
	__asm__ volatile(
   514a8:	f04f 0320 	mov.w	r3, #32
   514ac:	f3ef 8411 	mrs	r4, BASEPRI
   514b0:	f383 8812 	msr	BASEPRI_MAX, r3
   514b4:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   514b8:	f7f7 ffb6 	bl	49428 <next_timeout>
	__asm__ volatile(
   514bc:	f384 8811 	msr	BASEPRI, r4
   514c0:	f3bf 8f6f 	isb	sy
}
   514c4:	bd10      	pop	{r4, pc}

000514c6 <z_set_timeout_expiry>:
{
   514c6:	b570      	push	{r4, r5, r6, lr}
   514c8:	4604      	mov	r4, r0
   514ca:	460e      	mov	r6, r1
	__asm__ volatile(
   514cc:	f04f 0320 	mov.w	r3, #32
   514d0:	f3ef 8511 	mrs	r5, BASEPRI
   514d4:	f383 8812 	msr	BASEPRI_MAX, r3
   514d8:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   514dc:	f7f7 ffa4 	bl	49428 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   514e0:	2801      	cmp	r0, #1
   514e2:	dd05      	ble.n	514f0 <z_set_timeout_expiry+0x2a>
   514e4:	42a0      	cmp	r0, r4
   514e6:	db03      	blt.n	514f0 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   514e8:	4631      	mov	r1, r6
   514ea:	4620      	mov	r0, r4
   514ec:	f7f4 ff16 	bl	4631c <sys_clock_set_timeout>
	__asm__ volatile(
   514f0:	f385 8811 	msr	BASEPRI, r5
   514f4:	f3bf 8f6f 	isb	sy
}
   514f8:	bd70      	pop	{r4, r5, r6, pc}

000514fa <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   514fa:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   514fc:	f7f8 f8b6 	bl	4966c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   51500:	bd08      	pop	{r3, pc}

00051502 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   51502:	f7f8 b8b3 	b.w	4966c <sys_clock_tick_get>

00051506 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   51506:	b108      	cbz	r0, 5150c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   51508:	f7db bdfa 	b.w	2d100 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   5150c:	4770      	bx	lr

0005150e <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   5150e:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   51510:	1c4b      	adds	r3, r1, #1
   51512:	bf08      	it	eq
   51514:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   51518:	4604      	mov	r4, r0
   5151a:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   5151c:	d013      	beq.n	51546 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   5151e:	ea54 0105 	orrs.w	r1, r4, r5
   51522:	d103      	bne.n	5152c <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   51524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   51528:	f7f8 b8a0 	b.w	4966c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   5152c:	f06f 0101 	mvn.w	r1, #1
   51530:	1a0a      	subs	r2, r1, r0
   51532:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   51536:	eb61 0305 	sbc.w	r3, r1, r5
   5153a:	2a00      	cmp	r2, #0
   5153c:	f173 0100 	sbcs.w	r1, r3, #0
   51540:	db02      	blt.n	51548 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   51542:	4610      	mov	r0, r2
   51544:	4619      	mov	r1, r3
}
   51546:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   51548:	f7f8 f890 	bl	4966c <sys_clock_tick_get>
   5154c:	2c01      	cmp	r4, #1
   5154e:	f175 0300 	sbcs.w	r3, r5, #0
   51552:	bfbc      	itt	lt
   51554:	2401      	movlt	r4, #1
   51556:	2500      	movlt	r5, #0
   51558:	1820      	adds	r0, r4, r0
   5155a:	eb45 0101 	adc.w	r1, r5, r1
   5155e:	e7f2      	b.n	51546 <sys_clock_timeout_end_calc+0x38>

00051560 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   51560:	b510      	push	{r4, lr}
   51562:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   51564:	f7ff ff89 	bl	5147a <z_abort_timeout>

	if (inactive) {
   51568:	b9b0      	cbnz	r0, 51598 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   5156a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   5156c:	b10b      	cbz	r3, 51572 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   5156e:	4620      	mov	r0, r4
   51570:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   51572:	f104 0018 	add.w	r0, r4, #24
   51576:	f7ff ff26 	bl	513c6 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   5157a:	b168      	cbz	r0, 51598 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   5157c:	f7ff fec4 	bl	51308 <z_ready_thread>
	__asm__ volatile(
   51580:	f04f 0320 	mov.w	r3, #32
   51584:	f3ef 8011 	mrs	r0, BASEPRI
   51588:	f383 8812 	msr	BASEPRI_MAX, r3
   5158c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   51590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   51594:	f7ff be9c 	b.w	512d0 <z_reschedule_irqlock>
   51598:	bd10      	pop	{r4, pc}

0005159a <clear_event_registrations>:
	while (num_events--) {
   5159a:	2314      	movs	r3, #20
{
   5159c:	b570      	push	{r4, r5, r6, lr}
   5159e:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   515a2:	2400      	movs	r4, #0
   515a4:	2601      	movs	r6, #1
	while (num_events--) {
   515a6:	4281      	cmp	r1, r0
   515a8:	d100      	bne.n	515ac <clear_event_registrations+0x12>
}
   515aa:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   515ac:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   515b0:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   515b4:	f003 031f 	and.w	r3, r3, #31
   515b8:	2b08      	cmp	r3, #8
   515ba:	d80d      	bhi.n	515d8 <clear_event_registrations+0x3e>
   515bc:	fa06 f303 	lsl.w	r3, r6, r3
   515c0:	f413 7f8b 	tst.w	r3, #278	; 0x116
   515c4:	d008      	beq.n	515d8 <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   515c6:	f851 3c14 	ldr.w	r3, [r1, #-20]
   515ca:	b12b      	cbz	r3, 515d8 <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   515cc:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   515d0:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   515d2:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   515d4:	e941 4405 	strd	r4, r4, [r1, #-20]
	__asm__ volatile(
   515d8:	f382 8811 	msr	BASEPRI, r2
   515dc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   515e0:	f04f 0320 	mov.w	r3, #32
   515e4:	f3ef 8211 	mrs	r2, BASEPRI
   515e8:	f383 8812 	msr	BASEPRI_MAX, r3
   515ec:	f3bf 8f6f 	isb	sy
   515f0:	3914      	subs	r1, #20
   515f2:	e7d8      	b.n	515a6 <clear_event_registrations+0xc>

000515f4 <add_event>:
{
   515f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   515f6:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   515f8:	e9d0 2300 	ldrd	r2, r3, [r0]
   515fc:	4290      	cmp	r0, r2
   515fe:	4604      	mov	r4, r0
   51600:	460d      	mov	r5, r1
   51602:	d105      	bne.n	51610 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   51604:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   51606:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   5160a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   5160c:	6065      	str	r5, [r4, #4]
}
   5160e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   51610:	2b00      	cmp	r3, #0
   51612:	d0f7      	beq.n	51604 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   51614:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   51616:	b100      	cbz	r0, 5161a <add_event+0x26>
   51618:	3860      	subs	r0, #96	; 0x60
   5161a:	b107      	cbz	r7, 5161e <add_event+0x2a>
   5161c:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   5161e:	4639      	mov	r1, r7
   51620:	f7ff fe29 	bl	51276 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   51624:	2800      	cmp	r0, #0
   51626:	dced      	bgt.n	51604 <add_event+0x10>
	return list->head == list;
   51628:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   5162a:	42b4      	cmp	r4, r6
   5162c:	d0ea      	beq.n	51604 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   5162e:	2e00      	cmp	r6, #0
   51630:	d0e8      	beq.n	51604 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   51632:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   51634:	b101      	cbz	r1, 51638 <add_event+0x44>
   51636:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   51638:	4638      	mov	r0, r7
   5163a:	f7ff fe1c 	bl	51276 <z_sched_prio_cmp>
   5163e:	2800      	cmp	r0, #0
   51640:	dd05      	ble.n	5164e <add_event+0x5a>
	sys_dnode_t *const prev = successor->prev;
   51642:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   51644:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   51648:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   5164a:	6075      	str	r5, [r6, #4]
			return;
   5164c:	e7df      	b.n	5160e <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   5164e:	6863      	ldr	r3, [r4, #4]
   51650:	429e      	cmp	r6, r3
   51652:	d0d7      	beq.n	51604 <add_event+0x10>
   51654:	6836      	ldr	r6, [r6, #0]
   51656:	e7ea      	b.n	5162e <add_event+0x3a>

00051658 <register_events>:
{
   51658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   5165c:	2600      	movs	r6, #0
{
   5165e:	4689      	mov	r9, r1
   51660:	4615      	mov	r5, r2
   51662:	469a      	mov	sl, r3
   51664:	4604      	mov	r4, r0
	int events_registered = 0;
   51666:	4637      	mov	r7, r6
	event->poller = NULL;
   51668:	46b0      	mov	r8, r6
	for (int ii = 0; ii < num_events; ii++) {
   5166a:	454e      	cmp	r6, r9
   5166c:	db02      	blt.n	51674 <register_events+0x1c>
}
   5166e:	4638      	mov	r0, r7
   51670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51674:	f04f 0320 	mov.w	r3, #32
   51678:	f3ef 8b11 	mrs	fp, BASEPRI
   5167c:	f383 8812 	msr	BASEPRI_MAX, r3
   51680:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   51684:	7b63      	ldrb	r3, [r4, #13]
   51686:	f003 031f 	and.w	r3, r3, #31
   5168a:	3b01      	subs	r3, #1
   5168c:	2b07      	cmp	r3, #7
   5168e:	d80e      	bhi.n	516ae <register_events+0x56>
   51690:	e8df f003 	tbb	[pc, r3]
   51694:	090d041e 	.word	0x090d041e
   51698:	240d0d0d 	.word	0x240d0d0d
		if (k_sem_count_get(event->sem) > 0U) {
   5169c:	6923      	ldr	r3, [r4, #16]
   5169e:	689b      	ldr	r3, [r3, #8]
   516a0:	b12b      	cbz	r3, 516ae <register_events+0x56>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   516a2:	2302      	movs	r3, #2
   516a4:	e01f      	b.n	516e6 <register_events+0x8e>
		if (!k_queue_is_empty(event->queue)) {
   516a6:	6923      	ldr	r3, [r4, #16]
   516a8:	681b      	ldr	r3, [r3, #0]
   516aa:	2b00      	cmp	r3, #0
   516ac:	d12d      	bne.n	5170a <register_events+0xb2>
		} else if (!just_check && poller->is_polling) {
   516ae:	f1ba 0f00 	cmp.w	sl, #0
   516b2:	d123      	bne.n	516fc <register_events+0xa4>
   516b4:	782b      	ldrb	r3, [r5, #0]
   516b6:	b30b      	cbz	r3, 516fc <register_events+0xa4>
	switch (event->type) {
   516b8:	7b63      	ldrb	r3, [r4, #13]
   516ba:	f003 031f 	and.w	r3, r3, #31
   516be:	3b01      	subs	r3, #1
   516c0:	2b07      	cmp	r3, #7
   516c2:	d82a      	bhi.n	5171a <register_events+0xc2>
   516c4:	e8df f003 	tbb	[pc, r3]
   516c8:	2329232c 	.word	0x2329232c
   516cc:	30292929 	.word	0x30292929
		if (event->signal->signaled != 0U) {
   516d0:	6923      	ldr	r3, [r4, #16]
   516d2:	689b      	ldr	r3, [r3, #8]
   516d4:	2b00      	cmp	r3, #0
   516d6:	d0ea      	beq.n	516ae <register_events+0x56>
			*state = K_POLL_STATE_SIGNALED;
   516d8:	2301      	movs	r3, #1
   516da:	e004      	b.n	516e6 <register_events+0x8e>
		if (event->msgq->used_msgs > 0) {
   516dc:	6923      	ldr	r3, [r4, #16]
   516de:	6a1b      	ldr	r3, [r3, #32]
   516e0:	2b00      	cmp	r3, #0
   516e2:	d0e4      	beq.n	516ae <register_events+0x56>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   516e4:	2310      	movs	r3, #16
	event->state |= state;
   516e6:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   516e8:	f8c4 8008 	str.w	r8, [r4, #8]
	event->state |= state;
   516ec:	f3c2 3145 	ubfx	r1, r2, #13, #6
   516f0:	430b      	orrs	r3, r1
   516f2:	f363 3252 	bfi	r2, r3, #13, #6
   516f6:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   516f8:	f885 8000 	strb.w	r8, [r5]
	__asm__ volatile(
   516fc:	f38b 8811 	msr	BASEPRI, fp
   51700:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   51704:	3601      	adds	r6, #1
   51706:	3414      	adds	r4, #20
   51708:	e7af      	b.n	5166a <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   5170a:	2304      	movs	r3, #4
   5170c:	e7eb      	b.n	516e6 <register_events+0x8e>
		add_event(&event->queue->poll_events, event, poller);
   5170e:	6920      	ldr	r0, [r4, #16]
   51710:	462a      	mov	r2, r5
   51712:	4621      	mov	r1, r4
   51714:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   51716:	f7ff ff6d 	bl	515f4 <add_event>
	event->poller = poller;
   5171a:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   5171c:	3701      	adds	r7, #1
   5171e:	e7ed      	b.n	516fc <register_events+0xa4>
		add_event(&event->signal->poll_events, event, poller);
   51720:	462a      	mov	r2, r5
   51722:	4621      	mov	r1, r4
   51724:	6920      	ldr	r0, [r4, #16]
   51726:	e7f6      	b.n	51716 <register_events+0xbe>
		add_event(&event->msgq->poll_events, event, poller);
   51728:	6920      	ldr	r0, [r4, #16]
   5172a:	462a      	mov	r2, r5
   5172c:	4621      	mov	r1, r4
   5172e:	3024      	adds	r0, #36	; 0x24
   51730:	e7f1      	b.n	51716 <register_events+0xbe>

00051732 <signal_poll_event>:
{
   51732:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   51736:	6884      	ldr	r4, [r0, #8]
{
   51738:	4605      	mov	r5, r0
   5173a:	460e      	mov	r6, r1
	if (poller != NULL) {
   5173c:	b144      	cbz	r4, 51750 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   5173e:	7863      	ldrb	r3, [r4, #1]
   51740:	2b01      	cmp	r3, #1
   51742:	d138      	bne.n	517b6 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   51744:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   51748:	f013 0302 	ands.w	r3, r3, #2
   5174c:	d10a      	bne.n	51764 <signal_poll_event+0x32>
		poller->is_polling = false;
   5174e:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   51750:	68eb      	ldr	r3, [r5, #12]
   51752:	f3c3 3245 	ubfx	r2, r3, #13, #6
   51756:	4316      	orrs	r6, r2
	event->poller = NULL;
   51758:	2000      	movs	r0, #0
	event->state |= state;
   5175a:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   5175e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   51760:	60eb      	str	r3, [r5, #12]
	return retcode;
   51762:	e00d      	b.n	51780 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   51764:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   51768:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   5176c:	f06f 0001 	mvn.w	r0, #1
   51770:	428b      	cmp	r3, r1
   51772:	bf08      	it	eq
   51774:	4282      	cmpeq	r2, r0
   51776:	d105      	bne.n	51784 <signal_poll_event+0x52>
		poller->is_polling = false;
   51778:	2300      	movs	r3, #0
   5177a:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   5177c:	f06f 000a 	mvn.w	r0, #10
}
   51780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   51784:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   51788:	4640      	mov	r0, r8
   5178a:	f7ff fd8d 	bl	512a8 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   5178e:	2e08      	cmp	r6, #8
   51790:	bf0c      	ite	eq
   51792:	f06f 0303 	mvneq.w	r3, #3
   51796:	2300      	movne	r3, #0
   51798:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   5179a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   5179e:	06db      	lsls	r3, r3, #27
   517a0:	d102      	bne.n	517a8 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   517a2:	f854 7c48 	ldr.w	r7, [r4, #-72]
   517a6:	b10f      	cbz	r7, 517ac <signal_poll_event+0x7a>
		poller->is_polling = false;
   517a8:	2300      	movs	r3, #0
   517aa:	e7d0      	b.n	5174e <signal_poll_event+0x1c>
	z_ready_thread(thread);
   517ac:	4640      	mov	r0, r8
   517ae:	f7ff fdab 	bl	51308 <z_ready_thread>
		poller->is_polling = false;
   517b2:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   517b4:	e7cc      	b.n	51750 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   517b6:	2b02      	cmp	r3, #2
   517b8:	d1f6      	bne.n	517a8 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   517ba:	7823      	ldrb	r3, [r4, #0]
   517bc:	2b00      	cmp	r3, #0
   517be:	d0c7      	beq.n	51750 <signal_poll_event+0x1e>
   517c0:	f854 7c04 	ldr.w	r7, [r4, #-4]
   517c4:	2f00      	cmp	r7, #0
   517c6:	d0f4      	beq.n	517b2 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   517c8:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   517cc:	f1a4 0914 	sub.w	r9, r4, #20
   517d0:	f104 0014 	add.w	r0, r4, #20
   517d4:	f7ff fe51 	bl	5147a <z_abort_timeout>
		twork->poll_result = 0;
   517d8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   517dc:	4649      	mov	r1, r9
   517de:	4638      	mov	r0, r7
   517e0:	f7ff fcce 	bl	51180 <k_work_submit_to_queue>
		poller->is_polling = false;
   517e4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   517e8:	e7b2      	b.n	51750 <signal_poll_event+0x1e>

000517ea <z_handle_obj_poll_events>:
	return list->head == list;
   517ea:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   517ec:	4298      	cmp	r0, r3
   517ee:	d009      	beq.n	51804 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   517f0:	e9d3 2000 	ldrd	r2, r0, [r3]
	prev->next = next;
   517f4:	6002      	str	r2, [r0, #0]
	next->prev = prev;
   517f6:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   517f8:	2200      	movs	r2, #0
	node->prev = NULL;
   517fa:	e9c3 2200 	strd	r2, r2, [r3]
		(void) signal_poll_event(poll_event, state);
   517fe:	4618      	mov	r0, r3
   51800:	f7ff bf97 	b.w	51732 <signal_poll_event>
}
   51804:	4770      	bx	lr

00051806 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   51806:	2304      	movs	r3, #4
   51808:	18d2      	adds	r2, r2, r3
{
   5180a:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   5180c:	4604      	mov	r4, r0
   5180e:	d207      	bcs.n	51820 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   51810:	2600      	movs	r6, #0
   51812:	2700      	movs	r7, #0
   51814:	e9cd 6700 	strd	r6, r7, [sp]
   51818:	4319      	orrs	r1, r3
   5181a:	f7ff fab5 	bl	50d88 <k_heap_aligned_alloc>
	if (mem == NULL) {
   5181e:	b910      	cbnz	r0, 51826 <z_heap_aligned_alloc+0x20>
		return NULL;
   51820:	2000      	movs	r0, #0
}
   51822:	b002      	add	sp, #8
   51824:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   51826:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   5182a:	e7fa      	b.n	51822 <z_heap_aligned_alloc+0x1c>

0005182c <k_free>:
	if (ptr != NULL) {
   5182c:	b120      	cbz	r0, 51838 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   5182e:	1f01      	subs	r1, r0, #4
   51830:	f850 0c04 	ldr.w	r0, [r0, #-4]
   51834:	f7ff baef 	b.w	50e16 <k_heap_free>
}
   51838:	4770      	bx	lr

0005183a <k_malloc>:
	void *ret = k_aligned_alloc(sizeof(void *), size);
   5183a:	4601      	mov	r1, r0
   5183c:	2004      	movs	r0, #4
   5183e:	f7f8 b86b 	b.w	49918 <k_aligned_alloc>

00051842 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   51842:	4770      	bx	lr

00051844 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   51844:	f7f4 bdbc 	b.w	463c0 <SystemInit>
